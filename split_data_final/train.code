from __future__ import unicode_literals
 return WEEKDAYS [ self . data . weekday ( ) ]
              self . _post , self . _files = QueryDict ( self . body , encoding = self . _encoding ) , MultiValueDict ( )
              data = self . read ( chunk_size )
                      out . write ( ' _(%s) ' % cmatch . group ( 1 ) )
  return urljoin ( self . base_url , filepath_to_uri ( name ) )
   except Exception :
 from django . utils import six
                              self . stdout . write ( "    Creating table %s\n" % model . _meta . db_table )
  class SimpleNode ( TagHelperNode ) :
                  model_list . append ( model )
 from django . core . files . uploadhandler import StopUpload , SkipFile , StopFutureHandlers
      def get_language ( ) :
      choice_input_class = RadioChoiceInput
          as_bytes = as_string
   format_locations . append ( 'django.conf.locale.%s' )
   def __deepcopy__ ( self , memo ) :
  return BoundField ( self , field , name )
 if 'error_messages' in kwargs :
                        open_tags = open_tags [ i + 1 : ]
 LockFileEx . restype = BOOL
              fixture_dirs = self . fixture_dirs
          return ZERO
 try :
  self . ignore_patterns = list ( set ( ignore_patterns ) )
                  self . stdout . write ( self . style . MIGRATE_LABEL ( "  Apply all migrations: " ) + ( ", " . join ( set ( a for a , n in targets ) ) or "(none)" ) )
              continue
              self . namespaces = [ x for x in namespaces if x ]
          db = options . get ( 'database' )
   def __repr__ ( self ) :
 super ( JsonResponse , self ) . __init__ ( content = data , ** kwargs )
 instance . keyOrder = [ ]
   if not self . dry_run :
 return field . widget . value_from_datadict ( self . data , self . files , prefix )
  getLogger = logging . getLogger
                      os . unlink ( work_file )
     class EndToken ( TokenBase ) :
 if endblock . contents not in acceptable_endblocks :
 if params . get ( 'filename' ) :
  return parser
              temp_lib = Library ( )
 if self not in state_frame :
              return SafeText ( data )
 input_type = None
                    res = func ( * self . __args , ** self . __kw )
 if '%(truncated_text)s' in truncate :
          return unbound . im_func
  if errors :
 return do_ifequal ( parser , token , True )
     @ register . filter ( is_safe = True )
  if current_app and current_app in app_list :
                          field_desc += '  # ' + ' ' . join ( comment_notes )
 from email . header import Header
    for app_name , model_list in manifest . items ( ) :
         model_list = [ ]
 cmp_fmts = list ( self . compression_formats . keys ( ) ) if cmp_fmt is None else [ cmp_fmt ]
  except ( ImportError , AttributeError ) :
   self . extend_nodelist ( nodelist , compiled_result , token )
                  raise
  MAXSIZE = sys . maxsize
 from django . core . handlers import base
          if value in self . empty_values and self . required :
 try :
   def print_help ( self , prog_name , subcommand ) :
          raise TemplateSyntaxError ( "'for' statements should use the format"  " 'for x in y': %s" % token . contents )
          if proto >= 2 :
   field = Model . _meta . get_field ( field_name )
          return settings . LANGUAGE_CODE
          if six . PY3 :
  from django . core . management . base import AppCommand
              encoding = self . encoding or settings . DEFAULT_CHARSET
       if hasattr ( os . path , 'samefile' ) :
 for chunk in content . chunks ( ) :
 from django . forms . widgets import Media , MediaDefiningClass , TextInput , Textarea
              if self . _delegate_bytes :
                      pass
 from django . utils import dateformat , numberformat , datetime_safe
     class BaseArchive ( object ) :
              return True
     def Deserializer ( stream_or_string , ** options ) :
                  continue
   self . run_shell ( shell = options [ 'interface' ] )
  except ( AttributeError , TypeError ) :
 self . content_type = content_type
    class EmailField ( CharField ) :
 try :
                      g = imatch . group ( 1 )
    sign , digits , exponent = d . quantize ( exp , ROUND_HALF_UP ,  Context ( prec = prec ) ) . as_tuple ( )
 return forms
 self . parent_name = parent_name
 return s [ 1 : - 1 ] . replace ( r'\%s' % quote , quote ) . replace ( r'\\' , '\\' )
  elif 'HTTP_HOST' in self . META :
      if not hasattr ( self , '_ordering' ) :
     class TypedChoiceField ( ChoiceField ) :
 if not extra_context :
 return "%s: %s%s%s" % ( obj , id , self . msg , hint )
          for k , v in self . _iteritems ( ) :
  except ImportError :
  def __init__ ( self , data , encoder = DjangoJSONEncoder , safe = True , ** kwargs ) :
 return mark_safe ( value )
    def send_mass_mail ( datatuple , fail_silently = False , auth_user = None ,  auth_password = None , connection = None ) :
      def inner ( self , * args ) :
  if sep is None :
              error = { field or NON_FIELD_ERRORS : error . error_list }
              break
                      encoded = '"' + encoded + '"'
                          logger . level = logging . NOTSET
    to_delete . add ( model )
 for i in range ( 0 , self . total_form_count ( ) ) :
    _PROTECTED_TYPES = six . integer_types + ( type ( None ) , float , Decimal ,  datetime . datetime , datetime . date , datetime . time )
    def get_str_from_wsgi ( environ , key , default ) :
                  return d [ key ]
          lbp = bp
                  key += item
              final_attrs [ 'checked' ] = 'checked'
  self . DSTDIFF = self . DSTOFFSET - self . STDOFFSET
 BASE56_ALPHABET = '23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz'
  from django . db . models . fields . related import ManyToManyField
  else :
          return 'form'
    class InputStreamExhausted ( Exception ) :
          print ( message )
  if settings . USE_ETAGS and not response . has_header ( 'ETag' ) :
  else :
    def set_signed_cookie ( self , key , value , salt = '' , ** kwargs ) :
    if weight >= 6 :
 for i , item in enumerate ( values ) :
                          try :
  with transaction . atomic ( using = connection . alias , savepoint = connection . features . can_rollback_ddl ) :
              raise IOError ( "%s exists and is not a directory." % directory )
                  self . stdout . write ( "Installed %d object(s) (of %d) from %d fixture(s)" %  ( self . loaded_object_count , self . fixture_object_count , self . fixture_count ) )
     return Operator
   def __enter__ ( self ) :
  else :
 return errors
 line = line [ space : ]
 if path is None :
 code = 'invalid'
 default_error_messages = {  'invalid' : _ ( "No file was submitted. Check the encoding type on the form." ) ,  'missing' : _ ( "No file was submitted." ) ,  'empty' : _ ( "The submitted file is empty." ) ,  'max_length' : ungettext_lazy (  'Ensure this filename has at most %(max)d character (it has %(length)d).' ,  'Ensure this filename has at most %(max)d characters (it has %(length)d).' ,  'max' ) ,  'contradiction' : _ ( 'Please either submit a file or check the clear checkbox, not both.' )  }
 if isinstance ( template_name , ( list , tuple ) ) :
 def __init__ ( self , cmd , ** kwargs ) :
  except ValueError :
              targets = executor . loader . graph . leaf_nodes ( )
          global _supported
 attachment . set_payload ( content )
     def get_path_info ( environ ) :
          return "<WithNode>"
  else :
 d = Decimal ( input_val )
 parse = sys . modules [ __name__ + ".moves.urllib_parse" ]
  final_attrs = self . build_attrs ( attrs )
   class EmailBackend ( BaseEmailBackend ) :
                      self . stdout . write ( self . style . MIGRATE_SUCCESS ( " FAKED" ) )
   stream = self . _stream
 __hash__ = new_method_proxy ( hash )
                      output . append ( error_row % force_text ( bf_errors ) )
 self . name = name
 while path :
 for v in self . validators :
 pass
    else :
     class CachedDnsName ( object ) :
              raise CommandError ( msg )
   def _get_choices ( self ) :
    class Lexer ( object ) :
                  return pickle . loads ( pickled )
  handler . addQuickElement ( "lastBuildDate" , rfc2822_date ( self . latest_post_date ( ) ) )
  msg += "System check identified %s (%s silenced)." % (  "no issues" if visible_issue_count == 0 else  "1 issue" if visible_issue_count == 1 else  "%s issues" % visible_issue_count ,  len ( all_issues ) - visible_issue_count ,  )
  except http_cookies . CookieError :
                       obj_pk = field . rel . to . _meta . pk . to_python ( n . getAttribute ( 'pk' ) )
  else :
  def __init__ ( self , * args , ** kwargs ) :
                          var_obj = None
                  if old_field_name :
  bits = arg . split ( ',' )
              ret = fcntl . flock ( _fd ( f ) , fcntl . LOCK_UN )
 clean = lambda self , x : x
 try :
                          number_value = rhs [ number ]
 from django . utils import six
  except UnicodeError :
              return self . empty_form . is_multipart ( )
    def __exit__ ( self , exc_type , exc_value , traceback ) :
   def copy ( self ) :
 for item , args in zip ( result , result_args ) :
   def delete_cookie ( self , key , path = '/' , domain = None ) :
  wrap = allow_lazy ( wrap , six . text_type )
 i = self . pointer
  else :
   def __repr__ ( self ) :
 try :
              continue
 for i , v in enumerate ( value ) :
 return out
          super ( EntitiesForbidden , self ) . __init__ ( )
 from __future__ import unicode_literals
  if dklen > ( 2 ** 32 - 1 ) * hlen :
 self . prefix = prefix
          if settings . FILE_UPLOAD_TEMP_DIR :
                  data [ field . attname ] = self . _handle_fk_field_node ( field_node , field )
 import re
                  raise
  result . queryset = result . queryset
  urlquote = allow_lazy ( urlquote , six . text_type )
  except smtplib . SMTPException :
           if name is not None :
  else :
 parser . StartDoctypeDeclHandler = self . start_doctype_decl
          if regex is not None :
          from django . conf import settings
 from django . utils . deprecation import RemovedInDjango19Warning
              if self . _wrapped is empty :
 if limit_choices_to is not None :
              class ConvertingDict ( dict ) :
    if not os . path . isdir ( directory ) :
 bits = bits [ 2 : ]
   DEFAULT_LOCALE_ENCODING = get_system_encoding ( )
   for app_config in reversed ( list ( apps . get_app_configs ( ) ) ) :
          nodelist_false = parser . parse ( ( 'endifchanged' , ) )
           fks_to_parent = [  f for f in opts . fields  if isinstance ( f , ForeignKey )  and ( f . rel . to == parent_model  or f . rel . to in parent_model . _meta . get_parent_list ( ) )  ]
 if m :
      pass
                  os . makedirs ( top_dir )
 reporter = ExceptionReporter ( request , is_email = True , * exc_info )
          attrs = super ( CharField , self ) . widget_attrs ( widget )
              pass
 return self . __to_language
   def lists ( self ) :
   loop_dict = context [ 'forloop' ] = { 'parentloop' : parentloop }
 default_error_messages = {  'invalid_choice' : _ ( 'The inline foreign key did not match the parent instance primary key.' ) ,  }
   @ register ( Tags . models )
                      for fmatch in constant_re . findall ( t . contents ) :
                          raise ValueError ( 'Unable to configure root '  'logger: %s' % e )
   def reverse ( self , lookup_view , * args , ** kwargs ) :
   class MLStripper ( HTMLParser ) :
 collect . extend ( _builtin_context_processors )
 return func
  value_converters = {  'ext' : 'ext_convert' ,  'cfg' : 'cfg_convert' ,  }
 LOCK_SH = fcntl . LOCK_SH
  __all__ = [  'CheckMessage' ,  'Debug' , 'Info' , 'Warning' , 'Error' , 'Critical' ,  'DEBUG' , 'INFO' , 'WARNING' , 'ERROR' , 'CRITICAL' ,  'register' , 'run_checks' , 'tag_exists' , 'Tags' ,  ]
    def load_template ( self , template_name , template_dirs = None ) :
 class Operator ( TokenBase ) :
   def url ( self , name ) :
   def tags_available ( self ) :
      fs_encoding = sys . getfilesystemencoding ( ) or sys . getdefaultencoding ( )
  tzinfo = get_fixed_timezone ( offset )
  output = [ ]
              reloader_thread ( )
 self . xml . endElement ( "natural" )
    def handle_extensions ( extensions = ( 'html' , ) , ignored = ( 'py' , ) ) :
 return MONTHS_3 [ self . data . month ]
          handler . addQuickElement ( "title" , item [ 'title' ] )
 from django . utils . datastructures import MultiValueDict , ImmutableList
 try :
   def emit ( self , record ) :
 self . tag ( function_name , compile_func )
           indent = self . options . get ( "indent" )
              return r'\"'
import sys
              value = self . _empty_value
  if getattr ( func , 'needs_autoescape' , False ) :
          kw . extend ( [ d . hour , d . minute , d . second , d . microsecond , d . tzinfo ] )
 translation = self . _new_gnu_trans ( localedir )
 if os . path . isdir ( app_dir ) :
 plist . append ( f . strip ( ) )
 import os
              warnings . warn (  "AppCommand.handle_app() is superseded by "  "AppCommand.handle_app_config()." ,  RemovedInDjango19Warning , stacklevel = 2 )
     if self . merge and conflicts :
              self . connection = None
   def unlock ( f ) :
              year_val = month_val = day_val = None
   template_dir = self . handle_template ( options [ 'template' ] ,  base_subdir )
 from __future__ import unicode_literals
          self . stream = kwargs . pop ( 'stream' , sys . stdout )
      buf = StreamingBuffer ( )
              if self . decimal_places is not None :
                  if value == k or text_value == force_text ( k ) :
  else :
 return self . _open ( name , mode )
          key = self . make_key ( key , version = version )
                  self . encoding = content_params [ 'charset' ]
   def utcoffset ( self , dt ) :
   @ property
          self . name = name
 from django . utils . six . moves import copyreg
 from email . mime . text import MIMEText
 link_prev [ NEXT ] = link_next
 m = dict ( zip ( new_keys , keys ) )
 user_regex = re . compile (  r"(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*$"  r'|^"([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-\011\013\014\016-\177])*"$)' ,  re . IGNORECASE )
    if is_protected_type ( value ) :
  try :
     class Node ( object ) :
    def int_to_base36 ( i ) :
 loaded_objects_in_fixture = 0
 default_error_messages = {  'invalid_choice' : _ ( 'Select a valid choice. %(value)s is not one of the available choices.' ) ,  'invalid_list' : _ ( 'Enter a list of values.' ) ,  }
    def add_item_elements ( self , handler , item ) :
    DjangoSafeDumper . add_representer ( decimal . Decimal , DjangoSafeDumper . represent_decimal )
              if key not in default_settings :
              self . dicts . append ( value )
                  try :
                      return False
 context [ 'block' ] = block
 MONTHS_3_REV = {  'jan' : 1 , 'feb' : 2 , 'mar' : 3 , 'apr' : 4 , 'may' : 5 , 'jun' : 6 , 'jul' : 7 , 'aug' : 8 ,  'sep' : 9 , 'oct' : 10 , 'nov' : 11 , 'dec' : 12  }
 if is_templatized :
  self . choices = choices
 from django . template . smartif import IfParser , Literal
              return ugettext ( "Please correct the duplicate data for %(field)s, "  "which must be unique." ) % {  "field" : get_text_list ( unique_check , six . text_type ( _ ( "and" ) ) ) ,  }
 if cache_timeout is None :
          now = datetime . datetime . now ( utc if is_aware ( d ) else None )
  from django . utils import six
  return self . __cast ( ) < other
   def _read_limited ( self , size = None ) :
  else :
          raise TemplateSyntaxError ( "'%s' takes at least one argument"  " (path to a view)" % bits [ 0 ] )
          self . _cache . flush_all ( )
     class SafeMIMEMultipart ( MIMEMixin , MIMEMultipart ) :
             chunk_size = 1024
                                      for sql in custom_sql :
 return base_lang in settings . LANGUAGES_BIDI
      def render_node ( self , node , context ) :
                  self . stream . write ( " " )
          sep = len ( hextet [ 0 ] . split ( ':' ) ) + len ( hextet [ 1 ] . split ( ':' ) )
    def no_style ( ) :
  check_for_migrations ( app_config , connection )
 response = self . handle_uncaught_exception ( request , resolver , sys . exc_info ( ) )
              return ipv4_unpacked
              return t . to_language ( )
   def list ( self ) :
  def __init__ ( self , queryset , cache_choices = None , required = True ,  widget = None , label = None , initial = None ,  help_text = '' , * args , ** kwargs ) :
  else :
                              title += " (%s squashed migrations)" % len ( graph . nodes [ plan_node ] . replaces )
              self . __starttag_text = None
      operations = [ ]
              raise CommandError ( "%r conflicts with the name of an existing "  "Python module and cannot be used as an app "  "name. Please try another name." % app_name )
              return list ( self . itervalues ( ) )
              field = f . name
 from django . utils import six
  return ''
              self . writer_leaves ( )
   def save ( self , save_m2m = True , using = None ) :
   user_part , domain_part = value . rsplit ( '@' , 1 )
    @ register . filter ( is_safe = False )
 if not content_type . startswith ( 'multipart/' ) :
 from django . utils . _os import npath , upath
 shells = [ 'ipython' , 'bpython' ]
  self . content = content
 self . filters . update ( lib . filters )
  if values is None :
 if refto in seen_models :
    NON_FIELD_ERRORS = '__all__'
 output , hidden_fields = [ ] , [ ]
       if sys . version_info [ : 2 ] >= ( 3 , 3 ) :
   def add_root_elements ( self , handler ) :
          return self . has_key ( key )
   path , module = name . rsplit ( '.' , 1 )
 handler . startElement ( "rss" , self . rss_attributes ( ) )
              self . file . __exit__ ( exc , value , tb )
 if os . path . sep in fixture_name :
          mod = import_module ( taglib_module )
 use_natural_primary_keys = options . get ( 'use_natural_primary_keys' )
 return len ( self . non_form_errors ( ) ) + sum ( len ( form_errors ) for form_errors in self . errors )
   def _helper ( list_ , tabs = 1 ) :
                  step = 'any'
  i += 1
                  return True
              if row [ 4 ] is None or row [ 5 ] is None :
 def timesince_filter ( value , arg = None ) :
 if not email_message . recipients ( ) :
              raise SuspiciousFileOperation ( "Attempted access to '%s' denied." % name )
                  serializers . get_serializer ( format )
      def __init__ ( self , path , match = None , recursive = False , allow_files = True ,  allow_folders = False , required = True , widget = None , label = None ,  initial = None , help_text = '' , * args , ** kwargs ) :
          return { }
 token = parser . next_token ( )
              if t . token_type == TOKEN_BLOCK and t . contents == 'endcomment' :
 self . keyOrder . remove ( result [ 0 ] )
 code = 'min_value'
                          formatters [ name ] = self . configure_formatter (  formatters [ name ] )
                          if field_type == 'AutoField(' :
    return output
           if ip_str . count ( '.' ) != 3 :
 nodelist = parser . parse ( ( 'endverbatim' , ) )
  unescape_entities = allow_lazy ( unescape_entities , six . text_type )
    if months :
              if ( self . validate_max and  self . total_form_count ( ) - len ( self . deleted_forms ) > self . max_num ) or self . management_form . cleaned_data [ TOTAL_FORM_COUNT ] > self . absolute_max :
  except :
 super ( QueryDict , self ) . appendlist ( key , value )
                  self . create_table ( db , tablename )
              end = s . find ( b';' , end + 1 )
                  options += [ ( sorted ( s_opt . option_strings ) [ 0 ] , s_opt . nargs != 0 ) for s_opt in  parser . _actions if s_opt . option_strings ]
  elif len ( fks_to_parent ) == 0 :
              obj = "?"
                  handler . addQuickElement ( "email" , self . feed [ 'author_email' ] )
              raise KeyError (  "Key %r not found in '%s'" % ( name , self . __class__ . __name__ ) )
          if code is None :
  styles = instructions . split ( ',' )
          if app_config . models_module is None :
  piece = '' . join ( source [ last : pos ] )
 def default_if_none ( value , arg ) :
                              if field in form . cleaned_data :
  PALETTES = {  NOCOLOR_PALETTE : {  'ERROR' : { } ,  'WARNING' : { } ,  'NOTICE' : { } ,  'SQL_FIELD' : { } ,  'SQL_COLTYPE' : { } ,  'SQL_KEYWORD' : { } ,  'SQL_TABLE' : { } ,  'HTTP_INFO' : { } ,  'HTTP_SUCCESS' : { } ,  'HTTP_REDIRECT' : { } ,  'HTTP_NOT_MODIFIED' : { } ,  'HTTP_BAD_REQUEST' : { } ,  'HTTP_NOT_FOUND' : { } ,  'HTTP_SERVER_ERROR' : { } ,  'MIGRATE_HEADING' : { } ,  'MIGRATE_LABEL' : { } ,  'MIGRATE_SUCCESS' : { } ,  'MIGRATE_FAILURE' : { } ,  } ,  DARK_PALETTE : {  'ERROR' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'WARNING' : { 'fg' : 'yellow' , 'opts' : ( 'bold' , ) } ,  'NOTICE' : { 'fg' : 'red' } ,  'SQL_FIELD' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'SQL_COLTYPE' : { 'fg' : 'green' } ,  'SQL_KEYWORD' : { 'fg' : 'yellow' } ,  'SQL_TABLE' : { 'opts' : ( 'bold' , ) } ,  'HTTP_INFO' : { 'opts' : ( 'bold' , ) } ,  'HTTP_SUCCESS' : { } ,  'HTTP_REDIRECT' : { 'fg' : 'green' } ,  'HTTP_NOT_MODIFIED' : { 'fg' : 'cyan' } ,  'HTTP_BAD_REQUEST' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'HTTP_NOT_FOUND' : { 'fg' : 'yellow' } ,  'HTTP_SERVER_ERROR' : { 'fg' : 'magenta' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_HEADING' : { 'fg' : 'cyan' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_LABEL' : { 'opts' : ( 'bold' , ) } ,  'MIGRATE_SUCCESS' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_FAILURE' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  } ,  LIGHT_PALETTE : {  'ERROR' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'WARNING' : { 'fg' : 'yellow' , 'opts' : ( 'bold' , ) } ,  'NOTICE' : { 'fg' : 'red' } ,  'SQL_FIELD' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'SQL_COLTYPE' : { 'fg' : 'green' } ,  'SQL_KEYWORD' : { 'fg' : 'blue' } ,  'SQL_TABLE' : { 'opts' : ( 'bold' , ) } ,  'HTTP_INFO' : { 'opts' : ( 'bold' , ) } ,  'HTTP_SUCCESS' : { } ,  'HTTP_REDIRECT' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'HTTP_NOT_MODIFIED' : { 'fg' : 'green' } ,  'HTTP_BAD_REQUEST' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'HTTP_NOT_FOUND' : { 'fg' : 'red' } ,  'HTTP_SERVER_ERROR' : { 'fg' : 'magenta' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_HEADING' : { 'fg' : 'cyan' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_LABEL' : { 'opts' : ( 'bold' , ) } ,  'MIGRATE_SUCCESS' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_FAILURE' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  }  }
  init_path = os . path . join ( migrations_directory , "__init__.py" )
                  old_attr = name
               self . tags [ name ] = compile_function
                      want_unicode = True
  def clean ( self , value ) :
 writer = MigrationWriter ( new_migration )
                  self . _delete ( k )
   def __str__ ( self ) :
  def write ( self , outfile , encoding ) :
                          self . template_cache [ key ] = ( template , origin )
              self . characters ( contents )
   return attrs
                  return False
  if isinstance ( f , ManyToManyField ) :
   return msg
   return response
      def _make_decorator ( * m_args , ** m_kwargs ) :
   if field . rel . to . _meta . pk . rel :
 sys . stderr . write ( "  http://www.saddi.com/software/flup/   If you've already\n" )
      renamed_methods = (  ( '_get_memcache_timeout' , 'get_backend_timeout' , RemovedInDjango19Warning ) ,  )
                  return ''
   def remove ( self , item ) :
  for obj in objects :
 parser . add_argument ( '--natural-foreign' , action = 'store_true' , dest = 'use_natural_foreign_keys' , default = False ,  help = 'Use natural foreign keys if they are available.' )
  def _decorator ( view_func ) :
                  block_content = token_string [ 2 : - 2 ] . strip ( )
   if not hasattr ( content , 'chunks' ) :
          option = remaining_bits . pop ( 0 )
    elif t . token_type == TOKEN_COMMENT :
    if isinstance ( empty_label , ( list , tuple ) ) :
 if match :
  except ImproperlyConfigured as exc :
  height = property ( _get_height )
  else :
  result . append ( self . create_token ( self . template_string [ start : end ] , ( start , end ) , True ) )
          super ( Command , self ) . add_arguments ( parser )
  if 'message-id' not in header_names :
  except KeyError :
    except Exception as e :
  elif callable ( func ) :
  def write ( self , outfile , encoding ) :
               if id_ :
              selected_html = mark_safe ( ' selected="selected"' )
  nodelist = parser . parse ( ( 'endblock' , ) )
          return getattr ( self . _out , name )
                                  raise ValueError ( 'Unable to configure handler '  '%r: %s' % ( name , e ) )
   def convert ( self , number , from_digits , to_digits , sign ) :
 bits = token . split_contents ( )
    def run_validators ( self , value ) :
                  continue
          return iter ( self . _container )
 if ch == '(' :
          _ExpatParser . __init__ ( self , * args , ** kwargs )
          raise InvalidTemplateLibrary ( "Template library %s does not have "  "a variable named 'register'" %  taglib_module )
    if not settings . is_overridden ( 'MIDDLEWARE_CLASSES' ) :
  else :
 self . stdout . write ( "  You should commit this migration but leave the old ones in place;" )
 from django . utils . encoding import smart_text , force_text , python_2_unicode_compatible
 PREV , NEXT , KEY , RESULT = 0 , 1 , 2 , 3
                  return [ ]
     def _post_clean ( self ) :
   dirs . extend ( list ( settings . FIXTURE_DIRS ) )
   name = '.' . join ( parts )
  else :
 value = self . queryset . get ( ** { key : value } )
from __future__ import unicode_literals
 self . context = context
 return re_camel_case . sub ( r' \1' , value ) . strip ( ) . lower ( )
 return scheme in self . url_schemes
          form = self . form (  auto_id = self . auto_id ,  prefix = self . add_prefix ( '__prefix__' ) ,  empty_permitted = True ,  )
 field_notes . append ( 'Field renamed because it was a Python reserved word.' )
          cc = { }
 common_prefix = None
  else :
 path_info = get_path_info ( environ )
      class DebugNodeList ( NodeList ) :
 if self . data . hour == 0 :
 from django . utils . safestring import mark_safe , SafeData
  from django . core . management . base import AppCommand
  exhaust ( field_stream )
  import codecs
          text = '%s\x1b[%sm' % ( text or '' , RESET )
  lines = [ ]
   elif action == "unapply_start" :
  break
   def remove_potfiles ( self ) :
   def render ( self , context ) :
   return '\n' . join ( output )
   def _samefile ( src , dst ) :
              raise StopIteration ( )
  def to_python ( self , value ) :
                  definition [ 'bg' ] = colors [ - 1 ]
                      msg = "Execution of %s failed" % self . program
            if self . _request_middleware is None :
              return self . nodelist_true . render ( context )
 parser . add_argument ( '--empty' , action = 'store_true' , dest = 'empty' , default = False ,  help = "Create an empty migration." )
  else :
 self . use_natural_keys = options . pop ( "use_natural_keys" , False )
 from django . utils . six . moves . urllib . parse import urlparse
   offset = self . timezone . utcoffset ( self . data )
 if self . alternatives :
 k = m . end ( )
 zfile . write ( s )
 self . old_method_name = old_method_name
              for medium , paths in data . items ( ) :
 i = 0
              this_year = datetime . date . today ( ) . year
 response = self . handle_uncaught_exception ( request , resolver , sys . exc_info ( ) )
          cache = caches [ settings . CACHE_MIDDLEWARE_ALIAS ]
  self . _cache . set_multi ( safe_data , self . get_backend_timeout ( timeout ) )
 from django . utils . timezone import template_localtime
                  raise TypeError (  "The argument `field` must be `None` when the `error` "  "argument contains errors for multiple fields."  )
                              invalid_var_format_string = '%s' in settings . TEMPLATE_STRING_IF_INVALID
 __nonzero__ = new_method_proxy ( bool )
   return WidthRatioNode ( parser . compile_filter ( this_value_expr ) ,  parser . compile_filter ( max_value_expr ) ,  parser . compile_filter ( max_width ) ,  asvar = asvar )
      initial_text = ugettext_lazy ( 'Currently' )
  return media
 while self . exists ( name ) :
  if request . _post_parse_error :
      def __init__ ( self , field ) :
    try :
 if lang_code not in _supported and replacement in _supported :
   def e ( self ) :
                  handle_m2m ( relobj )
 return res
  bits = token . contents . split ( )
 base_subdir = '%s_template' % app_or_project
     class Info ( CheckMessage ) :
 from django . core . management . base import ( BaseCommand , CommandError ,  CommandParser , handle_default_options )
 pass
      help = "Deprecated - use 'migrate' instead."
 for field in self . fields :
    def _parse_header_params ( s ) :
 def urlize ( value , autoescape = None ) :
 def message_dict ( self ) :
   def __repr__ ( self ) :
              repr_attr = self . _wrapped
 field_notes . append ( 'This field type is a guess.' )
 from django . utils . deconstruct import deconstructible
 self . empty = options . get ( 'empty' , False )
          return "<DjangoTranslation lang:%s>" % self . __language
 import warnings
     def get_language_from_request ( request , check_path = False ) :
   else :
 if hasattr ( timezone , 'normalize' ) :
          return self . as_ul ( )
  if f . name in cleaned_data :
  for obj in queryset . iterator ( ) :
              app_configs = reversed ( list ( apps . get_app_configs ( ) ) )
          filelist = new_filenames
          if not isinstance ( i , six . integer_types ) :
     class Deserializer ( base . Deserializer ) :
 yield ''
                  other = other . __cast ( )
 parser = parser_class ( lexer . tokenize ( ) )
  try :
 if old_handler is not None :
 LOCK_NB = 0x1
 for attr , value in list ( attrs . items ( ) ) :
          if required and ( initial is not None ) :
    def _initialize_handlers ( self ) :
  if self . localize :
  from django . apps import apps
          value = [ conditional_escape ( v ) for v in value ]
     def main ( main_func , args = None , kwargs = None ) :
          zipfile . ZipFile . __init__ ( self , * args , ** kwargs )
       check_for_migrations ( app_config , connection )
 from django . utils . deprecation import RemovedInDjango20Warning
              cleaned_data = self . clean ( )
  else :
              pass
 from IPython import start_ipython
   def strip_entities ( value ) :
   def __deepcopy__ ( self , memo ) :
  except VariableDoesNotExist :
   prev_opts = [ x . split ( '=' ) [ 0 ] for x in cwords [ 1 : cword - 1 ] ]
             def read ( self , * args , ** kwargs ) :
 deactivate = deactivate_all = lambda : None
   class LocMemCache ( BaseCache ) :
 from django . utils . encoding import force_text , iri_to_uri
 return tt . tm_isdst > 0
 return len ( self . children )
          raise ImproperlyConfigured (  "Calling modelform_factory without defining 'fields' or "  "'exclude' explicitly is prohibited."  )
 self . items . append ( item )
 from django . conf import settings
              fixture_dirs = [ os . path . dirname ( fixture_name ) ]
  else :
  if i >= len ( subject ) :
           seconds2 , name2 = chunks [ i + 1 ]
   width = six . text_type ( len ( six . text_type ( len ( lines ) ) ) )
      return force_text ( gettext ( message ) )
                  result . parent = self
from collections import defaultdict
 res = to_digits [ digit ] + res
  self . default_args = default_args or { }
   def sign ( self , value ) :
 simple_url_re = re . compile ( r'^https?://\[?\w' , re . IGNORECASE )
 call_command (  'runserver' ,  addrport = options [ 'addrport' ] ,  shutdown_message = shutdown_message ,  use_reloader = False ,  use_ipv6 = options [ 'use_ipv6' ] ,  use_threading = use_threading  )
 neg = 1
              if new_name . endswith ( '_id' ) :
                          if not found and ( not line or plural_forms_re . search ( line ) ) :
   class Command ( BaseCommand ) :
    class Group ( list ) :
  try :
          f = os . path . join ( p , cmd )
           all_unique_checks = set ( )
  else :
 result = self . configurator . convert ( value )
 import warnings
              self . stderr . write ( msg )
 def safeseq ( value ) :
 capfirst = allow_lazy ( capfirst , six . text_type )
    if response . has_header ( 'Cache-Control' ) :
 label = 'label'
 for renamed_method in cls . renamed_methods :
           msgs = '\n' . join ( dropwhile ( len , msgs . split ( '\n' ) ) )
  elif item_type == FILE :
 self . choices = choices
 upto = end
                  if filename and not os . path . exists ( filename ) :
   else :
   if pathext is None :
   def clean ( self ) :
                  result . parent = self
          return os . path . exists ( self . path ( name ) )
          if app_config . models_module is None :
 self . error_messages = getattr ( options , 'error_messages' , None )
 from django . utils import datetime_safe
   new_class . base_fields = fields
              raise
                          if os . path . abspath ( dirpath ) . startswith ( os . path . dirname ( path ) ) :
              self . __offset = offset
 if output :
 from django . core . urlresolvers import set_script_prefix
 return calendar . isleap ( self . data . year )
                  sentinal = bit [ 2 ] + ')'
 self . empty_value = kwargs . pop ( 'empty_value' , [ ] )
      def constant_time_compare ( val1 , val2 ) :
                  if nodelist . contains_nontext :
   def keys ( self ) :
   def get_backend_timeout ( self , timeout = DEFAULT_TIMEOUT ) :
   def urlquote_plus ( url , safe = '' ) :
  check_for_migrations ( app_config , connection )
   def __deepcopy__ ( self , memo = None ) :
      if used_name != guessed_filename :
 max_width = int ( self . max_width . resolve ( context ) )
 package_path = package . __path__
 self . kwargs = kwargs
 databases = [ self . using , None ]
 try :
    with self . _lock . writer ( ) :
                if not ip_str . split ( ':' ) [ - 1 ] == hextet :
 return form
                      raise ValueError ( 'Unable to convert '  '%r at %r' % ( value , rest ) )
          value = list . pop ( self , idx )
  def F ( i ) :
  from argparse import ArgumentParser
          self . form = form
          result = self . __class__ ( '' , mutable = True , encoding = self . encoding )
              warnings . warn ( "``use_natural_keys`` is deprecated; use ``use_natural_foreign_keys`` instead." ,  RemovedInDjango19Warning )
 if self . max_length is not None :
              raise InvalidTemplateLibrary ( "ImportError raised loading %s: %s" %  ( taglib_module , e ) )
 def wrapper ( * args ) :
              if self . verbosity >= 1 :
          try :
          ch , escaped = next ( pattern_iter )
              result = self . configure_custom ( config )
 from logging . config import dictConfig
 globalpath = os . path . join (  os . path . dirname ( upath ( sys . modules [ settings . __module__ ] . __file__ ) ) , 'locale' )
   delta = 2000 - year
 admin = 'admin'
                      words [ i ] = escape ( word )
  bits . append ( force_text ( bit ) )
  return ''
 if self . localize :
  if not response . has_header ( 'Expires' ) :
          return value
  self . _ordering . sort ( key = compare_ordering_key )
    def file_move_safe ( old_file_name , new_file_name , chunk_size = 1024 * 64 , allow_overwrite = False ) :
              self [ : ] = tup
 import sys
  fp . write ( data )
   _drive_re = re . compile ( '^([a-z]):' , re . I )
              data [ f . name ] = f . value_from_object ( instance )
          kwargs = { }
                  logger . removeHandler ( h )
    if new_name . startswith ( '_' ) :
               self . options . update ( { 'use_decimal' : False } )
  WORD_PATTERN = re . compile ( r'^\s*(\w+)\s*' )
 self . _errors = [ ]
                  message = 'Unknown field(s) (%s) specified for %s'
 raise NotImplementedError ( 'subclasses of BaseLoader must provide a load_template_source() method' )
  else :
          attr = import_string ( dotted_path )
 self . symlinks = options . get ( 'symlinks' )
 if missing_fields :
              data = [ ]
 return s
                  new_mod = name
   else :
              media_attrs = kwargs
   if num_loopvars != len_item :
  parent_name = parser . compile_filter ( bits [ 1 ] )
          self . dict [ item ] = None
  from django . utils . deprecation import RemovedInDjango19Warning
  else :
   def list ( self ) :
from django . core . management . base import BaseCommand
                   return self . add_truncation_text ( text [ : end_index or 0 ] ,  truncate )
                          raise ValueError (  "%s.process_template_response didn't return an "  "HttpResponse object. It returned None instead."  % ( middleware_method . __self__ . __class__ . __name__ ) )
    if isinstance ( f , models . FileField ) :
      try :
 os . dup2 ( so . fileno ( ) , sys . stdout . fileno ( ) )
  else :
              result = self . buffer + self . _read_limited ( )
              new_name = 'number_%s' % new_name
  if issubclass ( klass , logging . handlers . MemoryHandler ) and 'target' in config :
  else :
  else :
          return type ( self ) . __bool__ ( self )
 val = self . _cache . get ( key )
 try :
   kwargs . update ( self . default_args )
    class StreamingBuffer ( object ) :
        script_url = get_bytes_from_wsgi ( environ , 'SCRIPT_URL' , '' )
    @ register ( Tags . models , Tags . signals )
   def add_fields ( self , form , index ) :
 super ( Field , self ) . __init__ ( )
                  prefixed_name = self . add_prefix ( name )
          boundarystream = InterBoundaryIter ( self . _stream , self . _separator )
          pass
     _super = super
 def verbatim ( parser , token ) :
          raise self . error ( token , "Empty variable tag" )
 self . options = options
      pass
  except ValueError :
                  del obj_dict [ attr ]
       def decorating_function ( user_function ) :
 super ( DebugParser , self ) . extend_nodelist ( nodelist , node , token )
 if self . feed [ 'author_email' ] is not None :
     def _iterkeys ( self ) :
  except ImportError :
 opfunc . __doc__ = getattr ( int , opname ) . __doc__
              import_module ( app_name )
                  output . append ( label_output )
 import types
 value = force_text ( value )
   if content_length > settings . FILE_UPLOAD_MAX_MEMORY_SIZE :
   @ property
 break
   def __exit__ ( self , exc , value , tb ) :
  from django . utils . encoding import force_str
 retval = self
 column_name = row [ 0 ]
 shutil . move ( the_path , guessed_path )
      status_code = 500
      _meth_func = "im_func"
    class RendererMixin ( object ) :
 fname = "%s-%s.log" % ( timestamp , abs ( id ( self ) ) )
 from django . db . migrations . loader import MigrationLoader , AmbiguityError
          self . _current = { }
                  url = smart_urlquote ( 'http://%s' % middle )
 errors . append ( {  'message' : escape ( message ) if escape_html else message ,  'code' : error . code or '' ,  } )
 self . max_expr = max_expr
          return not self . file or self . file . closed
  else :
   def _resolve_name ( name , package , level ) :
              value = bool ( value )
   @ classmethod
                      if hasattr ( middleware , 'process_exception' ) :
  return format_html ( '<input{0} />' , flatatt ( final_attrs ) )
 return j
 parser . add_option ( '-v' , '--verbosity' , action = 'store' , dest = 'verbosity' , default = '1' ,  type = 'choice' , choices = [ '0' , '1' , '2' , '3' ] ,  help = 'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output' )
 PB = 1 << 50
                   if ( form . cleaned_data and form . cleaned_data [ field ] is not None  and form . cleaned_data [ unique_for ] is not None ) :
              self . _cull ( )
  return self . parent_widget . render ( * args )
 return FilterExpression ( token , self )
   def __next__ ( self ) :
 self . connector = connector or self . default
  else :
  return value
              self . activated = False
 super ( SplitDateTimeField , self ) . __init__ ( fields , * args , ** kwargs )
   class AutoEscapeControlNode ( Node ) :
 args , kwargs = parse_bits ( parser , bits , params ,  varargs , varkw , defaults , takes_context , function_name )
   def _set_size ( self , size ) :
 if related_att is not None :
              pass
 six . reraise ( exc_type , exc_value , sys . exc_info ( ) [ 2 ] )
    return wrapper
  if len ( bits ) < 3 or bits [ 1 ] != 'as' :
 import re
  from collections import OrderedDict
  else :
              raise AttributeError ( self . warning )
   try :
   def flush ( self ) :
  elif token . token_type == 2 :
   field_dict = OrderedDict ( field_list )
 self . notation_name = notation_name
          raise TemplateSyntaxError ( "'autoescape' tag requires exactly one argument." )
          memoryview = memoryview
 filter = get_exception_reporter_filter ( request )
    def tzname ( self , dt ) :
 self . negate = negate
          return self
     class RssUserland091Feed ( RssFeed ) :
  else :
 self . pk_field = kwargs . pop ( "pk_field" , False )
 template = Template ( content )
              try :
          bits = [ ]
                          tried . extend ( [ pattern ] + t for t in sub_tried )
                      raise AttributeError
 def __init__ ( self , callback ) :
                      m2m_convert = lambda v : smart_text ( field . rel . to . _meta . pk . to_python ( v ) )
   def _html_output ( self , normal_row , error_row , row_ender , help_text_html , errors_on_separate_row ) :
 parser . print_help ( )
   def __mod__ ( self , rhs ) :
              token = tokens [ i ]
              repr_attr = self . _setupfunc
   def as_hidden ( self , attrs = None , ** kwargs ) :
      child_nodelists = ( 'nodelist_true' , 'nodelist_false' )
   @ cached_property
 if error . params :
  status_code = 200
  else :
      def _BaseCookie__set ( self , key , real_value , coded_value ) :
 check_for_migrations ( app_config , connection )
    def __repr__ ( self ) :
     class Form ( six . with_metaclass ( DeclarativeFieldsMetaclass , BaseForm ) ) :
    def ngettext ( singular , plural , number ) :
   def clear ( self ) :
                  with io . open ( django_po , 'r' , encoding = 'utf-8' ) as fp :
          p = Popen ( args , shell = False , stdout = PIPE , stderr = PIPE ,  close_fds = os . name != 'nt' , universal_newlines = True )
                  m2m_value = lambda value : smart_text ( value . _get_pk_val ( ) , strings_only = True )
   elif cwords [ 0 ] in ( 'dumpdata' , 'sql' , 'sqlall' , 'sqlclear' ,  'sqlcustom' , 'sqlindexes' , 'sqlsequencereset' , 'test' ) :
 path = kwargs . pop ( 'path' , None )
 if not indent :
     finally :
    if 'private' in cc and 'public' in kwargs :
          return len ( value ) == int ( arg )
   class date ( real_date ) :
 self . error_list = [ self ]
                   def render ( self , context ) :
   def handle_app_config ( self , app_config , ** options ) :
 _assertRegex = "assertRegexpMatches"
 stream . unget ( chunk [ next : ] )
 self . _current = None
   else :
    form . fields [ name ] = InlineForeignKeyField ( self . instance , ** kwargs )
              executor . migrate ( targets , plan , fake = options . get ( "fake" , False ) )
   def resolve_expression ( self , obj , context ) :
              guessed_filename = used_name
 from django . utils . datastructures import MultiValueDict
  else :
   else :
              error_msg = "Tried %s" % tried
  return _default
      def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None ,  initial = None , error_class = ErrorList , label_suffix = None ,  empty_permitted = False , instance = None ) :
 import sys
                      output . append ( self . render_option ( selected_choices , * option ) )
 try :
              super ( URLValidator , self ) . __call__ ( value )
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
              self . validators . append ( validators . MinLengthValidator ( int ( min_length ) ) )
  comment_lineno_cache = None
           if not allow_overwrite and os . access ( new_file_name , os . F_OK ) :
 for pos , elt in enumerate ( source ) :
  else :
 warnings . warn ( 'A secure pseudo-random number generator is not available '  'on your system. Falling back to Mersenne Twister.' )
   def flush ( self ) :
 var = var [ 2 : - 1 ]
   def create_var ( self , value ) :
          _fields_ = [  ( 'Offset' , DWORD ) ,  ( 'OffsetHigh' , DWORD ) ]
 found = True
              handler . addQuickElement ( "link" , "" , { "rel" : "self" , "href" : self . feed [ 'feed_url' ] } )
          for d in reversed ( self . dicts ) :
               context [ self . var_name ] = [ ]
          tt = ( dt . year , dt . month , dt . day ,  dt . hour , dt . minute , dt . second ,  dt . weekday ( ) , 0 , 0 )
                      line = buffer_ + line
      def __init__ ( self , regex , max_length = None , min_length = None , error_message = None , * args , ** kwargs ) :
              data [ "pk" ] = smart_text ( obj . _get_pk_val ( ) , strings_only = True )
 extra_params = OrderedDict ( )
 pgettext_lazy = lazy ( pgettext , six . text_type )
              yield self [ name ]
      import warnings
             models . Model . save_base ( self . object , using = using , raw = True )
   def to_locale ( language ) :
  elif prefix != common_prefix :
 from django . core . management . base import BaseCommand , CommandError
    def label_from_instance ( self , obj ) :
 _empty_value = None
                          obj_pk = obj_pk . pk
 from django . utils . encoding import force_text
 if not self . timezone :
                  extra , resolver = resolver . namespace_dict [ ns ]
       def __init__ ( self , object_list , per_page , orphans = 0 ,  allow_empty_first_page = True ) :
                  raise CommandError ( "Destination directory '%s' does not "  "exist, please create it first." % top_dir )
   seconds = self . Z ( )
    def make_style ( opts = ( ) , ** kwargs ) :
 foreground = dict ( ( color_names [ x ] , '3%s' % x ) for x in range ( 8 ) )
              lookup_view_s = lookup_view
  else :
 try :
              if token_string . startswith ( VARIABLE_TAG_START ) :
              app_configs = None
 using = options . get ( 'database' )
 def find_fixtures ( self , fixture_label ) :
          attrs = [ "__doc__" , "__name__" ]
  else :
          key = self . make_key ( key , version = version )
  except StandardError as e :
                      raise
      def strftime ( self , fmt ) :
                      if settings . TEMPLATE_STRING_IF_INVALID :
   def __cast ( self ) :
                  raise TemplateSyntaxError (  "'%s' received some positional argument(s) after some "  "keyword argument(s)" % name )
       self . fields = copy . deepcopy ( self . base_fields )
 from django . utils . encoding import smart_text , force_text
   def handle_app_config ( self , app_config , ** options ) :
 def ordered_forms ( self ) :
          s = s . replace ( '"' , '&quot;' )
   def value_from_datadict ( self , data , files , name ) :
  else :
 break
  incremental = config . pop ( 'incremental' , False )
   def value_from_datadict ( self , data , files , name ) :
 output . append ( format_html ( self . inner_html , choice_value = choice_value ,  sub_widgets = sub_ul_renderer . render ( ) ) )
  def __init__ ( self , * args , ** kwargs ) :
 asvar = None
  def __new__ ( cls , * args , ** kwargs ) :
     def _find_boundary ( self , data , eof = False ) :
 if i >= 0 :
    def sql_delete ( app_config , style , connection , close_connection = True ) :
              self . stdout . write ( "Extracting %s\n" % filename )
 return self . data . day
  for item in self . items :
 file_size = data . size
   @ property
  def iterbytes ( buf ) :
 return lambda text : colorize ( text , opts , ** kwargs )
     return offset . days * 86400 + offset . seconds
  if self . localize :
                  int_part_gd += thousand_sep
    def save_m2m ( ) :
 cword = int ( os . environ [ 'COMP_CWORD' ] )
              return
  ETAG_MATCH = re . compile ( r'(?:W/)?"((?:\\.|[^"])*)"' )
   def back ( self ) :
                   if not isinstance ( message , ValidationError ) :
 nodelist = parser . parse ( ( 'elif' , 'else' , 'endif' ) )
  except KeyError :
  internal_use_only = True
 timestamp = git_log . communicate ( ) [ 0 ]
          self . cyclevars = cyclevars
   def id_for_label ( self , id_ ) :
 return escape ( value )
  else :
 from django . core . management . sql import sql_flush , emit_post_migrate_signal
              if len ( app_labels ) > 1 and primary_keys :
  if name in lib . filters :
   try :
              try :
 from django . core import serializers
 if fg in color_names :
                  qs = self . model . _default_manager . get_queryset ( )
  del attr
      setattr ( Module_six_moves_urllib_parse , attr . name , attr )
              self . validators . append ( validators . MaxValueValidator ( max_value ) )
 class VariableDoesNotExist ( Exception ) :
 self . _read_started = False
 return dict ( ( key , self [ key ] ) for key in self )
  from functools import wraps , update_wrapper , WRAPPER_ASSIGNMENTS
                              out . write ( ' pgettext(%r, %r) ' % (  message_context ,  join_tokens ( singular , trimmed ) ) )
   if recursive :
              value = str ( value )
          try :
                   def wrapper ( * args , ** kwds ) :
     def make_bytes ( self , value ) :
   else :
   @ property
          super ( ChoiceField , self ) . __init__ ( required = required , widget = widget , label = label ,  initial = initial , help_text = help_text , * args , ** kwargs )
  return '%s:%s' % ( self . g ( ) , self . i ( ) )
   else :
              try :
 cmd_options = vars ( options )
              style = no_style ( )
  return mark_safe ( value . replace ( '\n' , '<br />' ) )
              dklen = None
              if self . queryset is not None :
                      view_name = callback . __class__ . __name__ + '.__call__'
 for node in graph . leaf_nodes ( app_name ) :
  for app_label , migration_names in conflicts . items ( ) :
       def __init__ ( self , obj ) :
              if jan1_weekday == 5 or ( jan1_weekday == 6 and calendar . isleap ( self . data . year - 1 ) ) :
 parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
  else :
          return zipfile . ZipFile . read ( self , self . namelist ( ) [ 0 ] )
  return super ( BooleanField , self ) . to_python ( value )
   else :
 import os
           return timezone . zone
                      self . stderr . write (  "Notice: Couldn't set permission bits on %s. You're "  "probably using an uncommon filesystem setup. No "  "problem." % new_path , self . style . NOTICE )
   except KeyError :
                 Image . open ( file ) . verify ( )
   def __init__ ( self , data = None ) :
                   call_command ( 'loaddata' , 'initial_data' , ** options )
          c = cookie
                  if field_value is not None :
  func = getattr ( func , '_decorated_function' , func )
 if constant_time_compare ( sig , self . signature ( value ) ) :
      from _systemrestart import SystemRestart
 if sub_tried is not None :
  if isinstance ( message , SafeData ) :
     class FilePathField ( ChoiceField ) :
              field_type , new_params = field_type
    if objects_in_fixture == 0 :
      abspathu = abspath
                          raise CommandError ( "Unknown application: %s" % app_label )
                   if os . name == 'nt' :
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
 raise NotImplementedError ( 'subclasses of Serializer must provide an handle_field() method' )
   def _get_scheme ( self ) :
  class _HashedSeq ( list ) :
 ret = self . _cache . get_multi ( new_keys )
 yield item
  self . nodelist = compile_string ( template_string , origin )
                      try :
 import os
 if token is None :
      def render ( self , context ) :
  else :
 truncate = property ( lambda self : self . file . truncate )
 from django . utils . deprecation import RemovedInDjango19Warning
 assert is_iterable ( new_errors ) , (  "The function %r did not return a list. All functions registered "  "with the checks registry must return a list." % check )
  return path
 return mark_safe ( '\n' . join ( output ) )
                  continue
 if options . get ( 'use_default_ignore_patterns' ) :
   def extract ( self , to_path = '' ) :
                      offset = offset + len ( self . __starttag_text )
          connection = connections [ options [ 'database' ] ]
 self . translate = False
    def setlist ( self , key , list_ ) :
          raise TypeError ( s )
 if not m :
 parser . add_argument ( '--no-obsolete' , action = 'store_true' , dest = 'no_obsolete' ,  default = False , help = "Remove obsolete message strings." )
          msg = '%sError importing module %s: "%s"' % (  error_prefix , dotted_path , e )
                              message_context = message_context . strip ( '"' )
   def _has_changed ( self , initial , data ) :
                          self . xml . startElement ( "natural" , { } )
 unifunc . replace ( strfunc )
              if incremental :
          super ( HttpResponseNotAllowed , self ) . __init__ ( * args , ** kwargs )
 from django . core . management . base import BaseCommand , CommandError
   from django . template . base import ( ALLOWED_VARIABLE_CHARS , BLOCK_TAG_END ,  BLOCK_TAG_START , COMMENT_TAG_END , COMMENT_TAG_START ,  FILTER_ARGUMENT_SEPARATOR , FILTER_SEPARATOR , SINGLE_BRACE_END ,  SINGLE_BRACE_START , TOKEN_BLOCK , TOKEN_COMMENT , TOKEN_TEXT , TOKEN_VAR ,  TRANSLATOR_COMMENT_MARK , UNKNOWN_SOURCE , VARIABLE_ATTRIBUTE_SEPARATOR ,  VARIABLE_TAG_END , VARIABLE_TAG_START , filter_re , tag_re )
          return
          self . argv = argv or sys . argv [ : ]
      def filter ( self , record ) :
                          logger . disabled = True
     class BaseCommand ( object ) :
  __all__ = ( 'SelectDateWidget' , )
    @ register . filter ( is_safe = False )
 from django . utils import six
   return result
          new_value = _strip_once ( value )
  else :
  if self . domain == 'djangojs' :
                  for form in self . saved_forms :
              return [ ( k , self [ k ] ) for k in self . keyOrder ]
  elif isinstance ( o , decimal . Decimal ) :
                  total_forms = initial_forms
              check_programs ( 'msguniq' , 'msgmerge' , 'msgattrib' )
   elif ch == '(' :
 self . _fname = os . path . join ( self . file_path , fname )
 if message_context [ 0 ] == '"' :
  raise value
                  directories . append ( entry )
 return mark_safe ( re . sub ( '[-\s]+' , '-' , value ) )
 if err_log :
      regex = re . compile (  r'^(?:[a-z0-9\.\-]*)://'  r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}(?<!-)\.?)|'  r'localhost|'  r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|'  r'\[?[A-F0-9]*:[A-F0-9:]+\]?)'  r'(?::\d+)?'  r'(?:/?|[/?]\S+)$' , re . IGNORECASE )
 if len ( bits ) not in ( 2 , 3 ) :
 for label in labels :
 from django . core . management . sql import custom_sql_for_model , emit_post_migrate_signal , emit_pre_migrate_signal
 for candidate in glob . iglob ( os . path . join ( fixture_dir , fixture_name + '*' ) ) :
                    numbers = [  MigrationAutodetector . parse_number ( migration . name )  for migration in merge_migrations  ]
      except SkipFile :
          year = int ( m . group ( 'year' ) )
   else :
          time_str = time_str . decode ( 'utf-8' )
    elif field . rel and isinstance ( field . rel , models . ManyToOneRel ) :
              if '--commands' in args :
 substitutions [ 'initial' ] = format_html ( self . url_markup_template ,  value . url ,  force_text ( value ) )
 from __future__ import unicode_literals
 state [ 'cookies' ] = str ( state [ 'cookies' ] )
 self . dirpath = dirpath
 if name is None :
 self . m2m_data = m2m_data
 @ stringfilter
                  targets = [ ( app_label , None ) ]
                                  n = int ( idx )
    class JSONSerializer ( object ) :
  import os
  else :
 if isinstance ( value , six . string_types ) :
 endblock_re = re . compile ( r"""^\s*endblocktrans$""" )
   executor = MigrationExecutor ( connections [ DEFAULT_DB_ALIAS ] )
  with transaction . atomic ( using = database ,  savepoint = connection . features . can_rollback_ddl ) :
 if endbmatch :
   def render ( self , context ) :
  except UnicodeDecodeError :
                  return pgettext_lazy ( self . message_context , value )
 if self . _errors is None :
  elif change == I18N_MODIFIED :
 from django . utils . crypto import get_random_string
    definition = getattr ( cls , 'Media' , None )
  else :
  except Exception as e :
          return self . path == other . path
  return val
  generic_lang_code = lang_code . split ( '-' ) [ 0 ]
 if self . verbatim and block_content == self . verbatim :
  for field_name in self . fields :
 from django . utils . encoding import force_text
          return None
              return None
                  if self . cleaned_data . get ( name ) is not None and self . cleaned_data [ name ] . _state . adding :
          if _default is None :
     def npgettext ( context , singular , plural , number ) :
              if not self . keep_pot :
  def __init__ ( self , subject = '' , body = '' , from_email = None , to = None , bcc = None ,  connection = None , attachments = None , headers = None , alternatives = None ,  cc = None ) :
              widget . attrs . update ( extra_attrs )
 if isinstance ( file_name , Template ) :
  except ( OverflowError , ValueError ) as exc :
   if _samefile ( old_file_name , new_file_name ) :
 if autoescape :
              HTMLParser . __init__ ( self )
                  self . cleaned_data = cleaned_data
 _file = None
  if secure :
 from django . views . debug import ExceptionReporter , get_exception_reporter_filter
  return force_text ( widget . render ( name , self . value ( ) , attrs = attrs ) )
              return { }
 self . command_stack = [ ]
                      msg = "Execution of %s failed: %s" % ( self . program , errors )
 setattr ( _MovedItems , move . name , move )
    class PasswordInput ( TextInput ) :
 input_formats = formats . get_format_lazy ( 'TIME_INPUT_FORMATS' )
   class ResolverMatch ( object ) :
  def __init__ ( self , include_html = False , email_backend = None ) :
 c = config . pop ( '()' )
 stats [ HITS ] += 1
                  initial = self . widget . decompress ( initial )
          self . cmd = cmd
 word_split_re = re . compile ( r'(\s+)' )
  else :
   else :
          current_timezone = timezone . get_current_timezone ( )
 from django . core . exceptions import AppRegistryNotReady
                  self . stdout . write ( "Installed %d object(s) from %d fixture(s)" %  ( self . loaded_object_count , self . fixture_count ) )
 import yaml
          meta = ( pformat ( META_override )  if META_override is not None  else pformat ( request . META ) )
          LocaleRegexProvider . __init__ ( self , regex )
 @ stringfilter
 return phone2numeric ( value )
 raise
 return False
 return form
  return nodes
   class EmailBackend ( ConsoleEmailBackend ) :
 from django . utils . encoding import force_bytes , python_2_unicode_compatible
 self . text = text
 continue
  _ , file_ext = os . path . splitext ( self . file )
          cls = None
 filename , display_url = cleanup_url ( url )
          return self . streaming_content
 self . content_length = content_length
  if self . match is None or self . match_re . search ( f ) :
 cc = dict ( dictitem ( el ) for el in cc )
     def _replace_entity ( match ) :
              weight += 2
 tried_modules = [ ]
  if six . PY2 :
   if hasattr ( error , 'error_dict' ) :
 from django . utils import baseconv
 from django . utils . functional import lazy
          output , references = connection . creation . sql_create_model ( model , style , known_models )
          return item in self . dict
 from django . utils . encoding import smart_text , force_str , force_text
 if data is None or isinstance ( data , dict ) :
 alternative_subtype = 'alternative'
  if val is None :
 self . xgettext_options = self . xgettext_options [ : ] + [ '--no-location' ]
 args . append ( work_file )
   __contains__ = has_key
          safe_data = { }
          _active . value = timezone
              six . reraise ( * exc_info )
 self . _regex_dict [ language_code ] = regex_compiled
 args = [ arg . resolve ( context ) for arg in self . args ]
          super ( ComboField , self ) . __init__ ( * args , ** kwargs )
              if self . _delegate_bytes and six . PY2 :
 value = int ( value )
          return self . path < other . path
 return (  output ,  force_text ( errors , DEFAULT_LOCALE_ENCODING , strings_only = True ) ,  p . returncode  )
 sub_match_dict . update ( sub_match . kwargs )
  else :
           defaults , _ = parser . parse_args ( args = [ ] )
 result = c ( ** kwargs )
 for obj in PythonDeserializer ( objects , ** options ) :
  else :
   def _get_regex ( self ) :
 commands . update ( { name : app_config . name for name in find_commands ( path ) } )
   class UTC ( tzinfo ) :
               raise MultiPartParserError ( "Invalid content length: %r" % content_length )
    forms_valid = True
   def __getinitargs__ ( self ) :
                   if not os . path . exists ( filename ) :
              output = ''
          return date ( self . year , self . month , self . day )
     def run ( addr , port , wsgi_handler , ipv6 = False , threading = False ) :
                          try :
                      del self [ key ]
               yield parse_boundary_stream ( sub_stream , 1024 )
 self . connection . starttls ( )
   var_node = self . create_variable_node ( filter_expression )
 while 1 :
              name = getattr ( file , 'name' , None )
              queryset = self . model . _default_manager
          return datetime . datetime . strptime ( force_str ( value ) , format ) . date ( )
              neg = 0
              return self . _stream . readline ( * args , ** kwargs )
 ASCTIME_DATE = re . compile ( r'^\w{3} %s %s %s %s$' % ( __M , __D2 , __T , __Y ) )
   else :
 from django . utils import six
     def get_image_dimensions ( file_or_path , close = False ) :
 self . _current = None
    @ property
              mtime -= stat . st_ctime
          stat = os . stat ( filename )
              f . required = False
   gettext_noop = gettext_lazy = _ = gettext
          from django . db import models
 if not self . form . is_bound :
  from . import Error , Tags , register
   return ip_str . rsplit ( ':' , 1 ) [ 1 ]
 proxy = lazy ( func , resultclass ) ( ** kwargs )
 if not self . DIGIT_PATTERN . match ( idx ) :
          value = datetime_safe . new_date ( value )
    @ register . filter ( is_safe = True )
   _format_cache [ cache_key ] = None
         global template_source_loaders
          return False
   @ deconstructible
    def parse ( self , parse_until = None ) :
   def _update_unget_history ( self , num_bytes ) :
 return result
    def next_token ( self ) :
   def next_token ( self ) :
     def _to_tuple ( s ) :
              pass
   def set_cdata_mode ( self , tag ) :
 options [ 'secret_key' ] = get_random_string ( 50 , chars )
 for i , word in enumerate ( words ) :
          return self . _encoding
   def external_entity_ref_handler ( self , context , base , sysid , pubid ) :
              try :
 from io import BytesIO
    return out . getvalue ( )
   tag = re_tag . match ( m . group ( 0 ) )
          new_ip = ip_str . split ( ':' )
  else :
 pass
  token . lineno = self . lineno
 def fixture_dirs ( self ) :
from __future__ import unicode_literals
   else :
    def write_items ( self , handler ) :
 id_ = final_attrs . get ( 'id' , None )
              if not self . fail_silently :
                                  e . django_template_source = node . source
              return result
 def __init__ ( self , server , params ) :
   def unsign ( self , signed_value ) :
  raise AttributeError ( "Unable to determine the file's size." )
  continue
      errors = [ ]
  expanded_template = path . expanduser ( template )
              self . inner_run ( None , ** options )
  except VariableDoesNotExist :
 class BaseValidator ( object ) :
          return len ( self . content )
          file = open ( file_or_path , 'rb' )
    if text . endswith ( truncate ) :
          if isinstance ( level , int ) :
 if not isinstance ( candidate , six . string_types ) :
 sites1 = _findall ( s1 , str ( year ) )
 path_info = get_bytes_from_wsgi ( environ , 'PATH_INFO' , '/' )
      pass
                      def m2m_convert ( value ) :
  else :
            weight = 0
  return obj
              raise ValidationError ( self . message , code = self . code )
 TB = 1 << 40
 object_data = { }
  return smart_text ( value )
   def render ( self , name , value , attrs = None , choices = ( ) ) :
 return bool ( ret )
  except ( archive . ArchiveException , IOError ) as e :
 utility = ManagementUtility ( argv )
   def id_for_label ( self , id_ ) :
                  self . stdout . write ( "No fixture '%s' in %s." %  ( fixture_name , humanize ( fixture_dir ) ) )
  except LookupError :
 media = Media ( )
 parser . add_argument ( '--ignorenonexistent' , '-i' , action = 'store_true' ,  dest = 'ignore' , default = False ,  help = 'Ignores entries in the serialized data for fields that do not '  'currently exist on the model.' )
                handle_app = self . handle_app
  kwargs = dict ( ( k , config [ k ] ) for k in config if valid_ident ( k ) )
 try :
    @ register . tag
  if localized_fields is not None :
    def ungettext_lazy ( singular , plural , number = None ) :
   app_label , migration_name = options [ 'app_label' ] , options [ 'migration_name' ]
                return self . flatten ( ) == other . flatten ( )
   def __next__ ( self ) :
 memo [ id ( self ) ] = result
 if not old_style_list :
                  if fake :
 return self . data . month
    def parse_bits ( parser , bits , params , varargs , varkw , defaults ,  takes_context , name ) :
  else :
    def urlsafe_base64_encode ( s ) :
 if not prefix :
              args = list ( args )
   if kwargs :
   def num_items ( self ) :
   def handle ( self , ** options ) :
 return self . data . isoformat ( )
                  self . add_filters ( logger , filters )
 from itertools import product
 import re
              widget = widget ( )
   def label_tag ( self , contents = None , attrs = None , label_suffix = None ) :
   def tell ( self ) :
 token = parser . next_token ( )
              output = self . filter_expression . resolve ( context )
 raise NotImplementedError ( 'subclasses of FileUploadHandler must provide a file_complete() method' )
  elif type ( s ) != six . text_type :
          if self . id_for_label :
   elif name in lib . filters :
   self . requires_system_checks = (  self . requires_system_checks if has_new_option else  self . requires_model_validation if has_old_option else  True )
    def sql_all ( app_config , style , connection ) :
  else :
 translation . _info = { }
 from email . message import Message
   def __iter__ ( self ) :
 return self . to + self . cc + self . bcc
               if condition is not None :
  except StandardError as e :
   _called_from_command_line = False
 _func_defaults = "__defaults__"
              template = self . template_with_initial
          try :
 fixture_name = os . path . basename ( fixture_name )
              raise CommandError ( "couldn't extract file %s to %s: %s" %  ( filename , tempdir , e ) )
          return not ( self == other )
              raise CommandError ( "Can't find %s. Make sure you have GNU gettext "  "tools 0.15 or newer installed." % self . program )
 pass
 from django . utils . html import escape
          initial_value = initial if initial is not None else ''
    class TemplateLiteral ( Literal ) :
   def popitem ( self ) :
                  skipped . append ( ( model , deps ) )
  if cc :
  return self . _text_words ( length , truncate )
  def copystat ( src , dst ) :
 from django . utils . encoding import force_text
 import sys
   def clean ( self , value ) :
              end , next = boundary
 import threading
 def truncatechars ( value , arg ) :
 return get_valid_filename ( name )
   def has_header ( self , header ) :
   child_loggers = [ ]
   else :
  else :
  else :
 return value . strftime ( format )
                  p_pattern = p_pattern [ 1 : ]
 yield "# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [app_label]'"
 self . json_kwargs . pop ( 'fields' , None )
           daemonize = ( wsgi_opts [ 'bindAddress' ] is not None )
              return ''
                      middle = middle [ len ( opening ) : ]
  except Exception as e :
              params = [ ]
          return s
  os . _exit ( 1 )
  return output
 count2 = ( since - ( seconds * count ) ) // seconds2
    class ViewDoesNotExist ( Exception ) :
 path = path . lstrip ( '/' ) . lstrip ( '\\' )
   def unclosed_block_tag ( self , parse_until ) :
                  EventHandler . modified_code = I18N_MODIFIED
 for app_config in apps . get_app_configs ( ) :
 return FormSet
          error = self . data [ i ]
 boundary = opts . get ( 'boundary' )
 if isinstance ( data , bytes ) :
   key_salt = force_bytes ( key_salt )
  else :
              result = self . _resolve ( )
 from django . core . serializers . python import Serializer as PythonSerializer
    class DictWrapper ( dict ) :
       import datetime
   try :
  since = delta . days * 24 * 60 * 60 + delta . seconds
 id_ = self . field . widget . attrs . get ( 'id' ) or self . auto_id
              return True
              del self . _post
 class URLValidator ( RegexValidator ) :
  import errno
          header = self . _convert_to_charset ( header , 'ascii' )
    def update ( self , dict_ ) :
 key = self . cache_key ( name , dirs )
           members = [ member for member in self . _archive . getmembers ( )  if member . name != 'pax_global_header' ]
              sorted_items = sorted ( kwds . items ( ) )
  for middleware_method in self . _request_middleware :
  except ImportError :
            return '%s%s' % ( self . path , ( '?' + iri_to_uri ( self . META . get ( 'QUERY_STRING' , '' ) ) ) if self . META . get ( 'QUERY_STRING' , '' ) else '' )
  else :
 if not settings . ADMINS :
   def skip_past ( self , endtag ) :
 MIMEMultipart . __setitem__ ( self , name , val )
                  value = related . natural_key ( )
 if name is None :
  if not ( value is True or value is False or value is None or value == '' ) :
 try :
                  raise TemplateSyntaxError ( "'%s' is not a valid tag library: %s" %  ( taglib , e ) )
                from django . conf import urls
 if qs . _result_cache is not None :
  if not os . access ( filename , os . W_OK ) :
 fk = _get_foreign_key ( parent_model , model , fk_name = fk_name )
                merge_migrations = [ ]
   format_locations = [ ]
 from django . utils . deprecation import RemovedInDjango19Warning
 value . configurator = self
                          self . handle_m2m_field ( obj , field )
    if x == 0 :
          if filepath . startswith ( root ) :
                  obj = new_obj
                  error_dict . setdefault ( field , [ ] ) . extend ( error_list )
 add_to_builtins ( 'django.template.defaultfilters' )
 from django . utils . safestring import mark_safe
   if pos >= last :
    else :
 args = '[fixture ...]'
          format_module_path = settings . FORMAT_MODULE_PATH
              compare_to = None
                   url_fields [ 0 ] = 'http'
          node . source = token . source
 if _supported is None :
   self . _handler_class = None
 forms = ' ' . join ( form . as_p ( ) for form in self )
  else :
 from django . db import models
  return callback [ : dot ] , callback [ dot + 1 : ]
   class Command ( AppCommand ) :
 self . content_type = None
          final_attrs = self . build_attrs ( attrs , type = 'checkbox' , name = name )
  elif bytes < TB :
      pass
              self . _cache [ key ] = pickled
 self . merge = options . get ( 'merge' , False )
          from django . conf import settings
          key = self . make_key ( key , version = version )
 from django . core . management . color import color_style
  def __getattr__ ( self , real_name ) :
  else :
                  total_forms = self . max_num
 result = super ( TimestampSigner , self ) . unsign ( value )
  output = [ ]
  if s_len > length :
 self . _cache . delete ( key )
       except Exception as e :
          super ( JsLexer , self ) . __init__ ( self . states , 'reg' )
 if not isabs ( path ) :
 return s . getvalue ( )
                      response = middleware_method ( request , response )
  self . stream . write ( '%s\n' % msg_data )
 from django . core . management . base import CommandError
              return { }
   loopvars = re . split ( r' *, *' , ' ' . join ( bits [ 1 : in_index ] ) )
   return self . _client
  resolved_path = [ ]
 connection = connections [ db ]
              try :
  return translation
 self . choices = choices
   __all__ = ( 'Storage' , 'FileSystemStorage' , 'DefaultStorage' , 'default_storage' )
  self . cdata_tag = tag . lower ( )
 if not hasattr ( self , '_request' ) :
              raise InvalidTemplateLibrary ( "Unsupported arguments to "  "Library.filter: (%r, %r)" , ( name , filter_func ) )
              raise CommandError ( "%r conflicts with the name of an existing "  "Python module and cannot be used as a "  "project name. Please try another name." %  project_name )
  cls . __dispatch [ klass ] [ funcname ] = method
          return LANG_INFO [ lang_code ]
                          if f == '__pycache__' :
              continue
          if self . feed [ 'language' ] is not None :
                  e . reason += ', HTTP response headers must be in %s format' % charset
  from datetime import datetime , timedelta , tzinfo
 class RegexValidator ( object ) :
     class SplitDateTimeField ( MultiValueField ) :
  from __future__ import unicode_literals
 if o . microsecond :
              doublecolon_len += 1
              return path . split ( '\\' , 1 )
  except ( ValueError , TypeError ) :
          i = p . find ( b'=' )
     class DateTimeField ( BaseTemporalField ) :
     def dumps ( obj , key = None , salt = 'django.core.signing' , serializer = JSONSerializer , compress = False ) :
          return datetime . datetime . strptime ( force_str ( value ) , format ) . time ( )
  self . _size = self . _get_size_from_underlying_file ( )
                      self . stdout . write ( "Creating %s\n" % new_path )
  block_name = bits [ 1 ]
  import copy
                          continue
             self . _choices = self . widget . choices = list ( value )
          _serializers [ format ] = module
 full_path = self . path ( name )
                      incomment = True
          raise self . error ( token , "Empty block tag" )
 from io import BytesIO
 filters = config . pop ( 'filters' , None )
  if isinstance ( value , list ) :
    return value if six . PY2 else value . encode ( ISO_8859_1 )
 os . chdir ( our_home_dir )
                  del self . _cache [ key ]
 regexes = self . regexes
                  f . save_form_data ( instance , cleaned_data [ f . name ] )
 handler . startElement ( "channel" , self . root_attributes ( ) )
     return text
                      label = ''
 if token . contents == 'else' :
          if self . attachments :
 if i < 0 :
   def add_fields ( self , form , index ) :
              format_locations . append ( path + '.%s' )
              if isinstance ( expires , datetime . datetime ) :
          self . var1 , self . var2 = var1 , var2
 self . add_item_elements ( handler , item )
 if isinstance ( self , nodetype ) :
              for date_key in date_keys :
 self . _leftover = b''
              break
  return results
 import sys
 from django . db import connections , DEFAULT_DB_ALIAS
 m = data . get ( self . month_field % name )
  return value
              remaining = self . _remaining if size is None else size
 for message in messages :
   return result
   def _get_size ( self ) :
       data = None
 from django . utils . module_loading import import_string
 chunk_size = 64 * 2 ** 10
  from django . utils . deprecation import RemovedInDjango19Warning
              self . match_re = re . compile ( self . match )
                  attrs [ 'min' ] = self . min_value
   def server_bind ( self ) :
                      arg_vals . append ( arg . resolve ( context ) )
  else :
   def resolve ( self , s ) :
 min = int ( m . group ( 'min' ) )
 @ stringfilter
  args_check = staticmethod ( args_check )
    def writer_enters ( self ) :
     @ register . filter ( is_safe = False )
            result = force_text ( message )
 global _translations
          nodelist_false = NodeList ( )
     def get_default_timezone_name ( ) :
          def as_bytes ( self , unixfrom = False ) :
 import posixpath
 while not bit . endswith ( sentinal ) :
    return self [ key ]
  if end is None :
  return attr
  else :
                  return None
   def get_nodes_by_type ( self , nodetype ) :
 def GET ( self ) :
  elif ch == '[' :
  args = [  'xgettext' ,  '-d' , domain ,  '--language=C' ,  '--keyword=gettext_noop' ,  '--keyword=gettext_lazy' ,  '--keyword=ngettext_lazy:1,2' ,  '--keyword=pgettext:1c,2' ,  '--keyword=npgettext:1c,2,3' ,  '--output=-'  ] + command . xgettext_options
     if label_suffix and contents and contents [ - 1 ] not in _ ( ':?.!' ) :
  continue
          lexer_class , parser_class = Lexer , Parser
              return template_name
  if response is None :
 return self . pointer < len ( self . subject )
   if self . META . get ( 'CONTENT_TYPE' , '' ) . startswith ( 'multipart/form-data' ) :
  except StandardError as e :
  except NotImplementedError :
 from django . utils import lru_cache
              _localtime = pytz . timezone ( settings . TIME_ZONE )
   create_bound_method = types . MethodType
 yield "#   * Make sure each model has one field with primary_key=True"
          return self
 if truncate_text :
   def __copy__ ( self ) :
  def add_arguments ( self , parser ) :
 child_nodelists = ( 'nodelist' , )
   def readline ( self , size = None ) :
      pass
                                  self . stdout . write ( "    Installing index for %s.%s model\n" % ( app_name , model . _meta . object_name ) )
    def _iterlists ( self ) :
  else :
      pass
 file_pos = file . tell ( )
 if link is not None :
   except UnicodeDecodeError as e :
                          len_item = len ( item )
 year_field = '%s_year'
  except AttributeError :
 for middleware_path in settings . MIDDLEWARE_CLASSES :
                              self . stdout . write ( " [ ] %s" % title )
    return None
                  if self . require_all_fields :
 raise NotImplementedError ( 'subclasses of Serializer must provide an handle_m2m_field() method' )
 if file_ :
 try :
 if app_label not in executor . loader . migrated_apps :
               return dec ( func )
 self . indent ( 2 )
              categories = [ ( c ) for c in categories ]
              raise CommandError ( "Cannot find a migration matching '%s' from app '%s'. Is it in INSTALLED_APPS?" % (  migration_name , app_label ) )
          if cmd . endswith ( ext ) :
 if len ( bits ) < 2 :
   if len ( name ) > 255 :
          if hasattr ( value , '_meta' ) :
  chars = allow_lazy ( chars )
 trans_bit . append ( bit )
              self [ key ] = result
          supported = False
   def __next__ ( self ) :
     _illegal_formatting = re . compile ( r"((^|[^%])(%%)*%[sy])" )
                       unhandled_params . pop ( 0 )
          value = ugettext ( "%s MB" ) % filesize_number_format ( bytes / MB )
                      try :
 while remaining_bits :
      return lazy_number ( ngettext , str , singular = singular , plural = plural , number = number )
              self . style_func = style_func
   def handle ( self , app_or_project , name , target = None , ** options ) :
          msg = "%s doesn't look like a module path" % dotted_path
                      plural . append ( '%%(%s)s' % t . contents )
          return time_str + '-0000'
          super ( ModelMultipleChoiceField , self ) . __init__ ( queryset , None ,  cache_choices , required , widget , label , initial , help_text ,  * args , ** kwargs )
     class MultiValueDictKeyError ( KeyError ) :
  raise ValueError (  "'%s.%s' has no ForeignKey to '%s.%s'."  % ( model . _meta . app_label , model . _meta . object_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )
          msg = "[%s] %s\n" % ( self . log_date_time_string ( ) , format % args )
 for i , widget in enumerate ( self . widgets ) :
   except ( ValueError , TypeError ) :
          for widget in self . get_renderer ( name , value , attrs , choices ) :
   def has_key ( self , key , version = None ) :
              try :
  import copy
  if isinstance ( value , datetime . datetime ) :
 while 1 :
 self . use_ssl = settings . EMAIL_USE_SSL if use_ssl is None else use_ssl
              value = self . make_bytes ( value )
              return None
                      translated = translated % rhs
 from django . core . files . move import file_move_safe
          self . _assert_mutable ( )
          return ZERO
     class DeserializedObject ( object ) :
 from django . utils . xmlutils import SimplerXMLGenerator
  elif user_settings [ key ] != default_settings [ key ] :
  except Exception :
                  msgs = msgs . decode ( 'utf-8' )
 slots = orig_vars . get ( '__slots__' )
 for key , value in six . iterlists ( self ) :
 _fields_ = [  ( '_offset' , _OFFSET ) ,  ( 'Pointer' , PVOID ) ]
   if consume_next :
   def _get_size_from_underlying_file ( self ) :
from __future__ import unicode_literals
 return range ( 1 , self . num_pages + 1 )
 if CONTEXT_SEPARATOR in result :
 self . active_readers = 0
    self . localize = localize
 comment_lineno_cache = None
 return dirs
          value = force_text ( value )
 t -= 1
  else :
 for part in parts :
 @ stringfilter
 obj = Model ( ** data )
              return self . nodelist_false . render ( context )
 new_filenames = [ filename . __file__ for filename in new_modules  if hasattr ( filename , '__file__' ) ]
          return type ( self ) . __bool__ ( self )
                          date = form . cleaned_data [ unique_for ]
  try :
 def __init__ ( self , setting , nodelist ) :
  if widgets is not None :
                          if indexes [ column_name ] [ 'primary_key' ] :
 if new_attr is None :
              raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : value } ,  )
                          with open ( pythonrc ) as handle :
      decimal_digits = '0123456789'
  self . regexes [ state ] = re . compile ( "|" . join ( parts ) , re . MULTILINE | re . VERBOSE )
              exc_info = ( None , record . getMessage ( ) , None )
 from django . utils . dates import MONTHS
           def next ( self ) :
 self . paths_to_remove . append ( tempdir )
  if self . field . required and hasattr ( self . form , 'required_css_class' ) :
          raise AttributeError ( "This %s instance has no `content` attribute. "  "Use `streaming_content` instead." % self . __class__ . __name__ )
  def prepare_value ( self , value ) :
          if not getattr ( f , 'editable' , False ) :
    def __repr__ ( self ) :
 name = sign + hhmm
 s = get_serializer ( format ) ( )
               for h in logger . handlers [ : ] :
  return t
          if isinstance ( self . var , Variable ) :
          return escape ( value )
      def __init__ ( self , filepath , parsed ) :
 return self . _handle_object ( node )
 if p >= 0 :
              raise TemplateSyntaxError (  "'%s' is decorated with takes_context=True so it must "  "have a first argument of 'context'" % name )
              e . django_template_source = token . source
 import re
 if self . feed [ 'author_name' ] is not None :
    class Variable ( object ) :
              sys . stdout = open ( out_log , 'a' , buffering )
                  if self . asvar is None :
 def __wrapper__ ( * args , ** kw ) :
 s = StringIO ( )
 if not cleaned_line :
 self . _varlist = varlist
           sup_cls = super ( cls , self )
 bpython . embed ( )
    def get_language_bidi ( ) :
   def dst ( self , dt ) :
  if path . exists ( absolute_path ) :
  return _curried
          try :
    @ register . tag
  return save_instance ( self , self . instance , self . _meta . fields ,  fail_message , commit , self . _meta . exclude ,  construct = False )
       candidate_pat = prefix_norm . replace ( '%' , '%%' ) + result
               host = self . META [ 'SERVER_NAME' ]
                  call_command ( 'loaddata' , 'initial_data' , verbosity = self . verbosity , database = connection . alias , skip_validation = True , app_label = app_label , hide_empty = True )
  options = { }
 try :
 if self . is_bound :
 ser_fmts = serializers . get_public_serializer_formats ( ) if ser_fmt is None else [ ser_fmt ]
 if token . contents == 'else' :
 return '%s(%s)' % ( self . __class__ . __name__ , dictreprs )
 self . _post_parse_error = True
                      app_label , model_label = label . split ( '.' )
                              current = current [ int ( bit ) ]
  param = '' . join ( name )
 parser . skip_past ( 'endcomment' )
    if self . can_delete and self . _should_delete_form ( form ) :
          return self . var
          meta = '<could not parse>'
 del bits [ : 3 ]
 pass
              newline = "\n"
           self . sep = force_str ( sep )
      def become_daemon ( our_home_dir = '.' , out_log = '/dev/null' ,  err_log = '/dev/null' , umask = 0o022 ) :
from __future__ import unicode_literals
 domain_whitelist = [ 'localhost' ]
     def unregister_serializer ( format ) :
                  cls . __dispatch [ klass ] = { }
 self . test_database = options . get ( 'test_database' , False )
 if six . PY2 :
              result = self . buffer [ : size ]
      return not ( v is False or v is None or v == '' )
          name = args [ - 1 ]
    class cached_property ( object ) :
    class Token ( object ) :
 if isinstance ( rhs , SafeData ) :
              return text
 if id_ :
              self . stdout . write ( "Flush cancelled.\n" )
            form . save_m2m = save_m2m
          try :
 from lib2to3 . pytree import Leaf , Node
      compare = lambda self , a , b : a is not b
      def model_to_dict ( instance , fields = None , exclude = None ) :
  return self . __cast ( ) != other
 last = root [ PREV ]
 if csrf_token :
 t = getattr ( _active , "value" , None )
              handler . addQuickElement ( "summary" , item [ 'description' ] , { "type" : "html" } )
  model_dependencies = [ ]
              return [ self [ k ] for k in self . keyOrder ]
 add_move ( MovedModule ( "_thread" , "thread" ) )
   if new_name . endswith ( '_' ) :
 if 'version' not in config :
  else :
 EMPTY_DICT = { }
 parser . UnparsedEntityDeclHandler = self . unparsed_entity_decl
              return type ( self ) . __next__ ( self )
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to synchronize. Defaults to the "default" database.' )
                  data = str ( data )
          try :
              raise TypeError ( "If the flags are set, regex must be a regular expression string." )
 if value in self . empty_values :
   def unlock ( f ) :
   self . filters = filters
     class SpacelessNode ( Node ) :
  except ImportError :
   else :
   return property ( fget , fset , fdel , doc )
          changeset = None
                     return b' ' . join ( [ force_bytes ( arg , encoding , strings_only ,  errors ) for arg in s ] )
     def parse_time ( value ) :
 if not _serializers :
              return self . file . size
  if template_tuple is TemplateDoesNotExist :
   def clean ( self , value ) :
          self . func = func
 index_output . append ( "CREATE %sINDEX %s ON %s (%s);" %  ( unique , qn ( '%s_%s' % ( tablename , f . name ) ) , qn ( tablename ) ,  qn ( f . name ) ) )
 from ctypes . wintypes import BOOL , DWORD , HANDLE
          return s
          return len ( self . forms )
                  self . bad_cookies = set ( )
  messages . update ( error_messages or { } )
 converter = getattr ( self , converter )
   def _open ( self , name , mode = 'rb' ) :
   def source_error ( self , source , msg ) :
 return filename and filename [ filename . rfind ( "\\" ) + 1 : ] . strip ( )
 if not script_url :
  return base , ext
              return self . _cache . decr ( key , - delta )
   from django . conf import settings
              value = unicode_value . strip ( )
   def start_doctype_decl ( self , name , sysid , pubid , has_internal_subset ) :
   existing_headers = set ( header . lower ( ) for header in vary_headers )
  else :
 class Operator ( TokenBase ) :
  return self . object_list [ index ]
          def activate ( timezone ) :
  cache_key = _generate_cache_header_key ( key_prefix , request )
                  raise ValueError ( "Could not find common ancestor of %s" % migration_names )
  except ( AttributeError , UnsupportedOperation ) :
              result . setFormatter ( formatter )
          self . name , self . nodelist , self . parent = name , nodelist , parent
                  error_messages = self . fields [ field ] . error_messages
                  s = six . text_type ( bytes ( s ) , encoding , errors )
              if isinstance ( option_label , ( list , tuple ) ) :
   def utcoffset ( self , dt ) :
   def B ( self ) :
 def stringformat ( value , arg ) :
          mem_args = args [ : num_args ]
   def validate_number ( self , number ) :
                              self . handle_field ( obj , field )
   def pretty_name ( name ) :
 for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) :
   response = self . apply_response_fixes ( request , response )
 self . content_length = None
          combined = Media ( )
   class Module_six_moves_urllib_parse ( _LazyModule ) :
  else :
 from django . db . migrations . state import ProjectState
 __iadd__ = complain
   get_method_function = operator . attrgetter ( _meth_func )
 if self . domain == 'djangojs' :
                  args = ( )
  except Model . DoesNotExist :
 if ch not in ( '<' , '=' ) :
 for option_value , option_label in chain ( self . choices , choices ) :
              fk = fks_to_parent [ 0 ]
   def __deepcopy__ ( self , memodict ) :
  super ( HttpResponseRedirectBase , self ) . __init__ ( * args , ** kwargs )
 obj_pk = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
 if start > upto :
 from __future__ import unicode_literals
 TOKEN_VAR = 1
  if self . _should_delete_form ( form ) :
                          from django . template . loader import get_template , select_template
  for name , value in self . extra_headers . items ( ) :
 from django . conf import settings
   elif hasattr ( s , '__unicode__' ) :
  from django . core . exceptions import ImproperlyConfigured
   def sign ( self , value ) :
 self . position = 0
 date_data = ( date . year , date . month , date . day )
          if self . options . get ( "indent" ) :
 if _locs_ is None :
                                       break
 import errno
 if isinstance ( context , Context ) :
 return self . data . hour
  except ValueError :
   def super ( self ) :
                      return
 tried_modules . append ( taglib_module )
   def get_handler ( self , * args , ** options ) :
 pass
 in_tag = False
 if self . required and not value :
   if not locale_dir :
 yield "#"
                  with transaction . atomic ( using = database ,  savepoint = connection . features . can_rollback_ddl ) :
                      result = ( template , make_origin ( display_name , loader , name , dirs ) )
          addr = parseaddr ( force_text ( addr ) )
 errors = [ ]
 import types
          super ( SortedDict , self ) . __delitem__ ( key )
                  sublist = _helper ( sublist_item , tabs + 1 )
  try :
  else :
 if not isinstance ( value , ( bytes , six . text_type ) ) :
    def get_major_version ( version = None ) :
   _BROWSERS_DEPRECATED_LOCALES = {  'zh-cn' : 'zh-hans' ,  'zh-tw' : 'zh-hant' ,  }
 import re
 if len ( fks_to_parent ) == 1 :
 @ stringfilter
 def __init__ ( self , name , content_type , size , charset , content_type_extra = None ) :
  else :
 if to :
 six . reraise ( MultiPartParserError , MultiPartParserError ( msg ) , sys . exc_info ( ) [ 2 ] )
 if self . waiting_writers != 0 :
                  cls . __dispatch [ resultclass ] = { }
          sys . stderr . write ( "ERROR: %s\n" % e )
  return int ( value )
  try :
 units = len ( tupl [ 1 ] ) - tupl [ 2 ]
 translation . activate ( 'en-us' )
   to_delete = set ( )
              new_path = path [ match . end ( ) : ]
 @ stringfilter
 def __init__ ( self , file ) :
 if filters :
   __all__ = (  'Field' , 'CharField' , 'IntegerField' ,  'DateField' , 'TimeField' , 'DateTimeField' ,  'RegexField' , 'EmailField' , 'FileField' , 'ImageField' , 'URLField' ,  'BooleanField' , 'NullBooleanField' , 'ChoiceField' , 'MultipleChoiceField' ,  'ComboField' , 'MultiValueField' , 'FloatField' , 'DecimalField' ,  'SplitDateTimeField' , 'IPAddressField' , 'GenericIPAddressField' , 'FilePathField' ,  'SlugField' , 'TypedChoiceField' , 'TypedMultipleChoiceField'  )
  options [ k . lower ( ) ] = v
 self . current_app = current_app
 super ( SortedDict , self ) . __init__ ( data )
              lang = get_language ( )
              raise TemplateSyntaxError ( "back called without some previous "  "parsing" )
                  response = middleware_method ( request , response )
          return ''
 _encoding = None
                                  self . stderr . write ( "    Failed to install custom SQL for %s.%s model: %s\n" % ( app_name , model . _meta . object_name , e ) )
 if isinstance ( file , six . string_types ) :
 notifier . process_events ( )
      if not qs . ordered :
 if self . isolated_context :
 from email . mime . multipart import MIMEMultipart
              if self . pk_field :
   self . end_serialization ( )
 STATUS_OK = 0
  return default
              return True
 if self . choices :
   def _get_to_python ( self , field ) :
   self . _container = [ value ]
 for label in app_labels :
          return self . _queryset
 bits = token . split_contents ( )
                  self . first = False
   def compile_function_error ( self , token , e ) :
 def regex ( self ) :
   self . _callback = get_callable ( self . _callback_str )
              password = digest ( password ) . digest ( )
   except ValidationError :
   def __repr__ ( self ) :
  except AttributeError :
from __future__ import unicode_literals
 if field in self . cleaned_data :
  func = TemplateLoader
 def length ( value ) :
               try :
          count = since // seconds
  else :
 for item in elt :
      if not _serializers :
              _module = self . _resolve ( )
 def use_argparse ( self ) :
                  if not isinstance ( e , CommandError ) :
  else :
 if fd . isatty ( ) :
 return True
 pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )
 return mark_safe ( _urlize ( value , nofollow = True , autoescape = autoescape ) )
          self . _stream = stream
 base36 . append ( digits [ i // j ] )
          result = self . __class__ ( '' , mutable = True , encoding = self . encoding )
 import time
 super ( TemporaryFileUploadHandler , self ) . new_file ( file_name , * args , ** kwargs )
              ns = path . pop ( )
      rendering_attrs = [ 'template_name' , 'context_data' , '_post_render_callbacks' ]
 from django . utils . deprecation import RemovedInNextVersionWarning
                httpd . daemon_threads = True
 data = method ( self , * args , ** kwargs )
   potfile = os . path . join ( self . locale_dir , '%s.pot' % str ( domain ) )
          for event , node in self . event_stream :
              super ( CommandParser , self ) . error ( message )
    from django . core . exceptions import ValidationError
 args = [ ]
  if command . verbosity > 1 :
 self . loaded_object_count = 0
    def i18n ( request ) :
 key = bytes_to_text ( key , self . encoding )
    else :
 if 'max-age' in cc :
                                  d = d [ idx ]
              e . args = ( "Problem installing fixtures: %s" % e , )
                  return getattr ( self , shell ) ( )
      def __init__ ( self , * args , ** kwargs ) :
 import os
          return "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_name=%s, namespaces=%s)" % (  self . _func_path , self . args , self . kwargs , self . url_name , self . app_name , self . namespaces )
  return attrs
  except KeyboardInterrupt :
              is_templatized = True
                      out . write ( blankout ( t . contents , 'B' ) )
              return os . path . samefile ( src , dst )
  elif not base_url . endswith ( '/' ) :
 if m :
 if pattern . name is not None :
    for i , handler in enumerate ( handlers ) :
   try :
  streaming = True
              return False
          message = '' . join ( tokens )
 for bit in bits :
   def _get_filename ( self ) :
 os . rmdir ( tmpdir )
   def handle_data ( self , d ) :
      lbp = 0
          source , display_name = self . load_template_source ( template_name , template_dirs )
   def handle ( self , * fixture_labels , ** options ) :
  if not isinstance ( var , six . string_types ) :
  values = { 'true' : True , 'false' : False }
          with self . mutex :
              debugs = [ e for e in all_issues if e . level < checks . INFO and not e . is_silenced ( ) ]
 self . attrs = attrs
                      return
                  f . process ( self , self . domain )
  with connection . cursor ( ) as cursor :
                      os . remove ( path_to_remove )
 token = parser . next_token ( )
                  self . saved_forms . append ( form )
 if isinstance ( widget , NumberInput ) :
     class FilterNode ( Node ) :
   @ property
                   try :
              try :
 clean_data = [ ]
                  return None
 end_text_pos = 0
              return debug . technical_500_response ( request , * exc_info )
 import sys
  else :
              raise KeyError ( "Unknown language code %s and %s." % ( lang_code , generic_lang_code ) )
 self . _payload = payload . decode ( 'ascii' , 'surrogateescape' )
 bits = token . split_contents ( )
                      end_text_pos = pos
 if self . _options :
                  return nodelist . render ( context )
     class FixedOffset ( tzinfo ) :
          self . model = getattr ( options , 'model' , None )
 INFO = 20
  if domain is not None :
      class Rss201rev2Feed ( RssFeed ) :
   def _ipython_pre_011 ( self ) :
              client . behaviors = self . _options
 return filelist
  options += [ ( app_config . label , 0 ) for app_config in app_configs ]
 obj = '%s.%s' % ( app , model . _meta . object_name )
 counters = [ 0 ] * len ( handlers )
                   template = get_template ( template )
 criticals = [ e for e in all_issues if checks . CRITICAL <= e . level ]
 i += 1
  else :
   def compile_filter ( self , token ) :
  else :
 return AutoEscapeControlNode ( ( arg == 'on' ) , nodelist )
          return do_translate ( message , 'ugettext' )
  subject = self . format_subject ( subject )
  def __init__ ( self , file , name = None ) :
          super ( SplitHiddenDateTimeWidget , self ) . __init__ ( attrs , date_format , time_format )
 if len ( self . namelist ( ) ) != 1 :
              if isinstance ( other , Promise ) :
  from os import path
  if self . addr :
   def validate ( self , value ) :
 while end > 0 and s . count ( b'"' , 0 , end ) % 2 :
      def __init__ ( self , nodelist ) :
                  raise ViewDoesNotExist (  "Could not import '%s'. Parent module %s does not exist." %  ( lookup_view , mod_name ) )
 self . stdout . write ( self . style . NOTICE ( "Run 'python manage.py migrate' to apply them.\n" ) )
   try :
    if 'django.middleware.clickjacking.XFrameOptionsMiddleware' not in set ( settings . MIDDLEWARE_CLASSES ) :
  check_for_migrations ( app_config , connection )
 current_chunk = None
 def debug ( parser , token ) :
   def _set_regex ( self , regex ) :
 silent = False
              raise OverflowError ( 'dklen too big' )
  return response
  if i >= len ( subject ) :
    @ register . tag ( 'with' )
    self . base_fields [ MIN_NUM_FORM_COUNT ] = IntegerField ( required = False , widget = HiddenInput )
              return b''
 return name + '-clear'
 from django . db import connections , DEFAULT_DB_ALIAS
          return WRAPPER_ASSIGNMENTS
          return repr ( list ( self ) )
 if len ( value ) >= 2 and value [ : 1 ] == value [ - 1 : ] == b'"' :
  raise Resolver404 ( { 'path' : path } )
   @ content . setter
    def number_format ( value , decimal_pos = None , use_l10n = None , force_grouping = False ) :
    value = value . astimezone ( timezone )
  if migration_name == "zero" :
   def value_from_datadict ( self , data , files , name ) :
     class NoArgsCommand ( BaseCommand ) :
 final_output . extend ( output )
      if self . ignore and field_name not in model_fields :
 with Archive ( path ) as archive :
          if self . negated :
                      return self . filter ( name , func , ** flags )
                  raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
  password += b'\x00' * ( inner . block_size - len ( password ) )
  return serializer ( ) . loads ( data )
  for part in plural :
 return obj
          sys . modules [ __name__ + ".moves." + attr . name ] = attr
              return None
          format = force_str ( default or get_format ( 'TIME_INPUT_FORMATS' ) [ 0 ] )
 from __future__ import unicode_literals
  else :
 return do_translate ( message , 'gettext' )
 literal_regex = re . compile (   r'\[([A-f0-9:\.]+)\]$' ,  re . IGNORECASE )
 block_context . add_blocks ( blocks )
 return mark_safe ( force_text ( text ) . replace ( '&' , '&amp;' ) . replace ( '<' , '&lt;' ) . replace ( '>' , '&gt;' ) . replace ( '"' , '&quot;' ) . replace ( "'" , '&#39;' ) )
              result [ i ] += piece
 def length_is ( value , arg ) :
                  filename = file . name
 from django . utils . six . moves . urllib . parse import (  quote , quote_plus , unquote , unquote_plus , urlparse ,  urlencode as original_urlencode )
  __all__ = (  'Media' , 'MediaDefiningClass' , 'Widget' , 'TextInput' ,  'EmailInput' , 'URLInput' , 'NumberInput' , 'PasswordInput' ,  'HiddenInput' , 'MultipleHiddenInput' , 'ClearableFileInput' ,  'FileInput' , 'DateInput' , 'DateTimeInput' , 'TimeInput' , 'Textarea' , 'CheckboxInput' ,  'Select' , 'NullBooleanSelect' , 'SelectMultiple' , 'RadioSelect' ,  'CheckboxSelectMultiple' , 'MultiWidget' ,  'SplitDateTimeWidget' , 'SplitHiddenDateTimeWidget' ,  )
 from django . forms . utils import ErrorList
   return key , pdict
 self . use_tz = use_tz
              return timesince ( value , arg )
  def __init__ ( self , * args , ** kwargs ) :
   def as_ul ( self ) :
      def render ( self , context ) :
   def clean ( self , value ) :
   def conditional_escape ( text ) :
                      self . stdout . write ( self . style . MIGRATE_LABEL ( "  Target specific migration: " ) + "%s, from %s" % ( targets [ 0 ] [ 1 ] , targets [ 0 ] [ 0 ] ) )
     def _delete ( self , key ) :
          self . view_name = view_name
              if not hasattr ( e , 'django_template_source' ) :
          return force_str ( self . _tzname )
              if options [ 'plain' ] :
   self . year_none_value = ( 0 , empty_label [ 0 ] )
          return value [ - 1 ]
 self . loader , self . loadname , self . dirs = loader , name , dirs
 try :
              raise TemplateDoesNotExist
 def streaming_content ( self , value ) :
          return list ( reversed ( modules ) )
 forms_to_delete = self . deleted_forms
 auto_id = self . auto_id
 sys . stdin . close ( )
   super_set ( key , value )
                  if _ipv6 :
          nm = Header ( nm , 'utf-8' ) . encode ( )
 if use_l10n or ( use_l10n is None and settings . USE_L10N ) :
                  errors = getattr ( fp , "errors" , None )
   def getvalue ( self ) :
  from django . core . mail . backends . base import BaseEmailBackend
                  wrapped_callback = self . make_view_atomic ( callback )
    location = urljoin ( current_uri , location )
 import zlib
              response . content = b''
  except AttributeError :
      def __init__ ( self , name , params ) :
 @ stringfilter
                  if self . _should_delete_form ( form ) :
    lexer = JsLexer ( )
              try :
   def _get_request ( self ) :
  if interactive :
  return force_text ( error )
   seen_data . add ( data )
  return six . text_type ( s ) . encode ( encoding , errors )
  else :
 VARIABLE_TAG_END = '}}'
  from django . core . exceptions import ValidationError
              new_ip . append ( '0000' )
 if callable ( initial_value ) :
 if cmatch :
                      value = field . to_python ( getInnerText ( field_node ) . strip ( ) )
          wsgi_opts = {  'maxSpare' : int ( options [ "maxspare" ] ) ,  'minSpare' : int ( options [ "minspare" ] ) ,  'maxThreads' : int ( options [ "maxchildren" ] ) ,  }
          for base in bases [ : : - 1 ] :
from __future__ import unicode_literals
   def address_string ( self ) :
              wm . add_watch ( path , mask )
   base64d = force_bytes ( TimestampSigner ( key , salt = salt ) . unsign ( s , max_age = max_age ) )
          self . parent_widget = parent_widget
          render_context = self . context . render_context
              if size :
          self . _delete ( self . _key_to_file ( key , version ) )
    def strftime ( dt , fmt ) :
 if safe :
   if common_ancestor is None :
  except ( TypeError , ValueError ) :
 if not callback :
  def __init__ ( self , max_value = None , min_value = None , * args , ** kwargs ) :
              iter ( patterns )
                     f . required = False
 root = nonlocal_root [ 0 ]
  def _get_height ( self ) :
 value = environ . get ( str ( key ) , str ( default ) )
 upto = 0
              obj = force_str ( self . obj )
   def render_node ( self , node , context ) :
 try :
   if PY3 :
 def __init__ ( self , func ) :
     def configure_logger ( self , name , config , incremental = False ) :
                          queryset = queryset . filter ( pk__in = primary_keys )
   def reset_format_cache ( ) :
      self . m2m_data = None
                random . seed (  hashlib . sha256 (  ( "%s%s%s" % (  random . getstate ( ) ,  time . time ( ) ,  settings . SECRET_KEY ) ) . encode ( 'utf-8' )  ) . digest ( ) )
 parser . add_argument ( '-o' , '--output' , default = None , dest = 'output' ,  help = 'Specifies file to which the output is written.' )
from __future__ import unicode_literals
 match = self . regex . search ( path )
 if not self . first :
  return template
 with self . _lock . reader ( ) :
   def __iter__ ( self ) :
                 return context [ 'forloop' ]
   def get_default_timezone ( ) :
  return mark_safe ( contents )
 singular = [ ]
 _func_globals = "func_globals"
 self . _changed_data = None
 if source is None :
 if self . feed [ 'ttl' ] is not None :
  import socket
  else :
              self . connection = connection_class ( self . host , self . port , ** connection_params )
 length = int ( num )
                  raise TypeError ( "end must be None or a string" )
          if self . _wrapped is empty :
 if settings . USE_I18N or settings . USE_L10N :
 self . size = size
  else :
   def accessed_time ( self , name ) :
 break
    EMPTY_VALUES = ( None , '' , [ ] , ( ) , { } )
            all_models = [ ]
          logging . Handler . __init__ ( self )
          split = [ ]
                          pass
                  return default
          for base in bases [ : : - 1 ] :
          nesting = 0
   except KeyError :
   base_name = '%s_name' % app_or_project
 if not self . allow_multiple_selected :
  setattr ( obj , self . name , result )
  BASE2_ALPHABET = '01'
 from django . core . wsgi import get_wsgi_application
              raise CommandError ( "%s. Are you sure your INSTALLED_APPS setting is correct?" % e )
          return callback , ''
 parser . add_argument ( '--list-tags' , action = 'store_true' , dest = 'list_tags' ,  help = 'List available tags.' )
          if isinstance ( value , datetime . datetime ) :
 from django . utils import six
              raise ValidationError (  self . error_messages [ 'max_digits' ] ,  code = 'max_digits' ,  params = { 'max' : self . max_digits } ,  )
   def calculate_app_template_dirs ( ) :
              raise NoReverseMatch ( "Error importing '%s': %s." % ( lookup_view , e ) )
          raise TemplateSyntaxError ( "'now' statement takes one argument" )
          return mark_safe ( '\n' . join ( chain ( * [ getattr ( self , 'render_' + name ) ( ) for name in MEDIA_TYPES ] ) ) )
  if response is None :
                  end -= 1
  import django
 silent_variable_failure = True
   def handle_m2m_field ( self , obj , field ) :
 binary_type = str
 warnings . warn ( msg % ( language , _DJANGO_DEPRECATED_LOCALES [ language ] ) ,  RemovedInDjango19Warning , stacklevel = 2 )
                  raise CommandError (  "Multiple fixtures named '%s' in %s. Aborting." %  ( fixture_name , humanize ( fixture_dir ) ) )
 return super ( URLField , self ) . clean ( value )
   def __getstate__ ( self ) :
   def validate_unique ( self ) :
              raise TypeError ( "Non-integer base36 conversion input." )
  while current_len <= length :
   app_list_value = app_list . setdefault ( app_config , [ ] )
    def w ( self ) :
 call_command ( "migrate" , ** options )
  return r
 forms_to_delete = self . deleted_forms
 become_daemon ( our_home_dir = options [ "workdir" ] , ** daemon_kwargs )
 cmatches = constant_re . findall ( t . contents )
 self . run_validators ( value )
 from django . db import models
 import zipfile
 if t is not None :
 if self . sep not in signed_value :
              message . message ( )
 self . _js = [ ]
 settingsfile = upath ( sys . modules [ settings . __module__ ] . __file__ )
 if isinstance ( self . data , datetime . datetime ) and is_aware ( self . data ) :
              encoding = settings . DEFAULT_CHARSET
          self . id = Tok . num
     if len ( fixture_files_in_dir ) > 1 :
 if formatter :
 import hashlib
 try :
 from django . core . management import call_command
    smart_split_re = re . compile ( r"""     ((?:         [^\s'"]*         (?:             (?:"(?:[^"\\]|\\.)*" | '(?:[^'\\]|\\.)*')             [^\s'"]*         )+     ) | \S+) """ , re . VERBOSE )
                   data = BytesIO ( self . _body )
 for bytes in stream :
                   if hasattr ( content , 'temporary_file_path' ) :
  try :
  RESET = '0'
 def rendered_content ( self ) :
 yield "# Feel free to rename the models, but don't rename db_table values or field names."
              data [ Model . _meta . pk . attname ] = Model . _meta . pk . to_python (  node . getAttribute ( 'pk' ) )
 from django . utils import six
   self . streaming_content = streaming_content
 with lock :
          if str ( number ) [ 0 ] == sign :
 return http . parse_cookie ( raw_cookie )
              return None
  _mtimes = { }
  else :
 parser . add_argument ( '-a' , '--all' , action = 'store_true' , dest = 'use_base_manager' , default = False ,  help = "Use Django's base manager to dump all models stored in the database, "  "including those that would otherwise be filtered or modified by a custom manager." )
           return False
 from django . core . serializers import base
  return ( 0 , k [ 1 ] )
 try :
 plan = executor . migration_plan ( executor . loader . graph . leaf_nodes ( ) )
          nesting = 1
     def validate ( self , app_config = None , display_num_errors = False ) :
 def escapejs_filter ( value ) :
 handler . addQuickElement ( "link" , "" , { "rel" : "alternate" , "href" : self . feed [ 'link' ] } )
  del attr
 end = len ( text )
 if isinstance ( item . get ( 'unique_id_is_permalink' ) , bool ) :
          pass
          if os . path . exists ( sql_file ) :
   fields = (   models . CharField ( name = 'cache_key' , max_length = 255 , unique = True , primary_key = True ) ,  models . TextField ( name = 'value' ) ,  models . DateTimeField ( name = 'expires' , db_index = True ) ,  )
              return self . filters [ filter_name ]
              return replacement
   return new_class
 if not hasattr ( obj , "_meta" ) :
  new_second_item . extend ( item )
  data = self . _prepare_data ( data )
          tried = [ ]
 outer . update ( password . translate ( hmac . trans_5C ) )
  else :
                   raise
 def __promise__ ( cls , klass , funcname , method ) :
              _ , ser_fmt , cmp_fmt = self . parse_name ( os . path . basename ( fixture_file ) )
 self . _cache . delete_multi ( map ( l , keys ) )
 return '"%s"' % etag . replace ( '\\' , '\\\\' ) . replace ( '"' , '\\"' )
     def to_locale ( language , to_lower = False ) :
 from importlib import import_module
  except ValidationError as e :
 if trim :
              os . makedirs ( basedir )
              return Media ( ** { str ( name ) : getattr ( self , '_' + name ) } )
 from django . db . migrations . writer import MigrationWriter
          return self . as_table ( )
          key = self . make_key ( key , version = version )
                              message_context = message_context . strip ( "'" )
  def add_arguments ( self , parser ) :
 import calendar
    return sorted ( all_files )
 try :
    if not os . access ( self . file_path , os . W_OK ) :
  else :
 resolved_path . append ( ns )
          if value is None :
 infos = [ e for e in all_issues if checks . INFO <= e . level < checks . WARNING and not e . is_silenced ( ) ]
 cache_key = 'views.decorators.cache.cache_header.%s.%s' % (  key_prefix , url . hexdigest ( ) )
  def __init__ ( self , parent_instance , * args , ** kwargs ) :
                  try :
 return "|" . join ( prefix + re . escape ( c ) + suffix for c in choices . split ( ) )
 self . stdout . write ( "  you can delete them." )
 return '%02d' % calendar . monthrange ( self . data . year , self . data . month ) [ 1 ]
 if not supported_platform or not is_a_tty :
  filenames = [ ]
                      try :
              self . nodelist_empty = nodelist_empty
  if not dictionary :
 if token_string . find ( TRANSLATOR_COMMENT_MARK ) :
          data = {  "model" : smart_text ( obj . _meta ) ,  "fields" : self . _current ,  }
          command = load_command_class ( app_name , name )
              raise ValueError ( "The file cannot be reopened." )
  except VariableDoesNotExist :
     for field in concrete_model . _meta . many_to_many :
                  e . django_template_source = node . source
          raise ExternalReferenceForbidden ( context , base , sysid , pubid )
                      if set ( kwargs . keys ( ) ) | set ( defaults . keys ( ) ) != set ( params ) | set ( defaults . keys ( ) ) | set ( prefix_args ) :
   return force_text ( name . replace ( '\\' , '/' ) )
 default_error_messages = {  'invalid' : _ ( 'Enter a whole number.' ) ,  }
  from __future__ import unicode_literals
    self . _reverse_dict [ language_code ] = lookups
 self . _exception_middleware = [ ]
 if errors :
              pass
import cgi
                  return min ( self . management_form . cleaned_data [ TOTAL_FORM_COUNT ] , self . absolute_max )
   def t ( self ) :
          language_code = get_language ( )
                  host = '%s:%s' % ( host , server_port )
    def __call__ ( self , value ) :
   return "%s.%s" % ( package [ : dot ] , name )
   def exit_command ( self ) :
  except UnicodeDecodeError :
                  return plural_suffix
  if self . feed [ 'feed_copyright' ] is not None :
                                      for sql in index_sql :
              id_ += '_0'
     def literals ( choices , prefix = "" , suffix = "" ) :
      random = random . SystemRandom ( )
 from django . core import signals
  else :
 def comment ( parser , token ) :
   try :
 self . xml . startElement ( "django-objects" , { "version" : "1.0" } )
 for header in cc_delim_re . split ( response [ 'Vary' ] ) :
                  scheme , netloc , path , query , fragment = urlsplit ( value )
          attrs [ 'help_texts' ] = help_texts
 trailing_empty_content_re = re . compile ( r'(?:<p>(?:&nbsp;|\s|<br \/>)*?</p>\s*)+\Z' )
   if getattr ( func , 'expects_localtime' , False ) :
                  self . appendlist ( key , value )
   size = property ( _get_size , _set_size )
 schemes = [ 'http' , 'https' , 'ftp' , 'ftps' ]
   db_name = connection . creation . create_test_db ( verbosity = verbosity , autoclobber = not interactive , serialize = False )
   def write_message ( self , message ) :
 if not templatetags_modules :
  stats [ MISSES ] += 1
 if autoescape :
 for form in valid_forms :
  else :
    def available_attrs ( fn ) :
 sorted_issues = [  ( criticals , 'CRITICALS' ) ,  ( errors , 'ERRORS' ) ,  ( warnings , 'WARNINGS' ) ,  ( infos , 'INFOS' ) ,  ( debugs , 'DEBUGS' ) ,  ]
          results [ predicate ( item ) ] . append ( item )
      import pickle
   year = dt . year
    def file_complete ( self , file_size ) :
          return TemplateLiteral ( self . template_parser . compile_filter ( value ) , value )
              handler . addQuickElement ( "author" , item [ "author_email" ] )
              response = None
  return attachment
                   parser . add_argument ( 'args' , nargs = '*' )
 tell = property ( lambda self : self . file . tell )
 return _get_timezone_name ( get_default_timezone ( ) )
 self . hint = hint
 expanded_template = path . normpath ( expanded_template )
 from django . utils . six . moves import zip
  elif cmatches :
   prefix = 'django_%s_template_' % self . app_or_project
 if idstring is None :
 self . _headers [ header . lower ( ) ] = ( header , value )
 StringIO = BytesIO = StringIO . StringIO
 self . content_type_extra = content_type_extra
              @ decorator
 s = s . encode ( 'utf-8' )
 if not squash :
          super ( ExternalReferenceForbidden , self ) . __init__ ( )
 self . dicts [ - 1 ] [ key ] = value
          return _time . tzname [ self . _isdst ( dt ) ]
  seen . add ( k )
 __init__ = type . __init__
  if f . db_index :
 self . lineno = 1
                  nodes . extend ( nodelist . get_nodes_by_type ( nodetype ) )
   def __iter__ ( self ) :
 values = _itervalues
 return force_str ( '<%s\npath:%s,\nGET:%s,\nPOST:%s,\nCOOKIES:%s,\nMETA:%s>' %  ( request . __class__ . __name__ ,  path ,  six . text_type ( get ) ,  six . text_type ( post ) ,  six . text_type ( cookies ) ,  six . text_type ( meta ) ) )
 self . keyOrder = list ( data ) if data else [ ]
  cycle_iter = context . render_context [ self ]
  is_a_tty = hasattr ( sys . stdout , 'isatty' ) and sys . stdout . isatty ( )
 from django . utils . module_loading import import_string
     return bound_func ( * args , ** kwargs )
      pass
          candidate = str ( candidate )
   self . xml . endElement ( "field" )
  else :
              return '%s=%s' % ( t [ 0 ] , t [ 1 ] )
 del cmd_options [ 'args' ]
   else :
    def ungettext ( singular , plural , number ) :
      self . _queryset = qs
  test_runner_class = get_runner ( settings , self . test_runner )
   def render ( self , context ) :
  def clean ( self , value ) :
              self . status_code = status
  from django . core . management . base import BaseCommand , CommandError
                      plural . append ( contents )
      @ lru_cache . lru_cache ( maxsize = None )
     class DebugNode ( Node ) :
 self . extra_headers = headers or { }
 _super ( SimpleLazyObject , self ) . __init__ ( )
                 return 'NOTPROVIDED'
 return module . Command ( )
          _active . value = pytz . timezone ( timezone )
                      raise ValueError (  "'%s' has no field named '%s'." % ( self . __class__ . __name__ , field ) )
                        ns = current_app
  idhost = DNS_NAME
          from importlib . util import find_spec as importlib_find
          return input_val
              if default is None :
   def created_time ( self , name ) :
              raise ImproperlyConfigured ( 'Path for saving emails is invalid: %r' % self . file_path )
   except ( IOError , OSError ) :
 self . _files = MultiValueDict ( )
 import warnings
              raise ImportError (  "Could not import '%s'. The path must be fully qualified." %  lookup_view )
      def __init__ ( self , name ) :
                  raise
 from django . template . base import TemplateSyntaxError , Library , Node , TextNode , token_kwargs , Variable
               return dec ( func )
                      cls . __bytes__ = cls . __bytes_cast
   def _create_mime_attachment ( self , content , mimetype ) :
              tzinfo = utc
 from django . utils . dateformat import format , time_format
  if force_text ( value ) != force_text ( orig ) :
   old_field_name = None
   def reset ( self ) :
 self . default_locale_path = None
   return False
   if response is None :
 raise NotImplementedError ( 'subclasses of Tokenparser must provide a top() method' )
   def message ( self ) :
 if item [ 'author_email' ] is not None :
 for basedir in basedirs :
          return { "version" : self . _version ,  "xmlns:atom" : "http://www.w3.org/2005/Atom" }
           return [ ( '' , [ ] ) ]
  self . _ordering . append ( ( i , form . cleaned_data [ ORDERING_FIELD_NAME ] ) )
   formatters = config . get ( 'formatters' , EMPTY_DICT )
  if self . locale_paths :
 self . params = params
              obj = form . instance
           raw_query_string = get_bytes_from_wsgi ( self . environ , 'QUERY_STRING' , '' )
   def has_other_pages ( self ) :
          try :
 inner . update ( password . translate ( hmac . trans_36 ) )
  setattr ( cls , k , meth )
              self . choices = [ ( "" , "---------" ) ]
  else :
          return
          return ContextDict ( self , * args , ** kwargs )
              if six . PY3 :
   class MergeDict ( object ) :
  else :
  finally :
 del self . dicts [ - 1 ] [ key ]
 from django . template . context import ( BaseContext , Context , RequestContext ,  ContextPopException )
 HITS , MISSES = 0 , 1
 forms = ' ' . join ( form . as_ul ( ) for form in self )
 parser . add_argument ( '--failfast' ,  action = 'store_true' , dest = 'failfast' , default = False ,  help = 'Tells Django to stop running the test suite after first '  'failed test.' ) ,
 msg = SafeMIMEText ( self . body , self . content_subtype , encoding )
   def full_clean ( self ) :
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
          pass
 from django . utils import six
  return parser . _namedCycleNodes [ name ]
 endtag_re = re . compile ( '</%s>' % tags_re )
                      if not pythonrc :
  self . __dict__ . update ( obj_dict )
              return int ( time . mktime ( self . data . timetuple ( ) ) )
                          continue
   def discard ( self , item ) :
              error_messages = kwargs . get ( 'error_messages' ) or { }
 try :
                  kwargs [ "initial" ] = getattr ( self . parent_instance , self . to_field )
   def __repr__ ( self ) :
     __all__ = [ 'file_move_safe' ]
              ctx . update ( force_bytes ( value ) )
  for migration in app_migrations :
              val = None
   raise Resolver404 ( { 'tried' : tried , 'path' : new_path } )
   templatetags_modules = _templatetags_modules
      import imp
          _default = translation ( settings . LANGUAGE_CODE )
 if filter_name in ( 'escape' , 'safe' ) :
                      match = condition . eval ( context )
              self . clear ( )
 output . extend ( [ encode ( k , force_bytes ( v , self . encoding ) )  for v in list_ ] )
 app = model . _meta . app_label
                  app_list = resolver . app_dict [ ns ]
   @ property
 parser . add_option ( '--pythonpath' ,  help = 'A directory to add to the Python path, e.g. "/home/djangoprojects/myproject".' ) ,
          errors = self . default_error_messages . copy ( )
 if relative_dir :
   intrans = True
                                  val = list ( val )
 self . verbosity = options . get ( 'verbosity' )
  token = Token ( TOKEN_COMMENT , content )
 message = _ ( 'Ensure this value is %(limit_value)s (it is %(show_value)s).' )
 self . _errors = None
 __import__ ( name )
 allow_cascade = options . get ( 'allow_cascade' , False )
  return render_value_in_context ( output , context )
                return False
   def flatatt ( attrs ) :
  return value
              raise AttributeError ( "You cannot set content to a 304 (Not Modified) response" )
          if initial is None :
      def __init__ ( self , * args , ** kwargs ) :
  if number_equal > 40 :
          return input_val
 from django . http . multipartparser import MultiPartParser , MultiPartParserError
  elif indexes [ column_name ] [ 'unique' ] :
              for cache_alias in settings . CACHES :
                      m = Media ( )
                  stream_created = self . open ( )
  if not _cached_filenames and settings . USE_I18N :
 self . xml . startElement ( "field" , {  "name" : field . name ,  "rel" : field . rel . __class__ . __name__ ,  "to" : smart_text ( field . rel . to . _meta ) ,  } )
 handler . endElement ( "rss" )
 self . origin = origin
          return force_text ( settings . FORCE_SCRIPT_NAME )
          return s . encode ( "latin-1" )
   if options . get ( 'no_wrap' ) :
 if queryset is None :
              try :
          super ( DictWrapper , self ) . __init__ ( data )
  return value
     def upath ( path ) :
          return self . level >= ERROR
    def value_from_datadict ( self , data , files , name ) :
 if self . _is_rendered :
              digits . append ( '0' )
  continue
         class TokenBase ( object ) :
   def __repr__ ( self ) :
   LockFileEx = windll . kernel32 . LockFileEx
 from django . utils import six
          match = self . regex . search ( path )
   def __deepcopy__ ( self , memo ) :
              if settings . USE_L10N :
  except ( ValueError , TypeError ) :
 if data [ last : last + 1 ] == b'\r' :
   if self . max_length is not None and len ( file_name ) > self . max_length :
          module = importlib . import_module ( serializer_module )
  return None
   headers = [  ( b': ' . join ( [ to_bytes ( key , 'ascii' ) , to_bytes ( value , 'latin-1' ) ] ) )  for key , value in self . _headers . values ( )  ]
                  self . stdout . write ( "No changes detected in apps '%s'" % ( "', '" . join ( app_labels ) ) )
     absolute_max = max_num + DEFAULT_MAX_NUM
          super ( SortedDict , self ) . clear ( )
     def boolean_check ( v ) :
                        flags = ( os . O_WRONLY | os . O_CREAT | os . O_EXCL |  getattr ( os , 'O_BINARY' , 0 ) )
  from django . core . management . base import AppCommand
 dfmt = config . get ( 'datefmt' , None )
              pass
  safe_input = isinstance ( text , SafeData )
 self . help_text = help_text
  if getattr ( ev , 'filename' , None ) is None :
 so = open ( out_log , 'a+' , buffering )
  return name , ( value , params )
              return
 import sys
  else :
  return '%s %s' % ( self . f ( ) , self . a ( ) )
      pass
 return supported
 from django . core . management . sql import sql_custom
   if item [ 'description' ] is not None :
  finally :
              basedirs . append ( os . path . join ( app_config . path , 'locale' ) )
  if not bytes :
 from django . utils import six
 return time_str + '%+03d%02d' % ( hour , minute )
 request = sys . modules [ __name__ + ".moves.urllib_request" ]
     class Resolver404 ( Http404 ) :
          result = super ( ChoiceField , self ) . __deepcopy__ ( memo )
          LocaleRegexProvider . __init__ ( self , regex )
 class BoundField ( object ) :
 if value is not None :
          warnings . warn (  "django.utils.tzinfo.FixedOffset will be removed in Django 1.9. "  "Use django.utils.timezone.get_fixed_timezone instead." ,  RemovedInDjango19Warning )
 from django . db import connection
 self . username = settings . EMAIL_HOST_USER if username is None else username
 html_gunk_re = re . compile ( r'(?:<br clear="all">|<i><\/i>|<b><\/b>|<em><\/em>|<strong><\/strong>|<\/?smallcaps>|<\/?uppercase>)' , re . IGNORECASE )
 return self . _coerce ( value )
   def get_form_error ( self ) :
      widget = TimeInput
          return 'ValidationError(%s)' % self
 shutdown_message = options . get ( 'shutdown_message' , '' )
 root [ : ] = [ root , root , None , None ]
          self . nodelist = nodelist
          formfield_callback = attrs . pop ( 'formfield_callback' , None )
              factor -= 1
          self . _size = size
 ch , escaped = next ( pattern_iter )
   for __ in iterator :
   try :
  else :
 return result
              raise CommandError ( "Can't find %s. Make sure you have GNU "  "gettext tools 0.15 or newer installed." % program )
 self . vals = [ ]
                      old_handler = None
  else :
 if nodelist :
 buffer_ = None
 for chunk in self . chunks ( ) :
  def __str__ ( self ) :
   if invalid_apps :
   def _resolve_lookup ( self , context ) :
              thefile = self . file
          return self . paginator . validate_number ( self . number + 1 )
 if over_bytes :
          return self . dicts [ - 1 ] . get ( key , otherwise )
 try :
          get = ( pformat ( GET_override )  if GET_override is not None  else pformat ( request . GET ) )
 mtime = stat . st_mtime
              subcommand = 'help'
          try :
 while len ( line ) > max_width :
 from django . utils . text import get_text_list , capfirst
 __D2 = r'(?P<day>[ \d]\d)'
  return ret
  from django . utils . html import avoid_wrapping
  except OSError :
 for frag in name :
 return int ( binascii . hexlify ( x ) , 16 )
  if i > sys . maxint :
    return created_models
   if not now :
  def _parse_header ( line ) :
 if csrf_token is not None :
          return self . has_previous ( ) or self . has_next ( )
          tag , this_value_expr , max_value_expr , max_width , as_ , asvar = bits
                      declared_fields . pop ( attr )
   def add_prefix ( self , field_name ) :
          return ModelChoiceIterator ( self )
    kwargs = { }
                      messages = ValidationError ( messages )
              self . __offset = timedelta ( minutes = offset )
  if isinstance ( pattern , RegexURLResolver ) :
 for field , errors in self . items ( ) :
                 s = s . decode ( encoding , errors )
  except ImportError :
                  bits . append ( int ( x ) )
  LANGUAGE_SESSION_KEY = '_language'
                      message = "'%s' already exists" % top_dir
  else :
     def restart_with_reloader ( ) :
  else :
 import ssl
              if not self . valid_value ( val ) :
  p = i
 global _format_cache , _format_modules_cache
      def __init__ ( self , template_string , origin = None , name = None ) :
          opts = self . _meta
              try :
    __iter__ = xreadlines
  self . urlconf_name = urlconf_name
 return [ field for field in self if field . is_hidden ]
 from django . template . base import TemplateDoesNotExist
   def show_migration_list ( self , connection , app_names = None ) :
                  assert remaining > 0 , 'remaining bytes to read should never go negative'
 if domain :
  return path
              self . unclosed_block_tag ( parse_until )
                      data [ field . attname ] = None
              self . _set ( key , pickled , timeout )
 while model_dependencies :
  else :
              kwargs [ 'help_text' ] = help_texts [ f . name ]
 best_doublecolon_start = doublecolon_start
   if isinstance ( nodelist , NodeList ) and not isinstance ( node , TextNode ) :
          if 'forloop' in context :
  resolved_kwargs = dict ( ( k , v . resolve ( context ) ) for k , v in self . kwargs . items ( ) )
 if settings . configured :
              self . _populate ( )
                      if model in created_models :
  zfile . close ( )
 raise NotImplementedError ( 'subclasses of NoArgsCommand must provide a handle_noargs() method' )
  else :
    def ugettext ( message ) :
 return "<For Node: for %s in %s, tail_len: %d%s>" % ( ', ' . join ( self . loopvars ) , self . sequence , len ( self . nodelist_loop ) ,  reversed_text )
 timeval = time . time ( )
 if keys :
  return func ( self . _wrapped , * args )
  use_workaround = (  ( current_version < ( 2 , 7 , 3 ) ) or  ( current_version >= ( 3 , 0 ) and current_version < ( 3 , 2 , 3 ) )  )
                  raise UnrecognizedArchiveFormat (  "File object not a recognized archive format." )
 from django . utils import six
   @ property
 try :
              yield obj
          t = self . current_token
 def get_supported_language_variant ( lang_code , strict = False ) :
          value = ungettext ( "%(size)d byte" , "%(size)d bytes" , 0 ) % { 'size' : 0 }
 result = block . nodelist . render ( context )
   args = [ self . program ] + self . program_options + [ '-o' ,  npath ( base_path + '.mo' ) , npath ( base_path + '.po' ) ]
                  unique = "UNIQUE " if f . unique else ""
  else :
          raise MultiPartParserError ( 'multipartparser.exhaust() was passed a non-iterable or stream parameter' )
  return smart_text ( value )
              dec_part = dec_part [ : decimal_pos ]
    class SafeData ( object ) :
  except ( ValueError , TypeError ) :
                          extracted . close ( )
 from django . utils . deprecation import RemovedInDjango19Warning
 os . dup2 ( si . fileno ( ) , sys . stdin . fileno ( ) )
              return output
   i += 1
 for d in reversed ( self . dicts ) :
 value = super ( IntegerField , self ) . to_python ( value )
 if value is None :
 for format in BUILTIN_SERIALIZERS :
           value = timezone . normalize ( value )
    class PageNotAnInteger ( InvalidPage ) :
      class WithNode ( Node ) :
 yield "#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table"
                  self . stdout . write ( self . style . MIGRATE_HEADING ( "Synchronizing apps without migrations:" ) )
  if flags is not None :
   if iterator is None :
          return map ( self . make_bytes , self . _iterator )
              return 1
from __future__ import unicode_literals
                   qs = f . value_from_object ( instance )
          try :
  if isinstance ( stream_or_string , six . string_types ) :
   def _create_alternatives ( self , msg ) :
 assert mimetype is None
  targets = [ ( app_label , migration . name ) ]
    def __enter__ ( self ) :
 bits = token . split_contents ( ) [ 1 : ]
 if nodelist . get_nodes_by_type ( ExtendsNode ) :
   elif len ( key ) == 1 and type ( key [ 0 ] ) in fasttypes :
                            if not isinstance ( item , ( list , tuple ) ) :
 if not options . get ( 'addrport' ) :
                   break
              thousand_sep = get_format ( 'THOUSAND_SEPARATOR' )
   return result
                  pass
 for lib in builtins :
                  stream . unget ( chunk [ - rollback : ] )
  self . xml . endElement ( "object" )
 palette = PALETTES [ NOCOLOR_PALETTE ] . copy ( )
 try :
 parser . add_argument ( '--no-optimize' , action = 'store_true' , dest = 'no_optimize' , default = False ,  help = 'Do not try to optimize the squashed operations.' )
              if status != STATUS_OK :
   try :
                      old_handler = signal . signal ( signal . SIGTTOU , signal . SIG_IGN )
 if ch != '?' or escaped :
              return False
 for member in members :
    if self . merge and not conflicts :
  from django . utils import six
              self . years = years
 if safe and arg != ';' :
    def sanitize_address ( addr , encoding ) :
              ip_address = literal_match . group ( 1 )
          self . _out = out
 return getattr ( _urlconfs , "value" , default )
  return nodelist
 return new_context
  return self . save_existing_objects ( commit ) + self . save_new_objects ( commit )
  final_attrs = self . build_attrs ( attrs , name = name )
 if not commit :
       self . LibraryValueNotFoundException = value_not_found_exception
          BaseCache . __init__ ( self , params )
 localedir = os . path . join ( os . path . dirname ( settingsfile ) , 'locale' )
 if self . _non_form_errors is None :
   if not isinstance ( d , datetime . datetime ) :
  else :
 from itertools import groupby , cycle as itertools_cycle
     if i >= self . initial_form_count ( ) and i >= self . min_num :
  from django . forms . widgets import Widget , Select
 if os . path . exists ( fname ) :
   def setdefault ( self , key , default = None ) :
              file_obj = handler . file_complete ( counters [ i ] )
    from django . core . servers . basehttp import get_internal_wsgi_application
 GB = 1 << 30
 return MONTHS [ self . data . month ]
   _serializers = serializers
          return base64 . urlsafe_b64decode ( s . ljust ( len ( s ) + len ( s ) % 4 , b'=' ) )
 parser . add_argument ( '--domain' , '-d' , default = 'django' , dest = 'domain' ,  help = 'The domain of the message files (default: "django").' )
   return [ ]
     class StringOrigin ( Origin ) :
 raise NotImplementedError ( 'Subclasses must implement this method.' )
  _file . write ( chunk )
      from django . conf import settings
 if hasattr ( timezone , 'localize' ) :
    class ImproperlyConfigured ( Exception ) :
   class Command ( TemplateCommand ) :
      def compile_string ( template_string , origin ) :
              self . full_clean ( )
          iterator = iter ( stream_or_iterable )
          if ch != '\\' :
              kwargs [ 'instance' ] = self . get_queryset ( ) [ i ]
       response_fixes = [  http . fix_location_header ,  http . conditional_content_removal ,  ]
  else :
 with io . open ( os . path . join ( self . dirpath , thefile ) , "w" , encoding = 'utf-8' ) as fp :
   out = self . compress ( clean_data )
                  expiry = self . get_backend_timeout ( timeout )
  output = [ ]
  from django . conf import settings
      def abspathu ( path ) :
  try :
          idstring = ''
  return self . limit_choices_to
                   writer = MigrationWriter ( migration )
                  used += '.' + frag
  elif field . rel and isinstance ( field . rel , models . ManyToOneRel ) :
              start , end = match . span ( )
 parser . add_argument ( '--no-color' , action = 'store_true' , dest = 'no_color' , default = False ,  help = "Don't colorize the command output." )
 saved_locale = translation . get_language ( )
  setattr ( self , real_name , getattr ( trans , real_name ) )
              for field , errors in self . error_dict . items ( ) :
    def time_format ( value , format = None , use_l10n = None ) :
              raise ValueError ( "Don't mix *args and **kwargs in call to reverse()!" )
  elif size < len ( self . buffer ) :
 parser . add_argument ( '--version' , action = 'version' , version = self . get_version ( ) )
                  self . stderr . write ( "App '%s' could not be found. Is it in INSTALLED_APPS?" % app_label )
 msg = "Unclosed tag '%s'. Looking for one of: %s " % ( command , ', ' . join ( parse_until ) )
  ALL_FIELDS = '__all__'
    def pop ( self , name ) :
 def __init__ ( self , out , style_func = None , ending = '\n' ) :
 self . day_none_value = ( 0 , empty_label [ 2 ] )
 options = self . render_options ( choices , value )
  if labels is not None :
      text = match . group ( 1 )
   def resolve ( self , path ) :
              return list ( self . iteritems ( ) )
 return self . as_widget ( TextInput ( ) , attrs , ** kwargs )
 from django . template . base import TemplateDoesNotExist
   while token . contents . startswith ( 'elif' ) :
 import os
 value = '.' . join ( reversed ( parts ) )
                      fp . write ( content )
  def __init__ ( self , loaders ) :
     def build_potfiles ( self ) :
  except ( ValueError , InvalidOperation , TypeError , UnicodeEncodeError ) :
    class BlockContext ( object ) :
              with io . open ( fname , 'rb' ) as f :
     for date_check in all_date_checks :
  raise CommandError ( msg )
  if self . localize :
              value = ''
      pass
  if isinstance ( s , six . text_type ) :
                  self . stdout . write ( "  Installing indexes...\n" )
  if not self . allow_empty_file and not file_size :
 self . _chunk_size = min ( [ 2 ** 31 - 4 ] + possible_sizes )
    def send_messages ( self , email_messages ) :
              if field . widget . needs_multipart_form :
    @ register . filter ( is_safe = False )
     request_finished . connect ( update_watch )
 try :
              return None
 def timeuntil_filter ( value , arg = None ) :
   def __str__ ( self ) :
 if label_output :
              command . stdout . write ( 'processing file %s in %s\n' % ( self . file , self . dirpath ) )
   if daemonize :
 return RegroupNode ( target , expression , var_name )
 if processors is None :
 def bound_func ( * args2 , ** kwargs2 ) :
          return self . mapping . get ( self . tagtype , '' )
                  old_method_name = renamed_method [ 0 ]
  return klass
                  args . append ( parser . compile_filter ( value ) )
   def d ( self ) :
  except NotImplementedError :
                           context_match = context_re . match ( imatch . group ( 2 ) )
 self . context_data = context
              return QueryDict ( '' , encoding = self . _encoding ) , MultiValueDict ( )
   super ( Command , self ) . run_from_argv ( argv )
              cursor . close ( )
 if isinstance ( offset , timedelta ) :
 trans_real . _default = None
  except NotImplementedError :
          raise ValidationError ( _ ( 'Enter a valid IPv6 address.' ) , code = 'invalid' )
  except StandardError as e :
   def __iter__ ( self ) :
 self . _separator = b'--' + boundary
    @ register . filter ( is_safe = True )
              return get_template ( template_name , dirs )
  SafeUnicode = SafeText
   def __repr__ ( self ) :
   def receive_data_chunk ( self , raw_data , start ) :
 if output :
  try :
              @ wraps ( fdel )
   RAISE_ERROR = object ( )
          return s
              choices . insert ( 0 , none_value )
   finally :
          return ( "%" + six . text_type ( arg ) ) % value
              nodes . extend ( node . get_nodes_by_type ( nodetype ) )
 v . __cause__ , v . __traceback__ = e , tb
      return _trans . ngettext ( singular , plural , number )
          from django import VERSION as version
 if self . use_ipv6 and not socket . has_ipv6 :
  renamed_methods = ( )
      return ugettext ( message )
                      expires = timezone . make_naive ( expires , timezone . utc )
   self . no_obsolete = options . get ( 'no_obsolete' )
  hextets [ best_doublecolon_start : best_doublecolon_end ] = [ '' ] 
 for field , messages in message . items ( ) :
          return value [ 0 ]
  if not settings . configured :
              pass
 import os
 cls = extension_map . get ( tail_ext )
      status_code = 403
 from django . utils . deprecation import RemovedInDjango19Warning
 parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
              raise TemplateSyntaxError ( "Invalid arguments provided to simple_tag" )
                      blocks = dict ( ( n . name , n ) for n in  compiled_parent . nodelist . get_nodes_by_type ( BlockNode ) )
  else :
              output . extend ( f . post_create_sql ( style , model . _meta . db_table ) )
          self . _request_middleware = self . _view_middleware = self . _template_response_middleware = self . _response_middleware = self . _exception_middleware = None
     @ classmethod
 if not email_messages :
                  try :
 httpd . serve_forever ( )
  else :
  elif isinstance ( obj , EscapeData ) :
                  deps = getattr ( model . natural_key , 'dependencies' , [ ] )
  except InvalidOperation :
 if item [ 'description' ] is not None :
   def itervalues ( d , ** kw ) :
                      continue
  else :
                  for model in model_list :
              if len ( new_operations ) == len ( operations ) :
              code_list . append ( opt_dict [ o ] )
                  opts = model . _meta
   def __enter__ ( self ) :
  if hasattr ( self , '_post' ) :
     headerlist = [ ]
          ret_ip . append ( ( '0' * ( 4 - len ( hextet ) ) + hextet ) . lower ( ) )
              deactivate ( )
 force_unicode = force_text
 ns_pattern = ''
                  self . connection . ehlo ( )
          self . _archive . extract ( to_path )
                  self . fixture_count += 1
              file . seek ( file_pos )
   if url . startswith ( '///' ) :
   RUN_RELOADER = True
   else :
              @ wraps ( view_func , assigned = available_attrs ( view_func ) )
 if not kwarg_format :
   def __bool__ ( self ) :
  except ( OverflowError , ValueError ) :
      pass
    ctypes , opts = parse_header ( content_type . encode ( 'ascii' ) )
              for root , dirs , files in sorted ( os . walk ( self . path ) ) :
 def ifnotequal ( parser , token ) :
              p = i
  def add_arguments ( self , parser ) :
 kwargs = { 'pk_field' : True }
                  e . django_template_source = self . source
                          filemsg = 'file %s, ' % origin
 pass
 return value . center ( int ( arg ) )
 return result
 for bit in smart_split_re . finditer ( text ) :
 MONTHS = {  1 : _ ( 'January' ) , 2 : _ ( 'February' ) , 3 : _ ( 'March' ) , 4 : _ ( 'April' ) , 5 : _ ( 'May' ) , 6 : _ ( 'June' ) ,  7 : _ ( 'July' ) , 8 : _ ( 'August' ) , 9 : _ ( 'September' ) , 10 : _ ( 'October' ) , 11 : _ ( 'November' ) ,  12 : _ ( 'December' )  }
   def __repr__ ( self ) :
  raise CommandError ( "%r is not a valid %s name. Please %s." %  ( name , app_or_project , message ) )
 result = 0
 from django . core . serializers import base
          super ( HttpResponseNotModified , self ) . __init__ ( * args , ** kwargs )
    add_move ( MovedModule ( "_dummy_thread" , "dummy_thread" ) )
  return ''
              host = self . META [ 'HTTP_HOST' ]
              if is_naive ( obj ) :
              resolver = get_ns_resolver ( ns_pattern , resolver )
  except ValueError :
 self . data = data or { }
          post = '<could not parse>'
 import os
  from __future__ import unicode_literals
  try :
  self . replace_header ( 'Content-Type' , 'text/%s; charset="%s"' % ( subtype , charset ) )
  else :
   if not hasattr ( callback , '__name__' ) :
  if find_command ( self . program ) is None :
 ext_list = [ ]
 if threading :
                  warnings . warn ( "A {% csrf_token %} was used in a template, but the context did not provide the value.  This is usually caused by not using RequestContext." )
                      try :
  last_bit = self . template_string [ upto : ]
      return _trans . gettext ( message )
  cc = dict ( _to_tuple ( el ) for el in  cc_delim_re . split ( response [ 'Cache-Control' ] ) )
                if settings . DEBUG :
          key = self . make_key ( key , version = version )
   elif self . verbosity == 3 :
 app_dir = apps . get_app_config ( model . _meta . app_label ) . path
 def urlizetrunc ( value , limit , autoescape = None ) :
 extra_params . update ( field_params )
 start = 0
   def pop ( self , key , default = None ) :
 return MONTHS_3 [ self . data . month ] . title ( )
               def dec ( func ) :
  except AttributeError :
 return update_wrapper ( wrapper , user_function )
  text_args = [ force_text ( v ) for v in args ]
   def enter_command ( self , command , token ) :
                if data_list [ 0 ] in self . empty_values :
   return self . parent_instance
    @ register . filter ( is_safe = True )
   if filename not in _error_files :
          if hextet . count ( '.' ) == 3 :
                  if register_to :
 try :
              del self . _headers [ header . lower ( ) ]
  def u ( s ) :
   class SimplerXMLGenerator ( XMLGenerator ) :
 try :
 warnings . warn (  'import_by_path() has been deprecated. Use import_string() instead.' ,  RemovedInDjango19Warning , stacklevel = 2 )
                          raise ValueError ( 'Unable to configure logger '  '%r: %s' % ( name , e ) )
  elif ch != 'P' :
 pass
  else :
 try :
    class SsiNode ( Node ) :
          self . test_runner = None
  def chunks ( self , chunk_size = None ) :
  elif options [ 'method' ] in ( 'thread' , 'threaded' ) :
                  raise CommandError ( '"%s" is not a valid port number '  'or address:port pair.' % options [ 'addrport' ] )
              self . _current [ field . name ] = value
   except ImportError :
     if buffer_ is not None :
              value = var . resolve ( context , True )
    class Origin ( object ) :
   __all__ = [  'activate' , 'deactivate' , 'override' , 'deactivate_all' ,  'get_language' , 'get_language_from_request' ,  'get_language_info' , 'get_language_bidi' ,  'check_for_language' , 'to_locale' , 'templatize' , 'string_concat' ,  'gettext' , 'gettext_lazy' , 'gettext_noop' ,  'ugettext' , 'ugettext_lazy' , 'ugettext_noop' ,  'ngettext' , 'ngettext_lazy' ,  'ungettext' , 'ungettext_lazy' ,  'pgettext' , 'pgettext_lazy' ,  'npgettext' , 'npgettext_lazy' ,  'LANGUAGE_SESSION_KEY' ,  ]
   @ property
 tf = TimeFormat ( value )
                          return result
 from __future__ import unicode_literals
 import sys
                                  handler = logging . _handlers [ name ]
      filepath = os . path . abspath ( filepath )
 from django . utils . functional import allow_lazy , SimpleLazyObject
     class _LazyModule ( types . ModuleType ) :
          if self . is_bound and i < self . initial_form_count ( ) :
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to create SQL for. Defaults to the '  '"default" database.' )
  return value
   except KeyError :
 tables = connection . introspection . table_names ( )
 from __future__ import unicode_literals
   def __iter__ ( self ) :
 if data [ last : last + 1 ] == b'\n' :
                  callback = pattern . _callback
        def __getstate__ ( self ) :
         @ python_2_unicode_compatible
              ignore_patterns += [ 'CVS' , '.*' , '*~' , '*.pyc' ]
      def add_css ( self , data ) :
 from django . utils . module_loading import module_has_submodule
 from django . conf import settings
 __T = r'(?P<hour>\d{2}):(?P<min>\d{2}):(?P<sec>\d{2})'
              self . reader_leaves ( )
 if form in forms_to_delete :
     ret_ip = [ ]
              raise AppRegistryNotReady (  "The translation infrastructure cannot be initialized before the "  "apps registry is ready. Check that you don't make non-lazy "  "gettext calls at import time." )
              return None
 from django . utils import archive
  except http_cookies . CookieError :
 offset = self . __offset . seconds // 60
  except Exception :
              f . close ( )
              if six . PY3 :
              if not self . fail_silently :
   endblock = parser . next_token ( )
 for app_config in reversed ( list ( apps . get_app_configs ( ) ) ) :
                      state = tok . next
                 tok = tok . replace ( "\\" , "U" )
   except GeneratorExit :
 from . registry import register , run_checks , tag_exists , Tags
  except ValueError :
  else :
 from io import StringIO
  except IOError as e :
   if hidden_fields :
              ext = mimetypes . guess_extension ( content_type )
 if options [ 'app_label' ] and options [ 'migration_name' ] :
          neg , value = self . convert ( i , self . decimal_digits , self . digits , '-' )
                      for cmatch in cmatches :
  new_name = '%s_%d' % ( new_name , num )
                  pass
 return datetime . datetime ( ** kw )
from django . conf import settings
   except :
          _anonymous_ = [ '_offset_union' ]
      ensure_echo_on ( )
                  self . _set ( key , pickled , timeout )
                  num += 1
 comment_lineno_cache = t . lineno
          if accept_lang == '*' :
  else :
 if not e . connection_reset :
  fixture_files . extend ( fixture_files_in_dir )
                          current = settings . TEMPLATE_STRING_IF_INVALID
   def end_object ( self , obj ) :
                      signal . signal ( signal . SIGTTOU , old_handler )
 from django . utils . six . moves . urllib . parse import urljoin
  else :
              if new_mod is None :
 self . _out . write ( force_str ( style_func ( msg ) ) )
              continue
   def has_next ( self ) :
                  msg += " You may need to add %r to ALLOWED_HOSTS." % domain
 from email . header import Header
    def get_unique_error_message ( self , unique_check ) :
   def handle_app_config ( self , app_config , ** options ) :
   def popen_wrapper ( args , os_err_exc_type = CommandError ) :
                    url_fields [ 1 ] = url_fields [ 2 ]
  if format not in _serializers :
              self . error_class = 'errorlist {}' . format ( error_class )
    if options . get ( 'load_initial_data' ) :
              return mark_safe ( self . render ( self . context ) )
  def add_arguments ( self , parser ) :
                  pass
 return result
          modified_code = None
              self . code = code
                          if name not in logging . _handlers :
  from django . core . mail . backends . base import BaseEmailBackend
  if hasattr ( response , 'render' ) and callable ( response . render ) :
 bits = token . split_contents ( )
 from django . db import models , DEFAULT_DB_ALIAS
 if transfer_encoding is not None :
          with open ( options [ "pidfile" ] , "w" ) as fp :
 for post_callback in self . _post_render_callbacks :
   class RemovedInDjango20Warning ( PendingDeprecationWarning ) :
     self . add_error ( None , errors )
          return mark_safe ( formats . number_format ( '%d' % ( int ( d ) ) , 0 ) )
   self . _post . appendlist ( field_name ,  force_text ( data , encoding , errors = 'replace' ) )
              if isinstance ( self . _regex , six . string_types ) :
                  os . kill ( os . getpid ( ) , - exit_code )
                      raise CommandError ( "More than one migration matches '%s' in app '%s'. Please be more specific." % (  migration_name , app_label ) )
 import locale
  except UnicodeDecodeError :
   class EmailBackend ( BaseEmailBackend ) :
    try :
   if self . verbosity > 0 :
 error = sys . modules [ __name__ + ".moves.urllib_error" ]
 singular = [ ]
  except KeyError :
  import datetime
 from django . db import models
                  if hasattr ( e , 'code' ) and e . code in self . error_messages :
 self . default_locale_path = self . locale_paths [ 0 ]
   def format_subject ( self , subject ) :
          key = self . make_key ( key , version = version )
 executor = MigrationExecutor ( connections [ DEFAULT_DB_ALIAS ] )
 mail = EmailMultiAlternatives ( subject , message , from_email , recipient_list ,  connection = connection )
     csrf_token = context . get ( 'csrf_token' , None )
   return mail . send ( )
 yield 'from %s import models' % self . db_module
 sys . stderr . write ( "  Unable to load the flup package.  In order to run django\n" )
              if unicodedata . combining ( char ) :
     class BaseContext ( object ) :
   def add_error ( self , field , error ) :
  from django . conf import settings
 self . waiting_writers -= 1
  raise
          return [ ]
 obj = Node ( children , connector , negated )
 outer_html = '<ul{id_attr}>{content}</ul>'
  models . signals . pre_syncdb . send (  sender = app_config . models_module ,  app = app_config . models_module ,  create_models = create_models ,  verbosity = verbosity ,  interactive = interactive ,  db = db )
                      continue
   class BadHeaderError ( ValueError ) :
   def writeString ( self , encoding ) :
 def __getitem__ ( self , key ) :
              if this_bases is None :
       def __init__ ( self , name , old_mod , new_mod , old_attr = None , new_attr = None ) :
   except :
  def __init__ ( self , input_date_formats = None , input_time_formats = None , * args , ** kwargs ) :
                  migration . branch = migration . ancestry [  ( migration . ancestry . index ( common_ancestor ) + 1 ) :  ]
 from email . mime . message import MIMEMessage
   def prepare_value ( self , value ) :
  from . messages import ( CheckMessage ,  Debug , Info , Warning , Error , Critical ,  DEBUG , INFO , WARNING , ERROR , CRITICAL )
              raise ValueError ( "dictionary doesn't specify a version" )
 from django . utils . http import urlquote
   if isinstance ( app_name , BaseCommand ) :
  except LookupError :
     capfirst = lambda x : x and force_text ( x ) [ 0 ] . upper ( ) + force_text ( x ) [ 1 : ]
  except OSError :
          self . _validate_unique = True
          return ( self . func , self . args , self . kwargs ) [ index ]
   if not priority :
   def update ( self , other_dict ) :
 if not commit :
   def update ( self , * args , ** kwargs ) :
 t = super ( SafeBytes , self ) . __add__ ( rhs )
  kwargs = dict ( ( k , config [ k ] ) for k in config if valid_ident ( k ) )
                  raise ImproperlyConfigured ( "Error importing template source loader %s - can't pass arguments to function-based loader." % loader )
        def is_aware ( value ) :
      def __init__ ( self , name , nodelist , parent = None ) :
 failures = test_runner . run_tests ( test_labels )
 flat = { }
          self . close ( )
              self . error_class = 'errorlist'
          return ZERO
  else :
                   count , ch = get_quantifier ( ch , pattern_iter )
          return self . get_renderer ( name , value , attrs , choices ) . render ( )
          parser . invalid_block_tag ( endblock , 'endblock' , acceptable_endblocks )
 value = getattr ( obj , field . rel . field_name )
              return [ super ( ModelMultipleChoiceField , self ) . prepare_value ( v ) for v in value ]
 exclude = options . get ( 'exclude' )
              for format in self . input_formats :
                              result . append ( Group ( ( ( "%%(%s)s" % param ) , None ) ) )
  else :
   if terminal_char != ')' :
          return mark_safe ( result )
  @ wraps ( func )
 return VerbatimNode ( nodelist . render ( Context ( ) ) )
 if isinstance ( timezone , tzinfo ) :
 for name in formatters :
  self . _current [ field . name ] = [ m2m_value ( related )  for related in getattr ( obj , field . name ) . iterator ( ) ]
   def W ( self ) :
  __all__ = ( 'LOCK_EX' , 'LOCK_SH' , 'LOCK_NB' , 'lock' , 'unlock' )
 with open ( path , 'rb' ) as f :
  if val == [ ] :
          raise CommandError ( "Unknown command: %r" % name )
              handler = self . get_handler ( * args , ** options )
                  attr_list [ 3 ] |= termios . ECHO
 result = logging . Filter ( name )
 super ( FileField , self ) . __init__ ( * args , ** kwargs )
 return { }
 for operation in migration . merged_operations :
  return True
                          pass
                      view_name = callback . __name__
   def __repr__ ( self ) :
          if options . get ( 'list_tags' ) :
  with context . push ( ** values ) :
 self . validate_key ( key )
  def __dir__ ( self ) :
 return value . lower ( )
                name = self . fk . name
    def __eq__ ( self , other ) :
              return plural_suffix
          self . template_string = template_string
   if fset is not None :
    return output [ : : - 1 ]
                          raise CommandError ( "You can only use --pks option with one model" )
 self . value = value
     loggers = config . get ( 'loggers' , EMPTY_DICT )
  except IndexError :
 self . _delete ( f . name )
              cursor . close ( )
          if value . __traceback__ is not tb :
                  if app == 'django.core' :
      _cookie_allows_colon_in_names = False
 if sent :
  except LookupError :
 if not hasattr ( parser , '_namedCycleNodes' ) :
              result [ i ] += piece
 raise NotImplementedError ( 'subclasses of Storage must provide an accessed_time() method' )
   def extend_nodelist ( self , nodelist , node , token ) :
 substitutions [ 'clear_template' ] = self . template_with_clear % substitutions
 for sublist in second_item :
 from django . core . cache . backends . db import BaseDatabaseCache
          self . template_parser = parser
 super ( NoArgsCommand , self ) . __init__ ( )
 from django . utils import six
 re_chars = re . compile ( r'<.*?>|(.)' , re . U | re . S )
                          i = existing . index ( name )
      input_type = 'checkbox'
    delta = delta + datetime . timedelta ( seconds = 1 )
          if fget is not None :
  if not language_code_re . search ( lang_code ) :
   def validate ( self , value ) :
                warnings . warn (  'Using SplitDateTimeWidget with DateTimeField is deprecated. '  'Use SplitDateTimeField instead.' ,  RemovedInDjango19Warning , stacklevel = 2 )
          raise EntitiesForbidden ( name , value , base , sysid , pubid , notation_name )
 missing_args_message = "You must provide an application name."
   def __iter__ ( self ) :
    if six . PY3 :
    class MultipleObjectsReturned ( Exception ) :
      def __init__ ( self , language , deactivate = False ) :
               return sys . modules [ name ] is not None
  except ValueError :
 os . _exit ( 1 )
      mime_type = 'application/rss+xml; charset=utf-8'
          from django . utils . daemonize import become_daemon
  elif msg and visible_issue_count :
   def widget_attrs ( self , widget ) :
      help = "Checks the entire Django project for potential problems."
     class InvalidTemplateLibrary ( Exception ) :
  closing_tag , tagname , self_closing = tag . groups ( )
   if self . interactive :
     def emit_post_migrate_signal ( created_models , verbosity , interactive , db ) :
 from django . utils . datastructures import MultiValueDict , MergeDict
                  if e . errno == errno . EEXIST :
                  other = other . __cast ( )
  page_range = property ( _get_page_range )
   next = advance_iterator
 return value
  except KeyError :
                  end_index = i
 s = m . group ( 0 )
 @ stringfilter
              return data . getlist ( name )
 renamed = True
    def deactivate ( ) :
     class WSGIRequestHandler ( simple_server . WSGIRequestHandler , object ) :
                              out . write ( ' ngettext(%r, %r, count) ' % (  join_tokens ( singular , trimmed ) ,  join_tokens ( plural , trimmed ) ) )
 new_method_name = renamed_method [ 1 ]
    self . handle_endtag ( tag . lower ( ) )
 from django . utils . safestring import mark_safe
  from django . core import validators
 if os . path . isfile ( fext ) :
   def salted_hmac ( key_salt , value , secret = None ) :
 node = CycleNode ( values )
 node = CycleNode ( values , name , silent = silent )
 if ':' not in template :
              if isinstance ( end , unicode ) :
              inner_text . extend ( getInnerText ( child ) )
                  i += 1
   def rss_attributes ( self ) :
          return get_connection ( backend = self . email_backend , fail_silently = True )
from importlib import import_module
 for fixture_file , fixture_dir , fixture_name in self . find_fixtures ( fixture_label ) :
     class PyLibMCCache ( BaseMemcachedCache ) :
                      response = view_func ( request , * args , ** kwargs )
  import contextlib
  ret = _
   def __str__ ( self ) :
 return result
   def get_many ( self , keys , version = None ) :
  else :
                      if line . lstrip ( ) . startswith ( TRANSLATOR_COMMENT_MARK ) :
   if use_grouping :
              if module_has_submodule ( app_config . module , "management" ) :
          key_prefix = settings . CACHE_MIDDLEWARE_KEY_PREFIX
  end_tag = 'end' + bits [ 0 ]
 notifier . check_events ( timeout = None )
          super ( Command , self ) . add_arguments ( parser )
                  msgs = msgs . decode ( 'utf-8' )
 from django . utils . encoding import force_text
   def gettext ( message ) :
        def close ( self ) :
    if response . has_header ( 'Vary' ) :
              pass
       self . _is_rendered = False
          self . _assert_mutable ( )
          del _active . value
 if p_pattern . startswith ( '^' ) :
 self . _loaders = loaders
 return any ( ignore ( pattern ) for pattern in ignore_patterns )
 self . cleaned_data [ name ] = value
 import sys
 try :
   sign = '-' if offset < 0 else '+'
 self . origin = origin
    value = super ( URLField , self ) . to_python ( value )
          zfile . write ( item )
          self . _archive = tarfile . open ( file )
              value = '1'
  else :
   def handle_field ( self , obj , field ) :
    @ register . filter ( is_safe = True )
          if sender and getattr ( sender , 'handles_files' , False ) :
    return quote ( force_bytes ( path ) . replace ( b"\\" , b"/" ) , safe = b"/~!*()'" )
            args [ 1 : 2 ] = [ '"%s"' % arg for arg in args [ 1 ] . split ( "," ) ]
                  raise ValidationError (  _ ( 'ManagementForm data is missing or has been tampered with' ) ,  code = 'missing_management_form' ,  )
          return len ( list ( email_messages ) )
  else :
  IDENTIFIER = re . compile ( '^[a-z_][a-z0-9_]*$' , re . I )
      widget = URLInput
 handler . addQuickElement ( "updated" , rfc3339_date ( self . latest_post_date ( ) ) )
 from django . core . files . utils import FileProxyMixin
   if serializers is None :
                      message = e
          if instance is not None :
                  t = self . waiting_readers
   return statements
       except self . LibraryValueNotFoundException :
 self . name = name
  self . errors
  target_var = bits [ - 1 ]
   def add_prefix ( self , prefix ) :
   def size ( self , name ) :
 if root :
                          try :
 from django . core . checks . registry import registry
  if options . pythonpath :
          yield bit . group ( 0 )
          __str__ = new_method_proxy ( str )
          return repr ( self . dicts )
                  handler . addQuickElement ( "uri" , item [ 'author_link' ] )
 server_port = str ( self . META [ 'SERVER_PORT' ] )
       class DefusedExpatParser ( _ExpatParser ) :
          self . fed . append ( '&#%s;' % name )
  output . append ( '</select>' )
  EscapeUnicode = EscapeText
                  self . none_value = ( 0 , empty_label )
          return True
                  return source , display_name
              raise base . SerializationError ( "Non-model object (%s) encountered during serialization" % type ( obj ) )
  except AmbiguityError :
 condition = TemplateIfParser ( parser , bits ) . parse ( )
  from_email = sanitize_address ( email_message . from_email , email_message . encoding )
  if len ( list_ ) == 1 :
          self . close ( )
          self . vals = [ ]
   def render ( self , name , value , attrs = None ) :
  else :
          try :
      def _get_validation_exclusions ( self ) :
  except LookupError :
   else :
  else :
              return x
              if not app_labels :
                        if self . required :
    try :
 self . name = name
 from email . utils import formatdate
                      raise TemplateSyntaxError ( "Could not find variable at "  "start of %s." % token )
 from django . core . management . base import BaseCommand , CommandError
 default = bytes_to_text ( default , self . encoding )
 if isinstance ( s , bytes ) :
  value , sig = signed_value . rsplit ( self . sep , 1 )
                      self . keyOrder . append ( key )
  if ( i - day_of_year ) < ( 4 - weekday ) :
          if hasattr ( self , 'error_dict' ) :
              localedir = os . path . join ( app_config . path , 'locale' )
  def __init__ ( self , max_value = None , min_value = None , max_digits = None , decimal_places = None , * args , ** kwargs ) :
  elif message_context [ 0 ] == "'" :
          available_shells = [ shell ] if shell else self . shells
              val = self . _cache . decr ( key , delta )
 if response :
 for name , app in six . iteritems ( get_commands ( ) ) :
   from django . http . response import REASON_PHRASES as STATUS_CODE_TEXT
  self . stdout . flush ( )
  string_concat = lazy ( _string_concat , six . text_type )
  def __init__ ( self , query_string = None , mutable = False , encoding = None ) :
              field = field . rel . get_related_field ( )
  def __getitem__ ( self , key ) :
    class ObjectDoesNotExist ( Exception ) :
          super ( InMemoryUploadedFile , self ) . __init__ ( file , name , content_type , size , charset , content_type_extra )
              sub = '.dev%s' % git_changeset
     class IfChangedNode ( Node ) :
          _dec . __name__ = 'method_decorator(%s)' % decorator . __name__
 self . choice_cache = None
   def handle_app_config ( self , app_config , ** options ) :
  if options [ 'umask' ] :
 super ( IPAddressField , self ) . __init__ ( * args , ** kwargs )
 self . validate ( display_num_errors = True )
 fixture = open_method ( fixture_file , mode )
 __delslice__ = complain
   def __str__ ( self ) :
   parser . add_library ( temp_lib )
          self . _wrapped = get_storage_class ( ) ( )
   def _reset_dicts ( self , value = None ) :
 return ''
   def lock ( f , flags ) :
 if '/' in path and ( ( '\\' in path and path . find ( '/' ) < path . find ( '\\' ) )  or '\\' not in path ) :
  else :
     class LocaleRegexURLResolver ( RegexURLResolver ) :
   class EscapeData ( object ) :
  handler . addQuickElement ( "id" , unique_id )
  self . addr , _ipv4 , _ipv6 , _fqdn , self . port = m . groups ( )
          self . max_length = kwargs . pop ( 'max_length' , None )
  kwargs [ 'number' ] = number_value
  sys . exit ( 2 )
          if '@' in addr :
                  filename = ev . filename
                  defaults [ 'initial' ] = self . initial [ i ]
   TOKEN_TEXT = 0
   def display ( self ) :
  return context_extras
 self . extra_context = kwargs . pop ( 'extra_context' , { } )
      if self . verbosity > 0 :
                model = self . obj
          raw_cookie = get_str_from_wsgi ( self . environ , 'HTTP_COOKIE' , '' )
  if verbosity >= 2 :
  except ImportError :
   domain , port = split_domain_port ( host )
 return obj_dict
 parser . EntityDeclHandler = self . entity_decl
              self . stdout . ending = None
     def delete ( self , key , version = None ) :
          return Literal ( value )
          self . var = var
 from django . db import models , DEFAULT_DB_ALIAS
 if self . data . hour > 11 :
              return ''
 from functools import update_wrapper
      print ( FASTCGI_HELP )
  if not hasattr ( values , '__len__' ) :
  import re
     db = options . get ( 'database' )
                      d = d [ m . groups ( ) [ 0 ] ]
                  if isinstance ( value , str ) :
   if app_labels :
  return six . text_type ( name )
 if value is not result :
 parser . ExternalEntityRefHandler = self . external_entity_ref_handler
                tok = '"REGEX"'
          nm = Header ( nm , encoding ) . encode ( )
 six . reraise ( ImportError , ImportError ( msg ) , sys . exc_info ( ) [ 2 ] )
  if len ( initial ) != len ( data ) :
 import sys
 self . unget ( chunk [ remaining : ] )
 try :
          for format in settings . SERIALIZATION_MODULES :
          self . callback = callback
 html_message = reporter . get_traceback_html ( ) if self . include_html else None
 if not etags :
              default_attrs . update ( attrs )
           if settings . SECURE_PROXY_SSL_HEADER :
              settings . configure ( )
  kwargs = {  'form' : form ,  'formfield_callback' : formfield_callback ,  'formset' : formset ,  'extra' : extra ,  'can_delete' : can_delete ,  'can_order' : can_order ,  'fields' : fields ,  'exclude' : exclude ,  'min_num' : min_num ,  'max_num' : max_num ,  'widgets' : widgets ,  'validate_min' : validate_min ,  'validate_max' : validate_max ,  'localized_fields' : localized_fields ,  'labels' : labels ,  'help_texts' : help_texts ,  'error_messages' : error_messages ,  }
    def _iterkeys ( self ) :
              response . streaming_content = [ ]
 self . _non_form_errors = None
 from django . core import signing
 def streaming_content ( self ) :
          ipv4_unpacked = _unpack_ipv4 ( ip_str )
 def fget ( instance , instance_type = None , name = fget . __name__ ) :
                  opfunc . __name__ = opname
 return self . choice_input_class ( self . name , self . value , self . attrs . copy ( ) , choice , idx )
          return datetime . now ( )
      def __init__ ( self , dict_ = None ) :
              kw [ 'microsecond' ] = kw [ 'microsecond' ] . ljust ( 6 , '0' )
              return ''
 from django . utils . six . moves . urllib . parse import quote , unquote , urlsplit , urlunsplit
                timeout = - 1
               for model in sort_dependencies ( app_list . items ( ) ) :
 if not hasattr ( parser , '_namedCycleNodes' ) :
 if expires is not None :
                  msgs = msgs . decode ( 'utf-8' )
 self . _unget_history = [ num_bytes ] + self . _unget_history [ : 49 ]
          now = datetime . datetime ( now . year , now . month , now . day )
                  want_unicode = True
          return False
   def handle_field ( self , obj , field ) :
     if m :
              self . seek ( 0 )
          if '-' not in lang_code :
  return response
  if not is_valid_ipv6_address ( ip_str ) :
  for d in object_list :
                  values = [ ]
  key , value = match . groups ( )
  elif len ( bits ) == 6 :
              extra_files . extend ( map ( lambda x : x . strip ( ) , file . split ( ',' ) ) )
  warnings . warn (  "The django.forms.util module has been renamed. "  "Use django.forms.utils instead." , RemovedInDjango19Warning , stacklevel = 2 )
           from collections import namedtuple
 input_type = None
     @ register . filter ( is_safe = True )
 from django . utils import six
 program_options = [ '--check-format' ]
 known_models = [ ]
  return { 'TIME_ZONE' : timezone . get_current_timezone_name ( ) }
                  self . cookies [ key ] [ 'expires' ] = cookie_date ( time . time ( ) +  max_age )
                      raise CommandError (  "Cache table '%s' could not be created.\nThe error was: %s." %  ( tablename , force_text ( e ) ) )
  return translated
 extensions = options . get ( 'extensions' )
 self . kwargs = kwargs
                  msg += " The domain name provided is not valid according to RFC 1034/1035."
 if not self . timezone :
  nodelist = parser . parse ( ( 'endwith' , ) )
                      singular . append ( contents )
  yield buf . read ( )
                              raise VariableDoesNotExist ( "Failed lookup for key "  "[%s] in %r" ,  ( bit , current ) )
  elif hasattr ( pattern , '_callback' ) :
          return tuple ( a for a in WRAPPER_ASSIGNMENTS if hasattr ( fn , a ) )
          raise ValueError ( "Negative base36 conversion input." )
  else :
   if cword == 1 :
  if formatter :
          self . name = name
 if not template_dirs :
    def _i18n_cache_key_suffix ( request , cache_key ) :
                  year += 2000
              self . empty_label = None
  return proxy
      def __init__ ( self , display_name , loader , name , dirs ) :
                              return result
 if key in cache :
 _itervalues = "values"
  else :
      def __init__ ( self , val_expr , max_expr , max_width , asvar = None ) :
                      filename = filename . encode ( 'utf-8' )
  return [ form . cleaned_data for form in self . forms ]
          self . autoescape = autoescape
  try :
 index_output = [ ]
              return bytes ( ( i , ) )
    chunk = stream . read ( max_header_size )
  elif ( attrvalue [ : 1 ] == '\'' == attrvalue [ - 1 : ] or  attrvalue [ : 1 ] == '"' == attrvalue [ - 1 : ] ) :
 return self . errors . get ( NON_FIELD_ERRORS , self . error_class ( error_class = 'nonfield' ) )
   BUILTIN_SERIALIZERS = {  "xml" : "django.core.serializers.xml_serializer" ,  "python" : "django.core.serializers.python" ,  "json" : "django.core.serializers.json" ,  "yaml" : "django.core.serializers.pyyaml" ,  }
    return final_output
                   absolute_path = self . download ( template )
       def __init__ ( self , _subtype = 'mixed' , boundary = None , _subparts = None , encoding = None , ** _params ) :
    else :
  except TemplateDoesNotExist :
                  hits = max ( 1 , self . count - self . orphans )
                      raise
 new_operations = optimizer . optimize ( operations , migration . app_label )
    def execute ( self , * args , ** options ) :
          parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
   def __iter__ ( self ) :
  msg_count = 0
          kw = dict ( ( k , int ( v ) ) for k , v in six . iteritems ( match . groupdict ( ) ) )
   def splitext ( self , the_path ) :
 from django . utils . safestring import ( SafeData , EscapeData , mark_safe ,  mark_for_escaping )
                      lookup_str = callback . __module__ + "." + callback . __class__ . __name__
 host = host [ : - 1 ] if host . endswith ( '.' ) else host
 return ( ret == 0 )
  try :
    elif name is not None and filter_func is not None :
          super ( URLValidator , self ) . __init__ ( ** kwargs )
      class FirstOfNode ( Node ) :
                  if settings . DEBUG :
                        unhandled_params . remove ( param )
  format_string = bits [ 1 ] [ 1 : - 1 ]
 ugettext_lazy = lazy ( ugettext , six . text_type )
 return _time . tzname [ is_dst ]
  WEEKDAYS = {  0 : _ ( 'Monday' ) , 1 : _ ( 'Tuesday' ) , 2 : _ ( 'Wednesday' ) , 3 : _ ( 'Thursday' ) , 4 : _ ( 'Friday' ) ,  5 : _ ( 'Saturday' ) , 6 : _ ( 'Sunday' )  }
              if hasattr ( base , 'base_fields' ) :
 from django . utils . _os import safe_join
 pass
 format = force_str ( default or get_format ( 'DATETIME_INPUT_FORMATS' ) [ 0 ] )
   if not func . is_usable :
          parser . add_argument ( '--locale' , '-l' , default = [ ] , dest = 'locale' , action = 'append' ,  help = 'Creates or updates the message files for the given locale(s) (e.g. pt_BR). '  'Can be used multiple times.' )
          objects = json . loads ( stream_or_string )
 get_resolver . cache_clear ( )
   return s
  def add_arguments ( self , parser ) :
              continue
  except ( ValueError , TypeError , ValidationError ) :
  else :
  naiveip_re = re . compile ( r"""^(?: (?P<addr>     (?P<ipv4>\d{1,3}(?:\.\d{1,3}){3}) |         # IPv4 address     (?P<ipv6>\[[a-fA-F0-9:]+\]) |               # IPv6 address     (?P<fqdn>[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*) # FQDN ):)?(?P<port>\d+)$""" , re . X )
  else :
 while t > 0 :
      def __init__ ( self , view_name , args , kwargs , asvar ) :
                  digits = decimals
 raise NotImplementedError ( 'subclasses of Serializer must provide an handle_fk_field() method' )
 _locks = { }
 leading = self . has_leading_dir ( x . name for x in members )
  lines . append ( line )
          return mark_safe ( value )
          self . tagtype = tagtype
      def __init__ ( self , variables ) :
 if secret is None :
   return value
          l = lambda x : self . make_key ( x , version = version )
 for filepath in self . get_template_sources ( template_name , template_dirs ) :
 _iterlists = "iterlists"
  def get_template_sources ( self , template_name , template_dirs = None ) :
   def gettext ( message ) :
  import hashlib
  return result
  ip_str = _sanitize_ipv4_mapping ( ip_str )
 return random_module . choice ( value )
   def strip_spaces_between_tags ( value ) :
     class EmailMultiAlternatives ( EmailMessage ) :
              raise ValidationError ( self . message , code = self . code , params = params )
                              locale_dir = path
              contents = format_html ( '{0}{1}' , contents , label_suffix )
  else :
 v = ValueError ( 'Cannot resolve %r: %s' % ( s , e ) )
 parser . add_argument ( '-i' , '--interface' , choices = self . shells , dest = 'interface' ,  help = 'Specify an interactive interpreter interface. Available options: "ipython" and "bpython"' )
 from django . utils . functional import curry , Promise
 assert content is not None
                  return ugettext_lazy ( value )
 super ( URLValidator , self ) . __call__ ( url )
                  truncate_len -= 1
          super ( _LazyModule , self ) . __init__ ( name )
    return current
  if bases == ( BaseModelForm , ) :
 for node in self :
              name = self . html_initial_name
                  want_unicode = True
                              out . write ( ' npgettext(%r, %r, %r,count) ' % (  message_context ,  join_tokens ( singular , trimmed ) ,  join_tokens ( plural , trimmed ) ) )
 from django . utils . encoding import force_str
  return encoding
  def __init__ ( self , var1 , var2 , nodelist_true , nodelist_false , negate ) :
              if options . traceback or not isinstance ( e , CommandError ) :
  try :
           return ip_str
          self . _post = post
   else :
 num_entries = len ( filelist )
   return False
   def __hash__ ( self ) :
 UnlockFileEx . restype = BOOL
   def handle ( self , ** options ) :
  data = ( form . cleaned_data [ field ] , ) + date_data
 field_params = { }
 save_m2m ( )
 if self . output_transaction :
   else :
              continue
              yield subwidget
   else :
 from django . utils . translation import ugettext_lazy as _ , ungettext_lazy
 errors = [ ]
  if ch2 == '?' :
 from django . utils . translation import ugettext_lazy , pgettext_lazy
    def _resolve ( self ) :
  try :
      resource_string = None
               cache = dict ( )
 return data
  res = instance . __dict__ [ self . name ] = self . func ( instance )
   except KeyboardInterrupt :
 self . second = None
  else :
          try :
  self . cleaned_data [ name ] = value
          try :
                      if p . find ( ':_(' ) >= 0 :
      if PY3 :
  except IndexError :
 if not os . path . isdir ( basedir ) :
                      block = self
   try :
 self . common_logger_config ( logger , config , incremental )
      from unittest import *
  self . help_text = field . help_text or ''
          return sorted ( value , key = Variable ( arg ) . resolve )
   try :
 _format_modules_cache = { }
   def _cull ( self ) :
                        if os . path . isdir ( entry ) :
  else :
  if number < 1 :
   if isinstance ( boundary , six . text_type ) :
   except ( ImportError , AttributeError ) as e :
   truncate_len = length
    def check_migrations ( self ) :
              operations . extend ( smigration . operations )
          content = content or b''
          s . feed ( value )
          path = [ path ]
          __str__ = serialize
              settings . INSTALLED_APPS
   def get_text_list ( list_ , last_word = ugettext_lazy ( 'or' ) ) :
 output = [ format_html ( '<select multiple="multiple"{0}>' , flatatt ( final_attrs ) ) ]
 thread . start_new_thread ( main_func , args )
  def add_arguments ( self , parser ) :
  def add_arguments ( self , parser ) :
                  m = _html_parser . attrfind . match ( rawdata , k )
 self . negated = negated
              if shutdown_message :
          handler = SimplerXMLGenerator ( outfile , encoding )
              self . __offset = timedelta ( minutes = offset )
 if exit_code < 0 :
   def prepend_token ( self , token ) :
          return self . render ( )
   def handle ( self , * app_labels , ** options ) :
 field_params [ 'max_digits' ] = row [ 4 ] if row [ 4 ] is not None else 10
                      context [ self . loopvars [ 0 ] ] = item
          parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
              initial = [ '' for x in range ( 0 , len ( data ) ) ]
              prefix , rest = self . split_leading_dir ( path )
 from django . utils . deprecation import RemovedInDjango19Warning
 return True
 self . _start_relational_field ( field )
      from unittest2 import *
  super ( TextInput , self ) . __init__ ( attrs )
   def appendlist ( self , key , value ) :
  logging_config_func ( DEFAULT_LOGGING )
    def receive_data_chunk ( self , raw_data , start ) :
              return match . group ( 0 )
              for obj in self . queryset . all ( ) :
  else :
  etags = [ e . encode ( 'ascii' ) . decode ( 'unicode_escape' ) for e in etags ]
          strerror = force_text ( e . strerror , DEFAULT_LOCALE_ENCODING ,  strings_only = True )
    def ugettext ( message ) :
 def __new__ ( cls , name , this_bases , d ) :
                      try :
  self . reset ( )
                          global invalid_var_format_string
 parser . delete_first_token ( )
 match = date_re . match ( value )
              return lang_code
          del cc [ 'public' ]
 for fname in filelist :
   class Command ( BaseCommand ) :
              seen_data = set ( )
  _prefixes . value = prefix
                   s = ' ' . join ( [ force_text ( arg , encoding , strings_only ,  errors ) for arg in s ] )
              raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
 from django . template . base import ( Node , NodeList , Template , Context , Library ,  TemplateSyntaxError , VariableDoesNotExist , InvalidTemplateLibrary ,  BLOCK_TAG_START , BLOCK_TAG_END , VARIABLE_TAG_START , VARIABLE_TAG_END ,  SINGLE_BRACE_START , SINGLE_BRACE_END , COMMENT_TAG_START , COMMENT_TAG_END ,  VARIABLE_ATTRIBUTE_SEPARATOR , get_library , token_kwargs , kwarg_re ,  render_value_in_context )
    elif finder . find_module ( name ) :
                  self . locale_paths . append ( os . path . abspath ( 'locale' ) )
                  if resolved_path :
              return format ( value , arg )
              if isinstance ( v , ( list , tuple ) ) :
          warnings . warn ( '"validate" has been deprecated in favor of "check".' ,  RemovedInDjango19Warning )
 from django . utils import six
       def __init__ ( self , input_formats = None , * args , ** kwargs ) :
  else :
           return s
              app_configs = [ app_config ]
    with context_instance . push ( dictionary ) :
          obj_dict = self . __dict__ . copy ( )
   return value
 from django . conf import settings
                  if e . errno != errno . ENOENT :
  elif hasattr ( query , 'items' ) :
    class URLInput ( TextInput ) :
   @ cached_property
  class AssignmentNode ( TagHelperNode ) :
       def base36_to_int ( s ) :
  import os
 return timezone . make_naive ( value , current_timezone )
  commands = get_commands ( )
 if not self . connection :
  except ( ValueError , TypeError ) :
  for index in range ( len ( hextets ) ) :
                              if not hasattr ( e , 'django_template_source' ) :
     existing . sort ( )
   def clean ( self , value ) :
       DefaultFeed = Rss201rev2Feed
 if is_ignored ( file_path , self . ignore_patterns ) :
  elif bytes < MB :
     class DefusedXmlException ( ValueError ) :
                              os . mkdir ( migrations_directory )
      elif self . _meta . fields and field not in self . _meta . fields :
      p = language . find ( '-' )
              self . message = message
              line = sio . readline ( )
          return ''
 __all__ = [ "runfastcgi" ]
 if not hasattr ( template , 'render' ) :
 self . hide_empty = options . get ( 'hide_empty' , False )
  else :
              defaults [ 'empty_permitted' ] = True
   def absolute_path ( self , path , prefix = None ) :
 encoding = encoding or settings . DEFAULT_CHARSET
 target_app_labels_only = True
                  if ( isinstance ( message , ValidationError ) and  message . code in error_messages ) :
      import dummy_threading as threading
   class Command ( BaseCommand ) :
          super ( EmailBackend , self ) . __init__ ( fail_silently = fail_silently )
  self . attach ( filename , content , mimetype )
   def __bool__ ( self ) :
 with self . _lock . writer ( ) :
 import shutil
    class EscapeBytes ( bytes , EscapeData ) :
  return RequestContext ( self . _request , context , current_app = self . _current_app )
 if self . data . minute == 0 :
  if self . current_token is not EndToken :
 import sys
              return self . blocks [ name ] . pop ( )
 models = 'models'
 for val in value :
          if instance is None :
 return self . file . closed
 from django . utils . deprecation import RemovedInDjango20Warning
   def save ( self , name , content ) :
   def get_limit_choices_to ( self ) :
 self . close_called = False
 self . _cache = _caches . setdefault ( name , { } )
              try :
          raise BadHeaderError ( "Header values can't contain newlines (got %r for header %r)" % ( val , name ) )
          if self . base_url is None :
 stats [ MISSES ] += 1
              for node in nodelist :
    def is_url ( self , template ) :
  except ImportError :
  try :
   if self . verbosity >= 2 :
     class AppCommand ( BaseCommand ) :
  return result
 s = s . replace ( '\n' , '\\n' )
   else :
             root = logging . root
              token = self . next_token ( )
              return [ first_item ] , True
 if k in seen :
              raise UnrecognizedArchiveFormat (  "Path not a recognized archive format: %s" % filename )
          if value in self . empty_values :
   else :
 if node . hasAttribute ( 'pk' ) :
 self . queryset = field . queryset
                          new_filenames . append ( os . path . join ( dirpath , filename ) )
   def render ( self , name , value , attrs = None ) :
 connection . close ( )
          token = super ( DebugLexer , self ) . create_token ( token_string , in_tag )
   def delete_first_token ( self ) :
              return lookup_view
 if '\n' in val or '\r' in val :
    @ register . tag
  from . . import Warning , register , Tags
                  config [ 'address' ] = self . as_tuple ( config [ 'address' ] )
              getattr ( combined , 'add_' + name ) ( getattr ( self , '_' + name , None ) )
      DateTimeAwareJSONEncoder = DjangoJSONEncoder
              return value + arg
    def __reduce__ ( self ) :
       if self . verbosity >= 1 :
 for key in sorted ( user_settings ) :
          mail . attach_alternative ( html_message , 'text/html' )
 if ch in '*?+' :
 import json
 self . msgattrib_options = self . msgattrib_options [ : ] + [ '--no-wrap' ]
    self . enter_command ( command , token )
 def __repr__ ( self ) :
                  break
              dict . __setitem__ ( result , copy . deepcopy ( key , memo ) ,  copy . deepcopy ( value , memo ) )
   def __repr__ ( self ) :
  def _get_image_dimensions ( self ) :
          raise ValueError ( "Base36 input too large" )
 if base . lower ( ) . endswith ( '.tar' ) :
 from django . utils . encoding import python_2_unicode_compatible
 self . error_class = error_class
    except ValueError :
                  raise CommandError (  "AppCommand cannot handle app '%s' in legacy mode "  "because it doesn't have a models module."  % app_config . label )
    def create_parser ( self , prog_name , subcommand ) :
              cmp_fmt = parts [ - 1 ]
  return _ ( 'AM' )
  if isinstance ( app_name , BaseCommand ) :
 self . cookies = SimpleCookie ( self . cookies )
    if settings . is_overridden ( 'TEMPLATE_LOADERS' ) :
 COMMENT_TAG_START = '{#'
          for name in self . fields :
  def __init__ ( self , attrs = None ) :
          return types . MethodType ( func , obj , obj . __class__ )
 def _new_instance ( cls , children = None , connector = None , negated = False ) :
           self . verbosity = options . get ( 'verbosity' )
   def valid_ident ( s ) :
 parser . add_argument ( '--template' ,  help = 'The path or URL to load the template from.' )
   def _list_cache_files ( self ) :
  return sample [ : 3 ] == b'\xef\xbb\xbf' or sample . startswith ( codecs . BOM_UTF16_LE ) or sample . startswith ( codecs . BOM_UTF16_BE )
           logging . captureWarnings ( True )
from __future__ import unicode_literals
 from django . conf import settings
  from . . import Warning , register , Tags
   if content_length < 0 :
 from django . db import ( connections , router , transaction , DEFAULT_DB_ALIAS ,  IntegrityError , DatabaseError )
          return parse_http_date ( date )
  try :
 self . _leftover = b''
    initial_value = initial if initial is not None else ''
 toks = self . toks
          six . reraise ( ValueError , ValueError ( "%r is not a valid date" % date ) , sys . exc_info ( ) [ 2 ] )
   if target is None :
 for form in self . extra_forms :
          try :
  fixture_files = [ ]
  except ZeroDivisionError :
    def setdefault ( self , key , default ) :
  try :
  if self . decimal_places is not None and decimals > self . decimal_places :
 if language in _DJANGO_DEPRECATED_LOCALES :
          iteritems = _iteritems
   nodelist = parser . parse ( ( 'endfilter' , ) )
                      return ( fp . read ( ) . decode ( settings . FILE_CHARSET ) , filepath )
        months = ( 'Jan' , 'Feb' , 'Mar' , 'Apr' , 'May' , 'Jun' , 'Jul' , 'Aug' , 'Sep' , 'Oct' , 'Nov' , 'Dec' , )
   def find_commands ( management_dir ) :
                  fields = list ( six . iteritems ( base . base_fields ) ) + fields
                  self . _template_response_middleware . insert ( 0 , mw_instance . process_template_response )
  from django . core . management . base import BaseCommand
   def close ( self ) :
 return self . __deepcopy__ ( { } )
  return self . _post
 offset = 60 * int ( tzinfo [ 1 : 3 ] ) + offset_mins
 if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
          return '<Page %s of %s>' % ( self . number , self . paginator . num_pages )
          duplicate = copy ( super ( BaseContext , self ) )
 from django . utils . timezone import get_current_timezone_name
   sys . exit ( 1 )
 from io import BytesIO
    def debug ( request ) :
                  error_text = ERRORS [ e . errno ]
 self . paginator = paginator
 iterbytes = iter
                  config [ 'mailhost' ] = self . as_tuple ( config [ 'mailhost' ] )
 try :
 from django . utils . module_loading import module_has_submodule
                          self . bad_cookies = set ( )
              raise ValidationError ( self . message , code = self . code )
   def __getitem__ ( self , idx ) :
 dir_name , file_name = os . path . split ( name )
          while self . tokens :
  return super ( FileField , self ) . clean ( data )
          ULONG_PTR = c_ulong
              error_dict . setdefault ( NON_FIELD_ERRORS , [ ] ) . extend ( self . error_list )
   def __repr__ ( self ) :
 from django . utils . html import format_html
 templatetags_modules_candidates += [ '%s.templatetags' % app_config . name  for app_config in apps . get_app_configs ( ) ]
  return plural
 self . files = files or { }
  except AmbiguityError :
                use_null_fallback = False
   @ property
 return bool ( self . changed_data )
  if inverse_match is not None :
  attrname , rest , attrvalue = m . group ( 1 , 2 , 3 )
              self . content = self . rendered_content
      default_validators = [ validators . validate_ipv4_address ]
              str_hidden = '' . join ( hidden_fields )
          prefix += '/'
  else :
   raise
  else :
              newline = unicode ( "\n" )
   def run_from_argv ( self , argv ) :
 propagate = config . get ( 'propagate' , None )
import warnings
              return url
    def set_script_prefix ( prefix ) :
      def render ( self , context ) :
 self . waiting_writers = 0
from __future__ import unicode_literals
      @ total_ordering
 choices = list ( six . iteritems ( self . months ) )
   class MultiPartParserError ( Exception ) :
 return super ( QueryDict , self ) . setlistdefault ( key , default_list )
  from . base import CommandError
       class InMemoryUploadedFile ( UploadedFile ) :
 if second_item == [ ] :
    self . end_object ( obj )
                      self . xml . startElement ( "natural" , { } )
 for attr in _urllib_parse_moved_attributes :
 return '' . join ( output )
          if not f . editable or isinstance ( f , models . AutoField ) or f . name not in cleaned_data :
from django . conf import settings
 tempdir = tempfile . mkdtemp ( prefix = prefix , suffix = '_download' )
                      os . makedirs ( filename )
 pass
 from django . utils . text import get_valid_filename
              self . nodelist_empty = NodeList ( )
 toktext = match . group ( name )
                  if errors :
                   finder = sys . path_importer_cache [ entry ]
 html = endtag_re . sub ( '' , html )
 absolute_http_url_re = re . compile ( r"^https?://" , re . I )
 FormSet = modelformset_factory ( model , ** kwargs )
          pass
                      if use_base_manager :
 self . sysid = sysid
          m = regex . match ( date )
  if arg is None :
  except ValueError :
                  return value . pk
          value = datetime_safe . new_datetime ( value )
                      self . saved_forms . append ( form )
  return super ( BaseInlineFormSet , self ) . initial_form_count ( )
   if answer != "y" :
                  yield safe_join ( template_dir , template_name )
 raise NotImplementedError ( 'may be implemented in a future release' )
          super ( MultiValueDict , self ) . __setitem__ ( key , list_ )
 is_relation = i in relations
  return super ( SimpleTemplateResponse , self ) . content
 if len ( bits ) < 4 :
   from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
  if all_issues :
                  if status != STATUS_OK :
 return FASTCGI_HELP
      fmt = get_format ( 'DATE_FORMAT' )
              curr = cwords [ cword - 1 ]
              boundary = boundary . encode ( 'ascii' )
  mail . outbox . extend ( messages )
 def split_leading_dir ( self , path ) :
  else :
 parser . delete_first_token ( )
                          self . stdout . write ( self . style . SQL_KEYWORD ( connection . ops . start_transaction_sql ( ) ) )
 content_type = info . get ( 'content-type' )
 if hasattr ( test_runner_class , 'option_list' ) :
 values = _itervalues
 def wrapper ( cls ) :
  else :
   def decr ( self , key , delta = 1 , version = None ) :
    class MIMEMixin ( ) :
  sys . modules [ __name__ + ".moves.urllib_error" ] = sys . modules [ __name__ + ".moves.urllib.error" ] = Module_six_moves_urllib_error ( __name__ + ".moves.urllib.error" )
 super_set = super ( SortedDict , self ) . __setitem__
          nodelist_empty = None
              filename = file
 changed = True
               exhaust ( self . _input_data )
 parser . add_argument ( '--pythonpath' ,  help = 'A directory to add to the Python path, e.g. "/home/djangoprojects/myproject".' )
 from math import ceil
                   def wrapper ( * args , ** kwds ) :
 iterkeys = _iterkeys
              extra_classes . add ( self . form . error_css_class )
  if prefix is None :
   @ property
  except VariableDoesNotExist :
          raise TemplateSyntaxError ( "'for' statements should have at least four"  " words: %s" % token . contents )
  else :
   return value
  return render_value_in_context ( value , context )
  warn_msg = ( "The translator-targeted comment '%s' "  "(%sline %d) was ignored, because it wasn't the last item "  "on the line." ) % ( c , filemsg , comment_lineno_cache )
     def new_date ( d ) :
  return instance
 return base64 . urlsafe_b64decode ( s + pad )
      if isinstance ( message , SafeData ) :
                  view = transaction . atomic ( using = db . alias ) ( view )
      help = "Prints the CREATE TABLE SQL statements for the given app name(s)."
                  return 1 << 31
    _add_doc ( reraise , """Reraise an exception.""" )
 from django . utils . six . moves import reduce
   def get_resolved_arguments ( self , context ) :
     class OrderedSet ( object ) :
 base62 = BaseConverter ( BASE62_ALPHABET )
 for name in pattern . reverse_dict :
      def pbkdf2 ( password , salt , iterations , dklen = 0 , digest = None ) :
 ignore = options . pop ( 'ignorenonexistent' , False )
 num_existing = len ( existing )
                  raise ValueError
    self . find_template_cache [ key ] = result
 visible_issue_count = 0
 value = self . to_python ( value )
                              if _file is None :
 from django . forms . forms import *
   patterns = [ pattern for ( possibility , pattern , defaults ) in possibilities ]
   DOTS = [ '&middot;' , '*' , '\u2022' , '&#149;' , '&bull;' , '&#8226;' ]
 self . META [ 'PATH_INFO' ] = path_info
      string_types = str ,
      if number == 1 :
  return modules
 exit_code = os . spawnve ( os . P_WAIT , sys . executable , args , new_environ )
 self . event_stream = pulldom . parse ( self . stream , self . _make_parser ( ) )
          if template_dirs :
   requires_system_checks = False
          encoding = self . encoding or settings . DEFAULT_CHARSET
 reverse = complain
    forms = ' ' . join ( form . as_table ( ) for form in self )
  exclude . append ( name )
      return hmac . new ( key , msg = force_bytes ( value ) , digestmod = hashlib . sha1 )
   else :
  else :
          if app_config . models_module is None :
     def learn_cache_key ( request , response , cache_timeout = None , key_prefix = None , cache = None ) :
              archive . extract ( filename , tempdir )
import logging
       def __init__ ( self , msg , params = ( ) ) :
              self . mod = old_mod
   for tag in open_tags :
   none_model_fields = [ k for k , v in six . iteritems ( fields ) if not v ]
  from django . core . exceptions import ImproperlyConfigured
    class HttpResponseForbidden ( HttpResponse ) :
   @ property
   if not m and p < 0 :
 content_type = content_type . strip ( )
   if logging_settings :
              return value . date ( )
 if not content_type :
                      self . write_po_file ( potfile , locale )
 context = self . resolve_context ( self . context_data )
   def id_for_label ( self , id_ ) :
 html = starttag_re . sub ( '' , html )
 self . is_reversed = is_reversed
                                      traceback . print_exc ( )
 if root :
   def __getitem__ ( self , key ) :
  elif token . token_type == 1 :
  else :
  _MovedItems . _moved_attributes = _moved_attributes
           fd = os . open ( new_file_name , ( os . O_WRONLY | os . O_CREAT | getattr ( os , 'O_BINARY' , 0 ) |  ( os . O_EXCL if not allow_overwrite else 0 ) ) )
  if max_length is not None :
                           context_match = context_re . match ( bmatch . group ( 1 ) )
  except ( KeyError , TypeError ) :
 if end_index is None and s_len > truncate_len :
  return copy . deepcopy ( self . _wrapped , memo )
 roots = set ( dir ( cls ) ) & set ( convert )
                  if is_ignored ( os . path . normpath ( os . path . join ( dirpath , dirname ) ) , norm_patterns ) :
 pass
          locales . append ( locale . split ( '_' ) [ 0 ] )
  else :
                  field_output . append ( "PRIMARY KEY" )
                  form . fields [ ORDERING_FIELD_NAME ] = IntegerField ( label = _ ( 'Order' ) , required = False )
          s . close ( )
  if len ( args ) > 4 :
   if six . PY3 :
 klass . prefix = '\n' + find_indentation ( node )
                  compiled_regex = re . compile ( regex , re . UNICODE )
      msg = (  "django.utils.text.javascript_quote() is deprecated. "  "Use django.utils.html.escapejs() instead."  )
     root = config . get ( 'root' , None )
 if hasattr ( form , 'Meta' ) :
 connection = connection or get_connection ( username = auth_user ,  password = auth_password ,  fail_silently = fail_silently )
 from django . utils import six
                  return self . __bytes_cast ( )
 autoescape = autoescape and not isinstance ( value , SafeData )
 if plan :
           if data is FILE_INPUT_CONTRADICTION :
                  if path not in self . _js :
   def reset ( self ) :
          return ''
  c . append ( tok )
 if size :
  try :
          return value
 from django . db import connections , router , transaction , DEFAULT_DB_ALIAS
 with io . open ( work_file , "w" , encoding = 'utf-8' ) as fp :
 self . message_context = None
              return 'rd'
  except LookupError :
 self . charset = charset
              handler . startElement ( "author" , { } )
   return path_info . decode ( UTF_8 )
   return super ( ModelChoiceField , self ) . prepare_value ( value )
   except OSError as e :
 if not field_name :
      class Atom1Feed ( SyndicationFeed ) :
 self . connection_reset = connection_reset
   return lib
              return SafeBytes ( t )
          if key not in self :
 __D = r'(?P<day>\d{2})'
    if ip_str . count ( ':' ) > 7 :
          return
    dot_re = re . compile ( r'\S' )
  scheme = value . split ( '://' ) [ 0 ] . lower ( )
  else :
 return ( source , make_origin ( display_name , loader , name , dirs ) )
 module_values = set ( sys . modules . values ( ) )
  new_value = value + delta
  from xml . sax . saxutils import XMLGenerator
      if vary_on is None :
                       continue
   def __getitem__ ( self , index ) :
          if truncate is None :
                          self . setlistdefault ( key ) . append ( value )
 for app_config in app_configs :
   else :
 nonlocal_root = [ root ]
      is_usable = False
 inplural = False
              self . fetch_command ( subcommand ) . run_from_argv ( self . argv )
 if ',' not in arg :
 class File ( FileProxyMixin ) :
 self . active_writers = 0
      default_validators = [ validators . validate_slug ]
     class SlugField ( CharField ) :
                  if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) :
   def url ( self , name ) :
 self . path_info = path_info
 missing_args_message = "You must provide a project name."
 if top + self . orphans >= self . count :
    class NonCapture ( list ) :
   return "" . join ( inner_text )
    def configure_root ( self , config , incremental = False ) :
  return [ smart_text ( val ) for val in value ]
    if ':::' in ip_str :
          return commands
 values = _itervalues
   else :
      def __init__ ( self , protocol = 'both' , unpack_ipv4 = False , * args , ** kwargs ) :
 return instance
  def __init__ ( self , schemes = None , ** kwargs ) :
  elif ch == ':' :
 size = self . file . tell ( )
  try :
 from __future__ import unicode_literals
  else :
 self . stdout . write ( "Rendering %s template files with "  "filenames: %s\n" %  ( app_or_project , ', ' . join ( extra_files ) ) )
 commands_dict = collections . defaultdict ( lambda : [ ] )
 callback = getattr ( urls , 'handler%s' % view_type )
 for option in option_label :
 parser . add_argument ( '--pythonpath' )
 if f is None :
 text_type = str
               return False
 for f in file_list :
    @ lru_cache . lru_cache ( maxsize = 1000 )
 known_models . append ( table2model ( table_name ) )
 if callable ( data ) :
 def check_1_6_compatibility ( ** kwargs ) :
   manifest = OrderedDict (  ( app_name , list ( filter ( model_installed , model_list ) ) )  for app_name , model_list in all_models  )
 if headerlist is not None :
   else :
    def get_language_from_path ( path , strict = False ) :
      def close ( self ) :
      def exhaust ( stream_or_iterable ) :
          meta = type ( str ( 'Meta' ) , ( object , ) , { } )
 setattr ( self , attr , value )
  return plist
              response . content = b''
              locks . unlock ( fd )
 return func
                      return ( fp . read ( ) . decode ( settings . FILE_CHARSET ) , filepath )
          self . _archive . list ( * args , ** kwargs )
 if print_ is None :
  else :
          raise TemplateSyntaxError ( "'cycle' tag requires at least two arguments" )
  i += 1
 for lineno , line in enumerate ( content . splitlines ( True ) ) :
     def open ( self , name , mode = 'rb' ) :
   def non_field_errors ( self ) :
   for ext in pathext :
                      attrvalue = attrvalue [ 1 : - 1 ]
              yield key
          encoding = locale . getdefaultlocale ( ) [ 1 ] or 'ascii'
  result = super ( DateTimeField , self ) . to_python ( value )
          return self . _is_rendered
 return None
   def render ( self , name , value , attrs = None , choices = ( ) ) :
 self . default_validators = validators . ip_address_validators ( protocol , unpack_ipv4 ) [ 0 ]
  except Exception :
      def _set_response_etag ( response ) :
 return SpacelessNode ( nodelist )
              size = self . remaining
 result . append ( Group ( ( ( "%%(%s)s" % name ) , name ) ) )
                return 0
          self . timezone = timezone
                      raise CommandError ( 'Unknown app in excludes: %s' % exclude )
              if bit :
   def enter_command ( self , command , token ) :
 return dateformat . time_format ( value , get_format ( format or 'TIME_FORMAT' , use_l10n = use_l10n ) )
     class CsrfTokenNode ( Node ) :
  elif str ( level ) == level :
                          yield obj
 if version [ 3 ] == 'alpha' and version [ 4 ] == 0 :
   def get ( self , key , default = None ) :
  except UnicodeDecodeError :
  reset_sequences = options . get ( 'reset_sequences' , True )
  for slots_var in slots :
               ttl = force_text ( ttl )
          arg = int ( arg )
   def _has_changed ( self , initial , data ) :
 import errno
                  return p . image . size
  return '(%s: %s)' % ( self . connector , ', ' . join ( [ str ( c ) for c in  self . children ] ) )
 defaults = dict ( defaults . _get_kwargs ( ) , ** options )
                  result . append ( ch )
 signals . request_started . send ( sender = self . __class__ )
              processors = ( )
  except ValidationError :
   TOTAL_FORM_COUNT = 'TOTAL_FORMS'
     class ModelChoiceField ( ChoiceField ) :
 return
 raise NotImplementedError ( 'subclasses of BaseEmailBackend must override send_messages() method' )
  elif token_string . startswith ( BLOCK_TAG_START ) :
 text = force_text ( text )
    else :
          self . _upload_handlers = [ uploadhandler . load_handler ( handler , self )  for handler in settings . FILE_UPLOAD_HANDLERS ]
    if item [ 'enclosure' ] is not None :
  return forms_valid and not self . non_form_errors ( )
    def linebreaks ( value , autoescape = False ) :
              c = self . resolve ( c )
              new_name += '_field'
    return msgs
 words = word_split_re . split ( force_text ( text ) )
    if display_num_errors :
  else :
 for operation in migration . operations :
              categories = [ force_text ( c ) for c in categories ]
              response_headers . append ( ( str ( 'Set-Cookie' ) , str ( c . output ( header = '' ) ) ) )
 parser . add_argument ( '--dry-run' , action = 'store_true' , dest = 'dry_run' , default = False ,  help = "Just show what migrations would be made; don't actually write them." )
  if name not in parser . _namedCycleNodes :
 pending_references = { }
              use_func = True
              if settings . STATIC_URL is None :
               msg = self . style . HTTP_SUCCESS ( msg )
    def execute ( self , * args , ** options ) :
                      return True
  for meta_line in self . get_meta ( table_name ) :
 for k , v in defaults . items ( ) :
                  attrs [ 'id' ] = auto_id
                      call_command ( "createsuperuser" , interactive = True , database = options [ 'database' ] )
          try :
 def __init__ ( self , context , base , sysid , pubid ) :
 supports_microseconds = False
   def _update_errors ( self , errors ) :
 import signal
   else :
                      continue
          self . _current = None
    DEFAULT_ATTACHMENT_MIME_TYPE = 'application/octet-stream'
 super ( TemplateIfParser , self ) . __init__ ( * args , ** kwargs )
     class Parser ( object ) :
  else :
 opts = model . _meta
   def A ( self ) :
          if self . required and not value :
              value = None
  return val
 del options [ 'liveserver' ]
 exclude = options . get ( 'exclude' )
 if date is not None :
 return '{%s}' % ', ' . join ( '%r: %r' % ( k , v ) for k , v in six . iteritems ( self ) )
 content = template . render ( context )
                          g = g . strip ( "'" )
  setattr ( filter_func , attr , value )
                      return ( 1 , 0 )
                  raise CommandError ( "App '%s' does not have migrations (you cannot selectively sync unmigrated apps)" % app_label )
   sign = ''
                  self . stdout . write ( "Cache table '%s' already exists." % tablename )
          from django . core . servers . fastcgi import FASTCGI_HELP
   return name
                  raise CommandError ( "No migrations present for: %s" % ( ", " . join ( invalid_apps ) ) )
 global _serializers
                  field_params [ 'db_column' ] = col_name
  else :
  else :
              self . _servers = server
              return default
  else :
    @ register . filter ( "slice" , is_safe = True )
              if name . lower ( ) in ( 'from' , 'to' ) :
import warnings
 def app_dict ( self ) :
  else :
          dot = callback . rindex ( '.' )
 for field , messages in errors . error_dict . items ( ) :
              output . append ( options )
 template_tuple = self . template_cache . get ( key )
              return SafeText ( t )
                          raise ValueError ( 'Unable to configure '  'formatter %r: %s' % ( name , e ) )
 self . __starttag_text = rawdata [ i : endpos ]
 from django . template . loader import BaseLoader , get_template_from_string , find_template_loader , make_origin
    extension_map = {  '.tar' : TarArchive ,  '.tar.bz2' : TarArchive ,  '.tar.gz' : TarArchive ,  '.tgz' : TarArchive ,  '.tz2' : TarArchive ,  '.zip' : ZipArchive ,  }
     elif ch in "*?+{" :
 latest_date = None
     parent = ( object , )
 sys . exit ( 1 )
  def __init__ ( self , config ) :
              if key in d :
  else :
  import fnmatch
          HTMLParser = _html_parser . HTMLParser
              return SafeBytes ( data )
              sys . stderr = open ( err_log , 'a' , buffering )
 class BaseForm ( object ) :
 basedir = os . path . join ( os . path . dirname ( potfile ) , locale , 'LC_MESSAGES' )
  output . append ( '%s<li>%s%s</li>' % ( indent ,  escaper ( force_text ( title ) ) , sublist ) )
                  raise
              self . saved_forms = [ ]
                  return language [ : p ] . lower ( ) + '_' + language [ p + 1 ] . upper ( ) + language [ p + 2 : ] . lower ( )
                  self . changed_objects . append ( ( obj , form . changed_data ) )
                   prefix = settings . MEDIA_URL
 self . widgets = getattr ( options , 'widgets' , None )
              class dummy :
 import sys
  phone2numeric = allow_lazy ( phone2numeric )
          if can_fail :
              _mtimes [ filename ] = mtime
 return parser . parse ( )
 def ifchanged ( parser , token ) :
  elif k == 'bg' :
     class TemporaryFileUploadHandler ( FileUploadHandler ) :
   except :
 intrans = False
    def fields_for_model ( model , fields = None , exclude = None , widgets = None ,  formfield_callback = None , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ) :
 return value . rjust ( int ( arg ) )
     class Command ( BaseCommand ) :
                          m = m + base [ medium ]
              current_uri = '{scheme}://{host}{path}' . format ( scheme = self . scheme ,  host = self . get_host ( ) ,  path = self . path )
              raise ValueError ( "attempted relative import beyond top-level package" )
      def __init__ ( self , s ) :
  try :
  split . append ( bit )
              host = self . META [ 'HTTP_X_FORWARDED_HOST' ]
    def __setitem__ ( self , key , value ) :
  except ( OSError , TypeError ) :
          self . msg = msg
      setattr ( Module_six_moves_urllib_request , attr . name , attr )
          super ( LoaderOrigin , self ) . __init__ ( display_name )
          mail . attach_alternative ( html_message , 'text/html' )
              value = getattr ( opts , opt )
      class CycleNode ( Node ) :
  for name in MEDIA_TYPES :
  elif closing_tag :
 match = tagfind . match ( rawdata , i + 1 )
                  raise CommandError ( "The %s file has a BOM (Byte Order Mark). "  "Django only supports .po files encoded in "  "UTF-8 and without any BOM." % po_path )
 if not encoding :
  def __init__ ( self ) :
                  self . _closable_objects . append ( value )
  new_ip += hextet [ 1 ] . split ( ':' )
                              file_ , _ , _ = imp . find_module ( module_name , [ entry ] )
 if not isinstance ( urlconf_name , six . string_types ) :
          ULONG_PTR = c_int64
 import sys
                    compare_to = [ var . resolve ( context , True ) for var in self . _varlist ]
          return json . loads ( data . decode ( 'latin-1' ) )
      def wrapper ( * args , ** kwargs ) :
 import warnings
                  raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : choice } ,  )
                      initial_value = self . initial . get ( name , field . initial )
 MIMEMessage . __setitem__ ( self , name , val )
              data = bool ( data )
 self . name = name or func . __name__
   def is_serious ( self ) :
  data = data . encode ( fp . encoding , errors )
 jan1_weekday = self . data . replace ( month = 1 , day = 1 ) . weekday ( ) + 1
          return _curried_func ( * ( args + moreargs ) , ** dict ( kwargs , ** morekwargs ) )
          if not hasattr ( self , '_body' ) :
          return
  import os
              self . _current [ field . name ] = field . value_to_string ( obj )
              return ''
            if 'forloop' in context :
  elif self . _delegate_text :
      def ugettext ( message ) :
   except ValidationError as e :
          return value
 if t is not None :
 if name in MEDIA_TYPES :
              self . instance . validate_unique ( exclude = exclude )
                  message = 'use only numbers, letters and underscores'
   eol_message = message . replace ( str ( '\r\n' ) , str ( '\n' ) ) . replace ( str ( '\r' ) , str ( '\n' ) )
    def _createdir ( self ) :
          return self . __name
 localpart = str ( Header ( localpart , encoding ) )
 from __future__ import unicode_literals
    class DisallowedHost ( SuspiciousOperation ) :
  except ( LookupError , TypeError ) :
 from django . core import signals
 self . _lock = threading . RLock ( )
   return str ( major + sub )
 if value is not result :
 def load ( parser , token ) :
                      for node in self . nodelist_loop :
 output = options . get ( 'output' )
     else :
          return datetime . datetime . strptime ( force_str ( value ) , format )
    elif isinstance ( message , list ) :
 from django . utils . jslex import prepare_js_for_gettext
 if six . PY2 :
          ret = b'' . join ( self . vals )
          if app_config . models_module is None :
      errors = [ model . check ( ** kwargs )  for model in apps . get_models ( )  if app_configs is None or model . _meta . app_config in app_configs ]
 if newretval is not None :
  bits = arg . split ( ',' )
 if six . PY3 and isinstance ( val1 , bytes ) and isinstance ( val2 , bytes ) :
  else :
              message = trim_whitespace ( message )
          return self
          vary_headers = cc_delim_re . split ( response [ 'Vary' ] )
 obj_dict [ '_data' ] = dict ( ( k , self . getlist ( k ) ) for k in self )
 self . tagname = self . tag ( )
   def __exit__ ( self , exc_type , exc_value , tb ) :
 from xml . sax import handler
  return _standard_context_processors
   if 'noreset' not in opts :
 asvar = None
 self . tag ( function_name , compile_func )
 sep = kwargs . pop ( "sep" , None )
  yield '    %s' % field_desc
  def __init__ ( self , nodelist , parent_name , template_dirs = None ) :
 subject = self . subject
 return self . field . widget . is_hidden
  if ttl is not None :
  t = getattr ( _active , "value" , None )
          bytes = float ( bytes )
 import sys
  seqs = connection . introspection . sequence_list ( ) if reset_sequences else ( )
              raise BadHeaderError ( "Header values can't contain newlines (got %r)" % value )
 Tok . num += 1
 return sys . modules [ name ]
                      os . makedirs ( self . default_locale_path )
              return False
 return self . format ( 'D, j M Y H:i:s O' )
  except NameError :
          return self . __name
 from wsgiref . util import FileWrapper
   def handle ( self , ** options ) :
              return LANG_INFO [ generic_lang_code ]
  for node in self . nodelist_empty :
  self . ending = ending
   if timeout is None :
              self . _client = self . _lib . Client ( self . _servers , pickleProtocol = pickle . HIGHEST_PROTOCOL )
          self . _cache . clear ( )
                  new_obj = func ( obj , * arg_vals )
 tok = '"' + guts + '"'
   if subcommand in no_settings_commands :
 return iter ( getattr ( d , _iteritems ) ( ** kw ) )
 self . pubid = pubid
          self . fed . append ( '&%s;' % name )
 raise
  except smtplib . SMTPException :
 language_code = get_language ( )
          return ord ( buf [ i ] )
                       value = value . encode ( charset )
 options . update ( kwargs )
  return klass
   except NotImplementedError :
  return args , kwargs
          sample = f . read ( 4 )
 return self . _coerce ( value )
   def save_existing_objects ( self , commit = True ) :
  if stream_created :
 etags = ETAG_MATCH . findall ( etag_str )
 _add_doc ( u , """Text literal""" )
   class BaseHandler ( object ) :
 def removetags ( value , tags ) :
              if ( field == NON_FIELD_ERRORS and opts . error_messages and  NON_FIELD_ERRORS in opts . error_messages ) :
    locales = locale or all_locales
              raise DisallowedRedirect ( "Unsafe redirect to URL with protocol '%s'" % parsed . scheme )
              pass
 if as_ != 'as' :
                          file_ , _ , _ = imp . find_module ( module_name , [ entry ] )
  except Exception :
 if value in self . empty_values :
          if name is None and filter_func is None :
     class BaseModelForm ( BaseForm ) :
  for i , field in enumerate ( self . fields ) :
                  attrs = dict ( attrs or { } , ** { 'for' : id_for_label } )
       for app_config in apps . get_app_configs ( ) :
                    output . append ( str_hidden )
   def __setitem__ ( self , name , val ) :
 form = self . form ( ** defaults )
                      continue
 for migration in migrations_to_squash :
 new_migration = subclass ( "%04i_merge" % ( biggest_number + 1 ) , app_label )
   try :
  except UnicodeEncodeError :
  self . extensions = handle_extensions ( exts )
 if six . PY2 and not isinstance ( path , bytes ) :
          if self . _wrapped is empty :
              raise DjangoUnicodeDecodeError ( s , * e . args )
import argparse
          self . _wrapped = self . _setupfunc ( )
 if not match :
   @ property
              self . stream . write ( "," )
  import codecs
 if m . group ( 1 ) :
 if self . activated :
                                  extra_params [ 'null' ] = True
 self . verbosity = options . get ( 'verbosity' )
              filename = filename [ : - 1 ]
          super ( MultiValueDict , self ) . __init__ ( key_to_list_mapping )
    def do_ntranslate ( singular , plural , number , translation_function ) :
 inplural = False
  return self . __class__ ( self )
                      label = conditional_escape ( force_text ( bf . label ) )
  else :
 if kwds :
                      try :
 if categories :
  file_name = force_text ( file_name , encoding , errors = 'replace' )
          super ( BaseTemporalField , self ) . __init__ ( * args , ** kwargs )
  key = self . to_field_name or 'pk'
 LockFileEx . argtypes = [ HANDLE , DWORD , DWORD , DWORD , DWORD , LPOVERLAPPED ]
              return
 if base64d [ : 1 ] == b'.' :
 if len ( bits ) > 2 :
 if hasattr ( file , 'mode' ) :
                result = SimpleLazyObject ( self . _setupfunc )
              logger . warning (  'Forbidden (Permission denied): %s' , request . path ,  extra = {  'status_code' : 403 ,  'request' : request  } )
    hextets = ip_str . split ( ":" )
   return metaclass ( cls . __name__ , cls . __bases__ , orig_vars )
  else :
  output_transaction = True
              return list_ , False
     m2m_data = { }
 dlen = len ( defaults or [ ] )
          return self . number < self . paginator . num_pages
 try :
             self . _headers = { }
 MIN_NUM_FORM_COUNT = 'MIN_NUM_FORMS'
 return state
              try :
  statement . append ( cleaned_line )
   def _coerce ( self , value ) :
                  return self . filter_function ( func , ** flags )
 return compile_function
 s = Select ( choices = choices )
      def __init__ ( self , func , args , kwargs , url_name = None , app_name = None , namespaces = None ) :
 if len_values < 1 :
  return super ( NullBooleanSelect , self ) . render ( name , value , attrs , choices )
     return d
 def __getitem__ ( self , key ) :
              raise StopIteration ( )
  else :
 from django . db . migrations . loader import MigrationLoader
 checkbox_id = self . clear_checkbox_id ( checkbox_name )
          raise NotImplementedError ( 'Subclasses must define this method.' )
 if not isinstance ( fk , ForeignKey ) or ( fk . rel . to != parent_model and  fk . rel . to not in parent_model . _meta . get_parent_list ( ) ) :
 oldvalue = root [ RESULT ]
 from functools import reduce
 if isinstance ( s , SafeData ) :
              logger . warning ( 'Bad Request (UnicodeDecodeError)' ,  exc_info = sys . exc_info ( ) ,  extra = {  'status_code' : 400 ,  }  )
 if html_message :
  for i , ext in enumerate ( ext_list ) :
     for field in model . _meta . fields :
  elif self . reason_phrase is None :
   def _get_model_from_node ( self , node , attr ) :
 force_str = force_text
  try :
   def check ( self , app_configs = None , tags = None , display_num_errors = False ) :
 import operator
  elif command . verbosity > 0 :
  except Exception as e :
  def __init__ ( self , limit_value ) :
                  return False
 from django . core . signals import request_finished
        def template_localtime ( value , use_tz = None ) :
   def tzname ( self , dt ) :
   def handle ( self , * fixture_labels , ** options ) :
 return '\n' . join ( statements )
          return EscapeText ( s )
                      self . handle_data ( rawdata [ i : j ] )
              return language [ : p ] . lower ( ) + '_' + language [ p + 1 : ] . lower ( )
 from django . utils import six
          if app_config . models_module is None :
      import pytz
          return PALETTES [ DEFAULT_PALETTE ]
          self . _archive . printdir ( * args , ** kwargs )
  return value
    def sql_indexes ( app_config , style , connection ) :
  mail = EmailMultiAlternatives ( '%s%s' % ( settings . EMAIL_SUBJECT_PREFIX , subject ) ,  message , settings . SERVER_EMAIL , [ a [ 1 ] for a in settings . ADMINS ] ,  connection = connection )
   def validate ( self , value ) :
  width = property ( _get_width )
   return False
              try :
              return s
   def render ( self , context ) :
   def handle ( self , * args , ** options ) :
                      self . stdout . write ( errors )
              if os . fork ( ) > 0 :
  cache_key = _generate_cache_header_key ( key_prefix , request )
                  try :
  import importlib
   def values ( self ) :
          length = int ( arg )
  from django . conf import settings
   def forbid_multi_line_headers ( name , val , encoding ) :
 readlines = property ( lambda self : self . file . readlines )
   RAW = "raw"
 while i < len ( subject ) and subject [ i ] not in ( ' ' , '\t' ) :
   def __repr__ ( self ) :
              obj . save ( )
 best_doublecolon_len = 0
  if not want_unicode :
              return host
      if urlconf is None :
 loop_dict [ 'counter' ] = i + 1
 return self . as_widget ( self . field . hidden_widget ( ) , attrs , ** kwargs )
 from django . forms . models import *
   def r ( self ) :
  else :
  template_dir = os . path . join ( app_config . path , 'templates' )
  update_wrapper ( _wrapper , dummy )
 if kwargs . get ( 'localize' ) and self . widget == NumberInput :
                  form = self . forms [ i ]
  else :
          return self . _name
 empty_values = list ( validators . EMPTY_VALUES )
          mod = import_module ( mod_name )
  self . nodelist = t . nodelist
              boolean_attrs . append ( ( attr , ) )
 self . include_html = include_html
      compare = lambda self , a , b : a > b
 def loaders ( self ) :
 flup_module += '_fork'
                   ch , escaped = next ( pattern_iter )
 @ stringfilter
 return parser . parse ( )
  else :
 message = ungettext_lazy (  'Ensure this value has at most %(limit_value)d character (it has %(show_value)d).' ,  'Ensure this value has at most %(limit_value)d characters (it has %(show_value)d).' ,  'limit_value' )
   else :
  elif not isinstance ( end , str ) :
          return s . encode ( encoding , errors )
  sites = [ ]
  defaults . update ( kwargs )
              if show_traceback :
   @ register ( Tags . compatibility )
 from django . db . migrations . executor import MigrationExecutor
    def http_date ( epoch_seconds = None ) :
              self . stream = open ( self . _get_filename ( ) , 'ab' )
  else :
  def add_arguments ( self , parser ) :
 global _supported
                  form_field = self . fields [ field ]
          try :
  return attrs
    else :
   def display ( self ) :
                  if self . allow_files :
    def __getitem__ ( self , name ) :
 self . nodelist_true , self . nodelist_false = nodelist_true , nodelist_false
      must_be_first = True
 use_natural_keys = options . get ( 'use_natural_keys' )
      status_code = 410
   if process_all :
 try :
                       if transfer_encoding == 'base64' :
 try :
     class Textarea ( Widget ) :
   if item [ 'pubdate' ] is not None :
          raise ValueError ( 'The joined path (%s) is located outside of the base '  'path component (%s)' % ( final_path , base_path ) )
 translated = func ( ** kwargs )
              escaped = True
 self . paths_to_remove = [ ]
  value = urlunsplit ( url_fields )
                  pass
              warnings . warn (  "`%s.%s` is deprecated, use `%s` instead." %  ( self . class_name , self . old_method_name , self . new_method_name ) ,  self . deprecation_warning , 2 )
                                  value = value . pk
      if cookie == '' :
   def unescape_entities ( text ) :
                  pass
 django . setup ( )
   from PIL import Image
   try :
  self . stream . write ( "]" )
    if sys . platform . startswith ( 'java' ) :
              ch2 = None
     found = True
  elif char in 'bEFMmNn' :
              return t [ 0 ]
      from django . utils . six . moves import _dummy_thread as thread
 for form in valid_forms :
    def npgettext ( context , singular , plural , number ) :
 try :
   def resolve_template ( self , template ) :
          if options [ 'verbosity' ] > 0 :
  else :
                      self . _js . append ( path )
 file_root , file_ext = os . path . splitext ( file_name )
    class MultiWidget ( Widget ) :
          fname = self . _key_to_file ( key , version )
   def read ( self ) :
                               val , encoded = super ( SimpleCookie , self ) . value_encode ( val )
          _translations [ language ] = DjangoTranslation ( language )
   def choice ( self , obj ) :
  slug_re = re . compile ( r'^[-a-zA-Z0-9_]+$' )
 self . method = environ [ 'REQUEST_METHOD' ] . upper ( )
              msg = self . style . HTTP_REDIRECT ( msg )
      error_class = TemplateSyntaxError
 def extra_forms ( self ) :
                          cursor . execute ( line )
 self . email_backend = email_backend
                  self . field . choice_cache = [  self . choice ( obj ) for obj in self . queryset . all ( )  ]
                      rel_model = field . rel . to
 utcdate = time . strftime ( '%Y%m%d%H%M%S' , time . gmtime ( timeval ) )
   return result
                              pass
          signature = base64_hmac ( self . salt + 'signer' , value , self . key )
 kwargs = { }
 def make_list ( value ) :
          return SafeText ( s )
              if self . _has_expired ( key ) :
 if best_doublecolon_start == 0 :
 var_obj = None
              self . cookies [ key ] [ 'domain' ] = domain
  elif msg :
 global templatetags_modules
     class RenderContext ( BaseContext ) :
   def write ( self , msg , style_func = None , ending = None ) :
  else :
    def _string_concat ( * strings ) :
  except NoReverseMatch :
 if self . __language == settings . LANGUAGE_CODE :
              return self . _urlconf_module
  check_for_migrations ( app_config , connection )
 nofollow_attr = ''
  style_func = [ f for f in ( style_func , self . style_func , lambda x : x )  if f is not None ] [ 0 ]
 def media ( self ) :
 raise NotImplementedError ( 'subclasses of LazyObject must provide a _setup() method' )
  return format_html (  '<ul class="errorlist">{0}</ul>' ,  format_html_join ( '' , '<li>{0}{1}</li>' , ( ( k , force_text ( v ) ) for k , v in self . items ( ) ) )  )
    return True
 from django . utils . encoding import python_2_unicode_compatible
   def _ipython_pre_100 ( self ) :
      SimpleCookie = http_cookies . SimpleCookie
              raise ValidationError (  self . error_messages [ 'max_decimal_places' ] ,  code = 'max_decimal_places' ,  params = { 'max' : self . decimal_places } ,  )
 return _i18n_cache_key_suffix ( request , cache_key )
   def close ( self ) :
  except KeyError :
                  raise
                  return list ( urlsplit ( url ) )
                  continue
                      if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) :
 for app_config in apps . get_app_configs ( ) :
    class HttpResponsePermanentRedirect ( HttpResponseRedirectBase ) :
 s_len = 0
  if self . parsed :
          value = field . _get_val_from_obj ( obj )
from __future__ import unicode_literals
   def __contains__ ( self , item ) :
 return [ field for field in self if not field . is_hidden ]
  except ( OSError , NotImplementedError , AttributeError ) :
  elif _len ( cache ) >= maxsize :
   def G ( self ) :
 translators_comment_start = None
 return self . as_widget ( Textarea ( ) , attrs , ** kwargs )
    try :
import logging
 from django . test . signals import setting_changed
                  loaders . append ( loader )
 for app_config in apps . get_app_configs ( ) :
      class CacheClass ( FileBasedCache ) :
    def all_valid ( formsets ) :
   return urljoin ( prefix , path )
  from django . conf import settings
  p = PillowImageFile . Parser ( )
          output = self . nodelist . render ( context )
 parser . add_argument ( '--backwards' , action = 'store_true' , dest = 'backwards' ,  default = False , help = 'Creates SQL to unapply the migration, rather than to apply it' )
              post = '<could not parse>'
 self . _input_data = input_data
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
  from django . conf import settings
  return value
          return time_format ( value , 'TIME_FORMAT' , use_l10n = use_l10n )
  else :
 use_reloader = options . get ( 'use_reloader' )
  from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
 from django . utils . encoding import force_bytes , force_text , force_str , iri_to_uri
  return self . _queryset
      def represent_decimal ( self , data ) :
 __setitem__ = new_method_proxy ( operator . setitem )
   def get_exception_response ( self , request , resolver , status_code ) :
 from django . utils import six
              self . stdout . write ( '\n' . join ( sorted ( registry . tags_available ( ) ) ) )
               MAXSIZE = int ( ( 1 << 63 ) - 1 )
          return len ( list ( self . __iter__ ( ) ) )
              raise TemplateSyntaxError ( 'Unknown argument for %r tag: %r.' %  ( bits [ 0 ] , option ) )
     class NodeList ( list ) :
   def __nonzero__ ( self ) :
          if isinstance ( elt , six . string_types ) :
 paras = re . split ( '\n{2,}' , value )
  else :
  else :
 from django . core . files import locks
          return get_wsgi_application ( )
   self . state = first
  g = one_percent_re . sub ( '%%' , g )
   def is_secure ( self ) :
          return self . tokens . pop ( 0 )
 serializers = { }
   def clean ( self , value ) :
 if basetype == 'text' :
          name , val = forbid_multi_line_headers ( name , val , self . encoding )
              cls . __dispatch = { }
 raise TypeError ( msg )
  def __init__ ( self , permitted_methods , * args , ** kwargs ) :
 from django . utils import six
             self . _request = request
   class Command ( BaseCommand ) :
          cookies = ( pformat ( COOKIES_override )  if COOKIES_override is not None  else pformat ( request . COOKIES ) )
  return [ k for k , v in six . iteritems ( _serializers ) if not v . Serializer . internal_use_only ]
 def cut ( value , arg ) :
 if not response . has_header ( 'Vary' ) :
 strfunc = Name ( "__str__" , prefix = unifunc . prefix )
              now = now . decode ( 'utf-8' )
              return _ ( 'noon' )
      setattr ( Module_six_moves_urllib_error , attr . name , attr )
 pk_field = self . model . _meta . pk
 import sys
               self . filters [ name ] = filter_func
                          self . configure_logger ( name , loggers [ name ] )
   class Command ( BaseCommand ) :
                  for path in paths :
   base , tail_ext = os . path . splitext ( filename . lower ( ) )
  from django import http
 clean = lambda self , x : len ( x )
      def __init__ ( self , template , * args , ** kwargs ) :
 def cleaned_data ( self ) :
 if isinstance ( value , six . string_types ) :
 pass
  else :
   def module_has_submodule ( package , module_name ) :
     new_class . base_fields = declared_fields
              try :
 conditions_nodelists . append ( ( None , nodelist ) )
 from ctypes import ( sizeof , c_ulong , c_void_p , c_int64 ,  Structure , Union , POINTER , windll , byref )
      url = ''
 if truncate_len == 0 :
  _standard_context_processors = tuple ( processors )
              attrs . update ( extra_attrs )
      return _trans . get_language_from_path ( path )
 self . __kw = kw
 if i >= len ( subject ) :
          return self . loader ( self . loadname , self . dirs ) [ 0 ]
          if gettext_module . find ( 'django' , path , [ to_locale ( lang_code ) ] ) is not None :
              return super ( MultiValueDict , self ) . __getitem__ ( key )
     templatetags_modules_candidates = [ 'django.templatetags' ]
 hidden_widget = SplitHiddenDateTimeWidget
                          os . makedirs ( dirname )
 def __init__ ( self , * args , ** kwargs ) :
 import os
              if not self . _has_expired ( key ) :
 if 'id' in self . attrs :
  def handle_field ( self , obj , field ) :
                  yield b'' . join ( self )
   def to_python ( self , data ) :
  else :
  else :
              raise TypeError ( "update expected at most 1 arguments, got %d" % len ( args ) )
              return False
   if strings_only and is_protected_type ( s ) :
  else :
    result = [ ]
  finally :
  return '%s %s %s' % (   _ ( ', ' ) . join ( force_text ( i ) for i in list_ [ : - 1 ] ) ,  force_text ( last_word ) , force_text ( list_ [ - 1 ] ) )
          return super ( Critical , self ) . __init__ ( CRITICAL , * args , ** kwargs )
              if args [ - 1 ] != "silent" :
          return self . value
          if hasattr ( self , 'error_dict' ) :
  fd = pyinotify . INotifyWrapper . create ( ) . inotify_init ( )
   def reload ( self ) :
   if logging_config :
      for program in programs :
                  self . stdout . write ( "No changes detected in app '%s'" % app_labels . pop ( ) )
 return self . getvalue ( )
    if ch == '<' :
      if six . PY2 :
              resolved_args = [ context ] + resolved_args
  else :
  if y and m and d :
 for loader in self . _loaders :
 utf8_charset . body_encoding = None
 cache_key = 'views.decorators.cache.cache_page.%s.%s.%s.%s' % (  key_prefix , method , url . hexdigest ( ) , ctx . hexdigest ( ) )
  elif isinstance ( o , datetime . time ) :
          if not hasattr ( self , '_fqdn' ) :
 params = { 'limit_value' : self . limit_value , 'show_value' : cleaned }
              state_frame [ self ] = compare_to
   def _should_delete_form ( self , form ) :
 import unicodedata
              return raw_data
          return fastcgi_help ( "Invalid combination of host, port, socket." )
          filelist = _cached_filenames + new_filenames + _error_files
          return self . __offset ,
      if self . verbosity >= 1 :
 from django . utils . six . moves import xrange
              raise ValueError ( "Key '%s' not found" % key )
       def close ( self ) :
  else :
          _ExpatParser . reset ( self )
  if hasattr ( mw_instance , 'process_template_response' ) :
          if code_changed ( ) :
   writer = MigrationWriter ( new_migration )
   def reader_leaves ( self ) :
                  del self . _cache [ key ]
              m = self . CONVERT_PATTERN . match ( value )
              raise ValidationError ( self . message , code = self . code )
                  year += 1900
   tag = match . group ( 1 ) . strip ( )
 return response
 self . invoked_for_django = True
 for line in msgs . split ( '\n' ) :
                      yield meta_line
          out = [ str ( x ) for x in [ self . id , self . first , self . second ] if x is not None ]
          return self . _get_image_dimensions ( ) [ 1 ]
                  if e . errno == errno . EEXIST :
              try :
  if not hasattr ( func , '__name__' ) :
                   if key not in self :
          pattern = pattern . lower ( )
  if hasattr ( mw_instance , 'process_view' ) :
    def get_template ( template_name , dirs = None ) :
  get_valid_filename = allow_lazy ( get_valid_filename , six . text_type )
              output . append ( html [ field ] )
      help = "Prints the CREATE INDEX SQL statements for the given model module name(s)."
 for app_label in app_labels :
 alen = len ( args )
              self . instance = instance
 class ChoiceFieldRenderer ( object ) :
          if not isinstance ( s , six . string_types ) :
   return False
 i += 1
 try :
  else :
   if __name__ == '__main__' :
    REASON_PHRASES = {  100 : 'CONTINUE' ,  101 : 'SWITCHING PROTOCOLS' ,  102 : 'PROCESSING' ,  200 : 'OK' ,  201 : 'CREATED' ,  202 : 'ACCEPTED' ,  203 : 'NON-AUTHORITATIVE INFORMATION' ,  204 : 'NO CONTENT' ,  205 : 'RESET CONTENT' ,  206 : 'PARTIAL CONTENT' ,  207 : 'MULTI-STATUS' ,  208 : 'ALREADY REPORTED' ,  226 : 'IM USED' ,  300 : 'MULTIPLE CHOICES' ,  301 : 'MOVED PERMANENTLY' ,  302 : 'FOUND' ,  303 : 'SEE OTHER' ,  304 : 'NOT MODIFIED' ,  305 : 'USE PROXY' ,  306 : 'RESERVED' ,  307 : 'TEMPORARY REDIRECT' ,  308 : 'PERMANENT REDIRECT' ,  400 : 'BAD REQUEST' ,  401 : 'UNAUTHORIZED' ,  402 : 'PAYMENT REQUIRED' ,  403 : 'FORBIDDEN' ,  404 : 'NOT FOUND' ,  405 : 'METHOD NOT ALLOWED' ,  406 : 'NOT ACCEPTABLE' ,  407 : 'PROXY AUTHENTICATION REQUIRED' ,  408 : 'REQUEST TIMEOUT' ,  409 : 'CONFLICT' ,  410 : 'GONE' ,  411 : 'LENGTH REQUIRED' ,  412 : 'PRECONDITION FAILED' ,  413 : 'REQUEST ENTITY TOO LARGE' ,  414 : 'REQUEST-URI TOO LONG' ,  415 : 'UNSUPPORTED MEDIA TYPE' ,  416 : 'REQUESTED RANGE NOT SATISFIABLE' ,  417 : 'EXPECTATION FAILED' ,  418 : "I'M A TEAPOT" ,  422 : 'UNPROCESSABLE ENTITY' ,  423 : 'LOCKED' ,  424 : 'FAILED DEPENDENCY' ,  426 : 'UPGRADE REQUIRED' ,  428 : 'PRECONDITION REQUIRED' ,  429 : 'TOO MANY REQUESTS' ,  431 : 'REQUEST HEADER FIELDS TOO LARGE' ,  500 : 'INTERNAL SERVER ERROR' ,  501 : 'NOT IMPLEMENTED' ,  502 : 'BAD GATEWAY' ,  503 : 'SERVICE UNAVAILABLE' ,  504 : 'GATEWAY TIMEOUT' ,  505 : 'HTTP VERSION NOT SUPPORTED' ,  506 : 'VARIANT ALSO NEGOTIATES' ,  507 : 'INSUFFICIENT STORAGE' ,  508 : 'LOOP DETECTED' ,  510 : 'NOT EXTENDED' ,  511 : 'NETWORK AUTHENTICATION REQUIRED' ,  }
              name , ( value , params ) = _parse_header ( line )
 self . buffer = b''
 result_args = new_args
          for obj in PythonDeserializer ( yaml . load ( stream , Loader = SafeLoader ) , ** options ) :
          new_keys = [ self . make_key ( x , version = version ) for x in keys ]
 for name in bits [ 1 : - 2 ] :
              if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) :
  Module_six_moves_urllib_parse . _moved_attributes = _urllib_parse_moved_attributes
                  raise TemplateSyntaxError ( '"with" in %r tag needs at least '  'one keyword argument.' % bits [ 0 ] )
  except Exception :
   def L ( self ) :
   def escapejs ( value ) :
 super ( IncludeNode , self ) . __init__ ( * args , ** kwargs )
   _get_val = lazy ( _get_val , six . text_type )
 d = get_deserializer ( format )
      allow_multiple_selected = False
 fg = colors . pop ( )
 doy = self . year_days [ self . data . month ] + self . data . day
 value = re . sub ( '[^\w\s-]' , '' , value ) . strip ( ) . lower ( )
 for base in reversed ( new_class . __mro__ ) :
          parser . add_argument ( 'app_label' ,  help = 'App label of the application to squash migrations for.' )
              base , ext = os . path . splitext ( base )
              qs = queryset . none ( )
           value = timezone . normalize ( value )
 if s [ 0 ] not in "\"'" or s [ - 1 ] != s [ 0 ] :
  else :
 if value and ':' in value :
  current_version = sys . version_info
          module = importlib . import_module ( '.%s' % flup_module , 'flup' )
              return self . clear ( )
  num_pages = property ( _get_num_pages )
    opts = tuple ( s for s in styles if s in opt_dict . keys ( ) )
from django . dispatch import Signal
   if "\\" in encoded and not encoded . startswith ( '"' ) :
 if not match :
              name_str = "; " . join (  "%s in %s" % ( ", " . join ( names ) , app )  for app , names in conflicts . items ( )  )
   def __reversed__ ( self ) :
  first_item , second_item = list_
 self . asvar = asvar
 statement = [ ]
   def add_initial_prefix ( self , field_name ) :
              extra_classes = extra_classes . split ( )
 import tempfile
  if self . feed [ 'feed_copyright' ] is not None :
 return os . path . join ( self . _dir , '' . join (  [ hashlib . md5 ( force_bytes ( key ) ) . hexdigest ( ) , self . cache_suffix ] ) )
      return _trans . get_language ( )
              raise self . error ( token , "Invalid block tag: '%s', expected %s" %  ( command , get_text_list ( [ "'%s'" % p for p in parse_until ] ) ) )
  f = s [ : end ]
  elif isinstance ( rhs , SafeBytes ) :
  try :
                  if six . PY3 :
   def __str__ ( self ) :
 def scheme ( self ) :
 get_language = lambda : settings . LANGUAGE_CODE
  else :
   def M ( self ) :
  else :
   elif field . required :
  pdict [ name ] = value
 raise NotImplementedError ( 'subclasses of Storage must provide a listdir() method' )
 response = sys . modules [ __name__ + ".moves.urllib_response" ]
 if value :
 value = map ( force_text , value )
  if app_config is None :
   def empty_variable ( self , token ) :
 endpos = self . check_for_whole_start_tag ( i )
                      disposition = meta_data [ 'content-disposition' ] [ 1 ]
              if self . verbosity > 0 :
 if value in self . empty_values :
                  bad_app_labels . add ( app_label )
          return force_str ( "<Text Node: '%s'>" % self . s [ : 25 ] , 'ascii' ,  errors = 'replace' )
          lang_code = get_language_from_path ( request . path_info )
 version = get_complete_version ( version )
 from django . utils . formats import localize
  self . __language = language
              pass
   class Serializer ( base . Serializer ) :
          return int ( str ( value ) [ - arg ] )
  self . name = name
  return self . _errors
 attrs = { "model" : smart_text ( obj . _meta ) }
                   def dec ( func ) :
          return bool ( self . name )
 week_number = j // 7
          return datetime . fromtimestamp ( os . path . getatime ( self . path ( name ) ) )
      unlink = os . unlink
 off = 6 * ( delta // 100 + delta // 400 )
  if self . verbosity >= 2 :
   return result
  in_tag = not in_tag
   if typed :
 _assertRaisesRegex = "assertRaisesRegexp"
 from email . mime . base import MIMEBase
   def __setitem__ ( self , key , value ) :
          self . encoding = charset
 dirs = [ ]
 if self . validate_domain_part ( domain_part ) :
 from django . db import connections , DEFAULT_DB_ALIAS
 warnings . warn ( "Your TEMPLATE_LOADERS setting includes %r, but your Python installation doesn't support that type of template loading. Consider removing that line from TEMPLATE_LOADERS." % loader )
 try :
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
 if last_bit :
  output = [ ]
    @ property
                  warnings . warn (  'Reversing by dotted path is deprecated (%s).' % original_lookup ,  RemovedInDjango20Warning , stacklevel = 3  )
              self . stdout . write ( "Rendering %s template files with "  "extensions: %s\n" %  ( app_or_project , ', ' . join ( extensions ) ) )
   def __repr__ ( self ) :
  def __deepcopy__ ( self , memo ) :
 return '\n' . join ( statements )
                      raise ValueError (  "%s.process_response didn't return an "  "HttpResponse object. It returned None instead."  % ( middleware_method . __self__ . __class__ . __name__ ) )
 from django . core import signals
   def item_attributes ( self , item ) :
  bf_errors = self . error_class ( [ conditional_escape ( error ) for error in bf . errors ] )
              self . _servers = server . split ( ';' )
              handler . addQuickElement ( "description" , item [ 'description' ] )
   class Module_six_moves_urllib_robotparser ( _LazyModule ) :
                  filterer . addFilter ( self . config [ 'filters' ] [ f ] )
      if not _serializers :
 dirs . append ( '' )
  except KeyError :
                       name = "_%d" % num_args
   except SuspiciousOperation as e :
  else :
  if last == 2 :
     class MovedModule ( _LazyDescr ) :
 def __init__ ( self , convert_charrefs = False , ** kwargs ) :
  singular_suffix , plural_suffix = bits [ : 2 ]
                  args = options . args
 iterkeys = _iterkeys
 self . charset = charset
    def has_key ( self , key ) :
  return True
  list_length = len ( list_ )
           six . reraise ( DeserializationError , DeserializationError ( e ) , sys . exc_info ( ) [ 2 ] )
      message = _ ( 'Enter a valid email address.' )
 _cached_filenames = [ ]
          super ( DTDForbidden , self ) . __init__ ( )
  except ImportError as e :
 return '%02d' % self . data . day
   compile_func . __doc__ = func . __doc__
              warning = kwargs [ 'warning' ]
 return attrs
 fileno = property ( lambda self : self . file . fileno )
 sql_statements = executor . collect_sql ( plan )
 try :
 BLOCK_TAG_END = '%}'
 return self . file . name
                      if plan_node not in shown and plan_node [ 0 ] == app_name :
 from django . utils import six
  if level is not None :
  delattr ( obj . __class__ , self . name )
 value = str ( '%s%s%s' ) % ( value , self . sep , self . timestamp ( ) )
 @ stringfilter
     if not shown :
              if contains ( elt , inst ) :
  elif simple_url_2_re . match ( middle ) :
 if _file is not None :
 statements = sql_all ( app_config , self . style , connection )
  except ( TypeError , AttributeError , KeyError , ValueError ) :
 self . using = options . get ( 'database' )
              return super ( LocalTimezone , self ) . _isdst ( dt )
  except LookupError :
                          obj = settings . TEMPLATE_STRING_IF_INVALID
  option_value = force_text ( option_value )
   response = response . render ( )
            try :
 import re
               return { }
 remaining -= len ( emitting )
              options , args = parser . parse_args ( argv [ 2 : ] )
   return False
                      pass
 if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
              return True
   def initial_form_count ( self ) :
   return response
  else :
          raise TemplateSyntaxError ( "'firstof' statement requires at least one argument" )
                   compare_to = nodelist_true_output = self . nodelist_true . render ( context )
   return value [ slice ( * bits ) ]
 app_dirs . append ( old_app_dir )
  Module_six_moves_urllib_request . _moved_attributes = _urllib_request_moved_attributes
   @ property
    if var . endswith ( '.' ) :
   @ property
          if self . field . empty_label is not None :
  for i , arg in enumerate ( args ) :
 if categories :
                  current_chunk = old_file . read ( chunk_size )
    translation . activate ( settings . LANGUAGE_CODE )
 pdict = { }
   def __deepcopy__ ( self , memo ) :
          try :
  return error_dict
 return fp . getvalue ( )
   class ClearableFileInput ( FileInput ) :
              if is_aware ( o ) :
  else :
                return ( self . __newobj__ , ( self . __class__ , ) , self . __getstate__ ( ) )
  else :
  else :
   def get_field_type ( self , connection , table_name , row ) :
   class ContentNotRenderedError ( Exception ) :
     class CallbackFilter ( logging . Filter ) :
 self . keyOrder . remove ( key )
 if not prefix . endswith ( '/' ) :
  if self . translate :
              django . setup ( )
  else :
  name , value = match . groups ( )
          if value in self . empty_values :
   def urlunquote_plus ( quoted_url ) :
          if self . _encoding is None :
      pass
  __all__ = [ 'luhn' ]
              self . full_clean ( )
              return val if isinstance ( val , bytes ) else val . encode ( encoding )
 g = generator . BytesGenerator ( fp , mangle_from_ = False )
              self . GET = QueryDict ( mutable = True )
 return self
 self . msgattrib_options = self . msgattrib_options [ : ] + [ '--no-location' ]
 self . xml = SimplerXMLGenerator ( self . stream , self . options . get ( "encoding" , settings . DEFAULT_CHARSET ) )
                          self . _css . setdefault ( medium , [ ] ) . append ( path )
 options = self . render_options ( choices , [ value ] )
    for app_config in apps . get_app_configs ( ) :
                       pass
                      template , display_name = loader ( name , dirs )
 parser . add_argument ( '--indent' , default = None , dest = 'indent' , type = int ,  help = 'Specifies the indent level to use when pretty-printing output.' )
  common_ancestor = None
 field_notes = [ ]
  nodelist = self . create_nodelist ( )
              raise base . DeserializationError (  "<%s> node is missing the required '%s' attribute"  % ( node . nodeName , attr ) )
 from django . utils import datetime_safe
 import gettext as gettext_module
              charset = msg . get_charset ( ) . get_output_charset ( ) if msg . get_charset ( ) else 'utf-8'
                      if not table_name_filter ( table_name ) :
 get_function_code = operator . attrgetter ( _func_code )
  not_found = [ ]
    x = 0
 from django . core . files import locks , File
                      return self . strptime ( value , format )
  language_code_prefix_re = re . compile ( r'^/([\w-]+)(/|$)' )
              match = kwarg_re . match ( bit )
   return client
        if ( not normcase ( final_path ) . startswith ( normcase ( base_path + sep ) ) and  normcase ( final_path ) != normcase ( base_path ) and  dirname ( normcase ( base_path ) ) != normcase ( base_path ) ) :
   try :
 self . locale_paths . insert ( 0 , os . path . join ( os . path . abspath ( dirpath ) , dirname ) )
  def __init__ ( self , stream_or_string , ** options ) :
                      m = plural_forms_re . search ( fp . read ( ) )
 if callable ( self . limit_choices_to ) :
   def to_language ( self ) :
              func = import_string ( path )
                      for key , value in other_dict . items ( ) :
 from django . test . utils import get_runner
 for item in sequence :
  else :
   try :
          if can_fail :
      with open ( fn , 'rb' ) as f :
    def get_language_from_path ( request ) :
              with codecs . open ( sql_file , 'r' , encoding = settings . FILE_CHARSET ) as fp :
 self . interactive = options . get ( 'interactive' )
 from django . utils . translation import ungettext , ugettext as _
          self . encoding = encoding
   def bound_data ( self , data , initial ) :
 kwargs = dict ( ( smart_text ( k , 'ascii' ) , v . resolve ( context ) )  for k , v in self . kwargs . items ( ) )
      def __init__ ( self , * args , ** kwargs ) :
    if self . allow_folders :
 from django . utils . safestring import mark_safe , SafeData , mark_for_escaping
                      break
 for filename in gen_filenames ( ) :
     class SplitDateTimeWidget ( MultiWidget ) :
 parser . add_argument ( '--no-initial-data' , action = 'store_false' , dest = 'load_initial_data' , default = True ,  help = 'Tells Django not to load any initial data after database synchronization.' )
              self . _load_post_and_files ( )
 if not supports_color ( ) :
              filenames . append ( filename )
     class InterBoundaryIter ( six . Iterator ) :
  elif child . nodeType == child . ELEMENT_NODE :
  else :
 class SubWidget ( object ) :
                return
  return inner
              value = ConvertingList ( value )
 return header . lower ( ) in self . _headers
                  fp . write ( src_data )
 if not self . port . isdigit ( ) :
     class DebugParser ( Parser ) :
   return style
  def tzname ( self , dt ) :
   elif name is not None and filter_func is None :
                      if len ( args ) != len ( params ) + len ( prefix_args ) :
   def as_widget ( self , widget = None , attrs = None , only_initial = False ) :
  except ImportError :
 for replacement in set ( [  thousand_sep , unicodedata . normalize ( 'NFKD' , thousand_sep ) ] ) :
 from django . core . exceptions import SuspiciousMultipartForm
 self . children = children [ : ] if children else [ ]
 if mimetype is None :
      if os . environ . get ( "RUN_MAIN" ) == "true" :
 lock = RLock ( )
      widget = SplitDateTimeWidget
 if related :
  else :
 if self . verbosity > 1 :
              app_configs = None
                  if not lookup :
          return s
  def __init__ ( self , exception ) :
 return __wrapper__
  for pattern in allowed_hosts :
   def exists ( self , name ) :
 def __init__ ( self , host = None , port = None , username = None , password = None ,  use_tls = None , fail_silently = False , use_ssl = None , timeout = None ,  ** kwargs ) :
                      rawdata = force_str ( rawdata )
 if not_installed_models :
  elif not isinstance ( sep , str ) :
   except SystemExit :
   return total_forms
 statements = sql_create ( app_config , self . style , connection )
          obj = getattr ( models . signals , name )
 raise NoReverseMatch ( "Reverse for '%s' with arguments '%s' and keyword "  "arguments '%s' not found. %d pattern(s) tried: %s" %  ( lookup_view_s , args , kwargs , len ( patterns ) , patterns ) )
                  self . fetch_command ( options . args [ 0 ] ) . print_help ( self . prog_name , options . args [ 0 ] )
          self . language = language
 link [ NEXT ] = root
  from __future__ import unicode_literals
  except signing . BadSignature :
          response [ 'Expires' ] = http_date ( time . time ( ) + cache_timeout )
 if conflicts and not self . merge :
  return
    @ deconstructible
           replacement = _BROWSERS_DEPRECATED_LOCALES . get ( lang_code )
              return bytes ( value . encode ( self . _charset ) )
  except _BASE64_DECODE_ERROR :
 if serializers is None and not _serializers :
   else :
 check_for_language = lambda x : True
    for cat in item [ 'categories' ] :
              return ""
  setattr ( self . _wrapped , name , value )
                  prefix = settings . STATIC_URL
    except StopIteration :
 if os . path . exists ( old_app_dir ) :
 sign = '-' if seconds < 0 else '+'
              file . close ( )
   result = user_function ( * args , ** kwds )
     class SortedDict ( dict ) :
                    if int ( hextet , 16 ) < 0x0 or int ( hextet , 16 ) > 0xFFFF :
 base_lang = get_language ( ) . split ( '-' ) [ 0 ]
      from django . utils import timezone
     def to_language ( locale ) :
 from django . core import checks
     _translations = { }
  return self . _request
              field_notes . append ( 'Field renamed to remove unsuitable characters.' )
              return bytes ( value )
              return _ ( 'PM' )
                  endbmatch = endblock_re . match ( t . contents )
    if as_form :
           int2byte = operator . methodcaller ( "to_bytes" , 1 , "big" )
  if error_message is not None :
                  handler . file . close ( )
   def render_options ( self , choices , selected_choices ) :
    class BaseMemcachedCache ( six . with_metaclass ( BaseMemcachedCacheMethods , BaseCache ) ) :
 base16 = BaseConverter ( BASE16_ALPHABET )
                                  file_ . close ( )
              if len ( x ) == 0 :
          if self . timezone is None :
 self . code = code
   def handle_app_config ( self , app_config , ** options ) :
 constant_re = re . compile ( r"""_\(((?:".*?")|(?:'.*?'))\)""" )
          prefix = get_script_prefix ( )
 relative_dir = path_rest . replace ( base_name , name )
 translation = gettext_module . translation (  domain = 'django' ,  localedir = localedir ,  languages = [ self . __locale ] ,  codeset = 'utf-8' ,  fallback = use_null_fallback )
 self . render_context = RenderContext ( )
  return result
          return strftime ( self , fmt )
 self . json_kwargs = self . options . copy ( )
          def __new__ ( cls , * args , ** kwargs ) :
     class NumberInput ( TextInput ) :
 return token
   class Command ( BaseCommand ) :
    @ register . filter ( is_safe = True )
  else :
              key += tuple ( type ( v ) for v in args )
 if new_value == value :
      replaces = [ ]
 for key , value in data . items ( ) :
              x = x * len ( from_digits ) + from_digits . index ( digit )
  write ( end )
   def render ( self ) :
  if not callable ( getattr ( template , 'render' , None ) ) :
 for template_name in template_name_list :
      help = ( "Output the contents of the database as a fixture of the given "  "format (using each model's default manager unless --all is "  "specified)." )
 for i , choice in enumerate ( self . choices ) :
 def _get_val ( ) :
   self . file . seek ( 0 )
  try :
          import memcache
              params = params [ 1 : ]
     def close ( self ) :
    class TagHelperNode ( Node ) :
              if default_list is None :
  elif not isinstance ( file_name , six . string_types ) and is_iterable ( file_name ) :
 try :
  raise
 defaults = { 'data' : data , 'files' : files , 'auto_id' : auto_id , 'prefix' : prefix }
   if len ( bits ) :
    def check_for_language ( lang_code ) :
   def is_valid ( self ) :
                  header , value = settings . SECURE_PROXY_SSL_HEADER
 return '%s-%s' % ( self . prefix , field_name ) if self . prefix else field_name
  else :
  for choice in self . field . choice_cache :
      help = "Introspects the database tables in the given database and outputs a Django model module."
   def end_serialization ( self ) :
   def start_object ( self , obj ) :
 if param in unhandled_params :
 migration . ancestry = loader . graph . forwards_plan ( ( app_label , migration_name ) )
   def check_programs ( * programs ) :
  if not incremental :
 if six . PY2 :
              self . cookies [ key ] [ 'path' ] = path
 for smigration in migrations_to_squash :
              value = formats . sanitize_separators ( value )
   name = self . timezone . tzname ( self . data ) if self . timezone else None
              callback ( self )
  return _make_decorator
  app_dir = os . path . join ( app_config . path , 'fixtures' )
    if not self . use_ssl and self . use_tls :
 if not ( self . data or self . files ) :
 self . fields = getattr ( options , 'fields' , None )
 pass
                      self . stdout . write ( self . style . MIGRATE_LABEL ( "  Unapply all migrations: " ) + "%s" % ( targets [ 0 ] [ 0 ] , ) )
          if isinstance ( regex , six . string_types ) :
    i = next_space_index ( subject , i )
  except AttributeError :
   if errors :
   def trim_whitespace ( s ) :
   else :
   class Command ( BaseCommand ) :
 from django . utils import six
          return len ( self . object_list )
 try :
   class Command ( AppCommand ) :
      if urlconf is None :
              callback , param_dict = resolver . resolve_error_handler ( status_code )
                  attrs_plus = self . attrs . copy ( )
          if option_value is None :
              ch2 = None
   def render ( self , context ) :
from __future__ import unicode_literals
 msguniq_options = [ '--to-code=utf-8' ]
      try :
   directory_created [ app_label ] = True
   def ipython ( self ) :
  output_transaction = True
                          self . load_middleware ( )
          try :
 import warnings
              value = float ( value )
 match = _html_parser . endendtag . search ( rawdata , i + 1 )
                  error_messages = opts . error_messages [ NON_FIELD_ERRORS ]
              return 'nd'
   else :
  with connection . cursor ( ) as cursor :
  import hashlib
  truncate = force_text ( truncate )
 chunk += over_chunk
              nodelist = getattr ( self , attr , None )
   def Z ( self ) :
 self . first = True
              assert content is None
   def reraise ( tp , value , tb = None ) :
                  error_text = str ( e )
 from django . db import connections , DEFAULT_DB_ALIAS
          return False
  return output
              if "'stream'" not in str ( te ) :
  if colors and colors [ - 1 ] in color_names :
    for app_config in apps . get_app_configs ( ) :
          self . file . seek ( 0 )
  for func , args in self . filters :
              f . seek ( 0 )
                      raise NoReverseMatch (  "%s is not a registered namespace inside '%s'" %  ( key , ':' . join ( resolved_path ) ) )
   connection_class = smtplib . SMTP_SSL if self . use_ssl else smtplib . SMTP
  else :
           buffer_ = None
                          result . pop ( )
 from django . utils . html import conditional_escape , format_html
  import mimetypes
  else :
              del _urlconfs . value
 for choice in value :
              try :
                      super ( AssignmentNode , self ) . __init__ ( takes_context , args , kwargs )
  requires_system_checks = False
 compile_func = partial ( generic_tag_compiler ,  params = params , varargs = varargs , varkw = varkw ,  defaults = defaults , name = function_name ,  takes_context = takes_context , node_class = SimpleNode )
          if app_config . models_module is None :
              name = content . name
                       result = user_function ( * args , ** kwds )
 self . level = level
             self . template_name = template
  raise SyntaxError ( "Translation blocks must not include other block tags: %s (%sline %d)" % ( t . contents , filemsg , t . lineno ) )
 from django . utils . timezone import is_aware
  if i >= self . initial_form_count ( ) and not form . has_changed ( ) :
          raise TemplateSyntaxError ( "'regroup' tag takes five arguments" )
 _func_code = "func_code"
  self . fields = fields
  requires_system_checks = False
  for statement in index_output :
 self . file_name = file_name
       comment_re = re . compile ( r"^((?:'[^']*'|[^'])*?)--.*$" )
 name = "." . join ( [ package . __name__ , module_name ] )
 if self . body :
 import warnings
                                  with transaction . atomic ( using = connection . alias , savepoint = connection . features . can_rollback_ddl ) :
 if len ( t ) > 1 :
   else :
  else :
    return exclude
  return self . _get_page ( self . object_list [ bottom : top ] , number , self )
  output . append ( '</optgroup>' )
 return dateformat . format ( value , get_format ( format or 'DATE_FORMAT' , use_l10n = use_l10n ) )
      def strftime ( self , fmt ) :
                      content = content . decode ( 'utf-8' )
 from django . utils . encoding import force_str
 if use_l10n or ( use_l10n is None and settings . USE_L10N ) :
    def tz ( request ) :
                return text
  else :
 while i < len ( subject ) and subject [ i ] != subject [ p ] :
              return self . keyOrder [ : ]
  if self . field . required and hasattr ( self . form , 'required_css_class' ) :
 return s . getvalue ( )
  chunk = next ( self )
      smart_str = smart_bytes
  self . _raw_ipv6 = False
 class ChoiceInput ( SubWidget ) :
   def _fd ( f ) :
                      msg . attach ( self . _create_attachment ( * attachment ) )
 import warnings
  else :
              retval = handler . upload_complete ( )
                  lib = get_library ( taglib )
  from __future__ import unicode_literals
                  if not isinstance ( messages , ValidationError ) :
  lineno_comment_map [ comment_lineno_cache ] = [ ]
 from django . utils . six . moves . urllib . parse import urljoin
              self . file_path = getattr ( settings , 'EMAIL_FILE_PATH' , None )
  else :
  def __init__ ( self , fields = ( ) , * args , ** kwargs ) :
          return [ widget . value_from_datadict ( data , files , name + '_%s' % i ) for i , widget in enumerate ( self . widgets ) ]
              return ( ( not pk . editable ) or ( pk . auto_created or isinstance ( pk , AutoField ) )  or ( pk . rel and pk . rel . parent_link and pk_is_not_editable ( pk . rel . to . _meta . pk ) ) )
                      resolved_args , resolved_kwargs = self . get_resolved_arguments ( context )
 self . stdout . flush ( )
 def urlencode ( value , safe = None ) :
 pass
              parser = CommandParser ( self , prog = "%s %s" % ( os . path . basename ( prog_name ) , subcommand ) ,  description = self . help or None )
  else :
                  self . stdout . write ( "  Creating tables...\n" )
 memo [ id ( self ) ] = result
 return
    out = b'' . join ( parts ( ) )
   def open ( self ) :
    def inlineformset_factory ( parent_model , model , form = ModelForm ,  formset = BaseInlineFormSet , fk_name = None ,  fields = None , exclude = None , extra = 3 , can_order = False ,  can_delete = True , max_num = None , formfield_callback = None ,  widgets = None , validate_max = False , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ,  min_num = None , validate_min = False ) :
                  if middle . startswith ( opening ) :
 from django . core . validators import validate_ipv4_address
  pythonrc = os . path . expanduser ( pythonrc )
  else :
 return super ( BaseInlineFormSet , self ) . get_unique_error_message ( unique_check )
                          if hasattr ( field_value , '__iter__' ) and not isinstance ( field_value , six . text_type ) :
 try :
   def run_checks ( self , app_configs = None , tags = None ) :
 if '()' in config :
          if isinstance ( format_module_path , six . string_types ) :
          def dec ( func ) :
              if isinstance ( s , Exception ) :
   def tokenize ( self ) :
 if not chunk_size :
   def handle_raw_input ( self , input_data , META , content_length , boundary , encoding = None ) :
    def add_to_builtins ( module ) :
 parser = self . create_parser ( prog_name , subcommand )
 self . write_migration_files ( changes )
  return copy . deepcopy ( self . _wrapped , memo )
   def translate_token ( self , token ) :
 setattr ( cls , opname , opfunc )
   elif bmatch :
   def __str__ ( self ) :
   try :
               for supported_code in _supported :
          return formats . localize_input ( value ,  self . format or formats . get_format ( self . format_key ) [ 0 ] )
           pos_inf = 1e200 * 1e200
  src_data = prepare_js_for_gettext ( src_data )
      pass
                      M = self . get ( key , Morsel ( ) )
 return IfChangedNode ( nodelist_true , nodelist_false , * values )
 self . validate_key ( key )
   logger . error ( 'Internal Server Error: %s' , request . path ,  exc_info = exc_info ,  extra = {  'status_code' : 500 ,  'request' : request  }  )
    class HttpRequest ( object ) :
                  closable . close ( )
    lang_code = request . COOKIES . get ( settings . LANGUAGE_COOKIE_NAME )
 from django . core . exceptions import ValidationError
              if not self . _has_expired ( key ) :
   def format ( number , decimal_sep , decimal_pos = None , grouping = 0 , thousand_sep = '' ,  force_grouping = False ) :
      from UserList import UserList
   def handle ( self , * args , ** options ) :
 value = unicodedata . normalize ( 'NFKD' , value ) . encode ( 'ascii' , 'ignore' ) . decode ( 'ascii' )
  loop_dict [ 'revcounter' ] = len_values - i
  try :
 if field . rel . through . _meta . auto_created :
  except UnicodeDecodeError :
  if ttl is not None :
   try :
   def setlistdefault ( self , key , default_list = None ) :
     key = hashlib . sha1 ( key_salt + secret ) . digest ( )
   def cfg_convert ( self , value ) :
   def serialize_headers ( self ) :
 for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) :
          y = data . get ( self . year_field % name )
 def namespace_dict ( self ) :
 if not ( bits . scheme and bits . netloc ) :
    class SuspiciousMultipartForm ( SuspiciousOperation ) :
              connection_params [ 'timeout' ] = self . timeout
 if not self . is_bound :
                  libraries [ library_name ] = lib
 self . domain = options . get ( 'domain' )
 if val is None :
 value = normalize_newlines ( value )
 def messages ( self ) :
   def smart_urlquote ( url ) :
 def cleanup_url ( url ) :
  except Exception :
   self . _clean_fields ( )
  basedirs . extend ( settings . LOCALE_PATHS )
       def __init__ ( self , level , msg , hint = None , obj = None , id = None ) :
   attrs = [ ]
   return getattr ( settings , format_type )
       def __init__ ( self ) :
 return remove_tags ( value , tags )
 nodelist = parser . parse ( ( 'endspaceless' , ) )
      widget = NumberInput
   try :
     class SplitHiddenDateTimeWidget ( SplitDateTimeWidget ) :
 def initial_forms ( self ) :
              return self . show_migration_list ( connection , [ options [ 'app_label' ] ] if options [ 'app_label' ] else None )
 from django . utils . safestring import mark_safe
                  newretval = post_callback ( retval )
 if kwarg :
 if not isinstance ( value , ConvertingDict ) and isinstance ( value , dict ) :
 parser . add_argument ( '--extension' , '-e' , dest = 'extensions' ,  help = 'The file extension(s) to examine (default: "html,txt", or "js" '  'if the domain is "djangojs"). Separate multiple extensions with '  'commas, or use -e multiple times.' ,  action = 'append' )
  if not basedirs :
 if css_classes :
 max_age = max ( 0 , delta . days * 86400 + delta . seconds )
   LPOVERLAPPED = POINTER ( OVERLAPPED )
          output . extend ( custom_sql_for_model ( model , style , connection ) )
              return new_class
 self . common_logger_config ( root , config , incremental )
                  raise TemplateSyntaxError ( "%r must be the first tag "  "in the template." % node )
                  exhaust ( self . _input_data )
 oldkey = root [ KEY ]
     class JsLexer ( Lexer ) :
 use_grouping = settings . USE_L10N and settings . USE_THOUSAND_SEPARATOR
  normalize_newlines = allow_lazy ( normalize_newlines , six . text_type )
              handler . startElement ( "entry" , self . item_attributes ( item ) )
          if field . rel . through . _meta . auto_created :
  connection = connections [ options . get ( 'database' ) ]
 msg_data = msg . as_bytes ( )
     @ deconstructible
 decompress = True
              return '%s_%s' % ( id_ , first_select )
 from django . views import debug
  try :
 global _localtime
              self . keyOrder . append ( key )
  import time
  self . backout . append ( self . pointer )
          return self . msg % tuple ( force_text ( p , errors = 'replace' ) for p in self . params )
 if self . active_readers == 0 and self . waiting_writers != 0 :
  elif '=' in part :
  else :
   if self . match is not None :
  elif callable ( func ) :
   def bpython ( self ) :
  if not expires :
  language_code_re = re . compile ( r'^[a-z]{1,8}(?:-[a-z0-9]{1,8})*$' , re . IGNORECASE )
     def _get_foreign_key ( parent_model , model , fk_name = None , can_fail = False ) :
 hlen = digest ( ) . digest_size
   class _OFFSET_UNION ( Union ) :
 for table_name in connection . introspection . table_names ( cursor ) :
          if self . _isdst ( dt ) :
          value = ugettext ( "%s TB" ) % filesize_number_format ( bytes / TB )
           return ip_str
   if field . help_text :
           def split_url ( url ) :
   def u ( self ) :
  s = s . replace ( '\\' , '\\\\' )
          return ''
   elif issubclass ( klass , logging . handlers . SMTPHandler ) and 'mailhost' in config :
 if ret :
          return True
   else :
 if self . m2m_data and save_m2m :
  import re
     def build_request_repr ( request , path_override = None , GET_override = None ,  POST_override = None , COOKIES_override = None ,  META_override = None ) :
  else :
              continue
                      dirname = os . path . dirname ( filename )
          middleware = middleware_class ( * m_args , ** m_kwargs )
  def __init__ ( self , file = None , name = None , content_type = None , size = None , charset = None , content_type_extra = None ) :
  return mark_safe ( data )
 result += ':' + ipv4_address
           yes , no , maybe = bits [ 0 ] , bits [ 1 ] , bits [ 1 ]
 g . flatten ( self , unixfrom = unixfrom )
                              file_ . close ( )
                   raise ImportError
                  imatch = inline_re . match ( t . contents )
  return context_extras
 usage = '%%prog %s [options] %s' % ( subcommand , self . args )
  return value
  from django . utils import six
              exc_info = sys . exc_info ( )
                  raise ValueError ( 'Unable to add handler %r: %s' % ( h , e ) )
   def __iter__ ( self ) :
              response = _set_response_etag ( response )
              mimetype , _ = mimetypes . guess_type ( filename )
 DEFAULT_PALETTE = DARK_PALETTE
 def center ( value , arg ) :
                      self . handle_data ( rawdata [ i : j ] )
              kwargs [ 'label' ] = labels [ f . name ]
 self . validate_name ( app_name , "app" )
 self . interactive = options . get ( 'interactive' )
              raise TemplateSyntaxError ( "'%s' tag with name '%s' appears more than once" % ( bits [ 0 ] , block_name ) )
 context_extras [ 'sql_queries' ] = connection . queries
    def push ( self , * args , ** kwargs ) :
  import datetime
 from django . contrib . auth import get_user_model
     def select_template ( template_name_list , dirs = None ) :
              six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc_info ( ) [ 2 ] )
     self . run_validators ( value )
 self . dry_run = options . get ( 'dry_run' , False )
 from django . core . files import uploadhandler
               kwargs . setdefault ( 'widget' , super ( IntegerField , self ) . widget )
  if reason is not None :
          kwargs [ 'number' ] = number
  else :
 new_environ [ "RUN_MAIN" ] = 'true'
  else :
                      self . empty_variable ( token )
           command = app_name
              self . _current [ field . name ] = str ( getattr ( obj , field . name ) )
              tz_name = force_text ( get_current_timezone_name ( ) , errors = 'ignore' )
              if self . message_context :
  from collections import OrderedDict
 choices = [ ( i , i ) for i in self . years ]
      def __init__ ( self , server , params , library , value_not_found_exception ) :
  else :
  digits = len ( digittuple )
                              e . args = ( "Could not load %(app_label)s.%(object_name)s(pk=%(pk)s): %(error_msg)s" % {  'app_label' : obj . object . _meta . app_label ,  'object_name' : obj . object . _meta . object_name ,  'pk' : obj . object . pk ,  'error_msg' : force_text ( e )  } , )
 return func
   from django . core . exceptions import ValidationError
                      if latest_date is None or item_date > latest_date :
 root [ KEY ] = root [ RESULT ] = None
  if self . feed [ 'language' ] is not None :
  except ValidationError :
 for resultclass in resultclasses :
 super ( SplitDateTimeWidget , self ) . __init__ ( widgets , attrs )
 return self . __language
              return None
          time_str = time_str . decode ( 'utf-8' )
              value = True
  return field . to_python
 return result
          return ( p1 . scheme , p1 . hostname , p1 . port ) == ( p2 . scheme , p2 . hostname , p2 . port )
     @ register . filter ( is_safe = False )
 super ( MemcachedCache , self ) . __init__ ( server , params ,  library = memcache ,  value_not_found_exception = ValueError )
    def end_serialization ( self ) :
          self . _assert_mutable ( )
 default_error_messages = {  'invalid' : _ ( 'Enter a valid date/time.' ) ,  }
    def _start_relational_field ( self , field ) :
          return get_supported_language_variant ( lang_code )
                  return kwargs
     class ModelMultipleChoiceField ( ModelChoiceField ) :
  return _translations [ language ]
     class ImageField ( FileField ) :
 mail . mail_admins ( subject , message , fail_silently = True ,  html_message = html_message ,  connection = self . connection ( ) )
                      sub_tried = e . args [ 0 ] . get ( 'tried' )
              i += 1
 self . to = list ( to )
 if upto != start :
 self . allow_files , self . allow_folders = allow_files , allow_folders
  value = super ( DictWrapper , self ) . __getitem__ ( key )
  except ( ValueError , TypeError ) :
              if cnt and not cnt % grouping :
           return ip_str
 match = _html_parser . endtagfind . match ( rawdata , i )
 html [ 'year' ] = self . create_select ( name , self . year_field , value , year_val , choices , self . year_none_value )
 from django . utils . safestring import mark_safe
  if not host_validation_re . match ( host ) :
 from xml . sax . expatreader import ExpatParser as _ExpatParser
 self . keyOrder = [ ]
  elif isinstance ( value , datetime . time ) :
          return TemplateSyntaxError ( msg )
 formatted = (  color_style ( ) . ERROR ( force_str ( e ) )  if e . is_serious ( )  else color_style ( ) . WARNING ( force_str ( e ) )  for e in issues )
          try :
 while '%s_%d' % ( new_name , num ) in used_column_names :
 compile_func . __doc__ = func . __doc__
     kwargs [ 'stream' ] = None
  except ImportError :
 self . stdout . write ( "%s\n" % writer . as_string ( ) )
 return klass ( fail_silently = fail_silently , ** kwds )
  lang_code = regex_match . group ( 1 )
  both_after = [  Tok ( "other" , r"." ) ,  ]
 self . length , self . mime_type = length , mime_type
                  raise EmptyPage ( 'That page contains no results' )
          self . _archive . list ( )
 from django . utils . timezone import is_aware , utc
    potfiles = [ ]
   def __str__ ( self ) :
   if sys . version_info [ : 2 ] == ( 2 , 7 ) :
 def unordered_list ( value , autoescape = None ) :
 if token . token_type == TOKEN_BLOCK and token . contents == endtag :
 if inplural :
  if var_obj is None :
  context . dicts . append ( self )
 root [ : ] = [ root , root , None , None ]
  except TypeError :
 parts = fixture_name . rsplit ( '.' , 2 )
             for handler in self . _upload_handlers :
                  msg . attach ( body_msg )
 loop_dict [ 'last' ] = ( i == len_values - 1 )
                      cls . __str__ = cls . __text_cast
          self . queryset = queryset
 self . _regex_dict = { }
          obj_list = self . target . resolve ( context , True )
                      raise TemplateSyntaxError (  "'%s' tag takes at least 2 arguments and the "  "second last argument must be 'as'" % function_name )
  return get_callable ( callback ) , { }
 __Y = r'(?P<year>\d{4})'
 if not self . timezone :
   if t . token_type == TOKEN_BLOCK :
  except LookupError :
                  raise CommandError ( "Incompatible values of 'leave_locale_alone' "  "(%s) and 'can_import_settings' (%s) command "  "options." % ( self . leave_locale_alone ,  self . can_import_settings ) )
                   opts = model . _meta
    def dst ( self , dt ) :
 self . sysid = sysid
    callable = callable
                                          cursor . execute ( sql )
   def tell ( self ) :
                  raise base . DeserializationError ( "<field> node is missing the 'name' attribute" )
                  consume_next = True
 if not hasattr ( translation , '_catalog' ) :
 return make_middleware_decorator ( middleware_class ) ( )
  filters = config . get ( 'filters' , None )
   if not chunks :
                    timeout += int ( time . time ( ) )
 for i , ( dirpath , f ) in enumerate ( locations ) :
          os . remove ( symlink_path )
   from django . core . validators import EMPTY_VALUES
          try :
   def words ( self , num , truncate = None , html = False ) :
  password = force_bytes ( password )
                  return False
  if _default is None :
    if data is False :
from django . core . management . base import BaseCommand , CommandError
    def static ( request ) :
    autodetector = MigrationAutodetector (  loader . project_state ( ) ,  ProjectState . from_apps ( apps ) ,  InteractiveMigrationQuestioner ( specified_apps = app_labels , dry_run = self . dry_run ) ,  )
   for o in opts :
 if autoescape and not safe_input :
                  break
          args = [ ]
   return format_html (  '<ul class="{0}">{1}</ul>' ,  self . error_class ,  format_html_join ( '' , '<li>{0}</li>' , ( ( force_text ( e ) , ) for e in self ) )  )
 if self . data . minute == 0 and self . data . hour == 0 :
              e . django_template_source = token . source
 self . method = None
     class LoaderOrigin ( Origin ) :
 from django . db . migrations . executor import MigrationExecutor
  output = [ ]
                  handler . addQuickElement ( "uri" , self . feed [ 'author_link' ] )
 return result
                  if args :
                      message . message = error_messages [ message . code ]
      t = s . split ( '=' , 1 )
   for locale in locales :
   def value_from_datadict ( self , data , files , name ) :
 @ stringfilter
 mapped_tokens = [ ]
  if 'args' in options :
              continue
    for f in file_field_list :
   if not isinstance ( viewname , six . string_types ) :
  ipv4_re = re . compile ( r'^(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}$' )
   def find_filter ( self , filter_name ) :
 value . configurator = self
  except OSError :
 if cache is None :
              if block_context is None :
              invalid_tag = next ( tag for tag in tags if not checks . tag_exists ( tag ) )
   else :
  return t
 if loader is not None :
          value = force_text ( value )
 msg [ 'From' ] = self . extra_headers . get ( 'From' , self . from_email )
 def rjust ( value , arg ) :
                  m = self . DOT_PATTERN . match ( rest )
    class SyndicationFeed ( object ) :
  def add_arguments ( self , parser ) :
   @ property
       from django . db . migrations . loader import MigrationLoader
  except Exception as e :
  self . _current [ field . name ] = value
  used_column_names = [ ]
              field_params [ 'db_column' ] = col_name
              return None
                   def handle_m2m ( value ) :
          if self . language is not None :
   def total_error_count ( self ) :
    class RequestContext ( Context ) :
 return mark_safe ( linebreaks ( value , autoescape ) )
                      compile_func = self . tags [ command ]
                     self . connection . close ( )
 field_params [ 'decimal_places' ] = row [ 5 ] if row [ 5 ] is not None else 5
 DELETION_FIELD_NAME = 'DELETE'
   def clean ( self , value ) :
                  pass
 self . attachments . append ( filename )
   filesize_number_format = lambda value : formats . number_format ( round ( value , 1 ) , 1 )
                         self . handle_file_complete ( old_field_name , counters )
              raise CommandError ( "This script should be run from the Django Git "  "checkout or your project or app tree, or with "  "the settings module specified." )
 values = '' . join ( quant ) . split ( ',' )
 prefix_length = len ( template_dir ) + 1
 raise ValidationError ( self . error_messages [ 'max_length' ] , code = 'max_length' , params = params )
                  if field . serialize :
 if decimal_separator in value :
 del bits [ : 1 ]
              daemonize = True
           self . _iterator = iter ( value )
          if site in sites2 :
 run_syncdb = True
  if self . _read_started and not hasattr ( self , '_body' ) :
          return ''
 try :
  var_name = bits [ 5 ]
   message_context = None
 return sys . modules [ name ]
  try :
   if self . verbosity > 1 :
  shown . add ( plan_node )
     def get_storage_class ( import_path = None ) :
          if not hasattr ( self , '_post' ) :
  return klass
                  new_name = new_name [ : - 3 ]
                   open_tags . insert ( 0 , tagname )
   return model_list
   def set_cookie ( self , key , value = '' , max_age = None , expires = None , path = '/' ,  domain = None , secure = False , httponly = False ) :
   def encode ( self , i ) :
              title = list_ [ i ]
  else :
  db_module = 'django.db'
   def popitem ( self ) :
   except OSError as e :
  sys . modules [ __name__ + ".moves.urllib_robotparser" ] = sys . modules [ __name__ + ".moves.urllib.robotparser" ] = Module_six_moves_urllib_robotparser ( __name__ + ".moves.urllib.robotparser" )
 return self . form . errors . get ( self . name , self . form . error_class ( ) )
   url = url . replace ( '\\' , '/' )
              pass
  from lib2to3 import fixer_base
 return IncludeNode ( parser . compile_filter ( bits [ 1 ] ) , extra_context = namemap ,  isolated_context = isolated_context )
      if current_version >= ( 3 , 4 ) :
                  if settings . USE_L10N :
   USE_INOTIFY = False
 return Page ( * args , ** kwargs )
   class Loader ( BaseLoader ) :
      renderer = RadioFieldRenderer
  if hasattr ( mw_instance , 'process_exception' ) :
   return data
  else :
 if hasattr ( os , 'utime' ) :
   def compile_filter_error ( self , token , e ) :
 pass
  try :
 self . func = func
 i = 0
 return True
   _js_escapes . update ( ( ord ( '%c' % z ) , '\\u%04X' % z ) for z in range ( 32 ) )
 self . add_fields ( form , i )
          parser . __loaded_blocks = [ block_name ]
  self . feed = {  'title' : to_unicode ( title ) ,  'link' : iri_to_uri ( link ) ,  'description' : to_unicode ( description ) ,  'language' : to_unicode ( language ) ,  'author_email' : to_unicode ( author_email ) ,  'author_name' : to_unicode ( author_name ) ,  'author_link' : iri_to_uri ( author_link ) ,  'subtitle' : to_unicode ( subtitle ) ,  'categories' : categories or ( ) ,  'feed_url' : iri_to_uri ( feed_url ) ,  'feed_copyright' : to_unicode ( feed_copyright ) ,  'id' : feed_guid or link ,  'ttl' : ttl ,  }
 def yesno ( value , arg = None ) :
  if options [ "host" ] and options [ "port" ] and not options [ "socket" ] :
          value = self . to_python ( value ) . strip ( )
  def __init__ ( self , * args , ** kwargs ) :
 import os
   class DebugLexer ( Lexer ) :
 LOCK_NB = fcntl . LOCK_NB
              return smart_text ( auto_id ) % self . html_name
          _urlconfs . value = urlconf_name
  return f
      class DebugVariableNode ( VariableNode ) :
  def __init__ ( self , content_type = None , status = None , reason = None ) :
   def handle ( self , * labels , ** options ) :
          return formats . time_format ( value , arg )
 from django . utils . six . moves import xrange
              if cleaned_data is not None :
          return date_format ( value , 'DATETIME_FORMAT' , use_l10n = use_l10n )
                          objects = model . _default_manager
  len_values = len ( values )
 u = dig2 . digest ( )
       except self . LibraryValueNotFoundException :
  def __iter__ ( self ) :
 try :
  from django . utils . encoding import smart_text
   return result , result_args
  from binascii import Error as BinasciiError
                  w = self . choice_input_class ( self . name , self . value ,  self . attrs . copy ( ) , choice , i )
  except UnicodeEncodeError :
 key = args
 from django . core . management . utils import ( handle_extensions , find_command ,  popen_wrapper )
 obj_dict = super ( SimpleTemplateResponse , self ) . __getstate__ ( )
 media = Media ( )
 token = parser . next_token ( )
          if size is None :
              for bit in self . lookups :
          query = query . lists ( )
   return new_name , field_params , field_notes
                          if message_context :
  else :
     class TimestampSigner ( Signer ) :
          return self . content
 seen_models = connection . introspection . installed_models ( tables )
 if not answer :
 from django . utils . translation import templatize
              return result
   literal_match = self . literal_regex . match ( domain_part )
 statement = [ ]
 if words and length <= 0 :
              confirm = 'yes'
 from django . core . management . color import no_style
     class WSGIRequest ( http . HttpRequest ) :
 if not self . is_bound :
                  name , ext = os . path . splitext ( name )
               name = os . path . join ( dir_name , "%s_%s%s" % ( file_root , next ( count ) , file_ext ) )
   except IOError :
              if hasattr ( handler , 'file' ) :
                  return - 1
              k , v = x , True
    plan = [ ( executor . loader . graph . nodes [ targets [ 0 ] ] , options [ 'backwards' ] ) ]
  value = '%s %s' % tuple ( value )
   _urlconfs = local ( )
 self . default_kwargs = default_kwargs or { }
              self . msgmerge_options = self . msgmerge_options [ : ] + [ '--no-location' ]
  else :
 return self . field . widget . value_from_datadict ( self . form . data , self . form . files , self . html_name )
 if self . parent_instance is not None :
       else :
      try :
 del self [ 'content-type' ]
   def _set_post ( self , post ) :
 if len ( bits ) != 2 :
 for f in post_sql_fields :
   def _send ( self , email_message ) :
 def __new__ ( mcs , name , bases , attrs ) :
 RFC1123_DATE = re . compile ( r'^\w{3}, %s %s %s %s GMT$' % ( __D , __M , __Y , __T ) )
               return self . tag_function
                  key += tuple ( type ( v ) for k , v in sorted_items )
  self . _callback_strs . update ( pattern . _callback_strs )
                      html_class_attr = ' class="%s"' % css_classes
   elif self . META . get ( 'CONTENT_TYPE' , '' ) . startswith ( 'application/x-www-form-urlencoded' ) :
  except KeyError :
 from django . core . exceptions import ImproperlyConfigured , ViewDoesNotExist
          if value is None :
              return None
          return ip_address_validator_map [ protocol . lower ( ) ]
  if pks :
              if self . to_field_name :
 if settings . DEBUG :
    def get_current_timezone_name ( ) :
              handler . addQuickElement ( "rights" , item [ 'item_copyright' ] )
  mail . send ( fail_silently = fail_silently )
  import base64
 self . _app_dict = { }
   import random
          return iter ( self . dict . keys ( ) )
 import binascii
 if result :
          self . file = file_name
                              out . write ( blankout ( part , 'P' ) )
                      dirs . remove ( dirname )
  while start < end :
  if item [ 'unique_id' ] is not None :
  except ValueError :
                    if e . args [ 0 ] . startswith ( "Error -5" ) :
  else :
  from django . conf import settings
 models = app_config . get_models ( include_auto_created = True )
          super ( MovedModule , self ) . __init__ ( name )
                  fixture_dirs = [ os . path . join ( dir_ , os . path . dirname ( fixture_name ) )  for dir_ in fixture_dirs ]
 value = field . clean ( value , initial )
 def ljust ( value , arg ) :
  return wrapper
 while ( i < num_existing ) and ( existing [ i ] [ : pflen ] == prefixed ) :
                   result . append ( "." )
                  format = color_settings . get ( role , { } )
  if self . verbosity >= 2 :
  else :
              return lang_code
   def new_file ( self , file_name , * args , ** kwargs ) :
    DNS_NAME = CachedDnsName ( )
              for match in regexes [ state ] . finditer ( text , start ) :
 self . _upload_handlers = upload_handlers
 parser . add_argument ( '--fake' , action = 'store_true' , dest = 'fake' , default = False ,  help = 'Mark migrations as run without actually running them' )
  def add_arguments ( self , parser ) :
              lookup_view_s = "%s.%s" % ( m , n )
 missing_args_message = "Enter at least one %s." % label
 if not os . path . isfile ( init_path ) :
      initLock = Lock ( )
                          if not os . path . isdir ( migrations_directory ) :
                  contents = one_percent_re . sub ( '%%' , t . contents )
 from threading import local
  except OSError as e :
 return isinstance ( obj , _PROTECTED_TYPES )
    __class__ = property ( new_method_proxy ( operator . attrgetter ( "__class__" ) ) )
  except ImproperlyConfigured :
              fext = f + ext
   def g ( self ) :
 widget = NullBooleanSelect
                  match = True
    for p in path :
 iterlists = _iterlists
  return self . data . hour
   class BadHeaderError ( ValueError ) :
   elif intrans :
   return mark_safe ( '\n' . join ( output ) )
 import sys
  else :
              if text [ 0 ] in 'xX' :
    def get_language ( ) :
 itervalues = _itervalues
   def parse_args ( self , args = None , namespace = None ) :
      return getattr ( self , _assertRaisesRegex ) ( * args , ** kwargs )
                  raise ValidationError ( self . error_messages [ 'invalid_date' ] , code = 'invalid_date' )
    except UnicodeError as e :
          arg = ',' + arg
                                  with transaction . atomic ( using = connection . alias ) :
from __future__ import unicode_literals
                      shutil . rmtree ( path_to_remove ,  onerror = rmtree_errorhandler )
  __all__ = [  'UploadFileException' , 'StopUpload' , 'SkipFile' , 'FileUploadHandler' ,  'TemporaryFileUploadHandler' , 'MemoryFileUploadHandler' , 'load_handler' ,  'StopFutureHandlers'  ]
              if form . is_bound :
      options = FASTCGI_OPTIONS . copy ( )
   return mark_safe ( '\n' . join ( lines ) )
                      self . stdout . write ( self . style . NOTICE ( "  Your models have changes that are not yet reflected in a migration, and so won't be applied." ) )
 return id_
   def _assert_mutable ( self ) :
                  if isinstance ( field , FileField ) :
  else :
              sequence_sql = connection . ops . sequence_reset_sql ( no_style ( ) , self . models )
 if 'file_path' in kwargs :
    if hasattr ( request , 'session' ) :
 for filename in filelist :
   def import_string ( dotted_path ) :
 try :
              try :
 p = locale . find ( '_' )
   def _construct_form ( self , i , ** kwargs ) :
          cache_timeout = settings . CACHE_MIDDLEWARE_SECONDS
 if self . activated :
  from collections import OrderedDict
from __future__ import unicode_literals
  elif self . verbosity > 0 :
 self . dicts = dicts
   except ValueError :
 self . current_token = self . next_token ( )
                  dirs = [ basedir ]
 return bool ( ret )
 first = second = None
   @ cached_property
  def __init__ ( self , tagtype ) :
 if self . cc :
                          raise
   def widget_attrs ( self , widget ) :
                              message_context = message_context . strip ( "'" )
   raise StopIteration
   T = [ F ( x ) for x in range ( 1 , l ) ]
                  return six . text_type ( self ) % rhs
 last [ NEXT ] = root [ PREV ] = link
  def __init__ ( self , request = None ) :
          return [ '' ] , [ [ ] ]
        def __str__ ( self ) :
     @ property
 self . _lock = _locks . setdefault ( name , RWLock ( ) )
 oldroot [ KEY ] = key
          daemon_kwargs [ 'umask' ] = int ( options [ 'umask' ] , 8 )
              self . attrs = { }
          parser . add_argument ( '--locale' , '-l' , dest = 'locale' , action = 'append' , default = [ ] ,  help = 'Locale(s) to process (e.g. de_AT). Default is to process all. '  'Can be used multiple times.' )
 script_name = script_url [ : - len ( path_info ) ]
   @ property
     class Lexer ( object ) :
 from django . utils import six
                      curs . execute ( statement )
              r = o . isoformat ( )
 has_bz2 = True
              sites . append ( site )
              final_output . append ( '-- The following references should be added but depend on non-existent tables:' )
          del self . tokens [ 0 ]
  self . _regex = regex
 tmpdir = tempfile . mkdtemp ( )
   self . check_test = boolean_check if check_test is None else check_test
          return mod . register
 i += 1
 for attr in _moved_attributes :
 self . ignore = options . pop ( 'ignorenonexistent' , False )
              for name , value in props . items ( ) :
 break
  tried . append ( [ pattern ] )
  if upto != len ( token ) :
   save . alters_data = True
   def __str__ ( self ) :
 self . _app_dict [ language_code ] = apps
   def extract ( self , to_path ) :
                   filename = traceback . extract_tb ( tb ) [ - 1 ] [ 0 ]
  if getattr ( func , 'is_safe' , False ) and isinstance ( obj , SafeData ) :
  level += 1
  logger = logging . getLogger ( 'django.request' )
   options = sorted ( ( k , v ) for k , v in options if k . startswith ( curr ) )
 paths = [ force_text ( p ) for p in paths ]
       BM_compatible = True
    @ register . tag
              return
          unifunc = results [ "unifunc" ]
   def __getitem__ ( self , index ) :
   if self . to_field :
          try :
 if not self . _is_rendered :
 from django . core . mail . backends . base import BaseEmailBackend
 if self . field . label is None :
     def getlist ( self , key ) :
 self . _pk_field = pk = self . model . _meta . pk
  except KeyError :
 errors . extend ( _check_middleware_classes ( ** kwargs ) )
                  return self . nodelist_empty . render ( context )
 if self . _count is None :
                  self . _exception_middleware . insert ( 0 , mw_instance . process_exception )
                      deps = [ apps . get_model ( dep ) for dep in deps ]
                          try :
 def path ( self ) :
 models = set ( )
 if len ( password ) > inner . block_size :
      def __init__ ( self , options = None ) :
     @ python_2_unicode_compatible
  return cls
  except UnicodeDecodeError :
          self . value = value
 new_permissions = stat . S_IMODE ( st . st_mode ) | stat . S_IWUSR
 from django . utils . datastructures import MultiValueDict
  quant = quant [ : - 1 ]
 self . name = name
  elif common_prefix is None :
   def iteritems ( d , ** kw ) :
   CONTEXT_SEPARATOR = "\x04"
 result . _choices = copy . deepcopy ( self . _choices , memo )
              st = os . stat ( filename )
     class CharField ( Field ) :
   else :
 if self . is_bound :
 args [ 0 ] = force_text ( args [ 0 ] )
      return _trans . to_locale ( language )
                          continue
 rest = value
           template = get_template_from_string ( template , origin , template_name )
              if kwargs :
                  break
          ext_list . extend ( ext . replace ( ' ' , '' ) . split ( ',' ) )
          filepath = self . filepath . resolve ( context )
              return
  errors . append (  Error (  "%s was connected to the '%s' signal "  "with a lazy reference to the '%s' sender, "  "which has not been installed." % (  description , name , '.' . join ( reference )  ) ,  obj = receiver . __module__ ,  hint = None ,  id = 'signals.E001'  )  )
   def create_var ( self , value ) :
                      temp_lib . tags [ name ] = lib . tags [ name ]
   if options . get ( "list" , False ) :
          return fastcgi_help ( )
    UNKNOWN_SOURCE = '<unknown source>'
          parent = ( form . Meta , object )
              try :
   elif len ( fks_to_parent ) == 0 :
                  form . _meta . fields = list ( form . _meta . fields )
          self . changed_objects = [ ]
  __import__ ( name )
from __future__ import unicode_literals
              res = to_digits [ 0 ]
  table_output . append ( " " . join ( field_output ) )
      return lazy ( func , * resultclasses ) ( * args , ** kwargs )
   def open ( self ) :
   block = type ( self ) ( block . name , block . nodelist )
                              data = base64 . b64decode ( raw_data )
 return field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
               klass = app_name
  bits = token . split_contents ( ) [ 1 : ]
      content_type = META . get ( 'HTTP_CONTENT_TYPE' , META . get ( 'CONTENT_TYPE' , '' ) )
    else :
  if exclude and f . name in exclude :
 basedirs = [ os . path . abspath ( basedir ) for basedir in basedirs  if os . path . isdir ( basedir ) ]
   attachment = SafeMIMEMessage ( content , subtype )
 with self . _lock . writer ( ) :
  def __init__ ( self ) :
 isatty = property ( lambda self : self . file . isatty )
     if self . asvar :
 result . append ( ch )
                                       msg = "Could not decode base64 data: %r" % e
 if protocol != 'both' and unpack_ipv4 :
  try :
  from itertools import chain
 import sys
              model_list = app_config . get_models ( )
 defaults [ 'files' ] = self . files
  for key_value in related :
              pot_path = os . path . join ( path , '%s.pot' % str ( self . domain ) )
              return
  else :
 nodes = [ ]
   finally :
 if m is None :
  except StandardError as e :
          return ''
              out += '</%s>' % tag
 parser . add_argument ( 'directory' , nargs = '?' , help = 'Optional destination directory' )
          if '__str__' not in klass . __dict__ :
  output . append ( widget . render ( name + '_%s' % i , widget_value , final_attrs ) )
   return out
          return self
                            walk_to_end ( ch , pattern_iter )
      help = 'Deprecated. Use "check" command instead. ' + CheckCommand . help
 try :
          return ( self . field . prepare_value ( obj ) , self . field . label_from_instance ( obj ) )
 path = parts [ 1 : ]
    try :
 from django . http . request import ( HttpRequest , QueryDict ,  RawPostDataException , UnreadablePostError , build_request_repr )
  elif args [ 1 ] [ 0 ] == '1' :
          return super ( Info , self ) . __init__ ( INFO , * args , ** kwargs )
   if not lib :
    except IndexError :
          for first_select in _parse_date_fmt ( ) :
  except OSError as e :
  if hasattr ( os , 'chmod' ) :
 msg = SafeMIMEMultipart ( _subtype = self . mixed_subtype , encoding = encoding )
 self . can_write . release ( )
  for path in format_module_path :
              translation . activate ( settings . LANGUAGE_CODE )
   update_wrapper ( _dec , decorator , assigned = available_attrs ( decorator ) )
          while b'\n' not in self . buffer and ( size is None or len ( self . buffer ) < size ) :
              raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
  return node
              self . stdout . write ( self . style . NOTICE ( "\nYou have unapplied migrations; your app may not work properly until they are applied." ) )
    @ register . tag
              return ''
 if subcommand_cls . use_argparse :
                  qs = pk . rel . to . _default_manager . get_queryset ( )
     def __deepcopy__ ( self , memo ) :
 from django . utils . encoding import force_bytes
  load_template_source . is_usable = True
   no_settings_commands = [  'help' , 'version' , '--help' , '--version' , '-h' ,  'compilemessages' , 'makemessages' ,  'startapp' , 'startproject' ,  ]
 from io import BytesIO , StringIO , UnsupportedOperation
  models . signals . post_migrate . send (  sender = app_config ,  app_config = app_config ,  verbosity = verbosity ,  interactive = interactive ,  using = db )
  except ImportError :
   if match :
                               break
 self . connection = connection
          t = s . split ( '=' , 1 )
              frame = sys . _getframe ( 1 )
  except ( KeyError , IndexError , AttributeError ) :
   def as_p ( self ) :
          return ugettext ( "Please correct the duplicate data for %(field_name)s "  "which must be unique for the %(lookup)s in %(date_field)s." ) % {  'field_name' : date_check [ 2 ] ,  'date_field' : date_check [ 3 ] ,  'lookup' : six . text_type ( date_check [ 1 ] ) ,  }
          raise ValueError ( "'package' not set to a string" )
                  pass
    if callable ( current ) :
 return '%02d' % self . data . month
 try :
              return list ( self . iterkeys ( ) )
                      self . setlistdefault ( key ) . extend ( value_list )
 return form . save ( commit = commit )
  else :
              os . utime ( path , None )
   from django . apps import apps
              safe = force_bytes ( safe , self . encoding )
       class LazyStream ( six . Iterator ) :
  from django . core . management . commands . check import Command as CheckCommand
              os . chmod ( dst , mode )
  elif field in self . fields :
                  field_params [ 'max_digits' ] = row [ 4 ]
  prefix_norm , prefix_args = normalize ( urlquote ( _prefix ) ) [ 0 ]
 for child in node . childNodes :
     ADDRESS_HEADERS = set ( [  'from' ,  'sender' ,  'reply-to' ,  'to' ,  'cc' ,  'bcc' ,  'resent-from' ,  'resent-sender' ,  'resent-to' ,  'resent-cc' ,  'resent-bcc' ,  ] )
import django
 if content_disposition :
          super ( Command , self ) . add_arguments ( parser )
     class SafeMIMEText ( MIMEMixin , MIMEText ) :
 t = super ( SafeText , self ) . __add__ ( rhs )
 unhandled_params = list ( params )
          if value != self . empty_value :
                   row_data = ( form . cleaned_data [ field ]  for field in unique_check if field in form . cleaned_data )
                  related = getattr ( obj , field . name )
  except Exception as e :
 if tags and any ( not checks . tag_exists ( tag ) for tag in tags ) :
                   self . literal = float ( var )
  self . compression_formats = {  None : ( open , 'rb' ) ,  'gz' : ( gzip . GzipFile , 'rb' ) ,  'zip' : ( SingleZipReader , 'r' ) ,  }
 os . close ( fd )
    if '.' not in var and 'e' not in var . lower ( ) :
  self . base_url = base_url
 if self . _fname is None :
                      outfile . write ( data )
 request_class = WSGIRequest
 from django . core . management . sql import sql_all
  self . error_dict [ field ] = messages . error_list
   form_class_attrs = {  'Meta' : Meta ,  'formfield_callback' : formfield_callback  }
   def to_python ( self , value ) :
              raise TemplateSyntaxError ( "Searching for value. Expected another "  "value but found end of string: %s" %  subject )
                      result . extend ( [ result [ - 1 ] ] * ( count - 1 ) )
 from io import BytesIO
 class __proxy__ ( Promise ) :
              locks . lock ( fd , locks . LOCK_EX )
 excluded_models = set ( )
    def quote_etag ( etag ) :
                return False
 if input_formats is not None :
  else :
  except KeyError :
 from django . utils . text import normalize_newlines
 if self . method != 'POST' :
    class Serializer ( object ) :
   def modified_time ( self , name ) :
      class WindowsError ( Exception ) :
              return escape ( output )
   return decorating_function
 while self . tokens :
    else :
                     self . _count = len ( self . object_list )
          return [  Warning (  "Some project unittests may not execute as expected." ,  hint = ( "Django 1.6 introduced a new default test runner. It looks like "  "this project was generated using Django 1.5 or earlier. You should "  "ensure your tests are all running & behaving as expected. See "  "https://docs.djangoproject.com/en/dev/releases/1.6/#new-test-runner "  "for more information." ) ,  obj = None ,  id = '1_6.W001' ,  )  ]
 for x in range ( level , 1 , - 1 ) :
              if not form . has_changed ( ) :
          if name is None and compile_function is None :
   class Serializer ( PythonSerializer ) :
 get_language_bidi = lambda : settings . LANGUAGE_CODE in settings . LANGUAGES_BIDI
    class HttpResponseRedirect ( HttpResponseRedirectBase ) :
                  template_dir = template_dir . decode ( fs_encoding )
              if not isinstance ( initial , list ) :
                      initial_prefixed_name = self . add_initial_prefix ( name )
              memo = { }
 super ( EmailMultiAlternatives , self ) . __init__ ( subject , body , from_email , to , bcc , connection , attachments , headers , cc )
              obj = self . _new_instance ( self . children , self . connector ,  self . negated )
          super ( MovedAttribute , self ) . __init__ ( name )
    def npgettext ( context , singular , plural , number ) :
              form = ManagementForm ( self . data , auto_id = self . auto_id , prefix = self . prefix )
                          out . write ( ' %s ' % p . split ( ':' , 1 ) [ 1 ] )
  if options . get ( 'no_location' ) :
  except ValueError :
  def handle ( self , ** options ) :
 if token == "not" and i + 1 < l and tokens [ i + 1 ] == "in" :
 del kwargs [ 'warning' ]
    proxy = lazy ( lambda ** kwargs : NumberAwareString ( ) , NumberAwareString ) ( ** kwargs )
   if six . PY3 :
          if part in PALETTES :
     class FileInput ( Input ) :
  path = path_override if path_override is not None else request . path
  try :
 def callback ( self ) :
   if errors :
 exc_value = exc_type (  "Unsupported value: %r. You should install pytz." % dt )
   def handle ( self , ** options ) :
          raise ValueError ( 'Not a valid Python identifier: %r' % s )
  for template_dir in template_dirs :
 return super ( TimestampSigner , self ) . sign ( value )
 return obj
 bmatch = block_re . match ( t . contents )
    class TemplateEncodingError ( Exception ) :
 block_re = re . compile ( r"""^\s*blocktrans(\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?')))?(?:\s+|$)""" )
          stream_or_string = stream_or_string . decode ( 'utf-8' )
  field_desc += ')'
   def tag ( self ) :
 from django . core . exceptions import DisallowedHost , ImproperlyConfigured
   def urlencode ( self , safe = None ) :
  return super ( BaseModelFormSet , self ) . initial_form_count ( )
  excluded_apps . add ( app_config )
 def linebreaks_filter ( value , autoescape = None ) :
 self . initial = initial
  def is_ignored ( path , ignore_patterns ) :
   def make_key ( self , key , version = None ) :
         def total_ordering ( cls ) :
  except ( IndexError ,  ValueError ,  KeyError ,  TypeError ) :
                  if character != '.' :
          return s . get_data ( )
   return val , encoded
 if len ( tablenames ) :
   class DjangoRuntimeWarning ( RuntimeWarning ) :
  if fk . unique :
  super ( BaseInlineFormSet , self ) . __init__ ( data , files , prefix = prefix ,  queryset = qs , ** kwargs )
          wsgi_opts [ 'bindAddress' ] = None
        from django . utils . encoding import force_unicode
              raise ValueError ( "Zip-compressed fixtures must contain one file." )
 if count != 0 :
    def push ( self , name , block ) :
  for field in unique_check :
   @ property
  try :
  TEMPLATE_FRAGMENT_KEY_TEMPLATE = 'template.cache.%s.%s'
 @ stringfilter
              if os . path . isdir ( os . path . join ( path , entry ) ) :
          parser . add_argument ( '--plain' , action = 'store_true' , dest = 'plain' ,  help = 'Tells Django to use plain Python, not IPython or bpython.' )
 from django . utils . six . moves import socketserver
    class ContextDict ( dict ) :
 from django . utils . encoding import force_str , force_text , DEFAULT_LOCALE_ENCODING
      def get_urlconf ( default = None ) :
 comment_notes . extend ( notes )
              result = handler . handle_raw_input ( self . _input_data ,  self . _meta ,  self . _content_length ,  self . _boundary ,  encoding )
  count = property ( _get_count )
              return [ ]
  template_with_clear = '%(clear)s <label for="%(clear_checkbox_id)s">%(clear_checkbox_label)s</label>'
                      self . stdout . write ( errors )
       sites = [ ]
 for p in plist :
 TOKEN_MAPPING = {  TOKEN_TEXT : 'Text' ,  TOKEN_VAR : 'Var' ,  TOKEN_BLOCK : 'Block' ,  TOKEN_COMMENT : 'Comment' ,  }
 from django . utils . six . moves . urllib . parse import urlparse
 from django . core import serializers
   connection_params = { 'local_hostname' : DNS_NAME . get_fqdn ( ) }
      help = 'Runs a development server with data from the given fixture(s).'
  def to_python ( self , data ) :
              number = str ( number ) [ 1 : ]
                   result . append ( ch )
  result = [ '' ]
                  output = fp . read ( )
     def _add_doc ( func , doc ) :
  elif isinstance ( o , datetime . date ) :
     class datetime ( real_datetime ) :
 if not self . is_valid ( ) :
                      netloc = netloc . encode ( 'idna' ) . decode ( 'ascii' )
          if self . _wrapped is empty :
    class TimeInput ( DateTimeBaseInput ) :
              params = [ source [ 1 ] ]
    def activate ( language ) :
    def mail_admins ( subject , message , fail_silently = False , connection = None ,  html_message = None ) :
  except OSError :
 self . empty_value = kwargs . pop ( 'empty_value' , '' )
  return format_html ( '<label{0}>{1} {2}</label>' , label_for , self . tag ( ) , self . choice_label )
          self . _read_started = True
 substitutions [ 'clear_checkbox_name' ] = conditional_escape ( checkbox_name )
              source , display_name = loader ( name , dirs )
              value = to_current_timezone ( value )
  except Exception :
          import flup
    class JsonResponse ( HttpResponse ) :
  from django . conf import settings
              top_dir = os . path . abspath ( path . expanduser ( target ) )
   if compare_to != state_frame [ self ] :
              self . input_formats = input_formats
 return self . set_cookie ( key , value , ** kwargs )
              rv = level
  for cat in self . feed [ 'categories' ] :
  else :
 if re . search ( '^%s%s' % ( prefix_norm , pattern ) , candidate_pat % candidate_subs , re . UNICODE ) :
   class Loader ( BaseLoader ) :
   return response
 __dispatch = None
 return [ value . date ( ) , value . time ( ) . replace ( microsecond = 0 ) ]
              if self . min_value is not None :
              return hash ( self . __cast ( ) )
  nm , addr = addr
       def __init__ ( self , * args , ** kwargs ) :
                  raise CommandError ( "You must supply at least one app label when using --empty." )
 from django . utils import six
 memoryview = memoryview
 for f in sorted ( opts . concrete_fields + sortable_virtual_fields + opts . many_to_many ) :
    imported_objects = { }
 if match :
          raise TemplateSyntaxError ( "'%s' takes one argument" % bits [ 0 ] )
 self . stdout . write ( self . style . NOTICE ( "  Run 'manage.py makemigrations' to make new migrations, and then re-run 'manage.py migrate' to apply them." ) )
              self . _setup ( )
 while i < list_length :
  to_py = super ( ModelMultipleChoiceField , self ) . to_python
  base_path = os . path . splitext ( po_path ) [ 0 ]
 try :
          return False
                  data [ field . name ] = field . to_python ( field_value )
 if not hasattr ( package , 'rindex' ) :
   os . chmod ( path , stat . S_IWRITE )
 def slice_filter ( value , arg ) :
   def add_blocks ( self , blocks ) :
               warnings . warn ( "No fixture named '%s' found." % fixture_name )
 for opt in self . option_list :
          return get_git_changeset . cache
 for w in self . widgets :
                                  self . stdout . write ( "    No custom SQL for %s.%s model\n" % ( app_name , model . _meta . object_name ) )
              if action == "apply_start" :
                  self . active_writers += 1
               attrs . update ( { 'maxlength' : str ( self . max_length ) } )
                      answer = six . moves . input ( "Do you wish to proceed? [yN] " )
                       try :
   for cat in item [ 'categories' ] :
              return self . _callback
 handler . startDocument ( )
              self . _post , self . _files = QueryDict ( '' , encoding = self . _encoding ) , MultiValueDict ( )
 if option_value in selected_choices :
                  self . _num_pages = 0
  httpd = httpd_cls ( server_address , WSGIRequestHandler , ipv6 = ipv6 )
 if row_data and None not in row_data :
 qn = connection . ops . quote_name
           if hasattr ( value , '__iter__' ) and not isinstance ( value , ( bytes , six . string_types ) ) :
                      lookup_str = callback . __module__ + "." + callback . __name__
                      for ( k , v ) in type_ . __dict__ . items ( ) :
 if field_type not in ( 'TextField(' , 'CharField(' ) :
          return self
          new_class = super ( RenameMethodsBase , cls ) . __new__ ( cls , name , bases , attrs )
                if e . errno != errno . ENOENT :
  sio = BytesIO ( self . buffer )
 re_tag = re . compile ( r'<(/)?([^ ]+?)(?:(\s*/)| .*?)?>' , re . S )
 basetype , subtype = mimetype . split ( '/' , 1 )
   try :
import os
  elif f . unique :
              raise SystemRestart
   def receive_data_chunk ( self , raw_data , start ) :
          raise Exception ( "This %s instance cannot tell its position" % self . __class__ . __name__ )
                  field_value = value [ i ]
                          return self . __dispatch [ t ] [ funcname ] ( res , * args , ** kw )
   return fixture_files
      if sys . version_info [ : 2 ] >= ( 3 , 4 ) :
              final_attrs [ 'checked' ] = 'checked'
  except AmbiguityError :
              self . settings_exception = exc
  else :
      def __init__ ( self , class_name , old_method_name , new_method_name , deprecation_warning ) :
          self . file = file
 stderr . write ( '%s: %s' % ( e . __class__ . __name__ , e ) )
   def resolve_error_handler ( self , view_type ) :
 self . max_width = max_width
              return ''
          key = self . make_key ( key , version = version )
      NamedTemporaryFile = tempfile . NamedTemporaryFile
 self . html_name = form . add_prefix ( name )
   if in_tag and not self . verbatim :
 from django . forms . forms import DeclarativeFieldsMetaclass , BaseForm
  num_loopvars = len ( self . loopvars )
  except re . error as e :
 try :
   def rfc2822_date ( date ) :
              pass
   if formfield :
          if not filename :
 if deps :
 def capfirst ( value ) :
            obj = form . save ( commit = False )
 import os
 decorated = Node ( syms . decorated , [ decorator , klass ] , prefix = node . prefix )
 if not os . path . exists ( top_dir ) :
 from django . utils . translation import get_language , to_locale , check_for_language
    assert token . contents == 'endif'
              self . _delete ( key )
  return int ( values [ 0 ] ) , ch
          from django . conf import settings
   _encoding = None
  import base64
          try :
 from django . utils . encoding import force_text , python_2_unicode_compatible
      return force_text ( ngettext ( singular , plural , number ) )
from __future__ import unicode_literals
  from __future__ import unicode_literals
 text_type = unicode
   def unparsed_entity_decl ( self , name , base , sysid , pubid , notation_name ) :
    if commit :
 return obj
  output_transaction = True
 if auto_id and '%s' in smart_text ( auto_id ) :
          pathext = os . environ . get ( 'PATHEXT' , '.COM;.EXE;.BAT;.CMD' ) . split ( os . pathsep )
  old_style_list = True
                      stream . close ( )
 from django . db import connections , router , transaction , models , DEFAULT_DB_ALIAS
      if args is None :
 return getattr ( module , self . attr )
   def __len__ ( self ) :
    def dst ( self , dt ) :
  else :
              return reduce ( operator . add , dict ( self ) . values ( ) )
   msgs = msgs . replace (  "#. #-#-#-#-#  %s.pot (PACKAGE VERSION)  #-#-#-#-#\n" % self . domain , "" )
    def start_serialization ( self ) :
 item . update ( kwargs )
              self . DSTOFFSET = self . STDOFFSET
 handler . addQuickElement ( "name" , self . feed [ 'author_name' ] )
 def do_block ( parser , token ) :
  self . deleted_objects . append ( obj )
                                      over_chunk = field_stream . read ( 4 - over_bytes )
 return AssignmentNode ( takes_context , args , kwargs , target_var )
          if value in self . empty_values :
  else :
          return path . encode ( fs_encoding )
      return _trans . deactivate_all ( )
              choice_value , choice_label = choice
  def __repr__ ( self ) :
                  raise
          path_info = get_bytes_from_wsgi ( environ , 'PATH_INFO' , '' )
      @ register . tag ( 'block' )
          attrs [ 'exclude' ] = exclude
   def __str__ ( self ) :
 for refto , refs in references . items ( ) :
    def render ( self , name , value , attrs = None ) :
                  args = match . groups ( )
  self . _regex_validator = validators . RegexValidator ( regex = regex )
          arg = ugettext ( 'yes,no,maybe' )
              if hasattr ( pattern , '_callback_str' ) :
              raise AttributeError ( "This method is available only on the view class." )
       handlers = config . get ( 'handlers' , EMPTY_DICT )
 return j
  middle = '<a href="%s"%s>%s</a>' % ( url , nofollow_attr , trimmed )
              if attr in obj_dict :
    outdict [ name ] = value , params
              raise ValueError (  "make_aware expects a naive datetime, got %s" % value )
 return fp . getvalue ( )
 if not hasattr ( c , '__call__' ) and hasattr ( types , 'ClassType' ) and type ( c ) != types . ClassType :
   def h ( self ) :
 class FileSystemStorage ( Storage ) :
  except ValueError :
       date = datetime_safe . new_datetime ( date )
   old_app_dir = os . path . normpath ( os . path . join ( app_dir , 'models/sql' ) )
 if not tag or current_len >= truncate_len :
 self . _errors = None
  else :
 self . xml . startElement ( "field" , {  "name" : field . name ,  "type" : field . get_internal_type ( )  } )
              name , value = main_value_pair . split ( ':' , 1 )
 from django . utils import six , lru_cache
 import django . core . checks . model_checks
              fp . write ( msgs )
  _func_closure = "func_closure"
 def trim_url ( x , limit = trim_url_limit ) :
    if hasattr ( middleware , 'process_response' ) :
  else :
 tag_exists = registry . tag_exists
          input_val = force_text ( text )
 return self
                      raise e
  try :
  except AttributeError :
 def __init__ ( self , attrs = None , choices = ( ) ) :
  except TemplateDoesNotExist :
          return smart_text ( self . name or '' )
 def __init__ ( self ) :
 for k in doomed :
              weight += 1
 internal_use_only = False
 from django . core . exceptions import ImproperlyConfigured
 from __future__ import unicode_literals
                      return self . compress ( [ ] )
              with open ( filepath , 'r' ) as fp :
              self . validate_unique ( )
 self . connection . ehlo ( )
  connection = connections [ database ]
      def handle_merge ( self , loader , conflicts ) :
          offset = date . tzinfo . utcoffset ( date )
          handler . addQuickElement ( "title" , self . feed [ 'title' ] )
              return list ( self . itervalues ( ) )
                          raise ValueError ( 'Unable to configure logger '  '%r: %s' % ( name , e ) )
                  sys . exit ( 0 )
              raise TypeError ( 'formfield_callback must be a function or callable' )
  elif isinstance ( self . obj , models . base . ModelBase ) :
       mime_type = 'application/atom+xml; charset=utf-8'
          return cls ( date . year , date . month , date . day ,  time . hour , time . minute , time . second ,  time . microsecond , time . tzinfo )
 parser . add_argument ( '--noinput' ,  action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' ) ,
   def dictConfig ( config ) :
          cursor = None
          self . parent_instance = parent_instance
          attrs [ 'labels' ] = labels
 hour = int ( m . group ( 'hour' ) )
      EscapeString = EscapeBytes
 VARIABLE_TAG_START = '{{'
 try :
                          app_config = apps . get_app_config ( app_label )
  if filename . endswith ( ".pyc" ) or filename . endswith ( ".pyo" ) :
 sys . stderr . write ( "Unknown command: %r\nType '%s help' for usage.\n" %  ( subcommand , self . prog_name ) )
              return self . handle_merge ( loader , conflicts )
   def gettext_noop ( message ) :
 consume_next = True
 if tag not in TemplateTagNode . mapping :
          return False
                      attrvalue = self . unescape ( attrvalue )
  try :
     shutdown_message = '\nServer stopped.\nNote that the test database, %r, has not been deleted. You can explore it on your own.' % db_name
          return super ( Error , self ) . __init__ ( ERROR , * args , ** kwargs )
  from __future__ import unicode_literals
 for line in content . split ( "\n" ) :
                   self . _files . appendlist (  force_text ( old_field_name , self . _encoding , errors = 'replace' ) ,  file_obj )
   def urlencode ( query , doseq = 0 ) :
          if app_config . models_module is None :
  if settings . USE_TZ :
  else :
              yield buffer_
 parts = parts [ : - 1 ]
 if value in self . empty_values :
 return output
          locale = options . get ( 'locale' )
          piece = '' . join ( source [ last : ] )
            if initial == 'False' :
  val1 = parser . compile_filter ( bits [ 1 ] )
  if filename not in _mtimes :
 def default ( self , o ) :
 rollback = self . _rollback
 self . _boundary = boundary
  return default
          if escaped :
 def media ( self ) :
 readline = property ( lambda self : self . file . readline )
    def _itervalues ( self ) :
                      raise
                  from django . core . servers . fastcgi import FASTCGI_OPTIONS
 urlresolvers . set_urlconf ( urlconf )
   def end_serialization ( self ) :
  import time
 HttpResponse . content . fset ( self , value )
  context_extras = { }
          if options [ "daemonize" ] . lower ( ) in ( 'true' , 'yes' , 't' ) :
              _html_parser . HTMLParser . __init__ ( self )
 bits = bits [ : - 2 ]
  def add_arguments ( self , parser ) :
   try :
          self . fed . append ( d )
 if not self . use_natural_primary_keys or not hasattr ( obj , 'natural_key' ) :
 for sub_stream in boundarystream :
 force_str = force_bytes
   def _delete ( self , fname ) :
 __str__ = new_method_proxy ( str )
 lib = get_library ( taglib )
  emit_post_migrate_signal ( set ( all_models ) , verbosity , interactive , database )
 request_repr = '\n{0}' . format ( filter . get_request_repr ( request ) )
from django . http import HttpResponse
  try :
              pos = self . file . tell ( )
  return normpath ( path )
              primary_keys = pks . split ( ',' )
        def reloader_thread ( ) :
              msg = ( "\nYou have installed Django's auth system, and "  "don't have any superusers defined.\nWould you like to create one "  "now? (yes/no): " )
                   self . _done = True
  old_path = path . join ( root , filename )
    def clean ( self ) :
 nodes = [ ]
          while True :
   qs = self . queryset . filter ( ** { '%s__in' % key : value } )
 return type ( form . __name__ + str ( 'FormSet' ) , ( formset , ) , attrs )
  from itertools import chain
   signals . request_finished . send ( sender = self . _handler_class )
          self . _wrapped = empty
 use_threading = connection . features . test_db_allows_multiple_connections
 title = ''
 self . literal = None
     def deactivate ( ) :
 simple_email_re = re . compile ( r'^\S+@\S+\.\S+$' )
 try :
 def do_with ( parser , token ) :
 if m is not None :
 self . POST = QueryDict ( mutable = True )
              formfield = f . formfield ( ** kwargs )
   with io . open ( potfile , 'w' , encoding = 'utf-8' ) as fp :
    class Http404 ( Exception ) :
 if len ( bits ) >= 2 and bits [ - 2 ] == 'as' :
              return int ( cc [ 'max-age' ] )
 if commit :
  else :
   class DjangoUnicodeDecodeError ( UnicodeDecodeError ) :
              context [ self . asvar ] = result
          mapping = { 'alpha' : 'a' , 'beta' : 'b' , 'rc' : 'c' }
          os . environ [ 'DJANGO_SETTINGS_MODULE' ] = options . settings
 if not self . recipients ( ) :
              attrs = { }
  else :
  from django . apps import apps
 c . load ( cookie )
          return self . scheme == 'https'
  return check
   if options [ "daemonize" ] is None :
 return other_dict
          return [ f [ : - 3 ] for f in os . listdir ( command_dir )  if not f . startswith ( '_' ) and f . endswith ( '.py' ) ]
   for entry in package_path :
                  domain_part = domain_part . encode ( 'idna' ) . decode ( 'ascii' )
          if limit is None or len ( x ) <= limit :
 if representative is None :
from __future__ import unicode_literals
               return False
 from django . utils import datastructures
              sys . exit ( 3 )
  import re
 self . bcc = list ( bcc )
  if ch == '?' :
  return ""
 notifier . read_events ( )
     not_installed_models = set ( pending_references . keys ( ) )
     elif subcommand == 'version' or self . argv [ 1 : ] == [ '--version' ] :
   self . _callback_strs = set ( )
   def as_ul ( self ) :
 if t is not None :
                  msgs = fp . read ( )
          if not value :
   return neg , res
              deactivate ( )
 from pprint import pformat
              raise ContentNotRenderedError ( 'The response content must be '  'rendered before it can be pickled.' )
 for migration_name in migration_names :
   def get_response ( self , request ) :
 cursor = connection . cursor ( )
      help = "Creates new migration(s) for apps."
 patch_response_headers ( response , cache_timeout = - 1 )
                        old_umask = os . umask ( 0 )
  result = datetime . datetime . combine ( * data_list )
                          nodelist . append ( node . render ( context ) )
 if 'pk' in d :
      return import_string ( import_path or settings . DEFAULT_FILE_STORAGE )
       def timestamp ( self ) :
 handle_default_options ( options )
  return self . _reverse_dict [ language_code ]
  else :
  return message
     class BooleanField ( Field ) :
   data = { }
              yield ( "" , self . field . empty_label )
     class HttpResponseGone ( HttpResponse ) :
 default_error_messages = {  'invalid' : _ ( 'Enter a valid URL.' ) ,  }
          if self . pos >= len ( self . tokens ) :
  token = Token ( TOKEN_BLOCK , block_content )
    class EscapeText ( six . text_type , EscapeData ) :
                      self . _errors [ field ] = self . error_class ( )
 try :
   def F ( self ) :
              response . streaming_content = [ ]
 from django . forms . formsets import BaseFormSet , formset_factory
       if format not in serializers . get_public_serializer_formats ( ) :
 return '%02d' % self . data . second
   return '\n' . join ( output )
  app_template_dirs = [ ]
  number = '' . join ( reversed ( digits ) )
                         consume_next = False
          choice = self . choices [ idx ]
   save . alters_data = True
   class Serializer ( base . Serializer ) :
          key = self . make_key ( key , version = version )
          return self
              return
  while factor >= 0 :
  else :
              from django . utils . translation import trans_null as trans
 from django . forms . fields import *
              self . _populate ( )
 parser . add_argument ( '--ipv6' , '-6' , action = 'store_true' , dest = 'use_ipv6' , default = False ,  help = 'Tells Django to use an IPv6 address.' )
  if subcommand == 'help' :
 return ( self . data . weekday ( ) + 1 ) % 7
  return [ m2m_convert ( c ) for c in node . getElementsByTagName ( "object" ) ]
  if mtime != _mtimes [ filename ] :
                   return self . filter_function ( name , ** flags )
 output = [ ]
              fmt = config . get ( 'format' , None )
 from django . utils import six
 if name :
  self . _upload_handlers = upload_handlers
    class CheckboxFieldRenderer ( ChoiceFieldRenderer ) :
   def resolve ( self , path ) :
  elif options [ 'app_label' ] :
 from django . core import urlresolvers
  return obj_pk
    class Paginator ( object ) :
   cwords = os . environ [ 'COMP_WORDS' ] . split ( ) [ 1 : ]
 self . pos += 1
      def __init__ ( self , content ) :
 for arg in argv [ 2 : ] :
          pass
               self . json_kwargs [ 'separators' ] = ( ',' , ': ' )
             self . _regex = regex
   return '\n' . join ( output )
   else :
              try :
   def handle ( self , * args , ** options ) :
              if settings . DEBUG :
      def normalize_col_name ( self , col_name , used_column_names , is_relation ) :
    def compile_function_error ( self , token , e ) :
              import code
              template_string = force_text ( template_string )
                            raise ValueError ( "Non-reversible reg-exp portion: '(?%s'" % ch )
                      if t in self . __dispatch :
 if param :
 import json
          try :
 import warnings
  import os
           return s
     def register_serializer ( format , serializer_module , serializers = None ) :
 from django . core . management . base import BaseCommand , CommandError
   activate = lambda x : None
              request = record . request
              self . attrs [ 'id' ] += "_%d" % self . index
   def ungettext ( singular , plural , number ) :
  def __init__ ( self , obj , m2m_data = None ) :
                    css_classes = bf . css_classes ( )
      def become_daemon ( our_home_dir = '.' , out_log = None , err_log = None , umask = 0o022 ) :
 if hasattr ( extra_classes , 'split' ) :
              return mark_safe ( output )
 import warnings
 self . config . configurator = self
  self . lookups = tuple ( var . split ( VARIABLE_ATTRIBUTE_SEPARATOR ) )
                  kwargs [ name ] = parser . compile_filter ( value )
   def _existing_object ( self , pk ) :
               MAXSIZE = int ( ( 1 << 31 ) - 1 )
                          if model not in app_list_value :
   def run ( self , ** options ) :
 name = name [ : 255 - len ( ext ) ] + ext
                   selected_choices . remove ( option_value )
 ignored = [ ]
 import io
          tzinfo = timezone . get_current_timezone ( ) if settings . USE_TZ else None
   def __copy__ ( self ) :
     class NowNode ( Node ) :
  return response
              if field . _has_changed ( field . to_python ( initial ) , data ) :
                  week_number = 52
              klass = self . resolve ( config . pop ( 'class' ) )
  Module_six_moves_urllib_error . _moved_attributes = _urllib_error_moved_attributes
 raise FieldError ( message )
   def __getitem__ ( self , key ) :
   class classonlymethod ( classmethod ) :
    try :
              for accessor_name , object_list in self . m2m_data . items ( ) :
  else :
     def import_by_path ( dotted_path , error_prefix = '' ) :
 yield "# into your database."
 if id_ :
                          pk_value = None
 return token
 if '_' in locale :
 end = s . find ( b';' )
              pass
          if params [ 0 ] == 'context' :
 template , origin = find_template ( template_name , dirs )
  else :
 if self . data . day in ( 11 , 12 , 13 ) :
  except ( TypeError , ValueError , UnicodeDecodeError ) :
          if attrs is not None :
              try :
                  output . append ( "### %s = %s" % ( key , user_settings [ key ] ) )
 def truncatewords ( value , arg ) :
   return tuple ( app_template_dirs )
          wsgi_opts [ 'bindAddress' ] = ( options [ "host" ] , int ( options [ "port" ] ) )
 self . _content_length = content_length
  new_context = context_class ( _dict , ** {  'autoescape' : context . autoescape ,  'current_app' : context . current_app ,  'use_l10n' : context . use_l10n ,  'use_tz' : context . use_tz ,  } )
              val = self . _cache . incr ( key , delta )
  super ( ContentFile , self ) . __init__ ( stream_class ( content ) , name = name )
   return instance
    class DjangoSafeDumper ( SafeDumper ) :
   url_fields = split_url ( urlunsplit ( url_fields ) )
  if instance is None :
   def close ( self ) :
 opts = instance . _meta
 num_args = 0
  except UnicodeError :
 return
  while RUN_RELOADER :
              value = to_current_timezone ( value )
          serializers [ format ] = module
 if 'charset' in content_params :
 from django . conf import settings
          if '.' in word or '@' in word or ':' in word :
  except ValueError :
          self . app_or_project = app_or_project
    def _check_test_runner ( app_configs = None , ** kwargs ) :
                  return func ( context , self . first , self . second )
          handler . addQuickElement ( "title" , self . feed [ 'title' ] )
     @ register . filter ( is_safe = True , needs_autoescape = True )
 pass
 if isinstance ( widget , type ) :
                  display_url = url
 notifier = pyinotify . Notifier ( wm , EventHandler ( ) )
  if app_config . models_module is None or app_config in excluded_apps :
 self . allow_empty_file = kwargs . pop ( 'allow_empty_file' , False )
         def fix_location_header ( request , response ) :
  if namespaces :
              other_dict = args [ 0 ]
 for opname , opfunc in convert [ root ] :
          return super ( Debug , self ) . __init__ ( DEBUG , * args , ** kwargs )
                  return True
                      e . message = self . error_messages [ e . code ]
     def get_language_from_request ( request , check_path = False ) :
from __future__ import absolute_import
 return bool ( self . children )
 if header == 'ACCEPT_LANGUAGE' and is_accept_language_redundant :
              if lookup_view in self . _callback_strs :
              subcommand = self . argv [ 1 ]
 if rel_to in known_models :
 def get_commands ( ) :
 if scheme not in self . schemes :
 if isinstance ( rhs , SafeText ) :
              weight += 2
    def get_full_path ( self ) :
  else :
    @ lru_cache . lru_cache ( maxsize = None )
 if PY3 :
 import threading
 from django . utils . deconstruct import deconstructible
 id_ = final_attrs . get ( 'id' , None )
          super ( UploadedFile , self ) . __init__ ( file , name )
              django_po = os . path . join ( django_dir , 'conf' , 'locale' , locale , 'LC_MESSAGES' , '%s.po' % domain )
              try :
          exp = Decimal ( 1 )
          try :
                      try :
 file . seek ( 0 )
 errors . extend ( _check_test_runner ( ** kwargs ) )
  if any ( len ( x ) < 4 for x in ip_str . split ( ':' ) ) :
                      self . close ( )
              self . xml . ignorableWhitespace ( '\n' + ' ' * self . options . get ( 'indent' , None ) * level )
              found = self . importer ( used )
   def css_classes ( self , extra_classes = None ) :
              list_ = super ( MultiValueDict , self ) . __getitem__ ( key )
              handler . addQuickElement ( "category" , cat )
  except ImportError :
 buffer_types = ( bytes , bytearray , memoryview )
          exp = self . _expire_info . get ( key , - 1 )
              raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
  except KeyError :
              raise TypeError ( "invalid keyword arguments to print()" )
  except KeyError :
   _format_cache [ cache_key ] = val
              handler . addQuickElement ( "author" , "%s (%s)" %  ( item [ 'author_email' ] , item [ 'author_name' ] ) )
   class UploadFileException ( Exception ) :
 with io . open ( pofile , 'w' , encoding = 'utf-8' ) as fp :
   if commit and hasattr ( form , 'save_m2m' ) :
 if hasattr ( self , 'clean_%s' % name ) :
 from functools import wraps
    def assignment_tag ( self , func = None , takes_context = None , name = None ) :
                  pass
          return not bool ( self . option_list )
 if app_config . label in loader . migrated_apps :
 if doublecolon_start == - 1 :
   def _isdst ( self , dt ) :
  except IndexError :
 ctx = hashlib . md5 ( )
 if option in options :
      @ register . filter ( is_safe = False )
                      domain = domain . encode ( 'idna' ) . decode ( 'ascii' )
    @ register . filter ( is_safe = True )
                           title = plan_node [ 1 ]
                  file = BytesIO ( data . read ( ) )
  except ( ValueError , TypeError , OverflowError ) :
                  data = self
          substitutions = {  'initial_text' : self . initial_text ,  'input_text' : self . input_text ,  'clear_template' : '' ,  'clear_checkbox_label' : self . clear_checkbox_label ,  }
  return dec
       def __init__ ( self , conditions_nodelists ) :
          for key in self . keyOrder :
    new_name , num_repl = re . subn ( r'\W' , '_' , new_name )
          daemon_kwargs [ 'err_log' ] = options [ 'errlog' ]
          __bytes__ = new_method_proxy ( bytes )
  except AttributeError :
    for hextet in ip_str . split ( ':' ) :
          self . content = content
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
 if self . interactive :
  else :
   check_programs ( 'xgettext' )
 re_camel_case = re . compile ( r'(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))' )
                          pop_context = True
    def assertCountEqual ( self , * args , ** kwargs ) :
                  os . makedirs ( self . _dir , 0o700 )
  plural_forms_re = re . compile ( r'^(?P<value>"Plural-Forms.+?\\n")\s*$' , re . MULTILINE | re . DOTALL )
  use_natural_foreign_keys = options . get ( 'use_natural_foreign_keys' ) or use_natural_keys
 import itertools
                  return ( copyreg . _reconstructor , ( self . __class__ , object , None ) , self . __getstate__ ( ) )
    while True :
                  raise ImproperlyConfigured (  "Creating a ModelForm without either the 'fields' attribute "  "or the 'exclude' attribute is prohibited; form %s "  "needs updating." % name  )
              raise ValidationError ( self . error_messages [ 'invalid_choice' ] , code = 'invalid_choice' )
     def strip_tags ( value ) :
     class WidthRatioNode ( Node ) :
  return _serializers [ format ] . Serializer
  form . _meta . fields . append ( self . fk . name )
  for attachment in self . attachments :
 attrs = { 'id' : id_ } if id_ else { }
                          setattr ( filter_func . _decorated_function , attr , value )
 self . app_name = app_name
 from django . utils . http import http_date
   result = new_result
 if self . takes_context :
 self . tags = { }
 from django . utils . html import conditional_escape , format_html
 if url . endswith ( '/' ) :
 if callable ( lookup_view ) :
 class EmailValidator ( object ) :
   from django . conf import settings
              handler . addQuickElement ( "subtitle" , self . feed [ 'subtitle' ] )
 def __init__ ( self , func , name = None ) :
          raise
                      raise CommandError ( '"%s" is not a valid IPv6 address.' % self . addr )
 self . merge ( translation )
  super ( SortedDict , self ) . __setitem__ ( key , value )
  from django . conf import settings
 self . __dict__ [ '_setupfunc' ] = func
 return avoid_wrapping ( value )
                      continue
 result . widget = copy . deepcopy ( self . widget , memo )
                  ip ( )
 def encoding ( self , val ) :
 _fields_ = [  ( 'Internal' , ULONG_PTR ) ,  ( 'InternalHigh' , ULONG_PTR ) ,  ( '_offset_union' , _OFFSET_UNION ) ,  ( 'hEvent' , HANDLE ) ]
 weight += 2
 import traceback
                      biggest_number = 1
  KB = 1 << 10
   def __get__ ( self , instance , type = None ) :
 from django . core . exceptions import ImproperlyConfigured
              self . stdout . write ( app_name , self . style . MIGRATE_LABEL )
  def inner ( check ) :
  from __future__ import unicode_literals
               if ( isinstance ( data , Node ) and not data . negated  and ( data . connector == conn_type or len ( data ) == 1 ) ) :
              return 12
 from django . forms import Form
  else :
   return cls
  def __init__ ( self , message = None , code = None , whitelist = None ) :
                      raise EnvironmentError (  "Cache directory '%s' does not exist "  "and could not be created'" % self . _dir )
     class ConvertingTuple ( tuple ) :
 escaped = False
   def handle_app_config ( self , app_config , ** options ) :
   __all__ = ( 'BaseForm' , 'Form' )
  MONTHS_ALT = {  1 : pgettext_lazy ( 'alt. month' , 'January' ) ,  2 : pgettext_lazy ( 'alt. month' , 'February' ) ,  3 : pgettext_lazy ( 'alt. month' , 'March' ) ,  4 : pgettext_lazy ( 'alt. month' , 'April' ) ,  5 : pgettext_lazy ( 'alt. month' , 'May' ) ,  6 : pgettext_lazy ( 'alt. month' , 'June' ) ,  7 : pgettext_lazy ( 'alt. month' , 'July' ) ,  8 : pgettext_lazy ( 'alt. month' , 'August' ) ,  9 : pgettext_lazy ( 'alt. month' , 'September' ) ,  10 : pgettext_lazy ( 'alt. month' , 'October' ) ,  11 : pgettext_lazy ( 'alt. month' , 'November' ) ,  12 : pgettext_lazy ( 'alt. month' , 'December' )  }
  except ValidationError :
                      result = middleware . process_view ( request , view_func , args , kwargs )
 self . negated = not self . negated
              self . code = code
          self . _stream = stream
 trimmed = 'trimmed' in t . split_contents ( )
   def check_for_migrations ( app_config , connection ) :
              raise AttributeError ( "'%s' object has no attribute 'ordered_forms'" % self . __class__ . __name__ )
 walk_to_end ( ch , pattern_iter )
  except ImportError :
  msgs , errors , status = popen_wrapper ( args )
   @ classmethod
          ending = self . ending if ending is None else ending
                  apps . get_app_config ( app_label )
                          out . write ( ' #\n' )
      from pkg_resources import resource_string
  def join_tokens ( tokens , trim = False ) :
 def upper ( value ) :
              pass
 if definition :
 self . current_token = self . next_token ( )
 if settings . USE_L10N and isinstance ( value , six . string_types ) :
 return getattr ( _prefixes , "value" , '/' )
 missing_args_message = "Enter at least one application label."
          try :
   response . _handler_class = self . __class__
  result = getattr ( _default , translation_function ) ( eol_message )
 result = self . configurator . convert ( value )
                  return result [ 0 ] , result [ 1 ]
              result . setLevel ( _checkLevel ( level ) )
 def __add__ ( self , rhs ) :
 try :
  cache_key = ( format_type , lang )
  name = [ ]
 parser . add_argument ( 'migration_name' , nargs = '?' ,  help = 'Database state will be brought to the state after that migration.' )
    __dir__ = new_method_proxy ( dir )
                          raise CommandError (  "Unable to find a locale path to store translations for file %s" % file_path )
 return msg_count
  try :
   else :
          from django . db . models . fields . related import RelatedObject
                  try :
  from django . utils . encoding import force_text , DEFAULT_LOCALE_ENCODING
   def list ( self , * args , ** kwargs ) :
              self . error_dict = { }
                      app = 'django'
  return False
   def value_from_datadict ( self , data , files , name ) :
   def _create_attachment ( self , filename , content , mimetype = None ) :
  MEDIA_TYPES = ( 'css' , 'js' )
          if self . is_localized :
                          for matches , pat , defaults in pattern . reverse_dict . getlist ( name ) :
       def make_msgid ( idstring = None ) :
    if self . load_initial_data :
                     return False
 fields . sort ( key = lambda x : x [ 1 ] . creation_counter )
   def _clean_fields ( self ) :
    def cache_clear ( ) :
  return initial != data
  def _text_chars ( self , length , truncate , text , truncate_len ) :
   def __deepcopy__ ( self , memo ) :
  return data . get ( name , None )
  except TypeError as te :
   def _get_context_stack_frame ( self , context ) :
                          new_context [ 'csrf_token' ] = csrf_token
              raise ValidationError ( self . error_messages [ 'contradiction' ] , code = 'contradiction' )
 import datetime
   @ encoding . setter
  return { 'csrf_token' : _get_val ( ) }
 representative = ESCAPE_MAPPINGS . get ( ch , ch )
                       migrations_directory = os . path . dirname ( writer . path )
 self . set_charset ( utf8_charset )
      directory = os . path . dirname ( full_path )
   def __next__ ( self ) :
          name = getattr ( func , "_decorated_function" , func ) . __name__
 hint = "\n\tHINT: %s" % self . hint if self . hint else ''
                  sys . exit ( exit_code )
  m2m_data = { }
 next = index + len ( self . _boundary )
                  trimmed = trim_url ( middle )
              MIMEText . __init__ ( self , text , subtype , charset )
 pass
     class IfNode ( Node ) :
               if bit . startswith ( '_("' ) or bit . startswith ( "_('" ) :
   if not language_code_re . search ( accept_lang ) :
      def sync_apps ( self , connection , app_labels ) :
              try :
                      singular . append ( '%%(%s)s' % t . contents )
 from django . utils . encoding import force_text , smart_text
 return do_ifequal ( parser , token , False )
  def add_arguments ( self , parser ) :
from django . http . cookie import SimpleCookie , parse_cookie
    def force_bytes ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :
                  return getattr ( instance , name ) ( )
          parser . add_argument ( 'args' , metavar = 'app_label' , nargs = '*' )
          _anonymous_ = [ '_offset' ]
 if file_obj :
   if script_url :
   try :
          if 'warning' in kwargs :
  def __init__ ( self , args , kw ) :
              new_name = '%sfield' % new_name
          return value
 import smtplib
 response = self . get_exception_response ( request , resolver , 403 )
              self . _load_post_and_files ( )
  except ValueError :
 content = content . encode ( 'utf-8' )
 if s == '"' :
      help = ( "Creates a Django app directory structure for the given app "  "name in the current directory or optionally in the given "  "directory." )
      return _trans . npgettext ( context , singular , plural , number )
  from django . db import models
 if not url_fields [ 0 ] :
              data [ Model . _meta . pk . attname ] = Model . _meta . pk . to_python ( d . get ( "pk" , None ) )
          int_part_gd = ''
   if is_relation :
          self . tokens . insert ( 0 , token )
   except IOError :
              if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
   @ content . setter
 choices = list ( chain ( self . choices , choices ) )
   class Command ( AppCommand ) :
  errors = [ ]
              dot = package . rindex ( '.' , 0 , dot )
    for chunk in field_stream :
          cc [ k . replace ( '_' , '-' ) ] = v
  with io . open ( potfile , 'a' , encoding = 'utf-8' ) as fp :
          int_part , dec_part = str_number , ''
 try :
 if not os . path . exists ( potfile ) :
  else :
                  bit = node
  if not getattr ( self , 'nodelist' , False ) :
                  self . _count = self . object_list . count ( )
               logger . removeHandler ( handler )
    if opts . model :
              return timezone . make_aware ( value , current_timezone )
 try :
   queryset = objects . using ( using ) . order_by ( model . _meta . pk . name )
      Morsel = http_cookies . Morsel
 used = name . pop ( 0 )
 self . locale_dir = locale_dir
                      usage . append ( "    %s" % name )
    def parse ( self ) :
                  raise
 self . _errors . append ( form . errors )
              self . _ordering = [ ]
  if isinstance ( value , datetime . date ) :
          return self . _headers . values ( )
          return s
  if item [ 'pubdate' ] is not None :
          Context . __init__ ( self , dict_ , current_app = current_app ,  use_l10n = use_l10n , use_tz = use_tz )
                      continue
 return duplicate
 is_templatized = file_ext in command . extensions
  if cache_timeout < 0 :
          _supported = OrderedDict ( settings . LANGUAGES )
   Model = self . _get_model_from_node ( node , "model" )
              self . file = BytesIO ( )
              self . _post , self . _files = QueryDict ( '' , encoding = self . _encoding ) , MultiValueDict ( )
 validate_slug = RegexValidator ( slug_re , _ ( "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens." ) , 'invalid' )
              try :
              return path . split ( '/' , 1 )
     def resolve ( self , context ) :
          self . reader_enters ( )
 import tempfile
                  pass
                  if filename . endswith ( ( '.pyo' , '.pyc' , '.py.class' ) ) :
    if settings . configured :
              if i % 2 :
              try :
 app . initialize ( argv = [ ] )
              self . bcc = [ ]
 _format_modules_cache = { }
  def __init__ ( self , nodelist_true , nodelist_false , * varlist ) :
                  break
  byte2int = operator . itemgetter ( 0 )
 from django . db . migrations . autodetector import MigrationAutodetector
              end = index
          for loc in locales :
                      s = six . text_type ( s , encoding , errors )
 n = getattr ( lookup_view , '__name__' , None )
  elif autoescape :
  def _get_closed ( self ) :
  else :
 self . style_func = None
          return s
   except VariableDoesNotExist :
    suffixes = ( '.' . join ( ext for ext in combo if ext )  for combo in product ( databases , ser_fmts , cmp_fmts ) )
              self . stdout . write ( self . style . MIGRATE_HEADING ( "Created new squashed migration %s" % writer . path ) )
  else :
 field_notes . append ( "Field renamed because it ended with '_'." )
  return force_text ( s , encoding , strings_only , errors )
   def __repr__ ( self ) :
          if self . old_timezone is None :
 import keyword
 exp = pickle . load ( f )
   return EventHandler . modified_code
   @ property
                      if model in created_models :
   if col_name != new_name and field_notes :
                  raise TypeError ( "relative imports require the 'package' argument" )
          return getattr ( module , class_name )
                          g = g . strip ( '"' )
              def m2m_convert ( n ) :
  from django . utils import six
 for var in loopvars :
     def translation ( language ) :
              _default = translation ( settings . LANGUAGE_CODE )
                          if field_type == 'BooleanField(' :
 pass
 result . validators = self . validators [ : ]
 context_extras [ 'LANGUAGE_CODE' ] = translation . get_language ( )
 if domain and validate_host ( domain , settings . ALLOWED_HOSTS ) :
  if tablename in connection . introspection . table_names ( ) :
 raise NotImplementedError ( 'subclasses of SyndicationFeed must provide a write() method' )
  headerlist . sort ( )
  if i < self . initial_form_count ( ) and 'instance' not in kwargs :
    chars = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'
                  os . makedirs ( dirname )
  except Exception :
              self . start_object ( obj )
 parser . add_argument ( '--addrport' , default = '' ,  help = 'Port number or ipaddr:port to run the server on.' )
 from django . utils import translation
   else :
 import stat
   work_file = os . path . join ( self . dirpath , thefile )
 if not isinstance ( error , ValidationError ) :
                  _html_parser . HTMLParser . __init__ ( self , convert_charrefs = convert_charrefs , ** kwargs )
                  for dirpath , dirnames , filenames in os . walk ( ldir ) :
              t = self . current_token
   if not args :
                  self . appendlist ( force_text ( key , encoding , errors = 'replace' ) ,  force_text ( value , encoding , errors = 'replace' ) )
          value = request . META . get ( header , None )
  if attrvalue :
              value = ''
  else :
  else :
 run ( self . addr , int ( self . port ) , handler ,  ipv6 = self . use_ipv6 , threading = threading )
   def pop ( self , key , * args ) :
 return super ( EmailField , self ) . clean ( value )
  except ValueError :
              m = regex . search ( text , pos )
              op = OPERATORS [ token ]
              primary_keys = [ ]
  else :
 if not attr_list [ 3 ] & termios . ECHO :
     try :
  att_name , params , notes = self . normalize_col_name (  column_name , used_column_names , is_relation )
 from django . template import loader , Context , RequestContext
    def _import_module ( name ) :
                              d = d [ idx ]
                      obj = None
                  self . connection . login ( self . username , self . password )
 for name in sorted ( handlers ) :
 self . remove_potfiles ( )
  args = token . contents . split ( )
   def _set_name ( self , name ) :
    def get_mod_func ( callback ) :
          self . sign = sign
                      self . _errors [ field ] = self . error_class ( error_class = 'nonfield' )
   def clean ( self ) :
  if is_aware ( date ) :
 parser . add_argument ( '--natural-primary' , action = 'store_true' , dest = 'use_natural_primary_keys' , default = False ,  help = 'Use natural primary keys if they are available.' )
 try :
 pass
              rawdata = self . rawdata
 super ( QueryDict , self ) . setlist ( key , list_ )
 @ stringfilter
  elif ch == "^" :
 self . _files = MultiValueDict ( )
 ns = "http://www.w3.org/2005/Atom"
          t = get_template ( template_name , dirs )
          fill_to = 8
      from functools import total_ordering
              return ZERO
 import calendar
          try :
              self . style = no_style ( )
   except ValueError :
              self . address_family = socket . AF_INET6
          if hasattr ( self , '_size' ) :
          if not isinstance ( s , Exception ) :
 self . lineno += token_string . count ( '\n' )
          cc = cc_delim_re . split ( response [ 'Cache-Control' ] )
                          filters [ name ] = self . configure_filter ( filters [ name ] )
                cached_loaders = [ ]
  field_name = force_text ( field_name , encoding , errors = 'replace' )
 raise v
  return ' ' . join ( extra_classes )
  from django . core . management . base import BaseCommand , CommandError
  return [  Warning (  "BooleanField does not have a default value." ,  hint = ( "Django 1.6 changed the default value of BooleanField from False to None. "  "See https://docs.djangoproject.com/en/1.6/ref/models/fields/#booleanfield "  "for more information." ) ,  obj = field ,  id = '1_6.W002' ,  )  for field in problem_fields  ]
 return retval
                      warnings . warn (  "`%s.%s` method should be renamed `%s`." %  ( class_name , old_method_name , new_method_name ) ,  deprecation_warning , 2 )
                  result . append ( self . create_token ( self . template_string [ upto : start ] , ( upto , start ) , False ) )
 if mimetype is None :
 for node in self :
 def data ( self ) :
                        self . prepend_token ( token )
  if sys . platform . startswith ( 'java' ) :
   _cached_modules = _cached_modules . union ( new_modules )
                          content_length = None
 def escape_filter ( value ) :
      if isinstance ( addr , six . string_types ) :
   def end_object ( self , obj ) :
  else :
 return formatdate ( epoch_seconds , usegmt = True )
      msg_with_ctxt = "%s%s%s" % ( context , CONTEXT_SEPARATOR , message )
  else :
 value = None
                      lead , trail = escape ( lead ) , escape ( trail )
                      pass
                     pass
     self . state = state
 if bf . is_hidden :
 if tags is not None :
                      self . create_table ( db , cache . _table )
  else :
  if delta < 0 :
          parser . add_argument ( 'args' , nargs = argparse . REMAINDER ,  help = 'Various KEY=val options.' )
  if len ( initial ) != len ( data ) :
                      if varargs is None :
  else :
               raise
 from django . conf import settings
 from django . utils . module_loading import import_string
     def make_origin ( display_name , loader , name , dirs ) :
  filename = os . path . join ( to_path , name )
   except IndexError :
 autoescape = autoescape and not isinstance ( value , SafeData )
 msg_data = msg_data . decode ( charset )
          return '' . join ( self . fed )
 from django . core . management . color import no_style
              handler . addQuickElement ( "ttl" , item [ 'ttl' ] )
    def add_root_elements ( self , handler ) :
          self . conditions_nodelists = conditions_nodelists
              if hasattr ( data , 'read' ) :
  else :
   def usage ( self , subcommand ) :
   def __str__ ( self ) :
   def fetch_command ( self , subcommand ) :
  config = self . config
              return ''
  else :
   def strptime ( self , value , format ) :
      def __init__ ( self , environ ) :
                  if app_name not in loader . migrated_apps :
                      self . stdout . write ( self . style . MIGRATE_SUCCESS ( " OK" ) )
              continue
              if not callable ( view_func ) :
    def assertRegex ( self , * args , ** kwargs ) :
 self . validate ( out )
  else :
  elif ch == '|' :
  check_for_migrations ( app_config , connection )
 for message in email_messages :
 from django . conf import settings
  else :
    def __repr__ ( self ) :
    def utcoffset ( self , dt ) :
  else :
    accept_language_re = re . compile ( r'''         ([A-Za-z]{1,8}(?:-[A-Za-z0-9]{1,8})*|\*)      # "en", "en-au", "x-y-z", "es-419", "*"         (?:\s*;\s*q=(0(?:\.\d{,3})?|1(?:.0{,3})?))?   # Optional "q=1.00", "q=0.8"         (?:\s*,\s*|$)                                 # Multiple accepts per header.         ''' , re . VERBOSE )
          return "<Variable Node: %s>" % self . filter_expression
              data = self . to_python ( data )
                          apps . setdefault ( app_name , [ ] ) . extend ( namespace_list )
          self . objects . append ( self . get_dump_object ( obj ) )
              continue
 import re
                          pass
   def handle ( self , ** options ) :
 if settings . USE_TZ :
              lines [ i ] = ( "%0" + width + "d. %s" ) % ( i + 1 , escape ( line ) )
 for match in matches :
 if self . help :
  full_file = os . path . join ( self . path , f )
   if len ( args ) == 2 :
 for accept_lang , unused in parse_accept_lang_header ( accept ) :
  except ValueError :
 indexbytes = operator . getitem
   class ContextPopException ( Exception ) :
import os
 silent = True
  return list ( self )
 raise NotImplementedError ( 'subclasses of Deserializer must provide a __next__() method' )
 return '\n' . join ( statements )
   def listdir ( self , path ) :
              if not unicodedata . combining ( char ) :
   else :
   def render ( self , context ) :
              self . check_migrations ( )
 key = self . make_key ( key , version = version )
          cleaned_line = comment_re . sub ( r"\1" , line ) . strip ( )
    def __len__ ( self ) :
          parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a database to '  'introspect. Defaults to using the "default" database.' )
  else :
  final_attrs = self . build_attrs ( attrs , type = self . input_type , name = name )
 _file = os . fdopen ( fd , mode )
     class ReferenceLocalTimezone ( tzinfo ) :
                  token = "not in"
  scheme = template . split ( ':' , 1 ) [ 0 ] . lower ( )
 day_field = '%s_day'
   return self . new_objects
  except OSError as e :
 continue
 return mark_safe ( formats . number_format ( number , abs ( p ) ) )
 self . request = request
  values = [ parser . compile_filter ( bit ) for bit in bits [ 1 : ] ]
 if not commit :
 attrs [ 'declared_fields' ] = OrderedDict ( current_fields )
  BLOCK_CONTEXT_KEY = 'block_context'
 result . key = key
          self . data = obj
          if not hasattr ( self , '_queryset' ) :
 if not self . is_valid ( ) or not self . can_delete :
  else :
 if isinstance ( attr , MovedModule ) :
 field_list = [ ]
              connection . client . runshell ( )
 return _generate_cache_key ( request , request . method , headerlist , key_prefix )
 return RegexURLResolver ( r'^/' , [ ns_resolver ] )
  if doublecolon_len > best_doublecolon_len :
              try :
   return data . get ( name , None )
 def COOKIES ( self ) :
                  other = other . __cast ( )
              if not hasattr ( f , 'save_form_data' ) :
                  if k [ 1 ] is None :
          return any ( "__call__" in klass . __dict__ for klass in type ( obj ) . __mro__ )
                  try :
          return DebugNodeList ( )
     _localtime = None
                  lineno , offset = self . getpos ( )
  if name is None :
                      message = ValidationError ( message )
          cache_timeout = settings . CACHE_MIDDLEWARE_SECONDS
           if only_new :
          if isinstance ( self . urlconf_name , list ) and len ( self . urlconf_name ) :
 import itertools
                    continue
              self . empty_label = empty_label
          USE_INOTIFY = True
  if not settings . DEBUG and not settings . ALLOWED_HOSTS :
    def get_date_error_message ( self , date_check ) :
 base , ext = posixpath . splitext ( the_path )
    def reset_translations ( ) :
  return attrs
 return out
 year_val , month_val , day_val = v . year , v . month , v . day
 if self . L ( ) and self . data . month > 2 :
 self . items = [ ]
   def templatize ( src , origin = None ) :
   def __str__ ( self ) :
  self . from_email = from_email or settings . DEFAULT_FROM_EMAIL
          self . name = name
  write_pot_file ( potfile , msgs )
  except KeyError :
 super ( PyLibMCCache , self ) . __init__ ( server , params ,  library = pylibmc ,  value_not_found_exception = pylibmc . NotFound )
   self . fixture_count = 0
  func ( path )
 xgettext_options = [ '--from-code=UTF-8' , '--add-comments=Translators' ]
 while field . rel is not None :
 s = s . replace ( "'" , "\\'" )
              return force_text ( time . tzname [ is_dst ] , DEFAULT_LOCALE_ENCODING )
  else :
 if isinstance ( template , ( list , tuple ) ) :
    return self . getlist ( key )
 return Variable ( path ) . resolve ( context )
  translation = self . _new_gnu_trans ( localedir , use_null_fallback )
              ext = base [ - 4 : ] + ext
  return True
          return _import_module ( self . mod )
 self . _non_form_errors = self . error_class ( )
               context . render_context [ self ] = itertools_cycle ( self . cyclevars )
 field_params . update ( new_params )
      from functools import lru_cache
          pass
   def __str__ ( self ) :
 WRAPPING_PUNCTUATION = [ ( '(' , ')' ) , ( '<' , '>' ) , ( '[' , ']' ) , ( '&lt;' , '&gt;' ) , ( '"' , '"' ) , ( '\'' , '\'' ) ]
                  break
          namelist = self . _archive . namelist ( )
   def to_python ( self , value ) :
     def pgettext ( context , message ) :
    def force_text ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :
                              try :
  __all__ = [ 'SelectDateWidget' ]
   return True
   def write ( self , content ) :
                  break
 def __init__ ( self , * args , ** kwargs ) :
                      config [ 'target' ] = self . config [ 'handlers' ] [ config [ 'target' ] ]
                  def __init__ ( self , takes_context , args , kwargs , target_var ) :
          raise TemplateSyntaxError ( "'ssi' tag takes one argument: the path to"  " the file to be included" )
              out += truncate_text
              as_form = True
                  fixture . close ( )
                      ch , escaped = next ( pattern_iter )
  else :
          pass
              if not nesting :
 missing_args_message = ( "No database fixture specified. Please provide the "  "path of at least one fixture in the command line." )
              addr = Header ( addr , encoding ) . encode ( )
 def get_default_prefix ( cls ) :
 return _i18n_cache_key_suffix ( request , cache_key )
          if not value :
  elif int ( timeout ) == 0 :
 import warnings
 wrapper . cache_info = cache_info
  if exclude and f . name in exclude :
   def render ( self , context ) :
      def b ( s ) :
          self . obj = obj
      @ register . filter ( "timesince" , is_safe = False )
                         self . _mark_post_parse_error ( )
 for digit in str ( number ) :
   try :
  except socket . error as e :
      if palette == PALETTES [ NOCOLOR_PALETTE ] :
     @ register . filter ( is_safe = True )
      def handle_default_options ( options ) :
  app_list = OrderedDict ( ( app_config , None )  for app_config in apps . get_app_configs ( )  if app_config . models_module is not None and app_config not in excluded_apps )
      @ contextlib . contextmanager
 return data
   def __repr__ ( self ) :
 from xml . dom import pulldom
              msg [ 'Date' ] = formatdate ( )
          self . val_expr = val_expr
 time_str = date . strftime ( '%Y-%m-%dT%H:%M:%S' )
  int_part_gd += digit
          return False
 if new_name != col_name :
    def incr ( self , key , delta = 1 , version = None ) :
          indent = '\t' * tabs
 from django . utils . http import urlquote
 break
                      top_errors . extend (  [ _ ( '(Hidden field %(name)s) %(error)s' ) % { 'name' : name , 'error' : force_text ( e ) }  for e in bf_errors ] )
          return language . lower ( )
   name = property ( _get_name , _set_name )
  return super ( DateField , self ) . to_python ( value )
  return value if six . PY2 else value . encode ( ISO_8859_1 ) . decode ( UTF_8 )
 chunks = [ ]
  if PY3 :
 import warnings
 guessed_filename = params . get ( 'filename' ) or used_name
   def latest_post_date ( self ) :
     if opts . managed :
    def handle_inspection ( self , options ) :
                          rel_to = "self" if relations [ i ] [ 1 ] == table_name else table2model ( relations [ i ] [ 1 ] )
 collect = [ ]
 import warnings
              ignored . append ( f . name )
  exclude = self . _get_validation_exclusions ( )
 if unpack :
 from django . utils . html import ( conditional_escape , escapejs ,  escape , urlize as _urlize , linebreaks , strip_tags , avoid_wrapping ,  remove_tags )
 self . show_hidden_initial = show_hidden_initial
     ip_address_validator_map = {  'both' : ( [ validate_ipv46_address ] , _ ( 'Enter a valid IPv4 or IPv6 address.' ) ) ,  'ipv4' : ( [ validate_ipv4_address ] , _ ( 'Enter a valid IPv4 address.' ) ) ,  'ipv6' : ( [ validate_ipv6_address ] , _ ( 'Enter a valid IPv6 address.' ) ) ,  }
 class CheckMessage ( object ) :
   def __iter__ ( self ) :
 _globs_ = frame . f_globals
  return ExtendsNode ( nodelist , parent_name )
 if isinstance ( other , BaseContext ) :
  if not dklen :
 id = None
   __getattr__ = new_method_proxy ( getattr )
 return result
  except AttributeError :
   def end_object ( self , obj ) :
 nodelist_loop = parser . parse ( ( 'empty' , 'endfor' , ) )
 stats = [ 0 , 0 ]
 if not prefix or not hasattr ( self , '_callback_str' ) :
  else :
      def pbkdf2 ( password , salt , iterations , dklen = 0 , digest = None ) :
  if dec_part :
 parser . add_argument ( '--list' , '-l' , action = 'store_true' , dest = 'list' , default = False ,  help = 'Show a list of all known migrations and which are applied' )
   def connection ( self ) :
   hextets = ip_str . split ( ':' )
                      pass
    def __deepcopy__ ( self , memo ) :
  ISO_INPUT_FORMATS = {  'DATE_INPUT_FORMATS' : ( '%Y-%m-%d' , ) ,  'TIME_INPUT_FORMATS' : ( '%H:%M:%S' , '%H:%M:%S.%f' , '%H:%M' ) ,  'DATETIME_INPUT_FORMATS' : (  '%Y-%m-%d %H:%M:%S' ,  '%Y-%m-%d %H:%M:%S.%f' ,  '%Y-%m-%d %H:%M' ,  '%Y-%m-%d'  ) ,  }
          if key not in self :
   def extract ( self ) :
  except LookupError :
          if hasattr ( self , '_files' ) :
 from django . utils . synch import RWLock
              self . _callback = callback
  return _serializers [ format ] . Deserializer
                              extra_params [ 'primary_key' ] = True
   def empty_block_tag ( self , token ) :
 if _standard_context_processors is None :
 from django . db . migrations . writer import MigrationWriter
      def copy_plural_forms ( self , msgs , locale ) :
      if dt . year >= 1900 :
          raise ValueError ( "Invalid timezone: %r" % timezone )
   def luhn ( candidate ) :
  time . sleep ( 1 )
 from django . http . cookie import SimpleCookie
    @ register . tag
          _dec . __name__ = 'method_decorator(%s)' % decorator . __class__ . __name__
 using_sysrandom = True
     def __len__ ( self ) :
from __future__ import absolute_import
  else :
 del self . _expire_info [ key ]
 return
          for k , v in six . iteritems ( dict_ ) :
 if t is not None :
                             six . reraise ( * exc_info )
                  yield line
 try :
  msgs = '\n' . join ( lines )
   def __iter__ ( self ) :
                  i = 366
  except UnicodeError :
 if match :
 from importlib import import_module
  if exclude and f . name in exclude :
   final_output . extend ( connection . creation . sql_for_pending_references ( model , style , pending_references ) )
              self . file = open ( self . name , mode or self . mode )
      def __str__ ( self ) :
from __future__ import unicode_literals
  if self . verbosity > 0 :
  used_column_names . append ( att_name )
              try :
              urlconf_repr = repr ( self . urlconf_name )
 lookups . appendlist ( name , ( new_matches , p_pattern + pat , dict ( defaults , ** pattern . default_kwargs ) ) )
              for widget in self . widgets :
   def configure_filter ( self , config ) :
 if hasattr ( rel_model , 'natural_key' ) and rel_model != model :
                  settings . configure ( )
  else :
 if text [ 0 ] == '#' :
          context_extras [ 'debug' ] = True
          args = [ self . name , self . value , self . attrs ]
 import sys
 I18N_MODIFIED = 2
   def render ( self , context ) :
 self . exit_command ( )
          return self . _headers . get ( header . lower ( ) , ( None , alternate ) ) [ 1 ]
  if BLOCK_CONTEXT_KEY not in context . render_context :
   choices = property ( _get_choices , _set_choices )
          cache = BaseDatabaseCache ( tablename , { } )
              val = Header ( val ) . encode ( )
      class CacheClass ( LocMemCache ) :
 value = self . _convert_to_charset ( value , 'latin-1' , mime_encode = True )
 self . msg = msg
    return value
              value = Decimal ( value )
 def force_escape ( value ) :
     class DjangoTranslation ( gettext_module . GNUTranslations ) :
 logging . _acquireLock ( )
  raise
  else :
                  self . test_runner = arg [ len ( option ) : ]
 return b'' . join ( T ) + F ( l ) [ : r ]
 self . waiting_readers = 0
           self . is_bound = data is not None or files is not None
 return { 'STATIC_URL' : settings . STATIC_URL }
               if var . startswith ( '_(' ) and var . endswith ( ')' ) :
 self . _view_middleware = [ ]
    return mark_safe ( template % substitutions )
   def write_po_file ( self , potfile , locale ) :
 return Signer ( b'django.http.cookies' + key , salt = salt )
       def get_format_modules ( lang = None , reverse = False ) :
  else :
 if y == m == d == "0" :
          return repr ( self . value )
                          unpacked_vars = dict ( zip ( self . loopvars , item ) )
   class ExtendsError ( Exception ) :
  except AttributeError :
                      if t . token_type != TOKEN_COMMENT :
 handler_config = handlers [ name ]
  for name , field in self . fields . items ( ) :
 _func_defaults = "func_defaults"
   incomment = False
   @ receiver ( setting_changed )
              close = self . closed
          fd = sys . stdin
 import os
   def write_migration_files ( self , changes ) :
   def __contains__ ( self , key ) :
              return output
                  widget . is_localized = self . is_localized
                  return True
   def get ( self , key , default = None , version = None ) :
 if takes_context :
          return [ format_html ( '<script type="text/javascript" src="{0}"></script>' , self . absolute_path ( path ) ) for path in self . _js ]
                  c = self . resolve ( c )
  elif piece :
   def register ( self , * tags ) :
 handler = logging . StreamHandler ( )
  return result
 if self . parent_name . filters or isinstance ( self . parent_name . var , Variable ) :
          if not self . _mutable :
  import django
          if args and kwargs :
 supported = True
          if lang is None :
    def is_valid_ipv6_address ( ip_str ) :
 if chunk is None :
   call_command ( 'loaddata' , * fixture_labels , ** { 'verbosity' : verbosity } )
 import gzip
          return VariableNode ( filter_expression )
          if self . stream is None :
 while x > 0 :
  ALLOWED_VARIABLE_CHARS = ( 'abcdefghijklmnopqrstuvwxyz'  'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.' )
 if is_compressed :
 if block is None :
              fp . write ( "%d\n" % os . getpid ( ) )
  else :
    def filter_function ( self , func , ** flags ) :
  attrs . setdefault ( 'step' , step )
 output , errors , status = popen_wrapper ( args )
 base36 = BaseConverter ( BASE36_ALPHABET )
 return super ( QueryDict , self ) . setdefault ( key , default )
 return self . _html_output (  normal_row = '<p%(html_class_attr)s>%(label)s %(field)s%(help_text)s</p>' ,  error_row = '%s' ,  row_ender = '</p>' ,  help_text_html = ' <span class="helptext">%s</span>' ,  errors_on_separate_row = True )
 try :
              max_width = min ( ( line . endswith ( '\n' ) and width + 1 or width ) , width )
    _urllib_robotparser_moved_attributes = [  MovedAttribute ( "RobotFileParser" , "robotparser" , "urllib.robotparser" ) ,  ]
              self . validators . remove ( self . _regex_validator )
                  self . stdout . write ( "  Applying %s..." % migration , ending = "" )
 if isinstance ( callback , functools . partial ) :
                   best_doublecolon_len = doublecolon_len
              return
 _upload_handlers = [ ]
                  return dict_ . getlist ( key )
                      shutil . copymode ( old_path , new_path )
 handlers = self . _upload_handlers
      import termios
   raise TemplateDoesNotExist ( template_name )
 supports_microseconds = False
    def get_script_prefix ( ) :
 s = s . replace ( '\r' , '\\r' )
 statements = sql_custom ( app_config , self . style , connection )
  except DatabaseError as e :
              words [ i ] = mark_safe ( word )
                       value . encode ( charset )
  randint = random . randrange ( 100000 )
       import pyinotify
  except TypeError :
  if value is not result :
     self . _validate_unique = False
  self . bad_cookies . add ( key )
          super ( TemporaryFileUploadHandler , self ) . __init__ ( * args , ** kwargs )
                  orig_vars . pop ( slots_var )
     class TimeFormat ( Formatter ) :
    @ register . tag ( 'for' )
            return s . get_data ( ) + s . rawdata
    for handler in handlers :
  try :
    NamedTemporaryFile = TemporaryFile
              kw [ 'microsecond' ] = kw [ 'microsecond' ] . ljust ( 6 , '0' )
                  t = Template ( output , name = filepath )
 self . pubid = pubid
  props = config . pop ( '.' , None )
 self . waiting_writers -= 1
          return value
  template_source_loaders = None
              len ( X ( ) )
   def appendlist ( self , key , value ) :
 new = '#: ' + orig_file
 if self . timeout is not None :
  dot = len ( package )
 from django . utils . functional import total_ordering
              words [ i ] = escape ( word )
              if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
              app_names = sorted ( loader . migrated_apps )
              return ''
    def npgettext_lazy ( context , singular , plural , number = None ) :
 field_params [ 'decimal_places' ] = row [ 5 ]
 if not self . is_valid ( ) or not self . can_order :
                if isinstance ( content , EmailMessage ) :
          script_url = get_bytes_from_wsgi ( environ , 'REDIRECT_URL' , '' )
                  return func ( context , self . first )
  _add_doc ( b , """Byte literal""" )
          raise TemplateSyntaxError ( "%r received an invalid token: %r" %  ( bits [ 0 ] , remaining_bits [ 0 ] ) )
             cache_key += '.%s' % getattr ( request , 'LANGUAGE_CODE' , get_language ( ) )
    class NoReverseMatch ( Exception ) :
          if not self . render_value :
 return ( ret == 0 )
  except Exception as e :
              parse_until = [ ]
          self . _assert_mutable ( )
 from django . utils . encoding import force_text
  else :
   sys . stderr . write ( msg )
    def deserialize ( format , stream_or_string , ** options ) :
              pk_key = "%s-%s" % ( self . add_prefix ( i ) , self . model . _meta . pk . name )
 BASE62_ALPHABET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
 class dummy :
  else :
                              cursor . execute ( sql )
  form . fields [ self . _pk_field . name ] = ModelChoiceField ( qs , initial = pk_value , required = False , widget = widget )
  url = 'mailto:%s@%s' % ( local , domain )
 if self . timezone and self . timezone . dst ( self . data ) :
 os . close ( fd )
 from django . utils . functional import lazy
      class CommentNode ( Node ) :
 try :
                  final_attrs = dict ( final_attrs , id = '%s_%s' % ( id_ , i ) )
    @ register . tag ( 'filter' )
 return self . data . isocalendar ( ) [ 0 ]
 import datetime
                  end -= 1
   __all__ = (  'ModelForm' , 'BaseModelForm' , 'model_to_dict' , 'fields_for_model' ,  'save_instance' , 'ModelChoiceField' , 'ModelMultipleChoiceField' ,  'ALL_FIELDS' , 'BaseModelFormSet' , 'modelformset_factory' ,  'BaseInlineFormSet' , 'inlineformset_factory' ,  )
          pass
  table2model = lambda table_name : re . sub ( r'[^a-zA-Z0-9]' , '' , table_name . title ( ) )
  else :
   def error ( self , token , msg ) :
     role , instructions = part . split ( '=' )
          cookiedict [ key ] = c . get ( key ) . value
              self . _closable_objects . append ( value )
 return formatted_subject [ : 989 ]
 raise TemplateDoesNotExist ( name )
  return super ( PasswordInput , self ) . render ( name , value , attrs )
                          self . stdout . write ( 'ignoring directory %s\n' % dirname )
   def dst ( self , dt ) :
  if isinstance ( path , six . string_types ) :
 return getattr ( trans , real_name )
              for app_label in bad_app_labels :
              updates . update ( processor ( request ) )
 from django . utils import six
 key = bytes_to_text ( key , self . encoding )
          mail . attach_alternative ( html_message , 'text/html' )
  else :
 with context . push ( ** values ) :
   saved_locale = None
          return self . text
              for f in chain . from_iterable ( l [ 1 ] for l in self . _files . lists ( ) ) :
                   kwargs [ str ( param ) ] = value
  raise CommandError ( "Unable to serialize database: %s" % e )
 def empty_form ( self ) :
     app_template_dirs = calculate_app_template_dirs ( )
           name = args [ 1 ]
  existing . remove ( name )
   def get_parent ( self , context ) :
 self . prog_name = os . path . basename ( self . argv [ 0 ] )
  exec ( """exec _code_ in _globs_, _locs_""" )
      msgs_with_ctxt = ( "%s%s%s" % ( context , CONTEXT_SEPARATOR , singular ) ,  "%s%s%s" % ( context , CONTEXT_SEPARATOR , plural ) ,  number )
 if isinstance ( widget , NumberInput ) and 'step' not in widget . attrs :
 output = [ format_html ( '<select{0}>' , flatatt ( final_attrs ) ) ]
 while i < len ( subject ) and subject [ i ] != c :
              kwargs [ 'widget' ] = widgets [ f . name ]
    def _load_serializers ( ) :
  elif ch == '$' :
           return [ etag_str ]
  else :
 use_base_manager = options . get ( 'use_base_manager' )
                  pass
  from django . conf import settings
 if not hextets [ index ] :
   def path ( self , name ) :
                  if self . directory_permissions_mode is not None :
  except VariableDoesNotExist :
                          ch , escaped = next ( pattern_iter )
  new_value = [ ]
              file = data . temporary_file_path ( )
              yield v
  except TypeError :
 for item in values :
    def find_template ( self , name , dirs = None ) :
 if self . verbosity > 1 :
 substitutions [ 'clear' ] = CheckboxInput ( ) . render ( checkbox_name , False , attrs = { 'id' : checkbox_id } )
                  self . stdout . write ( " - %s" % migration . name )
 def iriencode ( value ) :
              return context
          return s
  except IndexError :
          assert isinstance ( level , int ) , "The first argument should be level."
   @ classmethod
                  if isinstance ( s , bytes ) :
              f . save_form_data ( instance , cleaned_data [ f . name ] )
          if ( hasattr ( value , '__iter__' ) and  not isinstance ( value , six . text_type ) and  not hasattr ( value , '_meta' ) ) :
  else :
      class SkipFile ( UploadFileException ) :
  style = color_style ( )
 from django . template . defaultfilters import date
              assert not isinstance ( to , six . string_types ) , '"to" argument must be a list or tuple'
 self . source = source
              return formats . localize_input ( value )
  new_class = super ( ModelFormMetaclass , mcs ) . __new__ ( mcs , name , bases , attrs )
                  if self . verbosity >= 2 :
          if self . is_localized :
 self . _reverse_dict = { }
 from __future__ import unicode_literals
          return False
   self . template_cache [ key ] = ( template , None )
 if ( self . negate and val1 != val2 ) or ( not self . negate and val1 == val2 ) :
 extend = complain
 if six . PY2 :
          hfile = msvcrt . get_osfhandle ( _fd ( f ) )
 if not f . blank and not form_field . required and field_value in form_field . empty_values :
              self . keyOrder . remove ( k )
                              _file . close ( )
   def create_bound_method ( func , obj ) :
 if not len ( self . backout ) :
 __M = r'(?P<mon>\w{3})'
 global _standard_context_processors
                  p . feed ( data )
 try :
 sys . stderr . write ( "  as a FastCGI application, you will need to get flup from\n" )
              self . setlist ( k , v )
   def handle_m2m_field ( self , obj , field ) :
 class_types = ( type , types . ClassType )
   @ property
    def loads ( s , key = None , salt = 'django.core.signing' , serializer = JSONSerializer , max_age = None ) :
    colors = styles . pop ( ) . split ( '/' )
 get_function_globals = operator . attrgetter ( _func_globals )
  mapped_tokens . append ( self . translate_token ( token ) )
              return '(NOT (%s: %s))' % ( self . connector , ', ' . join ( [ str ( c ) for c  in self . children ] ) )
 return calendar . timegm ( result . utctimetuple ( ) )
  try :
   if confirm == 'yes' :
              digest = hashlib . sha256
              print ( ' ' . join ( sorted ( filter ( lambda x : x . startswith ( curr ) , subcommands ) ) ) )
          return self . __class__ ( [ ( key , copy . deepcopy ( value , memo ) )  for key , value in self . items ( ) ] )
      return _trans . get_language_bidi ( )
    class MediaDefiningClass ( type ) :
               for tablename in tablenames :
    def _get_timezone_name ( timezone ) :
 if self . use_ssl and self . use_tls :
                        start = non_capturing_groups . pop ( )
   if self . verbosity > 0 or self . interactive :
              self . full_clean ( )
  return result . lower ( )
                      raise NoReverseMatch ( "%s is not a registered namespace" %  key )
   def loads ( self , data ) :
  except TypeError :
      class ComboField ( Field ) :
          warnings . warn ( "IPAddressField has been deprecated. Use GenericIPAddressField instead." ,  RemovedInDjango19Warning )
                  pieces . append ( force_text ( getattr ( self , piece ) ( ) ) )
                      if field . rel is None :
 return value . replace ( " " , "\xa0" )
                  item_date = item . get ( date_key )
        @ register . filter ( is_safe = False )
  return mark_safe ( self . format_output ( output ) )
 self . clear_cdata_mode ( )
          return item in list ( self )
      pass
          msg = 'Module "%s" does not define a "%s" attribute/class' % (  dotted_path , class_name )
   class UnreadablePostError ( IOError ) :
              path = join ( os . getcwdu ( ) , path )
  self . _cache [ key ] = value
 return MONTHS_ALT [ self . data . month ]
   def handle_charref ( self , name ) :
 connection = connections [ database ]
 from django . utils import formats
                          if message_context :
                  pk_value = form . instance . pk
          database = options . get ( 'database' )
    if six . PY2 :
 return iter ( self . forms )
  return 'th'
              raise value . with_traceback ( tb )
     class BaseConfigurator ( object ) :
  requires_system_checks = False
              @ wraps ( fget )
  FILE_MODIFIED = 1
      class SelectDateWidget ( Widget ) :
 index = data . find ( self . _boundary )
 parser . add_argument ( '--testrunner' ,  action = 'store' , dest = 'testrunner' ,  help = 'Tells Django to use specified test runner class instead of '  'the one specified by the TEST_RUNNER setting.' ) ,
                      new_attr = name
       def __add__ ( self , other ) :
      def compress_sequence ( sequence ) :
                      response = middleware_method ( request , callback , callback_args , callback_kwargs )
          raise TemplateSyntaxError ( "%r expected at least one variable "  "assignment" % bits [ 0 ] )
 name = self . path ( name )
                  new_msg = (  "Database %s couldn't be flushed. Possible reasons:\n"  "  * The database isn't running or isn't configured correctly.\n"  "  * At least one of the expected database tables doesn't exist.\n"  "  * The SQL was invalid.\n"  "Hint: Look at the output of 'django-admin.py sqlflush'. That's the SQL this command wasn't able to run.\n"  "The full error: %s" ) % ( connection . settings_dict [ 'NAME' ] , e )
 context . autoescape = old_setting
 raise NotImplementedError ( 'subclasses of Storage must provide a delete() method' )
    stderr = getattr ( self , 'stderr' , OutputWrapper ( sys . stderr , self . style . ERROR ) )
              return func ( * args , ** kwargs )
            try :
              return int ( calendar . timegm ( self . data . utctimetuple ( ) ) )
   def values ( self ) :
 from django . db import models , router
  if fields and f . name not in fields :
  return result
  else :
                   raise NotImplementedError ( 'Awaiting Implementation' )
          parser . add_argument ( 'app_label' , nargs = '?' ,  help = 'App label of an application to synchronize the state.' )
 self . next = next
     def prepare_js_for_gettext ( js ) :
          return get_supported_language_variant ( settings . LANGUAGE_CODE )
              return None
 return e
 errors = [ ]
  def close ( self ) :
 if isinstance ( title , ( list , tuple ) ) :
   except Exception :
  import datetime
               if index is not None and index < self . initial_form_count ( ) :
          return all ( getattr ( self , attr ) == getattr ( other , attr )  for attr in [ 'level' , 'msg' , 'hint' , 'obj' , 'id' ] )
  elif self . fixture_object_count == self . loaded_object_count :
                      errors = "strict"
                  if stream :
  super ( IntegerField , self ) . __init__ ( * args , ** kwargs )
  connection = connections [ options [ 'database' ] ]
   return endpos
 current = context
   def __iter__ ( self ) :
 try :
          return super ( Warning , self ) . __init__ ( WARNING , * args , ** kwargs )
 compile_func = partial ( generic_tag_compiler ,  params = params , varargs = varargs , varkw = varkw ,  defaults = defaults , name = function_name ,  takes_context = takes_context , node_class = InclusionNode )
          super ( QueryDict , self ) . __init__ ( )
   leave_locale_alone = True
 parsed = False
     class DecimalField ( IntegerField ) :
      def __init__ ( self , media = None , ** kwargs ) :
   UserModel = get_user_model ( )
 self . verbosity = options [ 'verbosity' ]
              self . mod = old
  _error_files = [ ]
   if isinstance ( value , six . text_type ) :
              origin = StringOrigin ( template_string )
                  raise ValidationError ( self . error_messages [ 'invalid_time' ] , code = 'invalid_time' )
 context [ self . target_var ] = func ( * resolved_args , ** resolved_kwargs )
              data = data or [ ]
          if self . _done :
  return palette
      def __init__ ( self , target , expression , var_name ) :
 for file in options [ 'files' ] :
 changes = autodetector . changes ( graph = executor . loader . graph )
                  self . close_called = True
                          os . umask ( old_umask )
          raise base . DeserializationError ( "Invalid model identifier: '%s'" % model_identifier )
  else :
          return self . load_template ( template_name , template_dirs )
  def clear_checkbox_name ( self , name ) :
              self . extra_context [ name ] = var
              return exit_code
                          shutil . copyfileobj ( extracted , outfile )
          raise ValidationError ( error_message , code = 'invalid' )
   def render ( self , context ) :
     class VariableNode ( Node ) :
 if nodelist_empty is None :
              return ''
 for node_app , node_name in migration . branch :
                  self . stream . close ( )
 try :
  except Exception as e :
                                          cursor . execute ( sql )
  except IndexError :
 if len ( bits ) != 2 :
    return settings . LANGUAGE_CODE
   plan = executor . migration_plan ( targets )
                    input_attrs [ 'id' ] = '%s_%s' % ( id_ , i )
 if fields :
              yield d
 if not model_identifier :
   def clean ( self , value ) :
  self . _update_unget_history ( len ( bytes ) )
    class RWLock ( object ) :
  values = {  name : var . resolve ( context )  for name , var in six . iteritems ( self . extra_context )  }
    def __iter__ ( self ) :
  else :
  commands_dict [ app ] . append ( name )
  return True
                  return fext
          yes , no , maybe = bits
   def __next__ ( self ) :
                  return
              return ''
  except ImportError :
 if reverse :
  return '' . join ( base36 )
 parser . add_argument ( '--exclude' , '-x' , dest = 'exclude' , action = 'append' , default = [ ] ,  help = 'Locales to exclude. Default is none. Can be used multiple times.' )
                          if kwargs . get ( k , v ) != v :
 unique_checks , date_checks = form . instance . _get_unique_checks ( exclude = exclude )
  try :
 if check not in self . registered_checks :
 if construct :
 nodelist_true = parser . parse ( ( 'else' , 'endifchanged' ) )
   else :
              self . stream . write ( "\n" )
    else :
                  return dict_ [ key ]
 for formset in formsets :
  except ValidationError as e :
 parser = self . create_parser ( argv [ 0 ] , argv [ 1 ] )
 if six . PY2 and isinstance ( rawdata , six . text_type ) :
                  i += 1
              self . months = MONTHS
                      resolved_args , resolved_kwargs = self . get_resolved_arguments ( context )
          try :
              @ wraps ( fset )
 if id_ :
    def format_html_join ( sep , format_string , args_generator ) :
          parsed = urlparse ( force_text ( redirect_to ) )
                          app_config = apps . get_app_config ( app_label )
 super ( BaseModelForm , self ) . __init__ ( data , files , auto_id , prefix , object_data ,  error_class , label_suffix , empty_permitted )
    style . ERROR_OUTPUT = style . ERROR
          return date_format ( value , use_l10n = use_l10n )
  return value
          val . encode ( 'ascii' )
          tpl = "ExternalReferenceForbidden(system_id='{}', public_id={})"
  from __future__ import unicode_literals
  return decorator ( * args , ** kwargs )
 orig_vars . pop ( '__dict__' , None )
   def open ( self , mode = None ) :
  return _wrapper
 self . pointer = i
 options = [ opt for opt in options if opt [ 0 ] not in prev_opts ]
    def add_prefix ( self , index ) :
   def get_version ( version = None ) :
              if bits [ 0 ] != 'and' :
   self . tokens = mapped_tokens
              table_names = [ ]
          __slots__ = 'hashvalue'
 self . file = os . fdopen ( fd , mode , bufsize )
  else :
 parser = OptionParser ( prog = prog_name ,  usage = self . usage ( subcommand ) ,  version = self . get_version ( ) )
   @ property
   def handle ( self , * args , ** options ) :
  return dec
  elif i < list_length - 1 :
      def render ( self , context ) :
  want_unicode = False
      from collections import UserList
   from django . conf import settings
              self . _post_render_callbacks . append ( callback )
  self . validators = self . default_validators + validators
  handler . addQuickElement ( "id" , self . feed [ 'id' ] )
  def items ( self ) :
  def add_arguments ( self , parser ) :
  except Exception as e :
  model_dependencies = skipped
              truncate = pgettext (  'String to return when truncating text' ,  '%(truncated_text)s...' )
              self . stream . write ( "\n" )
   get_git_changeset . cache = changeset
          return len ( self . items )
 from django . conf import settings
  return dec
                  before_import_registry = copy . copy ( register_to . _registry )
 for attr in ( 'expects_localtime' , 'is_safe' , 'needs_autoescape' ) :
                              open ( init_path , "w" ) . close ( )
  if self . data . minute == 0 and self . data . hour == 12 :
 if isinstance ( other_dict , MultiValueDict ) :
 if len ( bits ) != 2 :
    obj = base . build_instance ( Model , data , db )
              timestamp = datetime . datetime . now ( ) . strftime ( "%Y%m%d-%H%M%S" )
 def __init__ ( self , dt ) :
 if template_source_loaders is None :
              raise ImproperlyConfigured ( 'Path for saving email messages exists, but is not a directory: %s' % self . file_path )
     def has_error ( self , field , code = None ) :
 __ne__ = new_method_proxy ( operator . ne )
  except KeyError :
     class Promise ( object ) :
 text = force_text ( text )
          self . target , self . expression = target , expression
                  self . _post , self . _files = self . parse_file_upload ( self . META , data )
               if not isinstance ( node , TextNode ) :
 kw = [ d . year , d . month , d . day ]
   def __repr__ ( self ) :
          return "UTC"
  self . xml . startElement ( "object" , { } )
  def led ( self , left , parser ) :
                              new_matches = normalize ( parent_pat + pat )
                          if hasattr ( value , '__iter__' ) and not isinstance ( value , six . text_type ) :
  else :
from django . core . management import call_command
      pass
 level = handler_config . get ( 'level' , None )
 contents = format_html ( '<label{0}>{1}</label>' , attrs , contents )
   copystat ( old_file_name , new_file_name )
   if field not in self . fields :
 return FixedOffset ( offset , name )
              del moves . __dict__ [ name ]
 if arg not in ( 'on' , 'off' ) :
                      for model in model_list :
 return not module_has_submodule ( package , module )
 sql_files . append ( os . path . join ( app_dir , "%s.sql" % opts . model_name ) )
 if change == FILE_MODIFIED :
 self . stream . write ( '-' * 79 )
          value = tuple . __getitem__ ( self , key )
 del attrs [ attr ]
   @ property
   def s ( self ) :
  return bool ( value )
 yield self . read ( )
      termios = None
   def D ( self ) :
   def N ( self ) :
   def Y ( self ) :
 from django . utils . functional import lazy
 with lock :
  handle_default_options ( options )
              start = match . start ( )
  elif self . required :
 self . chunk_size = chunk_size
              self . label = self . field . label
      if settings . TEMPLATE_DEBUG and display_name :
                      os . makedirs ( filename )
          self . setting , self . nodelist = setting , nodelist
  from django . conf import settings
              return [ ]
              self . locale_paths = [ os . path . abspath ( os . path . join ( 'conf' , 'locale' ) ) ]
    if isinstance ( message , dict ) :
          value = data . get ( name , None )
  if self . flags and not isinstance ( self . regex , six . string_types ) :
    def valid_value ( self , value ) :
          return '\n' . join ( '* %s' % e for e in self )
    print_ = getattr ( moves . builtins , "print" , None )
           self . ignore = options . get ( 'ignore' )
 self . merge ( translation )
  for i , ( seconds , name ) in enumerate ( chunks ) :
   def getvalue ( self ) :
    class UnrecognizedArchiveFormat ( ArchiveException ) :
     class IPAddressField ( CharField ) :
 parser . add_argument ( '--ipv6' , '-6' , action = 'store_true' , dest = 'use_ipv6' , default = False ,  help = 'Tells Django to use an IPv6 address.' )
              self . xml . addQuickElement ( "None" )
 if _win :
 field_notes . append ( "Field renamed because it started with '_'." )
          from pprint import pformat
 return data_set != initial_set
              return { "xmlns" : self . ns , "xml:lang" : self . feed [ 'language' ] }
 orig_vars . pop ( '__weakref__' , None )
  except TypeError :
      return "'%s'" % dirname if dirname else 'absolute path'
from __future__ import unicode_literals
              token = Token ( TOKEN_TEXT , token_string )
              result . append ( self . create_token ( last_bit , ( upto , upto + len ( last_bit ) ) , False ) )
              return self . filter_expr . resolve ( context )
   def fastcgi_help ( message = None ) :
   return result
              raise TemplateSyntaxError ( "Could not parse the remainder: '%s' "  "from '%s'" % ( token [ upto : ] , token ) )
 self . auto_id = auto_id
              doublecolon_len = 0
 TOKEN_BLOCK = 2
                  if hasattr ( field . rel , 'to' ) :
          return
              label_for = ''
   def __iter__ ( self ) :
                  import_module ( '%s.%s' % ( app_config . name , module_to_search ) )
          if name . lower ( ) in ADDRESS_HEADERS :
          return self . size
          delattr ( _MovedItems , name )
              offset_mins = int ( tzinfo [ - 2 : ] ) if len ( tzinfo ) > 3 else 0
 if year < 100 :
 pos = last = 0
   self . _css = { }
 import warnings
                          continue
 if len ( bits ) >= 4 and bits [ - 2 ] == "from" :
              def __mod__ ( self , rhs ) :
    except Exception as e :
 import sys
  elif isinstance ( timezone , six . string_types ) and pytz is not None :
          vary_headers = [ ]
   if new_name [ 0 ] . isdigit ( ) :
     class RegexURLResolver ( LocaleRegexProvider ) :
 if response :
              self . _callback = None
 ret = LockFileEx ( hfile , flags , 0 , 0 , 0xFFFF0000 , byref ( overlapped ) )
              if self . stream is not None :
  import json
 if not match :
  return end , next
      status_code = 400
     ESCAPE_MAPPINGS = {  "A" : None ,  "b" : None ,  "B" : None ,  "d" : "0" ,  "D" : "x" ,  "s" : " " ,  "S" : "x" ,  "w" : "x" ,  "W" : "!" ,  "Z" : None ,  }
                      resource = resource_string ( app_config . name , pkg_name )
 return format_html ( '<textarea{0}>\r\n{1}</textarea>' ,  flatatt ( final_attrs ) ,  force_text ( value ) )
          return int ( value ) + int ( arg )
                          objects = model . _base_manager
 ch , escaped = next ( pattern_iter )
   def close ( self , ** kwargs ) :
 import datetime
 if isinstance ( widget , NumberInput ) and 'step' not in widget . attrs :
 self . file . seek ( 0 , os . SEEK_END )
                              continue
   if count == 0 :
 def encoding ( self ) :
                          model = app_config . get_model ( model_label )
 import os
 def __init__ ( self , message , code = None , params = None ) :
 field_output . append ( "%sNULL" % ( "NOT " if not f . null else "" ) )
 strip_prefix = lambda s : s [ 1 : ] if s . startswith ( "u'" ) else s
          return node . render ( context )
                                  self . stdout . write ( "    Installing custom SQL for %s.%s model\n" % ( app_name , model . _meta . object_name ) )
          if self . connection_reset :
    return False
 current_len = 0
   def setlistdefault ( self , key , default_list = None ) :
 filename = os . path . basename ( path )
 if contents is not None :
    class SuspiciousFileOperation ( SuspiciousOperation ) :
 self . size = len ( content )
          super ( ErrorList , self ) . __init__ ( initlist )
 template = '%(input)s'
              fields = new_class . declared_fields
                          limit_choices_to = limit_choices_to ( )
          if len ( self . dicts ) == 1 :
 self . endChannelElement ( handler )
    def timeuntil ( d , now = None ) :
              pass
  content_type , content_type_extra = meta_data . get ( 'content-type' , ( '' , { } ) )
          iteritems = _iteritems
  except TemplateSyntaxError as e :
   def __enter__ ( self ) :
   if bf . label :
              locale_dirs = filter ( os . path . isdir , glob . glob ( '%s/*' % basedir ) )
  return data . get ( name , None )
                  path_info = '/'
  from django . core . management . base import BaseCommand
   def chars ( self , num , truncate = None , html = False ) :
 cache [ key ] = oldroot
 from django . db . migrations . questioner import MigrationQuestioner , InteractiveMigrationQuestioner
  from django . core . servers . fastcgi import runfastcgi
                      data = data . replace ( microsecond = 0 )
 import re
 try :
   if locations :
   class Command ( BaseCommand ) :
  try :
      compare = lambda self , a , b : a < b
   all_models = [  ( app_config . label ,  router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) )  for app_config in apps . get_app_configs ( )  if app_config . models_module is not None and app_config . label in app_labels  ]
      def python_reloader ( main_func , args , kwargs ) :
          return self . choice_value in self . value
 substitutions [ 'clear_checkbox_id' ] = conditional_escape ( checkbox_id )
    def deactivate_all ( ) :
   def add_handlers ( self , logger , handlers ) :
                  qs = qs . order_by ( self . model . _meta . pk . name )
              from django . conf import settings
   def __text_cast ( self ) :
     class ConvertingList ( list ) :
                  slots = [ slots ]
 d = ''
          try :
  from django . core . exceptions import ValidationError
 class EventHandler ( pyinotify . ProcessEvent ) :
                  lookup_view = get_callable ( lookup_view , True )
   return BlockNode ( block_name , nodelist )
              continue
  else :
          return value
                          stats [ HITS ] += 1
              value = self . val_expr . resolve ( context )
 pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )
  from django . core import mail
     class GenericIPAddressField ( CharField ) :
  else :
       def __init__ ( self , name ) :
 return { }
 if _globs_ is None :
          if not hasattr ( self , '_files' ) :
   if value != value or value in ( Decimal ( 'Inf' ) , Decimal ( '-Inf' ) ) :
     def split_domain_port ( host ) :
                      if not hasattr ( self , 'bad_cookies' ) :
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
     trim_whitespace_re = re . compile ( '\s*\n\s*' )
                      os . mkdir ( target_dir )
  def clean ( self ) :
  if end < 0 :
 value . configurator = self
 for h in handlers :
          if initial is None :
          pass
 parser . add_argument ( '--no-startup' , action = 'store_true' , dest = 'no_startup' ,  help = 'When using plain Python, ignore the PYTHONSTARTUP environment variable and ~/.pythonrc.py script.' )
              handler . addQuickElement ( "ttl" , self . feed [ 'ttl' ] )
 kwargs [ 'error_messages' ] = error_messages
          reversed_text = ' reversed' if self . is_reversed else ''
              timeout = self . default_timeout
  out = text [ : end_text_pos ]
 for x in arg . split ( ':' ) :
  except ImportError :
     else :
   possibilities = self . reverse_dict . getlist ( lookup_view )
              raise ValidationError ( _ ( 'Enter a valid IPv4 or IPv6 address.' ) , code = 'invalid' )
               six . reraise ( ValidationError , ValidationError (  self . error_messages [ 'invalid_image' ] ,  code = 'invalid_image' ,  ) , sys . exc_info ( ) [ 2 ] )
  else :
         OPERATORS = {  'or' : infix ( 6 , lambda context , x , y : x . eval ( context ) or y . eval ( context ) ) ,  'and' : infix ( 7 , lambda context , x , y : x . eval ( context ) and y . eval ( context ) ) ,  'not' : prefix ( 8 , lambda context , x : not x . eval ( context ) ) ,  'in' : infix ( 9 , lambda context , x , y : x . eval ( context ) in y . eval ( context ) ) ,  'not in' : infix ( 9 , lambda context , x , y : x . eval ( context ) not in y . eval ( context ) ) ,  '=' : infix ( 10 , lambda context , x , y : x . eval ( context ) == y . eval ( context ) ) ,  '==' : infix ( 10 , lambda context , x , y : x . eval ( context ) == y . eval ( context ) ) ,  '!=' : infix ( 10 , lambda context , x , y : x . eval ( context ) != y . eval ( context ) ) ,  '>' : infix ( 10 , lambda context , x , y : x . eval ( context ) > y . eval ( context ) ) ,  '>=' : infix ( 10 , lambda context , x , y : x . eval ( context ) >= y . eval ( context ) ) ,  '<' : infix ( 10 , lambda context , x , y : x . eval ( context ) < y . eval ( context ) ) ,  '<=' : infix ( 10 , lambda context , x , y : x . eval ( context ) <= y . eval ( context ) ) ,  }
   default = 'DEFAULT'
                              terminal_char = '>'
                  final_output . extend ( connection . creation . sql_for_pending_references ( refto , style , pending_references ) )
 cmd_options = vars ( options )
 for f in opts . local_fields :
   opts = new_class . _meta = ModelFormOptions ( getattr ( new_class , 'Meta' , None ) )
              logger . propagate = propagate
  except OverflowError :
 if data in self . children :
          seen = set ( )
                  if isinstance ( arg , unicode ) :
 write = property ( lambda self : self . file . write )
    def endChannelElement ( self , handler ) :
 pks = options . get ( 'primary_keys' )
   else :
     class HttpResponse ( HttpResponseBase ) :
          pass
  else :
   from django . conf import settings
   if formfield_callback is None :
          print ( "Can't import flup." + flup_module )
   class warn_about_renamed_method ( object ) :
 self . verbosity = int ( options . get ( 'verbosity' ) )
              raise ValidationError ( self . error_messages [ 'invalid_list' ] , code = 'invalid_list' )
 if age > max_age :
          client = self . _lib . Client ( self . _servers )
   for migration in merge_migrations :
   def o ( self ) :
          try :
 self . regex = regex
          self . nodelist = nodelist
 def __init__ ( self , urlconf_name , default_kwargs = None , app_name = None , namespace = None ) :
 final_attrs = self . build_attrs ( attrs )
 self . name , self . value = name , value
  self . stderr . write ( "Error: %s" % error_text )
 msg [ 'To' ] = self . extra_headers . get ( 'To' , ', ' . join ( self . to ) )
   def visible_fields ( self ) :
   def expression ( self , rbp = 0 ) :
          if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) :
 handler . endElement ( "entry" )
 if form . errors :
      table_names = [ model . _meta . db_table for model in self . models ]
       major = get_major_version ( version )
  except IndexError :
 from django . core . management . base import BaseCommand
     wm = pyinotify . WatchManager ( )
      help = ( "Creates a Django project directory structure for the given "  "project name in the current directory or optionally in the "  "given directory." )
  else :
  except InvalidTemplateLibrary as e :
 if hasattr ( cls , k ) :
  else :
    class NullDevice :
 df = DateFormat ( value )
                  result . parent = self
 if hasattr ( value , 'close' ) :
 return do_ntranslate ( singular , plural , number , 'ngettext' )
  if remaining_bits :
          value = signing . get_cookie_signer ( salt = key + salt ) . sign ( value )
  yield representative , True
   def clear_checkbox_id ( self , name ) :
 @ stringfilter
  else :
 format = force_str ( default or get_format ( 'DATE_INPUT_FORMATS' ) [ 0 ] )
   def _reverse_with_prefix ( self , lookup_view , _prefix , * args , ** kwargs ) :
      mapping = { 'openblock' : BLOCK_TAG_START ,  'closeblock' : BLOCK_TAG_END ,  'openvariable' : VARIABLE_TAG_START ,  'closevariable' : VARIABLE_TAG_END ,  'openbrace' : SINGLE_BRACE_START ,  'closebrace' : SINGLE_BRACE_END ,  'opencomment' : COMMENT_TAG_START ,  'closecomment' : COMMENT_TAG_END ,  }
   else :
 if not m :
  except MiddlewareNotUsed :
 if not path . exists ( target_dir ) :
          lbp = bp
  from django . core . serializers . base import DeserializationError
                  result = self . configure_custom ( config )
              return match . group ( 0 )
          self . field = field
  if not isinstance ( cookie , http_cookies . BaseCookie ) :
  if id_ :
 return value or arg
 gettext . _translations = { }
 if not self . _is_rendered :
                  next_item = list_ [ i + 1 ]
 return tpl . format ( self . name , self . sysid , self . pubid )
 while 1 :
 import re
              if saved_locale is not None :
 constant_arg , var_arg = match . group ( "constant_arg" , "var_arg" )
 if settings . FORCE_SCRIPT_NAME is not None :
  else :
    id = "literal"
 os . dup2 ( se . fileno ( ) , sys . stderr . fileno ( ) )
 return self
  return not ( ( converter ( opts . db_table ) in tables ) or  ( opts . auto_created and converter ( opts . auto_created . _meta . db_table ) in tables ) )
              HTMLParser . __init__ ( self , strict = False )
   try :
    def do_translate ( message , translation_function ) :
  else :
              file = tempfile . NamedTemporaryFile ( suffix = '.upload' )
 if language_code not in self . _reverse_dict :
              return False
   def create_variable_node ( self , contents ) :
 warnings . warn ( warn_msg , TranslatorCommentWarning )
              return list ( self . iterlists ( ) )
 self . find_template_cache = { }
 self . hashvalue = hash ( tup )
   def root_attributes ( self ) :
 from django . utils . six . moves . urllib . parse import parse_qsl , urlencode , quote , urljoin , urlsplit
 hhmm = '%02d%02d' % divmod ( abs ( offset ) , 60 )
              if six . PY3 :
          return self . __name
                  raise ImproperlyConfigured ( 'The SECURE_PROXY_SSL_HEADER setting must be a tuple containing two values.' )
   forms_valid &= form . is_valid ( )
    _urllib_request_moved_attributes = [  MovedAttribute ( "urlopen" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "install_opener" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "build_opener" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "pathname2url" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "url2pathname" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "getproxies" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "Request" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "OpenerDirector" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPDefaultErrorHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPRedirectHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPCookieProcessor" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "ProxyHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "BaseHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPPasswordMgr" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPPasswordMgrWithDefaultRealm" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "AbstractBasicAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPBasicAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "ProxyBasicAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "AbstractDigestAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPDigestAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "ProxyDigestAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPSHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "FileHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "FTPHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "CacheFTPHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "UnknownHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPErrorProcessor" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "urlretrieve" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "urlcleanup" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "URLopener" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "FancyURLopener" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "proxy_bypass" , "urllib" , "urllib.request" ) ,  ]
          raise ValueError ( "The %s could not be %s because the data didn't"  " validate." % ( opts . object_name , fail_message ) )
      status_code = 302
          return strftime ( self , fmt )
              mw_class = import_string ( middleware_path )
              raise PageNotAnInteger ( 'That page number is not an integer' )
 overlapped = OVERLAPPED ( )
    if ip_str . count ( '::' ) > 1 :
          value = ungettext ( "%(size)d byte" , "%(size)d bytes" , bytes ) % { 'size' : bytes }
  else :
 if isinstance ( error , ValidationError ) :
   except GeneratorExit :
          timezone = get_current_timezone ( )
 for key , value in dict . items ( self ) :
  elif var_arg :
  else :
 return Template ( source , origin , name )
  elif self . use_ipv6 and not _fqdn :
   def writer_leaves ( self ) :
                  if hasattr ( middleware , 'process_request' ) :
              handler . addQuickElement ( "rights" , self . feed [ 'feed_copyright' ] )
 handler . addQuickElement ( "name" , item [ 'author_name' ] )
  headerlist . append ( 'HTTP_' + header )
                      exclude . append ( f . name )
     def infix ( bp , func ) :
 if ( ( context . autoescape and not isinstance ( value , SafeData ) ) or  isinstance ( value , EscapeData ) ) :
  l = - ( - dklen // hlen )
 for app_label , app_migrations in changes . items ( ) :
 self . _raw_ipv6 = bool ( self . use_ipv6 )
              if isinstance ( form . _meta . fields , tuple ) :
 from django . core . management . sql import sql_indexes
 return self . _html_output (  normal_row = '<li%(html_class_attr)s>%(errors)s%(label)s %(field)s%(help_text)s</li>' ,  error_row = '<li>%s</li>' ,  row_ender = '</li>' ,  help_text_html = ' <span class="helptext">%s</span>' ,  errors_on_separate_row = False )
 if router . allow_migrate ( self . using , obj . object . __class__ ) :
 six . reraise ( os_err_exc_type , os_err_exc_type ( 'Error executing %s: %s' %  ( args [ 0 ] , strerror ) ) , sys . exc_info ( ) [ 2 ] )
                  return template . render ( context )
 self . choice_label = force_text ( choice [ 1 ] )
   def more ( self ) :
              for item in six . iteritems ( dict_ ) :
  elif token_string . startswith ( COMMENT_TAG_START ) :
 if self . variable_name :
  if args :
     @ register . filter ( is_safe = True , needs_autoescape = True )
   changes = dict (  ( app , [ Migration ( "custom" , app ) ] )  for app in app_labels  )
 if extend :
  sub = ''
 day = int ( m . group ( 'day' ) )
   class Command ( AppCommand ) :
      from django . utils import translation
  if remaining is None :
     elif field in self . _errors . keys ( ) :
 digits = [ six . text_type ( digit ) for digit in reversed ( digits ) ]
  return name . replace ( '_' , ' ' ) . capitalize ( )
              return 'StopUpload: Halt current upload.'
 self . objects = [ ]
              settings . BASE_DIR
     class IncludeNode ( Node ) :
 if len ( words ) > length :
  else :
    migrations_to_squash = [  executor . loader . get_migration ( al , mn )  for al , mn in executor . loader . graph . forwards_plan ( ( migration . app_label , migration . name ) )  if al == migration . app_label  ]
   else :
                  return getattr ( instance , name ) ( value )
 six . reraise ( CommandError , CommandError ( new_msg ) , sys . exc_info ( ) [ 2 ] )
    def clear ( self ) :
   return view_func
  if filters :
  if lang_code :
 from django . core . serializers . python import Serializer as PythonSerializer
 try :
          return build_request_repr ( self )
              attrs . setdefault ( 'step' , 'any' )
              return key [ 0 ]
 timetuple = dt . timetuple ( )
          import pylibmc
 keys = _iterkeys
         @ register . filter ( expects_localtime = True , is_safe = False )
  connection = connections [ options [ 'database' ] ]
  except AttributeError :
  if not data and initial :
  if isinstance ( value , six . text_type ) :
 result ^= _bin_to_long ( u )
   def handle_fk_field ( self , obj , field ) :
                          data = field_stream . read ( )
      server_address = ( addr , port )
              raise TypeError
   else :
 if safe is not None :
  else :
  return result
  def configure ( self ) :
 msg = SafeMIMEMultipart ( _subtype = self . alternative_subtype , encoding = encoding )
          try :
                   query_string = query_string . decode ( )
          opts = self . _meta
   def __iter__ ( self ) :
 for key_value in natural :
 pass
 readinto = property ( lambda self : self . file . readinto )
              return initial
                      value = getattr ( self , 'clean_%s' % name ) ( )
 result = str ( int ( round ( ratio ) ) )
                      return True
              signals . got_request_exception . send ( sender = self . __class__ , request = request )
 while rbp < self . current_token . lbp :
   if self . asvar :
 exclude = [ ]
  from django . template . base import Variable , Library , VariableDoesNotExist
              try :
                       value . decode ( charset )
 return re . sub ( r'>\s+<' , '><' , force_text ( value ) )
  elif ch == '.' :
                                  self . stderr . write ( "    Failed to install index for %s.%s model: %s\n" % ( app_name , model . _meta . object_name , e ) )
          return File ( open ( self . path ( name ) , mode ) )
              raise ValueError ( 'Sign character found in converter base digits.' )
                      obj . delete ( )
                      construct_instance_exclude . append ( name )
 from django . utils . encoding import force_str
      class BoundaryIter ( six . Iterator ) :
   def validate_ipv6_address ( value ) :
              file_name = data . name
 self . digits = digits
      def __init__ ( self , format_string ) :
  import re
     @ python_2_unicode_compatible
 message = ungettext_lazy (  'Ensure this value has at least %(limit_value)d character (it has %(show_value)d).' ,  'Ensure this value has at least %(limit_value)d characters (it has %(show_value)d).' ,  'limit_value' )
  def __init__ ( self , value ) :
   response . _closable_objects . append ( request )
 name = self . _save ( name , content )
  migration_string = writer . as_string ( )
          return ''
   def unsign ( self , value , max_age = None ) :
 def __iter__ ( self ) :
      input_type = 'number'
                  files . append ( entry )
              nodes . append ( self )
   if any ( e . is_serious ( ) and not e . is_silenced ( ) for e in all_issues ) :
   if initial is not None :
     class Archive ( object ) :
    @ register . filter ( is_safe = True )
                  c = int ( text )
                          len_item = 1
              seen_data = set ( )
   def __call__ ( self , f ) :
 from email import ( charset as Charset , encoders as Encoders ,  message_from_string , generator )
              os . remove ( fname )
          if self . deactivate :
 def __init__ ( self , subject ) :
          raise ValueError ( "%r is not in a valid HTTP date format" % date )
 if decompress :
          if hasattr ( self , '_files' ) :
 return template , None
   def __str__ ( self ) :
                  self . connection . quit ( )
   def with_metaclass ( meta , * bases ) :
                  if reduce ( operator . eq , level ) :
   def reload ( self ) :
  else :
 yield ( tok . name , toktext )
 if not ext and content_type :
 from django . utils . encoding import force_str
    def same_origin ( url1 , url2 ) :
   self . creation_counter = Field . creation_counter
  if item [ 'ttl' ] is not None :
 days = ( 'Mon' , 'Tue' , 'Wed' , 'Thu' , 'Fri' , 'Sat' , 'Sun' )
 self . obj = obj
  def add_arguments ( self , parser ) :
                      continue
          if self . options . get ( 'indent' , None ) is not None :
 if settings . USE_TZ and value is not None and timezone . is_naive ( value ) :
              self . cookies [ key ] [ 'httponly' ] = True
              if self . _read_started :
 d = data . get ( self . day_field % name )
          obj = super ( MultiWidget , self ) . __deepcopy__ ( memo )
  from django . forms . utils import *
  result = self . __class__ ( )
  filter_re = re . compile ( filter_raw_string , re . UNICODE | re . VERBOSE )
          if not formset . is_valid ( ) :
    else :
          is_dst = False if dt is None else self . _isdst ( dt )
   def utcoffset ( self , dt ) :
  output [ - 1 ] = last_row [ : - len ( row_ender ) ] + str_hidden + row_ender
  tzinfo = kw . pop ( 'tzinfo' )
 del self [ 'Content-Transfer-Encoding' ]
 raise StopFutureHandlers ( )
  from django import http
  nodelist = [ ]
  self . _callback_str = prefix + '.' + self . _callback_str
    else :
                          raw_data = field_stream . read ( )
   def __getitem__ ( self , i ) :
  try :
 resolver = urlresolvers . RegexURLResolver ( r'^/' , urlconf )
 show_traceback = options . get ( 'traceback' )
 return self . __copy__ ( )
          if parse_until :
                  logger . addHandler ( self . config [ 'handlers' ] [ h ] )
 message = _ ( 'Enter a valid URL.' )
   def add_post_render_callback ( self , callback ) :
   def escape ( text ) :
          final_attrs = dict ( self . attrs , type = self . input_type , name = self . name , value = self . choice_value )
     for opt in [ 'fields' , 'exclude' , 'localized_fields' ] :
   creation_counter = 0
   quant = [ ]
   def value_from_datadict ( self , data , files , name ) :
       def __init__ ( self , key = None , sep = ':' , salt = None ) :
 self . use_ipv6 = True
  def write ( data ) :
 from django . utils . ipv6 import clean_ipv6_address
 orig_file = os . path . join ( self . dirpath , self . file )
                  bits = token . split_contents ( ) [ 1 : ]
  else :
 if hasattr ( text , '__html__' ) :
 if not config_string :
  elif ns not in app_list :
    @ register . filter ( is_safe = True )
 node . replace ( decorated )
 acceptable_endblocks = ( 'endblock' , 'endblock %s' % block_name )
    validate_email = EmailValidator ( )
 @ stringfilter
                       field_value = getInnerText ( node ) . strip ( )
 decorator = Node ( syms . decorator , [ Leaf ( token . AT , "@" ) , Name ( 'python_2_unicode_compatible' ) ] )
 def get_default_prefix ( cls ) :
              if is_library_missing ( taglib_module ) :
              os . utime ( dst , ( st . st_atime , st . st_mtime ) )
              tmp = url . rstrip ( '/' )
  else :
          upload = super ( ClearableFileInput , self ) . value_from_datadict ( data , files , name )
  if not self . is_bound :
 return WEEKDAYS_ABBR [ self . data . weekday ( ) ]
  register = Library ( )
 method = kwargs . pop ( 'method' )
                  s = six . text_type ( s )
                  keys = n . getElementsByTagName ( 'natural' )
                      c = subject [ i ]
 if charset == 'utf-8' :
    else :
              print ( "Running post-migrate handlers for application %s" % app_config . label )
              try :
          return ( len ( self . queryset ) +  ( 1 if self . field . empty_label is not None else 0 ) )
                  return func ( * self . __args , ** self . __kw )
   def camel_case_to_spaces ( value ) :
                  return self . __text_cast ( )
                  if isinstance ( callback , types . FunctionType ) :
  create_models = set ( itertools . chain ( * manifest . values ( ) ) )
  raise
   def get_fixed_timezone ( offset ) :
 view = parts [ 0 ]
 for field in self . fields . values ( ) :
 notifier . stop ( )
   def is_checked ( self ) :
  def indent ( self , level ) :
 base = force_text ( base )
   def language ( self ) :
   response = self . get_exception_response ( request , resolver , 400 )
  else :
 return self . _cache . add ( key , value , self . get_backend_timeout ( timeout ) )
     class TemplateResponse ( SimpleTemplateResponse ) :
 _cached_filenames += new_filenames
 domain_regex = re . compile (    r'(?:[A-Z0-9](?:[A-Z0-9-]{0,247}[A-Z0-9])?\.)+(?:[A-Z]{2,6}|[A-Z0-9-]{2,}(?<!-))$' ,  re . IGNORECASE )
     @ python_2_unicode_compatible
    if current_len <= length :
 for i in range ( len ( result ) ) :
      status_code = 404
   if not response . has_header ( 'Last-Modified' ) :
  return value
                  import_module ( templatetag_module )
  else :
                        if isinstance ( receiver , types . FunctionType ) :
  return list ( _serializers )
   def __nonzero__ ( self ) :
 try :
           self . blocks = defaultdict ( list )
 return mark_safe ( _urlize ( value , trim_url_limit = int ( limit ) , nofollow = True ,  autoescape = autoescape ) )
 assert iterations > 0
                  usage . append ( "" )
                      message %= error . params
   def list ( self , * args , ** kwargs ) :
 for app_dir in app_dirs :
 if len ( compressed ) < ( len ( data ) - 1 ) :
  from django . conf import settings
 parser . add_argument ( '--exclude' , '-x' , default = [ ] , dest = 'exclude' , action = 'append' ,  help = 'Locales to exclude. Default is none. Can be used multiple times.' )
              raise ValueError ( 'ModelForm has no model class specified.' )
   chunk = b'' . join ( chunks )
                          locks . unlock ( fd )
   def as_json ( self , escape_html = False ) :
   def add ( self , data , conn_type , squash = True ) :
 if format_module_path :
    def get ( self , key , default = None , version = None ) :
  else :
 if os . path . isfile ( f ) :
                   if ( attr in ( "__file__" , "__name__" , "__path__" ) and  self . mod not in sys . modules ) :
 if self . require_all_fields :
   def __bool__ ( self ) :
                      filter_expression = self . compile_filter ( token . contents )
     @ register . filter ( is_safe = False )
 return ( RAW , { } , stream )
              return self . DSTDIFF
                      retval = newretval
 self . can_write . release ( )
   def __nonzero__ ( self ) :
          if hasattr ( response , 'render' ) and callable ( response . render ) :
              if self . active_writers == 0 and self . waiting_writers == 0 :
 if fd >= 0 :
 raise
 if finder is None :
          instance = construct_instance ( form , instance , fields , exclude )
              args = [ '"%s"' % arg for arg in args ]
  except ( LookupError , TypeError ) :
 text_kwargs = dict ( ( k , force_text ( v ) ) for ( k , v ) in kwargs . items ( ) )
 from django . core . exceptions import ImproperlyConfigured
    daemon_kwargs = { }
 if len ( bits ) < 2 :
     set_script_prefix ( get_script_name ( environ ) )
 leave_locale_alone = False
              return False
  try :
                      raise
          _load_serializers ( )
              return
                    raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
 for char in fmt :
          raise Exception ( "This %s instance is not writable" % self . __class__ . __name__ )
 result = ugettext ( msg_with_ctxt )
 def _cache ( self ) :
  if kwargs is None :
   def accessed_time ( self , name ) :
              encoding = self . encoding or settings . DEFAULT_CHARSET
    return obj_dict
              return [ ]
  while k < endpos :
  new_environ = os . environ . copy ( )
          if response . streaming :
                              out . write ( blankout ( part , 'S' ) )
          return [ ]
          data = zlib . decompress ( data )
  m2m_data [ field . name ] = [ m2m_convert ( pk ) for pk in field_value ]
              format_module_path = [ format_module_path ]
    if self . file_permissions_mode is not None :
 from django . db import connections , DEFAULT_DB_ALIAS
                      response = wrapped_callback ( request , * callback_args , ** callback_kwargs )
   for filename in filenames :
  sign = '-' if offset < 0 else '+'
 zfile = GzipFile ( mode = 'wb' , compresslevel = 6 , fileobj = buf )
 import struct
 return force_text ( iri_to_uri ( value ) )
   def start_object ( self , obj ) :
          self . filepath = filepath
  url_info = urlparse ( url )
   return output
   def __hash__ ( self ) :
  if error_messages is not None :
 self . __to_language = to_language ( language )
  else :
  if settings . DEBUG :
              self . stream = stream_or_string
                  if error . code == code :
 import sys
 if not self . leave_locale_alone :
  except ValueError :
 raise NotImplementedError ( 'subclasses of Serializer must provide a start_serialization() method' )
  from django . core . files import File
          self . _fname = None
                      filemsg = ''
   def add ( self , item ) :
 WEEKDAYS_REV = {  'monday' : 0 , 'tuesday' : 1 , 'wednesday' : 2 , 'thursday' : 3 , 'friday' : 4 ,  'saturday' : 5 , 'sunday' : 6  }
 from django . utils import six
            self . token_type , self . contents = token_type , contents
  else :
 return timesince ( d , now , reversed = True )
          connection = connections [ options . get ( 'database' ) ]
                          os . makedirs ( directory , self . directory_permissions_mode )
          self . style = color_style ( )
   if ( middle . endswith ( closing )  and middle . count ( closing ) == middle . count ( opening ) + 1 ) :
  super ( Command , self ) . handle ( 'project' , project_name , target , ** options )
          defaults = parser . parse_args ( args = args )
                              cursor . execute ( statement )
    def symlinks_supported ( ) :
 s = force_text ( s ) . strip ( ) . replace ( ' ' , '_' )
    def get_max_age ( response ) :
          return os . path . join ( self . dirpath , self . file )
 raise CommandError ( "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'" % name_str )
                      lineno_comment_map . setdefault ( t . lineno ,  [ ] ) . append ( t . contents )
               self . _func_path = '.' . join ( [ func . __class__ . __module__ , func . __class__ . __name__ ] )
              raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
    def validate_domain_part ( self , domain_part ) :
  return quote ( force_bytes ( iri ) , safe = b"/#%[]=:;$&()+,!?*@'~" )
   if path is not None :
                  context [ 'block' ] = self
    class Literal ( TokenBase ) :
          return number_format ( value )
     def parse_etags ( etag_str ) :
    except ValueError :
 context . render_context . push ( )
  r = o . isoformat ( )
                  if self . verbosity > 0 :
              if isinstance ( value , Field ) :
  except TemplateDoesNotExist as e :
   if func is None :
 tzinfo . __init__ ( self )
  return super ( SimpleTemplateResponse , self ) . __iter__ ( )
 super ( QueryDict , self ) . __setitem__ ( key , value )
 message_context = None
  if help_texts and f . name in help_texts :
   default_error_messages = {  'invalid_choice' : _ ( 'Select a valid choice. That choice is not one of'  ' the available choices.' ) ,  }
          if isinstance ( data , ( MultiValueDict , MergeDict ) ) :
 content = template . render ( context )
              alter_sql . extend ( [ '-- ' + sql for sql in  connection . creation . sql_for_pending_references ( model , style , pending_references ) ] )
  else :
              return ""
  out . write ( ' pgettext(%r, %r) ' % ( message_context , g ) )
      """     Adds (or updates) the "Vary" header in the given HttpResponse object.     newheaders is a list of header names that should be in "Vary". Existing     headers in "Vary" aren't removed.     """
 self [ 'Allow' ] = ', ' . join ( permitted_methods )
 return f ( * args , ** kwargs )
   def validate ( self , value ) :
 if len ( fks_to_parent ) == 1 :
   def clear_cdata_mode ( self ) :
   @ property
                  if subject [ i ] in ( '"' , "'" ) :
 from django . db . models import AutoField , OneToOneField , ForeignKey
 choices = [ ( i , i ) for i in range ( 1 , 32 ) ]
          return is_library_missing ( path )
     class MemcachedCache ( BaseMemcachedCache ) :
   def widget_attrs ( self , widget ) :
   if not matches :
 file_list = self . find_files ( "." )
   if fdel is not None :
  __all__ = [  'CachedDnsName' , 'DNS_NAME' , 'EmailMessage' , 'EmailMultiAlternatives' ,  'SafeMIMEText' , 'SafeMIMEMultipart' , 'DEFAULT_ATTACHMENT_MIME_TYPE' ,  'make_msgid' , 'BadHeaderError' , 'forbid_multi_line_headers' ,  'get_connection' , 'send_mail' , 'send_mass_mail' , 'mail_admins' ,  'mail_managers' ,  ]
 from importlib import import_module
   def _has_changed ( self , initial , data ) :
                               self . required , self . label , self . initial = required , label , initial
     __delitem__ = complain
          return (  isinstance ( other , RegexValidator ) and  self . regex . pattern == other . regex . pattern and  self . regex . flags == other . regex . flags and  ( self . message == other . message ) and  ( self . code == other . code ) and  ( self . inverse_match == other . inverse_match )  )
 return value . tzinfo is None or value . tzinfo . utcoffset ( value ) is None
 open_method , mode = self . compression_formats [ cmp_fmt ]
  except IOError as e :
              yield obj
 from __future__ import unicode_literals
 from django . core . management import call_command
  if target_app_labels_only :
   empty = object ( )
 from django . utils import six
    def getvalue ( self ) :
  def __init__ ( self , choices = ( ) , required = True , widget = None , label = None ,  initial = None , help_text = '' , * args , ** kwargs ) :
 def now ( parser , token ) :
   try :
              return path
                  pass
 return self
   class EmailBackend ( BaseEmailBackend ) :
 if not self . use_argparse :
          self . token = token
          if value :
 return self . forms [ index ]
  else :
  return False
 for key in self . bad_cookies :
 from django . apps import apps
    @ register . tag
 nodelist = parser . parse ( )
                          continue
  options [ option ] = value
    def smart_text ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :
 if filename :
  else :
  output = [ ]
    else :
 month = months [ date . month - 1 ]
              regex = re . compile ( regex , re . UNICODE )
              raise ValidationError ( self . message , code = self . code )
    class Parser ( object ) :
   def get_nodes_by_type ( self , nodetype ) :
 try :
        constant_string = r""" (?:%(i18n_open)s%(strdq)s%(i18n_close)s| %(i18n_open)s%(strsq)s%(i18n_close)s| %(strdq)s| %(strsq)s) """ % {  'strdq' : r'"[^"\\]*(?:\\.[^"\\]*)*"' ,  'strsq' : r"'[^'\\]*(?:\\.[^'\\]*)*'" ,  'i18n_open' : re . escape ( "_(" ) ,  'i18n_close' : re . escape ( ")" ) ,  }
          if memo is None :
 attrs = { 'form' : form , 'extra' : extra ,  'can_order' : can_order , 'can_delete' : can_delete ,  'min_num' : min_num , 'max_num' : max_num ,  'absolute_max' : absolute_max , 'validate_min' : validate_min ,  'validate_max' : validate_max }
 self . fixture_object_count = 0
 self . port = DEFAULT_PORT
  return retval
          return mark_safe ( six . text_type ( value ) )
 value = p [ i + 1 : ] . strip ( )
  data = b64_decode ( base64d )
                  return format_html ( "" )
  return ustring_re . sub ( fix , s )
 parser . add_argument ( '--format' , default = 'json' , dest = 'format' ,  help = 'Specifies the output serialization format for fixtures.' )
  else :
   return data
  if help_texts is not None :
    def get_language_from_request ( request , check_path = False ) :
      input_type = 'file'
 response = callback ( request , ** param_dict )
 dig1 . update ( u )
  except ValueError :
  from django . utils import termcolors
 inputs = [ ]
              model , deps = model_dependencies . pop ( )
  return field_dict
 return form
  try :
  if not locale_dir :
                  continue
  Module_six_moves_urllib_response . _moved_attributes = _urllib_response_moved_attributes
 if hasattr ( self , '_regex_validator' ) and self . _regex_validator in self . validators :
                  ser_fmt = parts [ - 1 ]
                              out . write ( blankout ( part , 'S' ) )
 super ( CommandParser , self ) . __init__ ( ** kwargs )
               return False
               return
      from shutil import copystat
   def __getitem__ ( self , index ) :
                          if iso_input not in val :
 to_unicode = lambda s : force_text ( s , strings_only = True )
  created_models = self . sync_apps ( connection , executor . loader . unmigrated_apps )
 return binascii . unhexlify ( ( hex_format_string % x ) . encode ( 'ascii' ) )
                          return middleware . process_response ( request , response )
              val = None
 return self . add_truncation_text ( ' ' . join ( words ) , truncate )
    def iter_format_modules ( lang , format_module_path = None ) :
                  warnings . warn (  "No fixture data found for '%s'. (File format may be "  "invalid.)" % fixture_name ,  RuntimeWarning  )
          return cls . __new__ ( cls , * args )
   def __repr__ ( self ) :
    if os . name == 'nt' :
 self . upload_handlers = ImmutableList (  self . upload_handlers ,  warning = "You cannot alter upload handlers after the upload has been processed."  )
 for name in loggers :
    def do_ifequal ( parser , token , negate ) :
 original_path = os . path . join ( tmpdir , 'original' )
 self . password = settings . EMAIL_HOST_PASSWORD if password is None else password
    if ( ( ip_str . startswith ( ':' ) and not ip_str . startswith ( '::' ) ) or  ( ip_str . endswith ( ':' ) and not ip_str . endswith ( '::' ) ) ) :
          asvar = bits [ - 1 ]
           connection = connections [ options [ 'database' ] ]
  password = force_bytes ( password )
    run_syncdb = False
          if not os . path . exists ( self . _dir ) :
 return strip_spaces_between_tags ( self . nodelist . render ( context ) . strip ( ) )
 self . second = parser . expression ( bp )
    def xreadlines ( self ) :
 from django . core . mail . message import (  EmailMessage , EmailMultiAlternatives ,  SafeMIMEText , SafeMIMEMultipart ,  DEFAULT_ATTACHMENT_MIME_TYPE , make_msgid ,  BadHeaderError , forbid_multi_line_headers )
  requires_system_checks = False
  if filename . endswith ( "$py.class" ) :
                  return self . extract ( absolute_path )
  def add_arguments ( self , parser ) :
  if filename . endswith ( ( '/' , '\\' ) ) :
              return self [ key ]
                  if not isinstance ( node , ExtendsNode ) :
 def encoding ( self ) :
 known_models = set ( model for model in connection . introspection . installed_models ( tables ) if model not in app_models )
  vary_headers = cc_delim_re . split ( response [ 'Vary' ] )
   def tzname ( self , dt ) :
    def urlsafe_base64_decode ( s ) :
          if kwarg_format :
 if not template_name_list :
  if not file_name :
 bits = token . split_contents ( )
  if self . number == self . paginator . num_pages :
  else :
 from django . db import connections , DEFAULT_DB_ALIAS
          path = str ( path )
    def download ( self , url ) :
              return [ ]
 self . value = force_text ( self . value )
                           from django . core . exceptions import ImproperlyConfigured
  else :
              if migration . replaces :
              selected_html = ''
              sys . stderr . write ( "fork #2 failed: (%d) %s\n" % ( e . errno , e . strerror ) )
 self . stdout . write ( "  all instances of the codebase have applied the migrations you squashed," )
  from django . core . management . base import BaseCommand , CommandError
   def __eq__ ( self , other ) :
 self . __locale = to_locale ( language )
              self . message = message
 from importlib import import_module
                      confirm = input ( 'Please enter either "yes" or "no": ' )
 self . _errors = ErrorDict ( )
          try :
 handler . startElement ( 'feed' , self . root_attributes ( ) )
              return parent
  for k , list_ in self . lists ( ) :
          if args :
 code = 'invalid'
   else :
              taglib_module = '%s.%s' % ( module , library_name )
                          response = middleware . process_template_response ( request , response )
 if refto in known_models :
              msg += ending
   def blankout ( src , char ) :
    def _set ( self , key , value , timeout = DEFAULT_TIMEOUT ) :
              return True
 if member . isdir ( ) :
 try :
 from django . utils . deprecation import RemovedInDjango19Warning , RemovedInDjango20Warning
   def javascript_quote ( s , quote_double_quotes = False ) :
  root = nonlocal_root [ 0 ] = oldroot [ NEXT ]
  with open ( new_path , 'wb' ) as new_file :
    def to_current_timezone ( value ) :
                  raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : val } ,  )
  local_attrs = self . build_attrs ( id = field % id_ )
                          pass
      pass
                  return default
              base_url = settings . MEDIA_URL
          if bits [ 2 ] == 'parsed' :
   def __iter__ ( self ) :
                          deps . append ( rel_model )
              formfield = self . fields [ field_name ]
import warnings
  from collections import OrderedDict
 counters [ i ] += chunk_length
   if bad_app_labels :
                  name = self . split_leading_dir ( name ) [ 1 ]
          pieces = [ ]
   reverse_lazy = lazy ( reverse , str )
  return [ source [ 0 ] ] , [ params ]
   else :
 import sys
  else :
      widget = DateTimeInput
   def __lt__ ( self , other ) :
   try :
     def _has_changed ( self , initial , data ) :
              return SafeBytes ( data )
          raise ImproperlyConfigured ( 'Loader does not define a "load_template" callable template source loader' )
 import warnings
  else :
              continue
 import os
  try :
 def __add__ ( self , rhs ) :
 try :
   def as_tuple ( self , value ) :
  except InputStreamExhausted :
 parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to flush. Defaults to the "default" database.' )
  def add_item_elements ( self , handler , item ) :
          if value is None :
    class HttpResponseNotFound ( HttpResponse ) :
 sys . stderr . write ( "  installed flup, then make sure you have it in your PYTHONPATH.\n" )
     url = None
          return json . dumps ( obj , separators = ( ',' , ':' ) ) . encode ( 'latin-1' )
                  dirs = [ os . path . join ( basedir , l , 'LC_MESSAGES' ) for l in locales ]
    @ wraps ( func )
              _ = { }
 return connection . send_messages ( messages )
                      raise TemplateSyntaxError ( "'%s' is not a valid tag or filter in tag library '%s'" %  ( name , taglib ) )
  candidate_subs = dict ( zip ( prefix_args + params , text_args ) )
 self . queryset = queryset
               raise NotImplementedError (  "Subclasses of AppCommand must provide"  "a handle_app_config() method." )
                  continue
  except UnicodeEncodeError :
   def __repr__ ( self ) :
 super ( QueryDict , self ) . clear ( )
          result = super ( ChoiceField , self ) . __deepcopy__ ( memo )
              media = media + w . media
          for var in self . vars :
 class StopUpload ( UploadFileException ) :
  finally :
 from django . forms . fields import Field , FileField
          return t . render ( Context ( dictionary ) )
  def __init__ ( self , regex = None , message = None , code = None , inverse_match = None , flags = None ) :
 dict . __setitem__ ( self , key , http_cookies . Morsel ( ) )
              field_list . append ( ( f . name , formfield ) )
          def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None ,  initial = None , error_class = ErrorList , label_suffix = None ,  empty_permitted = False ) :
          return ''
  related = related . natural_key ( )
    if six . PY3 :
  return self . parent_instance
          parser . add_argument ( 'args' , metavar = 'app_label' , nargs = '+' ,  help = 'One or more application label.' )
          return value
     if settings . is_overridden ( 'ADMINS' ) :
  if isinstance ( s , Promise ) :
              for x , y in zip ( val1 , val2 ) :
 try :
              result = self . find_template_cache [ key ]
   def handle_app_config ( self , app_config , ** options ) :
              return
 condition = TemplateIfParser ( parser , bits ) . parse ( )
          return pformat ( value )
  else :
                        self . children . extend ( data . children )
      help = 'Compiles .po files to .mo files for use with builtin gettext support.'
               obj = super ( klass , cls ) . __new__ ( cls )
                        tt = ( 2037 , ) + tt [ 1 : ]
              value = float ( value )
                  yield import_module ( '%s.formats' % ( location % loc ) )
   def deconstruct ( obj ) :
              subcommand_cls = self . fetch_command ( cwords [ 0 ] )
 app_dirs = [ ]
                  space = line [ : max_width + 1 ] . rfind ( ' ' ) + 1
              raise ValueError ( 'must define at least one ordering operation: < > <= >=' )
  self . stdout . write ( "Performing system checks...\n\n" )
  self . error ( "junk characters in start tag: %r"  % ( rawdata [ k : endpos ] [ : 20 ] , ) )
     def _check_boolean_field_default_value ( app_configs = None , ** kwargs ) :
  from django . apps import apps
   message = "%s\n\nRequest repr(): %s" % ( self . format ( record ) , request_repr )
                  return
          output = [ ]
            opts = self . _meta
 super ( DecimalField , self ) . __init__ ( max_value , min_value , * args , ** kwargs )
    if resolver . urlconf_module is None :
 id_ = widget . attrs . get ( 'id' ) or self . auto_id
           return force_str ( super ( BaseMemcachedCache , self ) . make_key ( key , version ) )
           self . verbosity = options . get ( 'verbosity' )
          result = getattr ( t , translation_function ) ( eol_message )
    if not self . addr :
                  del self . cleaned_data [ field ]
   def widget_attrs ( self , widget ) :
   self . stdout . write ( output )
 def divisibleby ( value , arg ) :
 _expire_info = { }
 output = [ ]
          self . tags [ getattr ( func , "_decorated_function" , func ) . __name__ ] = func
    for key , value in six . iteritems ( kwargs ) :
 result = factory ( ** kwargs )
                  return cached
 dig2 . update ( dig1 . digest ( ) )
              return host
          token = get_token ( request )
     class ForNode ( Node ) :
from __future__ import unicode_literals
 sub_ul_renderer . choice_input_class = self . choice_input_class
     _entity_re = re . compile ( r"&(#?[xX]?(?:[0-9a-fA-F]+|\w{1,8}));" )
  return get_template ( parent )
 self . field_name = field_name
   class Module_six_moves_urllib_request ( _LazyModule ) :
   return _localtime
  return self . _fqdn
  except Exception :
 return django . get_version ( )
          return locale [ : p ] . lower ( ) + '-' + locale [ p + 1 : ] . lower ( )
 return date ( d . year , d . month , d . day )
 if isinstance ( server , six . string_types ) :
  from django . utils . deprecation import RemovedInDjango19Warning
from __future__ import unicode_literals
  def start_serialization ( self ) :
                      temp_lib . filters [ name ] = lib . filters [ name ]
 result . key = key
 try :
 from django . utils . functional import cached_property
                      args . append ( ( False , Variable ( constant_arg ) . resolve ( { } ) ) )
                      try :
 from django . utils . module_loading import import_string
 self . current_token = self . next_token ( )
   def attach ( self , filename = None , content = None , mimetype = None ) :
   def __repr__ ( self ) :
 start_ipython ( argv = [ ] )
 if isinstance ( filename , MIMEBase ) :
          attrs [ 'error_messages' ] = error_messages
                  d = m . groupdict ( )
              return self . nodelist . render ( context )
 parser . add_argument ( '--nothreading' , action = 'store_false' , dest = 'use_threading' , default = True ,  help = 'Tells Django to NOT use threading.' )
              TYPE = FIELD
 if os . path . isdir ( os . path . join ( 'conf' , 'locale' ) ) :
              raise ValidationError (  self . error_messages [ 'max_whole_digits' ] ,  code = 'max_whole_digits' ,  params = { 'max' : ( self . max_digits - self . decimal_places ) } ,  )
              if hasattr ( message , 'error_dict' ) :
 from django . utils import six
   self . _errors [ field ] . extend ( error_list )
                      cache . clear ( )
 def filesizeformat ( bytes ) :
  except KeyError :
              for subnode in node :
  if max_value is not None :
 self . use_natural_primary_keys = options . pop ( 'use_natural_primary_keys' , False )
 if errors is None :
 super ( WSGIServer , self ) . server_bind ( )
    class MiddlewareNotUsed ( Exception ) :
 seek = property ( lambda self : self . file . seek )
   return value . replace ( tzinfo = timezone )
   class Tags ( object ) :
 def body ( self ) :
 result = self . configurator . convert ( value )
  except KeyError :
   if max_age is not None :
   try :
  if data is None :
 data = method ( self , * args , ** kwargs )
  sys . modules [ __name__ + ".moves.urllib_parse" ] = sys . modules [ __name__ + ".moves.urllib.parse" ] = Module_six_moves_urllib_parse ( __name__ + ".moves.urllib_parse" )
    @ register . filter ( is_safe = True , needs_autoescape = True )
      return _trans . templatize ( src , origin )
              for x , y in zip ( val1 , val2 ) :
           logging_config_func = import_string ( logging_config )
    def handle ( self , * args , ** options ) :
   def is_iterable ( x ) :
              if key in d :
  return value
    else :
 self . name = name
 self . location = abspathu ( self . base_location )
 raise CommandError ( 'There is no system check with the "%s" tag.' % invalid_tag )
    class ModelForm ( six . with_metaclass ( ModelFormMetaclass , BaseModelForm ) ) :
    @ register . filter ( is_safe = True , needs_autoescape = True )
   def smart_split ( text ) :
   def open ( self , mode = None ) :
                  return True
  from django . apps import apps
  except ValueError :
 import logging
          return ''
          value = dict . pop ( self , key , default )
 from django . db import connections , DEFAULT_DB_ALIAS
     sys . modules [ __name__ + ".moves.urllib" ] = Module_six_moves_urllib ( __name__ + ".moves.urllib" )
          self . unpack_ipv4 = unpack_ipv4
          self . __dict__ . update ( state )
 args = ''
  _BASE64_DECODE_ERROR = TypeError if six . PY2 else binascii . Error
 parser . add_argument ( '--no-initial-data' , action = 'store_false' ,  dest = 'load_initial_data' , default = True ,  help = 'Tells Django not to load any initial data after database synchronization.' )
                      if hasattr ( middleware , 'process_template_response' ) :
                      value = flags [ attr ]
          register_serializer ( format , BUILTIN_SERIALIZERS [ format ] , serializers )
  user_settings = module_to_dict ( settings . _wrapped )
              return self . _truncate_html ( length , truncate , self . _wrapped , length , True )
 self . remaining = limit
 from django . utils . module_loading import module_has_submodule
          if self . _isdst ( dt ) :
  app_list = OrderedDict ( )
  except UnicodeDecodeError :
 return any ( form . has_changed ( ) for form in self )
 BASE16_ALPHABET = '0123456789ABCDEF'
                  self . literal = int ( self . literal )
   @ property
 _templatetags_modules . append ( templatetag_module )
              i += 1
 def errors ( self ) :
  def lock ( f , flags ) :
  return self . _client
                          out . write ( ' _(%s) ' % fmatch )
 import re
      from yaml import CSafeLoader as SafeLoader
   def strptime ( self , value , format ) :
 if urlconf_name :
    if self . verbosity >= 2 and not fixture_files_in_dir :
from __future__ import absolute_import
                  _locs_ = frame . f_locals
          if data_list :
   return func ( * args , ** kwargs )
 return force_text ( unquote_plus ( force_str ( quoted_url ) ) )
   def serialize ( self ) :
 for path in self . locale_paths :
 from django . utils . six . moves . urllib . request import urlretrieve
      def parse_header ( line ) :
 loop_dict [ 'revcounter0' ] = len_values - i - 1
  name = _resolve_name ( name [ level : ] , package , level )
 i += 1
              apps . get_model ( 'auth' , 'Permission' )
  return False
     return new_class
  try :
  except ( ValueError , TypeError ) :
 self . labels = getattr ( options , 'labels' , None )
  while rest :
          return t
 contents = contents or self . label
              stream_class = StringIO if isinstance ( content , six . text_type ) else BytesIO
              return
 subject = self . subject
      def __get__ ( self , instance , owner ) :
  elif bytes < GB :
 if response :
 message = _ ( 'Enter a valid value.' )
            class Trans ( object ) :
 ratio = ( value / max_value ) * max_width
                              raise ValueError ( "Non-reversible reg-exp portion: '(?P%s'" % ch )
          for dict_ in self . dicts :
 plural = [ ]
 substitutions [ 'input' ] = super ( ClearableFileInput , self ) . render ( name , value , attrs )
  except TypeError :
    _builtin_context_processors = ( 'django.core.context_processors.csrf' , )
  model_fields = Model . _meta . get_all_field_names ( )
                  sys . stdout . write ( self . main_help_text ( commands_only = True ) + '\n' )
          return singular
  for app_config in app_configs :
  except KeyboardInterrupt :
  raise TemplateDoesNotExist ( error_msg )
 if token . contents == 'empty' :
                    if var . find ( VARIABLE_ATTRIBUTE_SEPARATOR + '_' ) > - 1 or var [ 0 ] == '_' :
              try :
  if self . is_url ( template ) :
 trimmed = False
 value = value . replace ( b'\\\\' , b'\\' ) . replace ( b'\\"' , b'"' )
  else :
  view_name = self . view_name . resolve ( context )
 if message_context [ 0 ] == '"' :
   is_compressed = False
 if USE_INOTIFY :
      exec_ = getattr ( moves . builtins , "exec" )
              result = self . buffer + self . _read_limited ( size - len ( self . buffer ) )
          return ValidationError ( self . data ) . error_list
   class Command ( BaseCommand ) :
  initial_set = set ( force_text ( value ) for value in self . prepare_value ( initial ) )
  return ':' . join ( ret_ip )
      allowed_schemes = [ 'http' , 'https' , 'ftp' ]
  return handle_app ( app_config . models_module , ** options )
   if years :
                  data = data ( )
  if self . paginator . count == 0 :
 self . toks [ groupid ] = tok
 self . validate_key ( key )
  elif 'public' in cc and 'private' in kwargs :
     class TarArchive ( BaseArchive ) :
from __future__ import unicode_literals
 urlconf = settings . ROOT_URLCONF
 for c in response . cookies . values ( ) :
 value = converter ( suffix )
 domain = domain . encode ( 'idna' ) . decode ( 'ascii' )
   parts . append ( value )
  program = 'msgfmt'
      def execute_from_command_line ( argv = None ) :
 self . data = data or { }
 file_name = self . IE_sanitize ( unescape_entities ( file_name ) )
  output_transaction = True
 value = template_localtime ( value , use_tz = context . use_tz )
                      return ''
     def IE_sanitize ( self , filename ) :
 def truncatechars_html ( value , arg ) :
              return self
 f . write ( pickle . dumps ( expiry , - 1 ) )
 from django . conf import settings
  super ( RegexField , self ) . __init__ ( max_length , min_length , * args , ** kwargs )
 options = [ ( '--help' , None ) ]
 if value :
                  cache = caches [ cache_alias ]
  return no
   def initial_form_count ( self ) :
 if message :
   def _set_choices ( self , value ) :
          from django . conf import settings
          if not ext . startswith ( '.' ) :
 if not self . use_natural_primary_keys or not hasattr ( obj , 'natural_key' ) :
  if self . META . get ( header , None ) == value :
 basedirs . extend ( [ upath ( path ) for path in settings . LOCALE_PATHS ] )
  except OSError as e :
 if value in ( None , '' ) :
    filters = config . get ( 'filters' , EMPTY_DICT )
                  if table_name_filter is not None and callable ( table_name_filter ) :
              self . instance = instance
  from django . utils . encoding import force_text
    class SignatureExpired ( BadSignature ) :
           try :
 from django . core . exceptions import DisallowedRedirect
 statements = sql_delete ( app_config , self . style , connection )
 if not buf :
   output . append ( normal_row % {  'errors' : force_text ( bf_errors ) ,  'label' : force_text ( label ) ,  'field' : six . text_type ( bf ) ,  'help_text' : help_text ,  'html_class_attr' : html_class_attr ,  'field_name' : bf . html_name ,  } )
 if 'Location' in response and request . get_host ( ) :
 if len ( t ) == 2 :
                      new_result . append ( item + i_item )
  else :
 if hasattr ( rel_model , 'natural_key' ) and rel_model != model :
                          out . write ( ' gettext(%r) ' % g )
 return df . format ( format_string )
 return value . strftime ( format )
    def add_root_elements ( self , handler ) :
          return sorted ( value , key = Variable ( arg ) . resolve , reverse = True )
               self . instance = opts . model ( )
              self . reason_phrase = reason
  if min_value is not None :
  __all__ = ( 'NamedTemporaryFile' , 'gettempdir' , )
  return potfiles
          kwargs [ 'safe' ] = safe
 max_width = min ( ( line . endswith ( '\n' ) and width + 1 or width ) , width )
       def __init__ ( self , * args , ** kwargs ) :
   def module_to_dict ( module , omittable = lambda k : k . startswith ( '_' ) ) :
   if i >= len ( subject ) :
                  self . active_writers += 1
                                  filemsg = 'file %s, ' % origin
                      try :
                  continue
  media = property ( _get_media )
          self . _assert_mutable ( )
 fp = kwargs . pop ( "file" , sys . stdout )
   def __copy__ ( self ) :
   def _create_message ( self , msg ) :
              return o . isoformat ( )
  self . _callback_strs . add ( lookup_str )
 incomment = False
 regex_match = language_code_prefix_re . match ( path )
  return super ( TimeField , self ) . to_python ( value )
              val = ', ' . join ( sanitize_address ( addr , encoding )  for addr in getaddresses ( ( val , ) ) )
           raise TemplateSyntaxError (  "'%s' did not receive value(s) for the argument(s): %s" %  ( name , ", " . join ( "'%s'" % p for p in unhandled_params ) ) )
 self . to_field_name = to_field_name
 filters = [ ]
 def __init__ ( self , fail_silently = False , ** kwargs ) :
                          return result
 self . indent ( 0 )
  def update_watch ( sender = None , ** kwargs ) :
          if self . _wrapped is empty :
     def is_safe_url ( url , host = None ) :
  except TemplateDoesNotExist :
 with lock :
                  c = int ( text [ 1 : ] , 16 )
                  payload = text . encode ( utf8_charset . output_charset )
 re_newlines = re . compile ( r'\r\n|\r' )
  else :
  elif args [ - 2 ] == "as" :
   content_disposition = info . get ( 'content-disposition' )
 statements = connection . ops . sql_flush ( style , tables , seqs , allow_cascade )
 if len ( bits ) != 3 :
  request_queue_size = 10
  field = Model . _meta . get_field ( field_name )
              for dirname in dirnames [ : ] :
                      return "[Included template had syntax error: %s]" % e
  except smtplib . SMTPException :
  elif item [ "author_email" ] :
   def _new_gnu_trans ( self , localedir , use_null_fallback = True ) :
 if not digest :
          nodelist = parser . parse ( ( 'endif' , ) )
  else :
          return json . dumps ( { f : e . get_json_data ( escape_html ) for f , e in self . items ( ) } )
 if name . startswith ( '.' ) :
          self . object_list = object_list
   def get_templatetags_modules ( ) :
      compare = lambda self , a , b : a < b
 chunks = (  ( 60 * 60 * 24 * 365 , ungettext_lazy ( '%d year' , '%d years' ) ) ,  ( 60 * 60 * 24 * 30 , ungettext_lazy ( '%d month' , '%d months' ) ) ,  ( 60 * 60 * 24 * 7 , ungettext_lazy ( '%d week' , '%d weeks' ) ) ,  ( 60 * 60 * 24 , ungettext_lazy ( '%d day' , '%d days' ) ) ,  ( 60 * 60 , ungettext_lazy ( '%d hour' , '%d hours' ) ) ,  ( 60 , ungettext_lazy ( '%d minute' , '%d minutes' ) )  )
  except ImportError :
  import hmac
  print ( opt_label )
      def _media ( self ) :
              raise TypeError ( 'other_dict must be a mapping (dictionary-like) object.' )
    decode = curry ( _proxy_method , method = bytes . decode )
              self . first = left
   try :
  def to_python ( self , value ) :
  res = subject [ p : i ]
    with self . _lock . writer ( ) :
 if CONTEXT_SEPARATOR in result :
          self . _assert_mutable ( )
 self . _done = True
 from django . middleware . csrf import get_token
          values = dict ( ( key , val . resolve ( context ) ) for key , val in  six . iteritems ( self . extra_context ) )
                  out . write ( blankout ( t . contents , 'X' ) )
   if field . rel . to . _meta . pk . rel :
              self . _delete ( fname )
                         self . stdout . write ( self . style . MIGRATE_HEADING ( "Full migrations file '%s':" % writer . filename ) + "\n" )
 while not answer or answer not in "yn" :
          os . remove ( old_file_name )
   class Choice ( list ) :
  week_number = None
               if hasattr ( base , 'declared_fields' ) :
 DARK_PALETTE = 'dark'
 __setitem__ = complain
              yield
  filelist = [ os . path . join ( self . _dir , fname ) for fname  in glob . glob1 ( self . _dir , '*%s' % self . cache_suffix ) ]
              exts = extensions if extensions else [ 'js' ]
  excluded_models . add ( model )
 def needs_multipart_form ( self ) :
  return IfNode ( conditions_nodelists )
   def as_text ( self ) :
          int_part , dec_part = str_number . split ( '.' )
    def to_python ( self , value ) :
    @ python_2_unicode_compatible
                  raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : val } ,  )
          encoding = 'ascii'
 def __init__ ( self , META , input_data , upload_handlers , encoding = None ) :
    def __delattr__ ( self , name ) :
 pk_value = getattr ( self . instance , self . fk . rel . field_name )
  def __init__ ( self , * args , ** kwargs ) :
  try :
  else :
  self . _cached_loaders = cached_loaders
                      import logging . handlers
              self . _fqdn = socket . getfqdn ( )
   def new_file ( self , field_name , file_name , content_type , content_length , charset = None , content_type_extra = None ) :
 from django . utils import six
          return "<BaseConverter: base%s (%s)>" % ( len ( self . digits ) , self . digits )
          return self . _create_attachments ( self . _create_alternatives ( msg ) )
   def __len__ ( self ) :
          super ( FloatField , self ) . validate ( value )
  from django . conf import settings
  else :
  except ValueError :
 for name in namelist :
          stream_or_string = stream_or_string . read ( )
           result = ungettext ( singular , plural , number )
                  self . verbatim = False
  delta = expires - expires . utcnow ( )
 number_equal = len ( [ current_number for current_number in self . _unget_history  if current_number == num_bytes ] )
 uclass , lookup , field , unique_for = date_check
   def __delitem__ ( self , key ) :
 return strip_tags ( value )
 return zbuf . getvalue ( )
          for path in self . locale_paths :
              if hasattr ( base , 'declared_fields' ) :
 if self . options . get ( "indent" ) :
                  output . extend ( connection . ops . prepare_sql_script ( fp . read ( ) , _allow_fallback = True ) )
  return [ None , None ]
 def _wrapped_view ( request , * args , ** kwargs ) :
                                  pass
                  dig1 , dig2 = inner . copy ( ) , outer . copy ( )
    class Command ( BaseCommand ) :
 SINGLE_BRACE_START = '{'
   def main_help_text ( self , commands_only = False ) :
    def close ( self ) :
  value = getattr ( _module , attr )
    def _long_to_bin ( x , hex_format_string ) :
 super ( EmailBackend , self ) . __init__ ( * args , ** kwargs )
 convert = {  '__lt__' : [ ( '__gt__' , lambda self , other : not ( self < other or self == other ) ) ,  ( '__le__' , lambda self , other : self < other or self == other ) ,  ( '__ge__' , lambda self , other : not self < other ) ] ,  '__le__' : [ ( '__ge__' , lambda self , other : not self <= other or self == other ) ,  ( '__lt__' , lambda self , other : self <= other and not self == other ) ,  ( '__gt__' , lambda self , other : not self <= other ) ] ,  '__gt__' : [ ( '__lt__' , lambda self , other : not ( self > other or self == other ) ) ,  ( '__ge__' , lambda self , other : self > other or self == other ) ,  ( '__le__' , lambda self , other : not self > other ) ] ,  '__ge__' : [ ( '__le__' , lambda self , other : ( not self >= other ) or self == other ) ,  ( '__gt__' , lambda self , other : self >= other and not self == other ) ,  ( '__lt__' , lambda self , other : not self >= other ) ]  }
 if version is None :
 for loader_name in settings . TEMPLATE_LOADERS :
          raise NotImplementedError ( 'subclasses of BaseArchive must provide a list() method' )
 raise NotImplementedError ( "This backend doesn't support absolute paths." )
              return value
 flush = property ( lambda self : self . file . flush )
 handler . startDocument ( )
   class Command ( TemplateCommand ) :
   def close ( self ) :
     def resolve ( path , urlconf = None ) :
 if not data :
 additional_headers = [ newheader for newheader in newheaders  if newheader . lower ( ) not in existing_headers ]
  return True
              with self . initLock :
          def dec ( func ) :
  from django . apps import apps
          raise ValueError (  "You can only use `unpack_ipv4` if `protocol` is set to 'both'" )
    def parse_starttag ( self , i ) :
 self . file . size = file_size
   else :
  closed = property ( _get_closed )
 def url ( parser , token ) :
          from django . apps import apps
                       file_name = disposition . get ( 'filename' )
                  return not self . _is_expired ( f )
 return ''
      def create_table ( self , database , tablename ) :
              if opname not in roots :
  requires_system_checks = False
  except ( IndexError , TypeError , ValueError ) :
  def add_arguments ( self , parser ) :
  else :
          del _active . value
              signals . got_request_exception . send ( sender = self . __class__ , request = request )
 for match in tag_re . finditer ( self . template_string ) :
 self . _encoding = encoding or settings . DEFAULT_CHARSET
 doublecolon_start = - 1
              self . active_writers -= 1
   args = [ ]
              _mtimes = { }
      has_old_option = hasattr ( self , 'requires_model_validation' )
  else :
 import time
          parts = viewname . split ( ':' )
  if is_aware ( date ) :
                  try :
 data_value = data if data is not None else ''
 from django . utils import six
 import sys
 self . cookies [ key ] = value
 from decimal import Decimal , InvalidOperation , Context , ROUND_HALF_UP
   def _setup ( self ) :
   def add_item_elements ( self , handler , item ) :
   else :
  msgmerge_options = [ '-q' , '--previous' ]
                  self . stdout . write ( self . style . MIGRATE_LABEL ( "  Synchronize unmigrated apps: " ) + ( ", " . join ( executor . loader . unmigrated_apps ) ) )
 return super ( SlugField , self ) . clean ( value )
          if arg :
   def __repr__ ( self ) :
              key = self . to_field_name or 'pk'
 from django . utils . translation import trans_real
    if not old_method and new_method :
 if fk_name :
   if os . name == 'nt' :
  if data in seen_data :
 def __init__ ( self , attrs = None ) :
 import sys
   def render ( self , context ) :
 self . salt = force_str ( salt or  '%s.%s' % ( self . __class__ . __module__ , self . __class__ . __name__ ) )
 return func
                  self . default_locale_path = self . locale_paths [ 0 ]
    def autodiscover_modules ( * args , ** kwargs ) :
   def tag ( self ) :
  url_schemes = [ 'http' , 'https' , 'ftp' ]
          items = _iteritems
  final_attrs = self . build_attrs ( attrs , name = name )
   finally :
 try :
 import os
                  qs = self . queryset
  return self . _regex_dict [ language_code ]
   class Storage ( object ) :
   with connection . constraint_checks_disabled ( ) :
                  replaces . extend ( migration . replaces )
                      inplural = True
                  cached_loaders . append ( find_template_loader ( loader ) )
                      self . stdout . write ( '\n' + self . style . SQL_KEYWORD ( connection . ops . end_transaction_sql ( ) ) )
  self . cache_choices = cache_choices
 from django . utils import six , timezone
   def delete ( self , key , version = None ) :
                       sublist_item = next_item
   def getvalue ( self ) :
  import codecs
                  self . cookies [ key ] [ 'expires' ] = expires
  tables . append ( connection . introspection . table_name_converter ( model . _meta . db_table ) )
          return '' , ''
 @ stringfilter
              return self . _truncate_html ( length , truncate , text , truncate_len , False )
 request . resolver_match = resolver_match
 wrapper . cache_clear = cache_clear
                  return True
 try :
              _locs_ = _globs_
   def __setstate__ ( self , state ) :
  raise CommandError (  "errors happened while running xgettext on %s\n%s" %  ( self . file , errors ) )
     except Exception as e :
     subclass = type ( "Migration" , ( migrations . Migration , ) , {  "dependencies" : [ ] ,  "operations" : new_operations ,  "replaces" : replaces ,  } )
      def __init__ ( self , dirpath , file_name , locale_dir ) :
  else :
  import django
   def __iter__ ( self ) :
 return self
 return _slugify ( value )
    def get_serializer ( format ) :
              pass
         @ register . filter ( is_safe = False )
  self . file_path = os . path . abspath ( self . file_path )
    class RemovedInDjango19Warning ( DeprecationWarning ) :
    def _generate_cache_header_key ( key_prefix , request ) :
 self . options = options
  finally :
          import bpython
  else :
                  for filename in locale_filenames :
   if not last_row . endswith ( row_ender ) :
              return EndToken
   url = unquote ( force_str ( url ) )
          return maybe
              return clean_ipv6_address ( value , self . unpack_ipv4 )
   def _convert_to_charset ( self , value , charset , mime_encode = False ) :
  return attrs
    @ register . filter
      input_type = 'radio'
                  output . extend ( connection . creation . sql_destroy_model ( model , references_to_delete , style ) )
  else :
 role = role . upper ( )
      def __init__ ( self , * args , ** kwargs ) :
  from django . db import models
                      model = apps . get_model ( exclude )
   return found
 self . tags = { }
          try :
              factory = config [ '()' ]
   @ streaming_content . setter
   else :
                      attrvalue = None
 self . add_root_elements ( handler )
 if comment_notes :
                   def render ( self , context ) :
              continue
  sys . exit ( 0 )
 if isinstance ( s , ( SafeData , EscapeData ) ) :
 if six . PY2 :
 kwargs = {  'label' : getattr ( form . fields . get ( name ) , 'label' , capfirst ( self . fk . verbose_name ) )  }
 def __new__ ( cls , * args , ** kwargs ) :
 @ stringfilter
              def value_encode ( self , val ) :
                  result . parent = self
          return self . source
  _serializers = { }
 if label_suffix is None :
  else :
   if "help" in options :
  write ( arg )
  else :
                   value = str ( Header ( value , 'utf-8' , maxlinelen = sys . maxsize ) . encode ( ) )
 oldroot [ RESULT ] = result
           if not self . _cached_loaders :
          token_name = TOKEN_MAPPING [ self . token_type ]
  except ( ValueError , TypeError ) :
   elif not os . path . exists ( self . file_path ) :
 _cookie_allows_colon_in_names = True
      def __init__ ( self , stream , boundary ) :
          escaper = conditional_escape
 __eq__ = new_method_proxy ( operator . eq )
                              name . append ( ch )
  except ( DatabaseError , IntegrityError ) as e :
   except OSError as e :
 if value in self . empty_values :
          self . _stream = stream
 def regex ( self ) :
          return DebugVariableNode ( contents )
   def eval ( self , context ) :
 self . error_messages = messages
          csrf_token = context . get ( 'csrf_token' , None )
 if since <= 0 :
 kw [ 'tzinfo' ] = tzinfo
   if len ( hextet ) > 1 :
 output . append ( format_html ( self . inner_html ,  choice_value = force_text ( w ) , sub_widgets = '' ) )
               signals . got_request_exception . send ( sender = self . __class__ , request = request )
  except ( ValueError , TypeError ) :
  import re
 if origin :
 from os . path import join , normcase , normpath , abspath , isabs , sep , dirname
   def extend_nodelist ( self , nodelist , node , token ) :
 if attrs :
  if val is None :
    def code_changed ( ) :
 if not template_dirs :
   self . unclosed_block_tag ( [ endtag ] )
                  self . xml . characters ( smart_text ( related_att ) )
              raise CommandError ( "Cannot find a migration matching '%s' from app '%s'." % ( migration_name , app_label ) )
          min_num = DEFAULT_MIN_NUM
 return ''
  except ValueError :
 if dirname and not os . path . exists ( dirname ) :
  except StopFutureHandlers :
  return val
      class BlockNode ( Node ) :
 self . app_label = options . get ( 'app_label' )
   def __setitem__ ( self , header , value ) :
 UnlockFileEx = windll . kernel32 . UnlockFileEx
  self . pointer = self . backout . pop ( )
  if maxsize == 0 :
 all_date_checks = set ( )
              raise CommandError ( "More than one migration matches '%s' in app '%s'. Please be more specific." % ( migration_name , app_label ) )
 self . attrs , self . choices = attrs , choices
 from django . utils . safestring import mark_safe
          super ( Command , self ) . add_arguments ( parser )
       def __init__ ( self , name , old , new = None ) :
                      self . write_message ( message )
   else :
  now = datetime . now ( ) . strftime ( '%B %d, %Y - %X' )
   def render ( self , context ) :
 parser . add_argument ( '--symlinks' , '-s' , action = 'store_true' , dest = 'symlinks' ,  default = False , help = 'Follows symlinks to directories when examining '  'source code and templates for translation strings.' )
  else :
              self . close ( )
 for ch in input_iter :
 import random
   def add_fields ( self , form , index ) :
      widget = ClearableFileInput
 if not email_messages :
 try :
 from django . template . base import Origin , Template , Context , TemplateDoesNotExist
 FILE = "file"
  return self . _encoding
 from django . utils . safestring import mark_safe
 from django . utils . regex_helper import normalize
   def open ( self , mode = None ) :
   if field . _has_changed ( initial_value , data_value ) :
   if format_module_path is None :
          parser . add_argument ( 'args' , metavar = self . label , nargs = '+' )
 code = 'limit_value'
                  message = message . error_list
 UnicodeDecodeError . __init__ ( self , * args )
  emitting = chunk [ : remaining ]
 attrs = dict ( self . attrs , ** kwargs )
          self . mutex = threading . RLock ( )
          if isinstance ( settings . TIME_ZONE , six . string_types ) and pytz is not None :
import sys
 self . _cache . set ( key , value , self . get_backend_timeout ( timeout ) )
 for app_name in app_names :
   def urlquote ( url , safe = '/' ) :
 if custom_sql :
  return datetime ( * kw )
   def unclosed_block_tag ( self , parse_until ) :
    def urlize ( text , trim_url_limit = None , nofollow = False , autoescape = False ) :
    class WSGIHandler ( base . BaseHandler ) :
  else :
  if value [ 0 ] in self . empty_values and value [ 1 ] in self . empty_values :
                      number_value = rhs
   def render ( self , context ) :
              self . regex = regex
 msgattrib_options = [ '--no-obsolete' ]
    def get_library ( library_name ) :
 from itertools import chain
 is_required = False
  try :
          if value is None :
      from django . core . mail . utils import CachedDnsName , DNS_NAME
    def __setitem__ ( self , name , val ) :
 self . models = set ( )
 if html_message :
   def run_shell ( self , shell = None ) :
  inputs . append ( format_html ( '<input{0} />' , flatatt ( input_attrs ) ) )
  try :
      try :
     def __str__ ( self ) :
  s = subject [ p : i ]
              output = next ( self . _producer )
 from django . utils import six
 parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
  if value is None :
 import binascii
 args = hashlib . md5 ( force_bytes ( key ) )
   def _itervalues ( self ) :
 return result
                  handler . addQuickElement ( "email" , item [ 'author_email' ] )
    if len ( s ) > 13 :
              top = self . count
 return super ( QueryDict , self ) . popitem ( )
 from django . db . migrations . executor import MigrationExecutor
  except ( ssl . SSLError , smtplib . SMTPServerDisconnected ) :
   def save_new ( self , form , commit = True ) :
   DEFAULT_MIN_NUM = 0
              input_attrs = dict ( value = force_text ( v ) , ** final_attrs )
     registry = CheckRegistry ( )
 if extra_params :
 url , trimmed = escape ( url ) , escape ( trimmed )
          value = self . to_python ( value ) . strip ( )
  return wraps ( func ) ( _dec )
                     if obj . pk is None :
 if isinstance ( source , inst ) :
  attachment . add_header ( 'Content-Disposition' , 'attachment' ,  filename = filename )
  else :
 app = TerminalIPythonApp . instance ( )
                          continue
 for cnt , digit in enumerate ( int_part [ : : - 1 ] ) :
 result = self . configurator . convert ( value )
               settings . INSTALLED_APPS
  try :
                    step = str ( Decimal ( '1' ) / 10 ** self . decimal_places ) . lower ( )
  target = parser . compile_filter ( bits [ 1 ] )
 if decimal_pos is not None :
                  values = self . sequence . resolve ( context , True )
  level = 0
    def cookie_date ( epoch_seconds = None ) :
              code_list . append ( background [ v ] )
 while current_chunk != b'' :
 table_output = [ ]
   def render ( self , name , value , attrs = None ) :
 from django . core import mail
 from django . utils . functional import cached_property
 return value . replace ( '\\' , '\\\\' ) . replace ( '"' , '\\"' ) . replace ( "'" , "\\'" )
              continue
  else :
    class HttpResponseNotModified ( HttpResponse ) :
 self . per_page = int ( per_page )
 confirm = input ( msg )
  else :
   @ classmethod
          for dict_ in self . dicts :
  try :
    if six . PY3 :
              return [ ]
 pluralmatch = plural_re . match ( t . contents )
 return form . cleaned_data . get ( DELETION_FIELD_NAME , False )
 from django . template import ( Lexer , TOKEN_TEXT , TOKEN_VAR , TOKEN_BLOCK ,  TOKEN_COMMENT , TRANSLATOR_COMMENT_MARK )
          duplicate = super ( Context , self ) . __copy__ ( )
    def render ( self ) :
  strip_spaces_between_tags = allow_lazy ( strip_spaces_between_tags , six . text_type )
 from django . utils . html import format_html , format_html_join , escape
          cookies = '<could not parse>'
    def custom_sql_for_model ( model , style , connection ) :
  else :
 self . alternatives . append ( ( content , mimetype ) )
          field_dict = OrderedDict (  [ ( f , field_dict . get ( f ) ) for f in fields  if ( ( not exclude ) or ( exclude and f not in exclude ) ) and ( f not in ignored ) ]  )
 default_settings = module_to_dict ( global_settings )
 extra_params . update ( params )
 logger . handlers = [ ]
      return b64_encode ( salted_hmac ( salt , value , key ) . digest ( ) )
    for role in termcolors . PALETTES [ termcolors . NOCOLOR_PALETTE ] :
 if propagate is not None :
              url = urlunsplit ( ( scheme , netloc , path , query , fragment ) )
          loaders = [ ]
 self . _boundary = boundary
 auto_id = self . form . auto_id
              yield
              m2m_convert = lambda n : field . rel . to . _meta . pk . to_python ( n . getAttribute ( 'pk' ) )
 if language_code not in self . _app_dict :
              self . _populate ( )
              _ , params = cgi . parse_header ( content_disposition )
    def clean ( self , value ) :
 if app_label not in executor . loader . migrated_apps :
 import os
 DEFAULT_PORT = "8000"
                      raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
          self . _archive . close ( )
 i = i % j
  ngettext_lazy = ngettext
       m = getattr ( lookup_view , '__module__' , None )
                  raise ImproperlyConfigured ( 'Could not create directory for saving email messages: %s (%s)' % ( self . file_path , err ) )
 return re . sub ( r'(?u)[^-\w.]' , '' , s )
 self . add_root_elements ( handler )
  except ImportError :
  else :
    def add_never_cache_headers ( response ) :
               final_attrs [ 'value' ] = force_text ( self . _format_value ( value ) )
 if not os . path . exists ( directory ) :
              print ( "Running pre-migrate handlers for application %s" % app_config . label )
  else :
 language_code = get_language ( )
    if sizeof ( c_ulong ) != sizeof ( c_void_p ) :
    conflicts = executor . loader . detect_conflicts ( )
     raise LookupError ( lang_code )
          self . filter_expr , self . nodelist = filter_expr , nodelist
  del X
   def value_from_datadict ( self , data , files , name ) :
          provided = list ( provided )
  inner , outer = digest ( ) , digest ( )
 if language_code not in self . _regex_dict :
              self . _encoding = settings . DEFAULT_CHARSET
              if len ( value ) != 1 :
          if source [ 1 ] is None :
 if isinstance ( offset , timedelta ) :
  except TypeError :
 from django . apps import apps
              lines [ i ] = ( "%0" + width + "d. %s" ) % ( i + 1 , line )
 for bit in tag_re . split ( self . template_string ) :
  from django . db . models . fields import Field as ModelField
 lib = import_library ( taglib_module )
 BLOCK_TAG_START = '{%'
          key = self . cache_key ( template_name , template_dirs )
              try :
      def __init__ ( self , attrs = None ) :
    self . xml . startElement ( "object" , attrs )
   is_reversed = bits [ - 1 ] == 'reversed'
 from django . conf import settings
          raise NotImplementedError ( 'subclasses of BaseArchive must provide an extract() method' )
 if self . connection :
     class ExternalReferenceForbidden ( DefusedXmlException ) :
 pk = self . data [ pk_key ]
    possible_sizes = [ x . chunk_size for x in upload_handlers if x . chunk_size ]
    return script_name . decode ( UTF_8 )
     return ( os . path . normcase ( os . path . abspath ( src ) ) ==  os . path . normcase ( os . path . abspath ( dst ) ) )
          script_name = get_script_name ( environ )
 from django . core . exceptions import SuspiciousFileOperation
  try :
          with open ( path , 'a' ) :
 if value in self . empty_values :
  __all__ = ( 'WSGIServer' , 'WSGIRequestHandler' )
              val = Header ( val , encoding ) . encode ( )
 try :
  return value
   if str ( '\n' ) in value or str ( '\r' ) in value :
                if isinstance ( field , models . TimeField ) and getattr ( obj , field . name ) is not None :
 self . _is_rendered = True
              result += ugettext ( ', ' ) + avoid_wrapping ( name2 % count2 )
          return { f : e . as_data ( ) for f , e in self . items ( ) }
 self . choice_value = force_text ( choice [ 0 ] )
 zfile . flush ( )
 handler . addQuickElement ( "link" , item [ 'link' ] )
           class LocalTimezone ( tzinfo ) :
  choice_input_class = None
  template_with_initial = '%(initial_text)s: %(initial)s %(clear_template)s<br />%(input_text)s: %(input)s'
       def __init__ ( self , file ) :
   app_labels = set ( app_labels )
 from django . utils . encoding import smart_text
 if isinstance ( d , real_datetime ) :
    @ register . tag
 top = bottom + self . per_page
          return self . _get_image_dimensions ( ) [ 0 ]
              app_label , migration_name = options [ 'app_label' ] , options [ 'migration_name' ]
              msg = self . style . HTTP_NOT_MODIFIED ( msg )
                      i = open_tags . index ( tagname )
    def _split_statements ( content ) :
              if key in d :
                      src_data = fp . read ( )
   def normalize_newlines ( text ) :
   def save_new ( self , form , commit = True ) :
 return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )
  try :
          self . _archive = self . _archive_cls ( file ) ( file )
     class ModelChoiceIterator ( object ) :
                  result_args [ i ] . append ( param )
 token . source = self . origin , source
 from django . db import connection
 from django . utils . timezone import utc , get_fixed_timezone
    if html :
                      candidate_subs = dict ( ( k , urlquote ( v ) ) for ( k , v ) in candidate_subs . items ( ) )
   return name
  def _generator ( ) :
 parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a specific database to load '  'fixtures into. Defaults to the "default" database.' )
 parser . add_argument ( 'migration_name' ,  help = 'Migration name to print the SQL for.' )
  if len ( parts ) > 1 and parts [ - 1 ] in self . compression_formats :
 key = force_bytes ( settings . SECRET_KEY )
              taglib = bits [ - 1 ]
 if os . path . exists ( django_po ) :
          return "<UTC>"
  return _wrapped_view
   @ property
               return '-' . join ( [ template_name , hashlib . sha1 ( force_bytes ( '|' . join ( template_dirs ) ) ) . hexdigest ( ) ] )
 from django . utils import timezone
 while i < l :
 match = time_re . match ( value )
 context . autoescape = self . setting
  hex_format_string = "%%0%ix" % ( hlen * 2 )
              fh . write ( writer . as_string ( ) )
          return path . decode ( fs_encoding )
 self . args = args
          if offset is not None :
          if k == 'fg' :
  except ValidationError :
 return form . save ( commit = commit )
 if not func_name :
                              exec ( compile ( handle . read ( ) , pythonrc , 'exec' ) , imported_objects )
 return FilterNode ( filter_expr , nodelist )
 if cleaned_line . endswith ( ";" ) :
           if ( hasattr ( self . cmd , 'missing_args_message' ) and  not ( args or any ( [ not arg . startswith ( '-' ) for arg in args ] ) ) ) :
 self . indent ( 1 )
               both_before = [  Tok ( "comment" , r"/\*(.|\n)*?\*/" ) ,  Tok ( "linecomment" , r"//.*?$" ) ,  Tok ( "ws" , r"\s+" ) ,  Tok ( "keyword" , literals ( """                            break case catch class const continue debugger                            default delete do else enum export extends                            finally for function if import in instanceof                            new return super switch this throw try typeof                            var void while with                            """ , suffix = r"\b" ) , next = 'reg' ) ,  Tok ( "reserved" , literals ( "null true false" , suffix = r"\b" ) , next = 'div' ) ,  Tok ( "id" , r"""                   ([a-zA-Z_$   ]|\\u[0-9a-fA-Z]{4})   # first char                   ([a-zA-Z_$0-9]|\\u[0-9a-fA-F]{4})*  # rest chars                   """ , next = 'div' ) ,  Tok ( "hnum" , r"0[xX][0-9a-fA-F]+" , next = 'div' ) ,  Tok ( "onum" , r"0[0-7]+" ) ,  Tok ( "dnum" , r"""                     (   (0|[1-9][0-9]*)     # DecimalIntegerLiteral                         \.                  # dot                         [0-9]*              # DecimalDigits-opt                         ([eE][-+]?[0-9]+)?  # ExponentPart-opt                     |                         \.                  # dot                         [0-9]+              # DecimalDigits                         ([eE][-+]?[0-9]+)?  # ExponentPart-opt                     |                         (0|[1-9][0-9]*)     # DecimalIntegerLiteral                         ([eE][-+]?[0-9]+)?  # ExponentPart-opt                     )                     """ , next = 'div' ) ,  Tok ( "punct" , literals ( """                          >>>= === !== >>> <<= >>= <= >= == != << >> &&                          || += -= *= %= &= |= ^=                          """ ) , next = "reg" ) ,  Tok ( "punct" , literals ( "++ -- ) ]" ) , next = 'div' ) ,  Tok ( "punct" , literals ( "{ } ( [ . ; , < > + - * % & | ^ ! ~ ? : =" ) , next = 'reg' ) ,  Tok ( "string" , r'"([^"\\]|(\\(.|\n)))*?"' , next = 'div' ) ,  Tok ( "string" , r"'([^'\\]|(\\(.|\n)))*?'" , next = 'div' ) ,  ]
          locale = options . get ( 'locale' )
     elif not hasattr ( message , 'message' if six . PY3 else 'code' ) :
              if self . count == 0 and not self . allow_empty_first_page :
    def readline ( self , * args , ** kwargs ) :
                              self . stdout . write ( "    Processing %s.%s model\n" % ( app_name , model . _meta . object_name ) )
 return obj
              return str ( o )
              for app_label in app_labels :
       if only_new :
   def _init_translation_catalog ( self ) :
  self . base_location = location
 import operator
          stream = stream_or_string
 self . old_language = get_language ( )
                  common_prefix = prefix
 i = i + 1
              message = list ( error ) [ 0 ]
  if verbosity >= 2 :
   if sublist_item :
                         for middleware_method in self . _exception_middleware :
 BASE36_ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz'
               return True
  except AttributeError :
 return cls ( file_dict [ 'filename' ] ,  file_dict [ 'content' ] ,  file_dict . get ( 'content-type' , 'text/plain' ) )
 use_grouping = use_grouping or force_grouping
          return False
              for line in self . handle_inspection ( options ) :
 self . _expire_info [ key ] = self . get_backend_timeout ( timeout )
              flat . update ( d )
   @ staticmethod
          super ( Truncator , self ) . __init__ ( lambda : force_text ( text ) )
          dec_part = decimal_sep + dec_part
 import re
 self . _lock = threading . RLock ( )
  if has_old_option and has_new_option :
          return False
 def __init__ ( self , name , sysid , pubid ) :
 if value in ( None , '' ) :
  else :
                  if confirm not in ( 'yes' , 'no' ) :
              import_module ( project_name )
  else :
 return list ( chain ( * errors ) )
  if number > self . num_pages :
          raise ValueError ( e )
  except ImportError as e :
   def merge ( self , other ) :
              new_errors = check ( app_configs = app_configs )
 for root in settings . ALLOWED_INCLUDE_ROOTS :
   def getlist ( self , key , default = None ) :
 if "\n" in self . __starttag_text :
                  self . stdout . write ( shutdown_message )
                      value = field . clean ( value )
          exp = Decimal ( '1.0' ) / ( Decimal ( 10 ) ** abs ( p ) )
    else :
                   continue
         while True :
                  self . active_readers += 1
 msgs , errors , status = popen_wrapper ( args )
 context_extras = { }
          return iri
          return any ( self . dicts )
                  for app_name , model_list in manifest . items ( ) :
   def add_library ( self , lib ) :
          retval = self . expression ( )
     if os . path . exists ( name ) :
  else :
 return data . get ( name , None )
          parser . add_argument ( 'args' , metavar = 'table_name' , nargs = '*' ,  help = 'Optional table names. Otherwise, settings.CACHES is used to '  'find cache tables.' )
    def close ( self ) :
 memo [ id ( self ) ] = result
 if not _is_shorthand_ip ( ip_str ) :
    def call_command ( name , * args , ** options ) :
 self . url_name = url_name
  if self . connector == conn_type :
              yield d
          callback = getattr ( self . urlconf_module , 'handler%s' % view_type , None )
 should_convert = ( isinstance ( value , datetime )  and ( settings . USE_TZ if use_tz is None else use_tz )  and not is_naive ( value )  and getattr ( value , 'convert_to_local_time' , True ) )
                          if self . match is None or self . match_re . search ( f ) :
              sys . stdout . write ( django . get_version ( ) + '\n' )
 self . deprecation_warning = deprecation_warning
 _len = len
 ns_pattern = ns_pattern + extra
 for path in gen_filenames ( only_new = True ) :
  else :
  except OSError as e :
  with open ( filename , 'wb' ) as outfile :
  return six . unichr ( c )
 self . plural = lambda n : int ( n != 1 )
 self . name = name
 for path in self . locale_paths :
 self . deactivate = deactivate
          super ( MultipleHiddenInput , self ) . __init__ ( attrs )
 self . _add_installed_apps_translations ( )
 def closed ( self ) :
   objects = serializers . deserialize ( ser_fmt , fixture ,  using = self . using , ignorenonexistent = self . ignore )
   def led ( self , left , parser ) :
                                  sql . extend ( connection . creation . sql_for_pending_references ( refto , no_style ( ) , pending_references ) )
    s = s1
 s . serialize ( queryset , ** options )
              raise ValueError (  "'%s.%s' has no field named '%s'."  % ( model . _meta . app_label , model . _meta . object_name , fk_name ) )
   def is_silenced ( self ) :
  try :
 if len ( val1 ) != len ( val2 ) :
 self . pointer = i
  if ( locale is None and not exclude and not process_all ) or self . domain is None :
              self . domain_whitelist = whitelist
    @ register . filter ( is_safe = True )
          if len ( self . _cache ) >= self . _max_entries :
 try :
   def save ( self , commit = True ) :
   def end_index ( self ) :
  else :
    def validate ( self , value ) :
   def handle ( self , * args , ** options ) :
          self . filter_expression = filter_expression
  raise
              migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )
      def addQuickElement ( self , name , contents = None , attrs = None ) :
          return fastcgi_help ( "ERROR: Implementation must be one of prefork or "  "thread." )
     self . _post = QueryDict ( '' , mutable = True )
 from django . utils . deprecation import RemovedInDjango19Warning
     class NullBooleanField ( BooleanField ) :
 from django . utils . translation import ugettext_lazy as _ , ungettext_lazy
   def m ( self ) :
   if hasattr ( f , 'seek' ) and callable ( f . seek ) :
  tag = bits [ 1 ]
   @ property
   def handle_m2m_field ( self , obj , field ) :
   def render ( self , context ) :
           return avoid_wrapping ( ugettext ( '0 minutes' ) )
              full_statement . append ( '    %s%s' % ( line , ',' if i < len ( table_output ) - 1 else '' ) )
 if value is not result :
    @ register . filter ( is_safe = False )
 import shutil
 def content ( self ) :
   def __str__ ( self ) :
  except :
              return None
      is_usable = True
  self . endElement ( name )
      return lazy_number ( ungettext , six . text_type , singular = singular , plural = plural , number = number )
 date_keys = ( 'updateddate' , 'pubdate' )
   def l ( self ) :
 Field . creation_counter += 1
     if response is None :
 field_name = disposition [ 'name' ] . strip ( )
 from django . template . loader import BaseLoader
              ch2 , escaped = next ( input_iter )
                  template = template [ 7 : ]
 request_repr = "unavailable"
    for dirname in dirs [ : ] :
    def lazy ( func , * resultclasses ) :
 from django . forms . widgets import *
   date_re = re . compile (  r'(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})$'  )
              six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc_info ( ) [ 2 ] )
 FILES = property ( _get_files )
     def make_naive ( value , timezone ) :
 super ( InlineForeignKeyField , self ) . __init__ ( * args , ** kwargs )
          return decorator
          if 'id' in self . attrs :
 raise NotImplementedError ( 'Subclasses must implement this method.' )
  internal_use_only = False
                  break
   class ImageFile ( File ) :
 return message
   def clear_url_caches ( ) :
 yield 'class %s(models.Model):' % table2model ( table_name )
  else :
    self . _name = name
                    content = message_from_string ( content )
    return [ self . forms [ i [ 0 ] ] for i in self . _ordering ]
              return value
  if message is not None :
  else :
 return self . _size
              domains = ( 'djangojs' , 'django' )
 if match :
 _assertRegex = "assertRegex"
    @ register . filter ( is_safe = True )
      def __init__ ( self ) :
                  del _error_files [ _error_files . index ( filename ) ]
                      data [ f . name ] = list ( qs . values_list ( 'pk' , flat = True ) )
 if ch in "iLmsu#" :
   url = property ( lambda self : self [ 'Location' ] )
 msg [ 'Subject' ] = self . subject
          raise TypeError ( "strftime of dates before 1900 does not handle" + illegal_formatting . group ( 0 ) )
       def __setitem__ ( self , name , val ) :
 neg_inf = - 1e200 * 1e200
  else :
   if six . PY3 :
   def date_format ( value , format = None , use_l10n = None ) :
  return None
          return self . input_type == 'hidden' if hasattr ( self , 'input_type' ) else False
   filepath = parser . compile_filter ( bits [ 1 ] )
              raise ValueError ( "Base36 conversion input too large." )
 return "%s%02d%02d" % ( sign , seconds // 3600 , ( seconds // 60 ) % 60 )
              field_output = [ qn ( f . name ) , f . db_type ( connection = connection ) ]
    except OSError :
 return data
 func . __doc__ = doc
  except TypeError :
 prec = abs ( p ) + units + 1
                  if field_node . getElementsByTagName ( 'None' ) :
      setattr ( _MovedItems , attr . name , attr )
    if item [ 'item_copyright' ] is not None :
import collections
   return obj
 return content
   def T ( self ) :
 try :
                      date_value = datetime . date ( int ( y ) , int ( m ) , int ( d ) )
              field = self . fields [ name ]
  value = value . strip ( )
  def add_arguments ( self , parser ) :
  if m :
    conflicts = loader . detect_conflicts ( )
    if not isinstance ( self . object_list , list ) :
                      relations = { }
  else :
          self . new_objects = [ ]
              rest = rest [ m . end ( ) : ]
  return False
           raise EntitiesForbidden ( name , None , base , sysid , pubid , notation_name )
              subject = '%s: %s' % (  record . levelname ,  record . getMessage ( )  )
    exec_ ( """def reraise(tp, value, tb=None):     raise tp, value, tb """ )
              return self . _choices
 callback , callback_args , callback_kwargs = resolver_match
   class Command ( AppCommand ) :
              handler . startElement ( 'item' , self . item_attributes ( item ) )
    class SafeText ( six . text_type , SafeData ) :
                  result |= x ^ y
 val = force_text ( val )
 if hasattr ( _active , "value" ) :
 if language_code not in self . _namespace_dict :
                  filter_name = match . group ( "filter_name" )
 app_dirs . append ( os . path . normpath ( os . path . join ( app_dir , 'sql' ) ) )
 if value in self . empty_values :
          __bytes__ = serialize
  return _decorator
  _active . value = translation ( language )
      SafeString = SafeBytes
 help = ''
 from django . utils . encoding import force_str
   def z ( self ) :
      op . id = key
 str_number = str_number [ 1 : ]
              name = self . html_name
 value = super ( IntegerField , self ) . to_python ( value )
              raise TemplateSyntaxError ( '"filter %s" is not permitted.  Use the "autoescape" tag instead.' % filter_name )
  except Exception :
                      import operator
 return tt . tm_isdst > 0
 self . file = TemporaryUploadedFile ( self . file_name , self . content_type , 0 , self . charset , self . content_type_extra )
  from django . utils . encoding import force_text , force_str
              cmp_fmt = None
              error_msg = "Your TEMPLATE_DIRS setting is empty. Change it to point to at least one template directory."
          block_context = context . render_context . get ( BLOCK_CONTEXT_KEY )
 from django . utils import six
 get_function_closure = operator . attrgetter ( _func_closure )
 try :
              activate ( self . language )
              return '%s\n\n%s' % ( usage , self . help )
                              field_type = "ForeignKey('%s'" % rel_to
          self . _cache . disconnect_all ( )
    def load_template_source ( self , template_name , template_dirs = None ) :
  if isinstance ( number , int ) and not use_grouping and not decimal_pos :
              parser . _namedCycleNodes = { }
          raise DTDForbidden ( name , sysid , pubid )
                      msg . attach ( attachment )
 if value == self . empty_value or value in self . empty_values :
  except StopIteration :
          if incomment :
   def __nonzero__ ( self ) :
  else :
    if '::' not in ip_str and ip_str . count ( ':' ) != 7 :
          signed_value = force_str ( signed_value )
   def as_table ( self ) :
   for namespace , ( prefix , sub_pattern ) in pattern . namespace_dict . items ( ) :
 for statement in sql_statements :
                  for i_item , i_args in zip ( inner_result , inner_args ) :
              if number == 1 and self . allow_empty_first_page :
  else :
 import os
 if _cached_modules == module_values :
  except Exception :
   @ encoding . setter
 return data_set != initial_set
      status_code = 304
 if result is not root :
  for model in app_models :
          if self . _isdst ( dt ) :
   def __str__ ( self ) :
      def b ( s ) :
      input_type = 'password'
                  TYPE = FILE
    code . interact ( local = imported_objects )
 self . parsed = parsed
 if len ( bits ) != 2 :
 default_validators = [ validators . validate_email ]
  mask = (  pyinotify . IN_MODIFY |  pyinotify . IN_DELETE |  pyinotify . IN_ATTRIB |  pyinotify . IN_MOVED_FROM |  pyinotify . IN_MOVED_TO |  pyinotify . IN_CREATE  )
 for x in argset :
              raise TemplateSyntaxError ( "'for' tag received an invalid argument:"  " %s" % token . contents )
                      value = None
    def media ( request ) :
   def _iteritems ( self ) :
 return datetime . time ( ** kw )
  except Exception :
 return mark_safe ( conditional_escape ( sep ) . join (  format_html ( format_string , * tuple ( args ) )  for args in args_generator ) )
 append = complain
 context_extras [ 'LANGUAGES' ] = settings . LANGUAGES
                  return default
    def _explode_shorthand_ip_string ( ip_str ) :
              return '1'
 return node_class ( takes_context , args , kwargs )
                  field_output . append ( "UNIQUE" )
 from django . utils . deprecation import RemovedInDjango19Warning
   def __repr__ ( self ) :
 body_msg = msg
  except AttributeError :
 UnlockFileEx . argtypes = [ HANDLE , DWORD , DWORD , DWORD , LPOVERLAPPED ]
 self . _producer = producer
                              if transfer_encoding == 'base64' :
          key = self . make_key ( key , version = version )
 from django . utils . translation import TranslatorCommentWarning , trim_whitespace , LANGUAGE_SESSION_KEY
  self . _stream . unget ( unused_char )
 from django . core . management . base import BaseCommand
 def __init__ ( self , * args , ** kwargs ) :
              value = self . coerce ( value )
      def __init__ ( self , regex , urlconf_name , default_kwargs = None , app_name = None , namespace = None ) :
              sys . stderr . write ( "fork #1 failed: (%d) %s\n" % ( e . errno , e . strerror ) )
                  target_dir = path . join ( top_dir , relative_dir )
          for key in self . keyOrder :
  return True
 options += [ ( k , 1 ) for k in FASTCGI_OPTIONS ]
 return chunk [ : - rollback ]
          git_changeset = get_git_changeset ( )
   def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
 return { }
              yield "# This is an auto-generated Django model module."
  return initial_forms
   if hasattr ( filter_func , "_decorated_function" ) :
 from django . utils import six
 outdict = { }
     @ contextlib . contextmanager
     def python_2_unicode_compatible ( klass ) :
          attrs [ 'widgets' ] = widgets
      try :
  try :
              for item_type , meta_data , field_stream in Parser ( stream , self . _boundary ) :
          project_name , target = options . pop ( 'name' ) , options . pop ( 'directory' )
   def create_token ( self , token_string , in_tag ) :
 defaults = dict ( defaults . __dict__ , ** options )
      class VerbatimNode ( Node ) :
 def upload_handlers ( self , upload_handlers ) :
       def from_current_timezone ( value ) :
  autodetector = MigrationAutodetector (  executor . loader . project_state ( ) ,  ProjectState . from_apps ( apps ) ,  )
  else :
                      self . importer ( used )
  if use_reloader :
  from django . apps import apps
                  exclude . append ( f . name )
  except ValueError :
               self . _func_path = '.' . join ( [ func . __module__ , func . __name__ ] )
 for app_config , model_list in app_list :
 self . nodelist_loop = nodelist_loop
 fields = (  DateField ( input_formats = input_date_formats ,  error_messages = { 'invalid' : errors [ 'invalid_date' ] } ,  localize = localize ) ,  TimeField ( input_formats = input_time_formats ,  error_messages = { 'invalid' : errors [ 'invalid_time' ] } ,  localize = localize ) ,  )
 end_index = None
     class HiddenInput ( Input ) :
 super ( ManagementForm , self ) . __init__ ( * args , ** kwargs )
              self . _delete ( fname )
     class TextInput ( Input ) :
                  if status != STATUS_OK :
  else :
 max_value = self . max_expr . resolve ( context )
 colors . reverse ( )
                  return False
          if close :
              if isinstance ( query_string , bytes ) :
                  disable_existing = config . pop ( 'disable_existing_loggers' , True )
               name = os . path . basename ( name )
 simple_url_2_re = re . compile ( r'^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$' , re . IGNORECASE )
  chunk_size *= 2
                  values = reversed ( values )
   def _has_changed ( self , initial , data ) :
 locales = set ( locales ) - set ( exclude )
 for site in sites1 :
  except HTMLParseError :
              class_name = base . __name__
  HTMLParseError = _html_parser . HTMLParseError
  else :
  if not self . _populated :
 import datetime
      class IfEqualNode ( Node ) :
          super ( LocaleRegexURLResolver , self ) . __init__ (  None , urlconf_name , default_kwargs , app_name , namespace )
   def compile_filter_error ( self , token , e ) :
 def __init__ ( self , offset ) :
   def _coerce ( self , value ) :
 global _default
              self . _update_errors ( e )
 return [ globalpath ] + list ( settings . LOCALE_PATHS )
           raise parser . error_class (  "Not expecting '%s' in this position in if tag." % self . id  )
   class Field ( object ) :
  from django . core . management . base import CommandError
 self . waiting_readers = 0
                      self . _changed_data . append ( name )
     if best_doublecolon_len > 1 :
  output_transaction = True
  import os
  status = '%s %s' % ( response . status_code , response . reason_phrase )
   return view
 kwargs_safe = dict ( ( k , conditional_escape ( v ) ) for ( k , v ) in six . iteritems ( kwargs ) )
  except KeyError :
   from django . template . base import ( Library , add_to_builtins , builtins ,  get_library , get_templatetags_modules , get_text_list , import_library ,  libraries )
      kwargs [ 'strm' ] = kwargs . pop ( 'stream' )
          factor += 1
  for finder in sys . meta_path :
              e , tb = sys . exc_info ( ) [ 1 : ]
  return wrapper
 from django . utils import six
 class Media ( object ) :
              if e . args [ 0 ] not in not_found :
     class RegexURLPattern ( LocaleRegexProvider ) :
   else :
 filename = tmp . split ( '/' ) [ - 1 ]
  import os
 self . _dimensions_cache = get_image_dimensions ( self , close = close )
 if ( ( ( self . allow_files and os . path . isfile ( full_file ) ) or  ( self . allow_folders and os . path . isdir ( full_file ) ) ) and  ( self . match is None or self . match_re . search ( f ) ) ) :
   @ python_2_unicode_compatible
          return yes
                     errors . extend ( m for m in e . error_list if m not in errors )
   if self . verbosity >= 1 :
 if kw [ 'microsecond' ] :
  else :
 state = self . state
              unique_id = item [ 'unique_id' ]
 from django . utils . encoding import force_str
                          out . write ( ' # %s' % line )
  def add_arguments ( self , parser ) :
 return mark_for_escaping ( value )
          verbosity = options . get ( 'verbosity' )
           tupl = d . as_tuple ( )
 import warnings
          warnings . warn ( '`MergeDict` is deprecated, use `dict.update()` '  'instead.' , RemovedInDjango19Warning , 2 )
          old_setting = context . autoescape
          return arg
          raise TemplateSyntaxError ( "'templatetag' statement takes one argument" )
              base = Media ( )
              if csrf_token == 'NOTPROVIDED' :
    return force_bytes ( value , self . _charset )
  except ( ValueError , TypeError ) :
  if self . instance . pk is not None :
  return False
   return inner
                          pk_value = self . get_queryset ( ) [ index ] . pk
  except ( ValueError , KeyError ) :
 object_data = model_to_dict ( instance , opts . fields , opts . exclude )
   if new_conn_created :
                              return field . rel . to . _default_manager . db_manager ( db ) . get_by_natural_key ( * value ) . pk
 def from_dict ( cls , file_dict ) :
  if self . domain not in ( 'django' , 'djangojs' ) :
     class SingleZipReader ( zipfile . ZipFile ) :
 __version__ = "1.6.1"
  initial_set = set ( force_text ( value ) for value in initial )
          cache = caches [ settings . CACHE_MIDDLEWARE_ALIAS ]
          output . extend ( connection . creation . sql_indexes_for_model ( model , style ) )
          tt = ( dt . year , dt . month , dt . day ,  dt . hour , dt . minute , dt . second ,  dt . weekday ( ) , 0 , 0 )
 for i , char in enumerate ( text ) :
 yield buf . read ( )
   else :
  else :
  delattr ( self . _wrapped , name )
                  exclude . append ( f . name )
 self . attrs = attrs
  if option == 'with' :
          for d in self . dicts :
          if child . nodeType == child . TEXT_NODE or child . nodeType == child . CDATA_SECTION_NODE :
   app_label = label
 root = logging . getLogger ( )
 sortable_virtual_fields = [ f for f in opts . virtual_fields  if isinstance ( f , ModelField ) ]
 response_headers = [ ( str ( k ) , str ( v ) ) for k , v in response . items ( ) ]
          return getattr ( t , translation_function ) ( singular , plural , number )
 return 'initial-%s' % self . add_prefix ( field_name )
          super ( Select , self ) . __init__ ( attrs )
  return os . path . normpath ( path )
   def display ( self ) :
               if value :
 if hasattr ( file_or_path , 'read' ) :
                 return ''
 try :
    return msg
      def __init__ ( self , cyclevars , variable_name = None , silent = False ) :
  from . import six
          result = super ( SortedDict , self ) . pop ( k , * args )
              return self . blocks [ name ] [ - 1 ]
  def add_arguments ( self , parser ) :
   def handle_app_config ( self , app_config , ** options ) :
  encoded = encoded . replace ( ";" , "\\073" ) . replace ( "," , "\\054" )
    if form . _meta . fields :
 from importlib import import_module
 handler . addQuickElement ( "link" , item [ 'link' ] )
 if form . _meta . widgets :
   def get_data ( self ) :
                          latest_date = item_date
  except Exception :
              initial_forms = self . initial_form_count ( )
          super ( StreamingHttpResponse , self ) . __init__ ( * args , ** kwargs )
              with io . open ( potfile , 'r' , encoding = 'utf-8' ) as fp :
                          response = middleware_method ( request , e )
 return force_text ( quote ( force_str ( url ) , force_str ( safe ) ) )
        class FixedOffset ( tzinfo ) :
          fn = inotify_code_changed
 self . use_tls = settings . EMAIL_USE_TLS if use_tls is None else use_tls
     def _strip_once ( value ) :
 for k , v in ret . items ( ) :
 self . _encoding = val
 _meth_self = "im_self"
   def handle ( self , ** options ) :
 comment_notes . extend ( field_notes )
 d = d [ n ]
  if filename . endswith ( extensions ) or filename in extra_files :
      input_type = 'text'
              self . add_library ( lib )
 error_messages [ 'invalid' ] = error_message
   if ( isinstance ( data , ( datetime . datetime , datetime . time ) ) and  not getattr ( self . field . widget , 'supports_microseconds' , True ) ) :
 for fixture_dir in fixture_dirs :
   __getitem__ = new_method_proxy ( operator . getitem )
    construct_instance_exclude = list ( exclude )
 if self . __dispatch is None :
 field_params = OrderedDict ( )
      help = "Prints the SQL statements for the named migration."
 self . use_l10n = use_l10n
 with open ( writer . path , "wb" ) as fh :
 left = t . led ( left , self )
          return self
                              line = '%s\n' % plural_form_line
    self . path = '%s/%s' % ( script_name . rstrip ( '/' ) ,  path_info . replace ( '/' , '' , 1 ) )
   def __getstate__ ( self ) :
 def ssi ( parser , token ) :
  for ch , escaped in input_iter :
              f . error_messages . setdefault ( 'incomplete' ,  self . error_messages [ 'incomplete' ] )
 context . update ( unpacked_vars )
              if os . fork ( ) > 0 :
   def pop ( self , idx = - 1 ) :
  else :
    @ register . filter ( is_safe = True )
 encode = lambda k , v : '%s=%s' % ( ( quote ( k , safe ) , quote ( v , safe ) ) )
def deconstructible ( * args , ** kwargs ) :
  elif self . argv [ 1 : ] in ( [ '--help' ] , [ '-h' ] ) :
 nodelist = parser . parse ( ( 'elif' , 'else' , 'endif' ) )
 def content ( self ) :
 self . dicts = [ builtins ]
      help = "Runs this project as a FastCGI application. Requires flup."
          paras = [ '<p>%s</p>' % p . replace ( '\n' , '<br />' ) for p in paras ]
    def templatize ( src , origin = None ) :
 os . chdir ( our_home_dir )
 while len ( digits ) <= abs ( exponent ) :
   for f in self . instance . _meta . fields :
  self . stream . write ( "[" )
 verbosity = options . get ( 'verbosity' )
 return str ( '%s%s%s' ) % ( value , self . sep , self . signature ( value ) )
   self . autocomplete ( )
      def validate_integer ( value ) :
   def root_attributes ( self ) :
 if isinstance ( choice_label , ( tuple , list ) ) :
 from django . utils . encoding import force_bytes
    def get_complete_version ( version = None ) :
  try :
          return isinstance ( other , EmailValidator ) and ( self . domain_whitelist == other . domain_whitelist ) and ( self . message == other . message ) and ( self . code == other . code )
   finally :
 for module in templatetags_modules :
                  yield node
    def decorator_from_middleware_with_args ( middleware_class ) :
              return s
              if template . startswith ( 'file://' ) :
  from collections import OrderedDict
    encode = curry ( _proxy_method , method = six . text_type . encode )
    filter_func . _filter_name = name
   def pop ( self , k , * args ) :
  else :
 leading = self . has_leading_dir ( namelist )
    if self . verbosity >= 1 :
  self . backout . append ( self . pointer )
                      callback = callback . func
     class RssFeed ( SyndicationFeed ) :
              self . _client = self . _lib . Client ( self . _servers )
   return num_sent
          return value
 self . open ( )
          package = import_module ( path )
 def __init__ ( self , regex ) :
 if opts :
 super ( FilePathField , self ) . __init__ ( choices = ( ) , required = required ,  widget = widget , label = label , initial = initial , help_text = help_text ,  * args , ** kwargs )
  except TypeError as te :
   data = { }
          change = fn ( )
  httpd . set_app ( wsgi_handler )
  except KeyError as key :
   def convert ( self , value ) :
     class TemplateIfParser ( IfParser ) :
 new_args = [ ]
                       if lookup == 'date' :
 parser . add_argument ( '--extension' , '-e' , dest = 'extensions' ,  action = 'append' , default = [ 'py' ] ,  help = 'The file extension(s) to render (default: "py"). '  'Separate multiple extensions with commas, or use '  '-e multiple times.' )
 from django . forms . widgets import (  TextInput , NumberInput , EmailInput , URLInput , HiddenInput ,  MultipleHiddenInput , ClearableFileInput , CheckboxInput , Select ,  NullBooleanSelect , SelectMultiple , DateInput , DateTimeInput , TimeInput ,  SplitDateTimeWidget , SplitHiddenDateTimeWidget , FILE_INPUT_CONTRADICTION  )
  logger = logging . getLogger ( 'django.request' )
     @ property
      advance_iterator = next
 setattr ( style , role , termcolors . make_style ( ** format ) )
 bits = token . split_contents ( )
   def args_check ( name , func , provided ) :
 self . models . add ( obj . object . __class__ )
 self . json_kwargs . pop ( 'stream' , None )
   klass . __new__ = staticmethod ( __new__ )
 import pickle
  del attr
 def cycle ( parser , token ) :
 for obj in queryset :
 return '%s-%s-%s GMT' % ( rfcdate [ : 7 ] , rfcdate [ 8 : 11 ] , rfcdate [ 12 : 25 ] )
 self . sysid = sysid
    def validate_host ( host , allowed_hosts ) :
      def format ( self , formatstr ) :
                  yield subnode
  references_to_delete = { }
  except IndexError :
  finally :
 key = self . make_key ( key , version = version )
              self . _urlconf_module = import_module ( self . urlconf_name )
          language_code = get_language ( )
          return ugettext ( "Please correct the duplicate values below." )
 self . tag ( function_name , compile_func )
    return mark_safe ( '' . join ( force_text ( n ) for n in nodelist ) )
  elif not isinstance ( content , Message ) :
                    opts . fields = None
 data_set = set ( force_text ( value ) for value in data )
 thefile = '%s.c' % self . file
              return
 text = force_text ( text )
    if item [ 'enclosure' ] is not None :
   class Command ( BaseCommand ) :
    parser = command . create_parser ( '' , name )
 response [ 'Cache-Control' ] = cc
  def __init__ ( self , * args , ** kwargs ) :
  def __init__ ( self , stream_or_string , ** options ) :
              self . mode = file . mode
 if hasattr ( out , 'isatty' ) and out . isatty ( ) :
 make_key = _make_key
      def __new__ ( mcs , name , bases , attrs ) :
                          raise KeyError ( 'Your dictionary lacks key \'%s\'. '  'Please provide it, because it is required to '  'determine whether string is singular or plural.'  % number )
from django . template . base import Lexer , Parser , tag_re , NodeList , VariableNode , TemplateSyntaxError
 if settings . DEBUG and request . META . get ( 'REMOTE_ADDR' ) in settings . INTERNAL_IPS :
 _win = ( sys . platform == "win32" )
              if self . verbosity >= 1 :
                  message = 'make sure the name begins with a letter or underscore'
              if primary_keys :
   if name == 'content-disposition' :
   @ property
      return _trans . ugettext ( message )
 def pluralize ( value , arg = 's' ) :
 if neg :
      global _default
 parser . delete_first_token ( )
   def invalid_block_tag ( self , token , command , parse_until = None ) :
 def to_bytes ( val , encoding ) :
              token = self . next_token ( )
 if '()' in config :
  else :
 extra_files = [ ]
   def lru_cache ( maxsize = 100 , typed = False ) :
 defaults . update ( kwargs )
  try :
  return mark_safe ( '' . join ( bits ) )
                      suffix = d [ 'suffix' ]
   delta = ( d - now ) if reversed else ( now - d )
                  bits . append ( None )
          return
     class Debug ( CheckMessage ) :
 if self . save_as_new :
 if self . verbosity >= 2 :
              self . first = parser . expression ( bp )
  @ total_ordering
  def render ( self , name , value , attrs = None ) :
                      self . stdout . write ( "Installing %s fixture '%s' from %s." %  ( ser_fmt , fixture_name , humanize ( fixture_dir ) ) )
  if not include_is_allowed ( filepath ) :
      def advance_iterator ( it ) :
  register = Library ( )
 def __init__ ( self , producer , length = None ) :
              raise ContextPopException
              register_serializer ( format , settings . SERIALIZATION_MODULES [ format ] , serializers )
   else :
 pass
     if hasattr ( response , 'render' ) and callable ( response . render ) :
 from threading import local
   return result == 0
              raise self . error_class ( "Unused '%s' at end of if expression." %  self . current_token . display ( ) )
  else :
          arg = settings . TIME_FORMAT
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
 from django . utils . encoding import force_text
 cache_get = cache . get
          super ( MemoryFileUploadHandler , self ) . new_file ( * args , ** kwargs )
                          year_val , month_val , day_val = [ int ( v ) for v in match . groups ( ) ]
 import cgi
          return None
     ip_str = _explode_shorthand_ip_string ( ip_str )
  kwargs . setdefault ( 'content_type' , 'application/json' )
 from django . utils . translation import ugettext , ungettext
  return name , ser_fmt , cmp_fmt
   callback , param_dict = resolver . resolve_error_handler ( 500 )
 get_ns_resolver . cache_clear ( )
 host = host . lower ( )
          self . attrs = attrs or { }
 return from_current_timezone ( result )
               tables = connection . introspection . table_names ( cursor )
   return valid
  else :
  return super ( ModelMultipleChoiceField , self ) . prepare_value ( value )
              pass
 result = self . configurator . convert ( value )
  def process_default ( self , event ) :
 self . files = files or { }
  msg [ name ] = value
 yield buf . read ( )
               path_rest = root [ prefix_length : ]
    if callable ( callback ) :
 tried = [ ]
 result , upto = [ ] , 0
              label_suffix = ( self . field . label_suffix if self . field . label_suffix is not None  else self . form . label_suffix )
          return number_format ( value , use_l10n = use_l10n )
 data = json . dumps ( data , cls = encoder )
 nofollow_attr = ' rel="nofollow"' if nofollow else ''
                  if timezone . is_aware ( expires ) :
  self . save_as_new = save_as_new
  except AttributeError :
 base64 = BaseConverter ( BASE64_ALPHABET , sign = '$' )
   from __future__ import absolute_import
 os . chmod ( filename , new_permissions )
 parser . add_library ( lib )
    tag_re = ( re . compile ( '(%s.*?%s|%s.*?%s|%s.*?%s)' %  ( re . escape ( BLOCK_TAG_START ) , re . escape ( BLOCK_TAG_END ) ,  re . escape ( VARIABLE_TAG_START ) , re . escape ( VARIABLE_TAG_END ) ,  re . escape ( COMMENT_TAG_START ) , re . escape ( COMMENT_TAG_END ) ) ) )
      _assertCountEqual = "assertCountEqual"
 register = registry . register
              return
          value = self . get ( key , version = version )
               lead , middle , trail = '' , word , ''
          reloader = jython_reloader
 ignore_patterns = options . get ( 'ignore_patterns' )
      widget = TextInput
                  widget = form . _meta . widgets . get ( self . _pk_field . name , HiddenInput )
 def linenumbers ( value , autoescape = None ) :
              raise TemplateSyntaxError ( "No named cycles in template. '%s' is not defined" % name )
 extra_context = token_kwargs ( remaining_bits , parser , support_legacy = True )
 found = False
 db = options . pop ( 'using' , DEFAULT_DB_ALIAS )
  field_desc += ', ' . join ( [  '%s=%s' % ( k , strip_prefix ( repr ( v ) ) )  for k , v in extra_params . items ( ) ] )
          super ( HttpResponse , self ) . __init__ ( * args , ** kwargs )
 import sys
 try :
from __future__ import unicode_literals
              if empty_label is not None :
 if options :
              app_configs = [ apps . get_app_config ( app_label ) for app_label in app_labels ]
  connection = connections [ options [ 'database' ] ]
                          continue
    @ register . filter ( is_safe = False )
 with lock :
          if attrs is not None :
    def _resolve ( self ) :
              return self . _cache . incr ( key , - delta )
  for potfile in potfiles :
    class SerializationError ( Exception ) :
              value = ConvertingDict ( value )
   def decode ( self , s ) :
          s = s [ : site ] + syear + s [ site + 4 : ]
              initial = bool ( initial )
          s = s [ 1 : ]
                  keys = node . getElementsByTagName ( 'natural' )
 if param not in params and varkw is None :
 self . silent = silent
 import time
 new_migration = subclass ( "0001_squashed_%s" % migration . name , app_label )
 if language_code not in self . _regex_dict :
              raise AttributeError ( "You cannot set the upload handlers after the upload has been processed." )
                                  raise
  output = [ ]
    def loaddata ( self , fixture_labels ) :
          self . func = func
   @ python_2_unicode_compatible
          return datetime . fromtimestamp ( os . path . getmtime ( self . path ( name ) ) )
  return ForNode ( loopvars , sequence , is_reversed , nodelist_loop , nodelist_empty )
          self . flo = flo
 validate_comma_separated_integer_list = RegexValidator ( comma_separated_int_list_re , _ ( 'Enter only digits separated by commas.' ) , 'invalid' )
 try :
  except ValueError :
from __future__ import unicode_literals
  def __init__ ( self ) :
         else :
          value = dict . get ( self , key , default )
       def __init__ ( self ) :
     return OrderedDict ( fields )
   end = kwargs . pop ( "end" , None )
              raise TemplateSyntaxError ( "expected another tag, found "  "end of string: %s" % subject )
   def handle_noargs ( self , ** options ) :
  else :
      return base64 . urlsafe_b64encode ( s ) . strip ( b'=' )
      def render ( self , context ) :
                          locale_dir = self . default_locale_path
 parser . delete_first_token ( )
 if end not in ( ">" , "/>" ) :
  return result
import warnings
 result = ungettext ( * msgs_with_ctxt )
      opts = model . _meta
  unencoded_ampersands_re = re . compile ( r'&(?!(\w+|#\d+);)' )
              path = safe_join ( self . location , name )
   def __eq__ ( self , other ) :
          return self . name
 if self . is_bound :
 def regroup ( parser , token ) :
   raise TemplateDoesNotExist ( name )
          self . _queryset = queryset
                          content_length = int ( meta_data . get ( 'content-length' ) [ 0 ] )
              name = p [ : i ] . strip ( ) . lower ( ) . decode ( 'ascii' )
  import datetime
    for app_name in app_names :
    TRAILING_PUNCTUATION = [ '.' , ',' , ':' , ';' , '.)' , '"' , '\'' ]
                  raise ValueError (  "fk_name '%s' is not a ForeignKey to '%s.%'."  % ( fk_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )
  pop_context = False
  return _ ( 'a.m.' )
          self . dict = OrderedDict ( ( ( x , None ) for x in iterable ) if iterable else [ ] )
          return None
 if fp is None :
   def _get_queryset ( self ) :
   if self . can_delete :
   return '' . join ( pieces )
          return type ( self ) . __bool__ ( self )
          return type ( self ) . __bool__ ( self )
 import re
      attrs = { 'model' : model }
              url = value
          return LoaderOrigin ( display_name , loader , name , dirs )
                          idx = m . groups ( ) [ 0 ]
  from django . core . exceptions import (  ImproperlyConfigured , ValidationError , NON_FIELD_ERRORS , FieldError )
 import time
 safe_data [ key ] = value
   def read ( self , size = None ) :
                      raise ValueError ( 'Unable to set target handler '  '%r: %s' % ( config [ 'target' ] , e ) )
          return "\\u%04x" % ord ( match . group ( 1 ) )
                  if not candidate :
 self . value = set ( force_text ( v ) for v in self . value )
              content_type = "%s; charset=%s" % ( settings . DEFAULT_CONTENT_TYPE ,  self . _charset )
              content_length = int ( META . get ( 'HTTP_CONTENT_LENGTH' , META . get ( 'CONTENT_LENGTH' , 0 ) ) )
              return path . join ( django . __path__ [ 0 ] , 'conf' , subdir )
   return m + Media ( definition )
  from django . conf import settings
  except ValidationError as e :
      pass
 from decimal import Decimal
    if unpack_ipv4 :
              raise ValueError ( "Key '%s' not found" % key )
 p = language . find ( '-' )
 if in_tag and token_string . startswith ( BLOCK_TAG_START ) :
   def listdir ( self , path ) :
          style = no_style ( )
 chunk = handler . receive_data_chunk ( chunk ,  counters [ i ] )
 return
              docs_version = 'dev'
          tag , this_value_expr , max_value_expr , max_width = bits
                  pieces . append ( re_escaped . sub ( r'\1' , piece ) )
 reloader ( wrapped_main_func , args , kwargs )
 for func , unused in filter_expr . filters :
          obj = copy . copy ( self )
  try :
 if len ( bits ) == 4 :
 val2 = parser . compile_filter ( bits [ 2 ] )
 def random ( value ) :
  return patterns
               break
              raise ValidationError ( self . error_messages [ 'invalid_choice' ] , code = 'invalid_choice' )
   elif count > 1 :
              cookie_value = self . COOKIES [ key ]
          if block_name in parser . __loaded_blocks :
    def _has_expired ( self , key ) :
          ch , escaped = next ( input_iter )
 with self . _lock . writer ( ) :
  return new_class
 self . find_template_cache . clear ( )
  try :
 from django . utils . translation import get_language
              value = ConvertingTuple ( value )
     def include_is_allowed ( filepath ) :
  from django . apps import apps
          __str__ = serialize_headers
          self . is_bound = data is not None or files is not None
          return not ( self == other )
                      self . invalid_block_tag ( token , command , parse_until )
                  return True
  _ , rest = token . contents . split ( None , 1 )
          pass
 signals = 'signals'
          for i , line in enumerate ( lines ) :
 self . stdout . write ( "  the new migration will be used for new installs. Once you are sure" )
  linebreaks = allow_lazy ( linebreaks , six . text_type )
              return SafeText ( t )
 @ stringfilter
    def _generate_cache_key ( request , method , headerlist , key_prefix ) :
    def localize ( value , use_l10n = None ) :
              self . _populate ( )
   return dummy ( )
          try :
 return force_text ( quote_plus ( force_str ( url ) , force_str ( safe ) ) )
 if not value :
 return result
  module = type ( 'BadSerializerModule' , ( object , ) , {  'Deserializer' : bad_serializer ,  'Serializer' : bad_serializer ,  } )
  return self . _upload_handlers
                  self . timezone = get_default_timezone ( )
              return ''
          self . max_length , self . min_length = max_length , min_length
 if app_config . models_module is None :
   def render_option ( self , selected_choices , option_value , option_label ) :
 @ stringfilter
          self . _reset_dicts ( dict_ )
          path = self . path ( path )
   except NotImplementedError :
          parser . add_argument ( 'name' , help = 'Name of the application or project.' )
                  continue
 return res
                  self . stdout . write ( "Cleaning up temporary files.\n" )
   def validate ( self , value ) :
              orig = self . parent_instance . pk
 if run_syncdb and executor . loader . unmigrated_apps :
              self . _close_files ( )
                  if hasattr ( request , 'urlconf' ) :
                  return [ ]
 parser = self . _parser
 return escapejs ( value )
   if field_type == 'DecimalField' :
  if subject [ i ] in ( '"' , "'" ) :
 readline . set_completer ( rlcompleter . Completer ( imported_objects ) . complete )
                  values = list ( values )
     if type ( field_type ) is tuple :
   def handle_label ( self , label , ** options ) :
           hextets [ index ] = hextets [ index ] . lstrip ( '0' )
   declared_fields = OrderedDict ( )
                      if inplural :
 super ( SimpleUploadedFile , self ) . __init__ ( BytesIO ( content ) , None , name ,  content_type , len ( content ) , None , None )
   return __wrapper__
   for ( field_name , field_value ) in six . iteritems ( d [ "fields" ] ) :
          try :
     if self . paths_to_remove :
 collect . extend ( settings . TEMPLATE_CONTEXT_PROCESSORS )
                          warnings . warn (  "Need {0} values to unpack in for loop; got {1}. "  "This will raise an exception in Django 2.0."  . format ( num_loopvars , len_item ) ,  RemovedInDjango20Warning )
 self . validate_key ( key )
 return
  else :
 obj_pk = field . rel . to . _default_manager . db_manager ( self . db ) . get_by_natural_key ( * field_value ) . pk
 related_att = getattr ( obj , field . get_attname ( ) )
 pieces = accept_language_re . split ( lang_string . lower ( ) )
  def readlines ( self ) :
 return do_ntranslate ( singular , plural , number , 'ungettext' )
 _itervalues = "itervalues"
      renderer = CheckboxFieldRenderer
  return meta ( name , bases , d )
 length = int ( num )
           if id_ :
  elif disable_existing :
                          continue
   class TemplateSyntaxError ( Exception ) :
 self . cc = list ( cc )
              return truncate % { 'truncated_text' : text }
                  self . stdout . write ( "  Unapplying %s..." % migration , ending = "" )
 if isinstance ( context , Context ) :
      status_code = 301
                      url = reverse ( project_name + '.' + view_name ,  args = args , kwargs = kwargs ,  current_app = context . current_app )
  self . validate_name ( name , app_or_project )
  except Exception as e :
    @ deconstructible
  else :
  def __init__ ( self , loopvars , sequence , is_reversed , nodelist_loop , nodelist_empty = None ) :
   return metaclass ( 'temporary_class' , None , { } )
          if size is None or size > self . remaining :
   def handle ( self , * app_labels , ** options ) :
   def _get_post ( self ) :
 interactive = options . get ( 'interactive' )
              return usage
          super ( CheckboxInput , self ) . __init__ ( attrs )
              raise CommandError ( "couldn't download URL %s to %s: %s" %  ( url , filename , e ) )
              if settings . TEMPLATE_DEBUG :
 quit_command = 'CTRL-BREAK' if sys . platform == 'win32' else 'CONTROL-C'
 for loader in self . loaders :
 bits = token . split_contents ( )
 import sys
              if self . active_writers == 0 and self . waiting_writers == 0 and self . active_readers == 0 :
      return _trans . activate ( language )
 return ( '<%s token: "%s...">' %  ( token_name , self . contents [ : 20 ] . replace ( '\n' , '' ) ) )
 for processor in get_standard_processors ( ) + processors :
 output . append ( '\n\n' )
  elif len ( options . args ) < 1 :
  elif char in 'Yy' :
   def end_serialization ( self ) :
  def __init__ ( self , name , regex , next = None ) :
                  for key , value_list in other_dict . lists ( ) :
   def values ( self ) :
              error_msg = "Invalid template name in 'extends' tag: %r." % parent
 self . setFeature ( handler . feature_external_pes , False )
 output = force_text ( output )
              raise EmptyPage ( 'That page number is less than 1' )
                      buffer_ = line
 self . _num_pages = self . _count = None
 args , kwargs = parse_bits ( parser , bits , params , varargs , varkw ,  defaults , takes_context , name )
 return '\n' . join ( statements )
 block . context = context
 self . old_timezone = getattr ( _active , 'value' , None )
      if not sys . warnoptions :
          __call__ = type . __call__
  else :
 self . prefix = prefix
 if self . cdata_tag is not None :
 self . setlistdefault ( key ) . append ( value )
 self . subject = subject
 sql_files = [ ]
  except ValidationError as e :
      renderer = None
 return smart_text ( obj )
  FASTCGI_OPTIONS = {  'protocol' : 'fcgi' ,  'host' : None ,  'port' : None ,  'socket' : None ,  'method' : 'fork' ,  'daemonize' : None ,  'workdir' : '/' ,  'pidfile' : None ,  'maxspare' : 5 ,  'minspare' : 2 ,  'maxchildren' : 50 ,  'maxrequests' : 0 ,  'debug' : None ,  'outlog' : None ,  'errlog' : None ,  'umask' : None ,  }
                  translation . activate ( saved_locale )
 if key_prefix is None :
 for level in zip ( * [ m . ancestry for m in merge_migrations ] ) :
  if 'DJANGO_AUTO_COMPLETE' not in os . environ :
 from django . utils . safestring import mark_safe
  except ValueError :
          return ( ord ( byte ) for byte in buf )
   elif name is not None and compile_function is not None :
 try :
                          for handler in handlers :
              if can_fail :
              name_str = "; " . join (  "%s in %s" % ( ", " . join ( names ) , app )  for app , names in conflicts . items ( )  )
      def __init__ ( self , token_type , contents ) :
 host_validation_re = re . compile ( r"^([a-z0-9.-]+|\[[a-f0-9]*:[a-f0-9:]+\])(:\d+)?$" )
           l = len ( tokens )
          if self . _callback is not None :
          return any ( w . needs_multipart_form for w in self . widgets )
  else :
    if item [ 'unique_id' ] is not None :
 plat = sys . platform
                       old = '#: ' + work_file
 from django . core . management . base import BaseCommand , CommandError
          length = int ( arg )
              return bytes ( value )
           return host , ''
 fixture_name = os . path . basename ( fixture_name )
  nodelist = parser . parse ( ( 'endautoescape' , ) )
              raise ContentNotRenderedError ( 'The response content must be '  'rendered before it can be accessed.' )
 @ stringfilter
    setattr ( form . instance , self . fk . get_attname ( ) , self . instance . pk )
    else :
 if connection . ops . start_transaction_sql ( ) :
          encoding = self . encoding or settings . DEFAULT_CHARSET
                  return debug . technical_500_response ( request , * sys . exc_info ( ) , status_code = 400 )
   def render ( self , context ) :
  if len ( args ) < 2 :
   def new ( self , values = None ) :
          stream = StringIO ( stream_or_string )
  else :
     class RadioSelect ( RendererMixin , Select ) :
 from django . utils import six
 def as_data ( self ) :
   class Command ( BaseCommand ) :
 def __init__ ( self , stream , boundary ) :
     class Enclosure ( object ) :
 return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )
 output . append ( last_row )
    def __exit__ ( self , exc_type , exc_value , traceback ) :
  Meta = type ( str ( 'Meta' ) , parent , attrs )
 msgs , errors , status = popen_wrapper ( args )
                  kwargs [ "initial" ] = self . parent_instance . pk
              hextets = [ '' ] + hextets
 unpack = num_loopvars > 1
   attrs = flatatt ( attrs ) if attrs else ''
    _supported = None
                  raise RawPostDataException ( "You cannot access body after reading from request's data stream" )
 return etags
          attrs [ 'fields' ] = fields
     kwarg_re = re . compile ( r"(?:(\w+)=)?(.+)" )
    def find_command ( cmd , path = None , pathext = None ) :
          non_atomic_requests = getattr ( view , '_non_atomic_requests' , set ( ) )
 _format_cache = { }
              result = factory ( ** kwargs )
 six . reraise ( ImproperlyConfigured , ImproperlyConfigured ( msg ) ,  sys . exc_info ( ) [ 2 ] )
  os . setsid ( )
                      visible_issue_count += len ( issues )
          lookups = MultiValueDict ( )
          for key in self . keyOrder :
    def serialize ( format , queryset , ** options ) :
   try :
 newlines = property ( lambda self : self . file . newlines )
 super ( MultiValueField , self ) . __init__ ( * args , ** kwargs )
    return '\n' . join ( usage )
 if base_url is None :
 if log in child_loggers :
 return _generate_cache_key ( request , request . method , [ ] , key_prefix )
 if key_prefix is None :
           MAXSIZE = int ( ( 1 << 31 ) - 1 )
                  if six . PY3 :
 bits = token . split_contents ( ) [ 1 : ]
    def normalize ( pattern ) :
          for closable in self . _closable_objects :
 from wsgiref import simple_server
   def E ( self ) :
 raise NotImplementedError ( 'subclasses of FileUploadHandler must provide a receive_data_chunk() method' )
                              t = file_name
    return False
  from django . core . management . base import AppCommand
  extra_classes = set ( extra_classes or [ ] )
  def handle_raw_input ( self , input_data , META , content_length , boundary , encoding = None ) :
  else :
 return datetime . date ( ** kw )
 if value in self . empty_values :
 for attr in _urllib_robotparser_moved_attributes :
              raise ValueError ( "This file is not accessible via a URL." )
                  raise ValidationError (  self . error_messages [ 'invalid_pk_value' ] ,  code = 'invalid_pk_value' ,  params = { 'pk' : pk } ,  )
 from django . core . mail . backends . console import EmailBackend as ConsoleEmailBackend
 from functools import wraps
                  try :
 is_compressed = True
              raise ValidationError ( errors )
    except http . Http404 as e :
          warnings . warn (  "NoArgsCommand class is deprecated and will be removed in Django 2.0. "  "Use BaseCommand instead, which takes no arguments by default." ,  RemovedInDjango20Warning  )
      default_error_messages = {  'invalid_image' : _ ( "Upload a valid image. The file you uploaded was either not an image or a corrupted image." ) ,  }
 def content ( self , value ) :
              return 0
  def __init__ ( self ) :
  if value :
 from django . utils . _os import upath
   def upload_complete ( self ) :
                  codecs . lookup ( content_params [ 'charset' ] )
 if self . _pk_field == self . fk :
          self . file . close ( )
  except ImportError :
  if field == NON_FIELD_ERRORS :
  def __init__ ( self , attrs = None , years = None , months = None , empty_label = None ) :
 import warnings
 if isinstance ( stream_or_string , bytes ) :
   return commands
 top_errors = self . non_field_errors ( )
      def handle_template ( self , template , subdir ) :
   class _OFFSET ( Structure ) :
  else :
              new_name = 'field%s' % new_name
          for filepath in self . get_template_sources ( template_name , template_dirs ) :
          if not self :
  if data is None :
 stats [ MISSES ] += 1
    if len ( app_labels ) == 0 :
   def subwidgets ( self , name , value , attrs = None , choices = ( ) ) :
  if code is not None :
  plen = len ( provided ) + 1
           if cursor :
  data [ field . name ] = value
              c = SimpleCookie ( )
   def ip_address_validators ( protocol , unpack_ipv4 ) :
   def render ( self , name , value , attrs = None ) :
          values = [ parser . compile_filter ( arg ) for arg in args [ 1 : ] ]
    def safe_join ( base , * paths ) :
   def y ( self ) :
 shell . mainloop ( )
              del self . _expire_info [ key ]
 try :
  self . _post_render_callbacks = [ ]
              self [ k ] = v
  val . append ( iso_input )
  elif self . _delegate_text :
   if ( ( os . stat ( path ) . st_mode & stat . S_IREAD ) != stat . S_IREAD ) :
 with context . push ( ) :
          pass
 from django . utils . encoding import force_bytes , force_str , force_text
 template = self . resolve_template ( self . template_name )
              try :
              for key , value in parse_qsl ( query_string or '' ,  keep_blank_values = True ) :
 output = [ pformat ( val ) for val in context ]
                          link = cache_get ( key )
 intrans = False
       expression = parser . compile_filter ( var_name +  VARIABLE_ATTRIBUTE_SEPARATOR +  bits [ 3 ] )
 value = value . replace ( arg , '' )
     return Operator
 return self . serialize_headers ( ) + b'\r\n\r\n' + self . content
 if autoescape :
  else :
                      block_context . push ( self . name , push )
 if digest is None :
    def _isdst ( self , dt ) :
 if extra_attrs :
              return ""
       _version = "2.0"
  return str ( '<%s %s (%s:%s) %s>' ) % (  self . __class__ . __name__ , urlconf_repr , self . app_name ,  self . namespace , self . regex . pattern )
   if msgs :
 return localtime ( value ) if should_convert else value
                  return code
                      self . verbatim = 'end%s' % block_content
              widget . is_localized = True
                  file = BytesIO ( data [ 'content' ] )
   def _has_changed ( self , initial , data ) :
              models . add ( model )
 return guessed_path
 if not m :
 memo [ id ( self ) ] = obj
  except ImportError :
   def avoid_wrapping ( value ) :
   if not new_method and old_method :
 from django . core . management . sql import sql_delete
   if ( isinstance ( fp , file ) and  isinstance ( data , unicode ) and  fp . encoding is not None ) :
          tables = connection . introspection . django_table_names ( only_existing = True )
  if connection . settings_dict [ 'ENGINE' ] == 'django.db.backends.dummy' :
              item , old_style_list = convert_old_style_list ( sublist )
   def _get_name ( self ) :
              value = values . get ( value . lower ( ) , value )
 def do_if ( parser , token ) :
                  if os . path . basename ( candidate ) in targets :
 return force_text ( unquote ( force_str ( quoted_url ) ) )
          self . _encoding = value
  return value
  def compile_func ( parser , token ) :
 orig_file = os . path . join ( self . dirpath , self . file )
          return self . number > 1
      default_error_messages = {  'invalid' : _ ( 'Enter a number.' ) ,  }
              message = _ (  '%(datetime)s couldn\'t be interpreted '  'in time zone %(current_timezone)s; it '  'may be ambiguous or it may not exist.'  )
              msg = self . style . HTTP_NOT_FOUND ( msg )
    def generic_tag_compiler ( parser , token , params , varargs , varkw , defaults ,  name , takes_context , node_class ) :
      def __init__ ( self , source ) :
 for form in self . initial_forms :
   saved_instances = [ ]
   def __contains__ ( self , item ) :
  if best_doublecolon_end == len ( hextets ) :
                  if status != STATUS_OK :
     class MultiValueField ( Field ) :
  try :
              self . execute ( * args , ** cmd_options )
 from django . utils . functional import allow_lazy
    class LocaleRegexProvider ( object ) :
                error = ValidationError ( error )
                          self . choices . append ( ( full_file , f ) )
    @ register . filter ( is_safe = True , needs_autoescape = True )
  else :
   def supports_color ( ) :
 best_doublecolon_start = - 1
                  if path . isfile ( path_to_remove ) :
 _iteritems = "items"
                  for middleware_method in self . _template_response_middleware :
 dirs = [ upath ( os . path . abspath ( os . path . realpath ( d ) ) ) for d in dirs ]
 pk = to_python ( pk )
  bits = token . contents . split ( )
   def render_js ( self ) :
              pass
  else :
  else :
           self . verbosity = options . get ( 'verbosity' )
  else :
    def emit_pre_migrate_signal ( create_models , verbosity , interactive , db ) :
  elif total_forms > self . max_num >= 0 :
              options , args = parser . parse_known_args ( self . argv [ 2 : ] )
          self . context . pop ( )
     libraries = { }
    @ register . filter ( is_safe = True )
 M . set ( key , real_value , coded_value )
    @ register . tag
              res = ''
                      logger = root . manager . loggerDict [ log ]
  ch = next ( input_iter )
  except ValueError :
 INDEX_PATTERN = re . compile ( r'^\[\s*(\w+)\s*\]\s*' )
     def _get_model ( model_identifier ) :
  remove_tags = allow_lazy ( remove_tags , six . text_type )
   warnings . simplefilter ( "default" , RemovedInNextVersionWarning )
              logging . _releaseLock ( )
              yield k
 def check_all_models ( app_configs = None , ** kwargs ) :
          return _generate_cache_key ( request , method , headerlist , key_prefix )
              return self . forms [ 0 ] . media
              arg_vals = [ ]
    class DateTimeInput ( DateTimeBaseInput ) :
 import operator
  else :
  value = int ( s , 36 )
  PVOID = c_void_p
  else :
  else :
          widgets = ( DateInput ( attrs = attrs , format = date_format ) ,  TimeInput ( attrs = attrs , format = time_format ) )
          value = list . __getitem__ ( self , key )
                  if isinstance ( attachment , MIMEBase ) :
   def to_python ( self , value ) :
              if register_to :
  if value is not result :
              the_path , info = urlretrieve ( url , path . join ( tempdir , filename ) )
      def get_unbound_function ( unbound ) :
      _assertCountEqual = "assertItemsEqual"
 request = None
     def get_tag_uri ( url , date ) :
                  widget_value = value [ i ]
     def _bin_to_long ( x ) :
   def save_new_objects ( self , commit = True ) :
     @ deconstructible
   raise KeyError ( key )
 lists = _iterlists
 self . _template_response_middleware = [ ]
  except KeyError :
    if field_type == 'CharField' and row [ 3 ] :
                        print ( "In the tar file %s the member %s is invalid: %s" %  ( name , member . name , exc ) )
  connection = connections [ options [ 'database' ] ]
  except OSError as e :
 value = bytes_to_text ( value , self . encoding )
  if isinstance ( value , datetime . datetime ) :
              messages . update ( getattr ( c , 'default_error_messages' , { } ) )
    def _add_fallback ( self ) :
  except ( ValueError , TypeError ) :
              raise MultiPartParserError ( 'Invalid Content-Type: %s' % content_type )
                      if filename . endswith ( '.mo' ) :
 return importlib_find ( full_module_name , package_path ) is not None
           return super ( PythonSerializer , self ) . getvalue ( )
 for exclude in excludes :
  value = data . get ( name )
  self . cookies = SimpleCookie ( )
              raise TypeError ( 'Level not an integer or a '  'valid string: %r' % level )
  elif action == "apply_success" :
                       value = value . decode ( charset )
 self . host = host or settings . EMAIL_HOST
     def __repr__ ( self ) :
   def extract ( self , filename ) :
 form . _errors [ NON_FIELD_ERRORS ] = self . error_class ( [ self . get_form_error ( ) ] )
 self . resolver_match = None
   if errors_on_separate_row and bf_errors :
  else :
   for field , initial , data in zip ( self . fields , initial , data ) :
 code = 'max_length'
  else :
   _wrapped = None
   class IfParser ( object ) :
 return _get_timezone_name ( get_current_timezone ( ) )
   def value ( self ) :
   class Command ( BaseCommand ) :
                  widget_value = None
              param = None
              self . instance . full_clean ( exclude = exclude , validate_unique = False )
              data = file . read ( chunk_size )
          return [ ]
  else :
   def __copy__ ( self ) :
 def __init__ ( self , * args , ** kwargs ) :
 from django . utils . encoding import force_text
   _active = local ( )
  return original_urlencode (  [ ( force_str ( k ) ,  [ force_str ( i ) for i in v ] if isinstance ( v , ( list , tuple ) ) else force_str ( v ) )  for k , v in query ] ,  doseq )
                  if inplural :
              try :
 if not self . initial_forms :
   class ValidationError ( Exception ) :
 writelines = property ( lambda self : self . file . writelines )
 parser . add_option ( '--no-color' , action = 'store_true' , dest = 'no_color' , default = False ,  help = "Don't colorize the command output." )
 if not ip_str . lower ( ) . startswith ( '0000:0000:0000:0000:0000:ffff:' ) :
          raise SerializerDoesNotExist ( format )
  if compress :
                  def handle_m2m ( value ) :
 if has_bom ( po_path ) :
 self . cdata_tag = None
          alter_sql = [ ]
 if renderer :
  def nud ( self , parser ) :
  def to_python ( self , value ) :
                      data [ f . name ] = [ item . pk for item in qs ]
              msg = (  "The included urlconf '{name}' does not appear to have any "  "patterns in it. If you see valid patterns in the file then "  "the issue is probably caused by a circular import."  )
  if alter_sql :
  self = tuple . __new__ ( cls , * args , ** kwargs )
   def top ( self ) :
          response [ 'Location' ] = request . build_absolute_uri ( response [ 'Location' ] )
   def create_variable_node ( self , filter_expression ) :
 tok = toks [ name ]
                  token = Token ( TOKEN_VAR , token_string [ 2 : - 2 ] . strip ( ) )
     class CheckboxChoiceInput ( ChoiceInput ) :
 pass
 if not self . is_required and CheckboxInput ( ) . value_from_datadict (  data , files , self . clear_checkbox_name ( name ) ) :
 app_path = getattr ( settings , 'WSGI_APPLICATION' )
                      if f == '__pycache__' :
  except IndexError :
     @ python_2_unicode_compatible
    def dictvalue ( t ) :
 args_safe = map ( conditional_escape , args )
 return major
 k = match . end ( )
                      raise
    return (  format_html_join ( '' , ' {0}="{1}"' , sorted ( attrs . items ( ) ) ) +  format_html_join ( '' , ' {0}' , sorted ( boolean_attrs ) )  )
 for name in sorted ( commands_dict [ app ] ) :
 self . interactive = options . get ( 'interactive' )
 from __future__ import unicode_literals
 if constant_arg :
 new_class . declared_fields = declared_fields
                  continue
              if isinstance ( node , Node ) :
                          self . stdout . write ( "    - %s\n" % operation . describe ( ) )
              content_length = 0
 from IPython . Shell import IPShell
              if self . fixture_count == 0 and self . hide_empty :
  qs = qs . using ( form . instance . _state . db )
          parser . add_argument ( 'addrport' , nargs = '?' ,  help = 'Optional port number, or ipaddr:port' )
 from django . core . cache import caches
 if tzinfo [ 0 ] == '-' :
                      args . append ( ( True , Variable ( var_arg ) ) )
 from django . db import connections , DEFAULT_DB_ALIAS
    class DeserializationError ( Exception ) :
  elif self . waiting_readers != 0 :
      return settings . LANGUAGE_CODE
   if timeout > 2592000 :
  except AttributeError :
              mail . outbox = [ ]
              raise TemplateSyntaxError ( "Invalid filter: '%s'" % filter_name )
   if hasattr ( mw_instance , 'process_request' ) :
   def _proxy_method ( self , * args , ** kwargs ) :
  if end . endswith ( '/>' ) :
  try :
 from django . core . mail . message import sanitize_address
              if ( self . requires_system_checks and  not options . get ( 'skip_validation' ) and  not options . get ( 'skip_checks' ) ) :
 for pk in value :
  headerlist = cache . get ( cache_key , None )
 try :
    def ngettext_lazy ( singular , plural , number = None ) :
              return
      def get_quantifier ( ch , input_iter ) :
   else :
          hfile = msvcrt . get_osfhandle ( _fd ( f ) )
   def tag_exists ( self , tag ) :
              fail_message = 'changed'
                          self . configure_root ( root , True )
  def serialize ( self , queryset , ** options ) :
 if isinstance ( value , ( decimal . Decimal , float ) + six . integer_types ) :
 if not directory_created . get ( app_label , False ) :
 from __future__ import unicode_literals
 parser . delete_first_token ( )
 html [ 'day' ] = self . create_select ( name , self . day_field , value , day_val , choices , self . day_none_value )
  return doy
              check . tags = tags
              self . renderer = renderer
 f = super ( ImageField , self ) . to_python ( data )
 if not self . timezone :
   if new_name . find ( '__' ) >= 0 :
   def start_object ( self , obj ) :
              self . flags = flags
                  output . append ( "%s = %s  ###" % ( key , user_settings [ key ] ) )
                        pass
  def __init__ ( self , iterable = None ) :
              checks = [ check for check in self . registered_checks  if hasattr ( check , 'tags' ) and set ( check . tags ) & set ( tags ) ]
 if result is not None :
 while True :
   else :
 self . initial = initial or { }
   def validate_name ( self , name , app_or_project ) :
                  try :
    def _lazy_proxy_unpickle ( func , args , kwargs , * resultclasses ) :
 import sys
              if isinstance ( slots , str ) :
              raise ValueError ( "Key '%s' not found" % key )
 from django . utils import six
              raise CommandError ( "you must provide %s %s name" % (  "an" if app_or_project == "app" else "a" , app_or_project ) )
              data = compressed
                  if buffer_ :
 from email . utils import formatdate , getaddresses , formataddr , parseaddr
 self . _remaining = length
                      new_file . write ( content )
          iter ( x )
          self . _post = QueryDict ( '' )
              try :
          return False
     def build_instance ( Model , data , db ) :
  if hasattr ( model , 'natural_key' ) :
 new_context . _reset_dicts ( values )
  return attachment
      pass
 decompress = False
 command_dir = os . path . join ( management_dir , 'commands' )
              return self . _render ( context )
          try :
   def __del__ ( self ) :
          connection = connections [ self . using ]
   def reset ( self ) :
  output , errors = p . communicate ( )
 result = self . configurator . convert ( value )
 self . buffer = b''
         for log in existing :
 for key in self :
  if item [ 'comments' ] is not None :
 from django . utils . translation import ugettext as _
   def validate ( self , value ) :
  elif tzinfo is not None :
                                  mode = 'wb' if isinstance ( chunk , bytes ) else 'wt'
          del cc [ 'private' ]
 self . can_write = threading . Semaphore ( 0 )
                      raise TemplateSyntaxError ( "Variables and attributes may "  "not begin with underscores: '%s'" %  var )
              handler . addQuickElement ( "enclosure" , '' ,  { "url" : item [ 'enclosure' ] . url , "length" : item [ 'enclosure' ] . length ,  "type" : item [ 'enclosure' ] . mime_type } )
    def as_data ( self ) :
    def render_to_string ( template_name , dictionary = None , context_instance = None ,  dirs = None ) :
          raise self . exception
 from django . utils . deprecation import RemovedInDjango20Warning
  if self . feed [ 'subtitle' ] is not None :
          parser . add_argument ( 'args' , metavar = 'app_label[.ModelName]' , nargs = '*' ,  help = 'Restricts dumped data to the specified app_label or app_label.ModelName.' )
                   for k2 , v2 in v :
              if event == "START_ELEMENT" and node . nodeName == "object" :
   def phone2numeric ( phone ) :
   def clear ( self ) :
    def get_deserializer ( format ) :
              content = f . read ( )
  for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) :
   def get_connection ( self , fail_silently = False ) :
          arg = settings . DATE_FORMAT
  return result
   def _findall ( text , substr ) :
   else :
              exts = extensions if extensions else [ 'html' , 'txt' ]
          self . format_string = format_string
          return [ ( '' , [ ] ) ]
   class EmailBackend ( BaseEmailBackend ) :
  _js_escapes = {  ord ( '\\' ) : '\\u005C' ,  ord ( '\'' ) : '\\u0027' ,  ord ( '"' ) : '\\u0022' ,  ord ( '>' ) : '\\u003E' ,  ord ( '<' ) : '\\u003C' ,  ord ( '&' ) : '\\u0026' ,  ord ( '=' ) : '\\u003D' ,  ord ( '-' ) : '\\u002D' ,  ord ( ';' ) : '\\u003B' ,  ord ( '\u2028' ) : '\\u2028' ,  ord ( '\u2029' ) : '\\u2029'  }
    extensions = tuple (  handle_extensions ( options [ 'extensions' ] , ignored = ( ) ) )
 import glob
      def callable ( obj ) :
              self . interesting = _html_parser . interesting_normal
 @ wraps ( func )
  except ValidationError :
 LIGHT_PALETTE = 'light'
      pass
 from django . forms . utils import flatatt , ErrorDict , ErrorList
                  if self . cdata_tag is not None :
 self . isolated_context = kwargs . pop ( 'isolated_context' , False )
  lexer = lexer_class ( template_string , origin )
 old_field_name = None
              template = get_template_from_string ( source , origin , template_name )
   def _populate ( self ) :
              return self . file . close ( )
              doy += 1
 if slots is not None :
   base64d = b64_encode ( data )
  else :
    function_name = ( name or  getattr ( func , '_decorated_function' , func ) . __name__ )
 key = plist . pop ( 0 ) . lower ( ) . decode ( 'ascii' )
 self . base_fields [ INITIAL_FORM_COUNT ] = IntegerField ( widget = HiddenInput )
  except ( ValueError , TypeError ) :
 filename = os . path . basename ( path )
   def __ne__ ( self , other ) :
    def _is_shorthand_ip ( ip_str ) :
    def now ( ) :
                  validate_ipv46_address ( ip_address )
          return tag in self . tags_available ( )
          class NumberAwareString ( resultclass ) :
     def find_template_loader ( loader ) :
   def _dec ( func ) :
 self . _called_from_command_line = True
  illegal_formatting = _illegal_formatting . search ( fmt )
 try :
              return self . empty_value
 if match :
 trans_real . _translations = { }
          return ''
 self . file_permissions_mode = (  file_permissions_mode if file_permissions_mode is not None  else settings . FILE_UPLOAD_PERMISSIONS  )
                  opt_label = option [ 0 ]
 ERROR = 40
                      try :
                          initial_value = field . to_python ( hidden_widget . value_from_datadict (  self . data , self . files , initial_prefixed_name ) )
          return ord ( bs [ 0 ] )
 def last ( value ) :
 results = ( [ ] , [ ] )
  urlquote_plus = allow_lazy ( urlquote_plus , six . text_type )
 inline_re = re . compile ( r"""^\s*trans\s+((?:"[^"]*?")|(?:'[^']*?'))(\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?')))?\s*""" )
          output . extend ( connection . creation . sql_destroy_indexes_for_model ( model , style ) )
              return ""
 if not os . path . exists ( self . default_locale_path ) :
          errors = [ ]
from __future__ import unicode_literals
              return time_format ( value , arg )
  if option [ 1 ] :
 runfastcgi ( args )
  self . _lib = library
          if input_val in special_floats :
          return None
 locales = set ( locales ) - set ( exclude )
                  regex = force_text ( self . _regex )
                  self . load_label ( fixture_label )
        must_be_first = False
          if model_list is None :
              self . stdout . write ( self . style . MIGRATE_HEADING ( "Optimizing..." ) )
                  try :
 self . base_fields [ MAX_NUM_FORM_COUNT ] = IntegerField ( required = False , widget = HiddenInput )
  import decimal
 if hasattr ( formfield , 'queryset' ) :
     def format_html ( format_string , * args , ** kwargs ) :
  def add_arguments ( self , parser ) :
              if t . token_type == TOKEN_BLOCK :
  else :
                  self . stderr . write ( "The po files under %s are in a seemingly not writable location. "  "mo files will not be updated/created." % dirpath )
 integer_types = int ,
   default_error_messages = {  'required' : _ ( 'This field is required.' ) ,  }
                  if block_content [ : 9 ] in ( 'verbatim' , 'verbatim ' ) :
 if lang_code is not None :
  if exclude is not None :
    def _make_key ( args , kwds , typed ,  kwd_mark = ( object ( ) , ) ,  fasttypes = { int , str , frozenset , type ( None ) } ,  sorted = sorted , tuple = tuple , type = type , len = len ) :
  sign , digittuple , exponent = value . as_tuple ( )
                    return
 if html :
   elif form . has_changed ( ) :
 _ , content_params = cgi . parse_header ( environ . get ( 'CONTENT_TYPE' , '' ) )
 from django . utils . functional import lazy
                  with open ( filepath , 'rb' ) as fp :
   def __ne__ ( self , other ) :
                             meth = cls . __promise__ ( resultclass , k , v )
   except AttributeError :
          view = viewname
  except ValidationError as e :
  if value and hasattr ( value , "url" ) :
 for hextet in new_ip :
  result . sort ( key = lambda k : k [ 1 ] , reverse = True )
 value = next ( cycle_iter ) . resolve ( context )
   @ property
 if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
                  pass
  if error_class is None :
              raise InputStreamExhausted ( )
 pass
               value = self . literal
   except ImportError :
                   def dec ( func ) :
   def render ( self , context ) :
  if last == 3 :
 from datetime import datetime
    def handle ( self , * test_labels , ** options ) :
 for attr in _urllib_request_moved_attributes :
 import traceback
          urlconf = get_urlconf ( )
  try :
  def _format_value ( self , value ) :
 import warnings
  unichr = chr
 try :
                      if value == k2 or text_value == force_text ( k2 ) :
  arg = args [ 1 ]
   header = chunk [ : header_end ]
 for i , line in enumerate ( table_output ) :
  import logging
  return result
   except ValueError :
 level = config . get ( 'level' , None )
   def __get__ ( self , obj , tp ) :
              yield key , self [ key ]
          return set ( chain ( * [ check . tags for check in self . registered_checks if hasattr ( check , 'tags' ) ] ) )
  except ( TypeError , VariableDoesNotExist ) :
              raise CommandError ( "App '%s' does not have migrations" % app_label )
                      old = '#: ' + work_file [ 2 : ]
   def widget_attrs ( self , widget ) :
  if os . name == 'posix' :
              priority = 1.0
   else :
  finally :
 mixed_subtype = 'mixed'
 while ch != '}' :
          ch = None
 list_ = [ bytes_to_text ( elt , self . encoding ) for elt in list_ ]
 pending_references = { }
 from django . utils . encoding import force_text
 from django . core . mail import get_connection
 from django . utils . text import Truncator , wrap , phone2numeric
 exc_value . __cause__ = exc
 cache . set ( cache_key , headerlist , cache_timeout )
 if quote_double_quotes :
  def __init__ ( self , content = b'' , * args , ** kwargs ) :
                    self . translate = True
 from django . conf import settings
 widget = HiddenInput
  forms = [ self . _construct_form ( i ) for i in xrange ( self . total_form_count ( ) ) ]
   class Module_six_moves_urllib ( types . ModuleType ) :
 DEFAULT_CHUNK_SIZE = 64 * 2 ** 10
   @ python_2_unicode_compatible
 if self . first :
   def token_kwargs ( bits , parser , support_legacy = False ) :
  if len ( bits ) == 3 :
 if not isinstance ( stream_or_string , ( bytes , six . string_types ) ) :
           patterns = getattr ( self . urlconf_module , "urlpatterns" , self . urlconf_module )
                      if not self . compile_filter_error ( token , e ) :
 return s
   @ HttpResponse . content . setter
   def filter ( self , name = None , filter_func = None , ** flags ) :
 if six . PY2 and not isinstance ( path , six . text_type ) :
  return _dec
              raise ValidationError ( errors )
 if kwds :
 while i < len ( subject ) and subject [ i ] not in ( ' ' , '\t' ) :
  else :
  if exctype is not WindowsError or 'Access is denied' not in str ( value ) :
 if self . field . show_hidden_initial :
      widget = EmailInput
   if self . can_import_settings :
              return path , ''
           compressed = zlib . compress ( data )
          if not hasattr ( self , '_dimensions_cache' ) :
     def deactivate_all ( ) :
  models . signals . pre_migrate . send (  sender = app_config ,  app_config = app_config ,  verbosity = verbosity ,  interactive = interactive ,  using = db )
 boundary = self . _find_boundary ( chunk , len ( chunk ) < self . _rollback )
                  if dirname . startswith ( '.' ) or dirname == '__pycache__' :
              return self . DSTOFFSET
  else :
   def write ( self , outfile , encoding ) :
 pass
 args = args [ : - 1 ]
   root = config . get ( 'root' , None )
              continue
                if self . verbosity >= 1 :
   self . year_none_value = self . none_value
  elif options [ "socket" ] and not options [ "host" ] and not options [ "port" ] :
 if handlers :
              ext_list [ i ] = '.%s' % ext_list [ i ]
                          apps . setdefault ( pattern . app_name , [ ] ) . append ( pattern . namespace )
          super ( DecimalField , self ) . validate ( value )
 for key , value in six . iterlists ( self ) :
                  self . _setup ( )
  else :
      def __init__ ( self , * args , ** kwargs ) :
  new_name = col_name . lower ( )
      error_class = ValueError
  if isinstance ( value , datetime . date ) :
 return tempdir
 def __init__ ( self , file , field_name , name , content_type , size , charset , content_type_extra = None ) :
 obj . __class__ = cls
 SINGLE_BRACE_END = '}'
  return s
 if len ( args ) > 1 :
              from django . utils . translation import trans_real as trans
  if data_list [ 1 ] in self . empty_values :
  else :
 overlapped = OVERLAPPED ( )
   class Command ( CheckCommand ) :
  sql , references = connection . creation . sql_create_model ( model , no_style ( ) , seen_models )
                  raise ValidationError ( ungettext (  "Please submit %d or fewer forms." ,  "Please submit %d or fewer forms." , self . max_num ) % self . max_num ,  code = 'too_many_forms' ,  )
  problem_fields = [  field  for model in apps . get_models ( ** kwargs )  if app_configs is None or model . _meta . app_config in app_configs  for field in model . _meta . local_fields  if isinstance ( field , models . BooleanField ) and not field . has_default ( )  ]
 comment = [ ]
    def as_table ( self ) :
      self . _request_middleware = request_middleware
  if hasattr ( parent , 'render' ) :
 self . _charset = settings . DEFAULT_CHARSET
                  if ignore_failures :
 from django . utils import six
 def _cache ( self ) :
   class Page ( collections . Sequence ) :
   return new_value
 pickled = None
   def _parse_date_fmt ( ) :
 last [ NEXT ] = root [ PREV ] = cache [ key ] = link
              c = config . pop ( '()' )
 if PY3 :
    def handle_fk_field ( self , obj , field ) :
     class NullBooleanSelect ( Select ) :
  return left
              return self . stream . getvalue ( )
 parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS ,  help = 'Nominates a specific database to dump fixtures from. '  'Defaults to the "default" database.' )
 def floatformat ( text , arg = - 1 ) :
              if code in _supported and check_for_language ( code ) :
 locale = to_locale ( lang )
   def strptime ( self , value , format ) :
              return
  if error_messages and f . name in error_messages :
          if hasattr ( _urlconfs , "value" ) :
      DEFAULT_CHUNK_SIZE = 64 * 2 ** 10
          parser . add_argument ( 'args' , metavar = 'fixture' , nargs = '+' ,  help = 'Fixture labels.' )
              raise ContentNotRenderedError ( 'The response content must be '  'rendered before it can be iterated over.' )
   accept = request . META . get ( 'HTTP_ACCEPT_LANGUAGE' , '' )
  style = dummy ( )
          warnings . warn (  "FastCGI support has been deprecated and will be removed in Django 1.9." ,  RemovedInDjango19Warning )
 trail = punctuation + trail
 leave_locale_alone = True
 if self . data . hour > 11 :
  else :
              self . regex = re . compile ( self . regex , self . flags )
   def get_signed_cookie ( self , key , default = RAISE_ERROR , salt = '' , max_age = None ) :
      def filter ( self , record ) :
           if isinstance ( o , datetime . datetime ) :
  class SimpleCookie ( http_cookies . SimpleCookie ) :
 def _dec ( * args , ** kwargs ) :
  except InputStreamExhausted :
  except ValidationError as e :
  else :
 for db in connections . all ( ) :
      def __init__ ( self , tokens ) :
  class HTMLParser ( _html_parser . HTMLParser ) :
    def add_metaclass ( metaclass ) :
 BytesIO = io . BytesIO
   class Loader ( BaseLoader ) :
   if opts . fields == ALL_FIELDS :
   tags = options . get ( 'tags' , None )
   class BaseMemcachedCacheMethods ( RenameMethodsBase ) :
                      raise CommandError ( "Cannot find a migration matching '%s' from app '%s'." % (  migration_name , app_label ) )
              if isinstance ( other , Promise ) :
  return RegexURLResolver ( r'^/' , urlconf )
 integer_types = ( int , long )
          if self . _wrapped is empty :
 PATTERN = """     classdef< 'class' any+ ':'               suite< any*                      funcdef< 'def' unifunc='__unicode__'                               parameters< '(' NAME ')' > any+ >                      any* > >     """
          return self . paginator . validate_number ( self . number - 1 )
 if len ( value ) != 2 :
              return None
          self . nodelist_true , self . nodelist_false = nodelist_true , nodelist_false
    try :
                  default_list = [ ]
                              matches = False
 if arg is None :
 constant_string = constant_string . replace ( "\n" , "" )
 tempdir = tempfile . mkdtemp ( prefix = prefix , suffix = '_extract' )
 raise
      def get_unbound_function ( unbound ) :
  result = self . stream . read ( size )
                          out . write ( ' _(%s) ' % cmatch )
        @ register . filter ( is_safe = True )
   def get_queryset ( self ) :
              handler . addQuickElement ( "dc:creator" , item [ "author_name" ] , { "xmlns:dc" : "http://purl.org/dc/elements/1.1/" } )
  new_result = [ ]
 if location is None :
              field_type = 'TextField'
 return self . _html_output (  normal_row = '<tr%(html_class_attr)s><th>%(label)s</th><td>%(errors)s%(field)s%(help_text)s</td></tr>' ,  error_row = '<tr><td colspan="2">%s</td></tr>' ,  row_ender = '</td></tr>' ,  help_text_html = '<br /><span class="helptext">%s</span>' ,  errors_on_separate_row = False )
 self . _info = translation . _info . copy ( )
          sys . path . insert ( 0 , options . pythonpath )
  last = pos + 1
    def get_template_from_string ( source , origin = None , name = None ) :
     def compress_string ( s ) :
 obj_pk = getattr ( obj , field . rel . field_name )
    internal_use_only = False
 self . _response_middleware = [ ]
 @ stringfilter
  if line :
                  limit_choices_to = formfield . limit_choices_to
 if keys :
   def value ( self ) :
   def O ( self ) :
              self . label = pretty_name ( name )
 from optparse import OptionParser
 return self . _callback
    @ register . tag
 self . body = body
                              raise AttributeError
  strip_tags = allow_lazy ( strip_tags )
  else :
   def tag ( self , name = None , compile_function = None ) :
                      sub_match = pattern . resolve ( new_path )
     header_end = chunk . find ( b'\r\n\r\n' )
  except StandardError as e :
            media = sorted ( self . _css . keys ( ) )
      if defaults is not None :
          return get_supported_language_variant ( lang_code , strict = strict )
                  self . handle_starttag ( tag , attrs )
          main_value_pair , params = parse_header ( line )
  dow = days [ date . weekday ( ) ]
 from gzip import GzipFile
  slugify = allow_lazy ( slugify , six . text_type )
          super ( Command , self ) . add_arguments ( parser )
    class ManagementUtility ( object ) :
   def setlist ( self , key , list_ ) :
  models . signals . post_syncdb . send (  sender = app_config . models_module ,  app = app_config . models_module ,  created_models = created_models ,  verbosity = verbosity ,  interactive = interactive ,  db = db )
 from django . utils import six
  return ( resource , 'egg:%s:%s' % ( app_config . name , pkg_name ) )
 if resource_string is not None :
              return func
               attachment = MIMEBase ( basetype , subtype )
                              if self . verbosity >= 2 :
                      match = None
              pending_references . setdefault ( refto , [ ] ) . extend ( refs )
 fp = six . StringIO ( )
    if six . PY3 :
    def __copy__ ( self ) :
 value = localize ( value , use_l10n = context . use_l10n )
                       if self . _request_middleware is None :
          length = int ( arg )
   return nodes
  import StringIO
                  field_value = smart_text ( field_value , options . get ( "encoding" , settings . DEFAULT_CHARSET ) , strings_only = True )
          if name is None :
  from django . conf import settings
 break
   return result
 if options . settings :
    if self . settings_exception is not None :
  return result
   def nud ( self , parser ) :
 sys . exit ( 1 )
 if dirname and not os . path . exists ( dirname ) :
  termios . tcsetattr ( fd , termios . TCSANOW , attr_list )
  if data :
 with self . _lock . writer ( ) :
              return _cached_filenames
 handler . addQuickElement ( "description" , self . feed [ 'description' ] )
   def get_language_info ( lang_code ) :
              handler . addQuickElement ( "pubDate" , rfc2822_date ( item [ 'pubdate' ] ) )
     return errors
          super ( PasswordInput , self ) . __init__ ( attrs )
 trail = closing + trail
    @ register . filter ( is_safe = False )
          parser . add_argument ( 'args' , metavar = 'test_label' , nargs = '*' ,  help = 'Module paths to test; can be modulename, modulename.TestCase or modulename.TestCase.test_method' )
 msg_count = 0
  except ( LookupError , ImportError ) as e :
  pos = m . end ( 0 )
              self . choices = [ ]
          return ''
   def ngettext ( singular , plural , number ) :
 self . can_read . release ( )
 pass
 self . name = name
 MONTHS_3 = {  1 : _ ( 'jan' ) , 2 : _ ( 'feb' ) , 3 : _ ( 'mar' ) , 4 : _ ( 'apr' ) , 5 : _ ( 'may' ) , 6 : _ ( 'jun' ) ,  7 : _ ( 'jul' ) , 8 : _ ( 'aug' ) , 9 : _ ( 'sep' ) , 10 : _ ( 'oct' ) , 11 : _ ( 'nov' ) , 12 : _ ( 'dec' )  }
  threading = options . get ( 'use_threading' )
  try :
  if delta < 0 :
   self . can_write . acquire ( )
     @ register . tag ( 'if' )
    def __setitem__ ( self , key , value ) :
              raise AttributeError ( attr )
  new_class = ( super ( DeclarativeFieldsMetaclass , mcs )  . __new__ ( mcs , name , bases , attrs ) )
      else :
                      return True
              parentloop = { }
  all_files . append ( TranslatableFile ( dirpath , filename , locale_dir ) )
 _func_globals = "__globals__"
  else :
  def load_template_source ( self , template_name , template_dirs = None ) :
  else :
 def add ( value , arg ) :
              os . environ [ 'DJANGO_LIVE_TEST_SERVER_ADDRESS' ] = options [ 'liveserver' ]
                  if attr in flags :
from django . core . files . base import File
 open_tags = [ ]
                          temp_lib . filters [ name ] = lib . filters [ name ]
 raise NotImplementedError ( 'subclasses of BaseCommand must provide a handle() method' )
   if TYPE == RAW :
                         ns = app_list [ 0 ]
  def to_python ( self , value ) :
 for message in message :
                  import_module ( '.management' , app_config . name )
 field_value = self . cleaned_data . get ( field , None )
 if self . instance . pk is None :
          j = 36 ** factor
    else :
   def construct_instance ( form , instance , fields = None , exclude = None ) :
              return default
 prefix = 'django_%s_template_' % self . app_or_project
              fd , name = tempfile . mkstemp ( suffix = suffix , prefix = prefix , dir = dir )
                          loaded_objects_in_fixture += 1
  return result
      def load_handler ( path , * args , ** kwargs ) :
     class override ( object ) :
   return self . check ( app_configs = app_configs , display_num_errors = display_num_errors )
      ugettext = gettext
              second_item = new_second_item
 if six . PY3 :
  j = match . end ( )
          offset = date . tzinfo . utcoffset ( date )
                    self . children . append ( data )
 r = dklen - ( l - 1 ) * hlen
  else :
              reset_translations ( )
 import sys
 warnings . warn ( "resolve_variable() is deprecated. Use django.template."  "Variable(path).resolve(context) instead" ,  RemovedInDjango20Warning , stacklevel = 2 )
 while escaped or ch != ']' :
 from django . utils . six . moves . urllib . parse import urlsplit , urlunsplit
                  week_number = 1
  else :
   def render ( self , name , value , attrs = None ) :
  int_part = int_part_gd [ : : - 1 ]
      widget = CheckboxInput
                  replaces . append ( ( migration . app_label , migration . name ) )
    @ property
  finally :
              return fastcgi_help ( "ERROR: Invalid option for daemonize "  "parameter." )
                  pass
 if self . fk . rel . field_name != self . fk . rel . to . _meta . pk . name :
          return [  Warning (  "MIDDLEWARE_CLASSES is not set." ,  hint = ( "Django 1.7 changed the global defaults for the MIDDLEWARE_CLASSES. "  "django.contrib.sessions.middleware.SessionMiddleware, "  "django.contrib.auth.middleware.AuthenticationMiddleware, and "  "django.contrib.messages.middleware.MessageMiddleware were removed from the defaults. "  "If your project needs these middleware then you should configure this setting." ) ,  obj = None ,  id = '1_7.W001' ,  )  ]
              raise CommandError ( "App '%s' does not have migrations (so squashmigrations on it makes no sense)" % app_label )
  except MultiPartParserError :
              continue
 lbp = 0
    cls . _delegate_bytes = bytes in resultclasses
    def _unpack_ipv4 ( ip_str ) :
     def method_decorator ( decorator ) :
  last = max ( 0 , end - 1 )
                           if self . verbosity >= 3 :
                          index_sql = connection . creation . sql_indexes_for_model ( model , no_style ( ) )
   def handle_uncaught_exception ( self , request , resolver , exc_info ) :
 existing_headers = set ( header . lower ( ) for header in vary_headers )
 return self . _urlconf_module
          return self . _choices
     class DateTimeBaseInput ( TextInput ) :
 from django . utils . functional import allow_lazy
              return ( t [ 0 ] . lower ( ) , True )
 plural = [ ]
 ext = ext [ : 255 ]
 match = datetime_re . match ( value )
 try :
   def render ( self , name , value , attrs = None ) :
   if i == 0 and not is_writable ( npath ( base_path + '.mo' ) ) :
          f . save_form_data ( instance , cleaned_data [ f . name ] )
       def __init__ ( self , name ) :
   except UnicodeError :
              return 1 , ch2
 return tpl . format ( self . sysid , self . pubid )
   def validate ( self , value ) :
 if errors :
              id_ += '_0'
  msgs = msgs . replace ( old , new )
  return new_class
 if hasattr ( timezone , 'normalize' ) :
          best_doublecolon_end = ( best_doublecolon_start +  best_doublecolon_len )
          for k , v in self . _iteritems ( ) :
 while s [ : 1 ] == b';' :
              if e . errno != errno . ENOENT :
  from django . utils import six
   def keys ( self ) :
 data_set = set ( force_text ( value ) for value in data )
  def __init__ ( self , parser , * args , ** kwargs ) :
     from django . utils import translation
              try :
   concrete_model = obj . _meta . concrete_model
 stamp = time . mktime ( tt )
 if not os . path . isfile ( pythonrc ) :
     class FloatField ( IntegerField ) :
 if command . use_argparse :
 def default ( value , arg ) :
 raise ImproperlyConfigured ( msg . format ( name = self . urlconf_name ) )
    return output
    finally :
   def __str__ ( self ) :
  return Truncator ( value ) . chars ( length )
  if self . feed [ 'author_link' ] is not None :
      def localtime ( value , timezone = None ) :
   def decompress ( self , value ) :
  except NameError :
 from django . utils import six
  updates = dict ( )
  if '.' in hextets [ - 1 ] :
 import random as random_module
              raise CommandError ( "Can't resolve dependencies for %s in serialized app list." %  ', ' . join ( '%s.%s' % ( model . _meta . app_label , model . _meta . object_name )  for model , deps in sorted ( skipped , key = lambda obj : obj [ 0 ] . __name__ ) )  )
          if hasattr ( self , 'error_dict' ) :
              self . stdout . write ( "No conflicts detected to merge." )
  super ( Command , self ) . execute ( * args , ** options )
 add_to_builtins ( 'django.template.loader_tags' )
  return value
  from django . http import QueryDict
             if iri is None :
          language_code = get_language ( )
 from django . utils . encoding import force_str , force_text
    _urllib_error_moved_attributes = [  MovedAttribute ( "URLError" , "urllib2" , "urllib.error" ) ,  MovedAttribute ( "HTTPError" , "urllib2" , "urllib.error" ) ,  MovedAttribute ( "ContentTooShortError" , "urllib" , "urllib.error" ) ,  ]
                   raise TemplateSyntaxError (  "'%s' received multiple values for keyword argument '%s'" %  ( name , param ) )
   def close ( self ) :
  else :
          self . _assert_mutable ( )
  for fname in self . _list_cache_files ( ) :
                  return
              code_list . append ( foreground [ v ] )
              return timedelta ( seconds = - time . altzone ) - timedelta ( seconds = - time . timezone )
 from django . core . management . base import BaseCommand
  try :
  for line in chunk_buffer :
   def lazy_number ( func , resultclass , number = None , ** kwargs ) :
     def partition ( predicate , values ) :
              self . inverse_match = inverse_match
 return date_value . strftime ( input_format )
 response . add_post_render_callback ( callback )
 if hasattr ( self , '_coerce' ) :
   pos = 0
 from django . core . exceptions import ImproperlyConfigured
  except Resolver404 :
          ch = None
 return resolved_args , resolved_kwargs
 total_forms = max ( initial_forms , self . min_num ) + self . extra
              pass
          return bytes ( s )
                   return getattr ( settings , format_type )
  __version__ = "0.1"
 if tag in self . CDATA_CONTENT_ELEMENTS :
 six . reraise ( ValidationError , ValidationError (  message ,  code = 'ambiguous_timezone' ,  params = params ,  ) , sys . exc_info ( ) [ 2 ] )
 prefixed = name + "."
          del _prefixes . value
          if app_config . models_module is None :
  import copy
              self . instance = self . fk . rel . to ( )
     return URLNode ( viewname , args , kwargs , asvar )
 return '\n' . join ( statements )
  if r . endswith ( '+00:00' ) :
 from django . core . mail . backends . base import BaseEmailBackend
 self . _set_regex ( regex )
            context [ self . var_name ] = obj
 for pattern in reversed ( self . url_patterns ) :
              potfile = os . path . join ( path , '%s.pot' % str ( self . domain ) )
  return id_
 filelist = self . _list_cache_files ( )
      input_type = 'email'
  if settings . USE_X_FORWARDED_HOST and (  'HTTP_X_FORWARDED_HOST' in self . META ) :
              func = TemplateLoader ( * args )
     def render_value_in_context ( value , context ) :
                  obj = template_localtime ( obj , context . use_tz )
          archive . extract ( to_path )
                           non_capturing_groups . append ( len ( result ) )
    def cache_info ( ) :
          timestamp = datetime . datetime . utcfromtimestamp ( int ( timestamp ) )
              fail_message = 'created'
    def multiple_chunks ( self , chunk_size = None ) :
          raise TemplateSyntaxError ( "'%s' cannot appear more than once in the same template" % bits [ 0 ] )
 if self . body :
          return "<IfNode>"
 self . content_type = content_type
  cookiedict = { }
    def prefix ( bp , func ) :
 setattr ( obj , self . fk . get_attname ( ) , getattr ( pk_value , 'pk' , pk_value ) )
   raise KeyError ( key )
 for error in self . as_data ( ) :
 from django . utils . six . moves import input
 from django . utils import translation
    return retval
          for taglib in bits [ 1 : ] :
              try :
          try :
  except ( ValueError , TypeError ) :
   if len ( parts ) > 1 :
   def send_messages ( self , email_messages ) :
              docs_version = '%d.%d' % django . VERSION [ : 2 ]
  else :
  if pk_is_not_editable ( pk ) or pk . name not in form . fields :
 return { '2' : True ,  True : True ,  'True' : True ,  '3' : False ,  'False' : False ,  False : False } . get ( value , None )
 g = generator . Generator ( fp , mangle_from_ = False )
 self . setup_environ ( )
     def modelformset_factory ( model , form = ModelForm , formfield_callback = None ,  formset = BaseModelFormSet , extra = 1 , can_delete = False ,  can_order = False , max_num = None , fields = None , exclude = None ,  widgets = None , validate_max = False , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ,  min_num = None , validate_min = False ) :
 klass = import_string ( backend or settings . EMAIL_BACKEND )
 from django . conf import settings
    def new_file ( self , * args , ** kwargs ) :
                  result . parent = self
 from django . utils import autoreload
  _iterkeys = "iterkeys"
  from django . core . exceptions import ValidationError , NON_FIELD_ERRORS
   return avoid_wrapping ( value )
 if os . path . isdir ( template_dir ) :
  except OSError as e :
  try :
   def migration_progress_callback ( self , action , migration , fake = False ) :
  else :
          wsgi_opts [ 'bindAddress' ] = options [ "socket" ]
                  local , domain = middle . rsplit ( '@' , 1 )
              return context
  except ValueError :
                location = '//%s' % self . get_full_path ( )
            stream . unget ( chunk )
 return dot_re . sub ( char , src )
                  if value is None and attr in declared_fields :
   if ( domain_part not in self . domain_whitelist and  not self . validate_domain_part ( domain_part ) ) :
 if isinstance ( obj , models . signals . ModelSignal ) :
 six . reraise ( ImportError , ImportError ( msg ) , sys . exc_info ( ) [ 2 ] )
 close = True
  return '%s%s' % ( ( '\x1b[%sm' % ';' . join ( code_list ) ) , text or '' )
  elif issubclass ( klass , logging . handlers . SysLogHandler ) and 'address' in config :
                      continue
           kwarg = token_kwargs ( [ bit ] , parser )
  return wrapper
    class DisallowedRedirect ( SuspiciousOperation ) :
              os . unlink ( work_file )
  return cookiedict
     class MemoryFileUploadHandler ( FileUploadHandler ) :
          self . s = s
  except IndexError :
    return iri_to_uri ( resolver . _reverse_with_prefix ( view , prefix , * args , ** kwargs ) )
          return "<TranslatableFile: %s>" % os . sep . join ( [ self . dirpath , self . file ] )
      default_error_messages = {  'invalid' : _ ( 'Enter a number.' ) ,  'max_digits' : ungettext_lazy (  'Ensure that there are no more than %(max)s digit in total.' ,  'Ensure that there are no more than %(max)s digits in total.' ,  'max' ) ,  'max_decimal_places' : ungettext_lazy (  'Ensure that there are no more than %(max)s decimal place.' ,  'Ensure that there are no more than %(max)s decimal places.' ,  'max' ) ,  'max_whole_digits' : ungettext_lazy (  'Ensure that there are no more than %(max)s digit before the decimal point.' ,  'Ensure that there are no more than %(max)s digits before the decimal point.' ,  'max' ) ,  }
  return val
  return ' ' . join ( words )
  except TemplateDoesNotExist :
 self . limit_choices_to = limit_choices_to
 MIMEText . __setitem__ ( self , name , val )
    class Command ( BaseCommand ) :
              return f
 inner_args . extend ( args )
 from django . utils . timezone import is_aware
 changed = False
 pattern_iter = next_char ( iter ( pattern ) )
              if getattr ( e , 'winerror' , 0 ) != 32 and getattr ( e , 'errno' , 0 ) != 13 :
 def slugify ( value ) :
              context . render_context [ BLOCK_CONTEXT_KEY ] = BlockContext ( )
 super ( TypedChoiceField , self ) . __init__ ( * args , ** kwargs )
 _cached_modules = set ( )
  for i in range ( 0 , len ( pieces ) - 1 , 3 ) :
                      raise CommandError (  "errors happened while running msgmerge\n%s" % errors )
 non_capturing_groups = [ ]
                  parts = t . contents . split ( '|' )
                              t = get_template ( file_name )
  if size == 0 :
  if not value or '@' not in value :
              fn ( * args , ** kwargs )
  errors . extend ( e . error_list )
   wrapped_main_func = check_errors ( main_func )
    return False
              confirm = input ( """You have requested a flush of the database. This will IRREVERSIBLY DESTROY all data currently in the %r database, and return each table to an empty state. Are you sure you want to do this?     Type 'yes' to continue, or 'no' to cancel: """ % connection . settings_dict [ 'NAME' ] )
          self . filters = { }
               self . __dict__ [ "_wrapped" ] = value
 if constant :
      has_bz2 = False
    for f in fields :
 if not file_name :
     def sql_create ( app_config , style , connection ) :
   if column_name in indexes :
  return value . replace ( tzinfo = None )
 return InMemoryUploadedFile (  file = self . file ,  field_name = self . field_name ,  name = self . file_name ,  content_type = self . content_type ,  size = file_size ,  charset = self . charset ,  content_type_extra = self . content_type_extra  )
   else :
   if not isinstance ( self . file_path , six . string_types ) :
 seconds = abs ( seconds )
  except ImportError as exc :
  if not use_workaround :
   if self . empty :
  def __setattr__ ( self , name , value ) :
    new_modules = module_values - _cached_modules
              self . compression_formats [ 'bz2' ] = ( bz2 . BZ2File , 'r' )
 import errno
 plural = [ ]
   def __call__ ( self , * args , ** kwargs ) :
  self . attr = old_attr
              self . namespaces = [ ]
                          initial_value = initial_value ( )
 upto = start
 parser . add_argument ( 'args' , nargs = '*' )
     class BaseTemporalField ( Field ) :
   def reload ( self ) :
     def validate_ipv46_address ( value ) :
      get_callable . cache_clear ( )
 def firstof ( parser , token ) :
   @ property
  else :
 self . _num_pages = int ( ceil ( hits / float ( self . per_page ) ) )
 try :
              self . _done = True
from django . utils . six . moves import html_parser as _html_parser
                   field_notes . append ( "Field renamed because it contained more than one '_' in a row." )
  as_form = True
 return '' . join ( rendered_widgets )
     def set_urlconf ( urlconf_name ) :
                              if isinstance ( val , tuple ) :
  else :
 logger = logging . getLogger ( name )
          raise TemplateSyntaxError ( "%r tag takes at least one argument: the name of the template to be included." % bits [ 0 ] )
              chunk_buffer = BytesIO ( chunk )
  def module_has_submodule ( package , module_name ) :
   def __getitem__ ( self , name ) :
 @ stringfilter
 content = force_bytes ( content )
 if 100 <= response . status_code < 200 or response . status_code in ( 204 , 304 ) :
   if tried :
 @ stringfilter
              if isinstance ( field , InlineForeignKeyField ) :
 self . extend_nodelist ( nodelist , var_node , token )
  option_list = ( )
   def _get_count ( self ) :
              return True
 parts . reverse ( )
 if auto_id and 'id' not in attrs and 'id' not in widget . attrs :
  self . setlist ( key , default_list )
 lookups . appendlist ( pattern . callback , ( bits , p_pattern , pattern . default_args ) )
  from . html_parser import HTMLParser , HTMLParseError
   generic_lang_code = lang_code . split ( '-' ) [ 0 ]
  else :
              handler . addQuickElement ( "description" , item [ 'description' ] )
 all_locales . extend ( map ( os . path . basename , locale_dirs ) )
          super ( Command , self ) . add_arguments ( parser )
   def __len__ ( self ) :
          return self . render ( )
            basedirs = [ os . path . join ( os . path . dirname ( os . path . dirname ( __file__ ) ) ,  'conf' , 'locale' ) ,  'locale' ]
              self . blocks [ name ] . insert ( 0 , block )
                  write ( sep )
  else :
   while True :
          return True
  for statement in sql :
 try :
 return super ( QueryDict , self ) . pop ( key , * args )
                      break
  elif item [ "author_name" ] :
 from django . utils . html import escape
                     raise
          def _wrapper ( self , * args , ** kwargs ) :
  if priority :
  return get_resolver ( urlconf ) . resolve ( path )
 from django . utils . six . moves import input
  if self . required :
 if options [ 'verbosity' ] > 0 :
 from django . utils . encoding import force_text
          TemplateLoader = import_string ( loader )
 return files . get ( name , None )
   def P ( self ) :
     class SimpleUploadedFile ( InMemoryUploadedFile ) :
          assert name , "The name argument is not allowed to be empty."
          kw = match . groupdict ( )
    else :
 for localedir in reversed ( settings . LOCALE_PATHS ) :
  return self . _wrapped . __dict__
 timestamp = baseconv . base62 . decode ( timestamp )
 requires_system_checks = False
              content_length = 0
      locale_dirs = filter ( os . path . isdir , glob . glob ( '%s/*' % self . default_locale_path ) )
 from functools import partial
 def striptags ( value ) :
 if not self . is_required :
     def parse_datetime ( value ) :
  elif args [ 1 ] [ 0 ] == '3' :
              app_output = self . handle_app_config ( app_config , ** options )
                  self . check ( )
 from django . conf import settings
 if not widget :
    def memoize ( func , cache , num_args ) :
   except StandardError as e :
 if obj_list is None :
    @ register . filter ( "linebreaks" , is_safe = True , needs_autoescape = True )
              self . connection . sendmail ( from_email , recipients , message . as_bytes ( ) )
     if self . loaded_object_count > 0 :
   def eval ( self , context ) :
  return '&' . join ( output )
                  serializers . serialize ( format , get_objects ( ) , indent = indent ,  use_natural_foreign_keys = use_natural_foreign_keys ,  use_natural_primary_keys = use_natural_primary_keys ,  stream = stream or self . stdout )
              url_fields = split_url ( value )
  _CacheInfo = namedtuple ( "CacheInfo" , [ "hits" , "misses" , "maxsize" , "currsize" ] )
                      lookups . appendlist ( pattern . name , ( bits , p_pattern , pattern . default_args ) )
              yield 'day'
          return self . attrs . get ( 'id' , '' )
              try :
          __bytes__ = serialize_headers
 if isinstance ( s , Promise ) :
  if invalid_var_format_string :
   return command . execute ( * args , ** defaults )
 s = s . replace ( '</' , '<\\/' )
 try :
      input_type = 'hidden'
 new_ip = hextet [ 0 ] . split ( ':' )
          if self . _isdst ( dt ) :
                  if extend is True :
 return MONTHS_AP [ self . data . month ]
  cc = ', ' . join ( dictvalue ( el ) for el in cc . items ( ) )
          self . class_name = class_name
    WSGIServer ( get_internal_wsgi_application ( ) , ** wsgi_opts ) . run ( )
          return self . _headers [ header . lower ( ) ] [ 1 ]
   class Command ( BaseCommand ) :
      tagfind = re . compile ( '([a-zA-Z][-.a-zA-Z0-9:_]*)(?:\s|/(?!>))*' )
 self . write ( s , encoding )
                  self . stdout . write ( "  Optimized from %s operations to %s operations." % ( len ( operations ) , len ( new_operations ) ) )
  else :
  elif message_context [ 0 ] == "'" :
 chunks . append ( bytes )
     class ModelFormMetaclass ( DeclarativeFieldsMetaclass ) :
 from django . utils . text import normalize_newlines , slugify as _slugify
   def _setup ( self ) :
  else :
          return False
              raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : value } ,  )
          first , lang , priority = pieces [ i : i + 3 ]
  filename = ( 'utf-8' , '' , filename )
  yield buf
  if format not in _serializers :
 for punctuation in TRAILING_PUNCTUATION :
 return other in self . children
 if value in self . empty_values :
      help = ( 'Removes ALL DATA from the database, including data added during '  'migrations. Unmigrated apps will also have their initial_data '  'fixture reloaded. Does not achieve a "fresh install" state.' )
 self . validate ( value )
  return message
  full_statement . append ( ');' )
                   content = content . message ( )
    class Signer ( object ) :
 version = get_complete_version ( version )
     def _render ( self , context ) :
   def get_connection ( backend = None , fail_silently = False , ** kwds ) :
   def run_from_argv ( self , argv ) :
 def write ( self , s ) :
              return
 app_models = router . get_migratable_models ( app_config , connection . alias , include_auto_created = True )
    executor = MigrationExecutor ( connection , self . migration_progress_callback )
 if id_for_label :
    if questioner . ask_merge ( app_label ) :
    class FieldError ( Exception ) :
                            errors . append ( self . get_date_error_message ( date_check ) )
 for ldir in dirs :
          self . subject = subject
     class DateInput ( DateTimeBaseInput ) :
          return None
          d = ',%s' % datetime_safe . new_datetime ( date ) . strftime ( '%Y-%m-%d' )
              self . file . write ( raw_data )
class FileProxyMixin ( object ) :
              if self . field . choice_cache is None :
      _version = "0.91"
 if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) :
   if self . field . localize :
              value = tuple ( value )
                  _error_files . append ( filename )
  def _get_page_range ( self ) :
                  if not self . can_import_settings :
              handler . addQuickElement ( "copyright" , self . feed [ 'feed_copyright' ] )
                                  current = settings . TEMPLATE_STRING_IF_INVALID
  fd = os . open ( full_path , flags , 0o666 )
   else :
 self . month_none_value = ( 0 , empty_label [ 1 ] )
          scheme , netloc , path , query , fragment = urlsplit ( url )
              if force_text ( val ) not in pks :
  filter_func = parser . find_filter ( filter_name )
     def walk_to_end ( ch , input_iter ) :
              raise TemplateSyntaxError ( "Invalid syntax in widthratio tag. Expecting 'as' keyword" )
  from django . utils import six
 break
 if neg :
 space = unicode ( " " )
              return False
 text_value = force_text ( value )
      return compiled_parent . _render ( context )
   def render ( self , name , value , attrs = None , choices = ( ) ) :
 def is_hidden ( self ) :
  try :
  except IndexError :
    unused_char = self . _stream . read ( 1 )
              raise ImproperlyConfigured ( 'Could not write to directory: %s' % self . file_path )
          self . name = name
   def error ( self , message ) :
  else :
  TestRunner = get_runner ( settings , options . get ( 'testrunner' ) )
   def eval ( self , context ) :
              if six . PY2 :
              warnings . warn (  '"requires_model_validation" is deprecated '  'in favor of "requires_system_checks".' ,  RemovedInDjango19Warning )
              state_frame [ self ] = None
 major = '.' . join ( str ( x ) for x in version [ : parts ] )
import inspect
 if _localtime is None :
                  msg = "System check identified some issues:\n%s" % msg
                              data = raw_data
 from django . template . base import TemplateDoesNotExist
                  register_to . _registry = before_import_registry
              return '%s_month' % id_
          def __getattr__ ( self , attr ) :
          self . base_fields [ TOTAL_FORM_COUNT ] = IntegerField ( widget = HiddenInput )
          super ( ContextDict , self ) . __init__ ( * args , ** kwargs )
 c = [ ]
  tagname = tagname . lower ( )
                  self . stdout . write ( " (no migrations)" , self . style . MIGRATE_FAILURE )
              if event . path . endswith ( '.mo' ) :
              context [ self . variable_name ] = value
    def decorator_from_middleware ( middleware_class ) :
              if connection . introspection . table_name_converter ( model . _meta . db_table ) in table_names :
      if 'max-age' in cc and 'max_age' in kwargs :
  else :
 super ( CharField , self ) . __init__ ( * args , ** kwargs )
 valid = True
          httpd_cls = type ( str ( 'WSGIServer' ) , ( socketserver . ThreadingMixIn , WSGIServer ) , { } )
 from django . utils . deprecation import RemovedInDjango19Warning
 def _archive_cls ( file ) :
 all_files = [ ]
    if isinstance ( self . regex , six . string_types ) :
   def date ( self ) :
   def handle_field ( self , obj , field ) :
   def __enter__ ( self ) :
 prefix = d [ 'prefix' ]
 if self . options . get ( 'indent' ) :
  app_list [ app_config ] = None
  for app_name , model_list in manifest . items ( ) :
                       key = make_key ( args , kwds , typed )
                              value = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
     def formset_factory ( form , formset = BaseFormSet , extra = 1 , can_order = False ,  can_delete = False , max_num = None , validate_max = False ,  min_num = None , validate_min = False ) :
          t = select_template ( template_name , dirs )
              raise CommandError ( 'Your Python does not support IPv6.' )
 from django . db . migrations . executor import MigrationExecutor
              try :
              with io . open ( fd , 'wb' ) as f :
      def __init__ ( self , * args , ** kwargs ) :
              yield node
              for reference , receivers in obj . unresolved_references . items ( ) :
   output = [ ]
 import zipfile
  def __init__ ( self , redirect_to , * args , ** kwargs ) :
  def __init__ ( self , * args , ** kwargs ) :
    class DeclarativeFieldsMetaclass ( MediaDefiningClass ) :
  _iterkeys = "keys"
                      m = self . INDEX_PATTERN . match ( rest )
 def deleted_forms ( self ) :
 interactive = options . get ( 'interactive' )
                      locale_dir = None
   if os . path . isabs ( fixture_name ) :
                  os . remove ( name )
   return self . _num_pages
 i = j + 1
  def items ( self ) :
 self . buffer = self . buffer [ size : ]
    def __eq__ ( self , other ) :
 if next_item and isinstance ( next_item , ( list , tuple ) ) :
   elif t . token_type == TOKEN_VAR :
              output . append ( options )
 input_formats = formats . get_format_lazy ( 'DATE_INPUT_FORMATS' )
 from django . utils import six
 if not regex_match :
          self . limit_value = limit_value
              handler . addQuickElement ( 'published' , rfc3339_date ( item [ 'pubdate' ] ) )
  except AttributeError :
 self . indent ( 2 )
 num = 0
     if errors :
          _load_serializers ( )
              request = self . request_class ( environ )
 if sign :
  def to_python ( self , value ) :
              try :
    _cookie_encodes_correctly = http_cookies . SimpleCookie ( ) . value_encode ( ';' ) == ( ';' , '"\\073"' )
          language_code = get_language ( )
   ustring_re = re . compile ( "([\u0080-\uffff])" )
  except IOError as e :
 for app in sorted ( commands_dict . keys ( ) ) :
                          self . configure_logger ( name , loggers [ name ] , True )
   def clean_ipv6_address ( ip_str , unpack_ipv4 = False ,  error_message = _ ( "This is not a valid IPv6 address." ) ) :
      pass
          self . value = value
 klass . deconstruct = deconstruct
     if not options [ 'no_startup' ] :
 def __init__ ( self , language ) :
    class CheckRegistry ( object ) :
 self . _post_clean ( )
                  groupid = "t%d" % tok . id
 from django . core . files . uploadedfile import TemporaryUploadedFile , InMemoryUploadedFile
 self . lookups = None
 if submod and not module_has_submodule ( import_module ( parentmod ) , submod ) :
                      words [ i ] = mark_safe ( word )
              return force_text ( value )
  urlunquote = allow_lazy ( urlunquote , six . text_type )
 return True
  except pickle . PickleError :
           return self . client_address [ 0 ]
 def __prepare_class__ ( cls ) :
           LOCK_EX = LOCK_SH = LOCK_NB = 0
  except KeyError :
  if hasattr ( self . file , 'name' ) :
   def get_meta ( self , table_name ) :
                      return
 output = localize ( output , use_l10n = context . use_l10n )
          if args :
 self . args_check ( filter_name , filter_func , args )
 self . pointer = i
                      os . makedirs ( directory )
  inner_result , inner_args = [ ] , [ ]
   self . widget = widget
 if first :
     @ classmethod
    ext = self . splitext ( guessed_filename ) [ 1 ]
    class ModelFormOptions ( object ) :
 for header in headerlist :
  except AttributeError :
 parser . add_argument ( '--ignore' , '-i' , action = 'append' , dest = 'ignore_patterns' ,  default = [ ] , metavar = 'PATTERN' ,  help = 'Ignore files or directories matching this glob-style pattern. '  'Use multiple times to ignore more.' )
  parser . _namedCycleNodes [ name ] = node
   errors = [ ]
    def deactivate ( ) :
  def to_python ( self , value ) :
     def compile_messages ( self , locations ) :
   try :
              def load ( self , rawdata ) :
 _active = local ( )
              value = token_kwargs ( remaining_bits , parser , support_legacy = False )
     if isinstance ( value , six . string_types ) and value . lower ( ) in ( 'false' , '0' ) :
 boolean_attrs = [ ]
  except Exception :
  self . error ( "bad end tag: %r" % ( rawdata [ i : j ] , ) )
              args . append ( self . choices )
          return type ( self ) . __bool__ ( self )
 CRITICAL = 50
 import sys
  self . stream = options . pop ( "stream" , six . StringIO ( ) )
              chunk_size = self . DEFAULT_CHUNK_SIZE
   def S ( self ) :
              logger . setLevel ( _checkLevel ( level ) )
   else :
 def errors ( self ) :
 return val
              parentmod , submod = get_mod_func ( mod_name )
  response [ 'Content-Length' ] = '0'
     if value != value or value == Decimal ( "Inf" ) or value == Decimal ( "-Inf" ) :
                      result = middleware . process_request ( request )
  _add_doc ( get_unbound_function ,  """Get the function out of a possibly unbound function""" )
     if line [ - 1 : ] in ( b'\n' , b'\r' ) :
  import copy
    def remove_move ( name ) :
       def bytes_to_text ( s , encoding ) :
    sequence = parser . compile_filter ( bits [ in_index + 1 ] )
 if sys . version_info [ 1 ] <= 1 :
 parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a database to synchronize. '  'Defaults to the "default" database.' )
    class SuspiciousOperation ( Exception ) :
  else :
   def __len__ ( self ) :
          key_prefix = settings . CACHE_MIDDLEWARE_KEY_PREFIX
                  self . _body = self . read ( )
  Module_six_moves_urllib_robotparser . _moved_attributes = _urllib_robotparser_moved_attributes
              ret = fcntl . flock ( _fd ( f ) , flags )
 return chain ( * [  [ format_html ( '<link href="{0}" type="text/css" media="{1}" rel="stylesheet" />' , self . absolute_path ( path ) , medium )  for path in self . _css [ medium ] ]  for medium in media ] )
 parser . add_argument ( '--noreload' , action = 'store_false' , dest = 'use_reloader' , default = True ,  help = 'Tells Django to NOT use the auto-reloader.' )
  import decimal
  self . run ( ** options )
  return mark_safe ( '\n' . join ( output ) )
  key = ':' . join ( urlquote ( var ) for var in vary_on )
 stats [ : ] = [ 0 , 0 ]
                  output . append ( app_output )
              return self . func ( value )
  if tok . next :
   warnings . warn ( "django.utils.importlib will be removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2 )
              return self . g ( )
  return I18N_MODIFIED if filename . endswith ( '.mo' ) else FILE_MODIFIED
                                      handler . setLevel ( _checkLevel ( level ) )
 salt = force_bytes ( salt )
 from django . dispatch import receiver
              return func ( * self . __args , ** self . __kw )
              raise ImproperlyConfigured (  'Command %s defines both "requires_model_validation" '  'and "requires_system_checks", which is illegal. Use only '  '"requires_system_checks".' % self . __class__ . __name__ )
 from django . core . handlers . wsgi import WSGIHandler
 if self . forms :
    @ register . filter ( is_safe = True )
         for name , field in self . fields . items ( ) :
   def get_current_timezone ( ) :
    PY2 = sys . version_info [ 0 ] == 2
  try :
 name = s . split ( '.' )
 self . msguniq_options = self . msguniq_options [ : ] + [ '--no-wrap' ]
 if git_changeset :
   fields = fields_for_model ( opts . model , opts . fields , opts . exclude ,  opts . widgets , formfield_callback ,  opts . localized_fields , opts . labels ,  opts . help_texts , opts . error_messages )
              form . fields [ DELETION_FIELD_NAME ] = BooleanField ( label = _ ( 'Delete' ) , required = False )
 while model_dependencies :
                  raise ValueError ( "JSON can't represent timezone-aware times." )
 from django . template . base import TemplateDoesNotExist
  if self . silent :
  elif domain == 'django' and ( file_ext == '.py' or file_ext in command . extensions ) :
  from django . core . management . base import AppCommand
          handler = SimplerXMLGenerator ( outfile , encoding )
          query = query . items ( )
   def __setitem__ ( self , key , value ) :
  from django . apps import apps
                  setattr ( result , name , value )
 continue
   def _handle_fk_field_node ( self , node , field ) :
  with self . _lock :
 migration . merged_operations = [ ]
 _assertRaisesRegex = "assertRaisesRegex"
          return str ( self )
 self . __dt = dt
 p1 , p2 = urlparse ( url1 ) , urlparse ( url2 )
                  self . _view_middleware . append ( mw_instance . process_view )
                 MIMEText . __init__ ( self , text , subtype , None )
                  sent = self . _send ( message )
  self . update ( updates )
                          if self . selected_fields is None or field . attname in self . selected_fields :
 pass
 self . attachments . append ( ( filename , content , mimetype ) )
 resolver = urlresolvers . RegexURLResolver ( r'^/' , urlconf )
   if isinstance ( field_value , str ) :
   def _get_page ( self , * args , ** kwargs ) :
      help = "Starts a lightweight Web server for development."
   def _has_changed ( self , initial , data ) :
              return list_ [ - 1 ]
 if level :
    def _has_changed ( self , initial , data ) :
    def extract ( path , to_path = '' ) :
  touch_import ( 'django.utils.encoding' , 'python_2_unicode_compatible' , decorated )
  else :
 def __init__ ( self , parent_widget , name , value , attrs , choices ) :
          if app_config . models_module is None :
              result . setlist ( key , value )
                raise RuntimeError (  "The method to extend accepted command-line arguments by the "  "test management command has changed in Django 1.8. Please "  "create an add_arguments class method to achieve this." )
          self . open ( )
   for lineno , line in enumerate ( content . splitlines ( True ) ) :
          self . template_cache = { }
     class RequireDebugTrue ( logging . Filter ) :
          skipped = [ ]
                 value = field . widget . value_from_datadict ( self . data , self . files , self . add_prefix ( name ) )
   def __iter__ ( self ) :
 left = t . nud ( self )
 bits = token . split_contents ( )
 return IfEqualNode ( val1 , val2 , nodelist_true , nodelist_false , negate )
    def tzname ( self , dt ) :
      if not is_valid_ipv6_address ( value ) :
   elif option == 'only' :
 messages = [ EmailMessage ( subject , message , sender , recipient ,  connection = connection )  for subject , message , sender , recipient in datatuple ]
              continue
    def negate ( self ) :
 for model in app_models :
              value = [ ]
         ns_resolver = RegexURLResolver ( ns_pattern , resolver . url_patterns )
                  raise ValueError ( 'Unable to set formatter '  '%r: %s' % ( formatter , e ) )
          value = ugettext ( "%s GB" ) % filesize_number_format ( bytes / GB )
 self . _empty = False
              self . stdout . write ( self . style . MIGRATE_HEADING ( "Operations to perform:" ) )
   for model in model_list :
 return dict ( ( k , repr ( v ) ) for k , v in module . __dict__ . items ( ) if not omittable ( k ) )
                  field_notes . append (  'max_digits and decimal_places have been guessed, as this '  'database handles decimal fields as float' )
      bits = list ( token . split_contents ( ) )
          pid = os . getpid ( )
                  r = r [ : - 6 ] + 'Z'
 __contains__ = new_method_proxy ( operator . contains )
    def __deepcopy__ ( self , memo ) :
  elif ':' not in middle and simple_email_re . match ( middle ) :
              return template
   def file_complete ( self , file_size ) :
  __all__ = [  'utc' , 'get_fixed_timezone' ,  'get_default_timezone' , 'get_default_timezone_name' ,  'get_current_timezone' , 'get_current_timezone_name' ,  'activate' , 'deactivate' , 'override' ,  'localtime' , 'now' ,  'is_aware' , 'is_naive' , 'make_aware' , 'make_naive' ,  ]
     return self . _get_scheme ( )
          return value
      def _checkLevel ( level ) :
  else :
                  pass
 msgs , errors , status = popen_wrapper ( args )
                  raise
  warnings . warn ( "django.utils.unittest will be removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2 )
  super ( RendererMixin , self ) . __init__ ( * args , ** kwargs )
          pass
          _templatetags_modules = [ ]
   nodelist_true_output = None
 decimals = abs ( exponent )
              return
              widget = self . field . widget
   def convert_old_style_list ( list_ ) :
  else :
              ser_fmt = None
  LOCK_SH = 0
    class override ( object ) :
 if six . PY2 :
          processors = [ ]
          raise ValueError ( "The protocol '%s' is unknown. Supported: %s"  % ( protocol , list ( ip_address_validator_map ) ) )
 bits = bits [ : - 2 ]
     for handler in handlers :
              continue
   class SimpleLazyObject ( LazyObject ) :
  with context . push ( ) :
                      if name in existing :
 from django . utils . translation import ugettext_lazy as _ , ugettext
 opt_dict = { 'bold' : '1' , 'underscore' : '4' , 'blink' : '5' , 'reverse' : '7' , 'conceal' : '8' }
  else :
          value = self . to_python ( value ) . strip ( )
 get_method_self = operator . attrgetter ( _meth_self )
 if color_settings :
    def sql_flush ( style , connection , only_django = False , reset_sequences = True , allow_cascade = False ) :
          super ( BaseMemcachedCache , self ) . __init__ ( params )
   url = hashlib . md5 ( force_bytes ( iri_to_uri ( request . build_absolute_uri ( ) ) ) )
              return
  elif ch == ')' :
 from __future__ import unicode_literals
  json . dump ( self . get_dump_object ( obj ) , self . stream ,  cls = DjangoJSONEncoder , ** self . json_kwargs )
    def to_python ( self , value ) :
 st = os . stat ( src )
   self . clean ( )
   if '.' in str_number :
   def execute ( self ) :
              field_params [ 'max_length' ] = int ( row [ 3 ] )
   def reader_enters ( self ) :
  return super ( SortedDict , self ) . setdefault ( key , default )
                          result = middleware . process_exception ( request , e )
   else :
               msg = self . style . HTTP_SERVER_ERROR ( msg )
      def _setup ( self ) :
  modules = _format_modules_cache . setdefault ( lang , list ( iter_format_modules ( lang , settings . FORMAT_MODULE_PATH ) ) )
                  self . set_payload ( text , utf8_charset )
          warnings . warn ( '`request.REQUEST` is deprecated, use `request.GET` or '  '`request.POST` instead.' , RemovedInDjango19Warning , 2 )
                  if is_templatized :
 default_error_messages = {  'invalid_choice' : _ ( 'Select a valid choice. %(value)s is not one of the available choices.' ) ,  }
     @ register . filter ( is_safe = False )
          pass
              self . addr = ''
                   logger = logging . getLogger ( 'py.warnings' )
     @ classmethod
              form = self . forms [ i ]
from django . forms . extras . widgets import SelectDateWidget
     seen_data . add ( row_data )
  if not chunk :
          parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a database onto which to '  'open a shell. Defaults to the "default" database.' )
import os
 return DefusedExpatParser ( )
  self . connection = None
              return
              value = self . decompress ( value )
                  current_fields . append ( ( key , value ) )
   return directories , files
 if app_path is None :
    def get_declared_fields ( bases , attrs , with_base_fields = True ) :
                  new = name
    @ staticmethod
 pass
   if not strict :
 def check_for_language ( lang_code ) :
              return
              if not only_initial :
              self . xml . characters ( field . value_to_string ( obj ) )
 return DebugNode ( )
          if data in self . empty_values :
              yield widget
   else :
              yield 'year'
    try :
  else :
      if role in PALETTES [ NOCOLOR_PALETTE ] and definition :
              settings . USE_I18N = True
              raise CommandError ( "Error: %s" % message )
              stamp = time . mktime ( tt )
  elif value in ( False , 'False' , '0' ) :
 directories , files = [ ] , [ ]
   def __getattr__ ( self , attr ) :
  except ImportError :
                          raise
          return self . _regex
   def parse_name ( self , fixture_name ) :
   def load_middleware ( self ) :
 for field in _parse_date_fmt ( ) :
 self . xml . endDocument ( )
          return locale . lower ( )
 from django . forms . widgets import HiddenInput
                  exclude . append ( f . name )
  else :
   def as_p ( self ) :
  return format_html ( '<input{0} />' , flatatt ( final_attrs ) )
  requires_system_checks = False
 self . stream . write ( b'\n' )
              raise TemplateSyntaxError ( "%s requires %d arguments, %d provided" %  ( name , alen - dlen , plen ) )
                  self . stdout . write ( "  No migrations to apply." )
  elif args [ 1 ] [ 0 ] == '4' :
 _supported = None
          with self . mutex :
   def U ( self ) :
  sys . modules [ __name__ + ".moves.urllib_request" ] = sys . modules [ __name__ + ".moves.urllib.request" ] = Module_six_moves_urllib_request ( __name__ + ".moves.urllib.request" )
     if options . get ( "test_flush" , False ) :
 return iter ( getattr ( d , _iterlists ) ( ** kw ) )
   @ property
          return t . render ( context_instance )
   self . use_ipv6 = options . get ( 'use_ipv6' )
 from datetime import datetime
          path = force_text ( path )
   if header_end == - 1 :
          return False
    def base64_hmac ( salt , value , key ) :
  return self . _non_form_errors
                  response = self . get_exception_response ( request , resolver , 404 )
 if props :
   else :
      def curry ( _curried_func , * args , ** kwargs ) :
          self . require_all_fields = kwargs . pop ( 'require_all_fields' , True )
          return self . s
                  pickled = self . _cache [ key ]
  return Truncator ( value ) . words ( length , truncate = ' ...' )
            if self . forms :
     def format ( value , format_string ) :
 memo [ id ( self ) ] = result
              return list ( self . iteritems ( ) )
  return super ( classonlymethod , self ) . __get__ ( instance , owner )
                      curs . execute ( "\n" . join ( full_statement ) )
              self . error_list = [ ]
              return self . paginator . count
 widget = widget or self . widget
          self . path , self . match , self . recursive = path , match , recursive
                              try :
 if ip_str . count ( '::' ) == 1 :
   counters = [ 0 ] * len ( handlers )
                  fields = list ( six . iteritems ( base . declared_fields ) ) + fields
  else :
              msg [ 'Message-ID' ] = make_msgid ( )
     class QueryDict ( MultiValueDict ) :
              pass
 @ stringfilter
                      content = token_string [ 2 : - 2 ] . strip ( )
    def attach_file ( self , path , mimetype = None ) :
      @ register . tag
          module_path , class_name = dotted_path . rsplit ( '.' , 1 )
  def __init__ ( self , tup , hash = hash ) :
  return 'tag:%s%s:%s/%s' % ( bits . hostname , d , bits . path , bits . fragment )
  if isinstance ( loader , six . string_types ) :
  if isinstance ( s , six . memoryview ) :
      year_days = [ None , 0 , 31 , 59 , 90 , 120 , 151 , 181 , 212 , 243 , 273 , 304 , 334 ]
              return 'th'
                          return True
                  v ( value )
     if not isinstance ( value , list ) :
 for app_config in apps . get_app_configs ( ) :
                   ch , escaped = next ( pattern_iter )
  return bits [ 0 ] , ''
              if finder . find_module ( name , package_path ) :
    @ register . tag
                  message , code , params = message . message , message . code , message . params
   __contains__ = has_header
              return default
     _format_cache = { }
    def get_public_serializer_formats ( ) :
   for module_to_search in args :
          return '\x1b[%sm' % RESET
  if options [ 'method' ] in ( 'prefork' , 'fork' ) :
                      pass
   return '' . join ( words )
                       exhaust ( stream )
 self . _add_fallback ( )
  for app_name , namespace_list in pattern . app_dict . items ( ) :
 if jan1_weekday > 4 :
   def make_view_atomic ( self , view ) :
          return key in self . dicts [ - 1 ]
                  raise CommandError ( "You can only use --pks option with one model" )
    else :
  output = self . handle ( * args , ** options )
   self . _mutable = mutable
   else :
  else :
  loop_dict [ 'first' ] = ( i == 0 )
 xreadlines = property ( lambda self : self . file . xreadlines )
    return '' . join ( _generator ( ) )
               if ignore and field_name not in model_fields :
   def render ( self , name , value , attrs = None , choices = ( ) ) :
  def __ne__ ( self , other ) :
                              if self . verbosity >= 3 :
   class FixUnicode ( fixer_base . BaseFix ) :
 RFC850_DATE = re . compile ( r'^\w{6,9}, %s-%s-%s %s GMT$' % ( __D , __M , __Y2 , __T ) )
  if item_type == FIELD :
 from django . utils import six
 parser . add_argument ( 'migration_name' ,  help = 'Migrations will be squashed until and including this migration.' )
  from django . conf import settings
          try :
  encoding = property ( lambda self : self . file . encoding )
   try :
    def modelform_factory ( model , form = ModelForm , fields = None , exclude = None ,  formfield_callback = None , widgets = None , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ) :
                              pending_references . setdefault ( refto , [ ] ) . extend ( refs )
                  self . stdout . write ( "No changes detected" )
 self . xml . endElement ( "object" )
  except ( ValueError , TypeError ) :
 for d in self . dicts :
  if not self . is_required :
  except StopIteration :
                              extra_params [ 'blank' ] = True
                  ch , escaped = next ( pattern_iter )
   def __getitem__ ( self , key ) :
      from yaml import SafeLoader , SafeDumper
        contains_nontext = False
 words = self . _wrapped . split ( )
   def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
                      num_sent += 1
          full_path = self . path ( name )
  else :
          return self . render ( )
 if mem_args in cache :
   class Command ( BaseCommand ) :
          super ( RadioChoiceInput , self ) . __init__ ( * args , ** kwargs )
    def _sanitize_ipv4_mapping ( ip_str ) :
 existing = list ( root . manager . loggerDict )
          return self . __class__ ( * self . dicts )
                  pass
  output . append ( '</select>' )
              all_models . extend ( router . get_migratable_models ( app_config , database , include_auto_created = True ) )
 one_percent_re = re . compile ( r"""(?<!%)%(?!%)""" )
          return '%s-%s' % ( self . prefix , index )
 def encoding ( self , value ) :
 from django . core . management . base import CommandError , BaseCommand
 all_issues = checks . run_checks ( app_configs = app_configs , tags = tags )
 result = [ ]
  return False
  if not cls :
  return ( self . paginator . per_page * ( self . number - 1 ) ) + 1
 return '%02d' % self . g ( )
  import os
   def parse_color_setting ( config_string ) :
  return FirstOfNode ( [ parser . compile_filter ( bit ) for bit in bits ] )
  if plen < ( alen - dlen ) or plen > alen :
              return ''
                          description = "The '%s' function" % receiver . __name__
          sign = '-'
              self . stdout . write ( msg )
          if not isinstance ( index , ( slice , ) + six . integer_types ) :
   def log_message ( self , format , * args ) :
 return ( ( evens + odds ) % 10 == 0 )
                  if supported_code . startswith ( generic_lang_code + '-' ) :
   ugettext_noop = gettext_noop
              for fixture_label in fixture_labels :
   if func is None :
          os . rmdir ( original_path )
 FormSet . fk = fk
 from django . utils import six
              test_runner_class . add_arguments ( parser )
 return chunk [ : end ]
                  pass
 return self . cleaned_data
          get = '<could not parse>'
   if found :
      class InlineForeignKeyField ( Field ) :
                result = type ( self ) ( )
              return self . html_name
  else :
          for name , block in six . iteritems ( blocks ) :
 self . _catalog . update ( other . _catalog )
 if self . _leftover :
 parser . add_argument ( '--name' , '-n' , dest = 'files' ,  action = 'append' , default = [ ] ,  help = 'The file name(s) to render. '  'Separate multiple extensions with commas, or use '  '-n multiple times.' )
   def create_nodelist ( self ) :
          raise TemplateSyntaxError ( "'%s' tag takes only one argument" % bits [ 0 ] )
  data_value = data if data is not None else ''
   for middleware_method in self . _view_middleware :
          if not getattr ( f , 'editable' , False ) :
                  return
 for dirpath , dirnames , filenames in os . walk ( root , topdown = True , followlinks = self . symlinks ) :
       def __init__ ( self , file ) :
  smart_unicode = smart_text
                                      chunk = base64 . b64decode ( chunk )
 yield "# You'll have to do the following manually to clean this up:"
                      break
   def get ( self , key , otherwise = None ) :
      class ChunkIter ( six . Iterator ) :
              return self . as_widget ( ) + self . as_hidden ( only_initial = True )
 git_log = subprocess . Popen ( 'git log --pretty=format:%ct --quiet -1 HEAD' ,  stdout = subprocess . PIPE , stderr = subprocess . PIPE ,  shell = True , cwd = repo_dir , universal_newlines = True )
   def handle ( self , * app_labels , ** options ) :
  locations = [ ]
 if not match or not match . group ( 1 ) :
                          custom_sql = custom_sql_for_model ( model , no_style ( ) , connection )
          bits = token . split_contents ( ) [ 1 : ]
 bits = urlparse ( url )
  elif autoescape :
      help = "Updates database schema. Manages both apps with migrations and those without."
  return self . _body
          current_timezone = timezone . get_current_timezone ( )
  else :
  else :
     def get_valid_filename ( s ) :
          if not support_legacy :
    @ register . filter ( "escapejs" )
 for f in opts . concrete_fields + opts . virtual_fields + opts . many_to_many :
   def __enter__ ( self ) :
              return (  _lazy_proxy_unpickle ,  ( func , self . __args , self . __kw ) + resultclasses  )
  return result
                  return func . __get__ ( self , type ( self ) ) ( * args2 , ** kwargs2 )
                      dirnames . remove ( dirname )
   if getattr ( obj , field . name ) is not None :
  elif isinstance ( template , six . string_types ) :
 self . verbosity = int ( options . get ( 'verbosity' ) )
 hidden_widget = MultipleHiddenInput
 for key , value in data :
 if imatch :
 return list ( value )
 return getattr ( _active , "value" , get_default_timezone ( ) )
                  attrs [ 'id' ] = self . html_initial_id
          self . set_cookie ( key , max_age = 0 , path = path , domain = domain ,  expires = 'Thu, 01-Jan-1970 00:00:00 GMT' )
  elif not self . required and not value :
 if comment_lineno_cache == cur_lineno :
 FILTER_ARGUMENT_SEPARATOR = ':'
          return list ( iter ( self ) )
          self . close ( )
              obj = self . var
 return CommentNode ( )
 select_html = s . render ( field % name , val , local_attrs )
      urlconf = settings . ROOT_URLCONF
 if i < 36 ** factor :
                  return False
  yield force_text ( message )
 if max_age is not None :
              self . DSTOFFSET = timedelta ( seconds = - _time . altzone )
   def colorize ( text = '' , opts = ( ) , ** kwargs ) :
              return self . management_form . cleaned_data [ INITIAL_FORM_COUNT ]
 from django . core . exceptions import MiddlewareNotUsed , PermissionDenied , SuspiciousOperation
          form = super ( BaseInlineFormSet , self ) . _construct_form ( i , ** kwargs )
          reloader = python_reloader
 if not ( self . inverse_match is not bool ( self . regex . search (  force_text ( value ) ) ) ) :
                  try :
 if j == - 1 :
              assert not isinstance ( cc , six . string_types ) , '"cc" argument must be a list or tuple'
  except AttributeError :
                  r = r [ : 12 ]
      class BaseModelFormSet ( BaseFormSet ) :
                  result . parent = self
   super ( Command , self ) . handle ( 'app' , app_name , target , ** options )
 self . locale_paths = [ ]
  from __future__ import unicode_literals
 import subprocess
 REQUEST = property ( _get_request )
 warnings . warn ( msg , RemovedInDjango19Warning , stacklevel = 2 )
 result . key = key
  else :
  except StandardError as e :
  else :
   def parse ( self ) :
  if self . max_value is not None :
                  return "[Didn't have permission to include file]"
 return qs
   elif t . token_type == TOKEN_VAR :
  elif not isinstance ( value , ConvertingList ) and isinstance ( value , list ) :
 hidden_widget = HiddenInput
          raise SerializerDoesNotExist ( format )
   return True
              output = self . filter_expression . resolve ( context )
  else :
  for field_node in node . getElementsByTagName ( "field" ) :
 def content ( self , value ) :
 styles . reverse ( )
                  raise ValueError ( 'Unknown level: %r' % level )
 from django . utils . encoding import iri_to_uri , force_bytes , force_text
          raise CommandError ( "App '%s' has migrations. Only the sqlmigrate and sqlflush commands can be used when an app has migrations." % app_config . label )
  return False
          return "<IfEqualNode>"
 supported_platform = plat != 'Pocket PC' and ( plat != 'win32' or  'ANSICON' in os . environ )
              raise CommandError ( "currently makemessages only supports domains "  "'django' and 'djangojs'" )
 self . field = field
  def __init__ ( self , name , value , attrs , choice , index ) :
                          out . write ( blankout ( p , 'F' ) )
                  try :
   return '\n' . join ( output )
    elif version [ 3 ] != 'final' :
 if getattr ( self , '_client' , None ) is None :
 values = [ parser . compile_filter ( arg ) for arg in args [ 1 : - 2 ] ]
 if item_date :
  else :
   for key , op in OPERATORS . items ( ) :
  return media
  for i in range ( 0 , self . total_form_count ( ) ) :
          return EscapeBytes ( s )
                  self . stdout . write ( self . style . MIGRATE_HEADING ( "Merging %s" % app_label ) )
          return [ 'parse' , 'error' , 'request' , 'response' , 'robotparser' ]
  def add_arguments ( self , parser ) :
          if not self . _is_rendered :
      while remaining != 0 :
  if six . PY2 :
 try :
              try :
  except AppRegistryNotReady :
 self . index = index
                      week_number -= 1
 message = _ ( 'Ensure this value is less than or equal to %(limit_value)s.' )
 iterator = None
          return unicode ( s . replace ( r'\\' , r'\\\\' ) , "unicode_escape" )
  except ImportError :
    class DefaultStorage ( LazyObject ) :
              self . stdout . write ( statement )
              form = ManagementForm ( auto_id = self . auto_id , prefix = self . prefix , initial = {  TOTAL_FORM_COUNT : self . total_form_count ( ) ,  INITIAL_FORM_COUNT : self . initial_form_count ( ) ,  MIN_NUM_FORM_COUNT : self . min_num ,  MAX_NUM_FORM_COUNT : self . max_num  } )
   def n ( self ) :
    sql_list = sql_flush ( self . style , connection , only_django = True ,  reset_sequences = reset_sequences ,  allow_cascade = allow_cascade )
  return 0
   def get_fqdn ( self ) :
          sql_files . append ( os . path . join ( app_dir , "%s.%s.sql" % ( opts . model_name , backend_name ) ) )
 obj . widgets = copy . deepcopy ( self . widgets )
 hextet = ip_str . split ( '::' )
      def __init__ ( self ) :
     def load_template_source ( self , template_name , template_dirs = None ) :
  for shell in available_shells :
   def cache_key ( self , template_name , template_dirs ) :
 truncate_text = self . add_truncation_text ( '' , truncate )
 from django . db . migrations . state import ProjectState
 if len ( bits ) == 2 :
  return response
  builtins = [ ]
                  usage . append ( style . NOTICE (  "Note that only Django core commands are listed "  "as settings are not properly configured (error: %s)."  % self . settings_exception ) )
  return format_html ( '<option value="{0}"{1}>{2}</option>' ,  option_value ,  selected_html ,  force_text ( option_label ) )
   elif var is None :
                  var , constant = match . group ( "var" , "constant" )
  unichr = unichr
 if not os . path . exists ( self . _dir ) :
     class Input ( Widget ) :
    def contains ( source , inst ) :
 parts = 2 if version [ 2 ] == 0 else 3
  if self . verbosity >= 2 :
  warnings . warn (  "get_declared_fields is deprecated and will be removed in Django 1.9." ,  RemovedInDjango19Warning ,  stacklevel = 2 ,  )
                              if self . verbosity >= 2 :
              label_output = self . handle_label ( label , ** options )
   def iterlists ( d , ** kw ) :
 needs_multipart_form = True
          self . _assert_mutable ( )
   def make_writeable ( self , filename ) :
from __future__ import unicode_literals
 self . error_class = error_class
                  self . extend_nodelist ( nodelist , TextNode ( token . contents ) , token )
  else :
   def __repr__ ( self ) :
                  try :
  bit = ' ' . join ( trans_bit )
              for module in get_format_modules ( lang ) :
           from django . conf import settings , global_settings
   def __exit__ ( self , exc_type , exc_value , traceback ) :
                  if middle . endswith ( punctuation ) :
              guessed_path = path . join ( tempdir , guessed_filename )
                      attrs [ 'class' ] += ' ' + self . form . required_css_class
 import types
                  self . compile_messages ( locations )
import copy
                       field_value = [ getInnerText ( k ) . strip ( ) for k in keys ]
                      match = RE_DATE . match ( value )
   if fixture_name != 'initial_data' and not fixture_files :
  except KeyError :
 if widgets and f . name in widgets :
              end = newline
  except TemplateSyntaxError as e :
          return not settings . DEBUG
    def to_locale ( language ) :
 try :
                  pass
              try :
                       name = self . get_available_name ( name )
  except DecimalException :
              value = False
                          fh . write ( migration_string )
              return 'st'
              if parts [ - 1 ] in self . serialization_formats :
 if not data :
 self . toks = { }
 import socket
 for ext in extensions :
              obj . pk = Model . _default_manager . db_manager ( db ) . get_by_natural_key ( * natural_key ) . pk
   elif t . token_type == TOKEN_TEXT :
          if len ( unique_check ) == 1 :
 return mark_safe ( '\n' . join ( output ) )
   class Truncator ( SimpleLazyObject ) :
 if commands_only :
                        continue
 self . _clean_form ( )
          _load_serializers ( )
 app_label , migration_name = options [ 'app_label' ] , options [ 'migration_name' ]
 hidden_widget = field . hidden_widget ( )
  raise self . error ( token , "Invalid block tag: '%s'" % command )
   month = MONTHS . index ( m . group ( 'mon' ) . lower ( ) ) + 1
  if isinstance ( source , Group ) :
          return 'https' if os . environ . get ( "HTTPS" ) == "on" else 'http'
   if plan_node in loader . applied_migrations :
  if isinstance ( s , bytes ) :
   if klass not in cls . __dispatch :
   def iterkeys ( d , ** kw ) :
                       key = make_key ( args , kwds , typed ) if kwds or typed else args
   def __getitem__ ( self , idx ) :
 pop = complain
              self . __args = args
              d = Decimal ( force_text ( float ( text ) ) )
               final_attrs [ 'value' ] = force_text ( value )
              value , decimals = value . split ( decimal_separator , 1 )
                  if self . fail_silently :
                      if callable ( limit_choices_to ) :
                          raise ValueError ( 'Unable to configure handler '  '%r: %s' % ( name , e ) )
              escaped = False
 sites2 = _findall ( s2 , str ( year + 28 ) )
          if name . lower ( ) == 'subject' :
  from django . core . exceptions import ValidationError
 class MaxValueValidator ( BaseValidator ) :
   def get ( self , key , default = None ) :
  _DJANGO_DEPRECATED_LOCALES = _BROWSERS_DEPRECATED_LOCALES
            unhandled_params = unhandled_params [ : - len ( defaults ) ]
              params = { 'max' : self . max_length , 'length' : len ( file_name ) }
     if att_name == 'id' and extra_params == { 'primary_key' : True } :
      def getInnerText ( node ) :
 try :
               ERRORS = {  errno . EACCES : "You don't have permission to access that port." ,  errno . EADDRINUSE : "That port is already in use." ,  errno . EADDRNOTAVAIL : "That IP address can't be assigned-to." ,  }
 return from_current_timezone ( result )
 indent = options . get ( 'indent' )
                      found = False
   form . data [ form . add_prefix ( self . fk . name ) ] = None
              hextets [ index ] = '0'
 readline . parse_and_bind ( "tab:complete" )
              sys . stderr = NullDevice ( )
     else :
      choice_input_class = CheckboxChoiceInput
 from django . utils import lru_cache
  pofile = os . path . join ( basedir , '%s.po' % str ( self . domain ) )
 requires_system_checks = False
 from django . utils . module_loading import import_string
 clear_checkbox_label = ugettext_lazy ( 'Clear' )
 super ( Context , self ) . __init__ ( dict_ )
  from django . core . management . base import CommandError
          nodelist_empty = parser . parse ( ( 'endfor' , ) )
 i = 0
                                  del form . cleaned_data [ field ]
          try :
 return changeset
     class SelectMultiple ( Select ) :
 while bits :
 from django . utils . translation import ugettext_lazy as _
 from django . utils import six
   def __repr__ ( self ) :
 logger . propagate = True
    def is_naive ( value ) :
  try :
          _load_serializers ( )
 if pieces [ - 1 ] :
      def __init__ ( self ) :
 super ( QueryDict , self ) . __delitem__ ( key )
 if retval :
                              filemsg = ''
                   try :
     finally :
  kw = dict ( ( k , int ( v ) ) for k , v in six . iteritems ( kw ) if v is not None )
                       urlconf = request . urlconf
 import warnings
   except NameError :
 message_context = context_match . group ( 1 )
  from django . utils . datastructures import MultiValueDict
 assert not ( cls . _delegate_bytes and cls . _delegate_text ) , "Cannot call lazy() with both bytes and text return types."
 base_path = abspathu ( base )
  import socket
  handler . endElement ( "author" )
              return smart_text ( token )
 from __future__ import unicode_literals
  except ImportError :
 if schemes is not None :
 html [ 'month' ] = self . create_select ( name , self . month_field , value , month_val , choices , self . month_none_value )
          try :
              if self . to_field :
 new_context = copy ( self )
              self . stdout . write ( self . style . MIGRATE_HEADING ( "Running migrations:" ) )
           if args [ - 3 ] == "as" :
  return self . _regex_dict [ language_code ]
              return ( t [ 0 ] . lower ( ) , t [ 1 ] )
   def process ( self , command , domain ) :
              localpart , domain = addr . split ( '@' , 1 )
  self . new_objects . append ( self . save_new ( form , commit = commit ) )
 inner = NonCapture ( result [ start : ] )
 if pattern . app_name :
                   raise
 _iteritems = "iteritems"
 return http . QueryDict ( raw_query_string , encoding = self . _encoding )
  return result
    stream . unget ( chunk [ header_end + 4 : ] )
  if hasattr ( get_git_changeset , 'cache' ) :
 if isinstance ( value , list ) :
      def __init__ ( self , max_length = None , min_length = None , * args , ** kwargs ) :
 inhibit_post_migrate = options . get ( 'inhibit_post_migrate' , False )
  else :
               return False
          self . object = obj
  def render ( self , name , value , attrs = None , choices = ( ) ) :
  from datetime import timedelta , tzinfo
  resolver = get_resolver ( urlconf )
              return False
   if field . rel and isinstance ( field . rel , models . ManyToManyRel ) :
 inverse_match = False
  else :
 default_error_messages = {  'invalid' : _ ( 'Enter a list of values.' ) ,  'incomplete' : _ ( 'Enter a complete value.' ) ,  }
              valid = False
     FILE_INPUT_CONTRADICTION = object ( )
              content_length = int ( environ . get ( 'CONTENT_LENGTH' ) )
 if not unused_char :
   parser = subcommand_cls . create_parser ( '' , cwords [ 0 ] )
  def add_arguments ( self , parser ) :
 INITIAL_FORM_COUNT = 'INITIAL_FORMS'
   else :
              if ignore :
   def handle_file_complete ( self , old_field_name , counters ) :
              if '.' in exclude :
  start_response ( force_str ( status ) , response_headers )
                      app = app . rpartition ( '.' ) [ - 1 ]
                  pass
 flags = 0
    def __ne__ ( self , other ) :
  else :
              assert not isinstance ( bcc , six . string_types ) , '"bcc" argument must be a list or tuple'
 if self . can_order :
   def is_valid ( self ) :
              assert content is not None
   def patch_cache_control ( response , ** kwargs ) :
  if not self . user_regex . match ( user_part ) :
 matches = filter_re . finditer ( token )
                  for model in model_list :
  def add_arguments ( self , parser ) :
      def __init__ ( self , regex , callback , default_args = None , name = None ) :
 self . setFeature ( handler . feature_external_ges , False )
              buf = self . readline ( )
 handler . endElement ( "feed" )
                form . data [ form . add_prefix ( self . _pk_field . name ) ] = None
 self . __name = "%s%02d%02d" % ( sign , abs ( offset ) / 60. , abs ( offset ) % 60 )
 for name in MEDIA_TYPES :
 def __init__ ( self , url , length , mime_type ) :
  if os . path . exists ( filename ) :
   def render ( self , name = None , value = None , attrs = None , choices = ( ) ) :
 all_date_checks = all_date_checks . union ( set ( date_checks ) )
  except Exception as e :
          instance = super ( SortedDict , cls ) . __new__ ( cls , * args , ** kwargs )
 processors . append ( func )
  return upload
 recipients = [ sanitize_address ( addr , email_message . encoding )  for addr in email_message . recipients ( ) ]
  try :
  __all__ = ( 'Template' , 'Context' , 'RequestContext' , 'compile_string' )
              url = reverse ( view_name , args = args , kwargs = kwargs , current_app = context . current_app )
          if name == "_wrapped" :
   def create_select ( self , name , field , value , val , choices , none_value ) :
 locales = [ locale ]
 self . _closable_objects = [ ]
 msg_count += 1
                 kwargs = match . groupdict ( )
  from django . utils import six
              netloc = netloc . encode ( 'idna' ) . decode ( 'ascii' )
     class DTDForbidden ( DefusedXmlException ) :
  return errors
 return callback ( request , ** param_dict )
      import threading
 if file_ :
              break
                  bits = normalize ( p_pattern )
 if g [ 0 ] == '"' :
from django . core . management . base import BaseCommand , CommandError
 __Y2 = r'(?P<year>\d{2})'
 statements = [ ]
   flup_module = 'server.' + options [ 'protocol' ]
   kwargs [ "required" ] = False
                  clean_data . append ( field . clean ( field_value ) )
                      if sub_match :
          if not hasattr ( e , 'django_template_source' ) :
  elif basetype == 'message' and subtype == 'rfc822' :
 class MaxLengthValidator ( BaseValidator ) :
                          i += 1
 output = template_localtime ( output , use_tz = context . use_tz )
    def render ( self , context ) :
   except TypeError :
                      self . stdout . write ( self . style . MIGRATE_LABEL ( "  Branch %s" % migration . name ) )
   if six . PY3 :
                      if primary_keys :
                              f = os . path . join ( root , f )
  if field_value in self . empty_values :
   def initial_form_count ( self ) :
 self . add_item_elements ( handler , item )
 if ( isinstance ( args [ 0 ] , SafeData ) and  getattr ( _dec . _decorated_function , 'is_safe' , False ) ) :
    if not hasattr ( self , '_deleted_form_indexes' ) :
  if record . exc_info :
 if not response . has_header ( 'Cache-Control' ) :
               urlconf_repr = '<%s list>' % self . urlconf_name [ 0 ] . __class__ . __name__
  return t [ 0 ] . lower ( ) , True
   def validate ( self , value ) :
 self . _options = params . get ( 'OPTIONS' , None )
          if data is None :
 self . make_writeable ( new_path )
          resolve ( path , urlconf )
              handler . addQuickElement ( 'updated' , rfc3339_date ( item [ 'updateddate' ] ) )
 shown = set ( )
 m = self . WORD_PATTERN . match ( rest )
                  i += 1
              return op ( )
 if conflicts :
 MONTHS_AP = {  1 : pgettext_lazy ( 'abbrev. month' , 'Jan.' ) ,  2 : pgettext_lazy ( 'abbrev. month' , 'Feb.' ) ,  3 : pgettext_lazy ( 'abbrev. month' , 'March' ) ,  4 : pgettext_lazy ( 'abbrev. month' , 'April' ) ,  5 : pgettext_lazy ( 'abbrev. month' , 'May' ) ,  6 : pgettext_lazy ( 'abbrev. month' , 'June' ) ,  7 : pgettext_lazy ( 'abbrev. month' , 'July' ) ,  8 : pgettext_lazy ( 'abbrev. month' , 'Aug.' ) ,  9 : pgettext_lazy ( 'abbrev. month' , 'Sept.' ) ,  10 : pgettext_lazy ( 'abbrev. month' , 'Oct.' ) ,  11 : pgettext_lazy ( 'abbrev. month' , 'Nov.' ) ,  12 : pgettext_lazy ( 'abbrev. month' , 'Dec.' )  }
 if self . can_delete :
              if default is not RAISE_ERROR :
              return cache [ mem_args ]
              raise AttributeError ( "no such move, %r" % ( name , ) )
    def check_errors ( fn ) :
 urlresolvers . set_urlconf ( urlconf )
              exclude = form . _get_validation_exclusions ( )
  else :
   def __repr__ ( self ) :
 if template is None :
  viewname = parser . compile_filter ( bits [ 1 ] )
   base36 = [ ]
   def handle ( self , * tablenames , ** options ) :
  self . start_serialization ( )
      return lazy_number ( npgettext , six . text_type , context = context , singular = singular , plural = plural , number = number )
  return self . size > chunk_size
                      locations . extend ( ( dirpath , f ) for f in filenames if f . endswith ( '.po' ) )
                      app_configs = apps . get_app_configs ( )
                  declared_fields . update ( base . declared_fields )
  if 'media' not in attrs :
                      objects_in_fixture += 1
  encoding = self . _encoding
  with context . push ( var = output ) :
 self . format = format if format else None
   elif t . contents == 'comment' :
      def __init__ ( self ) :
  def __init__ ( self , queryset , empty_label = "---------" , cache_choices = None ,  required = True , widget = None , label = None , initial = None ,  help_text = '' , to_field_name = None , limit_choices_to = None ,  * args , ** kwargs ) :
          path = os . environ . get ( 'PATH' , '' ) . split ( os . pathsep )
     def resolve_variable ( path , context ) :
          return ''
 from django . utils . translation import ugettext , ungettext_lazy
    def time_format ( value , format_string ) :
          handler . addQuickElement ( "title" , item [ 'title' ] )
 self . value = value
  except NotImplementedError :
   def _make_parser ( self ) :
  except TemplateSyntaxError as e :
              return None
                  attrs = attrs or { }
      global _mtimes , _win
                      if not self . compile_function_error ( token , e ) :
              if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) :
   si = open ( '/dev/null' , 'r' )
 return True
 for message in email_messages :
 wrapper = warn_about_renamed_method ( class_name , * renamed_method )
    else :
  return value
  else :
  messages = { }
  try :
  else :
                  obj = mark_for_escaping ( new_obj )
 can_import_settings = True
                  project_name = settings . SETTINGS_MODULE . split ( '.' ) [ 0 ]
                  raise ValidationError ( ungettext (  "Please submit %d or more forms." ,  "Please submit %d or more forms." , self . min_num ) % self . min_num ,  code = 'too_few_forms' )
              raise TemplateSyntaxError ( "Invalid arguments provided to assignment_tag" )
                   for hook in sys . path_hooks :
  else :
 gettext_module . GNUTranslations . __init__ ( self )
  return templatetags_modules
          max_num = 1
    @ register . filter ( is_safe = True )
 import sys
                  kwargs [ 'to_field' ] = self . fk . rel . field_name
               value = self . _resolve_lookup ( context )
   def clean ( self , data , initial = None ) :
 kwargs = kwargs or { }
                  if fake :
 self . buf_size = buf_size
 def get_digit ( value , arg ) :
 from django . core . management . base import BaseCommand , CommandError
                      e . args = ( "Problem installing fixture '%s': %s" % ( fixture_file , e ) , )
   def is_multipart ( self ) :
 self . lasttag = tag = match . group ( 1 ) . lower ( )
   except TypeError :
              retval = self . tokens [ self . pos ]
          try :
  else :
          return os . path . getsize ( self . path ( name ) )
 parser . add_argument ( '--settings' )
     def has_key ( self , key , version = None ) :
   executor = MigrationExecutor ( connection )
 from django . utils . translation import get_language
          self . _read_started = True
  value = new_value
  return mark_safe ( '\n' . join ( inputs ) )
 message = _ ( 'Ensure this value is greater than or equal to %(limit_value)s.' )
              msg = "Invalid HTTP_HOST header: %r." % host
 default_error_messages = {  'invalid_date' : _ ( 'Enter a valid date.' ) ,  'invalid_time' : _ ( 'Enter a valid time.' ) ,  }
  def handle ( self , ** options ) :
              try :
     super ( SimpleTemplateResponse , self ) . __init__ ( '' , content_type , status )
  from django . utils . translation import ugettext_lazy as _ , pgettext_lazy
    @ lru_cache . lru_cache ( maxsize = None )
                  break
 lineno_comment_map = { }
 for t in type ( res ) . mro ( ) :
   def decompress ( self , value ) :
  output_transaction = True
 from django . utils . safestring import SafeData , mark_safe
           name , val = forbid_multi_line_headers ( name , val , 'ascii' )
 if settings . SETTINGS_MODULE :
 new = '#: ' + orig_file [ 2 : ]
    def color_style ( ) :
   try :
 if _time . daylight :
   def render ( self , name , value , attrs = None ) :
   try :
                  name = match . lastgroup
 for attr in _urllib_error_moved_attributes :
   @ register . filter ( is_safe = True )
                  for receiver , _ , _ in receivers :
 from django . utils . deprecation import RemovedInDjango19Warning
  self . callback = None
              self . stderr = OutputWrapper ( options . get ( 'stderr' , sys . stderr ) , self . style . ERROR )
          return 0
              if cursor and connection . introspection . table_name_converter ( model . _meta . db_table ) in table_names :
  else :
 DOT_PATTERN = re . compile ( r'^\.\s*(\w+)\s*' )
 raise NotImplementedError ( 'subclasses of Storage must provide a created_time() method' )
   def __deepcopy__ ( self , memo ) :
 if len ( bits ) < 2 or bits [ - 2 ] != 'as' :
 self . id = id
 if path . isdir ( expanded_template ) :
 return wrap ( value , int ( arg ) )
              if year < 70 :
                  continue
 parser . delete_first_token ( )
      needs_multipart_form = False
     class HttpResponseRedirectBase ( HttpResponse ) :
 self . validate_key ( key )
 result = self . nodelist . render ( context )
          self . writer_enters ( )
 from __future__ import unicode_literals
  except KeyError :
   def make_template_fragment_key ( fragment_name , vary_on = None ) :
  except StandardError as e :
   def csrf ( request ) :
  elif self . verbosity > 0 :
  import re
 return NowNode ( format_string )
 def dummy ( * args , ** kwargs ) :
              if not len ( empty_label ) == 3 :
          format = options . get ( 'format' )
              self . __name = name
     def humanize ( dirname ) :
   result = avoid_wrapping ( name % count )
 output . append ( pformat ( sys . modules ) )
     ZERO = timedelta ( 0 )
 code_list = [ ]
   return formataddr ( ( nm , addr ) )
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
    def inclusion_tag ( self , file_name , context_class = Context , takes_context = False , name = None ) :
 self . _populated = True
  try :
      return CsrfTokenNode ( )
              potfiles = self . build_potfiles ( )
   class TemplateCommand ( BaseCommand ) :
 self . _raw_ipv6 = True
     def rfc3339_date ( date ) :
 self . stderr = OutputWrapper ( options . get ( 'stderr' , sys . stderr ) )
   def __lt__ ( self , other ) :
      def __init__ ( self , * args , ** kwargs ) :
              regex_compiled = re . compile ( '^%s/' % language_code , re . UNICODE )
 for iso_input in ISO_INPUT_FORMATS . get ( format_type , ( ) ) :
              for error in self . errors . as_data ( ) [ field ] :
 if not os . path . exists ( self . _dir ) :
          self . _assert_mutable ( )
  if httponly :
    def parse_endtag ( self , i ) :
   @ property
   if keyword . iskeyword ( new_name ) :
          val1 = self . var1 . resolve ( context , True )
 import datetime
     class WSGIServer ( simple_server . WSGIServer , object ) :
 Encoders . encode_base64 ( attachment )
  self . style = no_style ( )
   self . attr = new_attr
              dklen = hlen
              raise ValueError ( "Unable to convert %r" % value )
  if prefix is None :
  if os . path . isdir ( 'locale' ) :
  thefile = '%s.py' % self . file
 sublist = '\n%s<ul>\n%s\n%s</ul>\n%s' % ( indent , sublist ,  indent , indent )
 if not dklen :
 pass
   def eval ( self , context ) :
  self . xml . endElement ( "field" )
 raise NotImplementedError ( 'subclasses of LabelCommand must provide a handle_label() method' )
      @ lru_cache . lru_cache ( maxsize = None )
 return select_html
  else :
 if min_length is not None :
 self . fixture_object_count += objects_in_fixture
 self . add_fields ( form , None )
   def tell ( self ) :
 from django . utils . safestring import mark_safe
 raise NotImplementedError ( 'subclasses of Storage must provide a modified_time() method' )
          cleaned = self . clean ( value )
              data = self . field . bound_data (  self . data , self . form . initial . get ( self . name , self . field . initial )  )
                  import_module ( '.management' , app_config . name )
 self . cdata_tag = None
    widget . is_required = self . required
 BASE64_ALPHABET = BASE62_ALPHABET + '-_'
 from django . utils . six import StringIO
                       fixture_files_in_dir . append ( ( candidate , fixture_dir , fixture_name ) )
 return self . expression . resolve ( context , True )
                      continue
   ISO_8859_1 , UTF_8 = str ( 'iso-8859-1' ) , str ( 'utf-8' )
              self . msgmerge_options = self . msgmerge_options [ : ] + [ '--no-wrap' ]
                          raise CommandError ( "Unknown model: %s.%s" % ( app_label , model_label ) )
    def j ( self ) :
               initial = False
 pass
  else :
            pass
      m = IDENTIFIER . match ( s )
 default_validators = [ ]
  field_type += '('
              contents = conditional_escape ( contents )
 try :
                              field_desc += ', '
          return NodeList ( node for _ , nodelist in self . conditions_nodelists for node in nodelist )
    _moved_attributes = [ ]
     def a ( self ) :
                   loop_dict [ 'counter0' ] = i
                  j = day_of_year + ( 7 - weekday ) + ( jan1_weekday - 1 )
  return '%s%s' % ( text , truncate )
 conditions_nodelists = [ ( condition , nodelist ) ]
                          finder = hook ( entry )
 self . number = number
 if status :
   def usage ( self , subcommand ) :
              self . stdout . write ( "Downloading %s\n" % display_url )
          return '\n' . join ( sql_flush ( self . style , connections [ options [ 'database' ] ] , only_django = True ) )
      def __init__ ( self , value , text ) :
                      ch , escaped = next ( pattern_iter )
              field_type = connection . introspection . get_field_type ( row [ 1 ] , row )
   def create_token ( self , token_string , source , in_tag ) :
  except ValueError :
     class HttpResponseBadRequest ( HttpResponse ) :
 if f . primary_key :
      class TokenParser ( object ) :
   get_format_lazy = lazy ( get_format , six . text_type , list , tuple )
              for field , error_list in self . error_dict . items ( ) :
 class TranslatableFile ( object ) :
 pass
              return from_current_timezone ( value )
 return result
  def prepare_value ( self , value ) :
   def close ( self ) :
 return value . ljust ( int ( arg ) )
  for base in inspect . getmro ( new_class ) :
 self . widget . choices = self . choices
              base = sup_cls . media
    return saved_instances
  except StandardError as e :
 factor -= 1
  except UnicodeDecodeError :
 def fset ( instance , value , name = fset . __name__ ) :
                if not chunk [ : - rollback ] :
  filter_raw_string = r""" ^(?P<constant>%(constant)s)| ^(?P<var>[%(var_chars)s]+|%(num)s)|  (?:\s*%(filter_sep)s\s*      (?P<filter_name>\w+)          (?:%(arg_sep)s              (?:               (?P<constant_arg>%(constant)s)|               (?P<var_arg>[%(var_chars)s]+|%(num)s)              )          )?  )""" % {  'constant' : constant_string ,  'num' : r'[-+\.]?\d[\d\.e]*' ,  'var_chars' : "\w\." ,  'filter_sep' : re . escape ( FILTER_SEPARATOR ) ,  'arg_sep' : re . escape ( FILTER_ARGUMENT_SEPARATOR ) ,  }
  if options [ 'errlog' ] :
   def delete ( self , name ) :
          self . nodelist = nodelist
 def forms ( self ) :
          return "(%s %r)" % ( self . id , self . value )
   def resolve_context ( self , context ) :
   raise CommandError ( "Unknown serialization format: %s" % format )
          if not self . closed :
                  continue
   def is_checked ( self ) :
          return False
 _iterlists = "lists"
   def dst ( self , dt ) :
              daemonize = False
                          answer = "n"
 return re_newlines . sub ( '\n' , text )
              return list_ , False
   def is_ajax ( self ) :
 self . allow_empty_first_page = allow_empty_first_page
              self . message = message
      with open ( old_path , 'rb' ) as template_file :
                                  handler . new_file ( field_name , file_name ,  content_type , content_length ,  charset , content_type_extra )
   class BadSerializer ( object ) :
                      file_move_safe ( content . temporary_file_path ( ) , full_path )
 if isinstance ( data , bytes ) :
          daemon_kwargs [ 'out_log' ] = options [ 'outlog' ]
  from django . apps import apps
 space = " "
   def __repr__ ( self ) :
                           self . _changed_data . append ( name )
 meta = getattr ( form , 'Meta' , None )
  return True
 if value and not self . valid_value ( value ) :
          if self . verbosity >= 1 :
   def __repr__ ( self ) :
 return data
          new_class = ( super ( MediaDefiningClass , mcs )  . __new__ ( mcs , name , bases , attrs ) )
 try :
  def decorator ( klass ) :
          return super ( type ( dt ) , dt ) . strftime ( fmt )
 handler . name = name
 if isinstance ( unicode_value , six . text_type ) :
  import glob
    return False
   class Command ( BaseCommand ) :
      setattr ( Module_six_moves_urllib_response , attr . name , attr )
              value = field . clean ( value )
   def add_arguments ( self , parser ) :
  else :
 def reader ( self ) :
 from django . utils . _os import rmtree_errorhandler
 from __future__ import unicode_literals
   def as_ul ( self ) :
   optimizer = MigrationOptimizer ( )
                  for pythonrc in ( os . environ . get ( "PYTHONSTARTUP" ) , '~/.pythonrc.py' ) :
  return getattr ( _default , translation_function ) ( singular , plural , number )
          response [ 'ETag' ] = '"%s"' % hashlib . md5 ( response . content ) . hexdigest ( )
 self . _populated = False
  warnings . warn (  "django.utils.tzinfo will be removed in Django 1.9. "  "Use django.utils.timezone instead." ,  RemovedInDjango19Warning , stacklevel = 2 )
  def _text_words ( self , length , truncate ) :
    class TemplateDoesNotExist ( Exception ) :
          return iter ( self . file )
                      for line in sequence_sql :
    comma_separated_int_list_re = re . compile ( '^[\d,]+$' )
              self . _urlconf_module = self . urlconf_name
                          sub_match_dict = dict ( match . groupdict ( ) , ** self . default_kwargs )
          if o in opt_dict :
  except ImportError :
 from django . core . serializers . json import DjangoJSONEncoder
          s = s . decode ( 'utf-8' )
                   raise ViewDoesNotExist (  "Could not import '%s.%s'. View is not callable." %  ( mod_name , func_name ) )
          try :
 self . _expire_info . clear ( )
   sql . extend ( connection . creation . sql_for_pending_references ( model , no_style ( ) , pending_references ) )
 if isinstance ( value , six . string_types ) and value != ALL_FIELDS :
 errors . extend ( new_errors )
  return data
                      self . empty_block_tag ( token )
 if not url :
                  EventHandler . modified_code = FILE_MODIFIED
 objects_in_fixture = 0
 mode = stat . S_IMODE ( st . st_mode )
              return { "xmlns" : self . ns }
 default_error_messages = {  'invalid' : _ ( 'Enter a valid date.' ) ,  }
    def _add_local_translations ( self ) :
 self . validate_key ( key )
 return False
          return "<%s: %s>" % ( self . __class__ . __name__ , self )
    with open ( old_file_name , 'rb' ) as old_file :
    def runfastcgi ( argset = [ ] , ** kwargs ) :
                  mimetype = DEFAULT_ATTACHMENT_MIME_TYPE
 self . msguniq_options = self . msguniq_options [ : ] + [ '--no-location' ]
    @ register . filter ( is_safe = True )
          if message is not None :
   def entity_decl ( self , name , is_parameter_entity , value , base ,  sysid , pubid , notation_name ) :
          args = ( )
   if six . PY3 :
   for val in value :
 __unicode__ = new_method_proxy ( unicode )
   def __nonzero__ ( self ) :
   def as_ul ( self ) :
 self . field_name = field_name
                  raise
  else :
 import decimal
               if args :
  return force_text ( url )
          if hasattr ( self , 'error_dict' ) :
  return language [ : p ] . lower ( ) + '_' + language [ p + 1 : ] . upper ( )
 if p >= 0 :
 digits = "0123456789abcdefghijklmnopqrstuvwxyz"
      return _trans . check_for_language ( lang_code )
  self . _meta = META
  for name in dir ( models . signals ) :
 if threading :
  for root , dirs , files in os . walk ( template_dir ) :
  digits . insert ( - exponent , '.' )
  def __init__ ( self , required = True , widget = None , label = None , initial = None ,  help_text = '' , error_messages = None , show_hidden_initial = False ,  validators = [ ] , localize = False , label_suffix = None ) :
 self . auto_id = auto_id
  from django . core . management . base import AppCommand
      EscapeString = EscapeText
                  with open ( filename , 'wb' ) as outfile :
          if self . domain_regex . match ( domain_part ) :
  mail . send ( fail_silently = fail_silently )
 from django . utils . functional import LazyObject
 if not check_for_language ( lang ) :
          return "<%s: %r>" % ( self . __class__ . __name__ , self . var )
          return all ( w . is_hidden for w in self . widgets )
  del frame
 def dictsortreversed ( value , arg ) :
 graph = loader . graph
  if options . get ( 'liveserver' ) is not None :
  self . namespace = ':' . join ( self . namespaces )
   return property ( _media )
 validate_ipv4_address = RegexValidator ( ipv4_re , _ ( 'Enter a valid IPv4 address.' ) , 'invalid' )
  def add_item_elements ( self , handler , item ) :
                  current = settings . TEMPLATE_STRING_IF_INVALID
   def render ( self , context ) :
   if field . rel and isinstance ( field . rel , models . ManyToManyRel ) :
   class Iterator ( object ) :
   def get ( self , key , otherwise = None ) :
 return '\n' . join ( statements )
      compare = lambda self , a , b : a > b
 import sys
                  if field . rel . through . _meta . auto_created :
 hour , minute = divmod ( timezone , 60 )
                  if tag . lower ( ) != self . cdata_tag :
   else :
   return list ( zip ( * flatten_result ( result ) ) )
          stream_or_string = stream_or_string . decode ( 'utf-8' )
              self . cookies [ key ] [ 'max-age' ] = max_age
              return None
                          raise ValueError ( 'Unable to configure root '  'logger: %s' % e )
                  return bytes ( s )
  else :
  if self . data . hour > 12 :
 break
 def _cache ( self ) :
                      self . stdout . write ( "  %s:\n" % ( self . style . MIGRATE_LABEL ( writer . filename ) , ) )
    def validate_unique ( self ) :
   return value
  else :
                      form . save_m2m ( )
          dec_part = dec_part + ( '0' * ( decimal_pos - len ( dec_part ) ) )
  return value
   def open ( self ) :
 handler . addQuickElement ( "link" , self . feed [ 'link' ] )
  except AttributeError :
              raise ValueError (  "EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive, so only set "  "one of those settings to True." )
              if mime_encode :
 parts = parts [ : - 1 ]
   class LimitedStream ( object ) :
      config [ 'fmt' ] = config . pop ( 'format' )
from __future__ import unicode_literals
  from django . db . models import ForeignKey
          for node in self . nodelist_loop :
              args = [ 'msgattrib' ] + self . msgattrib_options + [ '-o' , pofile , pofile ]
 key += kwd_mark
 def is_hidden ( self ) :
   def write ( self , val ) :
 def __newobj__ ( cls , * args ) :
 assert match , 'unexpected call to parse_starttag()'
 from django . utils import formats , six
    @ register . filter ( is_safe = True )
 for func in self . response_fixes :
   for relobj in getattr ( obj , field . name ) . iterator ( ) :
  def fix ( match ) :
  elif self . name and os . path . exists ( self . name ) :
    if url :
                              try :
              media = media + field . widget . media
 if self . args :
     class TextNode ( Node ) :
               for middleware_method in self . _response_middleware :
    if top_errors :
 parser . add_option ( '--settings' ,  help = 'The Python path to a settings module, e.g. "myproject.settings.main". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.' )
  import hashlib
 self . app_name = app_name
              return data
                  validate_ipv4_address ( hextet )
 statements = sql_destroy_indexes ( app_config , self . style , connection )
          self . widgets = [ w ( ) if isinstance ( w , type ) else w for w in widgets ]
 for path in paths :
   if self . verbosity >= 1 :
          for d in self . dicts [ - 1 ] :
  except Resolver404 as e :
                  self . literal = mark_safe ( unescape_string_literal ( var ) )
 from django . core . management . sql import sql_destroy_indexes
                          errors . append ( field . error_messages [ 'incomplete' ] )
   while '<' in value and '>' in value :
   raise TemplateDoesNotExist ( template_name )
  except ( ValueError , TypeError , ValidationError ) :
    def __call__ ( self , value ) :
  else :
              file = tempfile . NamedTemporaryFile ( suffix = '.upload' ,  dir = settings . FILE_UPLOAD_TEMP_DIR )
       def __init__ ( self , text , subtype , charset ) :
 import sys
   @ deconstructible
  elif char in 'dj' :
                               oldroot = root
                  for plan_node in graph . forwards_plan ( node ) :
 def __init__ ( self , fields = ( ) , * args , ** kwargs ) :
 _meth_self = "__self__"
 return ''
      builtins . append ( import_library ( module ) )
                  input_format = get_format ( 'DATE_INPUT_FORMATS' ) [ 0 ]
    def mark_for_escaping ( s ) :
   module = import_module ( module_path )
          self . coerce = kwargs . pop ( 'coerce' , lambda val : val )
                      for name in handlers :
   def __deepcopy__ ( self , memo ) :
          if self . callback ( record ) :
  from collections import OrderedDict
    return msg_count
 if result is not None :
 cmatch = constant_re . match ( parts [ 0 ] )
      def __init__ ( self , var , name , nodelist , extra_context = None ) :
              klass = load_command_class ( app_name , subcommand )
  escapejs = allow_lazy ( escapejs , six . text_type )
   def as_text ( self , attrs = None , ** kwargs ) :
  elif isinstance ( value , datetime . datetime ) :
          msg = ( "The use of the language code '%s' is deprecated. "  "Please use the '%s' translation instead." )
                              return smart_text ( field . rel . to . _meta . pk . to_python ( value ) )
  if now and not isinstance ( now , datetime . datetime ) :
  return True
 self . xml . endElement ( "django-objects" )
 FormSet = formset_factory ( form , formset , extra = extra , min_num = min_num , max_num = max_num ,  can_order = can_order , can_delete = can_delete ,  validate_min = validate_min , validate_max = validate_max )
  if not isinstance ( s , six . string_types ) :
      return None
 return obj
 return nodelist_true_output or self . nodelist_true . render ( context )
          from django . utils . html import strip_spaces_between_tags
   def read ( self , size = None ) :
      help = "Squashes an existing set of migrations (from first until specified) into a single new one."
 try :
              return data . getlist ( name )
                  if old_attr is None :
          self . vars = variables
 super ( Command , self ) . __init__ ( )
 import warnings
                      command = token . contents . split ( ) [ 0 ]
                              obj . save ( using = self . using )
          warnings . warn (  "django.utils.tzinfo.LocalTimezone will be removed in Django 1.9. "  "Use django.utils.timezone.get_default_timezone instead." ,  RemovedInDjango19Warning )
                  if bf_errors :
              self . _start_relational_field ( field )
                  exclude . append ( f . name )
  from django . conf import settings
  return int ( timeout )
                        from django . db import connections , DEFAULT_DB_ALIAS
                      lineno = lineno + self . __starttag_text . count ( "\n" )
      if response is None :
  return bool ( initial ) != bool ( data )
 self . children = [ obj , data ]
   class FilterExpression ( object ) :
 if len ( bits ) < 2 :
              value = signing . get_cookie_signer ( salt = key + salt ) . unsign (  cookie_value , max_age = max_age )
              deactivate ( )
 if language not in _translations :
               _localtime = LocalTimezone ( )
 while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) :
                      rel_model = field . rel . to
          self . stream . write ( message . message ( ) . as_bytes ( ) + b'\n' )
   def get_dump_object ( self , obj ) :
      pass
   def exit_command ( self ) :
          if value :
   def flatten ( self ) :
                field_name = field_node . getAttribute ( "name" )
   def is_protected_type ( obj ) :
 from django . utils . module_loading import import_string
 from django . db import connections , transaction
 link_target_attribute_re = re . compile ( r'(<a [^>]*?)target=[^\s>]+' )
   if ':' not in ip_str :
                      natural = value . natural_key ( )
 got_request_exception = Signal ( providing_args = [ "request" ] )
 parts . append ( decimals )
 if self_closing or tagname in html4_singlets :
 duplicate . render_context = copy ( self . render_context )
      pass
          return tuple ( bits )
   if is_templatized :
              m = re . match ( naiveip_re , options [ 'addrport' ] )
 if illegal_formatting :
  def nud ( self , parser ) :
   def __bool__ ( self ) :
          return ""
  else :
              sys . stdout = NullDevice ( )
          raise NotImplementedError ( 'subclasses of Origin must provide a reload() method' )
  update_wrapper ( _wrapper , func )
  except ValueError :
 self . content_type_extra = content_type_extra
 msg += '\n%s:\n%s\n' % ( group_name , formatted )
          value = super ( TypedChoiceField , self ) . clean ( value )
    @ register . tag ( 'include' )
    def smart_bytes ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :
                  attrs [ 'max' ] = self . max_value
 self . resolver_match = None
  def __init__ ( self , takes_context , args , kwargs ) :
                  sys . stdout . write ( self . main_help_text ( ) + '\n' )
   def write_message ( self , message ) :
          return { }
          if escaped :
 import json
 if changes :
 return mark_safe ( format_string . format ( * args_safe , ** kwargs_safe ) )
                 memo [ id ( self ) ] = self
 for app_config in apps . get_app_configs ( ) :
 data_value = field . widget . value_from_datadict ( self . data , self . files , prefixed_name )
      rendering_attrs = SimpleTemplateResponse . rendering_attrs + [ '_request' , '_current_app' ]
 import sys
    if token . contents == 'else' :
          warnings . warn (  "SortedDict is deprecated and will be removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2  )
              package_path = package . __path__
      def sort_dependencies ( app_list ) :
  return ( ( not url_info . netloc or url_info . netloc == host ) and  ( not url_info . scheme or url_info . scheme in [ 'http' , 'https' ] ) )
   def apply_response_fixes ( self , request , response ) :
 for name in filters :
                  last_row = output [ - 1 ]
   def render ( self , context ) :
      runfastcgi ( sys . argv [ 1 : ] )
      pad = b'=' * ( - len ( s ) % 4 )
   if p == 0 :
 from django . utils . encoding import force_text
                  k = item [ 0 ]
              del self . _cache [ key ]
 from threading import Lock
                         if field . error_messages [ 'incomplete' ] not in errors :
 syear = "%04d" % ( dt . year , )
  __author__ = "Benjamin Peterson <benjamin@python.org>"
 try :
 def changed_data ( self ) :
 deprecation_warning = renamed_method [ 2 ]
  else :
  return rv
 prefix = self . add_prefix ( fieldname )
 self . active_readers += t
   block_context . add_blocks ( self . blocks )
          paras = [ '<p>%s</p>' % escape ( p ) . replace ( '\n' , '<br />' ) for p in paras ]
  if cache_choices is not None :
              questioner = MigrationQuestioner ( defaults = { 'ask_merge' : True } )
    return field_type , field_params , field_notes
 if server_port != ( '443' if self . is_secure ( ) else '80' ) :
   if locales :
  elif g [ 0 ] == "'" :
  from django . utils import six
  from django . conf import settings
          if to_lower :
                           context . pop ( )
                  pass
    else :
               try :
 compatibility = 'compatibility'
           return timezone . localize ( value , is_dst = None )
  s2 = time . strftime ( fmt , ( year + 28 , ) + timetuple [ 1 : ] )
              self . _mark_post_parse_error ( )
 self . buffer = b''
   yield ''
   def __delitem__ ( self , key ) :
  return self . as_widget ( )
   regex = property ( _get_regex , _set_regex )
 if exit_code != 3 :
  return settings . TEMPLATE_STRING_IF_INVALID
 try :
 from django . core . mail . utils import DNS_NAME
 from django . core . management . sql import sql_flush
 src = force_text ( src , settings . FILE_CHARSET )
  if sys . platform . startswith ( "java" ) :
   def has_key ( self , key ) :
 def __init__ ( self , token , parser ) :
   self . check ( app_configs = app_configs , tags = tags , display_num_errors = True )
 from django . conf import settings
 from django . utils . encoding import python_2_unicode_compatible
          from django . conf import settings
  _tc = http_cookies . SimpleCookie ( )
          return s
  self . _container = [ ]
              yield self [ key ]
   def _iteritems ( self ) :
 del logging . _handlerList [ : ]
  _func_closure = "__closure__"
 return SsiNode ( filepath , parsed )
              self . addr = '::1' if self . use_ipv6 else '127.0.0.1'
   return fk
                  output . append ( "%s = %s" % ( key , user_settings [ key ] ) )
          value = dict . __getitem__ ( self , key )
 continue
  super ( Textarea , self ) . __init__ ( default_attrs )
 return '\n' . join ( statements )
 if not chunk_size :
              domains = ( 'django' , )
              if callable ( name ) :
              warnings . warn ( "``--natural`` is deprecated; use ``--natural-foreign`` instead." ,  RemovedInDjango19Warning )
 return six . iteritems ( super ( MultiValueDict , self ) )
 if cache is None :
              return [ ]
 return result
    raise CommandError ( "couldn't handle %s template %s." %  ( self . app_or_project , template ) )
              words = words [ : length ]
  if has_old_option :
  handler . addQuickElement ( "guid" , item [ 'unique_id' ] , guid_attrs )
 if not name :
  if not url_fields [ 1 ] :
   def recipients ( self ) :
 if not bytes :
                  raise CommandError ( "%r is not a valid port number." % self . port )
    def is_writable ( path ) :
          file = file_or_path
              return loader . get_template ( template )
                            errors . append ( self . get_unique_error_message ( unique_check ) )
                  return mark_safe ( func ( * args , ** kwargs ) )
 args = ''
  if not context_instance :
   self . _post_parse_error = False
 apps = { }
              self . validators . append ( validators . MinValueValidator ( min_value ) )
 __imul__ = complain
 super ( ComboField , self ) . clean ( value )
     class ImmutableList ( tuple ) :
   self . extra_context = extra_context or { }
          ch , escaped = next ( input_iter )
  from django . apps import apps
 parser . add_argument ( '-v' , '--verbosity' , action = 'store' , dest = 'verbosity' , default = '1' ,  type = int , choices = [ 0 , 1 , 2 , 3 ] ,  help = 'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output' )
   def next_page_number ( self ) :
  else :
  elif isinstance ( value , datetime . datetime ) :
 super ( TypedMultipleChoiceField , self ) . __init__ ( * args , ** kwargs )
 self . orphans = int ( orphans )
              sys . exit ( bool ( failures ) )
               param , value = list ( six . iteritems ( kwarg ) ) [ 0 ]
 filters . append ( ( filter_func , args ) )
 LOCK_EX = 0x2
    for attr , value in base . __dict__ . items ( ) :
 pflen = len ( prefixed )
 return '' . join ( char2number . get ( c , c ) for c in phone . lower ( ) )
          return 0
   try :
      class LabelCommand ( BaseCommand ) :
       def get_standard_processors ( ) :
 def urlconf_module ( self ) :
 WARNING = 30
          try :
          items = _iteritems
    def rmtree_errorhandler ( func , path , exc_info ) :
  from django . apps import apps
 config [ '()' ] = factory
                      self . can_read . release ( )
  return self . field . prepare_value ( data )
                  return True
    def filepath_to_uri ( path ) :
 if match :
 from django . core . management . color import color_style
              raise TemplateEncodingError ( "Templates can only be constructed "  "from unicode or UTF-8 strings." )
                  msg . attach ( body_msg )
              return ''
              errors . update ( kwargs [ 'error_messages' ] )
              raise ValueError ( "Invalid header: %r" % line )
 pass
 for name in loggers :
 if kwargs :
 def lower ( value ) :
 for ip in ( self . _ipython , self . _ipython_pre_100 , self . _ipython_pre_011 ) :
          if self . save_as_new :
  if self . _cull_frequency == 0 :
  self . error_list . extend ( message . error_list )
  self . environ = environ
 try :
          for arg in list ( args ) + list ( six . itervalues ( kwargs ) ) :
   def hidden_fields ( self ) :
 def title ( value ) :
 def first ( value ) :
   DEFAULT_MAX_NUM = 1000
 import datetime
                  pass
 for field in concrete_model . _meta . local_fields :
 parts . append ( "(?P<%s>%s)" % ( groupid , tok . regex ) )
 def safe ( value ) :
 def url_patterns ( self ) :
  for location in format_locations :
          if name == "_wrapped" :
  if isinstance ( s , ( six . text_type , Promise ) ) :
  from __future__ import unicode_literals
 from django . db . migrations . autodetector import MigrationAutodetector
 fp = six . BytesIO ( )
          if name not in data :
  if response . has_header ( 'Vary' ) :
                  with io . open ( orig_file , 'r' , encoding = settings . FILE_CHARSET ) as fp :
  for part in singular :
 targets = set ( '.' . join ( ( fixture_name , suffix ) ) for suffix in suffixes )
 self . alternatives = alternatives or [ ]
     try :
  self . mod = new_mod
     class TemplateTagNode ( Node ) :
   def H ( self ) :
 x = int ( x // len ( to_digits ) )
 if index_sql :
          return timeuntil ( value , arg )
              if calendar . isleap ( self . data . year ) :
          if safe and not isinstance ( data , dict ) :
    class TemporaryUploadedFile ( UploadedFile ) :
 if exp is None or exp > time . time ( ) :
      def __init__ ( self , context , * args , ** kwargs ) :
 self . day_none_value = self . none_value
 content_subtype = 'plain'
 if match :
              return
  elif template_tuple is None :
                  self . _callback_strs . add ( pattern . _callback_str )
          try :
          return False
 for f in filters :
  else :
  except ( KeyError , AttributeError ) as exc :
                  raise TemplateSyntaxError ( "Searching for value. Unexpected "  "end of string in column %d: %s" %  ( i , subject ) )
      help = "Creates the tables needed to use the SQL cache backend."
 if tzinfo == 'Z' :
          secret = settings . SECRET_KEY
                          for sql in sql_list :
              self . add_filters ( result , filters )
 from django . utils . safestring import mark_safe , SafeData
   def handle ( self , * app_labels , ** options ) :
 converter = self . value_converters . get ( prefix , None )
 if os . path . exists ( potfile ) :
 filter_expr = parser . compile_filter ( "var|%s" % ( rest ) )
 self . length = length
 remaining_bits = bits [ 1 : ]
   def add_filters ( self , filterer , filters ) :
from __future__ import unicode_literals
   def get_internal_wsgi_application ( ) :
  else :
              return self . STDOFFSET
  except ImportError :
  else :
                  os . remove ( tmp_path )
          fks_to_parent = [ f for f in opts . fields if f . name == fk_name ]
              self . stream = six . StringIO ( stream_or_string )
 from lib2to3 . pgen2 import token
 sublist = ''
      if path is None :
 raise CommandError ( "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'" % name_str )
  return numberformat . format (  value ,  get_format ( 'DECIMAL_SEPARATOR' , lang , use_l10n = use_l10n ) ,  decimal_pos ,  get_format ( 'NUMBER_GROUPING' , lang , use_l10n = use_l10n ) ,  get_format ( 'THOUSAND_SEPARATOR' , lang , use_l10n = use_l10n ) ,  force_grouping = force_grouping  )
  if config [ 'version' ] != 1 :
    def parse_http_date ( date ) :
 link_next [ PREV ] = link_prev
              usage = sorted ( get_commands ( ) . keys ( ) )
  elif options [ 'all' ] :
 while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) :
 if self . is_checked ( ) :
 return '%06d' % self . data . microsecond
 from __future__ import unicode_literals
 from django . utils . _os import safe_join
          for item in self . items :
                      cls . __unicode__ = cls . __text_cast
 field = self . fields [ fieldname ]
    def delete ( self , key , version = None ) :
   def handle ( self , ** options ) :
  if out_log :
    def has_key ( self , key ) :
                          yield line
          return self . value . resolve ( context , ignore_failures = True )
 all_locales = map ( os . path . basename , locale_dirs )
 result = logging . Formatter ( fmt , dfmt )
 new_args . append ( args [ : ] + i_args )
                  digit = x % len ( to_digits )
  else :
              qs = queryset . filter ( ** { self . fk . name : self . instance } )
                  response = debug . technical_404_response ( request , e )
                  return Media ( definition )
     self . loaded_object_count += loaded_objects_in_fixture
      def import_module ( name , package = None ) :
 link [ PREV ] = last
 self . META = { }
          if not hasattr ( self , '_object_dict' ) :
 result_args = [ [ ] ]
          return iter ( self . keyOrder )
  if isinstance ( message , ValidationError ) :
 connection = connections [ options . get ( 'database' , DEFAULT_DB_ALIAS ) ]
              if isinstance ( arg , Promise ) :
 from decimal import Decimal , DecimalException
  except ImportError :
   def make_aware ( value , timezone ) :
 setattr ( base , new_method_name , old_method )
              digits . append ( '-' )
              raise TemplateSyntaxError ( "widthratio final argument must be a number" )
                  continue
 def templatetag ( parser , token ) :
 option = '--testrunner='
          idstring = '.' + idstring
                if tok . startswith ( "'" ) :
  return self . __cast ( ) % rhs
          if path . startswith ( ( 'http://' , 'https://' , '/' ) ) :
    dictConfigClass = DictConfigurator
 conditions_nodelists . append ( ( condition , nodelist ) )
          _supported = OrderedDict ( settings . LANGUAGES )
                  if "'format'" not in str ( te ) :
              handler . addQuickElement ( "category" , "" , { "term" : cat } )
 from subprocess import PIPE , Popen
 base = base [ : - 4 ]
                  output . append ( format_html ( '<optgroup label="{0}">' , force_text ( option_value ) ) )
          return value
  def __init__ ( self , attrs = None , choices = ( ) ) :
              try :
              return '0'
              activate ( self . timezone )
 return "(" + " " . join ( out ) + ")"
     self . instance = construct_instance ( self , self . instance , opts . fields , construct_instance_exclude )
 charset = content_type_extra . get ( 'charset' )
 return msgid
     @ deconstructible
     class Select ( Widget ) :
   @ classmethod
  except ImportError :
 return RelatedObject ( cls . fk . rel . to , cls . model , cls . fk ) . get_accessor_name ( ) . replace ( '+' , '' )
 if not value :
   self . invoked_for_django = False
          return self . META . get ( 'HTTP_X_REQUESTED_WITH' ) == 'XMLHttpRequest'
  file_move_safe ( tmp_path , fname , allow_overwrite = True )
                  raise
          os . symlink ( original_path , symlink_path )
              if self . verbosity >= 1 :
   def subwidgets ( self , name , value , attrs = None , choices = ( ) ) :
  try :
  else :
 import re
          return "<%s: %s>" % ( self . __class__ . __name__ ,  super ( MultiValueDict , self ) . __repr__ ( ) )
                  six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc_info ( ) [ 2 ] )
  elif not isinstance ( value , ConvertingTuple ) and isinstance ( value , tuple ) :
              pass
 super ( Command , self ) . handle ( ** options )
 if attrs is None :
                      if getattr ( current , 'do_not_call_in_templates' , False ) :
                           continue
 self . load_initial_data = options . get ( 'load_initial_data' )
 compile_func . __doc__ = func . __doc__
      pass
 if min_num is None :
   self . save_m2m = save_m2m
                      extracted = self . _archive . extractfile ( member )
  if isinstance ( value , datetime . time ) :
 for j in xrange ( int ( iterations ) ) :
          if hasattr ( self . file , 'size' ) :
                  self . __prepare_class__ ( )
 import stat
           unicode_value = force_text ( value , strings_only = True )
 stamp = _time . mktime ( tt )
   test_runner = TestRunner ( ** options )
   class OVERLAPPED ( Structure ) :
  elif ch == '(' :
 if bytes_read > rollback :
        def parse_cookie ( cookie ) :
      def exists ( self , name ) :
              _active . value = self . old_timezone
 if converter :
          cleaned_data = form . cleaned_data
          self . config = ConvertingDict ( config )
  else :
 from django . utils . timezone import get_default_timezone , is_aware , is_naive
    model_dependencies . reverse ( )
               self . _initialize_handlers ( )
  for part in singular :
 result = [ ]
                      if not self . _css . get ( medium ) or path not in self . _css [ medium ] :
  if result is not None :
 from django . core . management . utils import find_command , popen_wrapper
       for app_config in apps . get_app_configs ( ) :
 def spaceless ( parser , token ) :
 from django . core . files import temp as tempfile
   def _proxy_method ( self , * args , ** kwargs ) :
          super ( BaseInlineFormSet , self ) . add_fields ( form , index )
 self . prefix = prefix or self . get_default_prefix ( )
  elif char == '\\' :
 if settings . TEMPLATE_DEBUG :
              self . _update_errors ( e )
 from django . utils . encoding import force_str , force_text
 quant . append ( ch )
 if self . lookups is not None :
 if leading :
  from django . utils . deprecation import RemovedInDjango19Warning
    from django . conf import settings
              table_names = connection . introspection . table_names ( cursor )
    def pgettext ( context , message ) :
              yield 'month'
                  guts = re . sub ( r"\\.|." , escape_quotes , tok [ 1 : - 1 ] )
  return msg
              raise CommandError ( "Command doesn't accept any arguments" )
  buffer_types = ( bytearray , memoryview )
 input_formats = formats . get_format_lazy ( 'DATETIME_INPUT_FORMATS' )
     if with_base_fields :
  if hasattr ( mw_instance , 'process_response' ) :
  import os
 from django . utils . six . moves import map
   def render ( self , context ) :
              return '0'
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
 raise NotImplementedError ( 'subclasses of Storage must provide an exists() method' )
   def pop ( self ) :
              output . insert ( 0 , error_row % force_text ( top_errors ) )
   def __getitem__ ( self , key ) :
  patch_cache_control ( response , max_age = cache_timeout )
 if opts . model is None :
          return time_str + 'Z'
 new_path = path . join ( top_dir , relative_dir ,  filename . replace ( base_name , name ) )
 return value and value [ 0 ] . upper ( ) + value [ 1 : ]
  except KeyError :
 def is_rendered ( self ) :
   class Command ( AppCommand ) :
              return
   def update_error_dict ( self , error_dict ) :
                      self . _deleted_form_indexes . append ( i )
              return self . empty_value
              output = self . _leftover
                  self . close ( )
 if not hasattr ( c , '__call__' ) and hasattr ( types , 'ClassType' ) and type ( c ) != types . ClassType :
  kwargs [ key ] = parser . compile_filter ( value )
              return list ( error ) [ 0 ]
 kwargs = { }
          return ''
              sys . stdout . write ( self . main_help_text ( ) + '\n' )
    if item [ "author_name" ] and item [ "author_email" ] :
              self . add_error ( None , e )
      regex = ''
  self . startElement ( name , attrs )
  from django . apps import apps
              activate ( self . old_language )
 self . render_value = render_value
 secret = force_bytes ( secret )
      from django . conf . locale import LANG_INFO
 security_logger . error (  force_text ( e ) ,  extra = {  'status_code' : 400 ,  'request' : request  } )
          raise TemplateSyntaxError ( "%r takes two arguments" % bits [ 0 ] )
   def complain ( self , * wargs , ** kwargs ) :
              attr_list = termios . tcgetattr ( fd )
  except ( OSError , IOError ) :
 return value
      help = ( "Runs the command-line client for specified database, or the "  "default database if none is provided." )
 attrs += [ attr . name for attr in self . _moved_attributes ]
   def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
 remaining_bits = bits [ 2 : ]
 self . can_read = threading . Semaphore ( 0 )
          if self . _changed_data is None :
  if self . use_argparse :
  loader = MigrationLoader ( connection )
 return True
                          continue
  if ipv4_unpacked :
  except AttributeError :
                      dirnames . remove ( dirname )
     except OSError as e :
 time_str = date . strftime ( '%s, %%d %s %%Y %%H:%%M:%%S ' % ( dow , month ) )
          parser . add_argument ( 'args' , metavar = 'app_label' , nargs = '*' ,  help = 'Specify the app label(s) to create migrations for.' )
      return latest_date or datetime . datetime . now ( )
          self . file . write ( raw_data )
    if ns_pattern :
              settings . SITE_ID
                          namespaces [ namespace ] = ( p_pattern + prefix , sub_pattern )
 if not value :
              self . stdout . write ( "Cache table '%s' created." % tablename )
   @ property
          return 'Raw content'
  register = Library ( )
              self . _object_dict = dict ( ( o . pk , o ) for o in self . get_queryset ( ) )
 return date ( datetime . now ( tz = tzinfo ) , self . format_string )
                  self . timezone = obj . tzinfo
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
  except AttributeError :
      def __init__ ( self , * args , ** kwargs ) :
                  self . stdout . write ( "%s\n" % line )
              name = config . get ( 'name' , '' )
              match = kwarg_re . match ( bits [ 0 ] )
  else :
 def __init__ ( self ) :
 return '%02d' % self . G ( )
          if "=" in x :
  matches = True
  try :
 insert = complain
              deactivate_all ( )
  for alternative in self . alternatives :
 opts = model . _meta
 from django . utils . encoding import force_text , python_2_unicode_compatible
          from importlib import find_loader as importlib_find
  return value
  return result
 return data
          return self
 _func_code = "__code__"
 from yaml import CSafeDumper as SafeDumper
 import time
 e . django_template_source = source
 import os
 if _supported is None :
      @ register . filter ( expects_localtime = True , is_safe = False )
                      raise CommandError ( "%s already exists, overlaying a "  "project or app into an existing "  "directory won't replace conflicting "  "files" % new_path )
                  obj = self . var . resolve ( context )
   return version
      if urlconf is None :
    @ python_2_unicode_compatible
 if ch :
 def __init__ ( self , flo , chunk_size = 64 * 1024 ) :
   except UnicodeEncodeError :
          with self . mutex :
 from django . utils . encoding import smart_text
              return initial
  data [ field . attname ] = value
 def __init__ ( self , attrs = None , date_format = None , time_format = None ) :
      if isinstance ( loader , ( tuple , list ) ) :
  escape = allow_lazy ( escape , six . text_type )
 sys . exit ( 1 )
  urlunquote_plus = allow_lazy ( urlunquote_plus , six . text_type )
    if hasattr ( hashlib , "pbkdf2_hmac" ) :
    function_name = ( name or  getattr ( func , '_decorated_function' , func ) . __name__ )
      import stat
 code = 'min_length'
              self . stream = None
  url = quote ( url , safe = b'!*\'();:@&=+$,/?#[]~' )
  javascript_quote = allow_lazy ( javascript_quote , six . text_type )
                      self . set_cdata_mode ( tag )
  else :
          self . _container . append ( self . make_bytes ( content ) )
   else :
   if isinstance ( elt , ( Choice , NonCapture ) ) :
              cached = _format_cache [ cache_key ]
   def __exit__ ( self , exc_type , exc_value , traceback ) :
         from datetime import date as real_date , datetime as real_datetime
                      if translators_comment_start is not None and lineno >= translators_comment_start :
                  error_msg += " Got this from the '%s' variable." % self . parent_name . token
   def render ( self ) :
from importlib import import_module
 if not settings . configured :
  final_attrs = self . build_attrs ( attrs , name = name )
   def _mark_post_parse_error ( self ) :
              self . file . __enter__ ( )
   if self . no_obsolete :
 break
  except LookupError :
  except NameError :
                          raise TemplateSyntaxError (  "'%s' received too many positional arguments" %  name )
 import io
                      attrs_plus [ 'id' ] += '_{0}' . format ( i )
  if value is not result :
 self . args = args
              usage = [  "" ,  "Type '%s help <subcommand>' for help on a specific subcommand." % self . prog_name ,  "" ,  "Available subcommands:" ,  ]
 if kwargs [ 'setting' ] in ( 'LANGUAGES' , 'LANGUAGE_CODE' ) :
  from io import BytesIO
   self . write_migration_files ( changes )
          escaper = lambda x : x
          super ( DebugLexer , self ) . __init__ ( template_string , origin )
 FormSet . model = model
  def __new__ ( cls , name , bases , attrs ) :
  for path in all_locale_paths ( ) :
   @ property
 def emit_post_migrate ( verbosity , interactive , database ) :
                              f = os . path . join ( root , f )
              if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
 parser . add_argument ( '--no-initial-data' , action = 'store_false' , dest = 'load_initial_data' , default = True ,  help = 'Tells Django not to load any initial data after database synchronization.' )
                      namespaces [ pattern . namespace ] = ( p_pattern , pattern )
 from __future__ import unicode_literals
                  self . registered_checks . append ( check )
              if not self . close_called :
      import threading
    finally :
   def _set_queryset ( self , queryset ) :
              weight += 1
 if status is not None :
 pass
              name = self . _pk_field . name
 output = [ ]
 import os
 return filter_func
  return TemplateTagNode ( tag )
                      self . stdout . write ( "\nCreated new merge migration %s" % writer . path )
          raise TemplateSyntaxError ( "next-to-last argument to 'regroup' tag must"  " be 'as'" )
 kwargs = { }
   try :
 from threading import RLock
   return otherwise
  for attr in self . child_nodelists :
  return value
          return self . __class__ ( [  ( k , v [ : ] )  for k , v in self . lists ( )  ] )
          value = force_str ( value )
 parser . add_argument ( '--liveserver' ,  action = 'store' , dest = 'liveserver' , default = None ,  help = 'Overrides the default address where the live server (used '  'with LiveServerTestCase) is expected to run from. The '  'default value is localhost:8081.' ) ,
 from django . db import DEFAULT_DB_ALIAS
  result = 0
              raise TypeError ( 'In order to allow non-dict objects to be '  'serialized set the safe parameter to False' )
              return six . unichr ( html_entities . name2codepoint [ text ] )
 return force_text ( self . prepare_value ( initial_value ) ) != force_text ( data_value )
              exc_info = record . exc_info
  return new_value
 try :
              kwargs [ 'error_messages' ] = error_messages [ f . name ]
  if errors :
     def Deserializer ( object_list , ** options ) :
 try :
  return force_bytes ( s , encoding , strings_only , errors )
  handler . endElement ( "author" )
 with open ( writer . path , "wb" ) as fh :
    @ python_2_unicode_compatible
   class ManagementForm ( Form ) :
  self . stdout . write ( (  "%(started_at)s\n"  "Django version %(version)s, using settings %(settings)r\n"  "Starting development server at http://%(addr)s:%(port)s/\n"  "Quit the server with %(quit_command)s.\n"  ) % {  "started_at" : now ,  "version" : self . get_version ( ) ,  "settings" : settings . SETTINGS_MODULE ,  "addr" : '[%s]' % self . addr if self . _raw_ipv6 else self . addr ,  "port" : self . port ,  "quit_command" : quit_command ,  } )
  except AttributeError :
    def parse_accept_lang_header ( lang_string ) :
              object_data . update ( initial )
          return None
 self . localized_fields = getattr ( options , 'localized_fields' , None )
  else :
 return func ( * resolved_args , ** resolved_kwargs )
  return form
   def add_item ( self , title , link , description , author_email = None ,  author_name = None , author_link = None , pubdate = None , comments = None ,  unique_id = None , unique_id_is_permalink = None , enclosure = None ,  categories = ( ) , item_copyright = None , ttl = None , updateddate = None , ** kwargs ) :
              if len ( app_labels ) == 1 :
              raise
 if self . verbosity >= 2 :
   return False
 old_method = base . __dict__ . get ( old_method_name )
                  try :
 from django . template import Template , Context
    def end_object ( self , obj ) :
              return
                      biggest_number = max ( [ x for x in numbers if x is not None ] )
     if '.' in ip_str . split ( ':' ) [ - 1 ] :
  if not model . _meta . proxy and router . allow_migrate ( using , model ) :
  self . _boundary = boundary
                      new_attr = old_attr
 from django . core . cache import caches
  if settings . TEMPLATE_DEBUG and origin is None :
   class Command ( BaseCommand ) :
   def build_attrs ( self , extra_attrs = None , ** kwargs ) :
  return split
                      for f in files :
      if not _serializers :
          if value in self . empty_values :
    function_name = ( name or  getattr ( func , '_decorated_function' , func ) . __name__ )
   as_form = False
                      middle = middle [ : - len ( closing ) ]
                      initial = self . initial . get ( name , field . initial )
   except ImportError :
  final_attrs = self . build_attrs ( attrs , type = self . input_type , name = name )
 return get_internal_wsgi_application ( )
   repo_dir = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) )
  else :
 reason_phrase = None
                          raise TemplateSyntaxError ( "Searching for value. "  "Unexpected end of string in column %d: %s" %  ( i , subject ) )
 pass
  match = kwarg_re . match ( bits [ 0 ] )
   if not inhibit_post_migrate :
   self . _regex_dict [ language_code ] = compiled_regex
     field_desc = '%s = %s%s' % (  att_name ,   '' if '.' in field_type else 'models.' ,  field_type ,  )
              return None
  hidden_fields . append ( six . text_type ( bf ) )
 import codecs
          post_sql_fields = [ f for f in opts . local_fields if hasattr ( f , 'post_create_sql' ) ]
  except ImportError :
  else :
 self . _namespace_dict [ language_code ] = namespaces
 if primary_keys :
 self . _expire_info = _expire_info . setdefault ( name , { } )
 try :
   def __bytes_cast ( self ) :
              package_name = package . __name__
 self . value = value
   def has_bom ( fn ) :
   def clear ( self ) :
          if key not in self :
 from django . utils . _os import upath
  else :
 try :
 _active . value = gettext_module . NullTranslations ( )
               ttl = force_text ( ttl )
    class FileUploadHandler ( object ) :
           pid = 1
 os . write ( fd , current_chunk )
  color_names = ( 'black' , 'red' , 'green' , 'yellow' , 'blue' , 'magenta' , 'cyan' , 'white' )
              extend = getattr ( definition , 'extend' , True )
          return False
 return iter ( getattr ( d , _itervalues ) ( ** kw ) )
    class _LazyDescr ( object ) :
              value = getattr ( obj , field . get_attname ( ) )
          super ( MultiValueDict , self ) . __setitem__ ( key , [ value ] )
   form = modelform_factory ( model , form = form , fields = fields , exclude = exclude ,  formfield_callback = formfield_callback ,  widgets = widgets , localized_fields = localized_fields ,  labels = labels , help_texts = help_texts , error_messages = error_messages )
              statements . append ( " " . join ( statement ) )
    if PY3 :
          builtins = { 'True' : True , 'False' : False , 'None' : None }
 kwarg_format = match and match . group ( 1 )
  try :
  else :
   self . fields = fields
 self . xml . characters ( smart_text ( key_value ) )
 TOKEN_COMMENT = 3
                   doublecolon_start = index
    return self . _changed_data
 with self . _lock . reader ( ) :
     class ExtendsNode ( Node ) :
    return LoadNode ( )
  def add_arguments ( self , parser ) :
  time_re = re . compile (  r'(?P<hour>\d{1,2}):(?P<minute>\d{1,2})'  r'(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?'  )
 namespaces = { }
  try :
  if fields is not None and f . name not in fields :
                          self . _close_files ( )
                  message = message . error_dict
  except Exception :
              yield self [ key ]
  Iterator = object
 from django . utils import six
    return ''
          return "<%s: %s>" % ( self . __class__ . __name__ , self or "None" )
   def slugify ( value ) :
                      indexes = { }
      from django . utils . six . moves import _thread as thread
                  self . add_handlers ( logger , handlers )
          tpl = "DTDForbidden(name='{}', system_id={!r}, public_id={!r})"
              if not package :
 from django . core . management import call_command
                  dirs . append ( app_dir )
 i = self . pointer
 if self . feed [ 'feed_url' ] is not None :
              return repr ( dict ( self ) )
  if arg is None :
 factor = 0
  else :
  known_models . add ( model )
     def get_valid_name ( self , name ) :
    def flatten_result ( source ) :
                  import readline
          if encoding == 'utf-8' :
          base64d = b'.' + base64d
                  checkbox_name = self . clear_checkbox_name ( name )
              raise ValueError ( "Unsupported version: %s" % config [ 'version' ] )
                      yield line
  return self . get_connection ( fail_silently ) . send_messages ( [ self ] )
  self . _stream = LimitedStream ( self . environ [ 'wsgi.input' ] , content_length )
              raise TypeError (  "Variable must be a string or number, got %s" % type ( var ) )
              raise TemplateSyntaxError ( "Second (optional) argument to %s tag"  " must be 'parsed'" % bits [ 0 ] )
                  value = value [ 1 : - 1 ]
          for condition , nodelist in self . conditions_nodelists :
 return self . resolve ( value )
 def pprint ( value ) :
 assert rawdata [ i : i + 2 ] == "</" , "unexpected call to parse_endtag"
  output_transaction = True
  root = max ( roots )
 if html_message :
   self . _current_app = current_app
 if endpos < 0 :
 return tf . format ( format_string )
          if instance is None :
          fs_encoding = sys . getfilesystemencoding ( ) or sys . getdefaultencoding ( )
  def to_python ( self , value ) :
     def load_command_class ( app_name , name ) :
 def __init__ ( self , name , content , content_type = 'text/plain' ) :
 return '%02d' % self . data . minute
  import datetime
              return self . create_var ( token )
 if extra_attrs :
  if i >= self . initial_form_count ( ) and not form . has_changed ( ) :
      pass
  except Exception :
              header = header . upper ( ) . replace ( '-' , '_' )
   def value_from_datadict ( self , data , files , name ) :
      allow_multiple_selected = True
 self . template_cache . clear ( )
   def _get_scheme ( self ) :
               if not re . search ( r'^[_a-zA-Z]' , name ) :
   def get_host ( self ) :
    default_storage = DefaultStorage ( )
 PY3 = sys . version_info [ 0 ] == 3
  raise TemplateSyntaxError ( error_msg )
  raise ValidationError ( self . message , code = self . code )
    def get_unique_error_message ( self , unique_check ) :
  return '%s...' % x [ : max ( 0 , limit - 3 ) ]
   def __eq__ ( self , other ) :
  elif isinstance ( value , datetime . time ) :
              loader = find_template_loader ( loader_name )
 import tarfile
  connection = connections [ options [ 'database' ] ]
 leave_locale_alone = True
          for i , line in enumerate ( lines ) :
           state_frame = self . _get_context_stack_frame ( context )
          nodelist_false = parser . parse ( ( end_tag , ) )
                  with open ( filepath , 'rb' ) as fp :
           six . reraise ( DeserializationError , DeserializationError ( e ) , sys . exc_info ( ) [ 2 ] )
                  data = self . _coerce ( data )
          pass
 def escape_quotes ( m ) :
              return None
  try :
 def combine ( cls , date , time ) :
 if use_func :
     def media_property ( cls ) :
 yield ''
    raise TemplateDoesNotExist ( ', ' . join ( not_found ) )
 from django . core . mail . utils import DNS_NAME
    def b64_decode ( s ) :
 from django . db . utils import DatabaseError
          return "<DeserializedObject: %s.%s(pk=%s)>" % (  self . object . _meta . app_label , self . object . _meta . object_name , self . object . pk )
              return self . empty_form . media
  for ext in pathext :
    if not only_initial :
  else :
   return result
                      opt_label += '='
  else :
              location = settings . MEDIA_ROOT
   return number
   new_ip = [ ]
      hidden_widget = MultipleHiddenInput
 def __init__ ( self , connection_reset = False ) :
       app_models = app_config . get_models ( include_auto_created = True )
 def get_callable ( lookup_view , can_fail = False ) :
            state = self . __dict__ . copy ( )
 for possibility , pattern , defaults in possibilities :
 for c in reversed ( self . __class__ . __mro__ ) :
    for model in app_models :
      @ decorator
     def load_template_source ( self , template_name , template_dirs = None ) :
          msg = (  "WSGI application '%(app_path)s' could not be loaded; "  "Error importing module: '%(exception)s'" % ( {  'app_path' : app_path ,  'exception' : e ,  } )  )
  TYPE = RAW
   for ( k , v ) in kwargs . items ( ) :
   def page ( self , number ) :
 data = serializer ( ) . dumps ( obj )
                   current_len += 1
  except KeyError :
  def __init__ ( self , name , value , attrs , choices ) :
  from datetime import datetime
 super ( WSGIRequestHandler , self ) . __init__ ( * args , ** kwargs )
 def __init__ ( self , text ) :
  else :
                              self . stdout . write ( " [X] %s" % title )
                      resource = resource . decode ( settings . FILE_CHARSET )
    def dict ( self ) :
          self . fail_silently = fail_silently
 try :
 from django . utils . safestring import mark_safe
    def b64_encode ( s ) :
        @ register . filter ( is_safe = False )
 self [ 'Location' ] = iri_to_uri ( redirect_to )
                  value = value . replace ( replacement , '' )
   def id_for_label ( self , id_ ) :
                  raise ValueError ( 'empty_label list/tuple must have 3 elements.' )
  with transaction . atomic ( using = self . using ) :
 for i , piece in enumerate ( re_formatchars . split ( force_text ( formatstr ) ) ) :
 if sequence_sql :
              handler . startElement ( "author" , { } )
     backend_name = connection . settings_dict [ 'ENGINE' ] . split ( '.' ) [ - 1 ]
                          data [ field . attname ] = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
 self . params = params
  num_sent = 0
 if imatch . group ( 2 ) :
    def tag_function ( self , func ) :
              self . locale_paths . extend ( list ( settings . LOCALE_PATHS ) )
 return self . renderer ( name , value , final_attrs , choices )
 exclude = self . _get_validation_exclusions ( )
  klass . __unicode__ = klass . __str__
          app_name , target = options . pop ( 'name' ) , options . pop ( 'directory' )
          self . _archive . close ( )
   def unget ( self , bytes ) :
   def setdefault ( self , key , default = None ) :
          handler . addQuickElement ( "title" , item [ 'title' ] )
  try :
   view_path = url_name or self . _func_path
      def __init__ ( self , obj , * args ) :
  for uclass , unique_check in all_unique_checks :
  except ImportError :
              top_dir = path . join ( os . getcwd ( ) , name )
                  mw_instance = mw_class ( )
  elif isinstance ( value , datetime . date ) :
  words = allow_lazy ( words )
  elif isinstance ( value , ( decimal . Decimal , float ) + six . integer_types ) :
  from django . utils . dates import MONTHS , MONTHS_3 , MONTHS_ALT , MONTHS_AP , WEEKDAYS , WEEKDAYS_ABBR
   def __reduce_ex__ ( self , proto ) :
 return [ mark_safe ( force_text ( obj ) ) for obj in value ]
              raise InvalidTemplateLibrary ( "Unsupported arguments to "  "Library.tag: (%r, %r)" , ( name , compile_function ) )
 if m is None :
  for sql_file in sql_files :
                              current = current ( )
               translation . _catalog = { }
          for bit in bits :
 from django . utils . formats import get_format
 bottom = ( number - 1 ) * self . per_page
 self . _done = False
 def dictitem ( s ) :
 def upload_handlers ( self ) :
   else :
 super ( NullBooleanSelect , self ) . __init__ ( attrs , choices )
   def non_form_errors ( self ) :
   re_words = re . compile ( r'<.*?>|((?:\w[-\w]*|&.*?;)+)' , re . U | re . S )
                  try :
 return iter ( getattr ( d , _iterkeys ) ( ** kw ) )
  self . backout . append ( self . pointer )
 for item in sorted_items :
              return 0
    DEBUG = 10
 from django . utils import six
  sites . append ( j )
  if isinstance ( s , ( six . text_type , Promise ) ) :
  except UnicodeEncodeError :
                      comment_notes = [ ]
                  if e . errno != errno . EEXIST :
          self . registered_checks = [ ]
              data = self . form . initial . get ( self . name , self . field . initial )
  bits = token . contents . split ( )
 def __init__ ( self , * dicts ) :
   def _get_files ( self ) :
 if p >= 0 :
    def __iter__ ( self ) :
              return timedelta ( seconds = - time . altzone )
 self . position -= len ( bytes )
 assert version [ 3 ] in ( 'alpha' , 'beta' , 'rc' , 'final' )
    elif maxsize is None :
  super ( TemporaryUploadedFile , self ) . __init__ ( file , name , content_type , size , charset , content_type_extra )
          wsgi_opts = {  'maxSpare' : int ( options [ "maxspare" ] ) ,  'minSpare' : int ( options [ "minspare" ] ) ,  'maxChildren' : int ( options [ "maxchildren" ] ) ,  'maxRequests' : int ( options [ "maxrequests" ] ) ,  }
 lead = lead + opening
  if self . obj is None :
                      if self . verbosity > 1 :
          return json . dumps ( self . get_json_data ( escape_html ) )
              raise ValidationError ( errors )
    def patch_vary_headers ( response , newheaders ) :
   def handle_entityref ( self , name ) :
                  self . stdout . write ( "  Installing custom SQL...\n" )
 parser . add_argument ( '--merge' , action = 'store_true' , dest = 'merge' , default = False ,  help = "Enable fixing of migration conflicts." )
              et , ev , tb = sys . exc_info ( )
  del bits [ : 1 ]
              id_ = self . attrs [ 'id' ]
              raise StopIteration ( )
 i = i + 1
              context . render_context . pop ( )
 if name :
          return language [ : p ] . lower ( ) + '_' + language [ p + 1 : ] . upper ( )
      def ungettext ( singular , plural , number ) :
              raise AttributeError ( "This QueryDict instance is immutable" )
              value = '-' + value
   def file_complete ( self , file_size ) :
 return mark_safe ( force_text ( value ) . translate ( _js_escapes ) )
 token = parser . next_token ( )
                  if t . contents . lstrip ( ) . startswith ( TRANSLATOR_COMMENT_MARK ) :
  return True
      return ( form_class is not None and (  hasattr ( form_class , '_meta' ) and  ( form_class . _meta . fields is not None or  form_class . _meta . exclude is not None )  ) )
 for type_ in reversed ( resultclass . mro ( ) ) :
  else :
     class EmailMessage ( object ) :
          if getattr ( self , '_client' , None ) is None :
 tzinfo . __init__ ( self )
               age = time . time ( ) - timestamp
                  return format_html ( "<input type='hidden' name='csrfmiddlewaretoken' value='{0}' />" , csrf_token )
 from django . utils . six . moves . urllib . parse import urlsplit , urlunsplit
  def model_installed ( model ) :
  elif _locs_ is None :
 if old_attr is None :
                  m2m_data [ field . name ] = self . _handle_m2m_field_node ( field_node , field )
 widget = self . field . widget
              Model = _get_model ( d [ "model" ] )
          return import_string ( app_path )
               return context . render_context
   @ property
                          last_row = ( normal_row % { 'errors' : '' , 'label' : '' ,  'field' : '' , 'help_text' : '' ,  'html_class_attr' : html_class_attr } )
   subcommands = list ( get_commands ( ) ) + [ 'help' ]
      def __init__ ( self , template_string , origin ) :
              self . stream . write ( "\n" )
   if ',' in args [ 1 ] :
  return dict ( self )
   def urlunquote ( quoted_url ) :
                      s = six . text_type ( s )
   def strptime ( self , value , format ) :
   def __dir__ ( self ) :
 self . filters = { }
              try :
  import base64
    def get_system_encoding ( ) :
    @ register . tag
 words [ i ] = mark_safe ( '%s%s%s' % ( lead , middle , trail ) )
  import django
              try :
  result = func ( * args )
  except AttributeError :
                      if extracted :
   def handle_fk_field ( self , obj , field ) :
  expires = None
                  self . stdout . write ( "  No optimizations possible." )
                  for f in sorted ( os . listdir ( self . path ) ) :
   html4_singlets = (  'br' , 'col' , 'link' , 'base' , 'img' ,  'param' , 'area' , 'hr' , 'input'  )
 TRANSLATOR_COMMENT_MARK = 'Translators'
  else :
          return input_val
      class AdminEmailHandler ( logging . Handler ) :
  return self . _namespace_dict [ language_code ]
      help = "Returns a list of the SQL statements required to return all tables in the database to the state they were in just after they were installed."
   def __setstate__ ( self , obj_dict ) :
     def Deserializer ( stream_or_string , ** options ) :
                  display_url = tmp + '/'
 int2byte = chr
   resolver_match = resolver . resolve ( request . path_info )
   elif dirname == 'locale' :
  def __init__ ( self , var ) :
  inner_text = [ ]
 attrs . pop ( key )
 break
              args = [ 'msgmerge' ] + self . msgmerge_options + [ pofile , potfile ]
          result = super ( MultiValueField , self ) . __deepcopy__ ( memo )
  factory = klass
 def check_model_signals ( app_configs = None , ** kwargs ) :
 message = email_message . message ( )
 request_finished = Signal ( )
     def is_library_missing ( name ) :
          self . object_list = object_list
                      self . xml . addQuickElement ( "object" , attrs = {  'pk' : smart_text ( value . _get_pk_val ( ) )  } )
 import copy
              cache_choices = False
          raise
 os . umask ( umask )
                  if not self . fail_silently :
                  self . stdout . write ( self . style . MIGRATE_HEADING ( "Migrations for '%s':" % app_label ) + "\n" )
   value = value . astimezone ( timezone )
 if value is None :
 self . settings_exception = None
 def __init__ ( self , data = None , files = None , instance = None ,  save_as_new = False , prefix = None , queryset = None , ** kwargs ) :
 for templatetag_module in templatetags_modules_candidates :
  def indexbytes ( buf , i ) :
    def assertRaisesRegex ( self , * args , ** kwargs ) :
 from django . utils import six
  if decimal_pos is not None :
 self . html_initial_id = form . add_initial_prefix ( self . auto_id )
  from django . apps import apps
  return self . _errors
    if is_relation :
 get_function_defaults = operator . attrgetter ( _func_defaults )
 if lang_code in _supported and lang_code is not None and check_for_language ( lang_code ) :
 _empty_value = ''
 return result
              parsed = True
    if settings . is_overridden ( 'MANAGERS' ) :
               if opts . fields is None and opts . exclude is None :
 self . lineno = None
  self . _stream = BytesIO ( self . _body )
  else :
 if not isinstance ( list_ , ( tuple , list ) ) or len ( list_ ) != 2 :
          addr . encode ( 'ascii' )
  except ValueError :
      import gettext
  return '' . join ( c )
 import sys
 sort = complain
  default_translation = translation ( settings . LANGUAGE_CODE )
   def __getitem__ ( self , key ) :
                  if field . serialize :
    def get_language_bidi ( ) :
  yield data
                  if model in excluded_models :
  __all__ = ( 'UploadedFile' , 'TemporaryUploadedFile' , 'InMemoryUploadedFile' ,  'SimpleUploadedFile' )
   def add_arguments ( self , parser ) :
 return chunk
     class Widget ( six . with_metaclass ( MediaDefiningClass ) ) :
    def get_cache_key ( request , key_prefix = None , method = 'GET' , cache = None ) :
                      raise CommandError (  "errors happened while running msguniq\n%s" % errors )
  def __init__ ( self ) :
          return t . render ( context_instance )
                      with connection . cursor ( ) as cursor :
                  return False
              return data
 from django . core . servers . basehttp import run , get_internal_wsgi_application
 from IPython . frontend . terminal . ipapp import TerminalIPythonApp
 if last == 1 :
              return self . limit_choices_to ( )
              self . input_type = attrs . pop ( 'type' , self . input_type )
  return self . nodelist_false . render ( context )
              invalid_apps = [ ]
 def id_for_label ( self ) :
              self . _deleted_form_indexes = [ ]
                  result |= ord ( x ) ^ ord ( y )
                  self . event_stream . expandNode ( node )
              widget . input_type = 'hidden'
 if current_len == truncate_len :
 inner_result . extend ( res )
              if hasattr ( value , 'close' ) :
                  deps = [ ]
              return lambda x : x
   raise ImportError
  def __init__ ( self ) :
          self . takes_context = takes_context
                      self . stdout . write ( self . style . MIGRATE_SUCCESS ( " OK" ) )
  self . feed . update ( kwargs )
              inner_text . append ( child . data )
          output = [ ]
                              terminal_char = ')'
 if lang is None :
          return self . represent_scalar ( 'tag:yaml.org,2002:str' , str ( data ) )
 self . keep_pot = options . get ( 'keep_pot' )
                  raise CommandError (  "Problem installing fixture '%s': %s is not a known "  "serialization format." % ( '' . join ( parts [ : - 1 ] ) , parts [ - 1 ] ) )
          if initial is None :
              try :
              return apps . get_model ( model_identifier )
    class HttpResponseBase ( six . Iterator ) :
     class EntitiesForbidden ( DefusedXmlException ) :
   def __eq__ ( self , other ) :
              self . _request = datastructures . MergeDict ( self . POST , self . GET )
              if isinstance ( sep , unicode ) :
 context_extras [ 'LANGUAGE_BIDI' ] = translation . get_language_bidi ( )
   yield '%s\n' % line [ : space - 1 ]
              return _ ( 'p.m.' )
          return path
  if cache_timeout is None :
  po_path = os . path . join ( dirpath , f )
              nodelist . contains_nontext = True
                  form = self . forms [ i ]
 if obj_pk is not None :
 if has_bz2 :
          if not self . _is_rendered :
    context [ self . var_name ] = [  { 'grouper' : key , 'list' : list ( val ) }  for key , val in  groupby ( obj_list , lambda obj : self . resolve_expression ( obj , context ) )  ]
   class Tok ( object ) :
                  new_value . append ( self . coerce ( choice ) )
 connection = connection or get_connection ( username = auth_user ,  password = auth_password ,  fail_silently = fail_silently )
 super ( TemplateResponse , self ) . __init__ (  template , context , content_type , status )
 usage . append ( style . NOTICE ( "[%s]" % app ) )
          super ( Deserializer , self ) . __init__ ( stream_or_string , ** options )
 key = bytes_to_text ( key , self . encoding )
   def resolve ( self , context , ignore_failures = False ) :
              if not renamed :
              warnings . warn ( "cache_choices has been deprecated and will be "  "removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2 )
 from django . conf import settings
                  pass
                   raise TemplateSyntaxError (  "'%s' received unexpected keyword argument '%s'" %  ( name , param ) )
   def _create_attachments ( self , msg ) :
                  self . queryset . filter ( ** { key : pk } )
 self . content_type_extra = None
              cursor . close ( )
              self . seek ( 0 )
 if use_natural_keys :
                  return template . render ( context . new ( values ) )
 itervalues = _itervalues
  elif not callable ( formfield_callback ) :
   del attr
                  raise
    def mark_safe ( s ) :
                      var_obj = Variable ( var )
               try :
  return obj_pk
    def get_language_from_path ( path ) :
   if check_path :
     def make_middleware_decorator ( middleware_class ) :
              defaults [ 'data' ] = self . data
 out = StringIO ( '' )
    for regex in RFC1123_DATE , RFC850_DATE , ASCTIME_DATE :
 import os
   class InvalidPage ( Exception ) :
 self . connector = conn_type
 id_ = self . attrs . get ( 'id' , None )
              for path in data :
 def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None ,  initial = None , error_class = ErrorList ) :
    def save_instance ( form , instance , fields = None , fail_message = 'saved' ,  commit = True , exclude = None , construct = True ) :
  if strings_only and is_protected_type ( s ) :
 try :
    except PermissionDenied :
 with open ( writer . path , "wb" ) as fh :
 if commit :
           args = token . split_contents ( )
          if value is True :
  else :
 @ stringfilter
 def __init__ ( self , content , name = None ) :
  else :
  except UnicodeEncodeError :
              filename = filename [ : - 9 ] + ".py"
 import sys
                          locks . lock ( fd , locks . LOCK_EX )
          pass
 import sys
 from django . utils import six
 def wrapper ( * args , ** kwargs ) :
 return self
   extra_attrs = self . widget_attrs ( widget )
          compiled_parent = self . get_parent ( context )
          return False
    def has_vary_header ( response , header_query ) :
 if app_label not in executor . loader . migrated_apps :
 ret = UnlockFileEx ( hfile , 0 , 0 , 0xFFFF0000 , byref ( overlapped ) )
  return result
 from django . utils . encoding import force_text
 parser . add_argument ( '-n' , '--natural' , action = 'store_true' , dest = 'use_natural_keys' , default = False ,  help = 'Use natural keys if they are available (deprecated: use --natural-foreign instead).' )
 if not self . activated :
 if ending and not msg . endswith ( ending ) :
          return value
 all_unique_checks = all_unique_checks . union ( set ( unique_checks ) )
          evens = sum ( int ( c ) for c in candidate [ - 1 : : - 2 ] )
  del attr
 handlers [ name ] = handler
  else :
 return html
          if self . _cull_frequency == 0 :
             return self . copy ( )
 sub = mapping [ version [ 3 ] ] + str ( version [ 4 ] )
              body_msg = msg
 parser . add_argument ( '--no-wrap' , action = 'store_true' , dest = 'no_wrap' ,  default = False , help = "Don't break long message lines into several lines." )
              template = self . template . resolve ( context )
   def unlock ( f ) :
  except ValueError :
                      self . stdout . write ( "Resetting sequences\n" )
 self . _callback_str = callback
              if default is not RAISE_ERROR :
 clean = lambda self , x : len ( x )
              base_url += '/'
           if initial is not None :
 WSGIServer = module . WSGIServer
 if self . _errors is None :
 import time
 for char in self . add_truncation_text ( '' , truncate ) :
  else :
 if item [ 'description' ] is not None :
          raise TemplateSyntaxError ( "Invalid templatetag argument: '%s'."  " Must be one of: %s" %  ( tag , list ( TemplateTagNode . mapping ) ) )
    Field . __init__ ( self , required , widget , label , initial , help_text ,  * args , ** kwargs )
          choices = ( ( '1' , ugettext_lazy ( 'Unknown' ) ) ,  ( '2' , ugettext_lazy ( 'Yes' ) ) ,  ( '3' , ugettext_lazy ( 'No' ) ) )
 param = elt [ 1 ]
                  if targets [ 0 ] [ 1 ] is None :
              params , varargs , varkw , defaults = getargspec ( func )
 text = unicodedata . normalize ( 'NFC' , self . _wrapped )
  klass = node . clone ( )
  if format not in _serializers :
                      date_value = datetime_safe . new_date ( date_value )
 if parsed . scheme and parsed . scheme not in self . allowed_schemes :
              obj_pk = obj . _get_pk_val ( )
 import re
  whole_digits = digits - decimals
                  guessed_filename += ext
 if num_entries < self . _max_entries :
                      migration . merged_operations . extend (  loader . get_migration ( node_app , node_name ) . operations  )
   if pickled is not None :
  except ImportError as e :
           return datetime . utcnow ( ) . replace ( tzinfo = utc )
 for migration in migrations_to_squash :
 nan = ( 1e200 * 1e200 ) // ( 1e200 * 1e200 )
 DIGIT_PATTERN = re . compile ( r'^\d+$' )
           if is_aware ( value ) :
 pass
          return lookup_view
 if 'class' in attrs :
 params = { 'datetime' : value , 'current_timezone' : current_timezone }
    def __iter__ ( self ) :
  except KeyError :
          return six . text_type ( s ) . encode ( encoding , errors )
                              nodelist . append ( node . render ( context ) )
 if timezone is None :
              doomed = [ k for ( i , k ) in enumerate ( self . _cache ) if i % self . _cull_frequency == 0 ]
 from django . utils . deprecation import RemovedInDjango19Warning
 if count2 != 0 :
 from django . utils . timezone import template_localtime
  urlize = allow_lazy ( urlize , six . text_type )
  except OSError as err :
      return _trans . gettext_noop ( message )
 addr = '@' . join ( [ localpart , domain ] )
    def patch_response_headers ( response , cache_timeout = None ) :
 return hashlib . pbkdf2_hmac (  digest ( ) . name , password , salt , iterations , dklen )
              self . months = months
              if self . _varlist :
   def tzname ( self , dt ) :
                                  chunk_length = len ( chunk )
   def __delitem__ ( self , header ) :
   full_module_name = package_name + '.' + module_name
          _load_serializers ( )
 try :
                  raise CommandError ( 'You appear not to have the %r program installed or on your path.' %  connection . client . executable_name )
          del self . dict [ item ]
      WindowsError = WindowsError
   for field , error_list in error . items ( ) :
    @ property
 from itertools import dropwhile
 @ stringfilter
                          date_data = ( getattr ( form . cleaned_data [ unique_for ] , lookup ) , )
                  chunk = self . _read_limited ( )
          attrs = super ( IntegerField , self ) . widget_attrs ( widget )
              try :
 read = property ( lambda self : self . file . read )
     class TypedMultipleChoiceField ( MultipleChoiceField ) :
from __future__ import unicode_literals
  requires_system_checks = False
          return "<%s: level=%r, msg=%r, hint=%r, obj=%r, id=%r>" % ( self . __class__ . __name__ , self . level , self . msg , self . hint , self . obj , self . id )
                  f . close ( )
 field_notes . append ( "Field renamed because it wasn't a valid Python identifier." )
 from lib2to3 . fixer_util import find_indentation , Name , syms , touch_import
 return errors
   def parse_file_upload ( self , META , post_data ) :
 if sys . platform == "win32" :
      child_nodelists = ( 'nodelist_loop' , 'nodelist_empty' )
    class SimpleTemplateResponse ( HttpResponse ) :
                  os . makedirs ( self . file_path )
 result = ':' . join ( hextets [ 0 : 6 ] )
  regex = re_words if words else re_chars
  from django . conf import settings
                      m = base
                  raise
 from django . utils . translation import ugettext_lazy , ugettext as _ , pgettext
  return iri_to_uri ( location )
  self . encoding = encoding
  elif '\\' in path :
      help = 'Prints the SQL statements for resetting sequences for the given app name(s).'
   def f ( self ) :
   update_watch ( )
 file_field_list = [ ]
          assert len ( version ) == 5
          value = ugettext ( "%s PB" ) % filesize_number_format ( bytes / PB )
                      try :
      return _entity_re . sub ( _replace_entity , text )
 parser . add_argument ( '--app' , action = 'store' , dest = 'app_label' ,  default = None , help = 'Only look for fixtures in the specified app.' )
 self . backout = [ ]
 self . namespace = namespace
 try :
 rfcdate = formatdate ( epoch_seconds )
      return getattr ( self , _assertRegex ) ( * args , ** kwargs )
              yield key , self [ key ]
 return value . upper ( )
     utc = pytz . utc if pytz else UTC ( )
 i = next_space_index ( subject , i )
  LUHN_ODD_LOOKUP = ( 0 , 2 , 4 , 6 , 8 , 1 , 3 , 5 , 7 , 9 )
                      if hasattr ( middleware , 'process_response' ) :
  import warnings
  class Module_six_moves_urllib_response ( _LazyModule ) :
   def i ( self ) :
              self [ key ] = default
  except ImportError :
  self . path = ''
              raise AttributeError ( "'%s' object has no attribute 'cleaned_data'" % self . __class__ . __name__ )
  for loader in template_source_loaders :
   def temporary_file_path ( self ) :
                  if six . PY2 :
          if not self . _upload_handlers :
from __future__ import unicode_literals
               pass
  import re
 for migration in merge_migrations :
 self . write_items ( handler )
   def get_available_name ( self , name ) :
 from django . db . migrations import Migration
              if self . verbosity > 0 :
 if not lib :
      class TemporaryFile ( FileProxyMixin ) :
 def __init__ ( self , widgets , attrs = None ) :
              u = salt + struct . pack ( b'>I' , i )
 plural_re = re . compile ( r"""^\s*plural$""" )
   if self . empty_permitted and not self . has_changed ( ) :
 self . timeout = timeout
  from django . utils . encoding import python_2_unicode_compatible , force_str
                  pass
 new_method = base . __dict__ . get ( new_method_name )
   return False
  self . _init_translation_catalog ( )
          from django . conf import settings
 from django . core import signing
          data = obj_dict . pop ( '_data' , { } )
          is_accept_language_redundant = settings . USE_I18N or settings . USE_L10N
          if json . __version__ . split ( '.' ) >= [ '2' , '1' , '3' ] :
  upto = match . end ( )
from __future__ import unicode_literals
                  field_value = None
                      raise
 missing_fields = ( set ( none_model_fields ) -  set ( new_class . declared_fields . keys ( ) ) )
 cache [ mem_args ] = result
                      found = getattr ( found , frag )
              raise MultiValueDictKeyError ( repr ( key ) )
 from django . utils . formats import localize
     try :
  except Exception :
 bits = token . split_contents ( )
  if fields and f . name not in fields :
                  fp . write ( msgs )
 final_output . extend ( alter_sql )
              if locales :
  else :
     class LocalTimezone ( ReferenceLocalTimezone ) :
   def start_serialization ( self ) :
 self . base = base
  if self . _wrapped is empty :
              raise SuspiciousMultipartForm (  "The multipart parser got stuck, which shouldn't happen with"  " normal uploaded files. Check for malicious upload activity;"  " if there is none, report this to the Django developers."  )
 from django . forms . fields import Field , ChoiceField
  if ( self . validate_min and  self . total_form_count ( ) - len ( self . deleted_forms ) < self . min_num ) :
 walk_to_end ( ch , pattern_iter )
    _urllib_parse_moved_attributes = [  MovedAttribute ( "ParseResult" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "SplitResult" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "parse_qs" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "parse_qsl" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urldefrag" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urljoin" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlparse" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlsplit" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlunparse" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlunsplit" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "quote" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "quote_plus" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "unquote" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "unquote_plus" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "urlencode" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "splitquery" , "urllib" , "urllib.parse" ) ,  ]
                   continue
                  request_middleware . append ( mw_instance . process_request )
 tags = [ re . escape ( tag ) for tag in tags . split ( ) ]
 self . stream . write ( b'-' * 79 )
   def save_existing ( self , form , instance , commit = True ) :
          msgs = msgs . replace ( 'charset=CHARSET' , 'charset=UTF-8' )
              if self . verbosity >= 2 :
    def __getitem__ ( self , header ) :
  return i
     def configure_handler ( self , config ) :
  else :
 if graph . nodes [ plan_node ] . replaces :
  else :
 bits = iter ( smart_split ( self . contents ) )
  mail = EmailMultiAlternatives ( '%s%s' % ( settings . EMAIL_SUBJECT_PREFIX , subject ) ,  message , settings . SERVER_EMAIL , [ a [ 1 ] for a in settings . MANAGERS ] ,  connection = connection )
 return self . forms [ : self . initial_form_count ( ) ]
 assert mimetype is not None
     emit_post_migrate_signal ( created_models , self . verbosity , self . interactive , connection . alias )
 final_output = [ ]
 odds = sum ( LUHN_ODD_LOOKUP [ int ( c ) ] for c in candidate [ - 2 : : - 2 ] )
                  week_number = 53
  handlers = config . get ( 'handlers' , None )
 tt = _time . localtime ( stamp )
 from django . utils . encoding import force_bytes , force_text , iri_to_uri
          yield self
                      self . addr = self . addr [ 1 : - 1 ]
 raise NotImplementedError ( 'subclasses of Storage must provide a url() method' )
 for basedir in basedirs :
 from django . core . serializers . base import DeserializationError
                  handlers = config . get ( 'handlers' , EMPTY_DICT )
    basedirs = set ( map ( os . path . abspath , filter ( os . path . isdir , basedirs ) ) )
 softspace = property ( lambda self : self . file . softspace )
              options = parser . parse_args ( argv [ 2 : ] )
          self . template = template
  else :
  raise CommandError ( message )
   def to_python ( self , value ) :
  for __ in xrange ( fill_to - sep ) :
  else :
 self . blocks = dict ( ( n . name , n ) for n in nodelist . get_nodes_by_type ( BlockNode ) )
       def __init__ ( self , object_list , number , paginator ) :
              return timedelta ( seconds = - time . timezone )
   @ cached_property
      help = "Prints the CREATE TABLE, custom SQL and CREATE INDEX SQL statements for the given model module name(s)."
          return ''
 def __init__ ( self , dict_ = None , autoescape = True , current_app = None ,  use_l10n = None , use_tz = None ) :
              return
  return dec
          return self . as_table ( )
          return Field . validate ( self , value )
  import datetime
   def validate ( self , value ) :
              if len ( bits ) < 3 or bits [ 1 ] != 'as' :
                      pass
              self . _changed_data = [ ]
              self . object_list = list ( self . object_list )
  except AttributeError :
          return hmac . compare_digest ( force_bytes ( val1 ) , force_bytes ( val2 ) )
  elif ch == ')' :
                  setattr ( self . object , accessor_name , object_list )
      help = 'Installs the named fixture(s) in the database.'
  except http_cookies . CookieError :
 def wordwrap ( value , arg ) :
 if index < 0 :
 if result is not None :
              raise StopIteration ( )
                  error = error . error_dict
              if self . verbosity >= 2 :
    def _itervalues ( self ) :
  except ValueError :
  if app_config . models_module is None or app_config in excluded_apps :
      format_key = 'DATE_INPUT_FORMATS'
  if i >= self . initial_form_count ( ) and self . initial_extra :
 return copy . copy ( self )
  __all__ = [ 'File' ]
   if self . verbosity > 0 :
 errors . extend ( _check_boolean_field_default_value ( ** kwargs ) )
 if m is not None and n is not None :
              import warnings
              if isinstance ( elt , NonCapture ) :
              self . setlistdefault ( key ) . append ( value )
  self . use_natural_foreign_keys = options . pop ( 'use_natural_foreign_keys' , False ) or self . use_natural_keys
 norm_patterns = [ p [ : - len ( dir_suffix ) ] if p . endswith ( dir_suffix ) else p for p in self . ignore_patterns ]
     def modelform_defines_fields ( form_class ) :
 for refto , refs in references . items ( ) :
     html = { }
  except InvalidTemplateLibrary as e :
                  comment . append ( t . contents )
                  obj = mark_safe ( new_obj )
  def next_space_index ( subject , i ) :
  try :
  else :
           default_attrs = { 'cols' : '40' , 'rows' : '10' }
          to_unicode = lambda s : force_text ( s , strings_only = True )
      _tc . load ( str ( 'foo:bar=1' ) )
               return dec
    def __str__ ( self ) :
  quote = s [ 0 ]
                  new_obj = func ( obj , autoescape = context . autoescape , * arg_vals )
     DEFAULT_LOGGING = {  'version' : 1 ,  'disable_existing_loggers' : False ,  'filters' : {  'require_debug_false' : {  '()' : 'django.utils.log.RequireDebugFalse' ,  } ,  'require_debug_true' : {  '()' : 'django.utils.log.RequireDebugTrue' ,  } ,  } ,  'handlers' : {  'console' : {  'level' : 'INFO' ,  'filters' : [ 'require_debug_true' ] ,  'class' : 'logging.StreamHandler' ,  } ,  'null' : {  'class' : 'logging.NullHandler' ,  } ,  'mail_admins' : {  'level' : 'ERROR' ,  'filters' : [ 'require_debug_false' ] ,  'class' : 'django.utils.log.AdminEmailHandler'  }  } ,  'loggers' : {  'django' : {  'handlers' : [ 'console' ] ,  } ,  'django.request' : {  'handlers' : [ 'mail_admins' ] ,  'level' : 'ERROR' ,  'propagate' : False ,  } ,  'django.security' : {  'handlers' : [ 'mail_admins' ] ,  'level' : 'ERROR' ,  'propagate' : False ,  } ,  'py.warnings' : {  'handlers' : [ 'console' ] ,  } ,  }  }
 @ stringfilter
 for k , v in self . choices :
          lang = get_language ( )
 token = parser . next_token ( )
      from django . utils . six . moves import cPickle as pickle
      pytz = None
 shell = IPShell ( argv = [ ] )
                  raise ValueError ( 'Unable to add filter %r: %s' % ( f , e ) )
  from django . utils import six
          original = UnicodeDecodeError . __str__ ( self )
   def add_truncation_text ( self , text , truncate = None ) :
   gettempdir = tempfile . gettempdir
  if self . username and self . password :
 if not form . is_valid ( ) :
    except StopUpload as e :
 import mimetypes
          return self . __offset
  from django . apps import apps
 self . timezone = None
 yield "from __future__ import unicode_literals"
              return ''
 from django . test . utils import get_runner
   choices = property ( _get_choices , ChoiceField . _set_choices )
  if ch == '+' :
      help = ( "Runs over the entire source tree of the current directory and "  "pulls out all strings marked for translation. It creates (or updates) a message "  "file in the conf/locale (in the django tree) or locale (for projects and "  "applications) directory.\n\nYou must run this command with one of either the "  "--locale, --exclude or --all options." )
                  raise TemplateSyntaxError ( "Malformed arguments to url tag" )
  strip_entities = allow_lazy ( strip_entities , six . text_type )
 if self . show_traceback :
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
              parts = [ ]
    return [ self . forms [ i ] for i in self . _deleted_form_indexes ]
  def add_arguments ( self , parser ) :
                  content = ''
   else :
  return sites
  else :
          nodelist_false = NodeList ( )
  return ''
          return list ( self ) != other
          validate_ipv4_address ( value )
          self . stream = stream
 while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) :
  from django . utils import six
  else :
  else :
 break
                  src_data = fp . read ( )
  return ResolverMatch ( self . callback , args , kwargs , self . name )
   def _handle_object ( self , node ) :
          return len ( value )
   name = self . get_available_name ( name )
  if self . initial and 'initial' not in kwargs :
                      transfer_encoding = transfer_encoding [ 0 ] . strip ( )
 return name + '_id'
  elif param in kwargs :
                      common_ancestor = level [ 0 ]
  except NoReverseMatch :
  if app_names :
          e = TemplateSyntaxError ( msg )
  def __init__ ( self , location = None , base_url = None , file_permissions_mode = None ,  directory_permissions_mode = None ) :
 @ stringfilter
          return timedelta ( 0 )
                      current = current [ bit ]
 from django . db import router , DEFAULT_DB_ALIAS
              params , varargs , varkw , defaults = getargspec ( func )
 from django . utils . safestring import SafeData , EscapeData
              for error in self . error_list :
  opts = instance . _meta
 return nodelist
 return from_current_timezone ( result )
                  self . active_writers += 1
 def __init__ ( self , data , func , prefix ) :
                  pass
 self . context = context
                  raise
    def send_mail ( subject , message , from_email , recipient_list ,  fail_silently = False , auth_user = None , auth_password = None ,  connection = None , html_message = None ) :
  if finder . find_module ( name ) :
  import importlib
 format_type = force_str ( format_type )
 raise
  else :
                          var_obj = Variable ( constant ) . resolve ( { } )
    else :
  except ValidationError as e :
                  bit = self . render_node ( node , context )
 global _supported
    _urllib_response_moved_attributes = [  MovedAttribute ( "addbase" , "urllib" , "urllib.response" ) ,  MovedAttribute ( "addclosehook" , "urllib" , "urllib.response" ) ,  MovedAttribute ( "addinfo" , "urllib" , "urllib.response" ) ,  MovedAttribute ( "addinfourl" , "urllib" , "urllib.response" ) ,  ]
   def signature ( self , value ) :
 line = ''
              self . keyOrder . append ( key )
 return line
          return language . lower ( )
 yield SubWidget ( self , name , value , attrs , choices )
          value = super ( TypedMultipleChoiceField , self ) . clean ( value )
                      rest = rest [ m . end ( ) : ]
              value = int ( str ( value ) )
  else :
  if os . path . exists ( pofile ) :
  except InvalidOperation :
 for tok in rules :
   can_import_settings = False
              orig = getattr ( self . parent_instance , self . to_field )
                          translators_comment_start = lineno
  else :
   for check in checks :
 if self . is_bound :
  def __init__ ( self ) :
    @ register . filter ( is_safe = True )
   if isinstance ( pk , OneToOneField ) or isinstance ( pk , ForeignKey ) :
     class IntegerField ( Field ) :
          self . _archive = zipfile . ZipFile ( file )
    @ register . tag
 self . pubid = pubid
              year_val , month_val , day_val = value . year , value . month , value . day
 if self . is_reversed :
                          self . stdout . write ( "    - %s\n" % operation . describe ( ) )
 weekday = self . data . weekday ( ) + 1
              while new_name . find ( '__' ) >= 0 :
 self . stream . write ( '\n' )
  if ( self . max_digits is not None and self . decimal_places is not None  and whole_digits > ( self . max_digits - self . decimal_places ) ) :
          return mark_safe ( message )
  for template_dir in template_dirs :
 def __init__ ( self , key_to_list_mapping = ( ) ) :
  def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None ,  queryset = None , ** kwargs ) :
          memoryview = buffer
          super ( Command , self ) . add_arguments ( parser )
 origin = make_origin ( display_name , self . load_template_source , template_name , template_dirs )
  except KeyError :
    def gettext ( message ) :
  return ''
 encoding = None
  if name is not None :
    except Exception as e :
              view_func = getattr ( mod , func_name )
                  return render_value_in_context ( value , context )
     if self . __language == settings . LANGUAGE_CODE or self . __language == "en-us" :
 class MinLengthValidator ( BaseValidator ) :
          try :
    def get_format ( format_type , lang = None , use_l10n = None ) :
    def new_datetime ( d ) :
  if self . max_digits is not None and digits > self . max_digits :
                  break
 plist = _parse_header_params ( b';' + line )
                              child_loggers . append ( existing [ i ] )
 def addslashes ( value ) :
 self . COOKIES = { }
 from django . utils . http import urlquote
    class EmptyPage ( InvalidPage ) :
  attrs . append ( ( attrname . lower ( ) , attrvalue ) )
              os . chmod ( full_path , self . file_permissions_mode )
                          self . stdout . write ( "copying plural forms: %s\n" % plural_form_line )
 if space == 0 :
    def catalog ( ) :
          return self . get_fqdn ( )
          def int2byte ( i ) :
   def render ( self , context ) :
 try :
              response . add_post_render_callback ( _set_response_etag )
  time . sleep ( 1 )
              self . cookies [ key ] [ 'secure' ] = True
 if domain == 'djangojs' and file_ext in command . extensions :
 return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )
          if data :
  RE_DATE = re . compile ( r'(\d{4})-(\d\d?)-(\d\d?)$' )
  return '\n' . join ( output )
   def _cull ( self ) :
  except ( TypeError , AttributeError ) :
   def bound_data ( self , data , initial ) :
                      fh . write ( writer . as_string ( ) )
              return ''
   def __getstate__ ( self ) :
                  self . emit_post_migrate ( verbosity , interactive , database )
 try :
          result = super ( SortedDict , self ) . popitem ( )
  def __init__ ( self , attrs = None ) :
 from django . core . management . color import color_style , no_style
   def delete_many ( self , keys , version = None ) :
  except StandardError as e :
  else :
  def _get_num_pages ( self ) :
 self . db = options . pop ( 'using' , DEFAULT_DB_ALIAS )
              connections [ self . using ] . close ( )
  raise BadSignature ( 'Signature "%s" does not match' % sig )
    @ register . filter ( is_safe = True )
          def parts ( ) :
  parser . __loaded_blocks . append ( block_name )
          raise SerializerDoesNotExist ( format )
                          answer = answer [ 0 ] . lower ( )
 key = bytes_to_text ( key , self . encoding )
 start += len ( toktext )
 return mark_safe ( _helper ( value ) )
              connection . check_constraints ( table_names = table_names )
              new_class . media = media_property ( new_class )
   return value
  import warnings
                      return self . tag ( name , func )
    def get_random_string ( length = 12 ,  allowed_chars = 'abcdefghijklmnopqrstuvwxyz'  'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' ) :
    self . choices = list ( choices )
 self . pointer = 0
   raise
                              raise ValueError ( 'No handler found with '  'name %r' % name )
    def ext_convert ( self , value ) :
              if ( db . settings_dict [ 'ATOMIC_REQUESTS' ]  and db . alias not in non_atomic_requests ) :
   stream = LazyStream ( ChunkIter ( self . _input_data , self . _chunk_size ) )
   def modified_time ( self , name ) :
 return initial_value != data_value
  loggers = config . get ( 'loggers' , EMPTY_DICT )
 for attr in _urllib_response_moved_attributes :
          if node . must_be_first and nodelist :
                  url = smart_urlquote ( middle )
              raise CommandError ( 'You must set settings.ALLOWED_HOSTS if DEBUG is False.' )
    class HttpResponseServerError ( HttpResponse ) :
      class _MovedItems ( _LazyModule ) :
  id = "(%s) " % self . id if self . id else ""
   def new_method_proxy ( func ) :
   os . rename ( old_file_name , new_file_name )
 sec = int ( m . group ( 'sec' ) )
     class StreamingHttpResponse ( HttpResponseBase ) :
 return str ( dict ( self . items ( ) ) )
  return format_html ( '<input{0} />' , flatatt ( final_attrs ) )
   original_lookup = lookup_view
      smart_str = smart_text
 import sys
  if bcc :
 if only_django :
  return cache_key
              related = getattr ( obj , field . name )
   finally :
 doublecolon_len = 0
 from django . core . management . base import BaseCommand , CommandError
 default_error_messages = {  'invalid' : _ ( 'Enter a valid time.' )  }
 args = args or [ ]
     class URLField ( CharField ) :
                  try :
              self . remove ( item )
                      resolved_args , resolved_kwargs = self . get_resolved_arguments ( context )
 if is_templatized :
          bits = [ ]
  return '' . join ( random . choice ( allowed_chars ) for i in range ( length ) )
                  return os . path . getsize ( self . file . name )
 merge_migrations . append ( migration )
 super ( MultiWidget , self ) . __init__ ( attrs )
 import re
 self . to_field = kwargs . pop ( "to_field" , None )
          j = text . find ( substr , i )
     if PY3 :
 from django . db import connections , router , transaction , DEFAULT_DB_ALIAS
   def configure_logging ( logging_config , logging_settings ) :
 from django . core . management . base import BaseCommand , CommandError
              if level not in logging . _levelNames :
    @ register . tag
                                    over_bytes = len ( chunk ) % 4
  buffering = int ( six . PY3 )
 parser . delete_first_token ( )
 if not cls :
    _trans = Trans ( )
 def reverse_dict ( self ) :
 raise NotImplementedError ( 'subclasses of Serializer must provide a start_object() method' )
              raise ValueError (  "'%s.%s' has more than one ForeignKey to '%s.%s'."  % ( model . _meta . app_label , model . _meta . object_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )
          self . tags . update ( lib . tags )
          lang = None
 self . __doc__ = self . __class__ . __doc__
 getattr ( combined , 'add_' + name ) ( getattr ( other , '_' + name , None ) )
      SafeString = SafeText
    if not _cookie_allows_colon_in_names :
   from django . template . base import ( compile_string , resolve_variable ,  unescape_string_literal , generic_tag_compiler )
  return self . dicts . pop ( )
                      if f . rel and f . rel . to not in to_delete :
 import time as _time
 from django . utils . six . moves import http_cookies
 import time
 return self . cleaned_data
                  offset = - offset
 return self
 return value . tzinfo is not None and value . tzinfo . utcoffset ( value ) is not None
   try :
          return [ ]
                          input_format = get_format ( 'DATE_INPUT_FORMATS' ) [ 0 ]
  last = max ( 0 , end - 1 )
          module = _import_module ( self . mod )
  if self . field . cache_choices :
 module = import_module ( '%s.management.commands.%s' % ( app_name , name ) )
              self . cc = [ ]
   def __str__ ( self ) :
 if os . path . exists ( pot_path ) :
          value = escape ( value )
          raise
    elif safe_input :
 pks = set ( force_text ( getattr ( o , key ) ) for o in qs )
 msg_count += 1
   if type ( s ) == bytes :
 from django . utils . encoding import force_text , iri_to_uri
      child_nodelists = ( 'nodelist_true' , 'nodelist_false' )
 offset = ( len ( self . __starttag_text )  - self . __starttag_text . rfind ( "\n" ) )
            raise CommandError ( "Django doesn't know which syntax to use for your SQL statements,\n" +  "because you haven't properly specified the ENGINE setting for the database.\n" +  "see: https://docs.djangoproject.com/en/dev/ref/settings/#databases" )
 from django . utils . six . moves . urllib . parse import quote
   attrs = attrs or { }
          return formats . date_format ( value , arg )
  elif self . _meta . exclude and field in self . _meta . exclude :
 from django . utils . functional import cached_property
      def _key_to_file ( self , key , version = None ) :
   def is_multipart ( self ) :
  return filename , display_url
     @ python_2_unicode_compatible
              label_for = format_html ( ' for="{0}"' , self . id_for_label )
   filelist = random . sample ( filelist ,  int ( num_entries / self . _cull_frequency ) )
  super ( BaseModelFormSet , self ) . add_fields ( form , index )
 kwargs [ 'instance' ] = self . _existing_object ( pk )
 field_notes . append ( 'Field renamed because of name conflict.' )
 char2number = { 'a' : '2' , 'b' : '2' , 'c' : '2' , 'd' : '3' , 'e' : '3' , 'f' : '3' ,  'g' : '4' , 'h' : '4' , 'i' : '4' , 'j' : '5' , 'k' : '5' , 'l' : '5' , 'm' : '6' ,  'n' : '6' , 'o' : '6' , 'p' : '7' , 'q' : '7' , 'r' : '7' , 's' : '7' , 't' : '8' ,  'u' : '8' , 'v' : '8' , 'w' : '9' , 'x' : '9' , 'y' : '9' , 'z' : '9' }
    return False
      def delete ( self , name ) :
   POST = property ( _get_post , _set_post )
 from django . core . files . utils import FileProxyMixin
              self . validators . append ( validators . MaxLengthValidator ( int ( max_length ) ) )
 for subwidget in self . field . widget . subwidgets ( self . html_name , self . value ( ) , attrs ) :
 starttag_re = re . compile ( r'<%s(/?>|(\s+[^>]*>))' % tags_re , re . U )
              if not self . required :
 for key in self :
  return EscapeBytes ( bytes ( s ) )
  if bmatch . group ( 1 ) :
  else :
 pass
   for message in messages :
 remove = complain
                  kwargs [ 'initial' ] = self . initial_extra [ i - self . initial_form_count ( ) ]
  return value
              return LazyStream ( BoundaryIter ( self . _stream , self . _boundary ) )
  return self . _fname
  if bits [ 4 ] != 'as' :
      is_usable = True
 from django . utils . http import cookie_date
 obj . attrs = self . attrs . copy ( )
 if value == self . empty_value or value in self . empty_values :
 self . view_name = ':' . join ( self . namespaces + [ view_path ] )
      return { 'request' : request }
           class X ( object ) :
              return None
              response = func ( request , response )
                     return FILE_INPUT_CONTRADICTION
 __delitem__ = new_method_proxy ( operator . delitem )
   def __str__ ( self ) :
                  self . waiting_readers += 1
          for node in self . nodelist :
   def _save ( self , name , content ) :
 if hasattr ( _active , "value" ) :
   class BaseConverter ( object ) :
    if six . PY3 :
          return isinstance ( other , self . __class__ ) and ( self . limit_value == other . limit_value ) and ( self . message == other . message ) and ( self . code == other . code )
                              field_type = 'ForeignKey(%s' % rel_to
                  output . append ( self . render_option ( selected_choices , option_value , option_label ) )
          try :
 from __future__ import unicode_literals
 from __future__ import unicode_literals
          return ''
 url = hashlib . md5 ( force_bytes ( iri_to_uri ( request . build_absolute_uri ( ) ) ) )
          raise TemplateSyntaxError ( "widthratio takes at least three arguments" )
   if cwords [ 0 ] == 'runfcgi' :
       for field in model . _meta . many_to_many :
 label = bf . label_tag ( label ) or ''
 if not parent :
 from inspect import getargspec , getcallargs
          urlconf = get_urlconf ( )
     @ register . filter ( "timeuntil" , is_safe = False )
 @ stringfilter
  if not self . invoked_for_django :
 from django . utils import six
 args = [  'xgettext' ,  '-d' , domain ,  '--language=Python' ,  '--keyword=gettext_noop' ,  '--keyword=gettext_lazy' ,  '--keyword=ngettext_lazy:1,2' ,  '--keyword=ugettext_noop' ,  '--keyword=ugettext_lazy' ,  '--keyword=ungettext_lazy:1,2' ,  '--keyword=pgettext:1c,2' ,  '--keyword=npgettext:1c,2,3' ,  '--keyword=pgettext_lazy:1c,2' ,  '--keyword=npgettext_lazy:1c,2,3' ,  '--output=-'  ] + command . xgettext_options
   @ cached_property
 if text == '' and len ( opts ) == 1 and opts [ 0 ] == 'reset' :
 def dictsort ( value , arg ) :
 self . directory_permissions_mode = (  directory_permissions_mode if directory_permissions_mode is not None  else settings . FILE_UPLOAD_DIRECTORY_PERMISSIONS  )
  return _HashedSeq ( key )
 exctype , value = exc_info [ : 2 ]
 attachment = SafeMIMEText ( content , subtype , encoding )
          return six . text_type ( s , encoding , 'replace' )
  except OSError :
   def gen_filenames ( only_new = False ) :
 symlink_path = os . path . join ( tmpdir , 'symlink' )
          return "<Block Node: %s. Contents: %r>" % ( self . name , self . nodelist )
  sys . stdout , sys . stderr = so , se
      if isinstance ( number , int ) :
 if timeout == DEFAULT_TIMEOUT :
 warnings . warn ( "memoize wrapper is deprecated and will be removed in "  "Django 1.9. Use django.utils.lru_cache instead." ,  RemovedInDjango19Warning , stacklevel = 2 )
 new_second_item = [ ]
 self . exclude = getattr ( options , 'exclude' , None )
          parent = self . parent_name . resolve ( context )
              self . _non_form_errors = self . error_class ( e . error_list )
                       self . _request_middleware = None
                              t = select_template ( file_name )
 return f . fileno ( ) if hasattr ( f , 'fileno' ) else f
  return value . strip ( )
     if self . verbosity > 1 :
   kwargs = { }
 if simple_url_re . match ( middle ) :
  except IndexError :
              if key in dict_ :
    def copy ( self ) :
  except AttributeError :
   if sys . version_info >= ( 2 , 7 , 2 ) :
  else :
 has_new_option = hasattr ( self , 'requires_system_checks' )
           return __proxy__ ( args , kw )
            if cursor and close_connection :
          for item in self . items :
          natural_key = obj . natural_key ( )
          self . seek ( 0 )
   def _format_value ( self , value ) :
 self . new_method_name = new_method_name
 msg = self . _create_message ( msg )
    def get_bytes_from_wsgi ( environ , key , default ) :
              checks = self . registered_checks
  __len__ = new_method_proxy ( len )
   raise TypeError ( "Lazy object returned unexpected type." )
                  continue
      help = "Prints the DROP TABLE SQL statements for the given app name(s)."
                   return self . tag_function ( name )
      def __init__ ( self , filter_expr , nodelist ) :
  if labels and f . name in labels :
                  tried . append ( filepath )
 self . args = args
      format_key = 'TIME_INPUT_FORMATS'
  if data is not None :
                      app_config = apps . get_app_config ( exclude )
              value = [ ]
  get_text_list = allow_lazy ( get_text_list , six . text_type )
  else :
 from django . db . migrations . loader import AmbiguityError
   def total_form_count ( self ) :
 def __new__ ( mcs , name , bases , attrs ) :
              if self . app_label and app_config . label != self . app_label :
                          raise CommandError ( "Unknown application: %s" % app_label )
 if cached is not None :
 raise NotImplementedError ( 'subclasses of Storage must provide a size() method' )
          yaml . dump ( self . objects , self . stream , Dumper = DjangoSafeDumper , ** self . options )
 def _get_width ( self ) :
 from django . utils . deprecation import RemovedInDjango19Warning
  except base . DeserializationError :
  except KeyError :
          super ( StringOrigin , self ) . __init__ ( UNKNOWN_SOURCE )
 return duplicate
                          continue
                      val = getattr ( module , format_type )
   return self . _count
  elif options [ "daemonize" ] . lower ( ) in ( 'false' , 'no' , 'f' ) :
  if hasattr ( TemplateLoader , 'load_template_source' ) :
                  if issues :
 link_prev , link_next , key , result = link
    fields . update ( new_class . declared_fields )
          return True
 from django . core . management . templates import TemplateCommand
 args = [ ]
      if termios :
           try :
          int ( value )
              msg = self . style . HTTP_INFO ( msg )
      input_type = 'url'
 widget = SelectMultiple
  def __call__ ( self , environ , start_response ) :
                  values = [ ]
    def has_leading_dir ( self , paths ) :
 handler . addQuickElement ( "link" , "" , { "href" : item [ 'link' ] , "rel" : "alternate" } )
  elif getattr ( current , 'alters_data' , False ) :
              end = len ( s )
          orig_vars = cls . __dict__ . copy ( )
     _caches = { }
      widget = DateInput
   def _iteritems ( self ) :
    from django . conf import settings
  if token . token_type == 0 :
          return bool ( self . dict )
   if hasattr ( test_runner_class , 'add_arguments' ) :
              validate_ipv6_address ( value )
  full_statement = [ "CREATE TABLE %s (" % qn ( tablename ) ]
    model_dependencies . append ( ( model , deps ) )
 for character in name :
              self [ key ] = result
                          break
 for medium in extend :
               return 0
 value , timestamp = result . rsplit ( self . sep , 1 )
          if isinstance ( data , ( MultiValueDict , MergeDict ) ) :
 if not value or isinstance ( value , ( list , tuple ) ) :
              stream_class = BytesIO
 def ifequal ( parser , token ) :
  except AttributeError :
   def start_index ( self ) :
                            field_type , field_params , field_notes = self . get_field_type ( connection , table_name , row )
              return True
 from django . utils . text import unescape_entities
 _empty_value = [ ]
   dir_suffix = '%s*' % os . sep
 def byte2int ( bs ) :
 codecs . lookup ( encoding )
       if transaction . get_autocommit ( self . using ) :
          fn = code_changed
      return _trans . get_language_from_request ( request , check_path )
 return WithNode ( None , None , nodelist , extra_context = extra_context )
 self . attachments = attachments or [ ]
 from django . utils . six import StringIO
     @ deconstructible
  def __init__ ( self , attrs = None , render_value = False ) :
 if fields is not None :
 obj . __class__ = self . __class__
  def items ( self ) :
   @ property
  else :
   else :
                  options += [ ( s_opt . get_opt_string ( ) , s_opt . nargs ) for s_opt in  parser . option_list ]
 lexer_class , parser_class = DebugLexer , DebugParser
          lang = get_language ( )
 response [ 'Vary' ] = ', ' . join ( vary_headers + additional_headers )
 str_number = six . text_type ( number )
 def nodelist ( self ) :
  filename = os . path . join ( to_path , name )
 self . xml . endElement ( "natural" )
 from django . core . serializers . python import Deserializer as PythonDeserializer
                  if isinstance ( value , str ) :
  def render ( self , context ) :
    else :
     class ChoiceField ( Field ) :
 if self . compare ( cleaned , self . limit_value ) :
     utf8_charset = Charset . Charset ( 'utf-8' )
 return [ to_py ( val ) for val in value ]
   class SerializerDoesNotExist ( KeyError ) :
                      self . stdout . write ( errors )
   return base . DeserializedObject ( obj , m2m_data )
              id_for_label = widget . id_for_label ( id_ )
 trans_bit = [ bit ]
  raise KeyError ( 'Unknown media type "%s"' % name )
 while ch != terminal_char :
          items = _iteritems
 from django . core . serializers . base import SerializerDoesNotExist
              return get_supported_language_variant ( accept_lang )
              self [ key ] = result
 from django . utils . deprecation import RemovedInDjango19Warning
  table_name_filter = options . get ( 'table_name_filter' )
  except LookupError :
   def clear ( self ) :
  formatted = "\n" . join ( sorted ( formatted ) )
     class URLNode ( Node ) :
                  result . append ( self . create_token ( bit , in_tag ) )
     def find_template ( name , dirs = None ) :
              if key in dict_ :
  else :
  elif args [ 1 ] == '404' :
          templatetags_modules = get_templatetags_modules ( )
  except ImportError :
          if not _cookie_encodes_correctly :
 fixture_name , ser_fmt , cmp_fmt = self . parse_name ( fixture_label )
 return (  path or '%s.%s' % ( obj . __class__ . __module__ , obj . __class__ . __name__ ) ,  obj . _constructor_args [ 0 ] ,  obj . _constructor_args [ 1 ] ,  )
              k = force_bytes ( k , self . encoding )
          super ( Command , self ) . add_arguments ( parser )
 namemap = options . get ( 'with' , { } )
          super ( DateTimeBaseInput , self ) . __init__ ( attrs )
          cache_timeout = 0
              raise TemplateSyntaxError ( 'The %r option was specified more '  'than once.' % option )
    if hasattr ( data , 'temporary_file_path' ) :
              handler . addQuickElement ( "category" , cat )
      def print_ ( * args , ** kwargs ) :
      def __init__ ( self , lexer ) :
      pass
                  raise CommandError ( "App '%s' does not have migrations (you cannot selectively sync unmigrated apps)" % app_label )
 try :
     class RegexField ( CharField ) :
  register_to = kwargs . get ( 'register_to' )
  except ( ValueError , self . queryset . model . DoesNotExist ) :
   def __str__ ( self ) :
              return node . render ( context )
   def add_js ( self , data ) :
 try :
    @ register . filter ( is_safe = True )
                      parent_pat = pattern . regex . pattern
          if not fname . startswith ( self . _dir ) or not os . path . exists ( fname ) :
          if filter_name in self . filters :
 self . label_suffix = label_suffix
  for state , rules in states . items ( ) :
 if not roots :
                      middle = middle [ : - len ( punctuation ) ]
              msg [ 'Cc' ] = ', ' . join ( self . cc )
  elif value is False :
 for dict_ in self . dicts :
  app_template_dirs . append ( template_dir )
      parser = CommandParser ( None , usage = "%(prog)s subcommand [options] [args]" , add_help = False )
 process_all = options . get ( 'all' )
          for elt in source :
 super ( BaseModelFormSet , self ) . __init__ ( ** defaults )
 safe = isinstance ( value , SafeData )
  url_markup_template = '<a href="{0}">{1}</a>'
                  msg = ( "%(model)s.Meta.%(opt)s cannot be a string. "  "Did you mean to type: ('%(value)s',)?" % {  'model' : new_class . __name__ ,  'opt' : opt ,  'value' : value ,  } )
  elif name == 'string' :
   @ property
          return ''
      def __init__ ( self , attrs = None , check_test = None ) :
 dictConfigClass ( config ) . configure ( )
  bits = host . rsplit ( ':' , 1 )
 try :
  else :
 memo [ id ( self ) ] = result
  return final_path
 if decimals > digits :
 if isinstance ( elt , Group ) :
 self . var_name = var_name
 try :
  nesting -= 1
   def attach_alternative ( self , content , mimetype ) :
  except ( ImportError , IndentationError , NameError , SyntaxError ,  TypeError , AttributeError ) :
   def tokenize ( self ) :
    return type ( form ) ( class_name , ( form , ) , form_class_attrs )
 from django . utils . text import get_text_list
  def start_serialization ( self ) :
     if not url_info . netloc and url_info . scheme :
  rawdata = self . rawdata
  CONVERT_PATTERN = re . compile ( r'^(?P<prefix>[a-z]+)://(?P<suffix>.*)$' )
   __all__ = ( 'BaseFormSet' , 'formset_factory' , 'all_valid' )
  if request . method == 'HEAD' :
    wrapper . __wrapped__ = user_function
  fields = [ ( field_name , attrs . pop ( field_name ) ) for field_name , obj in list ( six . iteritems ( attrs ) ) if isinstance ( obj , Field ) ]
  return self . nodelist . render ( new_context )
          return self . _reverse_with_prefix ( lookup_view , '' , * args , ** kwargs )
                              obj = field . rel . to . _default_manager . db_manager ( db ) . get_by_natural_key ( * field_value )
  bytes_read = 0
    def all_locale_paths ( ) :
 super ( GenericIPAddressField , self ) . __init__ ( * args , ** kwargs )
              self . stdout . write ( "Loading '%s' fixtures..." % fixture_name )
 if lib :
  def __init__ ( self , tokens ) :
 response = http . HttpResponseBadRequest ( )
 return self . data . year
                   pass
                  if name in lib . tags :
  except ( LookupError , BinasciiError ) as e :
 from django . core . management . sql import sql_create
  if command in parse_until :
 from django . utils import six
              for dirpath , dirnames , locale_filenames in os . walk ( basedir ) :
 def __init__ ( self , initlist = None , error_class = None ) :
      class Deserializer ( six . Iterator ) :
    cursor = connection . cursor ( )
              self . stdout . write ( self . style . MIGRATE_HEADING ( "Will squash the following migrations:" ) )
  break
     def common_logger_config ( self , logger , config , incremental = False ) :
 import time
    def save ( self , commit = True ) :
 from django . conf import settings
 self . _unget_history = [ ]
  else :
 comment = [ ]
                       if row_data in seen_data :
          return apps . get_model ( model_identifier )
    def get_renderer ( self , name , value , attrs = None , choices = ( ) ) :
 def do_include ( parser , token ) :
 base_directory = '%s_directory' % app_or_project
  re_formatchars = re . compile ( r'(?<!\\)([aAbBcdDeEfFgGhHiIjlLmMnNoOPrsStTUuwWyYzZ])' )
                              continue
                  raise TypeError ( "sep must be None or a string" )
               iter ( second_item )
  from django . core . management . base import BaseCommand
  from django . conf import settings
      if self . has_header ( 'Content-Encoding' ) :
                  qs = self . model . _default_manager . get_queryset ( )
          pass
  return r
                if comment_lineno_cache is not None :
     class DateFormat ( TimeFormat ) :
                  raise
              raise InvalidTemplateLibrary ( "Template library %s not found, "  "tried %s" %  ( library_name ,  ',' . join ( tried_modules ) ) )
  elif isinstance ( value , six . string_types ) :
              return [ ]
          return "Error in formatting: %s" % force_text ( e , errors = "replace" )
                      raise
  targets = [ key for key in executor . loader . graph . leaf_nodes ( ) if key [ 0 ] == app_label ]
  except LookupError :
 class MinValueValidator ( BaseValidator ) :
 commands = { name : 'django.core' for name in find_commands ( __path__ [ 0 ] ) }
 if not self . connection :
                              result . append ( Group ( ( ( "%%(%s)s" % param ) , param ) ) )
          for line in text . splitlines ( True ) :
                  attrs [ 'pk' ] = smart_text ( obj_pk )
   for t in Lexer ( src , origin ) . tokenize ( ) :
              if field is not None :
 def content ( self ) :
 return ''
                      raise ValueError ( "MultiValueDict.update() takes either a MultiValueDict or dictionary" )
    class StopFutureHandlers ( UploadFileException ) :
   def as_json ( self , escape_html = False ) :
                  if e . errno != errno . EEXIST :
 import tempfile
  unescape_string_literal = allow_lazy ( unescape_string_literal )
                  field_value = getInnerText ( node ) . strip ( )
 converter = connection . introspection . table_name_converter
   def get_json_data ( self , escape_html = False ) :
  for domain in domains :
 for key , value in list ( attrs . items ( ) ) :
 raise NotImplementedError ( 'subclasses of Widget must provide a render() method' )
 if bits [ 2 ] != 'by' :
 for field in self . fields . values ( ) :
          length = int ( arg )
          self . style = color_style ( )
              yield ch , False
   def _ipython ( self ) :
   else :
    def inotify_code_changed ( ) :
      def __init__ ( self , filter_expression ) :
                  pass
  return self . handle_noargs ( ** options )
 if day_of_year <= ( 8 - jan1_weekday ) and jan1_weekday > 4 :
 from django . http . utils import fix_location_header , conditional_content_removal
                  if not token . contents :
              self . connection = get_connection ( fail_silently = fail_silently )
              if not callable ( original_lookup ) and callable ( lookup_view ) :
 for path in collect :
          raise parser . error_class ( "Unexpected end of expression in if tag." )
   def unescape_string_literal ( s ) :
 import glob
          _load_serializers ( )
  return self . _dimensions_cache
 LOCK_EX = fcntl . LOCK_EX
              if can_fail :
 def reset_cache ( ** kwargs ) :
  else :
  else :
  else :
      widget = Select
  widget = self . field . widget
              id_ = 'id_%s' % name
 pass
 if callable ( getattr ( self . stream , 'getvalue' , None ) ) :
  def nud ( self , parser ) :
          stream . unget ( chunk )
   attachment = self . _create_mime_attachment ( content , mimetype )
   elif cls . _delegate_bytes :
     class Error ( CheckMessage ) :
              file_field_list . append ( f )
              raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
     class SafeBytes ( bytes , SafeData ) :
 from django . utils import timezone
                  filename . encode ( 'ascii' )
   level = config . pop ( 'level' , None )
  def add_arguments ( self , parser ) :
          if find_command ( program ) is None :
        @ register . filter ( is_safe = True )
  value = b'' . join ( self . make_bytes ( chunk ) for chunk in value )
   def _create_message ( self , msg ) :
                              field_type = 'NullBooleanField('
              handler . addQuickElement ( "language" , self . feed [ 'language' ] )
 MAX_NUM_FORM_COUNT = 'MAX_NUM_FORMS'
 parser . add_option ( '--traceback' , action = 'store_true' ,  help = 'Raise on exception' )
 if options :
      import bz2
 return d ( stream_or_string , ** options )
 parser = MultiPartParser ( META , post_data , self . upload_handlers , self . encoding )
 formatted_subject = subject . replace ( '\n' , '\\n' ) . replace ( '\r' , '\\r' )
      plist = [ ]
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
 for pattern in self . url_patterns :
  from django . utils . deprecation import RemovedInDjango19Warning
           base64d = base64d [ 1 : ]
 __bool__ = new_method_proxy ( bool )
 if exp is not None and exp < time . time ( ) :
  value = smart_text ( value ) . strip ( )
  import functools
  result . append ( ( lang , priority ) )
  WEEKDAYS_ABBR = {  0 : _ ( 'Mon' ) , 1 : _ ( 'Tue' ) , 2 : _ ( 'Wed' ) , 3 : _ ( 'Thu' ) , 4 : _ ( 'Fri' ) ,  5 : _ ( 'Sat' ) , 6 : _ ( 'Sun' )  }
                  self . interesting = _html_parser . interesting_cdata
 default_error_messages = {  'list' : _ ( 'Enter a list of values.' ) ,  'invalid_choice' : _ ( 'Select a valid choice. %(value)s is not one of the'  ' available choices.' ) ,  'invalid_pk_value' : _ ( '"%(pk)s" is not a valid value for a primary key.' )  }
   def format_output ( self , rendered_widgets ) :
  del form . cleaned_data [ field ]
    finally :
          self . command_stack . append ( ( command , token . source ) )
 if settings . USE_TZ and value is not None and timezone . is_aware ( value ) :
     class ZipArchive ( BaseArchive ) :
 if value is not None :
                  return False
 if not hasattr ( template , 'render' ) :
   def __str__ ( self ) :
  kw = dict ( ( k , int ( v ) ) for k , v in six . iteritems ( kw ) if v is not None )
  def __init__ ( self , offset = None , name = None ) :
 if o . microsecond :
 def date ( value , arg = None ) :
  p_pattern = pattern . regex . pattern
   FILTER_SEPARATOR = '|'
   @ property
   def render ( self , context ) :
  from django . apps import apps
    return the_path
              if field not in self . errors :
              raise base . DeserializationError (  "<%s> node has invalid model identifier: '%s'"  % ( node . nodeName , model_identifier ) )
  if hasattr ( decorator , '__name__' ) :
 StringIO = io . StringIO
   return obj
  rv = logging . _levelNames [ level ]
 yield "#   * Rearrange models' order"
  if exclude and f . name in exclude :
 from django . db import connections , DEFAULT_DB_ALIAS
  def __init__ ( self , request , template , context = None , content_type = None ,  status = None , current_app = None ) :
 if not hasattr ( other_dict , '__getitem__' ) :
               if len ( language [ p + 1 : ] ) > 2 :
       for name , field in self . fields . items ( ) :
 is_localized = False
 self . _post_parse_error = False
      help = 'Discover and run tests in the specified modules or the current directory.'
  url = urlunsplit ( ( scheme , netloc , path , query , fragment ) )
   @ upload_handlers . setter
  return self . _text_chars ( length , truncate , text , truncate_len )
 parser . add_argument ( '--no-location' , action = 'store_true' , dest = 'no_location' ,  default = False , help = "Don't write '#: filename:line' lines." )
 from django . db import connections , DEFAULT_DB_ALIAS
          raise
  else :
           raise parser . error_class (  "Not expecting '%s' as infix operator in if tag." % self . id  )
  super ( SimpleCookie , self ) . load ( rawdata )
   @ property
  else :
 self . pos = 0
   def copy ( self ) :
    @ register . filter ( "phone2numeric" , is_safe = True )
          warnings . warn ( "The syncdb command will be removed in Django 1.9" , RemovedInDjango19Warning )
 s1 = time . strftime ( fmt , ( year , ) + timetuple [ 1 : ] )
  elif not options [ "socket" ] and not options [ "host" ] and not options [ "port" ] :
  return super ( CommandParser , self ) . parse_args ( args , namespace )
          self . max_value , self . min_value = max_value , min_value
          if value is None :
 input_text = ugettext_lazy ( 'Change' )
   except IOError :
      setattr ( Module_six_moves_urllib_robotparser , attr . name , attr )
  except ( ValueError , OverflowError , InvalidOperation ) :
 self . initial_extra = kwargs . pop ( 'initial' , None )
              return SafeText ( data )
 from django . utils import six
   class Node ( object ) :
                  if self . required :
 self . file . seek ( pos )
 def widthratio ( parser , token ) :
          script_name = get_bytes_from_wsgi ( environ , 'SCRIPT_NAME' , '' )
                              return settings . TEMPLATE_STRING_IF_INVALID % self . var
 if i + 1 < len ( chunks ) :
  return self . _files
    def is_valid_path ( path , urlconf = None ) :
 for f in fields :
 def phone2numeric_filter ( value ) :
                  value = None
  last = self . data . day % 10
 from django . utils import six
 class ContentFile ( File ) :
              raise IOError ( "Destination file %s exists and allow_overwrite is False" % new_file_name )
   _default = None
              value = { True : '2' , False : '3' , '2' : '2' , '3' : '3' } [ value ]
  except Exception as e :
 in_index = - 3 if is_reversed else - 2
   else :
   else :
    def get_git_changeset ( ) :
    def get_script_name ( environ ) :
 self . META [ 'SCRIPT_NAME' ] = script_name
              return [ ]
 if django . VERSION [ - 2 ] != 'final' :
   def _add_installed_apps_translations ( self ) :
  self . add_arguments ( parser )
 from django . utils . six . moves import xrange
 return
 def writer ( self ) :
  return timesince ( value )
                      if self . selected_fields is None or field . attname in self . selected_fields :
   class UploadedFile ( File ) :
 from django . utils . deprecation import RemovedInDjango19Warning
              return _ ( 'midnight' )
 from django . db import connections , DEFAULT_DB_ALIAS
 lib = libraries . get ( library_name , None )
 self . target_var = target_var
              result = datetime . datetime ( value . year , value . month , value . day )
                  i = 365
                      invalid_apps . append ( app_name )
   def __contains__ ( self , other ) :
 return self . filter ( name , func , ** flags )
  from django . conf import settings
  if _default is None :
 base56 = BaseConverter ( BASE56_ALPHABET )
              self . activated = True
 klass . __str__ = lambda self : self . __unicode__ ( ) . encode ( 'utf-8' )
  try :
 if value != '' :
           pass
   try :
 defaults = {  'auto_id' : self . auto_id ,  'prefix' : self . add_prefix ( i ) ,  'error_class' : self . error_class ,  }
  request_middleware = [ ]
                  return type . __new__ ( cls , name , ( ) , d )
 def __init__ ( self , title , link , description , language = None , author_email = None ,  author_name = None , author_link = None , subtitle = None , categories = None ,  feed_url = None , feed_copyright = None , feed_guid = None , ttl = None , ** kwargs ) :
  self . buffer = sio . read ( )
                  args = ( )
 default_validators = [ validators . URLValidator ( ) ]
  return self . __cast ( ) == other
          if not value and self . required :
   def split_contents ( self ) :
 _dict = func ( * resolved_args , ** resolved_kwargs )
   if six . PY3 :
   def _post_clean ( self ) :
              locales = all_locales
  else :
              curr = ''
   return str ( name ) , val
      if isinstance ( value , bytes ) :
            getattr ( self , 'error_dict' )
 content = templatize ( src_data , orig_file [ 2 : ] )
 message = message % ( ', ' . join ( missing_fields ) ,  opts . model . __name__ )
 day_of_year = self . z ( )
  if unhandled_params :
   def has_changed ( self ) :
          return force_str ( '<%s %s %s>' % ( self . __class__ . __name__ , self . name , self . regex . pattern ) )
          raise ValidationError ( _ ( 'Enter a valid integer.' ) , code = 'invalid' )
 def csrf_token ( parser , token ) :
  return self . template_cache [ key ]
                def __wrapper__ ( self , * args , ** kw ) :
                              try :
   def __next__ ( self ) :
 if not boundary or not cgi . valid_boundary ( boundary ) :
              if hasattr ( self . data , 'tzinfo' ) and self . data . tzinfo :
   def _construct_form ( self , i , ** kwargs ) :
 self . _add_local_translations ( )
 try :
 def __new__ ( cls , fget = None , fset = None , fdel = None , doc = None ) :
  from django . conf import settings
    if hasattr ( hmac , "compare_digest" ) :
  msg = ""
               return dec
  from django . apps import apps
  except zlib . error as e :
    global _cached_modules , _cached_filenames
  def __init__ ( self , attrs = None , format = None ) :
 year = year + off
 app . start ( )
                      for node in self . nodelist_loop :
 try :
  return flat
 obj . children = copy . deepcopy ( self . children , memodict )
    def send_messages ( self , messages ) :
   class Command ( BaseCommand ) :
    if item [ 'author_name' ] is not None :
  except serializers . SerializerDoesNotExist :
          resolved_args = [ var . resolve ( context ) for var in self . args ]
 from django . utils import six
          msg = message . message ( )
          raise ValueError ( "Base36 input too large" )
  import collections
 se = open ( err_log , 'a+' , buffering )
              raise ValidationError ( self . error_messages [ 'list' ] , code = 'list' )
              try :
 result . key = key
              return self . hashvalue
  return self . _object_dict . get ( pk )
 num_args += 1
  def items ( self ) :
 from django . utils . encoding import force_str , force_text , iri_to_uri
 return make_middleware_decorator ( middleware_class )
          return self . __offset
   elif name == 'id' :
   else :
                  yield field , list ( ValidationError ( errors ) )
 parser . add_argument ( '--tag' , '-t' , action = 'append' , dest = 'tags' ,  help = 'Run only checks labeled with given tag.' )
 try :
              self . attrs = attrs . copy ( )
  sys . modules [ __name__ + ".moves.urllib_response" ] = sys . modules [ __name__ + ".moves.urllib.response" ] = Module_six_moves_urllib_response ( __name__ + ".moves.urllib.response" )
   from django . template . base import ( ContextPopException , InvalidTemplateLibrary ,  TemplateDoesNotExist , TemplateEncodingError , TemplateSyntaxError ,  VariableDoesNotExist )
  else :
  logging . _handlers . clear ( )
  for issues , group_name in sorted_issues :
  __all__ = ( 'MultiPartParser' , 'MultiPartParserError' , 'InputStreamExhausted' )
          return '<ExtendsNode: extends %s>' % self . parent_name . token
              app_name = commands [ subcommand ]
 if hasattr ( signal , 'SIGTTOU' ) :
 self . validators . append ( self . _regex_validator )
      Signer = import_string ( settings . SIGNING_BACKEND )
                  response = middleware_method ( request )
 month_field = '%s_month'
          tables = connection . introspection . table_names ( )
 if push is not None :
              self . stdout . write ( 'examining files with the extensions: %s\n'  % get_text_list ( list ( self . extensions ) , 'and' ) )
      if PY3 :
  formfield . queryset = formfield . queryset . complex_filter ( limit_choices_to )
              exit_code = restart_with_reloader ( )
              form = self . forms [ i ]
 from PIL import ImageFile as PillowImageFile
   NOCOLOR_PALETTE = 'nocolor'
 dirname = os . path . dirname ( filename )
                  return 'https'
  return SafeString ( str ( s ) )
          if float ( value ) != 1 :
              raise CommandError ( "Database inspection isn't supported for the currently selected database backend." )
   def compress ( self , data_list ) :
  elif pluralmatch :
   if item [ 'updateddate' ] is not None :
  import copy
          args = [ sys . executable ] + [ '-W%s' % o for o in sys . warnoptions ] + sys . argv
          d = datetime . datetime ( d . year , d . month , d . day )
          return ''
 return WSGIHandler ( )
 if len ( list_ ) == 0 :
 self . asvar = asvar
  def copy ( self ) :
  else :
  potfiles . append ( potfile )
 self . help_texts = getattr ( options , 'help_texts' , None )
  except AttributeError :
     class RegroupNode ( Node ) :
  else :
 if num_repl > 0 :
      callable = callable
   def render_css ( self ) :
     class lazy_property ( property ) :
              continue
 return six . text_type ( self . data . year ) [ 2 : ]
 try :
 def id_for_label ( self ) :
 self . years = range ( this_year , this_year + 10 )
    def __str__ ( self ) :
   if p . image :
     class LoadNode ( Node ) :
   if not changes and self . verbosity >= 1 :
    _mutable = True
  return '\n' . join ( output )
                          description = "An instance of the '%s' class" % receiver . __class__ . __name__
 from django . forms . utils import from_current_timezone , to_current_timezone
              return lookup_view
   def get_block ( self , name ) :
   def get ( self , key , default = None ) :
      ungettext = ngettext
 url_fields [ 2 ] = ''
  elif self . verbosity > 0 :
                  parser . add_option ( opt )
   def __nonzero__ ( self ) :
  import os
   if _cookie_encodes_correctly and _cookie_allows_colon_in_names :
              logging_config_func ( logging_settings )
   def handle ( self , ** options ) :
  try :
 obj = Node ( connector = self . connector , negated = self . negated )
          is_dst = False if dt is None else self . _isdst ( dt )
          return value
 excludes = options . get ( 'exclude' )
  except TypeError :
 self . base = base
   def _prepare_data ( self , data ) :
          def lock ( f , flags ) :
   def _has_changed ( self , initial , data ) :
              return timedelta ( 0 )
                  not_found . append ( e . args [ 0 ] )
  return '\n\n' . join ( paras )
 with io . open ( orig_file , encoding = settings . FILE_CHARSET ) as fp :
                  if field != NON_FIELD_ERRORS and field not in self . fields :
 if self . check_test ( value ) :
 self . xml . startDocument ( )
   return super ( BaseModelFormSet , self ) . _construct_form ( i , ** kwargs )
 val2 = self . var2 . resolve ( context , True )
  from django . http import Http404
              output . append ( '* %s' % field )
 sys . stderr . close ( )
               palette . update ( PALETTES [ part ] )
 def wordcount ( value ) :
              return True
 self . charset = None
   def _construct_form ( self , i , ** kwargs ) :
 from django . utils . encoding import force_str , force_text
  item = {  'title' : to_unicode ( title ) ,  'link' : iri_to_uri ( link ) ,  'description' : to_unicode ( description ) ,  'author_email' : to_unicode ( author_email ) ,  'author_name' : to_unicode ( author_name ) ,  'author_link' : iri_to_uri ( author_link ) ,  'pubdate' : pubdate ,  'updateddate' : updateddate ,  'comments' : to_unicode ( comments ) ,  'unique_id' : to_unicode ( unique_id ) ,  'unique_id_is_permalink' : unique_id_is_permalink ,  'enclosure' : enclosure ,  'categories' : categories or ( ) ,  'item_copyright' : to_unicode ( item_copyright ) ,  'ttl' : ttl ,  }
   def _load_post_and_files ( self ) :
              pathext = [ '' ]
 if bits [ in_index ] != 'in' :
   def remove_tags ( html , tags ) :
 model_identifier = node . getAttribute ( attr )
 import re
              self . error ( self . cmd . missing_args_message )
try :
  def __init__ ( self , template , context = None , content_type = None , status = None ) :
  for key , value in parse_qsl ( query_string or '' ,  keep_blank_values = True ,  encoding = encoding ) :
          result = copy . copy ( self )
              raise ValueError ( "@python_2_unicode_compatible cannot be applied "  "to %s because it doesn't define __str__()." %  klass . __name__ )
                  if pattern . namespace :
                      relations = connection . introspection . get_relations ( cursor , table_name )
  if ( getattr ( meta , 'fields' , fields ) is None and  getattr ( meta , 'exclude' , exclude ) is None ) :
 if len ( bits ) != 6 :
              handler . addQuickElement ( "atom:link" , None ,  { "rel" : "self" , "href" : self . feed [ 'feed_url' ] } )
         if six . PY3 or os . name == 'nt' :
                  return expanded_template
   def __repr__ ( self ) :
     class DateField ( BaseTemporalField ) :
              result . setlist ( copy . deepcopy ( key , memo ) , copy . deepcopy ( value , memo ) )
  else :
 return self
  del attr
 use_grouping = use_grouping and grouping > 0
   from django . template . base import ( Context , FilterExpression , Lexer , Node ,  NodeList , Parser , RequestContext , Origin , StringOrigin , Template ,  TextNode , Token , TokenParser , Variable , VariableNode , constant_string ,  filter_raw_string )
 timezone = ( offset . days * 24 * 60 ) + ( offset . seconds // 60 )
              if arg . startswith ( option ) :
      is_usable = True
  import datetime
  if code is not None :
 for name , tok in lexer . lex ( js ) :
  return lazy ( func , * resultclasses ) ( * args , ** kwargs )
  def __init__ ( self , stream , boundary ) :
 self . selected_fields = options . pop ( "fields" , None )
    def allow_lazy ( func , * resultclasses ) :
  return repr ( list ( self ) )
                  self . stdout . write ( 'processing file %s in %s\n' % ( f , dirpath ) )
  if col_name . lower ( ) . find ( '__' ) >= 0 :
   def __getattr__ ( self , name ) :
  return value
 model = None
from __future__ import unicode_literals
 break
                              app_list_value . append ( model )
              try :
 for lookup , arg in args :
  def __init__ ( self , * args , ** kwargs ) :
  elif bytes < PB :
          _default = translation ( settings . LANGUAGE_CODE )
                      return supported_code
 try :
                              self . handle_fk_field ( obj , field )
  else :
    @ property
   class BaseEmailBackend ( object ) :
  return self . number * self . paginator . per_page
 code = 'max_value'
  finally :
              self . reason_phrase = REASON_PHRASES . get ( self . status_code ,  'UNKNOWN STATUS CODE' )
 if not rest :
                   break
 form . _errors [ NON_FIELD_ERRORS ] = self . error_class ( [ self . get_form_error ( ) ] )
  request_started = Signal ( )
          httpd_cls = WSGIServer
    def __call__ ( self , value ) :
  else :
 from django . utils import formats
 parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database onto which the cache tables will be '  'installed. Defaults to the "default" database.' )
  def __init__ ( self , digits , sign = '-' ) :
  try :
              pass
  localize = kwargs . get ( 'localize' , False )
 from django . http . response import ( HttpResponse , StreamingHttpResponse ,  HttpResponseRedirect , HttpResponsePermanentRedirect ,  HttpResponseNotModified , HttpResponseBadRequest , HttpResponseForbidden ,  HttpResponseNotFound , HttpResponseNotAllowed , HttpResponseGone ,  HttpResponseServerError , Http404 , BadHeaderError , JsonResponse )
   def __eq__ ( self , other ) :
   def __iter__ ( self ) :
  block_context = context . render_context [ BLOCK_CONTEXT_KEY ]
          self . max_digits , self . decimal_places = max_digits , decimal_places
                                  getcallargs ( current )
          parser . add_argument ( 'args' , metavar = 'fixture' , nargs = '*' ,  help = 'Path(s) to fixtures to load before running the server.' )
  return id_
 inner_html = '<li>{choice_value}{sub_widgets}</li>'
 self . var = var_obj
   def _truncate_html ( self , length , truncate , text , truncate_len , words ) :
   if not changed :
 def do_filter ( parser , token ) :
                  cur_lineno = t . lineno + t . contents . count ( '\n' )
 self . _catalog = translation . _catalog . copy ( )
   def write ( self , content ) :
                              return True
   def full_clean ( self ) :
 super ( EmailBackend , self ) . __init__ ( * args , ** kwargs )
 from importlib import import_module
 if autoescape :
  def add_arguments ( self , parser ) :
  fixture_files_in_dir = [ ]
              chunk_size = self . DEFAULT_CHUNK_SIZE
 if not autoescape or isinstance ( value , SafeData ) :
   return False
 from django . forms . fields import IntegerField , BooleanField
          self . loopvars , self . sequence = loopvars , sequence
                  return kwargs
              return s . decode ( 'utf-8' , errors ) . encode ( encoding , errors )
    def ensure_echo_on ( ) :
  return [ first_item , second_item ] , old_style_list
  return sign + int_part + dec_part
    if response is None :
  else :
              raise KeyError ( "Unknown language code %s." % lang_code )
                      raise CommandError (  "errors happened while running msgattrib\n%s" % errors )
          response [ 'Last-Modified' ] = http_date ( )
   return data
          parser . add_argument ( '--all' , action = 'store_true' , dest = 'all' , default = False ,  help = 'Display all settings, regardless of their value. '  'Default values are prefixed by "###".' )
          try :
  except KeyError :
   else :
 self . html_initial_name = form . add_initial_prefix ( name )
   return False
 root = [ ]
 created_models = set ( )
   class TranslatorCommentWarning ( SyntaxWarning ) :
    def read ( self ) :
          super ( DebugParser , self ) . __init__ ( lexer )
              kwargs [ 'localize' ] = True
 return import_string ( path ) ( * args , ** kwargs )
            if sys . version_info [ : 2 ] == ( 3 , 2 ) :
 for site in sites :
   def wrap ( text , width ) :
 from django . conf import settings
  target_app_labels_only = False
    def _is_expired ( self , f ) :
  if isinstance ( s , bytes ) or ( isinstance ( s , Promise ) and s . _delegate_bytes ) :
              app_label = options [ 'app_label' ]
   if hasattr ( middleware , 'process_view' ) :
                  widget = HiddenInput
    def _check_middleware_classes ( app_configs = None , ** kwargs ) :
  result = user_function ( * args , ** kwds )
  try :
  if item [ 'author_link' ] is not None :
   def _isdst ( self , dt ) :
                  push = block = block_context . pop ( self . name )
    def gettext_noop ( message ) :
              if six . PY2 :
          if isinstance ( self . warning , Exception ) :
 cache [ key ] = result
   def __call__ ( self , template_name , template_dirs = None ) :
              return field in self . errors
 t = re . sub ( "([a-z])'([A-Z])" , lambda m : m . group ( 0 ) . lower ( ) , value . title ( ) )
 if meta is None :
                      break
 from django . forms . utils import ErrorList
              new_conn_created = self . open ( )
 django_dir = os . path . normpath ( os . path . join ( os . path . dirname ( django . __file__ ) ) )
 __setslice__ = complain
              raise CommandError ( "Type '%s help %s' for usage information." % (  os . path . basename ( sys . argv [ 0 ] ) , sys . argv [ 1 ] ) )
  self . _current = None
                      pk_value = None
          attrs = super ( FloatField , self ) . widget_attrs ( widget )
              p = i
   if host [ - 1 ] == ']' :
 try :
            if hasattr ( self , '_choices' ) :
   def to_python ( self , value ) :
          cursor = connection . cursor ( )
  else :
 widget = SelectMultiple
                      self . stdout . write ( "processing locale %s\n" % locale )
          attrs [ 'localized_fields' ] = localized_fields
 from django . forms . formsets import *
          for d in reversed ( self . dicts ) :
   def render ( self , context ) :
                  return six . text_type ( s ) . encode ( encoding )
 import sys
                  break
              return self . forms [ 0 ] . is_multipart ( )
 link = [ last , root , key , result ]
 def content ( self , value ) :
 from django . db . migrations . loader import AmbiguityError
 ch , escaped = next ( pattern_iter )
 opts = instance . _meta
    return week_number
 try :
              self . xml . addQuickElement ( "None" )
      def __init__ ( self , * args , ** kwargs ) :
              for result , params in possibility :
   def send ( self , fail_silently = False ) :
  warnings . warn ( "django.utils.dictconfig will be removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2 )
 if ( BLOCK_CONTEXT_KEY in render_context and  render_context [ BLOCK_CONTEXT_KEY ] . get_block ( self . name ) is not None ) :
 decimal_separator = get_format ( 'DECIMAL_SEPARATOR' )
  def b ( self ) :
    @ register . filter ( is_safe = True , needs_autoescape = True )
  else :
  from django . conf import settings
              if callable ( name ) :
          warnings . warn ( "Custom SQL location '<app_label>/models/sql' is "  "deprecated, use '<app_label>/sql' instead." ,  RemovedInDjango19Warning )
              content = File ( content )
              exc_type = type ( exc )
   def set_many ( self , data , timeout = DEFAULT_TIMEOUT , version = None ) :
 def get_resolver ( urlconf ) :
                  if isinstance ( rhs , dict ) and number :
              name = self . format ( 'O' )
              if not value or not [ v for v in value if v not in self . empty_values ] :
          raise ValueError ( "Not a string literal: %r" % s )
 from django . utils . crypto import constant_time_compare , salted_hmac
                              comment_notes . append ( 'AutoField?' )
   def __exit__ ( self , * args , ** kwargs ) :
 return result
          kwargs [ 'max_age' ] = min ( int ( cc [ 'max-age' ] ) , kwargs [ 'max_age' ] )
  s_len += 1
 def check_1_7_compatibility ( ** kwargs ) :
 self . warning = warning
              template_dirs = settings . TEMPLATE_DIRS
                  try :
     def _clean_form ( self ) :
 stream = open ( output , 'w' ) if output else None
      def jython_reloader ( main_func , args , kwargs ) :
 pass
              bytes_read += len ( bytes )
           selected_choices = set ( force_text ( v ) for v in selected_choices )
     if not settings . is_overridden ( 'TEST_RUNNER' ) :
  return value
 try :
              value = formats . sanitize_separators ( value )
                  regex = self . _regex
   from logging import NullHandler
                  return endpos
          try :
 return TEMPLATE_FRAGMENT_KEY_TEMPLATE % ( fragment_name , args . hexdigest ( ) )
    if want_unicode :
  else :
              return
 self . _producer = [ ]
 from django . utils . translation import ugettext as _
      help = "Prints the DROP INDEX SQL statements for the given model module name(s)."
              return
     class RadioChoiceInput ( ChoiceInput ) :
    parts = config_string . lower ( ) . split ( ';' )
   class Formatter ( object ) :
 super ( ChoiceField , self ) . validate ( value )
 from pprint import pformat
   def _close_files ( self ) :
   class Loader ( BaseLoader ) :
 lines = value . split ( '\n' )
                              out . write ( ' gettext(%r) ' % join_tokens ( singular ,  trimmed ) )
 obj . _constructor_args = ( args , kwargs )
          return it . next ( )
 timezone = ( offset . days * 24 * 60 ) + ( offset . seconds // 60 )
 def fdel ( instance , name = fdel . __name__ ) :
          return mark_safe ( six . text_type ( number ) )
  if bytes < KB :
          for _ , nodelist in self . conditions_nodelists :
          if response . streaming :
            cache . set ( cache_key , [ ] , cache_timeout )
   else :
          if not self . data :
  return '<%s: %r>' % ( type ( self ) . __name__ , repr_attr )
              return loader . select_template ( template )
  def transform ( self , node , results ) :
              self . _setup ( )
   def render ( self , context ) :
 internal_use_only = False
 @ stringfilter
 if len ( bits ) < 1 :
       class metaclass ( meta ) :
          return t [ 0 ] . lower ( ) , t [ 1 ]
 result = cache_get ( key , root )
          return self . __dt ,
          lang_code = request . session . get ( LANGUAGE_SESSION_KEY )
              post = ( pformat ( POST_override )  if POST_override is not None  else pformat ( request . POST ) )
  except KeyError :
   def to_python ( self , value ) :
      string_types = basestring ,
 if level is not None :
              extra_classes . add ( self . form . required_css_class )
     class RenameMethodsBase ( type ) :
          self . coerce = kwargs . pop ( 'coerce' , lambda val : val )
 i += 1
               warnings . warn ( "OptionParser usage for Django management commands "  "is deprecated, use ArgumentParser instead" ,  RemovedInDjango20Warning )
 data = { }
   @ property
    QuerySetPaginator = Paginator
 ignore = lambda pattern : fnmatch . fnmatchcase ( filename , pattern )
 import warnings
  def render ( self , context ) :
                          for c in lineno_comment_map [ comment_lineno_cache ] :
 sublist_item = None
  except ( ValueError , TypeError ) :
   used_name = the_path . split ( '/' ) [ - 1 ]
   def size ( self , name ) :
      def send_messages ( self , email_messages ) :
 self . META = environ
              context [ self . asvar ] = url
 self . _leftover = b'' . join ( [ bytes , self . _leftover ] )
  self . buffer += chunk
    def pgettext ( context , message ) :
  if isinstance ( stream_or_string , bytes ) :
  elif self . nodelist_false :
                   self . handle_startendtag ( tag , attrs )
 yield emitting
 self . validate_name ( project_name , "project" )
 if isinstance ( value , bool ) :
    class PermissionDenied ( Exception ) :
              pkg_name = 'templates/' + template_name
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
 dictreprs = ', ' . join ( repr ( d ) for d in self . dicts )
 try :
     @ python_2_unicode_compatible
 nodelist_loop = parser . parse ( ( 'else' , end_tag ) )
  else :
                               last = root [ PREV ]
              raise CommandError ( "More than one migration matches '%s' in app '%s'. Please be more specific." % (  migration_name , app_label ) )
 handler . endElement ( "item" )
 def is_hidden ( self ) :
 for k , v in data . items ( ) :
 self . FILES = MultiValueDict ( )
                  return getattr ( instance , name ) ( )
 if isinstance ( query , MultiValueDict ) :
          return self . nodelist . render ( context )
    changes = autodetector . changes (  graph = loader . graph ,  trim_to_apps = app_labels or None ,  convert_apps = app_labels or None ,  )
   if self . can_delete and self . _should_delete_form ( form ) :
      if row [ 6 ] :
 if six . PY3 :
 self . template_dirs = template_dirs
                      return '%s-%s-%s' % ( y , m , d )
 from django . utils . functional import cached_property
                      compiled_result = compile_func ( self , token )
                 if instance . pk is None :
              piece += elt [ 0 ]
 if len ( args ) != 2 :
  return Truncator ( value ) . chars ( length , html = True )
  except ImportError as e :
      def exec_ ( _code_ , _globs_ = None , _locs_ = None ) :
 created_models . add ( model )
          return force_text ( list_ [ 0 ] )
 from django . db . migrations . optimizer import MigrationOptimizer
  if not UserModel . _default_manager . exists ( ) and options . get ( 'interactive' ) :
                  self . stdout . write ( "Checking %s for fixtures..." % humanize ( fixture_dir ) )
 if ( obj . pk is None and hasattr ( Model , 'natural_key' ) and  hasattr ( Model . _default_manager , 'get_by_natural_key' ) ) :
 if settings . USE_I18N :
     def parse_http_date_safe ( date ) :
 from django . utils . encoding import force_text , filepath_to_uri
          return self . source_error ( token . source , msg )
  try :
          path = os . path . join ( app_config . path , 'management' )
     def _handle_m2m_field_node ( self , node , field ) :
   current_fields . sort ( key = lambda x : x [ 1 ] . creation_counter )
                      continue
    class EmailInput ( TextInput ) :
       finally :
          self . tokens = tokens
        @ register . filter ( "escape" , is_safe = True )
 def __init__ ( self , form , field , name ) :
  if node . getElementsByTagName ( 'None' ) :
                  res , args = flatten_result ( item )
  def save_m2m ( ) :
  except StandardError as e :
              del self . _get
 if sign in self . digits :
  except IndexError :
     class OutputWrapper ( object ) :
          fp . write ( msgs )
   importer = __import__
          neg , value = self . convert ( s , self . digits , self . decimal_digits , self . sign )
          if data in ( None , FILE_INPUT_CONTRADICTION ) :
 from django . utils . encoding import force_text
  raise DisallowedHost ( msg )
   if parse_until :
          self . _archive . close ( )
  def add_arguments ( self , parser ) :
  elif isinstance ( value , datetime . date ) :
          filter_name = getattr ( func , '_filter_name' , None )
 global _default
  def get_template_sources ( self , template_name , template_dirs = None ) :
 self . url = iri_to_uri ( url )
               raise AttributeError ( "%s could not be imported " % self . name )
    def conditional_content_removal ( request , response ) :
  else :
                      bit = next ( bits )
 try :
              msg = self . style . HTTP_BAD_REQUEST ( msg )
      zbuf = BytesIO ( )
   if options [ "pidfile" ] :
              getattr ( self , 'add_' + name ) ( media_attrs . get ( name , None ) )
                              break
 def get_ns_resolver ( ns_pattern , resolver ) :
 if six . PY3 :
 return len ( value . split ( ) )
 return b'\r\n' . join ( headers )
          return NodeList ( )
              weight += 2
     def import_library ( taglib_module ) :
                  return bytes ( self ) % rhs
    if self . _content_length == 0 :
          unique_check = [ field for field in unique_check if field != self . fk . name ]
 six . reraise ( ImproperlyConfigured , ImproperlyConfigured ( msg ) ,  sys . exc_info ( ) [ 2 ] )
   def __getinitargs__ ( self ) :
  for attr in self . rendering_attrs :
   def get ( self , header , alternate = None ) :
              if hasattr ( self , '_body' ) :
 def __init__ ( self , mode = 'w+b' , bufsize = - 1 , suffix = '' , prefix = '' ,  dir = None ) :
 try :
 with self . _lock :
 for i in range ( len ( result ) ) :
 from django . core . management . templates import TemplateCommand
              migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )
    EndToken = EndToken ( )
 from django . utils . ipv6 import is_valid_ipv6_address
              try :
 if not hasattr ( mail , 'outbox' ) :
 self . key = key or settings . SECRET_KEY
  if self . verbosity > 0 :
 try :
          raise self . error ( None , "Unclosed tags: %s " % ', ' . join ( parse_until ) )
 self . port = port or settings . EMAIL_PORT
          from django . core . urlresolvers import reverse , NoReverseMatch
     class Template ( object ) :
 if space == 0 :
              guid_attrs = { }
  cc_delim_re = re . compile ( r'\s*,\s*' )
  requires_system_checks = False
 os . umask ( umask )
          if key not in self :
 key = key [ len ( self . prefix ) : ]
                  yield choice
 if key . startswith ( self . prefix ) :
  if whitelist is not None :
          raise TemplateSyntaxError ( "second argument to 'regroup' tag must be 'by'" )
          if name == 'regex' :
                              extra_params [ 'unique' ] = True
                      arg_vals . append ( mark_safe ( arg ) )
              super ( Serializer , self ) . handle_field ( obj , field )
                      out . write ( '# %s' % ' | ' . join ( lineno_comment_map [ comment_lineno_cache ] ) )
 return widget . id_for_label ( id_ )
 pickled = pickle . dumps ( new_value , pickle . HIGHEST_PROTOCOL )
                          continue
                               root , = nonlocal_root
 value = normalize_newlines ( value )
          p = int ( arg )
   def build_absolute_uri ( self , location = None ) :
 return filenames
   return ''
        def compare_ordering_key ( k ) :
          self . file . seek ( 0 )
                  formatter = self . config [ 'formatters' ] [ formatter ]
   else :
 if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) :
    return self . _post , self . _files
                      help_text = ''
   def load_template ( self , template_name , template_dirs = None ) :
      help = "Prints the custom table modifying SQL statements for the given app name(s)."
              return
    RemovedInNextVersionWarning = RemovedInDjango19Warning
    add_to_builtins ( 'django.template.defaulttags' )
 t = getattr ( _active , "value" , None )
 from itertools import chain
              if not isinstance ( data , basestring ) :
                      if index is not None :
          return self . environ . get ( 'wsgi.url_scheme' )
   def get_wsgi_application ( ) :
   if not re . search ( r'^[_a-zA-Z]\w*$' , name ) :
          for dict_ in self . dicts :
   def __repr__ ( self ) :
 return self . is_bound and not self . errors
    class MultipleHiddenInput ( HiddenInput ) :
     header_names = [ key . lower ( ) for key in self . extra_headers ]
                  raise ViewDoesNotExist (  "Could not import '%s'. View does not exist in module %s." %  ( lookup_view , mod_name ) )
     class TimeField ( BaseTemporalField ) :
                  sublist_item = title
          super ( CheckboxChoiceInput , self ) . __init__ ( * args , ** kwargs )
 del self . _expire_info [ key ]
 using_sysrandom = False
          import fcntl
 from django . db import connections , DEFAULT_DB_ALIAS , migrations
 if settings . DEBUG_PROPAGATE_EXCEPTIONS :
   def _raw_value ( self , fieldname ) :
   def I ( self ) :
   year = year + ( ( 2000 - year ) // 28 ) * 28
 from django . core . management . utils import handle_extensions
 return '%s. You passed in %r (%s)' % ( original , self . obj ,  type ( self . obj ) )
                          if not field_desc . endswith ( '(' ) :
 zfile = GzipFile ( mode = 'wb' , compresslevel = 6 , fileobj = zbuf )
 return result
        try :
   if six . PY3 :
                  content = '' . join ( comment )
              self . children . append ( data )
 duplicate . dicts = self . dicts [ : ]
 to_python = self . _get_to_python ( pk_field )
   def as_text ( self ) :
 logger . addHandler ( handler )
 method = kwargs . pop ( 'method' )
 def do_for ( parser , token ) :
  args = [ 'msguniq' ] + self . msguniq_options + [ potfile ]
              k , v = x . split ( '=' , 1 )
 doublecolon_start = - 1
 def management_form ( self ) :
 self . _unget_history = [ ]
 if hasattr ( self , '_get' ) :
                      content = template_file . read ( )
          if not app_config . path :
              return default
      from logging import _checkLevel
   return kwargs
   return ( TYPE , outdict , stream )
  value , converted = convert_old_style_list ( value )
              formfield = formfield_callback ( f , ** kwargs )
              html_class_attr = ''
  def handle ( self , ** options ) :
  self . position += len ( output )
 re_escaped = re . compile ( r'\\(.)' )
      format_key = 'DATETIME_INPUT_FORMATS'
   def chunks ( self , chunk_size = None ) :
  return value
 special_floats = [ str ( pos_inf ) , str ( neg_inf ) , str ( nan ) ]
      pass
          try :
  requires_system_checks = False
          return force_str ( "<%s: %s (%s)>" % (  self . __class__ . __name__ , self . name , self . content_type ) )
              val = self [ key ]
 match = (  pattern == '*' or  pattern . startswith ( '.' ) and (  host . endswith ( pattern ) or host == pattern [ 1 : ]  ) or  pattern == host  )
 break
                  palette [ role ] = definition
    def sql_custom ( app_config , style , connection ) :
    if hextets [ index ] == '0' :
    obj = base . build_instance ( Model , data , self . db )
 import django . core . checks . compatibility . django_1_7_0
      if not _serializers :
          from django . template . debug import DebugLexer , DebugParser
 parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
              processors = tuple ( processors )
     class FileField ( Field ) :
  from django . utils . functional import Promise
 value = environ . get ( str ( key ) , str ( default ) )
 def __init__ ( self , server , params ) :
 if self . connection is None :
      def __html__ ( self ) :
 d = self . config [ m . groups ( ) [ 0 ] ]
 return sql_create ( app_config , style , connection ) + sql_custom ( app_config , style , connection ) + sql_indexes ( app_config , style , connection )
  return errors
  return value
  isolated_context = options . get ( 'only' , False )
 self . fed = [ ]
              return self . queryset . none ( )
 warnings = [ e for e in all_issues if checks . WARNING <= e . level < checks . ERROR and not e . is_silenced ( ) ]
 s = MLStripper ( )
   def _get_choices ( self ) :
 if not ip_str . lower ( ) . startswith ( '0000:0000:0000:0000:0000:ffff:' ) :
          m = int ( d ) - d
   excluded_apps = set ( )
 if options [ 'outlog' ] :
   def _get_media ( self ) :
   else :
    @ register . tag
                  pass
  app_models = router . get_migratable_models ( app_config , connection . alias )
 if self . setting :
    for node in compiled_parent . nodelist :
          offset = offset . seconds // 60
 seen_models . add ( model )
                  yield self . choice ( obj )
  if ( getattr ( Meta , 'fields' , None ) is None and  getattr ( Meta , 'exclude' , None ) is None ) :
 if not bits :
  else :
              pass
          if value in self . empty_values :
  self . serialization_formats = serializers . get_public_serializer_formats ( )
    self . widget . choices = self . choices
                  m2m_value = lambda value : value . natural_key ( )
   @ register ( Tags . compatibility )
 statements = connection . ops . sequence_reset_sql ( self . style , models )
 result . key = key
              fk = fks_to_parent [ 0 ]
              self . template_cache [ key ] = TemplateDoesNotExist
 inplural = False
     def load_label ( self , fixture_label ) :
  super ( WSGIServer , self ) . __init__ ( * args , ** kwargs )
 s = s [ end : ]
   basedirs = [ os . path . join ( 'conf' , 'locale' ) , 'locale' ]
 def do_extends ( parser , token ) :
              key = self . make_key ( key , version = version )
          try :
  for p in parts [ 1 : ] :
                  yield safe_join ( template_dir , template_name )
 from django . core . serializers . python import Deserializer as PythonDeserializer
  for k , v in six . iteritems ( kwargs ) :
              form . save_m2m ( )
 def errors ( self ) :
                              continue
          self . regexes = { }
  if ( 3 , 2 ) < sys . version_info < ( 3 , 3 , 4 ) :
          fill_to = 7
     def localize_input ( value , default = None ) :
  if not isinstance ( value , ( list , tuple ) ) :
 background = dict ( ( color_names [ x ] , '4%s' % x ) for x in range ( 8 ) )
              self . to = [ ]
                  raise SignatureExpired (  'Signature age %s > %s seconds' % ( age , max_age ) )
 for candidate in ( ( d not in models or d in model_list ) for d in deps ) :
 from django . db import connections , DEFAULT_DB_ALIAS
  return _long_to_bin ( result , hex_format_string )
   def write_items ( self , handler ) :
    base2 = BaseConverter ( BASE2_ALPHABET )
          attrs = super ( DecimalField , self ) . widget_attrs ( widget )
          for name , field in self . fields . items ( ) :
                  if self . output_transaction :
                      self . stdout . write ( self . style . MIGRATE_SUCCESS ( " FAKED" ) )
  states = {   'div' : both_before + [  Tok ( "punct" , literals ( "/= /" ) , next = 'reg' ) ,  ] + both_after ,    'reg' : both_before + [  Tok ( "regex" ,  r"""                     /                       # opening slash                     # First character is..                     (   [^*\\/[]            # anything but * \ / or [                     |   \\.                 # or an escape sequence                     |   \[                  # or a class, which has                             (   [^\]\\]     #   anything but \ or ]                             |   \\.         #   or an escape sequence                             )*              #   many times                         \]                     )                     # Following characters are same, except for excluding a star                     (   [^\\/[]             # anything but \ / or [                     |   \\.                 # or an escape sequence                     |   \[                  # or a class, which has                             (   [^\]\\]     #   anything but \ or ]                             |   \\.         #   or an escape sequence                             )*              #   many times                         \]                     )*                      # many times                     /                       # closing slash                     [a-zA-Z0-9]*            # trailing flags                 """ , next = 'div' ) ,  ] + both_after ,  }
                  try :
 self . show_traceback = options . get ( 'traceback' )
              def __len__ ( self ) :
                      self . file . close ( )
 if sys . platform . startswith ( 'java' ) :
                      space = line . find ( ' ' ) + 1
          self . STDOFFSET = timedelta ( seconds = - _time . timezone )
 self . _tzname = self . tzname ( dt )
    templatetags_modules = [ ]
              settings . configure ( USE_I18N = True )
     class Critical ( CheckMessage ) :
 if self . use_natural_keys :
              number = int ( number )
   def to_python ( self , value ) :
              handler . addQuickElement ( "link" , '' ,  { "rel" : "enclosure" ,  "href" : item [ 'enclosure' ] . url ,  "length" : item [ 'enclosure' ] . length ,  "type" : item [ 'enclosure' ] . mime_type } )
 return statements
           current_fields = [ ]
              media_attrs = media . __dict__
  def __init__ ( self , subject = '' , body = '' , from_email = None , to = None , bcc = None ,  connection = None , attachments = None , headers = None , cc = None ) :
  else :
              nesting += 1
 v = datetime . datetime . strptime ( force_str ( value ) , input_format )
   del Trans
              break
          self . blocks [ name ] . append ( block )
   gettext_lazy = lazy ( gettext , str )
  return force_str ( signature )
    def get_serializer_formats ( ) :
  class InclusionNode ( TagHelperNode ) :
          return self . as_ul ( )
  from django . core . management . base import BaseCommand , CommandError
 class BaseFormSet ( object ) :
          return super ( FileInput , self ) . render ( name , None , attrs = attrs )
          self . exception = exception
  self . label_suffix = label_suffix if label_suffix is not None else _ ( ':' )
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
 os . makedirs ( original_path )
 return '' . join ( force_text ( s ) for s in strings )
                          self . configure_root ( root )
 from collections import OrderedDict
 if app_output :
              return 'StopUpload: Consume request data, then halt.'
                      for f in dirs :
          return settings . DEBUG
 s = subject [ p : i ]
          with self . mutex :
              return self . _stream . read ( * args , ** kwargs )
  output_transaction = True
              raise TemplateSyntaxError ( "'%s' is not a valid tag library: %s" %  ( taglib , e ) )
              value = ''
              encode = lambda k , v : urlencode ( { k : v } )
 import time
              if new is None :
              raise self . warning
          kw = match . groupdict ( )
 def dumps ( self , obj ) :
      return _trans . deactivate ( )
 max_value = float ( max_value )
   else :
              widget . is_localized = True
 import types
 for code in ( lang_code , generic_lang_code ) :
   def prepare_value ( self , value ) :
              option_value = ''
               definition = { }
 return self . id
                          callback = lambda response : middleware . process_response ( request , response )
 self . deleted_objects = [ ]
     if isinstance ( obj , datetime . datetime ) :
              sep = space
 message_context = None
   def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
 from __future__ import unicode_literals
 s = s . replace ( '\t' , '\\t' )
                  answer = None
          if data :
  bits = urlsplit ( location )
    @ register . tag
  except ( TypeError , VariableDoesNotExist ) :
                                result [ - 1 ] = Choice ( [ None , result [ - 1 ] ] )
 bf = self [ name ]
   self . can_read . acquire ( )
   self . xml . endElement ( "field" )
 if options . get ( 'no_color' ) :
                  priority = float ( priority )
              template , origin = self . find_template ( template_name , template_dirs )
 self . run_validators ( out )
 self . _namespace_dict = { }
  except IndexError :
  for path_to_remove in self . paths_to_remove :
   def error ( self , token , msg ) :
 salt = force_bytes ( salt )
   if initial_forms > self . max_num >= 0 :
          return False
  else :
                                  break
 return value . strftime ( format )
  import cgi
 final_path = abspathu ( join ( base , * paths ) )
      status_code = 405
 result . fields = tuple ( [ x . __deepcopy__ ( memo ) for x in self . fields ] )
                   command . stdout . write ( errors )
                  self . waiting_writers += 1
  else :
 for i in range ( 0 , self . total_form_count ( ) ) :
  elif not isinstance ( value , ( list , tuple ) ) :
     if app_list_value is not None :
                  raise TemplateSyntaxError ( "Only 'silent' flag is allowed after cycle's name, not '%s'." % args [ - 1 ] )
  else :
  return wrapped
 for i in range ( 0 , self . total_form_count ( ) ) :
          DJANGO_COLORS = os . environ . get ( 'DJANGO_COLORS' , '' )
 pass
 keys = _iterkeys
 if isinstance ( stream_or_string , six . string_types ) :
                  new_name = new_name . replace ( '__' , '_' )
                  msg . attach ( self . _create_mime_attachment ( * alternative ) )
 get_supported_language_variant . cache_clear ( )
      while True :
 from django . core . management . sql import check_for_migrations
                      cls . __str__ = cls . __bytes_cast
    raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
 result = self . configure_custom ( config )
  try :
                  return d [ key ]
 for i , handler in enumerate ( self . _upload_handlers ) :
                  return kwargs
          data = conditional_escape ( arg ) . join ( value )
  def add_arguments ( self , parser ) :
 try :
        try :
    def ngettext ( singular , plural , number ) :
              self . schemes = schemes
      pass
              return input_val
 trans_real . _active = threading . local ( )
  except ( HTMLParseError , UnboundLocalError ) :
   return singular_suffix
 from django . utils . translation import ugettext_lazy
                      if contains ( result [ - 1 ] , Group ) :
 class ErrorList ( UserList , list ) :
 parser . add_argument ( '--keep-pot' , action = 'store_true' , dest = 'keep_pot' ,  default = False , help = "Keep .pot file after making messages. Useful when debugging." )
              self . loaddata ( fixture_labels )
          changeset = timestamp . strftime ( '%Y%m%d%H%M%S' )
   def lex ( self , text ) :
 errors = [ e for e in all_issues if checks . ERROR <= e . level < checks . CRITICAL ]
  tt = time . localtime ( stamp )
 from django . core import checks
 result = datetime . datetime ( year , month , day , hour , min , sec )
  return self . _cached_loaders
 from django . template . loader import BaseLoader
 from django . utils . module_loading import import_string
      errors = [ ]
     class Library ( object ) :
   def filter ( self , record ) :
              data = [ ]
          return escape ( text )
 from django . template . loader import BaseLoader
              self . _setup ( )
                  if safe_input :
      def __init__ ( self , template_string , origin ) :
                  guid_attrs [ 'isPermaLink' ] = str (  item [ 'unique_id_is_permalink' ] ) . lower ( )
   for opening , closing in WRAPPING_PUNCTUATION :
                  definition [ 'opts' ] = opts
              raise ValidationError ( self . error_messages [ 'empty' ] , code = 'empty' )
   def configure_custom ( self , config ) :
  except StopIteration :
  if max_num is None :
  streaming = False
              translation = self . _new_gnu_trans ( localedir )
              if not hasattr ( e , 'django_template_source' ) :
              yield node
          key = self . make_key ( key , version = version )
  elif len ( app_labels ) > 1 :
 return j
              from django . conf import settings
     class RequireDebugFalse ( logging . Filter ) :
              handler . addQuickElement ( "comments" , item [ 'comments' ] )
  if six . PY2 :
  elif auto_id :
 return { 'MEDIA_URL' : settings . MEDIA_URL }
    def resolve_context ( self , context ) :
  elif name is not None and compile_function is None :
 from django . utils . encoding import force_text
          return self . dicts [ - 1 ] [ key ]
 import warnings
 if m :
 if leading :
 self . _cached_loaders = [ ]
 if not path_info :
 for option in options :
  del _serializers [ format ]
                  data [ f . name ] = [ ]
 from django . utils . encoding import smart_text , is_protected_type
   super ( ValidationError , self ) . __init__ ( message , code , params )
  elif field_type == 'IntegerField(' and not connection . features . can_introspect_autofield :
 if 'date' not in header_names :
  from django . conf import settings
              with connection . cursor ( ) as curs :
   @ property
          return text . __html__ ( )
              initial = [ ]
  nodelist . append ( node )
      return _trans . ungettext ( singular , plural , number )
 if self . _num_pages is None :
   self . _rollback = len ( boundary ) + 6
    @ lru_cache . lru_cache ( maxsize = 1000 )
 def __init__ ( self , request , dict_ = None , processors = None , current_app = None ,  use_l10n = None , use_tz = None ) :
   else :
    @ register . filter ( is_safe = False )
     class DictConfigurator ( BaseConfigurator ) :
                    import rlcompleter
              data = self . flo . read ( self . chunk_size )
              app_configs = [ apps . get_app_config ( app_label ) for app_label in app_labels ]
   def __iter__ ( self ) :
                      break
    @ register . tag
          text = text [ 1 : ]
         if run_syncdb and executor . loader . unmigrated_apps :
 self . choices . append ( ( f , f . replace ( path , "" , 1 ) ) )
   return False
 from django . core . files . base import File
 for f in opts . fields :
 parser . add_argument ( '-e' , '--exclude' , dest = 'exclude' , action = 'append' , default = [ ] ,  help = 'An app_label or app_label.ModelName to exclude '  '(use multiple --exclude to exclude multiple apps/models).' )
  subclass = type ( "Migration" , ( Migration , ) , {  "dependencies" : [ ( app_label , migration . name ) for migration in merge_migrations ] ,  } )
          return self . objects
                  continue
           renderer = kwargs . pop ( 'renderer' , None )
   settings . _setup ( )
  return self . _app_dict [ language_code ]
 g . flatten ( self , unixfrom = unixfrom )
  except ValueError :
      _prefixes = local ( )
 parser . add_argument ( '--traceback' , action = 'store_true' ,  help = 'Raise on exception' )
 itervalues = _itervalues
 from django . utils import six , lru_cache
 if str_number [ 0 ] == '-' :
               if upload :
  from django . core . management . base import AppCommand
    all_locales = [ ]
from copy import copy
          handler . endElement ( "channel" )
   return set ( x for x in ext_list if x . strip ( '.' ) not in ignored )
 if value is None :
  else :
    class AppRegistryNotReady ( Exception ) :
          raise ImproperlyConfigured (  "Calling modelformset_factory without defining 'fields' or "  "'exclude' explicitly is prohibited."  )
  except IOError as e :
      from importlib import import_module
    def sql_destroy_indexes ( app_config , style , connection ) :
              template_dirs = app_template_dirs
   def render ( self , context ) :
              return self . data . hour - 12
 from django . utils import six
    def inner_run ( self , * args , ** options ) :
 try :
          if self not in context . render_context :
 binary_type = bytes
 msgid = '<%s.%s.%s%s@%s>' % ( utcdate , pid , randint , idstring , idhost )
                      template = get_template_from_string ( template , origin , template_name )
          app_name = get_commands ( ) [ name ]
          super ( EmailBackend , self ) . __init__ ( * args , ** kwargs )
              return bytes ( func ( * self . __args , ** self . __kw ) )
 def __init__ ( self , stream , limit , buf_size = 64 * 1024 * 1024 ) :
                  elt = [ elt ]
  del cache [ oldkey ]
 if not settings . MANAGERS :
              use_func = False
 def truncatewords_html ( value , arg ) :
          return SafeBytes ( s )
  MONTHS = 'jan feb mar apr may jun jul aug sep oct nov dec' . split ( )
   def __repr__ ( self ) :
  row_data = tuple ( d . _get_pk_val ( ) if hasattr ( d , '_get_pk_val' ) else d  for d in row_data )
   def __copy__ ( self ) :
  moves = sys . modules [ __name__ + ".moves" ] = _MovedItems ( __name__ + ".moves" )
  raise ValueError ( "The view %s.%s didn't return an HttpResponse object. It returned None instead."  % ( callback . __module__ , view_name ) )
    @ lru_cache . lru_cache ( maxsize = None )
  for cat in self . feed [ 'categories' ] :
  return self . connection
              for arg in args :
  def add_arguments ( self , parser ) :
              if escaped :
          class HTMLParser ( _html_parser . HTMLParser ) :
 subject = '%s (%s IP): %s' % (  record . levelname ,  ( 'internal' if request . META . get ( 'REMOTE_ADDR' ) in settings . INTERNAL_IPS  else 'EXTERNAL' ) ,  record . getMessage ( )  )
          iteritems = _iteritems
          while True :
   output = [ ]
          return datetime . fromtimestamp ( os . path . getctime ( self . path ( name ) ) )
                  message = error . message
   def __call__ ( self , value ) :
  except LookupError :
    def request ( request ) :
  self . cleaned_data = { }
          tpl = "EntitiesForbidden(name='{}', system_id={!r}, public_id={!r})"
          command , source = self . command_stack . pop ( )
 parser . delete_first_token ( )
 try :
    return result
 def __init__ ( self , name , value , base , sysid , pubid , notation_name ) :
          name , val = forbid_multi_line_headers ( name , val , self . encoding )
 from django . utils import six
 use_null_fallback = True
  else :
 from django . utils . translation import ugettext_lazy as _
                          raise ValueError ( 'Unable to configure '  'filter %r: %s' % ( name , e ) )
              self . active_readers -= 1
                  self . remove_potfiles ( )
    class LazyObject ( object ) :
 import zlib
   if msg :
 run_checks = registry . run_checks
          if self . cmd . _called_from_command_line :
   mod_name , func_name = get_mod_func ( lookup_view )
  else :
 output . append ( '\n' . join ( '  * %s' % e for e in errors ) )
  except CommandError :
   else :
                  absolute_path = path . abspath ( expanded_template )
  else :
  elif action == "unapply_success" :
      import msvcrt
 self . kwargs = kwargs
  from __future__ import unicode_literals
              unique_id = get_tag_uri ( item [ 'link' ] , item [ 'pubdate' ] )
   end = rawdata [ k : endpos ] . strip ( )
 if self . errors and hasattr ( self . form , 'error_css_class' ) :
  candidate_subs = text_kwargs
 loader = MigrationLoader ( connection )
 for model in not_installed_models :
 from __future__ import unicode_literals
          return unbound
              raise MultiPartParserError ( 'Invalid boundary in multipart: %s' % boundary )
  if arg < 1 :
 return time_str + '%+03d:%02d' % ( hour , minute )
 if isinstance ( s , Promise ) :
 cls = extension_map . get ( ext )
              initial = [ ]
 import os
          return value
  factory = c
 hour , minute = divmod ( timezone , 60 )
  sub_ul_renderer = ChoiceFieldRenderer ( name = self . name ,  value = self . value ,  attrs = attrs_plus ,  choices = choice_label )
              name = member . name
   def end_serialization ( self ) :
   if pop_context :
                  try :
 try :
      return trim_whitespace_re . sub ( ' ' , s . strip ( ) )
 response = self . handle_uncaught_exception ( request , resolver , sys . exc_info ( ) )
 return [ "" ,  "    class Meta:" ,  "        managed = False" ,  "        db_table = '%s'" % table_name ]
                              message_context = message_context . strip ( '"' )
      def write_pot_file ( potfile , msgs ) :
 try :
 import sys
 f . write ( zlib . compress ( pickle . dumps ( value ) , - 1 ) )
           return super ( PythonSerializer , self ) . getvalue ( )
 if kw [ 'microsecond' ] :
   wsgi_opts [ 'debug' ] = options [ 'debug' ] is not None
          loader , args = loader [ 0 ] , loader [ 1 : ]
 pass
 cls . _delegate_text = six . text_type in resultclasses
                          root , = nonlocal_root
   if indent :
 def __init__ ( self , timezone ) :
 return ret
                      raise CommandError ( 'Unknown model in excludes: %s' % exclude )
   class BadSignature ( Exception ) :
  if hasattr ( settings , "SERIALIZATION_MODULES" ) :
 return header_query . lower ( ) in existing_headers
   def u ( s ) :
 self . xml . characters ( smart_text ( key_value ) )
     class RadioFieldRenderer ( ChoiceFieldRenderer ) :
              warning = 'ImmutableList object is immutable.'
                  raise ImproperlyConfigured (  '"%s" is not a valid regular expression: %s' %  ( regex , six . text_type ( e ) ) )
   else :
  __iter__ = _iterkeys
              raise StopIteration ( )
  else :
 from django . template . loader import get_template
 if ext :
 for bit in bits :
    if self . _validate_unique :
  return
              locales = locale or all_locales
 for widget in self . widgets :
              return self . sign + value
 raise self . source_error ( source , msg )
   class Serializer ( PythonSerializer ) :
 try :
          return self . _create_attachments ( msg )
 from django . utils . timesince import timesince , timeuntil
   else :
  return combined
 output_transaction = False
  if isinstance ( s , bytes ) or ( isinstance ( s , Promise ) and s . _delegate_bytes ) :
  else :
                           old_field_name = field_name
      _meth_func = "__func__"
    def __iter__ ( self ) :
              super ( SortedDict , self ) . __init__ ( )
                  return value . serializable_value ( self . to_field_name )
                  os . unlink ( pot_path )
                          self . stdout . write ( 'ignoring file %s in %s\n' % ( filename , dirpath ) )
 bad_app_labels = set ( )
      class BaseInlineFormSet ( BaseModelFormSet ) :
 return self . id in settings . SILENCED_SYSTEM_CHECKS
                          raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
    def next_char ( input_iter ) :
                  r = r [ : 23 ] + r [ 26 : ]
  date = datetime_safe . new_datetime ( date )
   class CommandError ( Exception ) :
 valid_forms = [ form for form in self . forms if form . is_valid ( ) and form not in forms_to_delete ]
              digest = hashlib . sha256
   def send_messages ( self , email_messages ) :
  if not plan :
              return self . _size
  connection = connections [ options [ 'database' ] ]
    class CommandParser ( ArgumentParser ) :
  try :
 if bits and not kwarg_format :
 from django . utils . itercompat import is_iterable
 return t . render ( context )
   def c ( self ) :
              value = formats . sanitize_separators ( value )
 return FormSet
    class RawPostDataException ( Exception ) :
 return tpl . format ( self . name , self . sysid , self . pubid )
                    return self . data . tzinfo . tzname ( self . data ) or ""
 emit_pre_migrate_signal ( create_models , self . verbosity , self . interactive , connection . alias )
              line = sio . readline ( size )
   @ property
              num = 0
                  self . _response_middleware . insert ( 0 , mw_instance . process_response )
   if six . PY2 :
   class BaseLoader ( object ) :
          raise TemplateSyntaxError ( "'autoescape' argument should be 'on' or 'off'" )
 FIELD = "field"
 statements = sql_indexes ( app_config , self . style , connection )
 from io import BytesIO
  else :
 self . verbatim = False
  parser . add_argument ( '--settings' ,  help = 'The Python path to a settings module, e.g. "myproject.settings.main". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.' )
      class SafeMIMEMessage ( MIMEMixin , MIMEMessage ) :
   def close ( self ) :
                              from __future__ import absolute_import
      format_key = ''
   def has_previous ( self ) :
 check_for_language . cache_clear ( )
 return
    class MovedAttribute ( _LazyDescr ) :
    result = ":" . join ( hextets )
   else :
 tags_re = '(%s)' % '|' . join ( tags )
  def to_python ( self , value ) :
              raise TemplateSyntaxError ( "Named cycle '%s' does not exist" % name )
  targets = [ ( app_label , migration . name ) ]
 if app_label not in executor . loader . migrated_apps :
              try :
   _standard_context_processors = None
 ORDERING_FIELD_NAME = 'ORDER'
                   args . append ( parser . compile_filter ( bit ) )
   def utcoffset ( self , dt ) :
 robotparser = sys . modules [ __name__ + ".moves.urllib_robotparser" ]
                          references_to_delete . setdefault ( f . rel . to , [ ] ) . append ( ( model , f ) )
 return candidate_pat % candidate_subs
    def reverse ( viewname , urlconf = None , args = None , kwargs = None , prefix = None , current_app = None ) :
 self . xgettext_options = self . xgettext_options [ : ] + [ '--no-wrap' ]
   context = Context ( dict ( options , ** {  base_name : name ,  base_directory : top_dir ,  'docs_version' : docs_version ,  } ) , autoescape = False )
                      help_text = help_text_html % force_text ( field . help_text )
    def npath ( path ) :
     if settings . DEBUG :
 import unicodedata
 hard_coded_bullets_re = re . compile ( r'((?:<p>(?:%s).*?[a-zA-Z].*?</p>\s*)+)' % '|' . join ( re . escape ( x ) for x in DOTS ) , re . DOTALL )
 try :
          if parse_until is None :
 model_fields = Model . _meta . get_all_field_names ( )
              raise BadSignature ( 'No "%s" found in value' % self . sep )
     def parse_boundary_stream ( stream , max_header_size ) :
              result = None
  def __init__ ( self , streaming_content = ( ) , * args , ** kwargs ) :
          def wrapped ( * args , ** kwargs ) :
 def auto_id ( self ) :
  else :
          self . command_stack . pop ( )
          if not hasattr ( e , 'django_template_source' ) :
                   def wrapper ( * args , ** kwds ) :
 from django . utils . xmlutils import SimplerXMLGenerator
  if os . path . exists ( self . file_path ) and not os . path . isdir ( self . file_path ) :
                  msgs = self . copy_plural_forms ( msgs , locale )
     def find_files ( self , root ) :
          if media :
   def iri_to_uri ( iri ) :
      return getattr ( self , _assertCountEqual ) ( * args , ** kwargs )
          self . file . seek ( 0 )
                          handler = self . configure_handler ( handlers [ name ] )
  else :
 if os . environ . get ( 'DJANGO_SETTINGS_MODULE' ) :
          self . vals . append ( val )
 self . can_write . release ( )
              params , varargs , varkw , defaults = getargspec ( func )
          return b'' . join ( self . _container )
   def create_nodelist ( self ) :
                      indexes = connection . introspection . get_indexes ( cursor , table_name )
              pass
          return True
          raise TemplateDoesNotExist ( "No template names provided" )
 value = bytes_to_text ( value , self . encoding )
       def constant_time_compare ( val1 , val2 ) :
   def __eq__ ( self , other ) :
  except AttributeError :
    class Command ( BaseCommand ) :
              field_notes . append ( 'Field name made lowercase.' )
              if i :
                      attrs [ 'class' ] = self . form . required_css_class
  if boundary :
     class MultipleChoiceField ( ChoiceField ) :
                  form . fields [ ORDERING_FIELD_NAME ] = IntegerField ( label = _ ( 'Order' ) , initial = index + 1 , required = False )
              call_command (  'flush' ,  verbosity = max ( self . verbosity - 1 , 0 ) ,  interactive = False ,  database = db ,  reset_sequences = False ,  inhibit_post_migrate = True ,  )
 if not using_sysrandom :
          try :
                  file_path = os . path . normpath ( os . path . join ( dirpath , filename ) )
 message_context = context_match . group ( 1 )
          max_num = DEFAULT_MAX_NUM
 args . append ( work_file )
              logger . warning ( 'Not Found: %s' , request . path ,  extra = {  'status_code' : 404 ,  'request' : request  } )
  current = getattr ( current , bit )
          thread . start_new_thread ( main_func , args , kwargs )
                          tried . append ( [ pattern ] )
          return self . value == self . choice_value
    class CheckboxSelectMultiple ( RendererMixin , SelectMultiple ) :
 self . add_fallback ( default_translation )
                  return lookup_view
              self . file_path = kwargs . pop ( 'file_path' )
  except KeyError :
              del attrs [ attr ]
   def compress ( self , data_list ) :
          if t [ 1 ] is True :
  if ( context . autoescape and not isinstance ( output , SafeData ) ) or isinstance ( output , EscapeData ) :
   class Module_six_moves_urllib_error ( _LazyModule ) :
    class HttpResponseNotAllowed ( HttpResponse ) :
 if self . verbosity >= 1 :
              return ugettext ( "Please correct the duplicate data for %(field)s." ) % {  "field" : unique_check [ 0 ] ,  }
 class_types = type ,
   def timesince ( d , now = None , reversed = False ) :
                      migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )
   def previous_page_number ( self ) :
          parts = [ ]
              data = self . _archive . read ( name )
 if invalid_var_format_string is None :
                  key = force_str ( key )
 try :
   def has_changed ( self ) :
          self . validate_unique ( )
   class Command ( AppCommand ) :
import copy
          return baseconv . base62 . encode ( int ( time . time ( ) ) )
  if fields is not None and f . name not in fields :
  except ImportError :
      BaseRunserverCommand = Command
                  msg += '\n'
   if six . PY2 and value > sys . maxint :
 self . stdout = OutputWrapper ( options . get ( 'stdout' , sys . stdout ) )
              parentloop = context [ 'forloop' ]
                           if isinstance ( current , BaseContext ) and getattr ( type ( current ) , bit ) :
 for entry in os . listdir ( path ) :
          return reversed ( self . keyOrder )
          parser . add_argument ( 'app_label' ,  help = 'App label of the application containing the migration.' )
          from django . core . mail import get_connection
   @ property
   class_name = model . __name__ + str ( 'Form' )
  else :
          bad_serializer = BadSerializer ( exc )
  for basedir in basedirs :
          key = self . make_key ( key , version = version )
                          raise
    def to_python ( self , value ) :
 work_file = os . path . join ( self . dirpath , thefile )
 if literal_match :
  def __init__ ( self , attrs = None , date_format = None , time_format = None ) :
 if not field . show_hidden_initial :
       def pk_is_not_editable ( pk ) :
 if '()' in config :
 number = self . validate_number ( number )
 parser . add_argument ( '--no-default-ignore' , action = 'store_false' , dest = 'use_default_ignore_patterns' ,  default = True , help = "Don't ignore the common glob-style patterns 'CVS', '.*', '*~' and '*.pyc'." )
 import re
   @ property
          value = force_str ( value )
   def simple_tag ( self , func = None , takes_context = None , name = None ) :
              super ( TypedMultipleChoiceField , self ) . validate ( value )
 if isinstance ( cache , BaseDatabaseCache ) :
 self . write_items ( handler )
 singular = [ ]
 from django . utils . module_loading import import_string
               initial_forms = len ( self . initial ) if self . initial else 0
              if isinstance ( other , Promise ) :
   def created_time ( self , name ) :
    elif cwords [ 0 ] in subcommands and cwords [ 0 ] != 'help' :
      def _curried ( * moreargs , ** morekwargs ) :
 yield base . DeserializedObject ( obj , m2m_data )
   self . indent ( 1 )
 dict . __setitem__ ( self , key , M )
          self . file_name = None
              raise AttributeError ( attr )
      return ungettext ( singular , plural , number )
      if not response . streaming :
     class Context ( BaseContext ) :
              try :
 from django . utils . _os import safe_join , abspathu
              if msg :
    def get_cookie_signer ( salt = 'django.core.signing.get_cookie_signer' ) :
                  return '%s-%s-%s' % ( y , m , d )
    _moved_attributes = [  MovedAttribute ( "cStringIO" , "cStringIO" , "io" , "StringIO" ) ,  MovedAttribute ( "filter" , "itertools" , "builtins" , "ifilter" , "filter" ) ,  MovedAttribute ( "filterfalse" , "itertools" , "itertools" , "ifilterfalse" , "filterfalse" ) ,  MovedAttribute ( "input" , "__builtin__" , "builtins" , "raw_input" , "input" ) ,  MovedAttribute ( "map" , "itertools" , "builtins" , "imap" , "map" ) ,  MovedAttribute ( "range" , "__builtin__" , "builtins" , "xrange" , "range" ) ,  MovedAttribute ( "reload_module" , "__builtin__" , "imp" , "reload" ) ,  MovedAttribute ( "reduce" , "__builtin__" , "functools" ) ,  MovedAttribute ( "StringIO" , "StringIO" , "io" ) ,  MovedAttribute ( "UserString" , "UserString" , "collections" ) ,  MovedAttribute ( "xrange" , "__builtin__" , "builtins" , "xrange" , "range" ) ,  MovedAttribute ( "zip" , "itertools" , "builtins" , "izip" , "zip" ) ,  MovedAttribute ( "zip_longest" , "itertools" , "itertools" , "izip_longest" , "zip_longest" ) ,   MovedModule ( "builtins" , "__builtin__" ) ,  MovedModule ( "configparser" , "ConfigParser" ) ,  MovedModule ( "copyreg" , "copy_reg" ) ,  MovedModule ( "dbm_gnu" , "gdbm" , "dbm.gnu" ) ,  MovedModule ( "http_cookiejar" , "cookielib" , "http.cookiejar" ) ,  MovedModule ( "http_cookies" , "Cookie" , "http.cookies" ) ,  MovedModule ( "html_entities" , "htmlentitydefs" , "html.entities" ) ,  MovedModule ( "html_parser" , "HTMLParser" , "html.parser" ) ,  MovedModule ( "http_client" , "httplib" , "http.client" ) ,  MovedModule ( "email_mime_multipart" , "email.MIMEMultipart" , "email.mime.multipart" ) ,  MovedModule ( "email_mime_text" , "email.MIMEText" , "email.mime.text" ) ,  MovedModule ( "email_mime_base" , "email.MIMEBase" , "email.mime.base" ) ,  MovedModule ( "BaseHTTPServer" , "BaseHTTPServer" , "http.server" ) ,  MovedModule ( "CGIHTTPServer" , "CGIHTTPServer" , "http.server" ) ,  MovedModule ( "SimpleHTTPServer" , "SimpleHTTPServer" , "http.server" ) ,  MovedModule ( "cPickle" , "cPickle" , "pickle" ) ,  MovedModule ( "queue" , "Queue" ) ,  MovedModule ( "reprlib" , "repr" ) ,  MovedModule ( "socketserver" , "SocketServer" ) ,  MovedModule ( "_thread" , "thread" , "_thread" ) ,  MovedModule ( "tkinter" , "Tkinter" ) ,  MovedModule ( "tkinter_dialog" , "Dialog" , "tkinter.dialog" ) ,  MovedModule ( "tkinter_filedialog" , "FileDialog" , "tkinter.filedialog" ) ,  MovedModule ( "tkinter_scrolledtext" , "ScrolledText" , "tkinter.scrolledtext" ) ,  MovedModule ( "tkinter_simpledialog" , "SimpleDialog" , "tkinter.simpledialog" ) ,  MovedModule ( "tkinter_tix" , "Tix" , "tkinter.tix" ) ,  MovedModule ( "tkinter_ttk" , "ttk" , "tkinter.ttk" ) ,  MovedModule ( "tkinter_constants" , "Tkconstants" , "tkinter.constants" ) ,  MovedModule ( "tkinter_dnd" , "Tkdnd" , "tkinter.dnd" ) ,  MovedModule ( "tkinter_colorchooser" , "tkColorChooser" ,  "tkinter.colorchooser" ) ,  MovedModule ( "tkinter_commondialog" , "tkCommonDialog" ,  "tkinter.commondialog" ) ,  MovedModule ( "tkinter_tkfiledialog" , "tkFileDialog" , "tkinter.filedialog" ) ,  MovedModule ( "tkinter_font" , "tkFont" , "tkinter.font" ) ,  MovedModule ( "tkinter_messagebox" , "tkMessageBox" , "tkinter.messagebox" ) ,  MovedModule ( "tkinter_tksimpledialog" , "tkSimpleDialog" ,  "tkinter.simpledialog" ) ,  MovedModule ( "urllib_parse" , __name__ + ".moves.urllib_parse" , "urllib.parse" ) ,  MovedModule ( "urllib_error" , __name__ + ".moves.urllib_error" , "urllib.error" ) ,  MovedModule ( "urllib" , __name__ + ".moves.urllib" , __name__ + ".moves.urllib" ) ,  MovedModule ( "urllib_robotparser" , "robotparser" , "urllib.robotparser" ) ,  MovedModule ( "xmlrpc_client" , "xmlrpclib" , "xmlrpc.client" ) ,  MovedModule ( "xmlrpc_server" , "xmlrpclib" , "xmlrpc.server" ) ,  MovedModule ( "winreg" , "_winreg" ) ,  ]
    def clear_script_prefix ( ) :
  except ( OSError ) :
                      return _CacheInfo ( stats [ HITS ] , stats [ MISSES ] , maxsize , len ( cache ) )
 none_value = ( 0 , '---' )
      if module_has_submodule ( app_config . module , module_to_search ) :
  if field in self . errors :
    def mail_managers ( subject , message , fail_silently = False , connection = None ,  html_message = None ) :
      def as_string ( self , unixfrom = False ) :
 cache_key += '.%s' % tz_name . encode ( 'ascii' , 'ignore' ) . decode ( 'ascii' ) . replace ( ' ' , '_' )
    invalid_var_format_string = None
              return False
 setattr ( base , old_method_name , wrapper ( old_method ) )
 obj = field . rel . to . _default_manager . db_manager ( self . db ) . get_by_natural_key ( * field_value )
  self . dicts . append ( other_dict )
 directory_created = { }
 args , varargs , varkw , defaults = getargspec ( func )
  if confirm == 'yes' :
          return
 try :
      help = "Runs a Python interactive interpreter. Tries to use IPython or bpython, if one of them is available."
                  self . interesting = re . compile ( r'</\s*%s\s*>' % tag . lower ( ) , re . I )
 from django . utils . deprecation import RenameMethodsBase , RemovedInDjango19Warning
 from threading import local
                   chunk = self . _read_limited ( size - len ( self . buffer ) )
          return self . position
 self . empty_permitted = empty_permitted
   class ArchiveException ( Exception ) :
   else :
  datetime_re = re . compile (  r'(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})'  r'[T ](?P<hour>\d{1,2}):(?P<minute>\d{1,2})'  r'(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?'  r'(?P<tzinfo>Z|[+-]\d{2}(?::?\d{2})?)?$'  )
 from __future__ import unicode_literals
   if new_name in used_column_names :
 saved_instances . append ( self . save_existing ( form , obj , commit = commit ) )
          return list ( self ) == other
              return len ( self . get_queryset ( ) )
                  name = self . split_leading_dir ( name ) [ 1 ]
     class DjangoJSONEncoder ( json . JSONEncoder ) :
   def as_textarea ( self , attrs = None , ** kwargs ) :
  if failures :
              autoreload . main ( self . inner_run , None , options )
  try :
                  os . _exit ( 0 )
          if location is None :
  cleaned_data = form . cleaned_data
          value = ugettext ( "%s KB" ) % filesize_number_format ( bytes / KB )
 parser . add_argument ( '--all' , '-a' , action = 'store_true' , dest = 'all' ,  default = False , help = 'Updates the message files for all existing locales.' )
   if hasattr ( self . file , 'tell' ) and hasattr ( self . file , 'seek' ) :
 if end is not None :
 return self . file
    @ register . tag ( 'extends' )
 self . stream . flush ( )
 if settings . DEBUG :
  except KeyError :
   def multiple_chunks ( self , chunk_size = None ) :
 if cls . _delegate_text :
 return base64 . urlsafe_b64encode ( s ) . rstrip ( b'\n=' )
  t = getattr ( _active , "value" , None )
  return Truncator ( value ) . words ( length , html = True , truncate = ' ...' )
 bits = token . split_contents ( )
   try :
                  migration = loader . get_migration ( app_label , migration_name )
 if self . verbosity >= 1 and sql :
              if getattr ( e , 'silent_variable_failure' , False ) :
 import re
 MB = 1 << 20
   return format_html ( self . outer_html ,  id_attr = format_html ( ' id="{0}"' , id_ ) if id_ else '' ,  content = mark_safe ( '\n' . join ( output ) ) )
   else :
   def path ( self , name ) :
  from django . utils . itercompat import is_iterable
          iterator = ChunkIter ( stream_or_iterable , 16384 )
 return int ( value ) % int ( arg ) == 0
              if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) :
 field_notes = [ ]
   def add_move ( move ) :
  try :
    count = itertools . count ( 1 )
 class ErrorDict ( dict ) :
 return size
 self . paths_to_remove . append ( tempdir )
    ip_str = _explode_shorthand_ip_string ( ip_str )
                              os . close ( fd )
  return TimestampSigner ( key , salt = salt ) . sign ( base64d )
 def autoescape ( parser , token ) :
 _url_drive_re = re . compile ( '^([a-z])[:|]' , re . I )
 result = result [ : start ] + [ inner ]
   class MultiPartParser ( object ) :
           return timezone . tzname ( None )
   ipv4_address = "%d.%d.%d.%d" % (  int ( hextets [ 6 ] [ 0 : 2 ] , 16 ) ,  int ( hextets [ 6 ] [ 2 : 4 ] , 16 ) ,  int ( hextets [ 7 ] [ 0 : 2 ] , 16 ) ,  int ( hextets [ 7 ] [ 2 : 4 ] , 16 ) ,  )
   def autocomplete ( self ) :
  if settings . USE_THOUSAND_SEPARATOR :
 return re . sub ( "\d([A-Z])" , lambda m : m . group ( 0 ) . lower ( ) , t )
   if args [ 1 ] [ 0 ] == '2' :
    @ deconstructible
 def time ( value , arg = None ) :
  self . mod = new
import os
   def handle ( self , ** options ) :
  if localized_fields == ALL_FIELDS or ( localized_fields and f . name in localized_fields ) :
 self . choices . append ( ( f , f . replace ( path , "" , 1 ) ) )
 parser . add_argument ( '--pks' , dest = 'primary_keys' ,  help = "Only dump objects with given primary keys. "  "Accepts a comma separated list of keys. "  "This option will only work when you specify one model." )
   queryset = property ( _get_queryset , _set_queryset )
   def extract ( self , to_path ) :
 if origin :
 if self . feed [ 'feed_url' ] is not None :
 if not router . allow_migrate ( database , cache . cache_model_class ) :
                security_logger = logging . getLogger ( 'django.security.%s' %  e . __class__ . __name__ )
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
 def join ( value , arg , autoescape = None ) :
   def __bool__ ( self ) :
   import django . core . checks . compatibility . django_1_6_0
              return super ( DjangoJSONEncoder , self ) . default ( o )
      is_usable = resource_string is not None
   for line in header . split ( b'\r\n' ) :
 return self . forms [ self . initial_form_count ( ) : ]
 from django . forms . widgets import ( SelectMultiple , HiddenInput ,  MultipleHiddenInput )
 from django . utils . encoding import force_bytes
 utility . execute ( )
              response = self . get_response ( request )
 for form in valid_forms :
  except TypeError :
 VARIABLE_ATTRIBUTE_SEPARATOR = '.'
    context_re = re . compile ( r"""^\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?'))\s*""" )
              return Context ( context )
 if path . exists ( new_path ) :
                      setattr ( base , old_method_name , wrapper ( new_method ) )
 from django . utils . six . moves import html_entities
                          deps . append ( rel_model )
 from django . forms . utils import flatatt , to_current_timezone
 from importlib import import_module
    raise ImportError ( "No IPython" )
                      continue
 color_settings = termcolors . parse_color_setting ( DJANGO_COLORS )
 found = getattr ( found , frag )
     @ python_2_unicode_compatible
    @ register . filter ( is_safe = False )
  elif args [ 1 ] == '304' :
          return list ( self . __iter__ ( ) ) [ idx ]
  def __init__ ( self , children = None , connector = None , negated = False ) :
              questioner = InteractiveMigrationQuestioner ( )
 return ResolverMatch ( sub_match . func , sub_match . args , sub_match_dict , sub_match . url_name , self . app_name or sub_match . app_name , [ self . namespace ] + sub_match . namespaces )
    class CheckboxInput ( Widget ) :
       def stringfilter ( func ) :
          return value
                  _ [ m [ k ] ] = v
  else :
 self . path_info = ''
   def parse_date ( value ) :
      pass
  if isinstance ( source , NonCapture ) :
 def linebreaksbr ( value , autoescape = None ) :
 return re . sub ( r'&(?:\w+|#\d+);' , '' , force_text ( value ) )
 from django . utils . deprecation import RemovedInDjango19Warning
   def __delitem__ ( self , key ) :
  return urlquote ( value , ** kwargs )
 for key in c . keys ( ) :
    for filename in files :
     class Warning ( CheckMessage ) :
              hextets += [ '' ]
 def __init__ ( self , argv = None ) :
 if value in ( True , 'True' , '1' ) :
                  self . stdout . write ( "UnicodeDecodeError: skipped file %s in %s" % ( f . file , f . dirpath ) )
 zfile . close ( )
          def dec ( func ) :
                       field_value = [ getInnerText ( k ) . strip ( ) for k in keys ]
     loader = MigrationLoader ( None , ignore_no_migrations = True )
    def activate ( language ) :
          if kwargs . pop ( 'ipv6' , False ) :
    def configure_formatter ( self , config ) :
 formatter = config . pop ( 'formatter' , None )
 output = [ ]
   def __enter__ ( self ) :
   def handle ( self , * args , ** options ) :
 for i , row in enumerate ( connection . introspection . get_table_description ( cursor , table_name ) ) :
    class MultiValueDict ( dict ) :
                  definition [ 'fg' ] = fg
   transfer_encoding = meta_data . get ( 'content-transfer-encoding' )
          if not var or ' ' in var :
 changes = autodetector . arrange_for_graph ( changes , loader . graph )
   def get_version ( self ) :
   def incr ( self , key , delta = 1 , version = None ) :
              created_models = [ ]
  except Exception as e :
                  self . add_error ( name , e )
              return base
  except AttributeError :
              handler . addQuickElement ( "category" , "" , { "term" : cat } )
 id_ = widget . attrs . get ( 'id' ) or self . auto_id
 self . variable_name = variable_name
      _dec . _decorated_function = getattr ( func , '_decorated_function' , func )
                      self . unlink ( self . name )
          return self . token
  else :
  if old_style_list :
 COMMENT_TAG_END = '#}'
  __all__ = [  'SimpleCookie' , 'parse_cookie' , 'HttpRequest' , 'QueryDict' ,  'RawPostDataException' , 'UnreadablePostError' , 'build_request_repr' ,  'HttpResponse' , 'StreamingHttpResponse' , 'HttpResponseRedirect' ,  'HttpResponsePermanentRedirect' , 'HttpResponseNotModified' ,  'HttpResponseBadRequest' , 'HttpResponseForbidden' , 'HttpResponseNotFound' ,  'HttpResponseNotAllowed' , 'HttpResponseGone' , 'HttpResponseServerError' ,  'Http404' , 'BadHeaderError' , 'fix_location_header' , 'JsonResponse' ,  'conditional_content_removal' ,  ]
    for f in opts . many_to_many + opts . virtual_fields :
 MIMEMultipart . __init__ ( self , _subtype , boundary , _subparts , ** _params )
  return 0 , ch2
                      plural_form_line = force_str ( m . group ( 'value' ) )
              continue
    if settings . TEMPLATE_DEBUG :
          return self
 from django . utils . module_loading import import_string
from __future__ import unicode_literals
 from django . core . management . color import no_style
  try :
 from __future__ import unicode_literals
                  raise CommandError ( "You can only use --pks option with one model" )
    def sanitize_separators ( value ) :
 sys . stdout . close ( )
  from django . utils import six
                      if self . asvar is None :
   def get_objects ( ) :
 for f in fields :
              raise TypeError ( "can't delete _wrapped." )
                          if self . selected_fields is None or field . attname [ : - 3 ] in self . selected_fields :
           instance . save ( )
 if sep is not None :
      return _trans . pgettext ( context , message )
  key , value = bits [ 2 ] , bits [ 0 ]
 self . month_none_value = self . none_value
 from django . utils . text import ( smart_split , unescape_string_literal ,  get_text_list )
  def __init__ ( self , states , first ) :
   template_source_loaders = tuple ( loaders )
  self [ 'Content-Type' ] = content_type
          vary_on = ( )
 output = self . nodelist . render ( context )
                  raise TemplateSyntaxError ( "Could not parse some characters: "  "%s|%s|%s" %  ( token [ : upto ] , token [ upto : start ] ,  token [ start : ] ) )
 self . remaining -= len ( result )
