  from __future__ import unicode_literals into default name space.
  call the method self.data.weekday, use the result as an key for obtaining WEEKDAYS dictionary value, return it.
  self._post is an instance of QueryDict created with arguments: self.body and encoding set to self._encoding,
  call the self.read method with argument chunk_size, substitute the result for data.
  call the method cmatch.group with an argument integer 1, format with the result string ' _(%s) ', write it to out.
  call the urljoin function with arguments: self.base_url and result of the call to the function filepath_to_uri with argument name, return the result.
  if Exception exception is caught,
  from django.utils import six into default name space.
  call the self.stdout.write method with string "    Creating table %s\n" as argument, with all occurrences of '%s' replaced with model._meta.db_table.
  derive the class SimpleNode form the base class TagHelperNode.
  append model to model_list.
  from django.core.files.uploadhandler import StopUpload,  SkipFile and StopFutureHandlers into default name space.
  define the function get_language.
  substitute RadioChoiceInput for choice_input_class.
  substitute as_string for as_bytes.
  append string 'django.conf.locale.%s' to format_locations.
  define the method __deepcopy__ with 3 arguments: self and memo.
  return an instance of BoundField class, created with arguments self, field and name.
  if 'error_messages' is contained in kwargs,
  create a list out of open_tags elements form (i+1)-th index to the end, substitute it for open_tags.
  substitute BOOL for LockFileEx.restype.
  substitute self.fixture_dirs for fixture_dirs.
  return ZERO.
  try,
  put elements of ignore_patterns into a set, substitute the length of it for self.ignore_patterns.
  for every a and n in targets, put a into a set, join all the set elements into a string separated by string ', ',
  skip this loop iteration.
  append x to self.namespaces list for every x in namespaces, only if x is true.
  get value under the 'database' key of the options dictionary, substitute it for db.
  define the method __repr__ with an argument self.
  call the __init__ method from the base class of the JsonResponse class, called with arguments: content set to data,
  and unpacked dictionary kwargs.   instance.keyOrder is an empty list.
  if self.dry_run is false,
  return the result of the method field.widget.value_from_datadict called with 3 arguments: self.data, self.files and prefix.
  substitute logging.getLogger for getLogger.
  call the function os.unlink with an argument work_file.
  derive the class EndToken from the TokenBase base class.
  if endblock.contents is not contained in acceptable_endblocks,
  get the value under the 'filename' key of the params dictionary, if it is true,
  return parser
  temp_lib is an instance of Library class.
  if self is not contained in state_frame,
  return an instance of SafeText, created with an argument data.
  input_type is None.
  call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, substitute the result for res.
  if string '%(truncated_text)s' is contained in truncate,
  return unbound.im_func.
  if errors is true,
  call the function do_ifequal with 3 arguments: parser, token and boolean False, return the result.
  decorator function register.filter with an argument is_safe set to boolean True.
  if current_app and is true and current_app is contained in app_list,
  join elements of comment_notes into a string, separated by whitespaces, append it to the string ' #', append the result to field_desc.
  from email.header import Header into default name space.
  for every app_name and model_list in return value of manifest.items method,
  model_list is an empty list.
  call the method self.compression_formats.keys, convert it to list, substitute it for cmp_fmts if cmp_fmt is None,
  if ImportError or AttributeError exception occurred,
  call the method self.extend_nodelist with 3 arguments: nodelist, compiled_result and token.
  raise an exception.
  substitute sys.maxsize for MAXSIZE.
  from django.core.handlers import base into default name space.
  if value is contained in self.empty_values and self.required is true,
  try,
  define the method print_help with 3 arguments: self, prog_name and subcommand.
  raise an TemplateSyntaxError exception with an argument string "'for' statements should use the format 'for x in y': %s",
  if proto is greater than or equal to integer 2,
  settings.DEFAULT_CHARSET if the key doesnt exists and strings_only set to boolean True.   call the Model._meta.get_field method with an argument field_name, substitute the result for field.
  return settings.LANGUAGE_CODE.
  if six.PY3 is boolean True,
  from django.core.management.base import AppCommand into default name space.
  if self.encoding exists substitute it for encoding, if not substitute settings.DEFAULT_CHARSET for encoding.
  if os.path has an attribute 'samefile',
  for every chunk in content.chunks function return value,
  from django.forms.widgets import Media,  MediaDefiningClass,  TextInput and Textarea into default name space.
  if self._delegate_bytes is true,
  do nothig.
  from django.utils import dateformat, numberformat and datetime_safe into default name space.
  derive the class BaseArchive from the object base class.
  return boolean True.
  define the function Deserializer with arguments stream_or_string and unpacked dictionary options.
  skip this loop iteration.
  call the method self.run_shell with an argument shell set to value under the 'interface' key of the options dictionary.
  if TypeError or AttributeError exceptions are caught,
  substitute content_type for self.content_type.
  derive the class EmailField from the base class CharField class.
  try,
  call the method imatch.group with an argument integer 1, substitute the result for g.
  call the method d.quantize with 3 arguments: exp, ROUND_HALF_UP and instance of Context class created with prec as prec,
  with an argument i, append the result to a list, substitute the resulting list for forms.   return forms.
  substitute parent_name for self.parent_name.
  remove first and last elements of s, replace every occurrence of string '\%s' formated with quote with quote,
  if 'HTTP_HOST' is contained in self.META,
  where '%s' is replaced with self.__class__.__name__.   if self doesnt have an '_ordering' attribute,
  derive the class TypedChoiceField from the base class ChoiceField class.
  if extra_context is false,
  replace all '%s' from string "%s: %s%s%s" with values of obj, id, self.msg and hint, respectively, return the result.
  call the method self._iteritems, for every k and v in the result,
  if ImportError exception is caught,
  define the method __init__ with 5 arguments: self, data, encoder set to DjangoJSONEncoder, safe set to boolean True,
  call the function mark_safe with an argument value, return the result.
  define the function send_mass_mail with, datatuple, fail_silently set to False, auth_user set to None, auth_password set to None,
  define the method inner with 2 arguments: self and unpacked list args.
  if sep is None,
  error is an dictionary with an initial entry error.error_list for filed if true, or NON_FIELD_ERRORS if not.
  break from the loop execution.
  put the double qoutes around encoded.
  substitute logging.NOTSET for logger.level.
  call the method to_delete.add with an argument model.
  call the method self.total_form_count, for every i in sequence of integers, from 0 to the previous result,
  _PROTECTED_TYPES is a tuple containing next elements, six.integer_types, type of None, type of float, Decimal, detetime.datetime,
  define the get_str_from_wsgi function with environ, key and default as arguments.
  return value under the key key of d dictionary.
  substitute bp for lbp.
  increment key by item.
  substitute string 'checked' for value under the 'checked' key of final_attrs dictionary.
  subtract self.STDOFFSET with self.DSTOFFSET, substitute the result for self.DSTDIFF.
  BASE56_ALPHABET is a string '23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz'.
  from django.db.models.fields.related import ManyToManyField.
  if not,
  return string 'form'.
  derive the class InputStreamExhausted from the Exception base class.
  print message to the standard output.
  if settings.USE_ETAGS is True and function call response.has_header with string 'ETag' as argument returns boolean False,
  if not,
  define the method set_signed_cookie with 5 arguments: self, key, value, salt as an empty string and unpacked dictionary kwarg.
  if weight is greater or equal to integer 6,
  for every i and item in enumerated iterable values,
  try,
  with the call to the transaction.atomic method with using set to connection.alias, savepoint set to connection.features.can_rollback_ddl as arguments,
  raise an IOError exception with argument string "%s exists and is not a directory.", where '%s' is replaced by directory.
  call the method self.stdout.write with an argument string "Installed %d object(s) (of %d) from %d fixture(s)",
  return Operator.
  define the method __enter__ with an argument self.
  if not,
  return errors.
  remove all the elements from space index of line.
  if path is not initialized,
  code is a string 'invalid'.
  default_error_messages is an dictionary with 5 initial entries: return value of the function _ called with an argument string,
  if template_name is an instance of list or tuple types,
  define the method __init__ with arguments: self, cmd and unpacked dictionary kwargs.
  if ValueError exception is caught,
  call the method executor.loader.graph.leaf_nodes and substitute its result for targets.
  use global variable _supported.
  call the method attachment.set_payload with an argument content.
  define the get_path_info function with environ as the argument.
  return a string "<WithNode>"
  if not,
  d is an instance of Decimal class created with an argument input_val.
  append string ".moves.urllib_parse" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for parse.
  call the method self.build_attrs with an argument attrs, substitute the result for final_attrs.
  derive the class EmailBackend from the BaseEmailBackend base class.
  wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " FAKED" as a argument.
  substitute self._stream for stream.
  call the function new_method_proxy with an argument hash, substitute the result for __hash__.
  call the function force_text with an argument bf_errors, format the error_row string with the result, append it to the output.
  substitute name for self.name.
  while path is true,
  for every v in self.validators,
  do nothing.
  if not,
  derive class CachedDnsName from the object base class.
  for every e in all_issues,   raise an CommandError with argument msg,
  define the method _get_choices with an argument self.
  and join the results into a string, separated with '|' character, return the result.   derive the class Lexer from the object base class.
  evaluate pickle.loads with argument pickled, return the result.
  call the method handler.addQuickElement with 2 arguments: string 'lastBuildDate' and result of the function rfc2822_date,
  append string "System check identified %s (%s silenced)." to msg, replace first '%s' for: string "no issues",
  if http_cookies.CookieError exception is raised.
  call the method n.getAttribute with string 'pk' as argument, use the result as an argument for the call to the field.rel.to._meta.pk.to_python method, substitute the result for obj_pk.
  if not,
  define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  var_obj is None.
  if old_field_name is true,
  split arg by ',', substitute the result for bits.s
  all the function fcntl.flock with return value of the _fd(f) function and fcntl.LOCK_UN as arguments, substitute the result for ret.
  clean is a lambda function with arguments self and x, return value is x.
  try,
  substitute value under the number key of the rhs dictionary for number_value.
  from django.utils import six into default name space.
  substitute the result for domain.   if UnicodeError exception is caught,
  call the method self.empty_form.is_multipart, return the result
  define the method __exit__ with 4 arguments self, exc_type, exc_value and traceback.
  define the method copy with an argument self.
  zip elements of result and result_args into a list of tuples, for every item and args in the result,
  define the method delete_cookie with 4 arguments: self, key, path set to character '/' and domain set to None.
  call the function allow_lazy with 2 arguments: wrap and six.text_type, substitute the result for wrap.
  substitute self.pointer for i.
  if not,
  define the method __repr__with an argument self.
  try,
  skip this loop iteration.
  for every i and v in enumerated iterable value,
  return out.
  call the method __init__ from the base class of the EntitiesForbidden class.
  from module __future__ import unicode_literals to default name space.
  bring intger 2 to integer 32, decrement the result by 1, multiply it with hlen, if dklen is greater than the previous result,
  substitute prefix for self.prefix.
   if settings.FILE_UPLOAD_TEMP_DIR is true,
  call the method self._handle_fk_field_node with field_node and field as arguments, substitute the result for the value under the
  import module re.
  raise an exception.
  substitute result.queryset for result.queryset.
  and result of the function force_str called with an argument safe,   use the result as an argument for the call to the function force_text, return the result.   call the function allow_lazy with 2 arguments: urlquote and six.text_type, substitute the result for urlquote.
  if smtplib.SMTPException exception is caught,
  if name is not None,
  if not,
  substitute self.start_doctype_decl for parser.StartDoctypeDeclHandler.
  inverse_match set to None and flags set to None.   if regex is not None,
  from django.conf import settings into default name space.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  if self._wrapped is empty,
  if limit_choices_to is not None,
  derive the class ConvertingDict from dict base class.
  if directory is not an directory,
  remove first two elements from bits.
  evaluate the function get_system_encoding(), substitute the return vale for DEFAULT_LOCALE_ENCODING.
  for every app_config in reversed list created out of the return value of the function apps.get_app_configs,
  call the method parser.parse with an argument tuple with an element string 'endifchanged', substitute the result for nodelist_false.
  fks_to_parent is a list containing f for every f in opts.fields, only if f is an instance of ForeignKey,
  if m is true,
  do nothing.
  make a directory top_dir.
  and request_repr, respectively.   reporter is an instance of ExceptionReporter class, created with 3 arguments: request, is_email as boolean True,
  call the method widget_attrs from the base class of the class CharField, with an argument widget, substitute the result for attrs.
  do nothing.
  return self.__to_language.
  define the method lists with an argument self.
  loop_dict and value under the 'forloop' key of the context dictionary are dictionaries with an entry: parentloop for 'parentloop'.
  default_error_messages is an dictionary with an entry: return value of the function _ called with an argument,
  decorator register with Tags.models as an argument.
  call the method constant_re.findall with an argument t.contents, for every fmatch in the result,
  raise an ValueError exception with an argument string 'Unable to configure root logger: %s' formated with e.
  define the method reverse with arguments self, lookup_view, unpacked list args and unpacked dictionary kwargs.
  derive the class MLStripper from the HTMLParser base class.
  extend collect list with _builtin_context_processors.
  return func.
  value_converters is a dictionary with 2 entries: 'ext_convert' for 'ext' and 'cfg_convert' for 'cfg'.
  substitute fcntl.LOCK_SH for LOCK_SH.
  __all__ is a list containing next strings, 'CheckMessage', 'Debug', 'Info', 'Warning', 'Error', 'Critical',
  define the method load_template with 3 arguments: self, template_name, template_dirs set to None.
  derive the class Operator from the base class TokenBase.
  define the method url with arguments self and name.
  define the method tags_available with argument self.
  call the function sys.getfilesystemencoding if it evaluates to true, substitute its result for fs_encoding,
  call the function get_fixed_timezone with an argument offset, substitute the result for tzinfo.
  outut is an empty list.
  call the function reloader_thread.
  call the method self.xml.startElement with an argument string 'natural'.
  DEFAULT_LOCALE_ENCODING and strings_only set to boolean True and p.returncode.   define the function handle_extensions with 2 arguments: extensions set to tuple containing string 'html' and ignored set to tuple containing string 'py'.
  return the value under the self.data.month key of the MONTHS_3 dictionary.
  call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the item dictionary.
  from django.utils.datastructures import MultiValueDict and ImmutableList into default name space.
  try,
  define the method emit with 2 arguments: self and record.
  call the method self.tag with 2 arguments: function_name and compile_func.
  get the value under the 'indent' key of the self.options dictionary, substitute it for indent.
  return an raw string '\"'.
  import module sys.
  substitute self._empty_value for value.
  if 'needs_autoescape' attribute of func object exists and is true,
  extend list kw with a list with 5 elements: d.hour, d.minute, d.second, d.microsecond and d.tzinfo.
  call the method self._new_gnu_trans with an argument localedir, substitute the result for translation.
  if app_dir is a directory,
  strip f of whitespaces and append it to plist.
  import module os.
  call the function warnings.warn with 3 argument: string "AppCommand.handle_app() is superseded by AppCommand.handle_app_config().",
  if self.merge and conflicts are both true,
  self.connection is None.
  define the function unlock with argument f.
  year_val and month_val and day_val are set to None.
  call the method self.handle_template with 2 arguments: value under the 'template' key of the options dictionary and base_subdir.
  from __future__ import unicode_literals into default name space.
  pop the value under the 'stream' key of the kwargs dictionary, if it exists replace it for self.stream, if not replace sys.stdout for self.stream.
  buf is an instance of StreamingBuffer class.
  if self.decimal_places is not None,
  if value equals k or text_value equals return value of the function force_text called with argument k,
  if not,
  call the self._open method with name and mode arguments, return the result.
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  get the value under the 'charset' key of content_params dictionary, substitute it for self.encoding.
  define the method utcoffset with 2 arguments: self and dt.
  where '%s' is replaced with self.__class__.__name__.   property decorator,
  substitute name for self.name.
  from django.utils.six.moves import copyreg into default name space.
  from email.mime.text import MIMEText into default name space.
  substitute link_next for value under the NEXT key of the link_prev dictionary.
  zip together new_keys and keys, convert it to dictionary, assign it to m.
  call the re.compile function with 2 arguments: raw string "(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*$",
  call the function is_protected_type with an argument value, if it evaluates to true,
  try,
  derive the class Node form the base class object.
  define the function int_to_base36 with an argument i.
  loaded_objects_in_fixture is integer 0.
  default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string,
  define the method add_item_elements with 3 arguments: self, handler and item.
  call the method DjangoSafeDumper.add_representer with arguments decimal.Decimal and DjangoSafeDumper.represent_decimal.
  if key is not contained in default_settings,
  append value to self.dicts list.
  try,
  return boolean False.
  substitute block for value under the 'block' key of context dictionary.
  result of the call to the function _ with an argument string 'feb' for 2,   result of the call to the function _ with an argument string 'mar' for 3,   result of the call to the function _ with an argument string 'apr' for 4,   result of the call to the function _ with an argument string 'may' for 5,   result of the call to the function _ with an argument string 'jun' for 6,   result of the call to the function _ with an argument string 'jul' for 7,   result of the call to the function _ with an argument string 'aug' for 8,   result of the call to the function _ with an argument string 'sep' for 9,   result of the call to the function _ with an argument string 'oct' for 10,   result of the call to the function _ with an argument string 'nov' for 11,   result of the call to the function _ with an argument string 'dec' for 12.   MONTHS_3_REV is an dictionary with 12 entries: 1 for 'jan', 2 for 'feb', 3 for 'mar', 4 for 'apr', 5 for 'may', 6 for 'jun',
  if is_templatized is true,
  substitute choices for self.choices.
  validTemplateLibrary, BLOCK_TAG_START, BLOCK_TAG_END, VARIABLE_TAG_START, VARIABLE_TAG_END, SINGLE_BRACE_START, SINGLE_BRACE_END,   COMMENT_TAG_START, COMMENT_TAG_END, VARIABLE_ATTRIBUTE_SEPARATOR, get_library, token_kwargs, kwarg_re and render_value_in_context.   from django.template.smartif import IfParser and Literal into default name space.
  call the function ugettext with an argument string "Please correct the duplicate data for %(field)s, which must be unique.",
  if cache_timeout equals to None,
  call the function datetime.datetime with utc as argument if call to the is_aware(d) returns True, if not None is the argument, store the result in now.
  from django.utils import six into default name space.
  call the method self.__cast, if the result is lesser than other, return boolean True, otherwise return boolean False.
  define the method _read_limited with self class instance and size set to None as arguments.
  if not,
  raise an TemplateSyntaxError exception with an argument string "'%s' takes at least one argument (path to a view)",
  call the method self._cache_flush_all.
  derive the class SafeMIMEMultipart from the MIMEMixin and MIMEMultipart base class.
  chunk_size is an integer 1024.
  for every sql in custom_sql,
  if base_lang is contained in settings.LANGUAGES_BIDI, return boolean True, if not, return boolean False.
  define the method render_node with 3 arguments: self, node and context.
  write a white space to the self.stream file stream.
  split first and second element of hextet into parts by ':', sum their lengths, substitute the result for sep.
  define function no_style, without input arguments.
  call the function check_for_migrations with an arguments app_config and connection.
  call to the self.handle_uncaught_exception method with request, resolver and value of the evaluated function sys.exec_info,
  return ipv4_unpacked.
  call the method t.to_language, return the result.
  define the method list with an argument self.
  string 'Enter a list of values.' for 'list', return value of the function _ called with an argument,   string 'Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice',   and return value of the function _ called with an argument string '"%(pk)s" is not a valid value for a primary key.' for 'invalid_pk_value'.   define the method __init__ with 10 arguments: self, queryset, cache_choices set to None, required set to boolean True,
  if not,
  substitute '%s' in the string " (%s squashed migrations)" with length of replaces filed of graph.nodes element at the plan_node index, append the string to the title.
  set self.__starttag_text to None.
  operations is an empty list.
  raise an CommandError exception with an argument string "%r conflicts with the name of an existing Python module and cannot be used "
  call the method self.itervalues, return the list of results.
  substitute f.name for field.
  from django.utils import six into default name space.
  return an empty string.
  call the method self.writer_leaves.
  self.object._meta.object_name and self.object.pk, respectively.   define the method save, with 3 arguments: self, save_m2m set to boolean True and using set to boolean True.
  call the method value.rsplit with arguments character '@' and integer 1, assign the result to user_part and domain_part, respectively.
  decorator function register.filter with an argument is_safe set to boolean False.
  return the value under the 'CONTENT_TYPE' of the META dictionary, if it doesnt exist return an empty string,   substitute the result for content_type.   if content_type doesnt start with string 'multipart/',
  from django.utils._os import npath and upath into default name space.
  shells is a list containing 2 elements: string 'ipython' and string 'bpython'.
  substitute content for self.content.
  update self.filters dictionary with lib.filters.
  if values is None,
  if refto is contained in seen_models,
  NON_FIELD_ERRORS is an string '__all__'.
  output and hidden_fields are both empty lists.
  if first and second element of sys.version_info are both equal to integer 3,
  define the method add_root_elements with 2 arguments self and handler.
  call the method self.has_key with an argument key, return the result.
  split string name into two parts from the right side by the separator '.', substitute parts for path and module, respectively.
  call the method handler.startElement with 2 arguments: string "rss" and result of the method self.rss_attributes.
  call the file.__exit__ method on self with exc, value and tb as the arguments.
  if os.path.sep is contained in fixture_name,
  call the function import_module with an argument taglib_module, substitute the result for mod.
  get the value under the 'use_natural_primary_keys' key of the options dictionary, substitute the result for use_natural_primary_keys.
  for every form_errors in self.errors sum length of return value of the method self.non_form_errors and length of form_errors, return the result.
  define the function _helper with 2 arguments list and tabs set to integer 1.
  step is an string 'any'.
  where '%d' is replaced with i and '%s' is replaced with subject.   increment i by integer 1,
  return boolean True.
  if fifth and sixth elements of row are None,
  define the function timesince_filter with 2 arguments value and arg set to None.
  call the email_message.recipients method, if it evaluates to false,
  raise an SuspiciousFileOperation exception with string "Attempted access to '%s' denied." as argument, replace '%s' with name.
  call the method serializers.get_serializer with an argument format.
  define the method __init__ with 13 arguments: self, path, match set to None, recursive set to boolean False,
  return an empty dictionary.
  call the method parser.next_token, substitute the result for token.
  if t.token_type equals TOKEN_BLOCK and t.contents equals 'endcomment',
  remove first element of result from self.keyOrder dictionary.
  code is a string 'min_value'
  call the method self.configure_filter with an argument value under name key of formatters dictionary,
  if field_type equals a string 'AutoField(',
  and _allow_fallback set to boolean True, extend the output with the result.   return output.
  if count of occurrence of '.' in ip_str is not equal to integer 3,
  call the method parser.parse with an argument tuple with an element string 'endverbatim', substitute the result for nodelist.
  call the function allow_lazy with 2 arguments: unescape_entities and six.text_type, substitute the result for unescape_entities.
  if months is true,
  if self.validate_max is true, and length of self.deleted_forms subtracted from the return value of the method self.total_form_count,
  if an exception occurred,
  call the method appendlist from the base class of the QueryDict class, with arguments key and value.
  call the method self.create_table with arguments: db and tablename.
  is an even number,   call the method s.find with 2 arguments: bytes string ';' and end incremented by one, substitute the result for end.
  append to options a tuple containing 2 entries: firs element of sorted list of the s_opt.option_strings,
  otherwise if length of fks_to_parent is zero,
  obj is a string "?".
  call the method handler.addQuickElement with 2 arguments: string 'email' and value under the 'author_email' key of the self.feed dictionary.
  raise an KeyError with an argument string "Key %r not found in '%s'", substitute '%s' with name and self.__class__.__name__.
  if code is None,
  split instructions by ',' character, substitute the result for styles.
  if app_config.models_module is None,
  join source list elements from last till pos indexes into a string, substitute the result for piece.
  define the function default_if_none with 2 arguments value and arg.
  if field is contained in form.cleaned_data,
  PALETTES is a dictionary containing 3 elements, a dictionary with 18 pairs of dictionary value and string keys for NOCOLOR_PALETTE,
  join migrations_directory and string "__init__.py" into a file path, substitute it for init_path.
  substitute name for old_attr.
  substitute compile_function for self.tags dictionary value under the name key.
  want_unicode is boolean True.
  define the method clean with arguments self and value.
  that occupies minimum 4 places within a string, and app_label, substitute the result for new_migration.   writer is instance of MigrationWriter class, created with new_migration argument.
  call the method self._delete with argument k.
  define the method __str__ with an argument self.
  define the method write with 3 arguments: self, outfile and encoding.
  substitute a tuple with 2 elements: template and origin, for self.find_template_cache dictionary value under the key key.
  call the method self.characters with an argument contents.
  return attrs.
  return boolean False.
  if f is an instance of ManyToManyField,
  return msg.
  return response
  define the function make_decorator with 2 arguments: unpacked list m_args and unpacked dictionary m_kwargs.
  if field.rel.to._meta.pk.rel is true,
  call the method sys.stderr.write with an argument string "  http://www.saddi.com/software/flup/   If you've already\n".
  renamed methods is a tuple containing 3 elements: '_get_memcache_timeout', 'get_backend_timeout' and RemovedInDjango19Warning.
  return an empty string,
  define the method remove with 2 arguments: self and item.
  and ignorenonexistent set to self.ignore, substitute the result for objects.   for every obj in objects,
  default is boolean False and help is a string 'Use natural keys if they are available (deprecated: use --natural-foreign instead).'.   call the method parser.add_argument with 5 arguments: string '--natural-foreign', action set to string 'store_true',
  substitute the middleware.   define the function _decorator with an argument view_func.
  take elements of token_string from second to second last element and strip the whitespaces surrounding the result,
  if content has an 'chunks' attribute,
  remove first element from remaining_bits, substitute the result for option.
  otherwise if t.token_type equals TOKEN_COMMENT,
  if empty_label is an instance of list or tuple type,
  host ends with '.' and host ends with pattern or host is equal to all but first elements of pattern,   substitute boolean true for match, otherwise substitute boolean False for match.   if match is true,
  if ImproperlyConfigured renamed to exc, exception is caught,
  get property attribute _get_height, and substitute it for width.
  if not,
  call the method self.create_token with 3 arguments: self.template_string list elements from start index to end index,
  call the add_arguments method with parser as argument form the base class of the class Command.
  if message-id' is not in header_names,
  if NameError exception is caught,
  if exception of the class Exception, as e, is caught,
  otherwise if func is callable object,
  define the method write with 3 arguments: self, outfile and encoding.
  if id_ is true,
  call the function mark_safe with an argument string ' selected="selected"', substitute the result for selected_html.
  call the method parser.parse with an argument tuple with one element string 'endblock', substitute the result for nodelist.
  get name attribute of the self._out object, return it.
  raise an ValueError exception with an argument string 'Unable to configure handler %r: %s' formated with name and e.
  define convert method with self class instance, number, from_digits, to_digits and sign as arguments.
  call the method token.split_contents, substitute the result for bits.
  define the method run_validators with arguments self and value.
  skip this loop iteration.
  return self._container converted into a iterable.
  if ch equal a string '(',
  call the method _ExpatParser.__init__ with arguments self, unpacked list args and unpacked dictionary kwargs.
  raise an InvalidTemplateLibrary exception with an argument string "Template library %s does not have a variable named 'register'",
  call the function settings.is_overridden with argument string 'MIDDLEWARE_CLASSES', if the result is boolean False,
  where '%s' are replaced with name and param.   if not,
  self.style.MIGRATE_HEADING, write the result to self.stdout.   write string "  You should commit this migration but leave the old ones in place;" to self.stdout.
  from django.utils.encoding import smart_text,  force_text and python_2_unicode_compatible into default name space.
  substitute integers 0, 1, 2 and 3 for PREV, NEXT, KEY and RESULT, respectivley.
  return an empty list.
  define the method _post_clean with an argument self.
  convert settings.FIXTURE_DIRS to a list, extend dirs by it.
  join elements of parts into a string, separated with '.', substitute it for name.
  if not,
  call the method self.queryset.get with an argument, unpacked dictionary with an element: value for key, substitute the result for value.
  from __future__ import unicode_literals into default name space.
  substitute context for self.context.
  call the method re_camel_case.sub with 2 arguments: raw string ' \1' and value, strip the result of whitespaces from both ends,
  if scheme is countaine in self.url_schemes return boolean True, otherwise return False.
  call the function empty_form with 3 arguments: auto_id as self.auto_id, prefix set to the return value of the self.add_prefix method,
  append string "Field renamed because it was a Python reserved word." to field_notes.
  cc is an empty dictionary.
  common_prefix is None.
  if not,
  call the get_path_info function with environ as argument, substitute the result for path_info.
  derive the class DebugNodeList from the NodeList base class.
  if self.data.hour equals integer 0,
  from django.utils.safestring import mark_safe and SafeData into default name space.
  from django.core.management.base import AppCommand into default name space.
  call the function exhaust with an argument field_stream.
  import module codecs.
  if text is true format with it and RESET a string '%s\x1b[%sm', if not format it with an empty string and RESET, substitute the result for text.
  lines is an empty list.
  otherwise if action equals to string 'unapply_start'.
  and database set to value under the 'database' key of the options dictionary.   break the loop execution.
  define the method  remove_potfiles with an argument self.
  define the method render with 2 arguments self and context.
  join elements of the output into a string, separated by newlies, return the string.
  define the function _samefile with arguments src and dst.
  raise an StopIteration exception.
  define the method to_python with arguments self and value.
  substitute last element of colors for value under the 'bg' key of definition dictionary.
  msg is a string "Execution of %s failed", with '%s' replaced by self.program.
  if self._request_middleware is None,
  call the method self.nodelist_true.render with an argument context, return the result.
  default set to boolean False and help set to a string "Enable fixing of migration conflicts.".   call the method parser.add_argument with 5 arguments: string '--empty', action as a string 'store_true', dest as a string 'empty',
  if not,
  if the key doesnt exists substitute None for self.selected_fields.   remove the 'use_natural_keys' key from the options dictionary and substitute it for self.use_natural_keys,
  from django.utils.six.moves.urllib.parse import urlparse into default name space.
  call the method self.timezone.utcoffset with an argument self.data, substitute the result for offset.
  if self.alternatives is true,
  find the ending position of the regular expression match of the object match, substitute the result for k.
  and fileobj set to zbuf.   call the method zfile.write with an argument s.
  substitute old_method_name for self.old_method_name.
  call the method data.items, for every medium and paths in the result.
  i is integer 0.
  call the function datetime.date.today, substitute the year field of the result for this_year.
  call to the self.handle_uncaught_exception method with request, resolver and value of the evaluated function sys.exec_info,
  get value under the key settings.CACHE_MIDDLEWARE_ALIAS of caches dictionary, substitute with it the cache.
  call the method self._cache.set_multi with safe_data, self.get_backend_timeout(timeout) as arguments.
  from django.utils.timezone import template_localtime into default name space.
  raise an TypeError with an argument string "The argument `field` must be `None` when the `error`argument contains errors for multiple fields.".
  if '%s' is contained in settings.TEMPLATE_STRING_IF_INVALID, invalid_var_format_string is boolean True, otherwise it is False.
  call the function new_method_proxy with an argument bool, substitute the result for __nonzero__.
  return an instance of a class WidthRatioNode, created with 4 arguments: result of the method parser.compile_filter,
  call the function ugettext_lazy with an argument string 'Currently', substitute the result for initial_text.
  return media.
  as long as self.exists function with argument name evaluates to boolean True,
  if request._post_parse_error is true,
  define the method __init__ with 2 arguments: self and field.
  try,
  if lang_code is not contained in _supported and replacement is contained in _supported,
  define the method e with an argument self.
  call the function handle_m2m with an argument relobj.
  return res.
  call the method token.split_contents, substitute the result for bits.
  append string '_template' to app_or_project, substitute it for base_subdir.
  derive the class Info from base class CheckMessage.
  from django.core.management.base import BaseCommand, CommandError, CommandParser and handle_default_options into default name space.
  do nothing.
  help is a string "Deprecated - use 'migrate' instead.".
  for every field in self.fields,
  define the function _parse_header_params with an argument s.
  define the function urlize with 2 arguments value and autoescape set to None.
  define the method message_dict with an argument self.
  define the method __repr__ with an argument self.
  substitute self._wrapped for repr_attr.
  append a string 'This field type is a guess.' to field_notes.
  from django.utils.deconstruct import deconstructible into default name space.
  if not, self.merge is boolean False.   get the value under the 'empty' key of the options dictionary, if the key exists substitute it for self.empty,
  return a string "<DjangoTranslation lang:%s>", where '%s' is replaced with self.__language.
  import module warnings.
  define the function get_language_from_request with 2 arguments: request and check_path set to boolean False.
  if not,
  if timezone has an attribute 'normalize',
  call the method self.as_ul, return the result.
  if f.name is contained in cleaned_data,
  for every obj in result of the method queryset.iterator,
  call the method apps.get_app_configs, convert the result in a list, reverse the order of elements, substitute the result for app_configs.
  substitute new_filenames for filelist.
  if i is not an instance of six.integer_types class,
  field.rel.__class__.__name__ for 'rel' and return value of the function smart_text with an argument field.rel.to._meta for 'to'.   derive the class Deserializer from the base.Deserializer base class.
  yield and empty string as the result.
  call the method other.__cast, substitute the result for other.
  call the method lexer.tokenize, use it as an argument for the call to the parser_class function, substitute the result for parser.
  try,
  if old_handler is not None,
  LOCK_NB is a hexadecimal 1.
  convert items of attrs dictionary to list of tuples, for every attr and value in it,
  required set to boolean True, widget set to None, label set to None, initial set to None, help_text set to an empty string,   to_field_name set to None, limit_choices_to set to None, unpacked list args and unpacked dictionary kwargs.   if required is true and initial is not None,
  define the method _initialize_handlers with an argument self.
  if self.localize is true,
  from django.apps import apps into default name space.
  for every v in value call the function conditional_escape with an argument v, append the result in a list, substitute the resulting list for value.
  define the function main, with main_func, args defaulting to None and kwargs defaulting to None as arguments.
  call the method zipfile.ZipFile.__init___ with the arguments self, unpacked list args and unpacked dictionary kwargs.
  call the function check_for_migrations with arguments app_config and connection.
  from django.utils.deprecation import RemovedInDjango20Warning into default name space.
  call the method self.clean, substitute the result for cleaned_data.
  if not,
  do nothing,
  from IPython import start_ipython into default namespace.
  define the function strip_entities with an argument value.
  define the method __deepcopy__ with arguments self and memo.
  if VariableDoesNotExist exception is caught,
  for every s_opt in parser.option_list.   for every x in slice of cwords from the second element to the element at the cword decremented by 1 index,
  define the method read with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  deactivate and deactivate_all are lambda functions returning None.
  derive the class LocMemCache from the base class BaseCache.
  from django.utils.encoding import force_text and iri_to_uri into default name space.
  if tt.tm_isdst is greater than integer 0, return the result.
  return the length of self.children.
  raise an ImproperlyConfigured with an argument string "Calling modelform_factory without defining 'fields' or 'exclude' explicitly is prohibited."
  append item to self.items.
  from django.conf import settings into default name space.
  call the method os.path.dirname with an argument fixture_name, append it to a list, substitute resulting list for fixture_dirs.
  if not,
  if i is greater than length of subject,
  get the element of chunks at the (i+1)-the index, assign it to the seconds2 and name2, respectively.
  call the function six.text_type with length of lines as an argument,
  call the function gettext with an argument message, use the result as an argument for the call to the force_text function, return the result.
  substitute self for result.parent.
  from collections import defaultdict into default name space.
  increment res by element of to_digit at the digit index.
  if default_args exists substitute it for self.default_args, if not, self.default_args is an empty dictionary.
  define the method sign with arguments self and value.
  call the function re.compile with 2 arguments: raw string '^https?://\[?\w' and re.IGNORECASE, substitute the result for simple_url_re.
  call the function call_command with 6 arguments, string 'runserver', addrport as the value under the 'addrport' key of options dictionary,
  neg is integer 1.
  if new_name ends with string '_id',
  if found is false and, line is false or return value of the function plural_forms_re.search called with an argument line is false,
  derive the class Command from the BaseCommand base class.
  derive the class Group from list base class.
  with all occurrences of '%s' replaced with app_name and model._meta.object_name, respectively.   try,
  join p and cmd into a file path, substitute it for f.
  all_unique_checks is an empty set.
  respectively replace '%s' with key and elements of the resolved_path joined into a string, separated by ':'.   if not,
  call the method self.configurator.convert with an argument value, substitute the result for result.
  import module warnings.
  write msg to self.stderr stream.
  define the function safeseq with an argument value.
  convert the first element of the result to uppercase, append to it the rest of the result, substitute it for capfirst.   call the function allow_lazy with 3 arguments: capfirst and six.text_type.
  if call to the method response.has_header with string 'Cache-Control' as an argument returns boolean True,
  label is a string 'label'
  for every renamed_method in cls.renamed_methods,
  call the function dropwhile with 2 arguments: function len and msgs spit into parts at newlines, join the result into a string,
  data, encoding and errors as a string 'replace'.   otherwise if item_type equals FILE,
  substitute choices for self.choices.
  tuple with 2 elements: start and end and boolean False, append the result to result.   substitute end for upto.
  if filename is true and filename path doesnt exist,
  if not,
  if pathext is None,
  define the method clean with an argument self.
  substitute self for result.parent.
  call the self.path function with argument name, use the result as the argument for the call to the os.path.exists function, return the result.
  if app_config.models_module is None,
  get 'error_messages' attribute from the options object, if it exists substitute it for self.error_messages,
  from django.utils import datetime_safe into default name space.
  substitute fields for new_class.base_fields.
  raise an exception.
  call the function os.path.abspath with an argument dirpath, if it starts with return value of the method os.path.dirname,
  substitute offset for self.__offset.
  if output is true,
  from django.core.urlresolvers import set_script_prefix into default name space.
  call the method calendar.isleap with an argument self.data.year, return the result.
  append ')' to third element of bit, substitute it for sentinal.
  if not, self.coerce is an identity lambda function with an argument val.   if 'empty_value' key of the kwargs dictionary exists remove it and substitute its value for self.empty_value,
  call the function constant_time_compare with 2 arguments: val1 and val2.
  if nodelist.contains_nontext is true,
  define the method keys with an argument self.
  define the method get_backend_timeout with self and timeout set to DEFAULT_TIMEOUT as arguments.
  define the function urlquote_plus with 2 arguments: url and safe set to an empty string.
  call the function check_for_migrations with arguments app_config and connection.
  for every k and v in result of method the self.lists.   define the method __deepcopy__ with 2 arguments: self and memo set to None.
  if used_name is not equal to guessed_filename,
  call the method self.max_width.resolve with an argument context, convert the result to an integer and substitute it for max_width.
  substitute package.__path__ for package_path.
  substitute kwargs for self.kwargs.
  databases is a list containing 2 elements: self.using and None.
  try,
  call the self._lock.writer method, with the result perform the following,
  split ip_str by ':', if last element of the result is not equal to hextet.
  return form.
  raise an ValueError exception with an argument string 'Unable to convert %r at %r' formated with value and rest.
  remove idx-th element from self list.
  define the function F with an argument i.
  from argparse import ArgumentParser into default name space.
  substitute form for self.form.
  call the method self.__class__ with 3 arguments: an empty string, mutable is boolean True, encoding is self.encoding, substitute the result for result.
  call the function warnings.warn with 2 arguments: string "``use_natural_keys`` is deprecated; use ``use_natural_foreign_keys`` instead." and RemovedInDjango19Warning.
  if self.max_length is not None,
  raise an InvalidTemplateLibrary exception with an argument string "ImportError raised loading %s: %s",
  define the function wrapper with an argument unpacked list args.
  if self.verbosity is greater or equal to integer 1,
  try,
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  call the method self.configure_custom with an argument config, substitute the result for result.
  from logging.config import dictConfig.
  get the value under the settings.__module__ key of the sys.modules dictionary, use its __file__ field as an argument,
  subtract year from integer 2000, substitute the result for delta.
  admin is a string 'admin'
  call the function escape with an argument word, substitute the result for i-th element of words.
  call the function force_text with an argument bit, append the result to bits.
  return an empty string,
  if self.localize is true,
  for value of dictionary response under the key 'Last-Modified'.   if call to the function response.has_header with 'Expires' as argument returns boolean False,
  return value.
  call the method self._ordering.sort with an argument key as compare_ordering_key.
  define the function file_move_safe with 4 arguments: old_file_name, new_file_name, chunk_size set to multiple of integers 1024 and 64,
  substitute tup for elements of self.
  import module sys.
  write data to fp.
  call the function re.compile with 2 arguments: string '^([a-z]):' and re.I, substitute the result for _drive_re.
  call the method f.value_from_object with an argument instance, substitute the result for value under the f.name key of the data dictionary.
  kwargs is a empty dictionary.
  call the method logger.removeHandler with an argument h.
  if new_name starts with a string '_',
  call the method self.options.update with dictionary as an argument, containing 1 element: boolean False for 'use_decimal'.
  compile a regex from raw string '^\s*(\w+)\s*', substitute it for WORD_PATTERN.
  self._errors is an empty list.
  message is an string 'Unknown field(s) (%s) specified for %s'.
  raise an NotImplementedError with an argument string 'subclasses of BaseLoader must provide a load_template_source() method'.
  if not,
  call the function import_string with an argument dotted_path, substitute the result for attr.
  get the value under the 'symlinks' key of the options dictionary, substitute it for self.symlinks.
  new_class.declared_fields.keys.   if missing_fields is true,
  data is an empty list.
  return s.
  substitute name for new_mod.
  if not,
  substitute kwargs for media_attrs.
  if num_loopvars is not equal to len_item,
  call the method parser.compile_filter with an argument second element for bits, substitute the result for parent_name.
  value under the item key of self.dict dictionary is None.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  if not,
  define the method list with an argument self.
  from django.core.management.base import BaseCommand into default name space.
  call the method self.add_truncation_text with 2 arguments: if end_index is greater than zero, first end_index elements of text,
  replace '%s' in the string  "%s.process_template_response didn't return an HttpResponse object. It returned None instead.",
  if f is an instance of models.FileField,
  try,
  call the method os.dup2 with 2 arguments: result of the method so.fileno and result of the method sys.stdout.fileno.
  if not,
  add self.buffer and self._read_limited method return value together, store it in result.
  convert new_name to a string and append it to string 'number_', substitute the result for new_name.
  substitute the result for klass.   if klass is a subclass of logging.handlers.MemoryHandler base class and string 'target' is contained in config,
  if not,
  if not,
  get the type of self object, call its method __bool__ with an argument self, return the result.
  call the self._cache.get method with argument key, substitute the result for val.
  try,
  call the method kwargs.update with an argument self.default_args.
  derive the class StreamingBuffer from the object base class.
  call the get_bytes_from_wsgi function with environ, string 'SCRIPT_URL' and empty strings as arguments, substitute the result for script_url.
  decorator register with Tags.models and Tags.signals as arguments.
  if not return boolean False.   define the method add_fields with 3 arguments: self, form and index.
  call the method __init__ from the base class of the Field class.
  call the method self.add_prefix with an argument name, substitute the result for prefixed_name.
  boundarystream is an instance of InterBoundaryIter class, created with self._stream and self._separator as arguments.
  do nothing.
  substitute super for _super.
  define the function verbatim with 2 arguments: parser and token.
  call the method self.error with 2 arguments: token and string "Empty variable tag", return the result.
  substitute options for self.options.
  ModelFormMetaclass and BaseModelForm.   do nothing.
  if ValueError exception is caught,
  delete entry under the attr key of obj_dict dictionary.
  define the function decorating_function with an argument user_function.
  call the method extend_nodelist with 3 arguments: nodelist, node and token, from the base class of the class DebugParser.
  if value under the 'author_email' key of the self.feed dictionary is not None,
  define the method _iterkeys with an argument self.
  if ImportError exception is caught,
  get opname attribute from int object, substitute its field __doc__ for opfunc.__doc__.
  call the function import_module with an argument app_name.
  append label_output to output.
  import module types.
  call the function force_text with an argument value, substitute the result for value.
  if content_length is greater than settings.FILE_UPLOAD_MAX_MEMORY_SIZE,
  property decorator,
  break from this loop execution.
  define method __exit__ with self, exc, value and tb as the arguments.
  from django.utils.encoding import force_st into default name space.
  substitute self for retval.
  substitute first element of row for column_name.
  call the function shutil.move with arguments the_path and guessed_path.
  status_code is an integer 500.
  _meth_func is a string "im_func".
  derive the class RendererMixin from the object base class.
  fname is a string "%s-%s.log", with '%s' replaced by timestamp and absolute value of the return value of the function id with argument self, respectively.
  from django.db.migrations.loader import MigrationLoader and AmbiguityError into default name space.
  self.current is an empty dictionary.
  call the function smart_urlquote with an argument string 'http://%s' formated with an argument middle, substitute the result for url.
  append to errors list a dictionary created with 2 etries, if escape_html is true, return value of the function escape
  substitute max_expr for self.max_expr.
  if self.file is false or self.file.closed is true, return boolean true, otherwise return boolean false.
  if not,
  RemovedInDjango19Warning and stacklevel set to integer 2.   define the function _resolve_name with 3 arguments: name, package and level.
  convert value into boolean and substitute it for value.
  classmethod decorator,
   if middleware has an attribute 'process_exception',
  return the result of the function format_html called with 2 arguments: string '<input{0} />',
  return j.
  usage set to return value of the method self.usage called with an argument subcommand, version set to return value of the method self.get_version.   call the method parser.add_option with 8 arguments: string '-v', string '--verbosity', action set to string 'store',
  move integer 1 left for 50 bits, substitute the result for PB.
  if form.cleaned_data is true and value under the field key of form.cleaned_data dictionary is not None,
  call the self._cull method.
  call the method self.parent_widget.render with unpacked list args as an argument, return the result.
  return an instance of FilterExpression class, created with 2 arguments: token and self.
  define the method __next__ with an argument self.
  if connector is true, substitute it for self.connector, otherwise substitute self.default for self.connector.
  if not,
  return value.
  self.activated is boolean False.
  error_messages as an dictionary with an entry: value under the 'invalid_date' of errors dictionary for 'invalid',   localize set to localize, and an instance of the class TimeField created with 3 arguments: input_formats set to input_time_formats,   error_messages as an dictionary with an entry: value under the 'invalid_time' of errors dictionary for 'invalid',   localize set to localize   call the __init__ method with fields, unpacked list args and unpacked dictionary kwargs from the base class of the SplitDateTimeField class.
  derive the class AutoEscapeControlNode from Node base class.
  call the function parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and function_name,
  define the method _set_size with arguments self and size.
  if related_att is not None,
  do nothing.
  call the function six.reraise with 3 arguments: exc_type, exc_value and third element of the result of the method sys.exc_info.
  return wrapper.
  if length of bits is lesser than integer 3 or second element of bits is not equal to string 'as',
  import module re.
  from collections import OrderedDict into default name space.
  if not,
  raise an raise self.warning with an argument self.warning.
  try,
  define the method flush with an argument self.
  otherwise if token.token_type equals integer 2,
  field_dict is an instance of OrderedDict class, created with an argument field_list.
  substitute notation_name for self.notation_name.
  raise an TemplateSyntaxError with an argument string "'autoescape' tag requires exactly one argument.".
  substitute memoryview for memoryview.
  of the request.META dictionary is contained in settings.INTERNAL_IPS, otherwise use string 'EXTERNAL',   and result of the method record.getMessage.   call the function get_exception_reporter_filter with an argument request, substitute the result for filter.
  define the method tzname with 2 arguments self and dt.
  substitute negate for self.negate.
  return self.
  derive the class RssUserland091Feed from the RssFeed base class.
  if not,
  remove element from kwargs dictionary under the key 'pk_field', substitute it for self.pk_field if it exists,
  template is an instance of Template class, created with an argument content.
  try,
  bits is an empty list.
  call the method tried.extend with an argument: t added to a list containing element pattern, for every t in sub_tried.
  raise AttributeError exception,
  define the method __init__ with 2 arguments: self and callback.
  m2m_convert is a lambda function with an argument v, return value is the result of the function smart_text called with an argument:
  define the method _html_output with 6 arguments: self, normal_row, error_row, row_ender, help_text_html and errors_on_separate_row.
  call the method parser.print_help.
  define the method __mod__ with 2 arguments: self and rhs.
  substitute i-th element of tokens for token.
  substitute self._setupfunc for repr_attr.
  define the method as_hidden with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.
  child_nodelists is a tuple with 2 elements strings 'nodelist_true' and 'nodelist_false'.
  decorator cached_property.
  if error.params is true,
  status_code is an integer 200.
  if not,
  define protected method _BaseCookie__set with self class instance, key, real_value and coded_value as arguments.
  use the result as a key to get the value from the connections dictionary, substitute the result for connection.   call the function check_for_migrations with 2 arguments: app_config and connection.
  define the method __repr__ with an argument self.
  derive the class Form from the base classes DeclarativeFieldsMetaclass and BaseForm.
  define the function ngettext with 3 arguments: singular, plural and number.
  joining string '%r: %r' formated with k and v into a string, separated with ', ', use it to format a string '{%s}', return it.   define the method clear with an argument self.
  call the function io.open with 3 arguments: django_po, string 'r' and encoding set to string 'utf-8' as arguments,
  p is a instance of Popen class, created with 6 arguments: args, shell set to boolean False, stdout set to PIPE,
  m2m_value is a lambda function with an argument value, return value is the result of the function smart_text called with arguments:
  otherwise if first element of cwords is contanied in tuple with 8 entries: 'dumpdata', 'sql', 'sqlall', 'sqlclear', 'sqlcustom',
  remove elements under the 'path' key of the kwargs dictionary, if it exists substitute it for path, if not path is None.
  if indent is false,
  finally, perform,
  if it is smaller than the value of dictionary kwargs under the key 'max_age', substitute kwargs value under the key 'max-age' by it.   if cc contains item 'private' and kwargs contains item 'public',
  if lengths of value and arg are equal, return boolean True, otherwise return boolean False.
  derive the class date from the real_date base class.
  substitute list containing element self for self.error_list.
  define the method render with 2 arguments self and context.
  and help set to a string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.   define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
  _assertRegex is a strnig "assertRegexpMatches".
  call the method stream.unget with elements of list chunk from the index next to the end.
  self._current is None.
  if not,
  value under the name key of the form.fields dictionary is an instance of InlineForeignKeyField created with 2 arguments:
  call the executor.migrate method with, targets, plan and fake set to the value under the 'fake' key of options dictionary,
  define the method resolve_expression with 3 arguments: self, obj and context.
  substitute used_name for guessed_filename.
  from django.utils.datastructures import MultiValueDict into default name space.
  if not,
  covert to uppercase language elements from (p+1)-th index to the end, append it to the previous result, return it.   if not,
  err_msg is a string "Tried %s", where '%s' is replaced with tried.
  return _default.
  define the method __init__ with 10 arguments: self, data set to None, files set to None, auto_id set to string 'id_%s',
  import module sys.
  call the method self.render_option with 2 arguments: selected_choices and unpacked list option, append the result to output.
  try,
  call the __call__ method from the base class of the class URLValidator, with an argument value.
  call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
  call the method validators.MinLengthValidator with min_length converted into an integer, append the result to list self.validators.
  format with it a string '# %s', write it to out.   comment_lineno_cache is None,
  if allow_overwrite is boolean False and call to the os.access function with arguments new_file_name and os.F_OK evaluates to boolean True,
  for every pos and elt in enumerated iterable source,
  if nor,
  call the function warnings.warn with an argument,
  where '%s' is replaced with self.__class__.__name__.   define the method flush with an argument self.
  remove first 2 and last 2 elements from var.
  define the method create_var with 2 arguments: self and value.
  _fields_ is a list containing 2 tuples: first tuple contains: string 'Offset' and DWORD, second contains: string 'OffsetHigh' and DWORD.
  found is boolean True.
  call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries:
  for every d in reversed list self.dicts,
  value under the self.var_name key of the context dictionary is an empty list.
  tt is a tuple with 9 elements: dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, result of the method dt.weekday,
  increment line by buffer_.
  define the method __init__ with 7 arguments: self, regex, max_length set to None, min_length set to None, error_message set to None,
  call the smart_text function with 2 arguments: return value of the obj._get_pk_val function and string_only set to boolean True,
  extra_params is an instance of the class OrderedDict.
  call the function lazy with 2 arguments: pgettext and six.text_type, substitute pgettext_lazy.
  get the value under the name key of the self dictionary, yield it as the return value of the generator.
  import warnings.
  call the models.Model.save_base method with arguments self.object, using as using and raw set to boolean True.
  define the function to_locale with an argument language.
  otherwise if prefix is not equal to common_prefix,
  from django.core.management.base import BaseCommand and CommandError into default name space.
  define the method label_from_instance with 2 arguments: self and obj.
  _empty_value is None.
  substitute obj_pk.pk for obj_pk.
  from django.utils.encoding import force_text into default name space.
  if self.timezone is false,
  substitute the value under the ns key of the resolver.namespace_dict dictionary for extra and resolver, respectively.
  def the method __init__ with 5 arguments: self, object_list, per_page, orphans set to integer 0 and allow_empty_first_page set to boolean True.
  raise an CommandError exception with an argument string "Destination directory '%s' does not exist, please create it first.",
  call the method self.Z, substitute the result for seconds.
  return the string.   define the function make_style with 2 arguments: opts set to an empty tuple and unpacked dictionary kwargs.
  foreground is a dictionary created with elements: x appended to a string '3' for value under the key x of color_names dictionary,
  substitute lookup_view for lookup_view_s.
  if not,
  try,
  if token_string starts with VARIABLE_TAG_START,
  app_configs is not None.
  get the value under the 'database' key of the options dictionary, substitute the result for database.
  define the method find_fixtures with arguments: self and fixture_label.
  attrs is a list with 2 elements: strings "__doc__" and "__name__".
  if not,
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  if StandardError, renamed to e, exception is caught,
  raise an exception.
  define the method strftime with 2 arguments: self and fmt.
  if settings.TEMPLATE_STRING_IF_INVALID is true,
  use the result as an argument for the call to the function bytes, return the result.   define the method __cast with an argument self.
  raise an TemplateSyntaxError exception with an argument string "'%s' received some positional argument(s) after some keyword argument(s)", where '%s' is replaced with name.
  call the function copy.deepcopy with an argument self.base_fields, substitute the result for self.fields.
  from django.utils.encoding import smart_text and force_text into default name space.
  define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
  define the method ordered_forms with an argument self.
  replace every occurrence of '"' in s with '&quot;'.
  use it as an argument for the call to the mark_safe function, return the result.   define the method value_from_datadict with 4 arguments: self, data, files and name.
  if not,
  break from the loop execution.
  get config dictionary element under 'incremental' key, if it exists substitute it for incremental, if not,
  define the method value_from_datadict with 4 arguments: self, data, files and name.
  call the function format_html with 3 arguments: self.inner_html, choice_value set to choice_value,
  "No file was submitted. Check the encoding type on the form." for 'invalid', return value of the function _ called with an argument,   string "No file was submitted." for 'missing', return value of the function _ called with an argument "The submitted file is empty.",   for 'empty', return value of the function ungettext_lazy called with 3 arguments:   string 'Ensure this filename has at most %(max)d character (it has %(length)d).',   string 'Ensure this filename has at most %(max)d characters (it has %(length)d).' and string 'max' for 'max_length',   and return value of the function _ called with an argument string,   'Please either submit a file or check the clear checkbox, not both.' for 'contradiction'.   define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  asvar is None.
  define the method __new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs.
  define the method _find_boundary with an arguments self, data and eof set to boolean False.
  if i is greater or equal to integer 0,
  define the function sql_delete with 4 arguments: app_config, style, connection and close_connection set to boolean True.
  substitute '%s' in string "Extracting %s\n" with filename, write it to self.stdout stream.
  return self.data.day.
  for every item in self.items,
  substitute data.size for file_name.
  property decorator,
  define the function iterbytes with an argument buf.
  return lambda function with text as argument and return value being result of the function colorize, called with 3 arguments: text,
  multiply offset.days with 86400, add offset.seconds to the result, return the result.
  if self.localize is true,
  increment int_part_gd by thousand_sep.
  where '%s' is replaced with opts.object_name and fail_message, respectively.   define the function save_m2m.
  convert to an integer value under the 'COMP_CWORD' key of the os.environ dictionary, substitute it for cword.
  return nothing.
  call the function re.compile with an argument raw string '(?:W/)?"((?:\\.|[^"])*)"', substitute the result for ETAG_MATCH.
  define the method back with an argument self.
  if message is not an instance of the ValidationError class,
  call the method parser.parse with an argument tuple with 3 elements: strings 'elif', 'else' and 'endif', substitute the result for nodelist.
  if KeyError exception is caught,
  internal_use_only is boolean True.
  stderr set to subprocess.PIPE, shell set to boolean True, cwd set to repo_dir and universal_newlines set to boolean True,   as arguments, substitute the result for git_log.   evaluate the method git_log.communicate, substitute first element of the result for timestamp.
  substitute cyclevars for self.cyclevars.
  define the method id_for_label with 2 arguments: self and id_.
  call the function escape with an argument value, return the result.
  if not,
  from django.core.management.sql import sql_flush and emit_post_migrate_signal into default name space.
  if length of app_labels is greater than integer 1 and primary_keys is true,
  if name is contained in lib.filters.
  try,
  try,
  from django.core import serializers into default name space.
  if fg is contained in color_names,
  call the method self.model._default_manager.get_queryset with an argument qs.
  delete attr.
  set attr.name attribute of the Module_six_moves_urllib_parse object to attr.
  call the method validators.MaxValueValidator with max_value converted into an integer, append the result to list self.validators.
  derive the class VariableDoesNotExist form the base class Exception.
  and content_length.   self._read_started is boolean False.
  return dictionary created with tuples with 2 elements: key and value under the key key of self dictionary, for every key in self.
  from functools import wraps, update_wrapper and WRAPPER_ASSIGNMENTS into default name space.
  substitute '%r' in string ' pgettext(%r, %r) ' with message_context and result of the function join_tokens,
  if recursive is true,
  convert value to an string and substitute it for value.
  try,
  define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwds.
  expires as a string 'Thu, 01-Jan-1970 00:00:00 GMT', return the result.   define the method make_bytes with 2 arguments: self and value.
  if not,
  property decorator,
  label set to None, initial set to None, help_text set to an empty string, unpacked list args and unpacked dictionary kwargs.   call the __init__ method of the base class of the class ChoiceField, called with 7 arguments: required set to required,
  return a string '%s:%s' formated with the results of the functions self.g and self.i, respectivley.
  if not,
  try,
  call the function vars with an argument options, substitute the result for cmd_options.
  substitute return value of function no_style for style.
  replace every occurrence of newline character in value with string '<br />', use it as an argument for the call to the mark_safe,
  dklen is None.
  if self.queryset is not None,
  get the name of the type of the callback, append the string '.__call__' to it, substitute it for view_name.
  for every node in return value of the graph.leaf_nodes method called with the app_name argument,
  boolean True for 'ask_merge'.   for every app_label and migration_names in result of the method conflicts.items,
  define the method __init__ with 2 arguments: self and obj.
  if jan1_weekday equals integer 5, or if jan1_weekday equals integer 6 and call to the function calendar.isleap,
  default set to boolean False and help as a string "Create an empty migration.".   call the method parser.add_argument with 5 arguments: string '--noinput', action as a string 'store_false',
  and evaluated boolean expression s_opt.nargs doesnt equal to integer 0, for every s_opt in parser._actions,   only if s_opt.option_strings is true,   if not,
  call the method zipfile.ZipFile.read with 2 arguments: self and first element of the result of the self.namelist method.
  call the method to_python with an argument data from the base class of the class BooleanField, return the result.
  and csrf_token, return the result.   if not,
  import module os.
  return timezone.zone.
  replace '%s' in string "Notice: Couldn't set permission bits on %s. You're probably using an uncommon filesystem setup. No problem.",
  if KeyError exception is caught,
  call the method Image.open with an argument file, on the result call the verify method
  define the method __init__ with 2 arguments: self and data set to None.
  call the function call_command with 3 arguments: string 'loaddata', string 'initial_data' and unpacked dictionary options.
  substitute cookie for c.
  if field_value is not None,
  get the '_decorated_function' attribute from func object, if it exists substitute it for func.
  call the function constant_time_compare with 2 arguments: sig and return value of the self.signature method with an argument value,  if it evaluates to true,
  from _systemrestart import SystemRestart into default name space.
  if sub_tried is not None,
  if message is an instance of SafeData,
  derive the class FilePathField from the base class ChoiceField class.
  substitute field_type for field_type and new_params, respectively.
  if objects_in_fixture equals integer 0,
  substitute abspath for abspathu.
  raise CommandError with an argument string 'Unknown application: %s', where '%s' is replaced with app_label.
  if os.name equals string 'nt',
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  raise a NotImplementedError with an argument string
  define the method _get_scheme with self class instance as argument.
  "misses", "maxsize" and "currsize".   derive class _HashedSeq from list base class.
  call the method self._cache.get_multi with argument new_keys, substitute the result for ret.
  yield item.
  call the function compile_string with 2 arguments: template_string and origin, substitute the result for self.nodelist.
  try,
  import module os.
  if token is None,
  define the method render with 2 arguments: self and context.
  if not,
  define lambda function that returns self.file.truncate field, use it as an argument for property function, put the result in truncate.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  if new_errors is not an iterable object raise an error with error message "The function %r did not return a list. All functions registered with the checks registry must return a list.", with '%s' replaced by value of check.
  return path.
  join elements of output into a string, separated with newline character,
  skip this loop iteration.
  get the value under the 'use_default_ignore_patterns' key of the options dictionary, if it is true,
  define the method extract with 2 arguments: self and to_path set to an empty string.
  increment the offset by the length of self.__starttag_text.
  get value under the 'database' key of the options dictionary, use it as a key to get the value from the connections dictionary,
  self.translate is boolean False.
  define the method setlist with 3 arguments: self, key and list_.
  raise an TypeError with an argument s.
  if m is not False, None is considered False,
  dest set to string 'no_location', default as boolean False and help as a string "Don't write '#: filename:line' lines.".   call the method parser.add_argument with 5 arguments: string '--no-obsolete', action as a string 'store_true',
  msg is a string '%sError importing module %s: "%s"', where '%s' is replaced with error_prefix, dotted_path and e, respectively.
  strip message_context of '"' characters from both ends, substitute the result for message_context.
  define the method has_changed with arguments self, initial and data.
  call the method self.xml.startElement with argument string 'natural' and an empty dictionary.
  call the method unifunc.replace with an argument strfunc.
  if incremental is true,
  call the __init__ method from the base class of the HttpResponseNotAllowed class, called with arguments: unpacked list args,
  from django.core.management.base import BaseCommand and CommandError into default name space.
  from django.template.base import ALLOWED_VARIABLE_CHARS, BLOCK_TAG_END, BLOCK_TAG_START, COMMENT_TAG_END, COMMENT_TAG_START,
  return nothing.
  if argv is true, substitue it for self.argv, if not substitute sys.argv for self.argv.
  define the method filter with 2 arguments: self and record.
  logger.disabled is boolean True.
  use the result as an argument for the call to the function self._out.write.   derive the BaseCommand class from the object base class.
  __all__ is an tuple containing string 'SelectDateWidget'.
  and autoescape as autoescape, use the result as an argument for the call to the function mark_safe, return the result.   decorator function register.filter with an argument is_safe set to boolean False.
  from django.utils import six into default name space.
  return result.
  call the function _strip_once with an argument value, substitute the result for new_value.
  if not,
  if self.domain equals to string 'djangojs',
  for every form in self.saved_forms,
  put a tuple with 2 elements: k and value under k key of self dictionary into a list, for every k in self.keyOrder,
  otherwise if o is an instance of decimal.Decimal object,
  substitute initial_forms for total_forms.
  call the function check_programs with 3 arguments: strings 'msguniq', 'msgmerge' and 'msgattrib'.
  otherwise if ch equals a string '(',
  join self.file_path and fname into a valid file path, substitute it for self._fname.
  if first element of message_context equals to character '"',
  raise an exception value.
  append entry to the directories list.
  and convert it to lowercase, substitute the result for value.   call the function re.sub with 3 arguments: string '[-\s]+', string '-' and value, use the result as an argument for the call to the,
  if err_log is true,
  call the re.compile function with 2 arguments: raw string "^(?:[a-z0-9\.\-]*)://(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+",
  if length of bits is not integer 2 or 3,
  for every label in labels,
  from django.core.management.sql import custom_sql_for_model, emit_post_migrate_signal and emit_pre_migrate_signal into default name space.
  join fixture_dir, fixture_name with appended character '*' into a valid file path,
  numbers is a list containing return value of the MigrationAutodetector.parse_number method called with an argument migration.name,
  if SkipFile exception is caught,
  call the method m.group with an argument string 'year', convert the result into a string, substitute it for year.
  if not,
  call the method time_str.decode with an argument string 'utf-8', substitute the result for time_str.
  otherwise if field.rel is true and field.rel is an instance of the models.ManyToOneRel object,
  if string '--commands' is contained in args,
  call the function format_html with 3 arguments: self.url_markup_template, value.url and return value of the function force_text,
  from __future__ import unicode_literals into default name space.
  get the value under the 'cookies' key of the state dictionary,
  substitute dirpath for self.dirpath.
  if name is None,
  substitute m2m_data for self.m2m_data.
  decorator stringfilter,
  targets is a list containing tuple with two elements, app_label and None.
  convert idx to an integer, substitute it or n.
  derive the class JSONSerializer from the object base class.
  import module os.
  if not,
  if value is an instance of six.string_types class,
  substitute the result for block_re.   call the function re.compile with an argument raw string "^\s*endblocktrans$", substitute the result for endblock_re.
  substitute them for app_label and migration_name, respectively.   executor is an instance of MigrationExecutor, created with value under the DEFAULT_DB_ALIAS key of the connections dictionary.
  evaluate method transaction.atomic with arguments: using set to database and savepoint set to connection.features.can_rollback_ddl,
  if endbmatch is true,
  define the method render with 2 arguments self and context.
  return the result.   if UnicodeDecodeError exception is caught,
  call the function pgettext_lazy with an argument self.message_context and value, return the result.
  if self._errors is None,
  otherwise id change equals to I18N_MODIFIED,
  from django.utils.crypto import get_random_string into default name space.
  get the attribute 'Media' of the cls object, if it exists substitute it for definition, if not definition is None.
  covert to lowercase locale elements from (p+1)-th index to the end, append it to the previous result, return it.   if not,
  if Exception, renamed to e, exception is caught,
  if self.path equals other.path, return boolean True, if not return boolean False.
  return val.
  split lang_code by character '-', substitute the first element of the result for generic_lang_code.
  substitute the result for block_content.   if self.verbatim is true and block_content equals self.verbatim,
  error_class, label_suffix and empty_permitted.   for every field_name in self.fields,
  from django.utils.encoding import force_text into default name space.
  return None.
  return None.
  if value under the name key of self.cleaned_data dictionary is not None,
  if _default is None,
  define the function npgettext with 4 arguments: context, singular, plural and number.
  if self.keep_pot is false,
  define the method __init__ with 11 arguments: self, subject set to an empty string, body set to an empty string,
  update widget.attrs dictionary with extra_attrs.
  if file_name is an instance of Template class.
  if OverflowError or ValueError, renamed to exc, exceptions are caught,
  if call to the function _samefile with old_file_name and new_file_name evaluates to boolean True,
  if autoescape is true,
  call the method HTMLParser.__init__ with an argument self.
  substitute cleaned_data for self.cleaned_data.
  _file is None.
  if secure is true,
  from django.views.debug import ExceptionReporter and get_exception_reporter_filter into default name space.
  call the method widget.render with 3 arguments: name, return value of the method self.value, attrs set to attrs,
  return an empty dictionary.
  self.command_stack is an empty list.
  msg is a string "Execution of %s failed: %s", with '%s' replaced by self.program and errors.
  set move.name attribute of the _MovedItems to move.
  derive the class PasswordInput from the TextInput base class.
  call the method formats.get_format_lazy with an argument string 'TIME_INPUT_FORMATS', substitute the result for input_formats.
  derive the class ResolverMatch with object as base class.
  define the method __init__ with 3 arguments: self, include_html set to boolean False and email_backend set to None.
  remove config dictionary element under '()' key, substitute it for c.
  increment stats dictionary value under the HITS key by integer 1.
  call the method self.widget.decompress with an argument initial, substitute the result for initial.
  substitute cmd for self.cmd.
  call the function re.compile with raw string '(\s+)', substitute the result for word_split_re.
  if not,
  if not,
  call the function timezone.get_current_timezone, substitute the result for current_timezone.
  from django.core.exceptions import AppRegistryNotReady into default name space.
  call the method self.stdout.write with an argument string "Installed %d object(s) from %d fixture(s)",
  import module yaml.
  get is a tuple containing elements generated by the call to the function pformat with an argument META_override,
  call the method LocaleRegexProvider.__init__ with arguments self and regex.
  decorator stringfilter,
  call the function phone2numeric with an argument value, return the result.
  re raise an exception.
  return boolean False.
  return form.
  return nodes.
  derive the class EmailBackend from the ConsoleEmailBackend base class.
  from django.utils.encoding import force_bytes and python_2_unicode_compatible into default name space.
  substitute text for self.text.
  skip this loop iteration.
  call the method os.path.splitext with an argument self.file, assign the result to _ and file_ext.
  cls is None.
  call the function cleanup_url with an argument url, assign the result to filename and display_url, respectively.
  return self.streaming_content
  substitute content_length for self.content_length.
  if self.match is None or call to the method self.match_re.search with an argument f, evaluated to true,
  assign the result to cc.   cc is a dictionary populated with items by calling function dictitem with el as argument, for every el in cc.
  define the function _replace_entity with an argument match.
  increment weight by integer 2.
  tried_modules is an empty list.
  if six.PY2 is true,
  if error has an attribute 'error_dict',
  from django.utils import baseconv into default name space.
  from django.utils.functional import lazy into default name space.
  app_config, connection.alias and include_auto_created set to boolean True.   call the method connection.creation.sql_create_model with arguments model, style and known_models, substitute the result for output and references.
  if item is contained in self.dict, return boolean True, otherwise return boolean False.
  from django.utils.encoding import smart_text, force_str and force_text into default name space.
  RemovedInDjango19Warning and stacklevel set to integer 2.   if data is None or data is an instance of dict type,
  alternative_subtype is a string 'alternative'.
  if val is None,
  append list containing string '--no-location' to self.xgettext_options.
  string '--keyword=gettext_noop', string '--keyword=gettext_lazy', string '--keyword=ngettext_lazy:1,2',   string '--keyword=ugettext_noop', string '--keyword=ugettext_lazy', string '--keyword=ungettext_lazy:1,2',   string '--keyword=pgettext:1c,2', string '--keyword=npgettext:1c,2,3', string '--keyword=pgettext_lazy:1c,2',   string '--keyword=npgettext_lazy:1c,2,3' and string '--output=-', substitute the result for args.   append work_file to args.
  substitute has_key for __contains__.
  safe_data is an empty dictionary.
  substitute timezone for _active.value.
  call the function reraise from the module six, with list of arguments exec_info.
  substitute the regex_compiled for value under the language_code key of the self._regex_dict dictionary.
  for every arg in self.args call the method arg.resolve with an argument context, substitute the results in a list for args.
  call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs, from the base class of the class ComboField.
  if self._delegate_bytes and six.PY2 are both true,
  convert value to an integer.
  if self.path is lesser than other.path, return boolean True, otherwise return boolean False.
  return a tuple containing 3 entries: output, result of the function force_text, called with 3 arguments: errors,
  call the method sub_match_dict.update with an argument sub_match.kwargs.
  if not,
  call the method parser.parse_args with an arguments args set to an empty list, assign the result for defaults and _, respectively.
  called with an argument k.   call the function c with an argument unpacked dictionary kwargs, substitute the result for result.
  for every obj in PythonDeserializer called with arguments objects and unpacked dictionary options,
  if not,
  define the method _get_regex an argument self.
  call the method commands.update, with an argument dictionary containing entries: app_config_name for name, for every name in return value of the function find_commands, called with an argument path.
  derive the class UTC from the tzinfo base class.
  raise an MultiPartParserError with an argument string "Invalid content length: %r", where '%r' is replaced with content_length.
  forms_valid is True.
  define the method __getinitargs__ with an argument self.
  if filename path doesnt exists,
  output is an empty string.
  call the function data with 3 arguments: self.year, self.month and self.day, return the result.
  define the function run with 5 arguments: addr, port, wsgi_handler, ipv6 set to boolean False and threading set to boolean False.
  try,
  delete self entry under the key key.
  call the function parse_boundary_stream with 2 arguments: sub_stream and integer 1024, yield the result as the return value of the generator.
  call the method self.connection.starttls.
  call the method self.create_variable_node with an argument filter_expression, substitute the result for var_node.
  endless while loop,
  get 'name' attribute from the file object, if it doesnt exists use None, substitute it for name.
  substitute self.model._default_manager for queryset.
  call the method datetime.datetime.strptime with 2 arguments: result of the function force_str called with an argument value,
  neg is integer 0.
  call the method self._stream.readline with 2 arguments: unpacked list args, unpacked dictionary kwargs.
  substitute the result for RFC850_DATE.   call the function re.compile with an argument raw string '^\w{3} %s %s %s %s$' formated with __M, __D2, __T and __Y,
  if not,
  from django.utils import six into default name space.
  define the function get_image_dimension with file_or_path and close set to boolean False as the arguments.
  self._current is None.
  property decorator,
  decrement mtime by stat.st_ctime.
  call the os.stat function with argument filename, store the return value in stat.
  f.required is boolean False.
  substitute gettext for gettext_noop, gettext_lazy and _.
  from django.db import models into default name space.
  if self.form.is_bound is false,
  from . import Error, Tags and register into default name space.
  split ip_str into 2 parts from right, return second element of the result.
  call the function lazy with 2 arguments: func and resultclass, call the result with an argument, unpacked dictionary kwargs,
  match rest string with self.DIGIT_PATTERN regex, if it evaluates to false,
  call the method datetime_safe.new_date with an argument value, substitute the result for value.
  and html set to boolean True, return the result.   decorator function register.filter with an argument is_safe set to boolean True.
  value under the cache_key key of the _format_cache dictionary is None.
  use global variable template_source_loaders.
  return boolean False.
  decorator deconstructible,
  define the emethod parse with 2 arguments: self and parse_until set to None.
  define the method _update_unget_history with arguments self and num_bytes.
  return result.
  define the method next_token with an argument self.
  define the method next_token with an argument self.
  define function _to_tuple with s as an argument.
  do nothing.
  define method set_cdata_mode, with self class instance and tag as the arguments.
  call the function get_random_string with 2 arguments: integer 50 and chars, substitute it for value under the 'secret_key' of the options dictionary.
  for every i and word in enumerated iterable words,
 return self._encoding.
  define the method external_entity_ref_handler with arguments self, context, base, sysid and pubid.
  try,
  from io import BytesIO into default name space.
  call the method out.getvalue, return the result.
  call the method m.group with an argument integer 0, use it as an argument for the call to the re_tag.match function,
  split ip_str into parts by ':', substitute the result for new_ip.
  if not,
  do nothing.
  substitute self.lineno for token.lineno.
  define the method fixture_dirs with an argument self.
  from __future__ import unicode_literals into default name space.
  if not,
  define the method write_items with 2 arguments: self and handler.
  substitute the result for final_attrs.   get the value under the 'id' key of final_attrs dictionary, substitute if for id_ if the key doesnt exists, id_ is None.
  if self.fail_silently is false,
  substitute node.source for e.django_template_source.
  return result.
  define the method __init__ with self, server and params as arguments.
  define the method unsign with arguments self and signed_value.
  raise an AttributeError exception with string "Unable to determine the file's size." as argument.
  skip this loop iteration,
  errors is an empty list
  call the method path.expanduser with an argument template, substitute it for expanded_template.
  call the method self.inner_run with 2 arguments: None and unpacked dictionary options.
  if VariableDoesNotExist exception is caught,
  derive the class BaseValidator form the object base class.
  return the length of self.content.
  open file named file_or_path for reading, store the file object handle in file.
  if text ends with truncate,
  if level is an instance of int type,
  if candidate is not an instance of six.string_types,
  added to a tuple with an element year, substitute the result for s1.   call the function _findall with 2 arguments: s1 and year converted into a string, substitute the result for sites1.
  call the function get_bytes_from_wsgi with environ, string 'PATH_INFO' and character '/' as arguments, substitute the result for path_info.
  do nothing.
  define the function m2m_convert with an argument value.
  if not,
  weight is an integer 0.
  return obj.
  raise a ValidationError exception with arguments self.message and code set to self.code.
  move integer 1 left for 40 bits, substitute the result for TB.
  object_data is an empty dictionary.
  evaluate the function smart_text with an argument value, return the result.
  define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
  convert ret to a boolean, return it.
  if archive.ArchiveException or IOError, renamed to e, exception are caught,
  utility is a instance of ManagementUtility class, created with an argument argv.
  define the method id_for_label with 2 arguments: self and id.
  call the method self.stdout.write with an argument string "No fixture '%s' in %s.", where '%s' is replaced with fixture_name,
  if LookupError exception is caught,
  media is an instance of Media class.
  default set to None, help is a string 'Only look for fixtures in the specified app.'.   call the method parser.add_argument with 6 arguments: string '--ignorenonexistent', string '-i', action as a string 'store_true',
  substitute self.handle_app for handle_app.
  kwargs is a dictionary with elements: config dictionary element under k key for k, for every k in result of function valid_ident,
  try,
  register.tag decorator,
  if localized_fields is not None,
  and number set to number, return the result.   define the function ungettext_lazy with 3 arguments: singular, plural and number set to None.
  get the values under the keys 'app_label' and 'migration_name' of the options dictionary, substitute the results for app_label and migration_name, respectively.
  call the flatten method of the self and other objects, if they are equal, return boolean True, if not return boolean False.
  define the method __next__ with an argument self.
  substitute result for the value of the memo dictionary, with identity of the self object as an key.
  if old_style_list is false,
  if fake is true,
  return self.data.month.
  define the function parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and name.
  if not,
  define the function urlsafe_base64_encode with an argument s.
  if prefix is false,
  convert args into a list, substitute it for args.
  if kwargs is true,
  define the method num_items with an argument self.
  default set to boolean False and help set to a string 'Display all settings, regardless of their value. Default values are prefixed by "###".'   define the method handle with arguments self and unpacked dictionary options.
  call the method self.data.isoformat, return the result.
  call the method self.add_filters with 2 arguments: logger and filters.
  from itertools import product into default name space.
  import module re.
  call the function widget, substitute the result for widget.
  define the method label_tag with 4 arguments: self, contents set to None, attrs set to None and label_suffix set to None.
  define the method tell with an argument self.
  call the method parser.next_token, substitute the result for token.
  call the method self.filter_expression.resolve with an argument context, substitute the result for output.
  raise an NotImplementedError with argument string 'subclasses of FileUploadHandler must provide a file_complete() method'.
  otherwise if, type of s doesnt equal to six.text_type,
  self.id_for_label is true,
  otherwise if name is contained in lib.filters,
  'and "requires_system_checks", which is illegal. Use only "requires_system_checks".', replace '%s' for self.__class__.__name__.   call the method self.requires_system_checks with an argument: self.requires_system_checks if has_new_option is true,
  define the function sql_all with 3 arguments: app_config, style and connection.
  if not,
  translation._info is an empty dictionary.
  from email.message import Message into default name space.
  define the method __iter__ with an argument self.
  add together self.to, self.cc and self.bcc, return the result.
  if condition is not None,
  if StandardError, renamed to e, exception is caught,
  _called_from_command_line is boolean False.
  _func_defaults is a string "__defaults__".
  substitute self.template_with_initial for template.
  try,
  append it to a list, perform the previous for every dir_ in fixture_dirs, substitute the resulting list for fixture_dirs.   call the method os.path.basename with an argument fixture_name, substitute the result for fixture_name.
  raise an CommandError with an argument string "couldn't extract file %s to %s: %s", where '%s' is replaced with filename, tempdir and e.
  if self equals to other return boolean False, otherwise return True.
  raise CommandError exception, with sring "Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed." as argument, substitute '%s' with self.program.
  do nothing.
  from django.utils.html import escape into default name space.
  if initial is not None, substitute initial for initial_value, otherwise initial_value is an empty string.
  derive the class TemplateLiteral from Literal base class.
  define the method popitem with an argument self.
  append a tuple containing 2 elemetns: model and deps, to skipped.
  if cc is true,
  call the method self._text_words with 2 arguments length and truncate, return the result.
  define the function copystat with arguments src and dst.
  from django.utils.encoding import force_text into default name space.
  import module sys.
  define the method clean with arguments self and value.
  substitute elements of tuple boundary to end and next, respectively.
  import module threading.
  define the function truncatechars with 2 arguments value and arg.
  call the get_valid_filename with argument name, return the result.
  define the method has_header with 2 arguments: self and header.
  child_loggers is an empty list.
  if not,
  if not,
  if not,
  get_format called with an argument string 'DATE_INPUT_FORMATS', substitute the result for format.   call the method value.strftime with an argument format, return the result.
  remove the first element from p_pattern.
  yield string "# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [app_label]'" as the result.
  remove the entry under the 'fields' key of the self.json_kwargs dictionary.
  if the value under the 'bindAddress' key of the wsgi_opts dictionary is not None, set daemonize to boolean True, if not, set it to boolean False.
  return an empty string.
  substitute elements of middle from length of opening index to the end, for middle.
  if Exception, renamed to e, exception is caught,
  params is an empty list,
  return s.
  exit the program with the code integer 1.
  return output.
  multiply seconds by count, subtract it from since, divide the result by seconds2, store the floored result in count2.
  derive the class ViewDoesNotExist from the Exception base class.
  strip path of all leading '/' and '\\' characters, substitute the result for path.
  define the method unclosed_block_tag with 2 arguments: self and parse_until.
  EventHandler.modified_code is I18N_MODIFIED.
  for ever app_config in return value of the method apps.get_app_configs,
  return FormSet.
  substitute i-th element of self.data for error.
  assign the result to ctypes and opts.   get the value under the 'boundary' key of the opts dictionary, substitute it for boundary.
  if data is an instance of bytes.
  call the function force_bytes with an argument key_salt, substitute the result for key_salt.
  otherwise, value under the 'decimal_places' key of the field_params is integer 5.   if not
  call the method self._resolve, substitute the result for result.
  from django.core.serializers.python import Serializer as PythonSerializer into default name space.
  derive the class DictWrapper from the dict base class.
  import module datetime.
  try,
  multiply delta.days, integer 24, integer 60 and integer 60 add delta.seconds to it, substitute the result for since.
  get the value under the 'id' key of the self.field.widget.attrs dictionary, if the key exists substitute it for id_,
  to_locale called with an argument lang_code, if the result is not None,   return boolean True.
  del self._post
  derive the class URLValidator form the RegexValidator base class.
  import module errno.
  call the method self._convert_to_charset with arguments: header and string 'ascii', substitute the result for header.
  define the method update with 2 arguments: self and dict_.
  call the method self.cache_key with 2 arguments name and dirs, substitute the result for key.
  members is a list with elements member for every member in the result of the function self._archive.getmembers,
  sort elements of kwds, substitute the result for sorted_items.
  for every middleware_method in self._request_middleware,
  if ImportError exception is caught,
  if the value under the 'QUERY_STRING' key of the self.META dictionary is true, call the function iri_to_uri,
  if not,
  if settings.ADMINS is false,
  define the method skip_past with 2 arguments: self and endtag.
  call the method MIMEMultipart.__setitem__ with arguments self, name and val.
  call the method related.natural_key, substitute the result for value.
  otherwise name is None.   if name is None,
  if value is boolean False or boolean True or value is None or value is an empty string, do not perform the following,
  try,
  raise an TemplateSyntaxError exception with an argument string "'%s' is not a valid tag library: %s",
  from django.conf import urls into default name space,
  if qs._result_cache is not None,
  if call to the method os.access with arguments: filename and os.W_OK, evaluates to false,
  call the function _get_foreign_key with 3 arguments: parent_model, model and fk_name=fk_name, substitute the result for fk.
  merge_migrations is an empty list.
  format_locations is an empty list.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  substitute self for value.configurator.
  call the method self.handle_m2m_field with arguments obj and filed.
  if x equals to integer 0,
  if filepath starts with root,
  substitute new_obj for obj.
  call the method extend with an argument error_list on the return value of the method error_dict.setdefault called with 2 arguments: field and an empty list.
  call the function add_to_builtins with an argument string 'django.template.defaultfilters'.
  from django.utils.safestring import mark_safe into default name space.
  if pos is greater than or equal to last,
  if not,
  args is a string '[fixture ...]'.
  substitute settings.FORMAT_MODULE_PATH for settings.FORMAT_MODULE_PATH.
  compare_to is None.
  first element of url_fields is string 'http'.
  substitute token.source for node.source.
  if _supported is None,
  self._handler_class is None.
  for every form in self call the form.as_p method, join the results in a string, separated by an empty string.
  if not,
  from django.db import models into default name space.
  return callback split into two lists at the dot index, without the element at the dot index.
  derive the class Command from the AppCommand base class.
  self.content_type is None.
  call the method self.build_attrs with 3 arguments: attrs, type as a string 'checkbox', name as name, substitute the result for final_attrs.
  filesize_number_format with result of division of bytes by MB as an argument, substitute the result for value.   otherwise if bytes is smaller than TB,
  do nothing.
  substitute pickled for value under the key key of self._cache dictionary.
  if not, self.dry_run is boolean False.   get the value under the 'merge' key of the options dictionary, if the key exists substitute it for self.merge,
  from django.conf import settings into default namespace.
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  from django.core.management.color import color_style into default name space.
  define the method __getattr__ with 2 arguments: self and real_name.
  if not,
  substitute self.max_num for total_forms.
  call the unsign method from the base class of the TimestampSigner class with an argument value, substitute the result for result.
  output is an empty string.
  if s_len is greater than length,
  call the method self._cache.delete with argument key.
  if Exception, renamed to e, exception is caught,
  call the method __init__ with 2 arguments: self.states and string 'reg' from the base class of the class JsLexer.
  call the function isabs with an argument path, if it evaluates to false,
  call the method s.getvalue, return the result.
  call the function middleware_method with the request and response as the arguments, assign the result to response.
  call the method self.stream.write with argument string '%s\n', with '%s' replaced with msg_data.
  from django.core.management.base import CommandError into default name space.
  return an empty dictionary.
  where '%s' is replaced with token.contents.   call the method re.split with 2 arguments: raw string ' *, *' and elements of bits from 1 index to in_index index,
  return self._client.
  resolved_path is an empty list.
  substitute connections element at the index of the value db for connections.
  try,
  return translation.
  widget set to widget, label set to label, initial set to initial, help_text set to help_text, unpacked list args,   and unpacked dictionary kwargs.   substitute choices for self.choices.
  __all__ is a tuple containing strings: 'Storage', 'FileSystemStorage', 'DefaultStorage' and 'default_storage'.
  use it and the re.I as the input arguments for function re.compile, put the result in the self.interesting.   evaluate function tag.lower, without the arguments, put the result in the self.cdata_tag.
  RemovedInDjango19Warning and integer 2 as arguments.   if self does not have an '_request' attribute,
  raise an InvalidTemplateLibrary exception with an argument string ("Unsupported arguments to Library.filter: (%r, %r)",
  raise an exception CommandError, with argument string "%r conflicts with the name of an existing Python module and cannot be used as a project name. Please try another name.", where '%r' is replaced with project_name.
  substitute method for value under the funcname key of the dictionary under the klass key of the cls.__dispatch dictionary.
  get the value under the lang_code key of the LANG_INFO dictionary, return it.
  if f equals to string '__pycache__',
  skip this loop iteration.
  if value under the 'language' key of the self.feed dictionary is not None,
  replace '%s' in string ', HTTP response headers must be in %s format' for charset, append it to e.reason.
  from datetime import datetime,  timedelta and tzinfo into default name space.
  derive the class RegexValidator form the object base class.
  derive the class SplitDateTimeField from the base class MultiValueField class.
  from __future__ import unicode_literals into default name space.
  if o.microsecond is true,
  increment doublecolon_len by integer 1,
  split path in two parts by '\\' string, return the result.
  if ValueError or TypeError exceptions are caught,
  call the method p.find with bytes string '=' as an argument, substitute the result for i.
  and format, call the method time on the result, return the result.   derive the class DateTimeField from the base class BaseTemporalField class.
  define the function dumps with 5 arguments: obj, key set to None, salt set to string 'django.core.signing',
  call the method datetime.datetime.strptime with 2 arguments: result of the function force_str called with an argument value,
  call the method self._get_size_from_underlying_file, substitute the result for self._size.
  replace '%s' in string "Creating %s\n" with new_path, write it to the self.stdout stream.
  where '%s' is replaced with first element of bits.   substitute second element for bits for block_name.
  import module copy.
  skip this loop iteration,
  self._choices and self.widget.choices are assigned value converted into a list.
  substitute module for the value under the format key of the _serializers dictionary.
  call the method self.path with argument name, substitute the result for full_path.
  incomment is boolean True.
  call the method self.error with 2 arguments: token and string "Empty block tag", return the result.
  from io import BytesIO into default name space.
  remove config dictionary element under 'filter' key, if it exists substitute it for filters, if not, filters is None.
  if value is an instance of list type,
  default string value, substitute it for value.   return value if six.PY2 is true, if not return value.encode(ISO_8859_1).
  call the method os.chdir with an argument our_home_dir.
  delete the value under the key key of self._cache dictionary.
  substitute self.regexes for regexes.
  call the method f.save_form_data with 2 arguments: instance and value under the f.name key of cleaned_data dictionary.
  call the method handler.startElement with 2 arguments: string "channel" and result of the method self.root_attributes.
  if not an empty string, and truncate, return the result.   return text.
  label is an empty string.
  if token.contents equals a string 'else',
  if self.attachments is true,
  if i is smaller than integer 0,
  define the method add_fields with 3 arguments: self, form and index.
  concatenate path and string '.%s', append the result to format_module_path.
  if expires is an instance of datetime.datetime class,
  substitute var1 and var2 for self.var1 and self.var2, respectively.
  call the method self.add_item_elements with 2 arguments: handler and item.
  if self is an instance of nodetype,
  for every date_key in date_keys,
  self._leftover is an empty string.
  break from the loop execution.
  return results.
  import module sys.
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  format self.month_field string with name, use it as the key for the data dictionary, substitute the result for m.
  return value.
  if size is None substitute self._remaining for remaining, if not, substitute size for remaining.
  for every message in messages,
  return result.
  define the method _get_size with argument self.
  data is None.
  from django.utils.module_loading import import_string into default name space.
  bring integer 2 to the power of 10, multiply it by integer 64, substitute the result for chunk_size.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  compile self.match regular expression, substitute it for self.match_re.
  substitute self.min_value for the value under the 'min' key of the attrs dictionary.
  define the function server_bind with an argument self.
  call the method arg.resolve with an argument context, append the result to arg_vals.
  if not,
  define the method resolve with 2 arguments: self and s.
  call the method m.group with an argument string 'min', convert the result into a string, substitute it for min.
  decorator stringfilter,
  args_check is a static method.
  define the method writer_enters with an argument self.
  decorator function register.filter with an argument is_safe set to boolean False.
  call the function force_text with an argument message, return the result.
  use global variable _translations.
  nodelist_false is an instance of NodeList class.
  define the function get_default_timezone_name.
  define the method as_bytes with arguments self and unixfrom set to boolean False.
  import module posixpath.
  while bit doesnt end with sential,
  return value under the key key of self dictionary.
  if end is None
  and third element of the function sys.exc_info result.   return attr.
  if not,
  return None.
  define the method get_nodes_by_type with 2 arguments: self and nodetype.
  define method GET with self class instance as an argument.
  otherwise if ch equals a string '[',
  append command.xgettext_options to the list containing 10 elements: string 'xgettext', string '-d', domain, string '--language=C',
  otherwise substitute self.form.label_suffix for label_suffix.   if label_suffix and contents are both true and last element of contents is not contained in the result of the function _,
  skip this loop iteration.
  substitute Lexer and Parser for lexer_class and parser_class.
  return template_name.
  if response is None,
  if self.pointer is smaller than length of self.subject, return boolean True, otherwise return False.
  get the value under the 'CONTENT_TYPE' key of the self.META dictionary, if it starts with a string 'multipart/form-data',
  substitute the result for filters dictionary value under name key.   if StandardError, renamed to e, exception is caught,
  if NotImplementedError exception is caught,
  from django.utils import lru_cache into default name space.
  call the method pytz.timezone with an argument settings.TIME_ZONE, substitute the result for _localtime.
  substitute Iterator for create_bound_method.
  yield string "#   * Make sure each model has one field with primary_key=True" as the result.
  return self.
  if truncate_text is true,
  define the method __copy__ with an argument self.
  define the method add_arguments with 2 arguments self and parser.
  child_nodelists is an tuple with an element 'nodelist'.
  define method readline with self class instance and size set to None.
  do nothing.
  call the self.stderr.write method with string "    Installing index for %s.%s model\n" as argument,
  define the method _iterlists with an argument self.
  if not,
  do nothing.
  get the position in bytes from the start of the file, store it in file_pos.
  if link is not None,
  if an exception of the type UnicodeDecodeError, renamed to e, is caught,
  substitute length of item for len_item.
  year_field is a string '%s_year'.
  if AttributeError exception is caught,
  for every middleware_path in settings.MIDDLEWARE_CLASSES:
  substitute '%s' with title in the string " [ ] %s", write it to the standard output.
  return None.
  if self.require_all_fields is boolean true,
  raise a NotImplementedError with an argument string 'subclasses of Serializer must provide an handle_m2m_field() method'.
  and _, respectively.   if file_ is true,
  try,
  if app_label is not contained in executor.loader.migrated_apps,
  call the function dec with an argument func, return the result.
  call the method self.indent with argument integer 2.
  categories is a list containing the results of the function to_unicode, called with an argument c, for every c in categories.
  raise a exception of CommandError class, with string "Cannot find a migration matching '%s' from app '%s'. Is it in INSTALLED_APPS?",
  if cmd ends with ext,
  if length of bits is lesser than integer 2,
  if length of name is greater than integer 255,
  if value has an attribute '_meta',
  call the function allow_lazy with an argument chars, substitute the result for chars.
  append bit to trans_bit.
  substitute result for value under key key of self dictionary.
  supported is boolean False.
  define the method __next__ with an argument self.
  compile the regex from the raw string "((^|[^%])(%%)*%[sy])", substitute the result for _illegal_formatting.
  remove first element of unhandled_params.
  call the function ugettext with an argument string "%s MB", substitute '%s' with the result of the call to the function,
  try,
  while remaining_bits is true,
  call the function lazy_number with 5 arguments: ngettext, str, singular set to singular, plural set to plural,
  substitute style_func for self.style_func.
  action set to string 'append', default as an empty list and help set to a string:   'The file name(s) to render. Separate multiple extensions with commas, or use -n multiple times.'.   define the method handle with 5 arguments: self, app_or_project, name, target set to None and unpacked dictionary options.
  msg is a string "%s doesn't look like a module path" formated with dotted_path.
  append string '%%(%s)s' to plural, where '%s' is replaced with t.contents.
  append string '-0000' to time_str, return the result.
  widget set to None, label set to None, initial set to None, help_text set to an empty strign,   unpacked list args and unpacked dictionary kwargs.   call the method __init__ from the base class of the class ModelMultipleChoiceField, with 10 arguments: queryset, None,
  derive the class MultiValueDictKeyError from the KeyError base class.
  raise an ValueError with an argument string "'%s.%s' has no ForeignKey to '%s.%s'.", where '%s' is replaced with,
  msg is a string "[%s] %s\n", where '%s' are replaced with return value of the method self.log_date_time_string and formated args.
  for every i and widget in enumerated iterable self.widgets,
  if TypeError or ValueError exceptions are caught,
  call the method self.get_renderer with 4 arguments: name, value, attrs and choices, for every widget in result,
  define the method has_key with self class instance, key and version defaulting to None as arguments.
  try,
  import module copy.
  if value is an instance of datetime.datetime,
  endless loop,
  if use_ssl is None substitute settings.EMAIL_USE_SSL for self.username, if not substitute use_ssl for self.use_ssl.
  call the method self.make_bytes with an argument value, substitute the result for value.
  return None.
  format translated with rhs, substitute the result for translated.
  from django.core.files.move import file_move_safe into default name space.
  call the method self._assert_mutable.
  return ZERO.
  derive the class DeserializedObject from the object base class.
  from django.utils.xmlutils import SimplerXMLGenerator into default name space.
  otherwise if value under the key key of the user_settings dictionary is not equal to the value under the key key of the default_settings dictionary,
  if COOKIES_override is not None, or otherwise generated with the call to the function pformat with an argument request.COOKIES.   if Exception exception is caught,
  call the method msgs.decode with an argument string 'utf-8', substitute the result for msgs.
  get the value under the '__slots__' key of the orig_vars dictionary, substitute it for slots.
  for key and value in return value of the six.iterlists function called with an argument self,
  _fields_ is a list containing 2 tuples: first tuple contains: string '_offset' and _OFFSET, second contains: string 'Pointer' and PVOID.
  if consume_next is true,
  define the method _get_size_from_underlying_file with argument self.
  from __future__ import unicode_literals into default name space.
  return all the integers from the integer 1 to the self.num_pages.
  if CONTEXT_SEPARATOR is contained in result,
  self.active_readers is an integer 0.
  substitute localize for self.localize.
  comment_lineno_cache is None.
  use the result as an argument for the call to the upath function, for every d in dirs, append the results into a list,   substitute the resulting list for dirs.   return dirs.
  call the function force_text with an argument value, substitute the result for value.
  decrement t by integer 1,
  if not,
  for every part in parts,
  decorator stringfilter,
  obj is an instance of Model class, created with an unpacked dictionary data as argument.
  call the method self.nodelist_false.render with an argument context, return the result.
  create the list of paths from which filename module was included for every filename in new_modules, only is filename has '__file__' attribute, substitute the resulting list for new_filenames.
  evaluate the method type(self).__bool__ with argument self, return the result.
  substitute value under the unique_for key of form.cleaned_data dictionary for date.
  try,
  define the method __init__ with 3 arguments: self, setting and nodelist.
  if widgets is not None,
  if value under the 'primary_key' key of the dictionary contained under the column_name key of the dictionary indexes is true,
  if new_attr is None,
  raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,
  open pythonrc, with the file handle renamed to handle perform the following,
  decimal_digits is a string '0123456789'.
  call the function re.compile with 2 arguments: elements of parts joined into a string, separated with '|',
  exc_info is an tuple with 3 elements: None, result of method record.getMessage and None.
  from django.utils.dates import MONTHS into default name space.
  define the method next with an argument self.
  append the tempdir to self.paths_to_remove.
  and convert it again to the dictionary, if attrs is false, leave it alone, substitute the result for attrs.   if self.field.required is true and self.form has an attribute 'required_css_class',
  raise an AttributeError with an argument string "This %s instance has no `content` attribute. "Use `streaming_content` instead.",
  define the method prepare_value with arguments self and value.
  get 'editable' attribute from object f, if it doesnt exists or its true,
  define the method __repr__ with an argument self.
  sum sign and hhmm, substitute the result for name.
  call the get_serializer function with an argument format, call the return value object and substitute it for s.
  for every h in elements of logger.handlers list,
  return t.
  if self.var is an instance of Variable class,
  call the function escape with an argument value, return the result.
  define the method __init__ with 3 arguments: self, filepath and parsed.
  call the method self._handle_object with an argument node, return the result.
  if p is greater or equal to integer 0,
  raise an TemplateSyntaxError exception "'%s' is decorated with takes_context=True so it must have a first argument of 'context'",
  substitute token.source for e.django_template_source.
  import module re.
  called with an argument result of the method self.latest_post_date.   if value under the 'author_name' key of the self.feed dictionary is not None,
  derive the class Variable form the base class object.
  open out_log file in append mode with buffering size of the input buffer, substitute the result for sys.stdout.
  if self.asvar is None,
  define the function __wrapper__ with 2 arguments: unpacked list args and unpacked dictionary kw.
  s is an instance of StringIO class.
  if cleaned_line is false,
  substitute varlist for self.varlist.
  sup_cls is base class of the class cls.
  call the method bpython.embed.
  define the function get_language_bidi.
  define the method dst with 2 arguments: self and dt.
  if file path absolute_path exists,
  unpacked dictionary created with elements of morekwargs dictionary through the kwargs mapping, return the result.   return _curried.
  try,
  register.tag decorator,
  call the function with 7 arguments: self, self.instance, self._meta.fields, fail_message, commit, self._meta.exclude,
  replace all the occurrences of the '%' string for '%%', append result to the previous result, substitute it for candidate_pat.
  substitute the value under the 'SERVER_NAME' key of the self.META dictionary, substitute it for host.
  call the method call_command with string 'loaddata', string 'initial_data', verbosity set to self.verbosity,
  where '%r' is replaced with first element of bits.   options is an empty dictionary.
  try,
  if self.is_bound is true,
  otherwise cmp_fmts is a list containing cmp_fmt.   call the method serializers.get_public_serializer_formats, substitute the result for ser_fmts if ser_fmt is None,
  if token.contents equals string 'else',
  return a string '%s(%s)' formated with self.__class__.__name__ and dictreprs.
  self._post_parse_error is boolean True.
  split label by '.', assign the result to app_label and model_label, respectively.
  convert bit to an integer and use it as index to obtain an element for list current, substitute it for current.
  join elements of name into a string, substitute it for param.
  call the method parser.skip_past with an argument string 'endcomment'.
  if self.can_delete is true and call to the function self._should_delete_form with an argument form evaluates to true,
  return self.var.
  meta is a string '<could not parse>'.
  delete first 3 elements of bits.
  do nothing.
  substitute newline character for newline.
  call the function force_str with an argument sep, substitute the result for self.sep.
  define the function become_daemon with 4 arguments: our_home_dir set to '.', out_log set to a string '/dev/null',
  from __future__ import unicode_literals into default name space.
  domain_whitelist is a list containing string 'localhost'.
  define the function unregister_serializer with an argument format.
  value under the klass key of the cls.__dispatch dictionary is an empty dictionary.
  get the value from the options dictionary under the key 'test_database', or False if the key dont exists, substitute it for self.test_database.
  if six.PY2,
  substitute first size elements of self.buffer for result.
  if v is boolean False or v is None or v is an empty string, return boolean False, otherwise return boolean True.
  substitute the last element of args for name.
  derive the class cached_property from the object base class.
  derive the class Token form the base class object.
  if rhs is an instance of SafeData.
  return text.
  if id_ is true,
  write string "Flush cancelled.\n" to self.stdout stream.
  substitute save_m2m for form.save_m2m.
  try,
  from lib2to3.pytree import Leaf and Node into default name space.
  compare is a lambda function with arguments self, a and b, return value is boolean True if a is not b, otherwise it is False.
  define the function model_to_dict with 3 arguments: instance, fields set to None and exclude set None.
  call the method self.__cast, if the result doesnt equal to other, return boolean True, otherwise return boolean False.
  substitute value under the PREV key of the root dictionary for last.
  if not csrf_token is None.   if csrf_token is true,
  get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.
  call the method handler.addQuickElement with 3 arguments: string 'summary', value under the 'description' key of item dictionary,
  model_dependencies is an empty list.
  append value under k key of self dictionary to a list, for every k in self.keyOrder, return the result.
  use the result as an argument for the call to the add_move function.   call the function MovedModule with 2 arguments: strings "_thread" and "thread",
  if new_name ends with a string '_',
  if string 'version' is not contained in config,
  if not,
  incremental is boolean False.   EMPTY_DICT is an empty dictionary.
  substitute self.unparsed_entity_decl for parser.UnparsedEntityDeclHandler.
  call the function type with an argument self, on the result call the method __next__ with an argument self, return the result.
  dest set to string 'load_initial_data', default set to boolean True,   and help as a string 'Tells Django not to load any initial data after database synchronization.'   call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
  convert data to string, substitute it for data.
  try,
  raise an TypeError exception with an argument string "If the flags are set, regex must be a regular expression string.".
  if value in self.empty_values,
  define the function unlock with argument f.
  where '%s' is replaced with elemnts of token from upto index till the end, and token.   substitute filters for self.filters.
  and self.format_string, return the result.   derive the class SpacelessNode from Node base class.
  if ImportError exception occurred,
  where string '%s' is replaced by lookup_view and mod_name, respectively.   if not,
  return an property object with getter function fget, setter function fset, destructor fdel and documentation string doc.
  changeset is None.
  for every arg in s, evaluate the function force_bytes for the arguments arg, encoding, strings_only and errors,
  define the function parse_time with an argument value.
   if _serializers is false,
  return self.file.size.
  if template_tuple is contained in TemplateDoesNotExist,
  define the method clean with arguments self and value.
  substitute func for self.func.
  replace '%s' in string "CREATE %sINDEX %s ON %s (%s);" with: unique, return value of the function qn called with an argument:
  from ctypes.wintypes import BOOL, DWORD and HANDLE into default name space.
  return s.
  return the length of self.forms.
  self.bad_cookies is an empty set.
  use the result as the argument for the call to the messages.update function.   update messages dictionary with error_messages, if it exists, if not don't update it.
  get converter attribute from self object, substitute it for converter.
  or settings.FILE_UPLOAD_DIRECTORY_PERMISSIONS if it is.   define the method _open with arguments self, name and mode defaulting to string 'rb'.
  define the method source_error with 3 arguments: self, source and msg.
  call the method filename.rfind with an argument string "\\", increment the result by one,
  if script_url is false,
  return base and ext.
  evaluate the method self._cache.decr with key and negative delta as arguments, return the result.
  from django.conf import settings into default name space.
  strip whitespaces from both ends of unicode_value, substitute the result for value.
  define the method start_doctype_decl with an arguments self, name, sysid, pubid and has_internal_subset.
  existing_headers is a set of lowercase headers for every header in vary_headers.
  where '%s' is replaced with taglib and e.   if not,
  derive the class Operator from the base class TokenBase.
  return self.object_list element at index.
  define the function activate with an argument timezone.
  call the function _generate_cache_header_key with key_prefix and request as arguments, substitute the result for cache_key.
  raise an ValueError with an argument string "Could not find common ancestor of %s", where '%s' is replaced with migration_names.
  if AttributeError or UnsupportedOperation exception occurred.
  call the method result.setFormatter with an argument formatter.
  substitute name, nodelist and parent for self.name, self.nodelist and self.parent.
  get the value under the field key of self.fields dictionary, substitute error_messages field of the result for error_messages.
  call the function six.text_type with return value of the function bytes(s), encoding and errors as the arguments,
  if option_label is an instance of list or tuple,
  define the method utcoffset with 2 arguments self and dt.
  define the method B with an argument self.
  define the function stringformat with 2 arguments value and arg.
  mem_args is a list containing of first num_args elements of args list.
  define the method validate_number with self class instance and number as arguments.
  call the method self.handle_field with arguments obj and filed.
  define the function pretty_name with an argument name.
  for model in return value of the method router.get_migratable_models with arguments app_config, connection.alias,
  with the name of the type of the self class instance of the middleware_method, raise the ValueError with the previous as the argument.   call the method self.apply_response_fixes with the request and response as the arguments, substitute the result for response.
  self.content_length is None.
  combined is an instance of Media class.
  and to value under the '.moves' appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_parse from the _LazyModule base class.
  if not,
  from django.db.migrations.state import ProjectState into default name space.
  substitute complain for __iadd__.
  call the method operator.attrgetter with an argument _meth_func, substitute the result for get_method_function.
  use it as an argument for the call to the function os.path.normpath, substitute the result for django_dir.   if self.domain equals a string 'djangojs',
  args is an empty tuple.
  an unpacked list natural_key as argument, substitute the pk filed of the resulting object for obj.pk.   if Model.DoesNotExist exception is caught,
  if ch is not equal to string '<' or string '=',
  call the function chain with arguments self.choices and choices, for every option_value and option_label in the result,
  substitute first element of fks_to_parent for fk.
  define the method __deepcopy__ with 2 arguments: self and memodict.
  where '%s' is replaced with parsed.scheme.   call the __init__ method from the base class of the HttpResponseRedirectBase class, called with arguments: unpacked list args,
  call the field.rel.to._meta.get_field method with an field.rel.field_name argument, on the result call the method to_python,
  if start is greater than upto,
  from __future__ import unicode_literals into default name space.
  TOKEN_VAR is integer 1
  call the method self._should_delete_form with an argument form, if it evaluates to true,
  from django.template.loader import get_template, select_template.
  for every name and value in return value of the method self.extra_headers.items,
  from django.conf import settings into default name space.
  otherwise, if s has an attribute '__unicode__',
  from django.core.exceptions import ImproperlyConfigured into default name space.
  define the method sign with arguments self and value.
  self.position is an integer 0.
  date_data is a tuple with 3 elements: date.year, date.month and date.day.
  if value under the 'indent' key of the self.options dictionary is true,
  if _locs_ is None,
  break the loop execution.
  import module errno.
  if context is an instance of Context,
  return self.data.hour.
  if ValueError exception is caught,
  define the method super with an argument self.
  return nothing.
  append taglib_module to tried_modules.
  dest set to string 'use_reloader', default set to boolean True and help is a string 'Tells Django to NOT use the auto-reloader.'.   def get_handler with 3 arguments: self, unpacked list args and unpacked dictionary options.
  do nothing.
  in_tag is boolean False.
  if self.required is true and value is false,
  if locale_dir is false,
  yield string "#" as the result.
  call the method transaction.atomic with 2 arguments: using set to database, savepoint set to connection.features.can_rollback_ddl,
  result is an tuple with 2 elements: template and return value of the function make_origin called with 4 arguments: display_name,  loader, name and dirs.
  call the parseaddr function with return value of the force_text with argument addr, as argument, substitute the result for addr.
  errors is an empty list.
  import module types.
  call the method __delitem__ from the base class of the class SortedDict, with an argument key.
  call the function _helper with 2 arguments: sublist_item and tabs incremented by 1, substitute the result for sublist.
  try,
  if not,
  if value is not an instance of bytes or six.text_type classes,
  define the function get_major_version with an argument version defaulting to None.
  _BROWSERS_DEPRECATED_LOCALES is an dictionary with 2 initial entries: 'zh-hans' for 'zh-cn' and 'zh-hant' for 'zh-tw'.
  import module re.
  and, if f.rel.toequals parent_model or f.rel.to is contained in result of the call to the method parent_model._meta.get_parent_list.   if length of fks_to_parent is integer 1,
  decorator stringfilter,
  define the __init__ method with 6 arguments: self, name, content_type, size, charset and content_type_extra set to None.
  use the result as the argument for the call to the function hashlib.sha1, call the hexdigest method on the result,   join template_name and previous final result into a string, separated with '-', return it.   if not,
  if to is true,
  call the method six.reraise with 3 arguments: MultiPartParserError, MultiPartParserError created with msg,
  if self.waiting_writers is not equal to integer 0,
  value under the resultclass key of the cls.__dispatch dictionary is an empty dictionary.
  call the method sys.stderr.write with an argument string "ERROR: %s\n", where '%s' is replaced by e.
  convert value to an integer, return it.
  try,
  subtract third element of tupl from length of second element of tupl, substitute the result for units.
  call the method translation.activate with an argument string 'en-us'.
  to_delete is an empty set.
  slice the path list from the result of the match.end method as the start index to the end, substitute it for new_path.
  decorator stringfilter,
  define the method __init__ with 2 arguments self and file.
  if filters is true,
  __all__ a tuple containing strings: 'Field', 'CharField', 'IntegerField', 'DateField', 'TimeField', 'DateTimeField', 'RegexField',
  substitute v for value under the k converted to lower case key of options dictionary.
  substitute current_app for self.current_app.
  call the method __init__ from the base class of the class SortedDict, called with an argument data.
  call the function get_language, substitute the result for lang.
  raise an TemplateSyntaxError exception with an argument string "back called without some previous parsing".
  call the function middleware_method with request and response as the arguments, substitute the result for response.
  return an empty string.
  _encoding is None.
  call the self.stderr.write method with string "    Failed to install custom SQL for %s.%s model: %s\n" as argument,
  if file is an instance of six.string_types.
  call the method notifier.process_events.
  if qs.ordered is false,
  for every name and var in return value of the function six.iteritems called with an argument self.extra_context.   if self.isolated_context is true,
  from email.mime.multipart import MIMEMultipart into default name space.
  if self.pk_field,
  call the method self.end_serialization.
  and result of the bitwise OR performed on the re.MULTILINE and re.DOTALL operands, substitute the result for plural_forms_re/   STATUS_OK is integer 0.
  return default.
  return boolean True.
  if self.choices is true,
  define the method _get_to_python with 2 arguments: self and field.
  self._container is a list containing element value.
  for every label in app_labels,
  return self._queryset.
  call the method token.split_contents, substitute the result for bits.
  self.first is boolean False.
  define the method compile_function_error with 3 arguments: self, token and e.
  define the method regex with an argument self.
  call the function get_callable with an argument self._callback_str, substitute the result for self._callback.
  call the function digest with an argument password, call the method digest on the result, substitute the result or password.
  if ValidationError exception is caught,
  and placed into 2 character spaces, and '%02d' is replaced with reminder of the division of absolute offset by integer 60,   and placed into 2 character spaces.   define the method __repr__ with an argument self.
  if AttributeError exception is caught.
  from __future__ import unicode_literals into default name space.
  if field is contained in self.cleaned_data,
  function-based loader.", where '%s' is replaced with loader.   substitute TemplateLoader for func.
  define the function length with an argument value.
  try,
  divide since by seconds, store the floored result in count.
  if not,
  for every item in elt,
  if _serializers is false,
  call the method self._resolve, substitute the result for _module.
  define the method use_argparse with an argument self,
  if e is not an instance of CommandError class,
  if not,
  evaluate the fd.isatty method, if the result is true,
  return boolean True.
  call the function pickle.dumps with value and pickle.HIGHEST_PROTOCOL as the arguments, substitute the result for pickled.
  call the function _urlize with 3 arguments: value, nofollow set to boolean True, autoescape set to autoescape,
  substitute stream for self._stream.
  floor the division of i by j, use it an an index to get the element of the digits list, append the result for base36.
  call the method self.__class__ with 3 arguments: an empty string, mutable is boolean True, encoding is self.encoding, substitute the result for result.
  import time module.
  call the method new_file from the base class of the TemporaryFileUploadHandler class with arguments: file_name, unpacked list args and unpacked dictionary kwargs.
  pop the element form the path as substitute the result for ns.
  rendering_attrs is a list containing 3 strings: 'template_name', 'context_data' and '_post_render_callbacks'.
  from django.utils.deprecation import RemovedInNextVersionWarning into default name space.
  httpd.daemon_threads is boolean True.
  call the function method with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, substitute the result for data.
  join into a file path: self.locale_dir and string '.pot' appended to domain converted to string, substitute it for potfile.
  for every event and node in self.event_stream,
  call the method error with an argument message, from the base class of the class CommandParser.
  from django.core.exceptions import ValidationError into default name space.
  args is an empty list.
  if command.verbosity is greater than integer 1,
  self.loaded_object_count is integer 0.
  define the function i18n with an argument request.
  call the method bytes_to_text with an arguments key and self.encoding, substitute the result for key.
  otherwise return boolean False.   if not,
  for every el in split string cc_delim_re, with delimiter being the value of dictionary response under the key 'Cache-Control'.   if cc contains item 'max-age',
  substitute value under idx key of dictionary d for d.
  e.args is a tuple, containing 1 element: string "Problem installing fixtures: %s", where '%s' is replaced with e.
  get shell attribute of the self object, call it and return the result.
  define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.
  import module os.
  in the string "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_name=%s, namespaces=%s)", replace all the occurrences of:
  return attrs.
  if KeyboardInterrupt exception is caught,
  is_templatized is boolean True.
  call the function blankout with 2 arguments: t.contents and 'B', write the result to out.
  call the os.path.samefile with arguments src and dst, return the result.
  otherwise if base_url does not ends with '/' character,
  if m is true,
  and pattern.default_args.   if pattern.name is not None,
  and third element of the result of the function sys.exc_info.   for every i and handler in enumerated iterable handlers,
  where '%s' is replaced with taglib_module and e.   try,
  streaming is boolean True.
  return boolean False.
  join tokens elements into a string, substitute it for message.
  for every bit in bits,
  define the method _get_filename with argument self.
  remove tmpdir directory.
  define the method handle_data with 2 arguments self and d.
  lbp is an integer 0.
  call the method self.load_template_source with arguments template_name and template_dirs, assign the result to source and display_name.
  default set to boolean False and help set to string 'Tells Django to use an IPv6 address.'.   define the method handle with self class instance, list of arguments fixture_labels and dictionary options as arguments.
  if var is not an instance of six.string_types,
  values is an dictionary with 2 arguments: boolean False for 'false' and boolean True for 'true'.
  with self.mutex perform,
  append e to debugs list for every e in all_issues, if e.level is lesser than checks.INFO and result of the method e.is_silenced in false.
  substitute attrs for self.attrs.
  return nothing.
  call the function f.process with 2 arguments: self and self.domain.
  call the method connection.cursor, with the result renamed to cursor, perform the following,
  remove file path_to_remove,
  call the method parser.next_token, substitute the result for token.
  append form to self.saved_forms.
  if widget is an instance of the NumberInput,
  derive the class FilterNode from Node base class.
  property decorator.
  try,
  try,
  clean_data is an empty list.
  return None.
  end_text_pos is equal to integer 0.
  evaluate debug.technical_500_response with request and list of arguments exec_info, return the result.
  import module sys.
  if not,
  raise an KeyError with an argument string "Unknown language code %s and %s.", where '%s' is replaced with lang_code,
  call the method payload.decode with 2 arguments: string 'ascii' and string 'surrogateescape', substitute the result for self._payload.
  call the method token.split_contents, substitute the result.
  substitute pos for end_text_pos.
  if self._options exists,
  call the method nodelist.render with an argument context, return the result.
  derive the class FixedOffset from the tzinfo base class.
  get 'model' attribute from the options object, if it exists substitute it for self.model, if not self.model is None.
  INFO is integer 20.
  if domain is not None,
  derive the class Rss201rev2Feed from the RssFeed base class.
  dest as a string 'interface' and help as a string 'Specify an interactive interpreter interface. Available options: "ipython" and "bpython"'.   define the method _ipython_pre_011 with an argument self.
  substitute self._options for client.behaviors.
  self.cache_suffix converted to a string, appended to the character '*', call os.path.join with self._dir and fname as arguments,   filelist is a list containing all the previous results.   return filelist.
  append tuple containing two entries: app_config.label and integer 0 to options, for every app_config in app_configs.
  convert app and model._meta.object_name to strings, join them with separating '.' character, substitute it for obj.
  counters is a list containing length of handlers number of zeros.
  call the method get_template with an argument template, substitute the result for template.
  and e.level is lesser than checks.CRITICAL.   append e to criticals list for every e in all_issues, if checks.CRITICAL is lesser than or equal to e.level.
  increment i by integer 1,
  if not,
  define the function compile_filter with 2 arguments: self and token.
  if not,
  return an instance of AutoEscapeControlNode with 2 arguments: boolean exception arg equals to string 'on', and nodelist.
  call the function do_translate with 2 arguments: message and string 'ugettext', return the result.
  call the function self.format_subject with an argument subject, substitute the result for subject.
  define the method __init__ with self class instance, file, and name defaulting to None as arguments.
  call the method __init__ from the base class of the class SplitHiddenDateTimeWidget, with 3 arguments: attrs, date_format,  and time_format.
  call the method self.namelist, if the length of the result is not integer 1,
  if other is an instance of Promise class,
  from os import path into default name space.
  if self.addr is true,
  define the method validate with arguments self and value.
  while end is greater than integer 0 and return value of the s.count called with 3 arguments: an empty string, integer 0 and end,
  define the method __init__ with 2 arguments: self and nodelist.
  import_module called with an argument parentmod and submod, evaluates to false.   raise an ViewDoesNotExist exception with an argument string "Could not import '%s'. Parent module %s does not exist.",
  string: "\nYou have unapplied migrations; your app may not work properly until they are applied.", write it to self.stdout.   call the method self.style.NOTICE with an argument string "Run 'python manage.py migrate' to apply them.\n",
  try,
  if string 'django.middleware.clickjacking.XFrameOptionsMiddleware' is not contained in settings.MIDDLEWARE_CLASSES set,
  call the method check_for_migrations with arguments: app_config and connection.
  current_chunk is None.
  define the function debug with 2 arguments: parser and token.
  define the method _set_regex with arguments self and regex.
  silent is boolean False.
  raise an OverflowError exception with an argument string 'dklen too big'.
  return response.
  if i is greater than, or equal to subject,
  called with an argument this_value_expr, result of the method parser.compile_filter called with an argument max_value_expr,   return value of the method parser.compile_filter called with an argument max_width and asvar as asvar.   register.tag decorator function with an argument 'with',
  created with an argument widget set to HiddenInput.   value under the MIN_NUM_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,
  return empty bytes string.
  concatenate name and string '-clear', return it.
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  return WRAPPER_ASSIGNMENTS.
  convert elements of self into a list, return the its printable representation.
  if length of value is greater or equal to integer 2 and first and last elements of value are an empty string,
  raise an Resolver404 exception with an argument dictionary containing 1 entry: path for 'path'.
  content.setter decorator,
  format, if its true, otherwise string 'TIME_FORMAT' and use_l10n as use_l10n, return the result.   define the function number_format with 4 arguments: value, decimal_pos set to None, use_l10n set to None,
  call the method value.astimezone with an argument timezone, substitute the result for value.
  with '%s' substituted for app_label, as arguments.   if migration_name equals to string 'zero',
  define the method value_from_datadict with 4 arguments: self, data, files and name.
  derive the NoArgsCommand class from the BaseCommand base class.
  call the method final_output.extend with an argument output.
  if self.ignore is true and field_name is not contained in model_fields,
  instantiate Archive class with an argument path, with it renamed to archive, perform,
  if self.negated,
  call the method self.filter with 3 arguments: name, func and unpacked dictionary flags, return the result.
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  decrement by length of password, create bytes string with previous result number of characters '\x00',
  call the serializer function, call the loads method on the return value with an argument data, return the result.
  for every part in plural,
  return obj.
  concatenate __name__, string '.moves' and attr.name together, use it as an key to get the value from the sys.modules dictionary,
  return None.
  call the function force_str with an argument: default if it is true, or if not, first element of the result of the function,
  from __future__ import unicode_literals into default name space.
  if not,
  call the function do_translate with 2 arguments: message and string 'gettext', return the result.
  and re.IGNORECASE, substitute the result for domain_regex.   call the re.compile function with 2 arguments: raw string '\[([A-f0-9:\.]+)\]$' and re.IGNORECASE, substitute the result for literal_regex.
  compiled_parent.nodelist.get_nodes_by_type, called with an argument BlockNode.   call the method block_context.add_blocks with an argument blocks.
  call the function force_text with an argument text, replace every occurrence of '&' in the result with '&amp;',
  increment i-th element of result by piece.
  define the function length_is with 2 arguments value and arg.
  substitute file.name for filename.
  from django.utils.six.moves.urllib.parse import quote, quote_plus, unquote, unquote_plus, urlparse, urlencode as original_urlencode.
  __all__ is a tuple of strings: 'Media', 'MediaDefiningClass', 'Widget', 'TextInput', 'EmailInput', 'URLInput', 'NumberInput',
  from django.forms.utils import ErrorList into default name space.
  return key and pdict.
  substitute use_tz for self.use_tz.
  call the function timesince with 2 arguments: value and arg, return the result.
  define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  use the result as an argument for the call to the json.dumps function, return the result.   define the method as_text with an argument self.
  define the method render with 2 arguments: self and context.
  define the method clean with arguments self and value.
  define the function conditional_escape with an argument text.
  replace '%s' in string "%s, from %s" with second and first element of the first targets row, respectively,
  define the method _delete with arguments self and key.
  substitute view_name for self.view_name.
  if e doesnt have an 'django_template_source' attribute,
  call the function force_str with an argument self._tzname, return the result.
  if value under 'plain' key of the options dictionary is true,
  self.year_none_value is a tuple containing 2 elements: integer 0 and first element of empty_label.
  return last element of value.
  substitute loader, name and dirs for self.loader, self.loadname and self.dirs, respectively.
  try,
  raise an TemplateDoesNotExist exception.
  define the method streaming_content with 2 arguments: self and value.
  reverse the order of modules elements, put them into a list, return it.
  substitute self.deleted_forms for forms_to_delete.
  substitute self.auto_id for auto_id.
  call the method sys.stdin.close.
  call the function super_set with 2 arguments: key and value.
  if _ipv6 is true,
  call the encode function on the Header class instance, created with arguments nm and string 'utf-8', substitute the result for nm.
  if use_l10n is true, or use_l10n is None and settings.USE_L10N is true,
  get 'errors' attribute from fp object, substitute it for errors if it exists, if not errors is None.
  define the method getvalue with an argument self.
  from django.core.mail.backends.base import BaseEmailBackend into default name space.
  call the method self.make_view_atomic with callback as the argument, substitute the result for the wrapped_callback.
  and path with self.path, substitute the result for current_uri.   call the function urljoin with arguments current_uri and location, substitute the result for location.
  import module zlib.
  response.content is bytes empty string.
  if AttributeError exception is caught,
  define the initialization method __init__ with 3 arguments: self, name and params.
  decorator stringfilter,
  call the method self._should_delete_form with an argument, if it evaluates to true,
  lexer is an instance of JsLexer class.
  try,
  define the method _get_request with self class instance as argument.
  reset_sequences set to reset_sequences, allow_cascade set to allow_cascade, substitute the result for sql_list.   if interactive is true,
  call the function force_text with an argument error, return the result.
  add data to seen_data set.
  put the results in a list, join the list elements in a string separated by whitespace separator, return the string as the bytes string.   evaluate the method six.text_type(s), on the result call the method encode with the arguments encoding and errors, return the result.
  if not,
  VARIABLE_TAG_END is a string '}}'.
  from django.core.exceptions import ValidationError into default name space.
  append string '0000' to new_ip.
  if not substitute field.initial for initial_value.   if initial_value is an callable object,
  if cmatch is true,
  call the function getInnerText with argument field_node, on the result call the method strip, use the result as an argument for the
  wsgi_opts is a dictionary with 4 initial entries: value under the key 'maxspare' of options dictionary converted to an integer,
  for every base in reversed order of bases,
  from __future__ import unicode_literals into default name space.
  define the function address_string with an argument self.
  call the method wm.add_watch with path and mask as arguments.
  instantiate TimestampSigner object with arguments key and salt set to salt, call its method unsign with arguments:
  substitute parent_widget for self.parent_widget.
  substitute self.context.render_context for render_context.
  if size is not zero,
  call the function self._key_to_file with key and version as arguments, use the result as an argument for the call to the self._delete method.
  define the function strftime with 2 arguments dt and fmt.
  if safe is true,
  if common_ancestor is None,
  if TypeError or ValueError exceptions are caught,
  substitute it for callback, if the attribute doesnt exists, callback is None.   if not callback,
  'Enter a whole number.' for 'invalid'.   define the method __init__ with 5 arguments: self, max_value set to None, min_value set to None, unpacked list args and unpacked dictionary kwargs.
  call the function iter with an argument patterns.
  f.required is boolean False.
  substitute first element of nonlocal_root for root.
  define method _get_height with self class instance as the argument.
  convert key and default to strings, get the value under the key string key of the environ dictionary, if it does not exists use the,
  upto is integer 0.
  call the function force_str with argument self.obj, substitute the result for obj.
  define the method render_node with 3 arguments: self, node and context.
  try,
  if PY3 is true,
  define the method __init__ with 2 arguments self and func.
  define the method configure_logger with 4 arguments: self, name, config, incremental set to boolean False.
  call the method queryset.filter with an argument pk__in set to primary_keys, substitute the result for queryset.
  tuple with 3 elements: strings '%H:%M:%S', '%H:%M:%S.%f' and '%H:%M' for 'TIME_INPUT_FORMATS',   tuple with 4 elements: strings '%Y-%m-%d %H:%M:%S', '%Y-%m-%d %H:%M:%S.%f', '%Y-%m-%d %H:%M' and '%Y-%m-%d' for 'DATETIME_INPUT_FORMATS'.   define the function reset_format_cache.
  self.m2m_data is None.
  format string "%s%s%s" with 3 elements: result of the function random.getstate, result of the call the the function time.time,
  and help is a string "Only dump objects with given primary keys. Accepts a comma separated list of keys. "   "This option will only work when you specify one model.".   call the method parser.add_argument with 5 arguments: string '-o', string '--output', default is None, dest set to string 'output',
  from __future__ import unicode_literals into default name space.
  call the function self.regex.search with an argument path, substitute the result for match.
  if self.first is false,
  return template.
  call the self._lock.reader method, with the result perform the following,
  define the method __iter__ with an argument self.
  return value under the 'forloop' key of the context dictionary.
  define the function get_default_timezone.
  call the function mark_safe with an argument contents, return the result.
  singular is an empty list.
  _func_globals is a string "func_globals".
  self._changed_data is None.
  if source is None,
  called with an argument result of the method self.latest_post_date.   if value under the 'ttl' key of the self.feed dictionary is not None,
  import module socket.
  if not,
  self.connection is a instance of a class contained in connection_class, instantiated with arguments: self.host, self.port,
  convert num to an integer, substitute it for length.
  raise an TypeError exception with an argument string "end must be None or a string".
  if self._wrapped is empty,
  if eather one of settings.USE_I18N or settings.USE_L10N is True,
  substitute size for self.size.
  if not,
  define the method accessed_time with arguments self and name.
  break loop execution.
  EMPTY_VALUES is a tuple containing 5 initial elements: None, empty string, empty list, empty tuple and an empty dictionary.
  all_models is an empty list.
  call the method logging.Handler.__init__ with an argument self.
  split is an empty list.
  do nothing.
  return default.
  for every base in reversed order of bases,
  nesting is integer 0.
  if KeyError exception is caught,
  where '%s' is replaced with app_or_project and extra_files joined into a string, separated by a string ', '.   append string '_name' to app_or_project, substitute it for base_name.
  if self.allow_multiple_selected is false,
  set self.name attribute of the obj object to result.
  BASE2_ALPHABET is a string '01'.
  from django.core.wsgi import get_wsgi_application into default name space.
  raise an CommandError with an argument string "%s. Are you sure your INSTALLED_APPS setting is correct?", with '%s' replaced by e.
  return callback and a empty string.
  dest set to string 'tags' and help set to string 'Run only checks labeled with given tag.'.   call the method parser.add_argument with 4 arguments: string '--list-tags', action set to string 'store_true',
  if value is an instance of datetime.datetime,
  from django.utils import six into default name space.
  raise an ValidationError with 3 arguments: value under the 'max_digits' key of the self.error_messages dictionary,
  define the function calculate_app_template_dirs.
  raise an NoReverseMatch exception with an argument string "Error importing '%s': %s.", where '%s' is replaced with lookup_view and e, respectively.
  raise an TemplateSyntaxError exception with an argument string "'now' statement takes one argument".
  call the function chain with an argument unpacked list, append name to string 'render_',
  if response is None,
  decrement end by one.
  import module django.
  silent_variable_failure is an boolean True.
  define the method handle_m2m_field with arguments self, obj and field.
  substitute str for binary_type.
  call the method call the function warnings.warn with 3 arguments: msg formatted with language and value under the language key,
  raise an CommandError exception with an argument string "Multiple fixtures named '%s' in %s. Aborting.", where '%s' is replaced with:
  call the method clean with an argument data from the base class of the class URLField, return the result.
  define the method __getstate__ with an argument self.
  define the method validate_unique with an argument self.
  raise an TypeError exception with an argument string "Non-integer base36 conversion input.".
  while current_len is smaller than or equal to length,
  call the method app_list.setdefault with 2 arguments app_config and an empty list, substitute the result for app_list_value.
  return result converted into an integer.   define the method w with an argument self.
  call the function call_command with 2 arguments: string migrate and unpacked dictionary options.
  return r.
  substitute self.deleted_forms for forms_to_delete.
  call the function become_daemon with 2 arguments: our_home_dir set to the value under the 'workdir' key of options dictionary and,
  call the function constant_re.findall with an argument t.contents, substitute the result for cmatches.
  call the method self.run_validators with an argument value.
  from django.db import models into default namespace.
  import module zipfile.
  if t is not None,
  if self.sep is not contained in signed_value,
  call the method message.message.
  self._js is an empty list.
  get the value under the settings.__module__ key of the sys.modules dictionary,
  if self.data is an instance of datetime.datetime and result of the function is_aware called with an argument self.data evaluates to true,
  substitute settings.DEFAULT_CHARSET for encoding.
  substitute Tok.num for self.id.
  and result of the function humanize called with an argument fixture_dir.   if length of fixture_files_in_dir is greater than 1,
  if formatter is true,
  import module hashlib.
  try,
  from django.core.management import call_command into default name space.
  call the function re.compile with 2 arguments: raw string "((?:[^\s'"]*(?:(?:"(?:[^"\\]|\\.)*" | '(?:[^'\\]|\\.)*')[^\s'"]*)+) | \+)",
  data is an instance of BytesIO class, created with an argument: self._body.
  for every bytes in stream,
  if content has an attribute 'temporary_file_path',
  try,
  for every x in sequence of integers from 0 to 7.   RESET is a string '0'.
  define the method rendered_content with an argument self.
  yield string "# Feel free to rename the models, but don't rename db_table values or field names." as the result.
  call the method node.getAttribute with an argument string 'pk', use the result as the argument for the call to the method,  Model._meta.pk.to_python with, substitute the result for value under the Model._meta.pk.attname key of the data dictionary.
  from django.utils import six into default name space.
  and unpacked dictionary kwargs.   substitute streaming_content for self.streaming_content.
  with lock,
  convert number to string, if first element equals to sign,
  evaluate the function http.parse_cookie with raw_cookie as an argument, return the result.
  return None.
  _mtimes is an empty dictionary.
  if not,
  dest is 'use_natural_primary_keys', default is boolean False and help is a string 'Use natural primary keys if they are available.'.   call the method parser.add_argument with 6 arguments: string '-a', string '--all', action set to 'store_true',
  return boolean False.
  from django.core.serializers import base into default name space.
  return a tuple with 2 elements: integer 0 and second element of k.
  try,
  call the method executor.migration_plan wiht return value of te method executor.loader.graph.leaf_nodes as argument, substitute it for plan.
  nesting is integer 1.
  define the method with 3 arguments: self, app_config  set to None and display_num_errors set to boolean False.
  define the function escapejs_filter with an argument value.
  call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries:
  delete attr.
  substitute length of text for end.
  if value object the 'unique_id_is_permalink' key of the item dictionary is an instance of bool type,
  do nothing.
  if file path sql_file exists,
  fields is an tuple containing 3 entries: return value of the method models.CharField called with 4 arguments:
  return the value under the filter_name key of the self.filters dictionary.
  return replacement.
  return new_class.
  if '_meta' is not an attribute of obj,
  extend new_second_item with item.
  call the method self._prepare_data with an argument data, substitute the result for data.
  tried is an empty list.
  call the method password.translate with an argument hmac.trans_5C, update outer dictionary with the result.
  if not,
  raise an exception.
  define the method __promise__ with 4 arguments: cls, klass, funcname and method.
  call the function os.path.basename with an argument fixture_file, use the result as an argument for the call to the method,
  call the method self_cache.delete_multi with argument list containing keys mapped through function l.
  return a string '"%s"' formated with etag, in which every occurrence of '\\' is replaced with '\\\\' and every occurrence of '"',
  define the function to_locale with 2 arguments language and to_lower set to boolean False.
  from importlib import import_module into default name space.
  if ValidationError, renamed to e, is caught,
  if trim is true,
  make basedir directory,
  return an instance of the class Media, called with an unpacked dictionary with an entry: name appended to string '_',
  from django.db.migrations.writer import MigrationWriter into default name space.
  call the method self.as_table, return the result.
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  strip message_context of "'" characters from both ends, substitute the result for message_context.
  def method add_arguments with self class instance and parser as the arguments.
  import module calendar.
  sort all_files and return it.
  try,
  replace '%s' with self.file_path and err, respectively.   if self.file_path file is not writable,
  if not,
  call the method resolved_path.append with an argument ns.
  if value is None,
  append e to infos list for every e in all_issues, if checks.INFO is lesser or equal to e.level,
  use the result as an argument for function call of force_bytes, use the result as an argument for calling the method hashlib.md5,   put the result in url.   substitute the '%s' in string 'views.decorators.cache.cache_header.%s.%s' with key_prefix and result of the function call,
  string 'The inline foreign key did not match the parent instance primary key.' for 'invalid_choice'.   define the method __init__ with 4 arguments: self, parent_instance, unpacked list args and unpacked dictionary kwargs.
  try,
  for every c in choices split into words, concatenate prefix, result of the function re.escape with an argument c and suffix,
  write string "  you can delete them." to self.stdout.
  call the method calendar.monthrange with 2 arguments: self.data.year and self.data.month,
  if supported_platform is False or is_a_tty is False,
  filenames is an empty list.
  try,
  substitute nodelist_empty for self.nodelist_empty.
  if dictionary is false,
  call the method token_string.find with an argument TRANSLATOR_COMMENT_MARK, if it evaluates to true,
  data is an dictionary with 2 initial entries: return value of the smart_text function with the argument obj._meta for 'model',
  call the function load_command_class with arguments: app_name and name, substitute the result for command.
  raise an ValueError exception with string "The file cannot be reopened." as an argument.
  if VariableDoesNotExist exception is caught,
  for every field in concrete_model._meta.many_to_many,
  substitute node.source for e.django_template_source.
  raise an ExternalReferenceForbidden exception with arguments context, base, sysid and pubid.
  if the union of the kwargs and defaults dictionary keys converted into sets is not the same as the union of the defaults and prefix
  replace all the strings '\\' with '/' in the string name, use it as an argument for the call to the force_text function, return the result.
  default_error_messages is an dictionary with an initial entry: result of the function _ called with an argument string,
  from __future__ import unicode_literals into default name space.
  and pattern.default_args.   substitute lookups for the value under language_code key of the self._reverse_dict dictionary.
  exception_middleware is an empty list.
  if errors is true,
  do nothing.
  import module cgi.
  get the element with minimal value between the value under the TOTAL_FORM_COUNT key of self.management_form.cleaned_data dictionary,
  define the method t with an argument self.
  call the function get_language, substitute the result for language_code.
  if return value of the self.is_secure is false and server port is not equal to string '80',   join host and server_port into a string, separated with ':', substitute the result for host.
  define the method __call__ with arguments self and value.
  return a string "%s.%s" formated with first dot package elements and name.
  define the method exit_command with an argument self.
  if UnicodeDecodeError exception is caught,
  return plural_suffix.
  cat for 'term'.   if value under the 'feed_copyright' key of the self.feed dictionary is not None,
  for every sql in index_sql,
  append string '_0' to id_.
  define the function literals with 3 arguments: choices, prefix set to an empty string and suffix set to an empty string.
  random is an instance of random.SystemRandom class.
  from django.core import signals into default name space.
  if not,
  define the function comment with 2 arguments: parser and token.
  try,
  call the method self.xml.startElement with 2 arguments, string "django-objects" and a dictionary containing 1 element: "1.0" for "version".
  for every header in list of strings compiled by splitting string cc_delim_re with value under the key 'Vary' of response dictionary as a delimiter.
  call the function urlsplit with an argument value, assign the result to scheme, netloc, path, query and fragment, respectively.
  substitute help_texts for value under the 'help_texts' key of attrs dictionary.
  formated with string created by joining elements of result of the function re.escape with an argument x, with separator '|',   for every x in DOTS, and re.DOTALL, substitute the result for hard_coded_bullets_re.   call the function re.compile with raw string '(?:<p>(?:&nbsp;|\s|<br \/>)*?</p>\s*)+\Z', substitute the result for trailing_empty_content_re.
  if 'expects_localtime' attribute of func object exists and is true,
  keep_blank_values set to boolean True, encoding set to encoding.   call the method appendlist with 2 arguments: key and value.
  size is a property object with _get_size as getter method and _set_size as setter method.
  schemes is a list containing 4 initial elements: 'http', 'https', 'ftp' and 'ftps'.
  call the method connection.creation.create_test_db with verbosity set to verbosity, autoclobber set to inverse value of interactive,
  define the method write_message with arguments self and message.
  if templatetags_modules is false,
  for value under the key key of the cache dictionary.   increment stats dictionary value under the MISSES key by integer 1.
  if autoescape is true,
  for every form in valid_forms,
  if not,
  define the function available_attrs with an argument fn.
  sorted_issues is a list of tuples with 5 entries: criticals and 'CRITICALS', errors and 'ERRORS', warnings and 'WARNINGS',
  call the function predicate with an argument item, use it as a key to get results dictionary value, append item to it.
  import pickle.
  integer 0, appended to a string "strftime of dates before 1900 does not handle".   substitute dt.year for year.
  define the function file_complete with arguments self and file_size.
  return an instance of TemplateLiteral with 2 arguments: result of the function self.template_parser.compile_filter,
  call the method handler.addQuickElement with 2 arguments: string 'author' and value under the 'author_email' key of the item dictionary.
  set response to None.
  return attachment.
  call the method parser.add_argument with 2 arguments: string 'args' and nargs set to '*'.
  define lambda function that returns self.file.tell field, use it as an argument for property function, put the result in tell.
  call the function get_default_timezone, use the result as an argument for the call to the function _get_timezone_name, return the result.
  substitute hint for self.hint.
  call the method path.normpath with an argument expanded_template, substitute it for expanded_template.
  from django.utils.six.moves import zip into default name space.
  otherwise if cmatches is true,
  replace '%s' in string 'django_%s_template_' with self.app_or_project.
  if idstring is None,
  substitute the result for value.   substitute tuple containing 2 elements: header and value for the value under the header converted to lowercase key of the self._headers dictionary.
  assign StringIO.StringIO to StringIO and BytesIO.
  substitute content_type_extra for self.content_type_extra.
  decorator decorator.
  call the method s.encode with an argument string 'utf-8', substitute the result for s.
  if squash is false,
  call the method __init__ from the base class of the ExternalReferenceForbidden class.
  substitute value for value under the key key of dictionary at last element of self.dicts.
  call the method self._isdst with an argument dt, use it as an key to get the value from the _time.tzname dictionary, return it.
  add k to seen.
  substitute type.__init__ for __init__.
  if f.db_index is true,
  self.lineno is integer 1.
  call the method nodelist.get_nodes_by_type with an argument nodetype, extend nodes with the result.
  define the method __iter__ with an argument self.
  substitute _itervalues for values.
  call the function force_str with an argument string '<%s\npath:%s,\nGET:%s,\nPOST:%s,\nCOOKIES:%s,\nMETA:%s>',
  if data is true, substitute list created from elements of data, substitute it for self.keyOrder, otherwise self.keyOrder is an empty list.
  get the value under the self key of the context.render_context dictionary, substitute it for cycle_iter.
  or string 'ANICON' is in os.environ, substitute the evaluated boolean for supported_platform.   if sys.stdout has an attribute named 'isatty' and call to the sys.stdout.isatty returns boolean True, substitute True for is_a_tty.
  from django.utils.module_loading import import_string into default name space.
  unpacked list args2 and unpacked dictionary kwargs2, return the result.   call the function bound_func with 2 arguments: unpacked list args and unpacked dictionary kwargs, return the result.
  do nothing.
  convert candidate to a string.
  call the method self.xml.endElement with an argument string 'field'.
  label set to return value of the function _ called with an string 'Order', initial set to index incremented by 1,   and required as boolean False.   if not,
  return string first element of t, '=', second element of t.
  delete value under the 'args' key of the cmd_options dictionary.
  if not,
  define the function ungettext with 3 arguments: singular, plural and number.
  substitute qs for self._queryset.
  default set to None and help set to string 'Overrides the default address where the live server (used '  'with LiveServerTestCase) is expected to run from. The default value is localhost:8081.'   call the function get_runner with arguments settings and self.test_runner, substitute the result for test_runner_class.
  and for every _, nodelist in self.conditions_nodelists.   define the method render with 2 arguments: self and context.
  define the method clean with 2 arguments self and value.
  substitute status for self.status_code.
  from django.core.management.base import BaseCommand and CommandError into default name space.
  append contents to plural.
  method lru_cache.lru_cache with an argument maxsize set to None, as a decorator,
  derive the class DebugNode from Node base class.
  if headers exists substitute it for self.extra_headers, if not extra_headers is an empty dictionary.
  call the function _super with 2 arguments: class SimpleLazyObject and self, call the method __init__ on the result.
  return string 'NOTPROVIDED'.
  import_module function, substitute the result for module.   return an instance of the module.Command class.
  call the method pytz.timezone with an argument timezone, substitute the result for _active.value.
  raise an ValueError with an argument string "'%s' has no field named '%s'.", with '%s' replaced with self.__class__.__name__ and field, respectively.
  substitute current_app for ns.
  substitute DNS_NAME for idhost.
  from importlib.util import find_spec as importlib_find.
  return input_val.
  if default is None,
  use the result as an argument for the call to the function datetime.fromtimestamp, return the result.   define the method created_time with arguments self and name.
  raise an ImproperlyConfigured exception with argument string 'Path for saving emails is invalid: %r', replace '%r' with self.file_path.
  if IOError or OSError exceptions occurred,
  self._files is an instance of MultiValueDict class.
  import module warnings.
  raise an ImportError exception with an argument string "Could not import '%s'. The path must be fully qualified.",
  define the method __init__ with 2 arguments: self and name.
  raise an exception.
  from django.template.base import TemplateSyntaxError, Library, Node, TextNode, token_kwargs and Variable into default namespace.
  call the function dec with an argument func, return the result.
  substitute cls.__bytes_cast for cls.__bytes__.
  define the method _create_mime_attachment with arguments self, content and mimetype.
  substitute utc for tzinfo.
  from django.utils.dateformat import format and time_format into default name space.
  if return values of the function force_text called two times with 1 argument, with value, and with orig, are equal,
  assign the handle to stream.   old_field_name is None.
  define the method reset with an argument self.
  self.default_locale_path is None.
  return boolean False.
  if response is None,
  raise an NotImplementedError with an argument string 'subclasses of Tokenparser must provide a top() method'.
  define the method message with argument self.
  if value under the 'author_email' key of the item dictionary is not None,
  for every basedir in basedirs,
  return a dictionary with 2 elements: self._version for "version" and "http://www.w3.org/2005/Atom" for "xmlns:atom".
  return a list with an element tuple with 2 elements: an empty string and an empty list.
  append tuple with 2 elements: i and value under the ORDERING_FIELD_NAME key of form.cleaned_data dictionary to self._ordering.
  get config dictionary element under 'formatters' key, if it exists substitute it for formatters, if not, formatters is EMPTY_DICT.
  if self.locale_paths is true,
  substitute params for self.params.
  substitute form.instance for obj.
  call the get_bytes_from_wsgi function with self.environ, string 'QUERY_STRING' and empty string as arguments, substitute the return value for raw_query_string.
  define the method has_other_pages with an argument self.
  try,
  append the result to password.   call the method password.translate with an argument hmac.trans_36, update inner dictionary with the result.
  set k attribute of cls object to meth.
  self.choices is an list containing an tuple with 2 elements: an empty string and string "---------".
  if not,
  return nothing.
  instantiate class ContextDict with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, return it.
  if PY3 field of six is boolean True,
  derive the class MergeDict from the object base class.
  if not,
  finally perform,
  delete value under the key key of dictionary at last element of self.dicts.
  from django.template.context import BaseContext, Context, RequestContext and ContextPopException into default namespace.
  HITS and MISSES are integer 0 and 1, respectively.
  for every form in self call the form.as_ul method, join the results in a string, separated by an empty string.
  default set to boolean True, help set to string 'Tells Django to NOT prompt the user for input of any kind.'.   call the method parser.add_argument with 5 arguments: string '--failfast', action set to string 'store_true', dest set to 'failfast',
  msg is a instance of a SafeMIMEText class created with arguments: self.body, self.content_subtype and encoding.
  define the method full_clean with an argument self.
  or value equals return value of the call to Decimal with argument '-Inf'   raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  do nothing.
  from django.utils import six into default name space.
  get the index name, of the parser._namedCycleNodes, return the result.
  substitute the result for starttag_re.   call the function re.compile with an argument string '</%s>' formated with tags_re, substitute the result for endtag_re.
  and string '~/.pythonrc.py' as tuples second element.   if pythonrc is true,
  update self.__dict__ dictionary with obj_dict.
  call the method self.data.timetuple, use the result as an argument for the call to the function time.mktime,
  skip this loop iteration.
  define the method discard with 2 arguments: self and item.
  get the value under the 'error_messages' key of the kwargs dictionary, if it exists substitute it for error_messages, if not,
  try,
  get self.to_field attribute of self.parent_instance object, substitute it for value under the 'initial' key of the kwargs dictionary.
  for every c in self.children.   define the method __repr__ with an argument self.
  __all__ is a list containing a string 'file_move_safe'.
  call function force_bytes with value as argument, use the result to as the result for the call to the methgod ctx.update.
  use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.   for every migration in app_migrations,
  val is None.
  raise an Resolver404 exception with an argument dictionary containing 2 entries: new_path for 'path' and tried for 'tried'.
  substitute _templatetags_modules for templatetags_modules.
  import imp.
  call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for _default.
  if every filter_name in strings 'escape' or 'safe',
  call the method condition.eval with an argument context, substitute the result for match.
  call self.clear method.
  for every v in list_ append to a list result of the function encode, called with arguments: k and result of the function force_bytes,
  substitute model._meta.app_label for app.
  get the value under the ns key of the resolver.app_dict dictionary, substitute it for app_list.
  property decorator,
  call the method parser.add_option with 2 arguments: string '--pythonpath' and help set to string 'A directory to add to the Python path, e.g. "/home/djangoprojects/myproject".'.
  and errors set to the result of self.default_error_messages.copy.
  if relative_dir is true,
  intrans is boolean True.
  convert val to an list, substitute it for val.
  get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.
  substitute the result for content.   token is an instance of Token class, created with 2 arguments: TOKEN_COMMENT and content.
  call the function _ with the argument string 'Ensure this value is %(limit_value)s (it is %(show_value)s).', substitute the result for message.
  self._errors is None.
  call the function __import__ with an argument name.
  get the value 'allow_cascade' key of the options dictionary, if it exists substitute it for allow_cascade, otherwise allow_cascade is boolean False.
  call the function render_value_in_context with 2 arguments output and context, return the result.
  return boolean False.
  define the function flatatt with an argument attrs.
  return value
  raise an AttributeError exception with an argument string "You cannot set content to a 304 (Not Modified) response".
  if initial is None,
  define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  substitute the length of the resulting list for number_equal.   if number_equal is greater than integer 40,
  return input_val.
  from django.http.multipartparser import MultiPartParser and MultiPartParserError into default name space.
  otherwise if, if value under the 'unique' key of the dictionary contained under the column_name key of the dictionary indexes is true,
  for every cache_alias in settings.CACHES,
  m is an instance of Media class.
  call the method self.open, substitute the result for stream_created.
  if _cached_filenames is empty and settings.USE_I18N is True,
  call the method self.xml.startElement with 2 arguments: string 'field' and dictionary containing 3 entries: field.name for 'name',
  call the method handler.endElement with an argument string 'rss'.
  substitute origin for self.origin.
  evaluate the force_text function with settings.FORCE_SCRIPT_NAME as argument, return the result.
  call the method e.encode with an argument string "latin-1".
  get the value under the 'no_wrap' key of the options dictionary, if it is true,
  if queryset is None,
  try,
  call the method __init__ with an argument data, from the base class of the class DictWrapper.
  return value.
  define the function upath with an argument path.
  return boolean True if self.level is greater than or equals to ERROR, otherwise return boolean False.
  define the method id_for_label with arguments self, data, files and name.
  if self._is_rendered is true,
  append '0' to digits.
  skip this loop iteration.
  derive the class TokenBase from the object base class.
  define the method __repr__ with argument self.
  substitute windll.kernel32.LockFileEx for LockFileEx.
  from django.utils import six into default name space.
  call the method self.regex.search with an argument path, substitute the result for match.
  define the method __deepcopy__ with arguments self and memo.
  if settings.USE_L10N is true,
  if TypeError or ValueError exceptions are caught,
  element of data at the index last equals to carriage return bytes character.
  if self.max_length is not None and length of file_name is grater than self.max_length,
  call the function importlib.import_module with an argument serializer_module, substitute it for module.
  return None.
  for every key and value in return value of the self._headers.values method, call the function to_bytes with 2 arguments: key,
  substitute '%s' in string "No changes detected in apps '%s'" with the app_labels joined into a string, separated by string "', '",
  sum max_num and DEFAULT_MAX_NUM, substitute the result for absolute_max.
  call the method clear from the base class of the class SortedDict.
  define the function boolean_check with an argument v.
  evaluate binary expression with 4 operands: os.O_WRONLY, binary or os.O_CREAT, binary or os.O_EXCL,
  from django.core.management.base import AppCommand into default name space.
  get config dictionary element under 'datefmt' key, if it exists substitute it for dfmt, if not, dfmt is None.
  do nothing.
  if text is an instance of SafeData, safe_input is boolean True, otherwise is boolean False.
  substitute help_text for self.help_text.
  if 'filename' attribute of ev is None,
  open out_log flie in append mode with buffering size of input buffer, substitute the result for so.
  return name and tuple containing 2 elements value and params.
  return nothing.
  import module sys.
  if not,
  return a string '%02d' formated with self.data.month.
  do nothing.
  return supported.
  from django.core.management.sql import sql_custom into default name space.
  if value under the 'description' key of the item dictionary is not None,
  finally perform,
  join app_config.path and 'locale' into a valid directory path, separated by '/', append it to basedirs.
  if bytes is false,
  from django.utils import six into default name space.
  format string '%+03d%02d' with hour and minute, append it to time_str, return the result.
  append string ".moves.urllib_request" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for request.
  string '%s' with self._func_path, self.args, self.kwargs, self.url_name, self.app_name and self.namespaces, respectively.   derive the class Resolver404 with Http404 as base class.
  call the method __deepcopy__ with an argument memo from the base class of the class ChoiceField, substitute the result for result.
  call the method LocaleRegexProvider.__init__ with arguments self and regex.
  derive the class BoundField from the base class object.
  if value is not None,
  call the function warnings.warn with 2 arguments: "django.utils.tzinfo.FixedOffset will be removed in Django 1.9. "
  from django.db import connection into default name space.
  if username is None substitute settings.EMAIL_HOST_USER for self.username, if not substitute username for self.username.
  call the function re.compile with 2 arguments:
  call the method self._coerce with an argument value, return the result.
  the %(lookup)s in %(date_field)s.", where '%(field_name)s' is replaced with third element of data_check,   '%(date_field)s' is replaced with fourth element of date_check and '%(lookup)s' is replaced with result of the function,   six.text_type called with second element of date_check as an argument, return the result.   define the method get_form_error with an argument self.
  substitute TimeInput for widget.
  return the string 'ValidationError(%s)', replace '%s' with self.
  get the value under the 'shutdown_message' key of the options dictionary, if it exists substitute it for shutdown_message,
  root is an list with 4 elements: root, root, None and None.
  substitute nodelist for self.nodelist.
  remove entry under the 'formfield_callback' key of the attrs dictionary, if it exists substitute if for formfield_callback,
  decrement factor by one.
  substitute size for self._size.
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  for every __ in iterator,
  try,
  if not,
  return result.
  raise an CommandError exception with an argument "Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed.",  where '%s' is replaced with program.
  self.vals is an empty list.
  old_handler is None.
  if not,
  if nodelist is true,
  buffer_ is None.
  for every chunk in return value of the method self.chunks,
  define the method __str__ with an argument self.
  if invalid_apps in not empty,
  define the method _resolve_lookup with 2 arguments: self and context.
  substitute self.file for thefile.
  call the method self.paginator.validate_number with self.number incremented by 1 as argument, return the result.
  if over_bytes is true,
  return value under the key key of dictionary in last element of self.dicts,
  try,
  get is a tuple containing elements generated by the call to the function pformat with an argument GET_override,
  substitute stat.st_mtime for mtime.
  subcommand is a string 'help'.
  try,
  while length of line is grater than max_width,
  from django.utils.text import get_text_list and capfirst into default name space.
  __D2 is a raw string '(?P<day>[ \d]\d)'.
  return ret.
  from django.utils.html import avoid_wrapping into default name space.
  if OSError exception is caught,
  for every frag in name.
  call the function binascii.hexlify with an argument x, convert the result to base 16 integer, return the result.
  if i is greater than sys.maxint,
  database set to connection.alias, skip_validation set to boolean True, app_label set to app_label and hide_empty set to boolean True.   return created_models
  if now is false,
  define the method _parse_header with an argument line.
  if csrf_token is not None,
  call the method self.has_previous, if it evaluate to false, call the self.has_next method, return the result.
  assign the bits elements to tag, this_value_expr, max_value_expr, max_width, as_ and asvar.
  remove entry at the attr key of the declared_fields dictionary.
  define the method add_prefix with 2 arguments: self and field_name.
  return an instance of ModelChoiceIterator class, created with an argument self.
  kwargs is an empty dictionary,
  messages is an instance of the ValidationError class created with an argument messages.
  call the function timedelta with an argument minutes set to offset, substitute the result for self.__offset.
  if pattern is an instance of RegexURLResolver class,
  call the method self.items, for every field and errors in the result.
  call the method s.decode with encoding and errors as the arguments, substitute the result for s.
  if ImportError exception is caught,
  append x converted to an integer to bits.
  'get_language_from_request', 'get_language_info', 'get_language_bidi', 'check_for_language', 'to_locale', 'templatize',   'string_concat', 'gettext', 'gettext_lazy', 'gettext_noop', 'ugettext', 'ugettext_lazy', 'ugettext_noop', 'ngettext', 'ngettext_lazy',   'ungettext', 'ungettext_lazy', 'pgettext', 'pgettext_lazy', 'npgettext', 'npgettext_lazy' and 'LANGUAGE_SESSION_KEY'.   LANGUAGE_SESSION_KEY is an string '_language'.
  replace '%s' in string "'%s' already exists" with top_dir, substitute it for message.
  if not,
  define the function restart_with_reloader.
  if not,
  import module ssl.
  call the method self.valid_value with an argument val, if it evaluates to false,
  where '%s' is replaced with subject.   substitute i for p.
  use global variables _format_cache and _format_modules_cache.
  define the method __init__ with 4 arguments: self, template_string, origin set to None and name set to None.
  prefix set to None, initial set to None, error_class set to ErrorList, label_suffix set to None,   empty_permitted set to boolean False, instance set to None.   substitute self._meta for opts.
  try,
  substitute xreadlines for __iter__.
  substitute urlconf_name for self.urlconf_name.
  for field in self if field.is_hidden is true, append field to a list, return the resulting list.
  from django.template.base import TemplateDoesNotExist into default name space.
  define show_migration_list with self class instance, connection and app_names set to None, as arguments.
  if remaining is not greater than 0, assert an error with the message string 'remaining bytes to read should never go negative'.
  if domain is true,
  return path.
  call the method self.unclosed_block_tag with an argument parse_until.
  value under the field.attname key of the data dictionary is None.
  call the method self._set with key, pickled and timeout as arguments.
  while model_dependencies is true,
  if not,
  substitute value under the f.name key of the help_texts dictionary for value under the 'help_text' key of kwargs dictionary.
  substitute doublecolon_start for best_doublecolon_start.
  if nodelist is an instance of NodeList and node is not an instance of TextNode class.
  if string 'forloop' is contained in context,
  resolved_kwargs is dictionary with elements: return value of the method v.resolve called with an argument context, for k,
  if settings.configured,
  call the method self._populate.
  if model is contained in created_models,
  close zfile stream.
  raise an NotImplementedError with an argument string 'subclasses of NoArgsCommand must provide a handle_noargs() method'.
  if not,
  define the method ugettext with an argument message.
  return an string "<For Node: for %s in %s, tail_len: %d%s>", substitute '%s' with elements of self.loopvars joined into a string,
  call the function time.time, substitute the result for timeval.
  if keys is true,
  call the function func with 2 arguments: self._wrapped and unpacked list args.
  set use_workaround to boolean True if current_version tuple elements are smaller than the tuple (2,7,3), respectively,
  raise an UnrecognizedArchiveFormat exception with an argument string "File object not a recognized archive format.".
  from django.utils import six into default name space.
  property decorator,
  try,
  with 2 arguments: stream and Loader set to SafeLoader, and unpacked dictionary options,   yield one element of the itterable obj.
  substitute self.current_token for t.
  define the function get_supported_language_variant with 2 arguments: lang_code and strict set to boolean False.
  call the function ungettext with 3 arguments: string "%(size)d byte", string "%(size)d bytes" and 0, '%(size)d' is replaced with 0,
  call the method block.nodelist.render with an argument context, substitute the result for result.
  extend self.program list with self.program_options, string '-o',
  if f.unique is true, substitute "UNIQUE " for unique, otherwise unique is an empty string.
  if not,
  raise an MultiPartParserError with an argument string 'multipartparser.exhaust() was passed a non-iterable or stream parameter'.
  call the function smart_text with an argument value, return the result.
  substitute first decimal_pos elements of dec_part for dec_part.
  derive the class SafeData from object base class.
  if ValueError or TypeError exceptions are caught,
  call the method extracted.close.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  call the method os.dup2 with 2 arguments: result of the method si.fileno and result of the method sys.stdin.fileno.
  return output.
  where '%d' is replaced with i and '%s' is replaced with subject.   increment i by one.
  for every d in reversed list self.dicts,
  call the method to_python with an argument value, from the base class of the IntegerField class, substitute the result for value.
  if value is None,
  for every format in BUILTIN_SERIALIZERS,
  call the method timezone.normalize with an argument value, substitute the result for value.
  derive the class PageNotAnInteger from the InvalidPage base class.
  derive the class WithNode from Node base class.
  yield string "#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table" as the result.
  call the self.style.MIGRATE_HEADING with string "Synchronizing apps without migrations:" as an argument,
  if flags is not None,
  if iterator is None,
  map elements of self._iterator through self.make_bytes function, return the result.
  return integer 1.
  from __future__ import unicode_literals into default name space.
  call the method f.value_from_object with an argument instance, substitute the result for qs.
  try,
  if stream_or_string is an instance of the six.string_types,
  define the method _create_alternatives with arguments self and msg.
  if mimetype is not None raise an error.
  with '%s' substituted for migration_name and app_label, respectively, as arguments.   targets is a list containing tuple with two elements, app_label and migration.name.
  define the method __enter__ with argument self.
  call the method token.split_contents, substitute the result without the first element for bits.
  call the method nodelist.get_nodes_by_type with an argument ExtendsNode, if it evaluates to true,
  otherwise if length of key equals integer 1 and type of first element of key is contained in fasttypes,
  if item is not an instance of list or tuple class,
  get the value under the 'addrport' key of the options dictionary, if it is false,
  break from the loop execution,
  call the function get_format with an argument string 'THOUSAND_SEPARATOR', substitute the result for thousand_sep.
  return result.
  do nothing.
  for every lib in builtins,
  call the method stream.unget with last rollback elements of chunk as an argument.
  call the method self.xml.startElement with an argument string 'object'.
  get value under the config_string key of the PALETTES dictionary, call the copy method on the result and substitute it for palette.
  try,
  and help is a string 'Migrations will be squashed until and including this migration.'.   call the method parser.add_argument with 5 arguments: string '--no-optimize', action as a string 'store_true',
  if status is not equal to STATUS_OK,
  try,
  call the signal.signal method with signal.SIGTTOU and signal.SIG_IGN as arguments, store the result in old_handler.
  if ch is not equal to a sring '?' or escaped is true,
  return boolean False,
  for every member in members,
  with name_str, use it as an argument to throw an CommandError exception.   if self.merge is true and conflicts is false,
  from django.utils import six into default name space.
  substitute years for self.years.
  if safe is true and arg is not equal to string ';',
  define the function sanitize_address with arguments addr and encoding.
  call the method literal_match.group with an integer 1, substitute the result for ip_address.
  substitute out for self._out.
  get the 'value' attribute of the _urlconfs, if it exists return it, otherwise return defaults.
  return nodelist.
  return new_context.
  sum results of method self.save_existing_objects called with an argument commit and of method self.save_new_objects,
  call the method self.build_attrs with 2 arguments: attrs and name set to name, substitute the result for final_attrs.
  if commit is false,
  substitute value_not_found_exception for self.LibraryValueNotFoundException.
  call the __init__ method with self and params arguments from the base class BaseCache.
  use its __file__ field as an argument for the call to the function upath, substitute the result for settingsfile.   call the function os.path.dirname with an argument settingsfile, join the result an string 'locale' into a file path,
  if self._non_form_errors is None,
  result of multiplication of integers: 60,60,24,365, and return value of ungettext_lazy with 2 arguments: '%d year', '%d years',   result of multiplication of integers: 60,60,24,30, and return value of ungettext_lazy with 2 arguments: '%d month', '%d month',   result of multiplication of integers: 60,60,24,7, and return value of ungettext_lazy with 2 arguments: '%d weeks', '%d weeks',   result of multiplication of integers: 60,60,24, and return value of ungettext_lazy with 2 arguments: '%d days', '%d days',   result of multiplication of integers: 60,60, and return value of ungettext_lazy with 2 arguments: '%d hours', '%d hours',   result of multiplication of integers: 60, and return value of ungettext_lazy with 2 arguments: '%d minutes', '%d minutes',   if d is not an instance of datetime.datetime,
  if not,
  from itertools import groupby and cycle as itertools_cycle into default name space.
  if i is greater than, or equal to the result of the call to the method self.initial_form_count,
  from django.forms.widgets import Widget and Select into default name space.
  if fname file path exists,
  define the method setdefault with 3 arguments: self, key and default set to None.
  call the method handler.file_complete with i-th element of counters as an argument, substitute the result for file_obj.
  from django.core.servers.basehttp import get_internal_wsgi_application into default name space.
  move integer 1 left for 30 bits, substitute the result for GB.
  return the value under the self.data.month key of the MONTHS dictionary.
  substitute serializers for _serializers.
  left justify string s in a field of width equal to the sum of length of s and reminder of the division of length of s by integer 4,
  dest as a string 'exclude', action as a string 'append' and help as a string 'Locales to exclude. Default is none. Can be used multiple times.'.   call the method parser.add_argument with 5 arguments: string '--domain', string '-d', default as a string 'django',
  return an empty list.
  derive the class StringOrigin form the base class Origin.
  raise NotImplementedError exception with an argument string 'Subclasses must implement this method.'.
  write the chunk to the file _file.
  from django.conf import settings into default namespace.
  if timezone has an attribute 'localize',
  derive the class ImproperlyConfigured from the Exception base class.
  derive class Command from the TemplateCommand base class.
  define the method compile_string with 2 arguments: template_string and origin.
  call the method self.full_clean.
  iterator is iterator created out of stream_or_iterable.
  if ch is not equal to string '\\'.
  call the method self.get_queryset, substitute i-th element of the result for value under the 'instance' key of kwargs dictionary.
  response_fixes is a list with  http.fix_location_header and http.conditional_content_removal as elements.
  if not,
  call the function io.open with 3 arguments: self.dirpath and thefile joined into a file path, string 'w',
  call the method self.compress with an argument clean_data, substitute the result for out.
  call the method self.get_backend_timeout with argument timeout, substitute it for expiry.
  output is an empty list.
  from django.conf import settings into default name space.
  define the function abspathu with an argument path.
  try,
  idstring is an empty string.
  return self.limit_choices_to.
  writer is an instance of MigrationWriter class, created with an argument migration.
  append '.' to frag, append the result to used.
  otherwise, if field.rel is true and field.rel is an instance of models.ManyToOneRel,
  call the method match.span, substitute the result for start an end, respectively.
  and help set to string 'Raise on exception'.   call the method parser.add_option with 5 arguments: string '--no-color', action is string 'store_true', dest is string 'no_color',
  call the method translation.get_language, substitute th result for saved_locale.
  set real_name attribute of the self object to value of real_name attribute of trans object.
  for every field, errors in self.error_dict.items method return value,
  format, if its true, otherwise string 'DATE_FORMAT' and use_l10n as use_l10n, return the result.   define the function time_format with 3 arguments: value, format set to None and use_l10n set to None.
  raise an ValueError exception with an argument string "Don't mix *args and **kwargs in call to reverse()!".
  otherwise if size is less than length of self.buffer,
  os.path.basename(prog_name) and subcommand, separated by whitespace and description set to self.help, if exists, or None, otherwise.   call the method parser.add_option with 3 arguments: string '--version', action set to string 'version',
  write string "App '%s' could not be found. Is it in INSTALLED_APPS?" with '%s' where '%s' is replaced with app_label,
  msg is an string "Unclosed tag '%s'. Looking for one of: %s ", where '%s' is replaced with command,
  'ModelChoiceField', 'ModelMultipleChoiceField', 'ALL_FIELDS', 'BaseModelFormSet', 'modelformset_factory', 'BaseInlineFormSet',   and 'inlineformset_factory'.   ALL_FIELDS is a string '__all__'.
  define the method self and name.
  define the method __init__ with 4 arguments: self, out, style, func set to None and endings set to newline character.
  self.day_none_value is a tuple containing 2 elements: integer 0 and third element of empty_label.
  string '<select multiple="multiple"{0}>' and result of the function flatatt called with an argument final_attrs.   call the method self.render_options with 2 arguments: choices and value, substitute the result for options.
  if labels is not None,
  call the method match.group with an argument integer 1, substitute the result for text.
  define the method resolve with an argument self.
  call the method self.iteritems, return list of results.
  call the method self.as_widget with 3 arguments: instance of a class TextInput, attrs and unpacked dictionary kwargs, return the result.
  from django.template.base import TemplateDoesNotExist into default name space.
  while token.contents starts with a string 'elif',
  import module os.
  reverse order of parts, join them into a string, separated with '.', substitute the result for value.
  and encoding set to string 'utf-8' as arguments, with the result renamed to fp, perform the following:   call the method fp.write with an argument content.
  define the method __init__ with 2 arguments: self and loaders.
  define the method build_potfiles with an argument self.
  called with an argument text converted into a floating point number.   if ValueError, InvalidOperation, TypeError or UnicodeEncodeError exceptions are caught,
  derive the class BlockContext from the Exception base class.
  with call to the io.open function with fname and string 'rb' as arguments, renamed to f,
  for every date_check in all_date_checks,
  raise CommandError exception with msg as argument.
  if self.localize is true,
  value is an empty string.
  do nothing.
  if s is the instance of the object six.text_type,
  write string "  Installing indexes...\n" to the standard output.
  if self.allow_empty_file and file_size are both false,
  bring integer 2 to the power of 31, subtract the result by 4, put the result into a list, append possible_sizes to it,
  define the method send_messages with arguments self and email_message.
   if field.widget.needs_multipart_form is true,
  decorator function register.filter with an argument is_safe set to boolean False.
  call the method request_finished.connect with argument update_watch.
  try,
  return None.
  define the function timeuntil_filter with 2 arguments value and arg set to None.
  define the method with reload with an argument self.
  if label_output is true,
  substitute '%s' is string 'processing file %s in %s\n' with self.file and self.dirpath, write it to command.stdout.
  if daemonize is true,
  parser.compile_filter, substitute the result for expression.   return an instance of a RegroupNode class, created with 3 arguments target, expression and var_name.
  if processors is None,
  define the function bound_func with 2 arguments: unpacked list args2 and unpacked dictionary kwargs2.
  call the method self.mapping.get with 2 arguments: self.tagtype and an empty list, return the result.
  substitute first element of renamed_method for old_method_name.
  str.__unicode__().encode('utf-8'), call the lambda function and put the result in the __str__ filed of klass.   return klass.
  call the method parser.compile_filter with an argument value, append the result to args.
  define the method d with an argument self.
  if NotImplementedError exception is caught,
  call the method imatch.group with an argument integer 2, use the result as an argument for the call to the method context_re.match,
  substitute context for self.context_data.
  instantiate QueryDict class with 2 arguments: an empty string and encoding set to self._encoding, instantiate a class MultiValueDict, return them.
  call the run_from_argv function from the base class of the Command class with argv as a argument,.
  call the cursor.close method.
  "Use django.utils.timezone.get_fixed_timezone instead." and RemovedInDjango19Warning.   if offset is an instance of timedelta class,
  trans_real._default is None.
  if NotImplementedError exception,
  raise a ValidationError exception with 2 arguments: return value of the function _ called with an argument string 'Enter a valid IPv6 address.', and code set to string 'invalid'.
  use the result as an argument for the call to the method filterer.addFilter.   if StandardError, renamed to e, exception is caught,
  define the method __iter__ with an argument self.
  append boundary to bytes string '--', substitute the result for self._separator.
  decorator function register.filter with an argument is_safe set to boolean True.
  call the function get_template with 2 arguments template_name and dirs, return the result.
  substitute SafeText for SafeUnicode.
  define the method __repr__ with an argument self.
  self.charset and self.content_type_extra.   define the method receive_data_chunk with arguments: self, raw_data and start.
  if output is true,
  try,
  decorator function wraps with an argument fdel.
  RAISE_ERROR is an instance of object class.
  return s.
  insert none_value at the beginning of the choices list.
  finally,
  call the function six.text_type with an argument arg, append the result to '%', format the previous with value, return the result.
  call the method node.get_nodes_by_type with an argument nodetype, extend nodes with it.
  substitute e and tb for v.__cause__ and v.__traceback__.
  call the method _trans.ngettext with 3 arguments singular, plural and number.
  from django import VERSION as version into default name space.
  if self.use_ipv6 is true and socket.has_ipv6 is false,
  renamed_methods is an tuple.
  call the function ugettext with an argument message.
  call the method timezone.make_naive with arguments: expires, timezone.utc, substitute the result for expires.
  get the value under the 'no_obsolete' key of the options dictionary, substitute it for self.no_obsolete.
  replace hextets list from the best_doublecolon_start index to best_doublecolon_end index with an empty string.
  for every field, messages in return value of the message.items method,
  return first element of value.
  if settings.configured is false,
  do nothing.
  import module os.
  substitute the result for base and tail_ext.   get the value under the tail_ext key of the extension_map dictionary, substitute it for cls.
  status_code is an integer 403.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  dest as a string 'no_optimize', default set to boolean False and help as a string 'Do not try to optimize the squashed operations.'.   call the method parser.add_argument with 5 arguments: string '--noinput', action set to string 'store_false',
  raise an TemplateSyntaxError exception with an argument string "Invalid arguments provided to simple_tag".
  blocks is a dictionary with elements: n for n.name, for every n in return value of the method,
  if not,
  call the method f.post_create_sql with arguments: style and model._meta.db_table, extend the output with the result.
  set class fields _request_middleware, _view_middleware, _template_response_middleware, _response_middleware and _exception_middleware to None.
  classmethod decorator,
  if email_messages is false,
  try,
  call the method httpd.serve_forever.
  if not,
  otherwise if obj is an instance of EscapeData,
  get 'dependencies' attribute of the model.natural_key, substitute it for deps, if the attribute doesnt exist, deps in an empty list.
  if InvalidOperation exception is caught,
  if value under the 'description' key of the item dictionary is not None,
  return it.   define the function itervalues with 2 arguments: d and unpacked dictionary  kw.
  skip this loop iteration.
  if not,
  for every model in model_list,
  if lengths of new_operations and operations are the same,
  append value under the 0 key of the opt_dict dictionary to code_list.
  substitute model._meta for opts.
  define the method __enter__ with an argument self.
  if self has an '_post' attribute,
  headerlist is an empty list.
  subtract length of hextet from 4, create a string with previous result number of character '0', append hextet to it,
  call the method deactivate.
  substitute force_text for force_unicode.
  ns_pattern is an empty string.
  call the method self.connection.ehlo.
  call the method self._archive.extract with an argument to_path.
  increment self.fixture_count by one.
  set the file position pointer at file_pos.
  if url starts with '///',
  RUN_RELOADER is boolean True.
  if not,
  decorator function wraps with 2 arguments: view_func and assigned set to result of the function available_attrs,
  otherwise it is boolean False.   if kwarg_format is false,
  define the method __bool__ with an argument self.
  if OverflowError or ValueError exceptions are caught,
  do nothing.
  call the method boundary with an argument string 'ascii', use the result to call to the parse_header function,
  for root, dirs and files in sorted list of the directory tree starting from the directory self.path,
  define the function ifnotequal with 2 arguments: parser and token.
  substitute i for p.
  define the method add_arguments with arguments self and parser.
  kwargs is a dictionary with boolean True for 'pk_field'.
  substitute self.source for e.django_template_source.
  filemsg is a string 'file %s, ', where '%s' is replaced with origin.
  do nothing.
  call the method value.center with an argument, arg converted into a integer, return the result.
  return result.
  call the method smart_split_re.finditer with an argument text, for every bit in result,
  MONTHS is an dictionary with 12 entries: result of the call to the function _ with an argument string 'January' for 1,
  define the method __repr__ with an argument self.
  raise an CommandError with an argument string "%r is not a valid %s name. Please %s.", were '%r' is replaced with name,
  result is an integer 0.
  from django.core.serializers import base into default name space.
  call the __init__ method from the base class of the HttpResponseNotModified class, called with arguments: unpacked list args,
  and unpacked dictionary kwargs, return the result.   call the function MovedModule with 2 arguments: strings "_dummy_thread" and "dummy_thread",
  return an empty string.
  substitute the value under the 'HTTP_HOST' key of the self.META dictionary, substitute it for host.
  call the function is_naive with an argument obj.
  call the function get_ns_resolver with arguments ns_pattern and resolver, substitute the result for resolver.
  if ValueError exception is caught,
  if data is true, substitute it for self.data, otherwise self.data is an empty dictionary.
  post is a string '<could not parse>'.
  import module os.
  from __future__ import unicode_literals into default name space.
  try,
  call the method self.replace_header with argument string 'Content-Type', 'text/%s; charset="%s"', where '%s' symbols are replaced by:
  if not,
  if callback doesnt have '__name__' attribute,
  if evaluation of the function find_command with self.program as argument equals to None,
  ext_list is an empty list,
  if threading is true,
  call the function warnings.warn with an argument string "A {% csrf_token %} was used in a template, but the context did not provide the value.  This is usually caused by not using RequestContext.".
  try,
  substitute elements of self.template_string list from upto index to the end for last_lit.
  call the method _trans.gettext with an argument message.
  cc is a dictionary populated with items by calling function _to_tuple with el as an argument,
  if settings.DEBUG is true,
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  otherwise if self.verbosity equals integer 3,
  call the method apps.get_app_config with an argument model._met.app_label, substitute path field of the result for app_dir.
  define the function urlizetrunc with 3 arguments value, limit and autoescape set to None.
  field_notes, respectively.   add field_params to extra_params dictionary.
  start is an integer 0.
  define the method pop with 3 arguments: self, key and default set to None.
  get the value under the self.data.month key of the MONTHS_3 dictionary, call on it the method title, return the result.
  define the function dec with an argument func,
  if AttributeError exception is caught,
  call the function update_wrapper with 2 arguments: wrapper and user_function, return the result.
  call the function force_text with an argument v, for every v in args, put the results in a text_args list.
  define the method enter_command with 3 arguments: self, command and token.
  if first element of data_list is contained in self.empty_values,
  return self.parent_instance.
  decorator function register.filter with an argument is_safe set to boolean True.
  if filename is not contained in _error_files,
  if count of occurrence of '.' in ip_str is equal to integer 3,
  if register_to is true,
  try,
  delete the value under the header converted to lowercase key of the self._headers dictionary.
  define the function u with an argument s.
  derive the class SimplerXMLGenerator form the XMLGenerator base class.
  try
  call the function warnings.warn with 3 arguments: string 'import_by_path() has been deprecated. Use import_string() instead.',
  raise an ValueError exception with an argument string 'Unable to configure logger %r: %s' formated with name and e.
  otherwise if ch equals a string 'P',
  do nothing
  if not,
  try,
  derive the class SsiNode from Node base class.
  self.test_runner is None.
  define the method chunks with arguments self and chunk_size defaulting to None.
  otherwise if value under the 'method' key of optins dictionary equals to string 'thread' or 'threaded',
  raise an CommandError exception with an argument string '"%s" is not a valid port number or address:port pair.',
  substitute value for field.name key of self._current dictionary.
  if ImportError exception is caught,
  if buffer_ is not None,
  call the method var.resolve with 2 arguments: context and True, substitute the result for value.
  derive the class Origin form the base class object.
  __all__ is an list containing strings: 'activate', 'deactivate', 'override', 'deactivate_all', 'get_language',
  property decorator,
  tf is an instance of TimeFormat class, created with an argument value.
  return result.
  from __future__ import unicode_literals into default name space.
  import module sys.
  substitute value under name key of logging._handlers dictionary for handler.
  return the absolute path of file path filepath, substitute it for filepath.
  from django.utils.functional import allow_lazy and SimpleLazyObject into default name space.
  derive class _LazyModule from the types.ModuleType base class.
  if self.is_bound is true and i is smaller than self.initial_form_count,
  call the add_argument method on the parser object, with string '--database', default set to DEFAULT_DB_ALIAS and help set to string 'Nominates a database to create SQL for. Defaults to the default" database.' as arguments.
  return value.
  if KeyError exception is caught,
  call the method connection.introspection.table_names, substitute the result for tables.
  from __future__ import unicode_literals into default name space.
  define the method __iter__ with an argument self.
  element of data at the index last equals to newline bytes character.
  substitute pattern._callback for callback.
  define the method __getstate__ with an argument self.
  decorator python_2_unicode_compatible,
  append list containing 4 elements: 'CVS', '.*', '*~' and '*.pyc', to ignore_patterns.
  define the method add_css with arguments self and data.
  from django.utils.module_loading import module_has_submodule into default name space.
  from django.conf import settings into default name space.
  __T is a raw string '(?P<hour>\d{2}):(?P<min>\d{2}):(?P<sec>\d{2})'.
  call the method self.reader_leaves.
  if form is contained in forms_to_delete,
  ret_ip is an empty list.
  rais an AppRegistryNotReady exception with an argument string "The translation infrastructure cannot be initialized before the "
  return None.
  from django.utils import archive into default name space.
  if http_cookies.CookieError exception is caught,
  substitute self.__offset.seconds for offset.
  if Exception exception is caught,
  call close method on a file stream.
  if PY3 filed of six is boolean True,
  if self.fail_silently is boolean False,
  call the method parser.next_token, substitute the result for endblock.
  for app_config in reversed list of apps.get_app_configs() elements,
  substitute tok.next for state.
  replace every occurrence of '\\' in tok with 'U', substitute the result for tok.
  if exception GeneratorExit is caught,
  from .registry import register, run_checks, tag_exists and Tags into default name space.
  if ValueError exception is caught,
  if not,
  from io import StringIO into default name space.
  if IOError, renamed to e, exception is caught,
  if hidden_fields is true,
  call the method mimetypes.guess_extension with an argument content_type, substitute result for ext.
  if values under the 'app_label' and 'migration_name' keys of the options dictionary are True,
  call the self.convert method with i, self.decimal_digits, self.digits and '-' as arguments, assign the result to the neg and value, respectively.
  for every cmatch in cmatches,
  in string '%s_%d', replace '%s' with new_name and '%d' with num, substitute the result for new_name.
  do nothing.
  call the method datetime.datetime with an argument unpacked dictionary kw, return the result.
  from django.conf import settings into default name space.
   is exception is caught,
  _anonymous_ is a list containing one string: '_offset_union'.
  call the function ensure_echo_on.
  call the method self._set with key, pickled and timeout as arguments.
  increment num by one.
  substitute t.lineno for comment_lineno_cache.
  if accept_lang equals '*',
  and an empty dictionary, substitute the result for httpd_cls.   if not,
  if e.connection_reset is false,
  fixture_name and result of the function humanize called with an argument fixture_dir.   extend fixture_files list with fixture_files_in_dir.
  substitute settings.TEMPLATE_STRING_IF_INVALID for current.
  define the method end_object with arguments self and obj.
  call the method signal.signal with signal.SIGTTOU and old_handler, as arguments.
  from django.utils.six.moves.urllib.parse import urljoin into default name space.
  if not,
  if new_mod is None,
  and lambda function returning x for x, substitute the firs element of resulting list for style_func.   call the function style_func with an argument msg, use the result as an argument for the call to the function force_str,
  skip this loop iteration.
  define the method has_next with an argument self.
  append string " You may need to add %r to ALLOWED_HOSTS." to msg, where '%s' is replaced with domain.
  from email.header import Header into default name space.
  define the method get_unique_error_message with 2 arguments: self and unique_check.
  and help set to a string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.   define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
  define the function popen_wrapper with 2 arguments: args and os_err_exc_type set to CommandError.
  substitute third element of url_fields for second element of url_fields.
  if format is not contained in _serializers,
  append error_class converted into a string to string 'errorlist ', substitute the result for self.error_class.
  if value under the 'load_initial_data' key of the options dictionary is true,
  under the BLOCK_CONTEXT_KEY key of render_context dictionary dictionary evaluates to be not equal to None,   call the method self.render with an argument self.context, use it as an argument for the call to the mark_safe function, return the result.
  define the method add_arguments, with 2 arguments self and parser.
  do nothing.
  return result.
  modified_code is None.
   substitute code for self.code.
  if name is not contained in logging._handlers,
  from django.core.mail.backends.base import BaseEmailBackend into default name space.
  if response has an attribute 'render' and response.render is a callable object,
  call the method token.split_contents, substitute the result for bits.
  from django.db import models and DEFAULT_DB_ALIAS into default name space.
  if transfer_encoding is not None,
  open the file whose name is stored in the value under the 'pidfile' key of options dictionary and mode 'w', with the file descriptor as fp,
  for every post_callback in self._post_render_callbacks,
  derive the class RemovedInDjango20Warning from PendingDeprecationWarning base class.
  call the method self.add_error with 2 arguments: None and errors.
  call the method formats.number_format with 2 arguments, d converted to a integer and then to string, and integer 0,
  call the method self._post.appendlist with 2 arguments: field_name and result of the function force_text called with 3 arguments:
  if self.regex is not an instance of six.string_types,
  call the function os.kill with os.getpid() and negative exit_code as arguments.
  raise CommandError exception with "More than one migration matches '%s' in app '%s'. Please be more specific.",
  import module locale.
  if UnicodeDecodeError exception is caught,
  derive the class EmailBackend from the BaseEmailBackend base class.
  try,
  if self.verbosity is greater than integer 0,
  append string ".moves.urllib_error" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for error.
  singular is an empty list.
  if KeyError exception is caught,
  import module datetime.
  from django.db import models into default name space.
  if e has an attribute 'code' and e.code is contained in self.error_messages,
  put the results into a list, substitute self.locale_paths for it.   substitute first element of self.locale_paths for self.default_locale_path.
  define the method format_subject with 2 arguments: self and subject.
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  executor is an instance of the class MigrationExecutor created with an argument: value under the DEFAULT_DB_ALIAS key of the connections dictionary.
  call the EmailMultiAlternatives function with, subject, message, from_email, recipient_list and connection set to connection, as arguments, assign the result to mail.
  context.autoescape for 'autoescape', context.autoescape for 'current_app', context.use_l10n for 'use_l10n',   and context.use_tz for 'use_tz', substitute the result for new_context.   call the function context.get with 2 argument 'csrf_token' and None, substitute the result for csrf_token.
  return the evaluated result of the mail.send method.
  yield string 'from %s import models' % self.db_module as the result, where "%s" is replaced with self.db_module.
  call the method sys.stderr.write with an argument string "  Unable to load the flup package.  In order to run django\n".
  call the function unicodedata.combining with an argument char, if it evaluates to true,
  derive the class BaseContext from the object base class.
  define the method add_error with 3 arguments: self, field and errors.
  from django.conf import settings into default name space.
  decrement self.waiting_writers by integer 1,
  raise an exception.
  return an empty list.
  obj is an instance of Node class, created with 3 arguments: children, connector and negated.
  outer_html is a string '<ul{id_attr}>{content}</ul>'.
  verbosity set to verbosity, interactive set to interactive and using set to db.   call the method models.signals.pre_syncdb.send with 6 arguments: sender set to app_config.models_module,
  and call to the method form.has_changed evaluates to false,   skip this loop iteration,
  'PROCESSING' for 102, 'OK' for 200, 'CREATED' for 201, 'ACCEPTED' for 202, 'NON-AUTHORITATIVE INFORMATION' for 203,   'NO CONTENT' for 204, 'RESET CONTENT' for 205, 'PARTIAL CONTENT' for 206, 'MULTI-STATUS' for 207, 'ALREADY REPORTED' for 208,   'IM USED' for 226, 'MULTIPLE CHOICES' for 300, 'MOVED PERMANENTLY' for 301, 'FOUND' for 302, 'SEE OTHER' for 303,   'NOT MODIFIED' for 304, 'USE PROXY' for 305, 'RESERVED' for 306, 'TEMPORARY REDIRECT' for 307, 'PERMANENT REDIRECT' for 308,   'BAD REQUEST' for 400, 'UNAUTHORIZED' for 401, 'PAYMENT REQUIRED' for 402, 'FORBIDDEN' for 403, 'NOT FOUND' for 404,   'METHOD NOT ALLOWED' for 405, 'NOT ACCEPTABLE' for 406, 'PROXY AUTHENTICATION REQUIRED' for 407, 'REQUEST TIMEOUT' for 408,   'CONFLICT' for 409, 'GONE' for 410, 'LENGTH REQUIRED' for 411, 'PRECONDITION FAILED' for 412, 'REQUEST ENTITY TOO LARGE' for 413,   'REQUEST-URI TOO LONG' for 414, 'UNSUPPORTED MEDIA TYPE' for 415, 'REQUESTED RANGE NOT SATISFIABLE' for 416,   'EXPECTATION FAILED' for 417, 'I'M A TEAPOT' for 418, 'UNPROCESSABLE ENTITY' for 422, 'LOCKED' for 423, 'FAILED DEPENDENCY' for 424,   'UPGRADE REQUIRED' for 426, 'PRECONDITION REQUIRED' for 428, 'TOO MANY REQUESTS' for 429, 'REQUEST HEADER FIELDS TOO LARGE' for 431,   'INTERNAL SERVER ERROR' for 500, 'NOT IMPLEMENTED' for 501, 'BAD GATEWAY' for 502, 'SERVICE UNAVAILABLE' for 503,   'GATEWAY TIMEOUT' for 504, 'HTTP VERSION NOT SUPPORTED' for 505, 'VARIANT ALSO NEGOTIATES' for 506, 'INSUFFICIENT STORAGE' for 507,   'LOOP DETECTED' for 508, 'NOT EXTENDED' for 510 and 'NETWORK AUTHENTICATION REQUIRED' for 511.   derive the class BadHeaderError from the ValueError base class.
  define the method writeString with 2 arguments self and encoding.
  define the method __getitem__ with 2 arguments: self and key.
  if this_bases is None,
  define the method __init__ with 6 arguments: self, name, old_mod, new_mod, old_attr set to None, new_attr set to None.
  otherwise if any other exception is caught,
  for 'invalid_date' and return value of the function _ called with an string 'Enter a valid time.', for 'invalid_time.   define the method __init__ with 3 arguments: self, input_date_formats set to None, input_time_formats set to None,
  call the method migration.ancestry.index with an argument common_ancestor, increment the result by one,
  from email.mime.message import MIMEMessage into default name space.
  define the method prepare_value with arguments: self and value.
  from .messages import CheckMessage, Debug, Info, Warning, Error, Critical, DEBUG, INFO, WARNING, ERROR and CRITICAL into default name space.
  raise an ValueError exception with an argument string "dictionary doesn't specify a version".
  and remove_tags.   from django.utils.http import urlquote into default name space.
  if app_name is an instance of BaseCommand,
  if exception LookupError is caught,
  if identity lambda function returns false, substitute the x for capfirst, if not call the function force_text with an argument x,
  if OSError exception is caught,
  self._validate_unique is boolean True.
  return the element at the index index of the tuple containing 3 elements: self.func, self.args and self.kwargs.
  if priority is false,
  define the method update with 2 arguments: self and other_dict.
  if commit is false,
  define the method update with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  call the __add__ method with an arguments rhs from the base class of the class SafeBytes, substitute the result for t.
  kwargs is a dictionary created with tuples with 2 elements: k and value under k key of config dictionary,
  raise an ImproperlyConfigured exception with an argument string "Error importing template source loader %s - can't pass arguments to
  define the function is_aware with an argument value.
  define the method __init__ with 4 arguments: self, name, nodelist, parent set to None.
  call the method test_runner.run_tests with an argument test_labels, substitute it for failures.
  flat is an empty dictionary,
  close the file self.
  self.error_class is a string 'errorlist'.
  return ZERO.
  if not,
  call the function get_quantifier with 2 arguments: ch and pattern_iter, substitute the result for count and ch, respectively.
  call the method self.get_renderer with 4 arguments: name, value, attrs and choices, call the render method on the result, return the result.
  call the method parser.invalid_block_tag with 3 arguments: endblock, 'endblock' and acceptable_endblocks.
  unpacked list field_value as an argument, substitute the result for obj.   get field.rel.field_name attribute of the object obj, substitute it for value.
  call the method prepare_value from the base class of the class ModelMultipleChoiceField, with an argument v,
  get the value under the key 'exclude' of the options dictionary, substitute it for exclude.
  for every format in self.input_formats,
  instantiate a class Group with 2 arguments: string "%%(%s)s" formated with param, and None, append it to result.
  if not,
   if terminal_char is not equal to string ')',
  call the function mark_safe with an argument result, return it.
  string "memoize wrapper is deprecated and will be removed in Django 1.9. Use django.utils.lru_cache instead.",   RemovedInDjango19Warning and stacklevel set to integer 2.   decorator function wraps with an argument func.
  call the method nodelist.render with an argument, an instance of Context class, use the result as an argument for the creation of,
  if timezone is an instance of tzinfo,
  for every name in formatters,
  return value of the value._get_pk_val method and strings_only set to boolean True.   call the function m2m_value with the argument related, for every related in itterator object generated from the attribute field.name,
  define the method W with an argument self.
  __all__ is a tuple containing strings: 'LOCK_EX', 'LOCK_SH', 'LOCK_NB', 'lock' and 'unlock'.
  open file named path in 'rb' mode, with file descriptor as f,
  if val equals an empty list.
  raise an CommandError exception with an argument string "Unknown command: %r", with '%r' replaced by name.
  call the method self.get_handler with 2 arguments unpacked list args and unpacked dictionary options, substitute the result for handler.
  perform binary or for operands: fourth element of_attr_list and termios.ECHO, store the result in fourth element of attr_list.
  call the method logging.Filter with an argument name, substitute the result for result.
  substitute it for self.allow_empty_file, if not self.allow_empty_file is boolean False.   call the method __init__ from the base class of the FileField class, with 2 arguments: unpacked list args and unpacked dictionary.
  return an empty dictionary.
  use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.   for every operation in migration.merged_operations,
  return is boolean True.
  do nothing.
  get the name of the callback, substitute it for view_name.
  define the method __repr__ with an argument self.
  if value under the 'list_tags' key of options dictionay is true,
  call the method context.push with unpacked dictionary values as an argument, with the result perform,
  call the method self.validate_key with argument key.
  define the method __dir__ with an argument self.
  convert value to lowercase and return the result.
  substitute self.fk.name for name.
  define the method __eq__ with arguments self and other.
  return plural_suffix.
  substitute template_string for self.template_string.
  if fset is not None,
  return reversed list output.
  raise an CommandError exception with an argument string "You can only use --pks option with one model".
  substitute value for self.value.
  get config dictionary element under 'loggers' key, if it exists substitute it for loggers, if not, loggers is EMPTY_DICT.
  if IndexError exception is caught,
  call the self._delete method with argument f.name.
  call the method cursor.close,
  if value.__traceback__ is not tb,
  if app equals a string 'django.core',
  _cookie_allows_colon_in_names is boolean False.
  if sent is true,
  if LookupError exception is caught,
  if parser doesnt have an '_namedCycleNodes' attribute,
  increment i-th element of result by piece.
  raise an NotImplementedError exception with argument string 'subclasses of Storage must provide an accessed_time() method'.
  define the method extend_nodelist with 4 arguments: self, nodelist, node and token.
  attrs as a dictionary with an entry: checkbox_id for 'id',   substitute the result for value under the 'clear' key of the substitutions dictionary.   format self.template_with_clear with substitutions, substitute the result for value under the 'clear_template' key of,
  for every sublist in second_item,
  from django.core.cache.backends.db import BaseDatabaseCache into default name space.
  substitute parser for self.template_parser.
  "Use BaseCommand instead, which takes no arguments by default." and RemovedInDjango20Warning.   call the __init__ method from the base class of the NoArgsCommand class.
  from django.utils import six into default name space.
  re.U and re.S, substitute the result for re_words.   call the function re.compile with 2 arguments: raw string '<.*?>|(.)' and bitwise OR performed with 2 operands,
  get the index of first occurrence of name in existing, substitute it for i.
  input_type is a string 'checkbox'.
  call the method datetime.timedelta with an argument seconds set to integer 1, increment delta by it.
  if fget is not None,
  call the method language_code_re.search with an argument lang_code, if it evaluates to false,
  define the method validate with arguments self and value.
  call the function warnings.warn with 3 arguments: string 'Using SplitDateTimeWidget with DateTimeField is deprecated. '
  raise an EntitiesForbidden exception with arguments name, value, base, sysid, pubid and notation_name.
  missing_args_message is a string "You must provide an application name.".
  define the method __iter__ with an argument self.
  if PY3 field of module six is boolean True,
  derive the class MultipleObjectsReturned from the Exception base class.
  define the method __init__ with 3 arguments: self, language and deactivate set to boolean False.
  if value under the name key of the sys.modules dictionary is not None, return boolean True, otherwise return boolean False.
  if ValueError exception is caught,
  call the method os._exit with an argument integer 1.
  mime_type is a string 'application/rss+xml; charset=utf-8'.
  from django.utils.daemonize import become_daemon into default name space.
  otherwise if msg and visible_issue_count are true,
  define the method widget_attrs with arguments self and widget.
  help is a string "Checks the entire Django project for potential problems.".
  p and errors set to string 'replace', for p in self.params.   derive the class InvalidTemplateLibrary form the base class Exception.
  call the method tag.groups, substitute the result for closing_tag, tagname and self_closing, respectively.
  if self.interactive is true,
  app set to app_config.models_module, create_models set to create_models, verbosity set to verbosity, interactive set to interactive,   and db set to db.   define the function emit_post_migrate_signal with 4 arguments: created_models, verbosity, interactive and db.
  from django.utils.datastructures import MultiValueDict and MergeDict into default name space.
  if e.errno equals errno.EEXIST,
  call the method other.__cast, substitute the result for other.
  page_range is a property object with _get_page_range as a getter method.
  substitute klass.__dict__ for next.
  return value.
  if KeyError exception is caught,
  substitute i for end_index.
  call the method m.group with an argument integer 0, substitute the result for s.
  decorator stringfilter,
  call the method data.getlist with an argument name, return the result.
  renamed is boolean True.
  define the function deactivate.
  derive the class WSGIRequestHandler from simple_server.WSGIRequestHandler and object base classes.
  substitute '%r' in string ' ngettext(%r, %r, count) ' with result of the function join_tokens, called with 2 arguments: singular,
  substitute second element of renamed_method for new_method_name.
  convert tag to lowercase, use it as the argument for the call to the method self.handle_endtag.
  from django.utils.safestring import mark_safe into default name space.
  from django.core import validators into default name space.
  if fext is a file,
  define the function salted_hmac with 3 arguments: key_salt, value and secret set to None.
  append the results into a list, substitute it for value.   node is an instance of CycleNode class, created wiht an argument values.
  append the results into a list, substitute it for value.   node is an instance CycleNode class, created with  values,name and silent set to silent.
  if character ':' is not contained in template,
  if end is an instance of unicode,
  call the function getInnerText with an argument child, use the result as an argument for the call to the method inner_text.extend.
  increment i by integer 1,.
  define the method rss_attributes with an argument self.
  call the function get_connection with 2 arguments: backend set to self.email_backend and fail_silently set to boolean True.
  from importlib import import_module into default name space.
  for every fixture_file, fixture_dir and fixture_name in return value of the method self.find_fixtures called with an argument fixture_label,
  derive the class PyLibMCCache from BaseMemcachedCache base class.
  call the function view_func with 3 arguments: request, unpacked list args, unpacked dictionary kwargs, substitute the result for response.
  import module contextlib.
  substitute _ for ret.
  join all of the results into a string separated by newline character, return the result.   define the method __str__ with an argument self.
  return result.
  define the method get_many with self class instance, keys and version defaulting to None as arguments.
  if not,
  call the method line.lstrip, if the result starts with TRANSLATOR_COMMENT_MARK,
  if use_grouping is true,
  if call to the function module_has_submodule with app_config.module and "management" evaluates to True.
  substitute settings.CACHE_MIDDLEWARE_KEY_PREFIX for key_prefix.
  where '%r' is replaced with first element of bits.   append first element of bits to 'end'. substitute the result for end_tag.
  call the method notifier.check_events with argument timeout set to None.
  call the function add_arguments with parser as an argument, from the base class of the Command class.
  call the method msgs.decode with an argument string 'utf-8', substitute the result for msgs.
  from django.utils.encoding import force_text into default name space.
  define the function gettext with an argument message.
  define the method close with an argument self.
  if call to the function response.has_header with argument 'Vary' returns boolean True,
  do nothing.
  self._is_rendered is boolean False.
  call the method self._assert_mutable.
  delete _active.value.
  if p_pattern starts with a string '^',
  substitute loaders for self._loaders.
  called with arguments: filename and pattern.   call the function ignore with an argument pattern, for every pattern in ignore_patterns,
  substitute the result for value.   substitute value for the value under the name key of the self.cleaned_data dictionary.
  import module sys.
  try,
  if offset is lesser than integer 0, sign is set to '-', otherwise sign is '+',
  substitute origin for self.origin.
  call the method to_python with an argument data from the base class of the class URLField, substitute the result for value.
  write item to zfile stream.
  call the method tarfile.open with an argument file, substitute the result for self._archive.
  value is an string '1'.
  where string '%s' is replaced by lookup_view and mod_name, respectively.   if not,
  define handle_field method with self, obj and field arguments.
  decorator function register.filter with an argument is_safe set to boolean True.
  if sender is true and sender attribute 'handles_files' is also True,
  evaluate function force_bytes with path as the argument, replace all of the occurancies of the "\\" with "/" in the resulting string,
  split first element of args by ',', convert separated elements to strings, substitute the first 2 elements of the result,
  raise ValidationError with 2 arguments: return value of the function _ called with an argument string,
  create list out of email_messages, return the length of the list.
  if not,
  compile regex from string '^[a-z_][a-z0-9_]*$' in case insensitive mode, substitute it for IDENTIFIER.
  substitute URLInput for widget.
  call the method handler.addQuickElement with 2 arguments: string 'updated' and result of the function rfc3339_date,
  from django.core.files.utils import FileProxyMixin into default name space.
  if serializers is None,
  substitute e for message.
  if instance is not None,
  substitute self.waiting_readers for t.
  return statements.
  if self.LibraryValueNotFoundException exception is caught,
  substitute name for self.name.
  call self.errors.
  must be 'as'", where '%s' is replaced with function_name.   substitute last element of bits for target_var.
  use it as an argument for the call to the force_str function, return the result.   define the method add_prefix with arguments self and prefix.
  define the method size with arguments self and name.
  if root is true,
  try,
  from django.core.checks.registry import registry into default name space.
  if options.pythonpath is true,
  call the method bit.group with an argument integer 0, yield the result.
  call the function new_method_proxy with an argument str, substitute the result for __str__.
  return printable representation of self.dicts.
  call the method handler.addQuickElement with 2 arguments: string 'uri' and value under the 'author_link' key of the item dictionary.
  convert the value under the 'SERVER_NAME' key of the self.META dictionary to a string, substitute result for server_port.
  derive the class DefusedExpatParser from the _ExpatParser base class.
  format string '&#%s;' with name, append it to self.fed.
  append string '</select>' to output.
  substitute EscapeText for EscapeUnicode.
  self.none_value is a tuple containing 2 elements: integer 0 and empty_label.
  return boolean True.
  return source and display_name.
  raise an base.SerializationError exception with argument string "Non-model object (%s) encountered during serialization",
  if AmbiguityError exception is caught,
  call the method parse from the instance of TemplateIfParser class, created with 2 arguments parser and bits, substitute the result for condition.
  call the function sanitize_address with arguments email_message.from_email and email_message.encoding, substitute the result for from_email.
  if length of list_ equals integer 1,
  call the method self.close.
  self.vals is an empty list.
  define the method render with 4 arguments: self, name, value and attrs set to None.
  RemovedInDjango19Warning and stacklevel set to integer 2.   if not,
  try,
  define the method _get_validation_exclusions with an argument self.
  if LookupError exception is caught,
  replace '%s' with: elements of last element of parts joined into a string and last element of parts.   if not,
  if not,
  return x.
  if app_labels is false,
  if self.required is boolean true,
  try,
  substitute name for self.name.
  from email.utils import formatdate into default name space.
  raise an TemplateSyntaxError exception with an argument "Could not find variable at start of %s.", replace '%s' with token.
  from django.core.management.base import BaseCommand and CommandError into default name space.
  call the method bytes_to_text with 2 arguments: default and self.encoding, substitute the result for default.
  if s is an instance of bytes class,
  call the signed_value.rsplit method with arguments self.sep and integer 1, substitute the result for value and sig, respectively.
  append key to self.keyOrder.
  subtract day_of_year from i, if the result is smaller than the result of subtraction of weekday from integer 4,
  if self has an 'error_dict' attribute,
  join app_config.path and string 'locale' into a file path, substitute it for localedir.
  'Enter a number.' for 'invalid', return value of the function ungettext_lazy called with 3 string arguments:   'Ensure that there are no more than %(max)s digit in total.', 'Ensure that there are no more than %(max)s digits in total.',   and 'max' for 'max_digits', return value of the function ungettext_lazy called with 3 string arguments:   'Ensure that there are no more than %(max)s decimal place.', 'Ensure that there are no more than %(max)s decimal places.' and 'max',   for 'max_decimal_places' and return value of the function ungettext_lazy called with 3 string arguments:   'Ensure that there are no more than %(max)s digit before the decimal point.',   'Ensure that there are no more than %(max)s digits before the decimal point.' and 'max' for 'max_whole_digits'.   define the method __init__ with 7 arguments: self, max_value set to None, min_value set to None, max_digits set to None,
  otherwise if, first element of message_context is equal to "'",
  if shell is true substitute list with element shell for available_shells, if not substitute self.shells for available_shells.
  call the method self._cache.decr with key and delta as arguments, substitute the result for val.
  if response is True,
  substitute the result for commands_dict.   for every name and app in return value of the function six.iteritems calle with return argument of function get_commands as an arugment,
  from django.http.response import REASON_PHRASES as STATUS_CODE_TEXT  # NOQA into default name space.
  flush the output buffer of the self.stdout object.
  call the function lazy with 2 arguments: _string_concat and six.text_type, substitute the result for string_concat.
  define the method __init__ with 4 arguments: self, query_string is None, mutable is boolean False and encoding set to None.
  call the method field.rel.get_related_field, substitute the result for field.
  define the method __getitem__ with 2 arguments: self and key.
  derive the class ObjectDoesNotExist from the Exception base class.
  call the method __init__ from the base class of the InMemoryUploadedFile base class, with 6 arguments: file, name, content_type,
  convert git_changeset to string, append it to the string '.dev', replace it for sub.
  derive the class IfChangedNode from Node base class.
  _dec.__name__ is a string 'method_decorator(%s)' formated with decorator.__name__.
  self.choice_cache is None.
  and help set to string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.   define the handle_app_config with 3 arguments self, app_config and unpacked dictionary options.
  if value under the 'umask' key of options dictionary is true,
  and RemovedInDjango19Warning.   call the __init__ method with unpacked list args and unpacked dictionary kwargs from the base class of the IPAddressField class.
  call the method self.validate with an argument display_num_errors set to boolean True.
  call the function open_method with arguments: fixture_file and mode, substitute the result for fixture.
  substitute complain for __delslice__.
  define the method __str__ with an argument self.
  where '%s' is replaced with name and taglib.   call the method parser.add_library with an argument temp_lib.
  call the function that is the return value of get_storage_class method, substitute the result for self._wrapped.
  define the method _reset_dicts with 2 arguments: self and value set to None.
  key for 'grouper' and val converted into a list for 'list', for every key and val in result of the function groupby,   called with 2 arguments: obj_list and lambda function with an argument obj and return value as a result of the function,   self.resolve_expression called with 2 arguments obj and context.   return an empty string,
  define the function lock with arguments f and flags.
  if '/' is contained in path, and only if '\\' is contained in path and index of the first occurrence of '/' in path is lesser than,
  if not,
  "arguments '%s' not found. %d pattern(s) tried: %s", replace '%s' with lookup_view_s, args, kwargs, length of patterns, patterns,  and respectively.   derive the class LocaleRegexURLResolver with RegexURLResolver as base class.
  derive the class EscapeData from object base class.
  call the method handler.addQuickElement with 2 arguments: string 'id' and unique_id.
  where '%s' is replaced with value under the 'addrport' key of the options dictionary.   call the method m.groups, assign the result to self.addr, _ipv4, _ipv6, _fqdn and self.port, respectively.
  remove the value under 'max_length' key from the kwargs dictionary and if the key exists substitute it for self.max_length,
  substitute number_value for kwargs dictionary value under the 'number' key.
  write it for self.stderr.   exit the program with the integer 2 as exit code.
  if character '@' is contained in addr,
  substitute ev.filename for filename.
  substitute i-th element of self.initial for value under the 'initial' key of the defaults dictionary.
  TOKEN_TEXT is integer 0
  where '%s' is replaced with self.id.   define the method display with an argument self.
  return context_extras.
  remove kwargs dictionary entry under the 'extra_context' key, if it exists substitute it for self.extra_context,
  if self.verbosity is greater than integer 1,
  substitute self.obj for model.
  call get_str_from_wsgi function with self.environ, string 'HTTP_COOKIE' and empty string as arguments, substitute it for raw_cookie.
  if verbosity is greater or equal to integer 2,
  if ImportError exception is caught,
  call the function split_domain_port with an argument host, assign the result to domain and port, respectively.
  self.getlist with an argument k, for every k in self.   return obj_dict.
  substitute self.entity_decl for parser.EntityDeclHandler.
  self.stdout.ending is None.
  define the method delete with self class instance, key and version defaulting to None as arguments.
  return an instance of Literal class, created with an argumen value.
  substitute var for self.var.
  from django.db import models and DEFAULT_DB_ALIAS into default name space.
  if self.data.hour is greater than integer 11,
  return an empty string.
  from functools import update_wrapper.
  print FASTCGI_HELP to the standard output.
  if values has an attribute '__len__',
  import module re.
  get the value under the key 'database' of the options dictionary, substitute it for db.
  call the method m.groups, use the first element of the result as key for obtaining value from d dictionary,
  if value is an instance of str type,
  if app_labels is true,
  call the function six.text_type with an argument name, return the result.
  if value is not contained in result,
  substitute self.external_entity_ref_handler for parser.ExternalEntityRefHandler.
  tok is a string '"REGEX"',
  call the encode function on the Header class instance, created with arguments nm and encoding, substitute the result for nm.
  call the function six.reraise with 3 arguments: ImportError, instance of ImportError class created with an argument msg,
  if lengths of initial and data are not the same,
  import module sys.
  call the method self.unget with list containing first remaining elements of chunk as an argument.
  try,
  for every format in settings.SERIALIZATION_MODULES,
  substitute callback for self.callback.
  unpacked list exc_info.   if self.include_html is true, call the method reporter.get_traceback_html and substitute the result for html_message,
  if etags is false,
  update default_attrs dictionary with attrs entry.
  if settings.SECURE_PROXY_SSL_HEADER is true,
  call the method settings.configure.
  kwargs is a dictionary with 17 entries: form for 'form', formfield_callback for 'formfield_callback', formset for 'formset',
  define the method _iterkeys with an argument self.
  response.streaming_content is an empty list.
  self._non_form_errors is None.
  from django.core import signing into default name space.
  define the method serialize_headers with an argument self.
  call the function _unpack_ipv4 with an argument ip_str, substitute the result for ipv4_unpacked.
  define the function fget with 3 arguments: instance, instance_type set to None and name set to fget.__name__.
  substitute opname for opfunc.__name__.
  call the method self.choice_input_class with 5 arguments: self.name, self.value, result of the method self.attrs.copy,
  call the method datetime.now, return the result.
  define the method __init__ with 2 arguments: self and dict_ set to None.
  left justify value under the 'microsecond' key of the kw dictionary, in the field of width 6, fill the rest with '0',
  return an empty string.
  from django.utils.six.moves.urllib.parse import quote, unquote, urlsplit and urlunsplit into default name space.
  timeout is a integer -1.
  call the method app_list.items, use the result as an argument for the call to the function sort_dependencies, for every model in result,
  if parser doesnt have an '_namedCycleNodes' attribute,
  if expires is not None,
  call the method msgs.decode with an argument string 'utf-8', substitute it for msgs.
  append first 49 elements of self._unget_history to list containing num_bytes, substitute the result for self._unget_history.
  call the function datetime.datetime with 3 arguments, now.year, now.month and now.day, substitute the result for now.
  want_unicode is boolean True.
  return boolean False.
  define the method handle_field with arguments self, obj and field.
  if m is true,
  position the file pointer at the beginning of self file.
  if character '-' is not contained  in lang_code,
  return response.
  call he function is_valid_ipv6_address with an argument ip_str, if it evaluates to false,
  substitute boolean False for ignore.   for every d in object_list,
  values is an empty list.
  call the method match.groups with 2 arguments: key and value.
  otherwise if length of bits equals integer 6,
  split file by ',' character, apply on its every element a lambda function which takes an argument x,
  call the function warnings.warn with 3 arguments: string "The django.forms.util module has been renamed. "
  from collections import namedtuple.
  input_type is None.
  decorator function register.filter with an argument is_safe set to boolean True.
  from django.utils import six into default name space.
  program_options is list containing string '--check-format'.
  known_models is an empty list.
  return an dictionary containing 1 entry: return value of the function timezone.get_current_timezone_name for 'TIME_ZONE'.
  get the value under the key key of the self.cookies dictionary, call the cookie_date function with an argument:
  raise an CommandError with an argument string "Cache table '%s' could not be created.\nThe error was: %s.", replace '%s' with:
  return translated.
  get the value under the 'extensions' key of the options dictionary, substitute it for extensions.
  substitute kwargs for self.kwargs.
  append string " The domain name provided is not valid according to RFC 1034/1035." to msg.
  if self.timezone is false,
  first element of bits and first element of remaining_bits.   call the method parser.parse with an argument tuple, with an element string 'endwith', substitute the result for nodelist.
  append contents to singular.
  and fileobj set to buf.   read data from buf file stream, yield the result.
  raise an VariableDoesNotExist exception with an argument string "Failed lookup for key [%s] in %r",
  otherwise, if pattern has an '_callback' attribute.
  if fh has an attribute a, for every a in WRAPPER_ASSIGNMENTS, put a into a tuple, return the resulting tuple.
  raise an ValueError exception with an argument string "Negative base36 conversion input.".
  "This will IRREVERSIBLY DESTROY all data currently in the %r database, and return each table to an empty state."   "Are you sure you want to do this?"Type 'yes' to continue, or 'no' to cancel: ", where '%s' is replaced with value under the 'NAME' key of the connection.settings_dict dictionary.   if not,
  if cword equlals a integer 1,
  if formatter is true,
  substitute name for self.name.
  if template_dirs is false,
  define function _i18n_cache_key_suffix, with request and cache_key as arguments.
  increment year by integer 2000.
  self.empty_label is None.
  return proxy.
  define the method __init__ with 5 arguments: self, display_name, loader, name and dirs.
  return result,
  if key is contained in cache,
  _itervalues is a string "values".
  if not,
  define the method __init__ with 5 arguments: self, val_expr, max_expr, max_width and asvar set to None.
  call the method filename.encode with an argument string 'utf-8', substitute the result for filename.
  where '%s' is replaced with self.__class__.__name__.   for form in self.forms append form.cleaned_data to a list, return the resulting list.
  use_l10n set to None and use_tz set to None.   substitute autoescape for self.autoescape.
  try,
  index_output is an empty list.
  call the function bytes with an argument tuple with an element i, return the result.
  call the method stream.read with an argument max_header_size, substitute the result for chunk.
  otherwise, if first and the last character of attrvalue are '\' charter  or first and last character of attrvalue are '"' character,
  return the result of the method self.errors.get called with 2 arguments: NON_FIELD_ERRORS and return value of the method,
  BUILTIN_SERIALIZERS is a dictionary containing 4 inital entries: "django.core.serializers.xml_serializer" for "xml",
  return final_output.
  call the method self.download with an argument template, substitute the result for absolute_path.
  define the method __init__ with 6 arguments: self, _subtype set to string 'mixed', boundary set to None, _subparts set to None,
  smart_text function, return the result.   if not,
  if TemplateDoesNotExist exception is caught,
  get greater value between integer 1 and result of subtraction of self.orphans from self.count, substitute it for hits.
  raise an exception.
  call the method optimizer.optimize with 2 arguments operations and migration.app_label, substitute the result for new_operations.
  define the method execute with 3 arguments: self, unpacked list args and unpacked dictionary options.
  call the method parser.add_argument with 5 arguments: string '--noinput', action set to string 'store_false',
  define the method __iter__ with an argument self.
  msg_count is an integer 0.
  call the method match.groupdict, use the result as an argument for the call to the function six.iteritems,
  define the method splitext with arguments self and the_path.
  from django.utils.safestring import SafeData, EscapeData, mark_safe and mark_for_escaping into default namespace.
  join callback.__module__, character "." and callback.__class__.__name__ together, substitute the result for lookup_str.
  if host ends with '.', remove the last element from host.
  if ret equals to integer 0, return boolean True, otherwise return boolean False.
  try,
  otherwise if name is not None and filter_func is not None,
  call the __init__ method of the base class of the class URLValidator, with unpacked dictionary kwargs as argument.
  derive the class FirstOfNode from Node base class.
  if settings.DEBUG is true,
  call the method unhandled_params.remove with an argument param.
  substitute second element of bits without the first and last element for format_string.
  call the function lazy with 2 arguments: ugettext and six.text_type, substitute ugettext_lazy.
  return the value under the is_dst key of the _time.tzname dictionary.
  WEEKDAYS is an dictionary with 7 entries: result of the call to the function _ with an argument string 'Monday' for 0,
  if base has an attribute 'base_fields'.
  from django.utils._os import safe_join into default name space.
  do nothing.
  call the function force_str with an argument: default if it is true, or if not, first element of the result of the function,
  func.is_usable in false,
  call the method parser.add_argument with 6 arguments: string '--locale', string '-l', default as an empty list,
  call the function json.loads with an argument stream_or_string, substitute the result for objects.
  call the function get_resolver.cache_clear.
  join the result in a string separated by whitespaces, substitute it for s.   return s.
  define the method add_aguments with arguments self and parser.
  skip this loop iteration.
  if ValueError, TypeError or ValidationError exception is caught,
  if not,
  call the method re.compile with 2 arguments: raw string """^(?: (?P<addr> (?P<ipv4>\d{1,3}(?:\.\d{1,3}){3}) |"""
  if not,
  while t is greater than integer 0,
  define the method __init__ with 5 arguments: self, view_name, args, kwargs and asvar.
  substitute decimals for digits.
  raise a NotImplementedError with an argument string
  __locks is an empty dictionary.
  only if member.name is not equal to string 'pax_global_header'.   call the method self.has_leading_dir with an argument list, with elements x.name for every x in members, substitute the result for leading.
  append line to lines.
  call the function mark_safe with an argument value, return the result.
  substitute tagtype for self.tagtype.
  define the method __init__ with 2 arguments: self and variables.
  if secret is None,
  return value.
  l is lambda function with argument x, that calls the method self.make_key with x and version set to version as arguments.
  call the method self.get_template_sources with 2 arguments template_name and template_dirs, for every filepath in the result,
  _iterlists is a string "iterlists".
  define the method get_template_sources with 3 arguments: self, template_name, template_dirs set to None.
  define the function gettext_noop with an argument message.
  import module hashlib.
  return result.
  call the function _explode_shorthand_ip_string with an argument ip_str, substitute the result for ip_str.
  call the function random_module.choice with an argument value, return the result.
  define the function strip_spaces_between_tags with an argument value.
  derive the class EmailMultiAlternatives from the EmailMessage base class.
  raise a ValidationError exception with arguments self.message, code set to self.code and params set to params.
  called with an argument path,   substitute path for locale_dir.
  called with an argument string ':?.!'.   call the method format_html with 3 arguments: string '{0}{1}', contents and label_suffix, substitute the result for contents.
  if not,
  raise an ValueError exception with an argument string 'Cannot resolve %r: %s', formated with s and e.
  dest as a string 'no_startup' and help as a string 'When using plain Python, ignore the PYTHONSTARTUP environment variable and ~/.pythonrc.py script.'.   call the method parser.add_argument with 5 arguments: string '-i', string '--interface', choices set to string self.shells,
  from django.utils.functional import curry and Promise into default name space.
  if content is None, raise an error.
  call the function ugettext_lazy with an argument value, return the result.
  call the __call__ method from the base class of the URLValidator class, with an argument url.
  decrement truncate_len by integer 1.
  call the method __init__ with an argument name form the base class of the class _LazyModule.
  return current.
  substitute the result for new_class.   if bases equals a tuple with an element: class BaseModelForm.
  for every node in self,
  substitute self.html_initial_name for name.
  want_unicode is boolean True.
  substitute '%r' in string ' npgettext(%r, %r, %r,count) ' with message_context, result of the function join_tokens,
  from django.utils.encoding import force_str into default name space.
  return encoding.
  define the method __init__ with 6 arguments: (self, var1, var2, nodelist_true, nodelist_false and negate.
  if options.traceback is true or e is not CommandError instance,
  where '%s' is replaced with app_label.   try,
  return ip_str.
  substitute post for self._post.
  if not,
  num_entries is length of filelist.
  return boolean False.
  define the method __hash__ with an argument self.
  substitute BOOL for UnlockFileEx.restype.
  and help set to string 'Nominates a database to synchronize. Defaults to the "default" database.'.   define the method handle with 2 arguments: self and unpacked dictionary options.
  create a tuple out of elements under the key field of the form.cleaned_data dictionary, add elements of date_data to it,
  field_params is an empty dictionary.
  call the function save_m2m.
  if self.output_transaction is true,
  if not,
  skip this loop iteration.
  for every subwidget in the result,   yield subwidget, as the result of the generator.
  if not,
  from django.utils.translation import ugettext_lazy as _ and ungettext_lazy into default name space.
  errors is an empty list.
  if ch2 equals string '?',
  from django.utils.translation import ugettext_lazy and pgettext_lazy into default name space.
  define the method _resolve with an argument self.
  try,
  resource_string is None.
  cache is an empty dictionary.
  return data.
  call the function self.func with an argument instance, substitute the result for res and value under the self.name key of the instance.__dict__ dictionary.
  if KeyboardInterrupt exception is caught,
  self.second is None.
  if not,
  try,
  substitute value for the value under the name key of the self.cleaned_data dictionary.
  try,
  find index of the occurrence of string ':_(' in p, if its greater or equal to integer 0,
  if PY3 is true,
  if IndexError exception is caugh,
  substitute it for basedir.   if basedir is not a directory,
  substitute self for block.
  try,
  call the method self.common_logger_config with 3 arguments: logger, config and incremental.
  from unittest import import everything.
  if field.help_text is true, substitute field.help_text for self.help_text, if not self.help_text is an empty string.
  sort value with key set to filed resolve of instance of a class Variable, created with an argument arg, return the result.
  try,
  _format_modules_cache is an empty dictionary.
  define the method _cull with argument self.
  if entry is a directory,
  if not,
  if number is lesser than integer 1,
  if boundary is an instance of six.text_type class,
  if ImportError, AttributeError, renamed to e, exceptions are caught,
  substitute length for truncate_len.
  define the method check_migrations with an argument self.
  call the method operations.extend with an argument smigration.operations.
  if content is empty, substitute it for an empty string.
  call the method s.feed with an argument value.
  path is an list containing path.
  substitute serialize for __str__.
  call the settings.INSTALLED_APPS.
  define the function get_text_list with 2 arguments: list_ and last_word set to result of the function ugettext_lazy called with an argument string 'or'.
  output is a list containing an entry: result of the function format_html called with 2 arguments:
  call the function thread.start_new_thread with main_func and args as arguments.
  define the method add_arguments with arguments self and parser.
  define the method add_arguments with arguments self and parser.
  match the rawdata from the position k, with attrfind pattern, assign the result to the m.
  substitute negated for self.negated.
  if shutdown_message is true,
  handler is an instance of SimplerXMLGenerator class, created with 2 arguments: outfile and encoding.
  call the function timedelta with an argument minutes set to offset, substitute the result for self.__offset.
  if exit_code is lesser than integer 0,
  define the function prepend_token with 2 arguments: self and token.
  call the method self.render, return the result.
  and help set to string 'One or more application label.'.   define the method handle with 3 arguments: self, unpacked list app_labels and unpacked dictionary options.
  if fifth element of row is not None, substitute it for value under the 'max_digits' key of the field_params,
  substitute item for value under the first element of self.loopvars key of the context dictionary.
  call the method parser.add_argument with 5 arguments: string '--noinput', action set to string 'store_false',
  for every x in sequence of integer from integer 0 to length of data, append an empty string to a list, substitute the resulting list for initial.
  call the method self.split_leading_dir with an argument path, assign the result to prefix and rest, respectively.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  return boolean True.
  call the method self._start_relational_field with an argument field.
  from unittest2 import everything.
  substitute self.input_type for self.input_type.   call the method __init__ from the base class of the class TextInput, called with an argument attrs.
  define the method appendlist with 3 arguments: self, key and value.
  call the function logging_config_func with an argument DEFAULT_LOGGING.
  define the function receive_data_chunk with arguments self, raw_data and start.
  call the method match.group with an argument integer 0, return the result.
  for every obj in result of the call to the method self.queryset.all,
  if not,
  for every e in etags call the method e.encode with an argument string 'ascii', call the method decode on the result with an argument,
  call the force_text function with 3 arguments: e.strerror, DEFAULT_LOCALE_ENCODING and strings_only set to boolean True.
  define the function ugettext with an argument message.
  define the method __new__ with 4 arguments: cls, name, this_bases and d.
  try,
  call the method self.reset.
  use global variable invalid_var_format_string.
  call the method parser.delete_first_token.
  match regex date_re with value, substitute the result for match.
  return lang_code.
  delete dictionary item 'public' from cc.
  for every fname in filelist,
  derive the class Command from the BaseCommand class.
  seen_data is an empty set.
  substitute prefix for _prefixes.values.
  for every arg in s, call the function force_text with arg, encoding, strings_only and errors as arguments,
  raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.
  from django.template.base import Node, NodeList, Template, Context, Library, TemplateSyntaxError, VariableDoesNotExist,
  otherwise if call to the method finder.find_module with an argument name evaluates to true,
  call the function os.path.abspath with an argument 'locale', append the result to self.locale_paths.
  if resolved_path is true,
  format value into printable data representation with formating rules arg, return the result.
  if v is an instance of list or tuple type,
  call the method warnings.warn with string '"validate" has been deprecated in favor of "check".' and RemovedInDjango19Warning as arguments.
  from django.utils import six into default name space.
  define the method __init__ with arguments self, input_formats set to None, unpacked list args and unpacked dictionary kwargs.
  if not,
  return s.
  app_configs is a list containing app_config.
  call the method context_instance.push with an argument dictionary, with the result perform,
  call the method self.__dict__.copy, substitute the result for obj_dict.
  return value.
  from django.conf import settings into default name space.
  if e.errno equals to errno.EEXIST,
  otherwise if query has an attribute 'items',
  derive the class URLInput from the TextInput base class.
  decorator cached_property.
  derive the class AssignmentNode form the base class TagHelperNode.
  define the functionbase36_to_int with an argument s.
  import module os.
  call the function timezone.make_naive with 2 arguments value, current_timezone, return the result.
  call the function get_commands, substitute it for commands.
  if self.connection is false,
  if ValueError or TypeError exceptions are caught,
  for every index in range of integers from 0 to length of hextets, not included,
  if e doesnt have an 'django_template_source' attribute,
  sort elements of list existing.
  and unpacked dictionary kwargs.   define the method clean with 2 arguments: self and value.
  substitute Rss201rev2Feed for DefaultFeed.
  call the function is_ignored, with arguments: file_path and self.ignore_patterns, if it evaluates to true,
  replace '%(size)d with bytes, substitute the result for value.   otherwise if bytes is smaller than MB,
  derive the class DefusedXmlException from the ValueError base class.
  make a directory migrations_directory.
  otherwise if self._meta.fields is true and field is not contained in self._meta.fields,
  find position of '-' in the index of the language, substitute the result for p.
  substitute message for self.message.
  call the sio.readline method, substitute the result for line.
  return an empty string.
  __all__ is a list containing a string "runfastcgi".
  if template has an attribute 'render',
  get the value under the 'hide_empty' key of the options dictionary, if the key exists substitute it for self.hide_empty,
  if not,
  and i is greater than or equal to self.min_num,   value under the 'empty_permitted' key of the defaults dictionary is boolean True.
  format_html called with 3 arguments: string '<link href="{0}" type="text/css" media="{1}" rel="stylesheet" />',   return value of the function self.absolute_path called with an argument path and medium,   for every medium in media and for every path in value under the medium key of the self._css dictionary.   define the method absolute_path with 3 arguments self, path and prefix set to None.
  if encoding does not exists substitute it for settings.DEFAULT_CHARSET.
  target_app_labels_only is boolean True.
  if message is an instance of ValidationError class and message.code is contained in error_messages,
  import dummy_threading as threading.
  derive the class Command from the BaseCommand class.
  use_tls set to None, fail_silently set to False, use_ssl set to None, timeout set to None and unpacked dictionary kwargs.   call the __init__ method from the base class of the EmailBackend class with argument fail_silently set to fail_silently.
  call the method self.attach with arguments filename, content and mimetype.
  define the method __bool__ with argument self.
  call the self._lock.writer method, with the result perform the following,
  import module shutil.
  derive the class EscapeBytes from bytes and EscapeData base classes.
  return an instance of RequestContext class, created with 3 arguments: self._request, context and current_app set to self._current_app.
  if self.data.minute equals integer 0,
  if self.current_token is not EndToken,
  import module sys.
  remove the first element of value under the name key of self.blocks dictionary, return it.
  models is a string 'models'
  for every o in opts.   for every val in value,
  if instance is None,
  return self.file.closed.
  from django.utils.deprecation import RemovedInDjango20Warning into default name space.
  define the method save with arguments self, name and content.
  define the method get_limit_choices_to with arguments self.
  substitute False for self.close_called.
  call the _caches.setdefault method with name and empty dictionary as arguments, substitute the result for self_cache.
  try,
  raise an BadHeaderError exception  with argument string "Header values can't contain newlines (got %r for header %r)",
  if self.base_url is None,
  increment stats dictionary value under the MISSES key by integer 1.
  for every node in nodelist,
  define the method is_url with arguments self and template.
  yield the result.   if ImportError exception is caught,
  try,
  if self.verbosity is greater or equal to integer 2,
  derive the AppCommand class from the BaseCommand base class.
  return result.
  replace every occurrence of '\n' in s with '\\n'.
  if not,
  substitute logging.root for root.
  call the method self.next_token, substitute the result for token.
  return list with an element first_item, and boolean True.
  if k is contained in seen,
  raise an UnrecognizedArchiveFormat exception with an argument string "Path not a recognized archive format: %s",
  if value is contained in self.empty_values,
  if not,
  call the method node.hasAttribute with string 'pk' as an argument, if it evaluates to true,
  substitute field.queryset for self.queryset.
  join dirpath and filename into a path separated by '/', append it to new_filenames.
  define the method render with 4 arguments: self, name, value and attrs set to None.
  call the method connection.close,
  call the method create_token from the base class of the class DebugLexer, with 2 arguments: template_string and in_tag,
  define the method delete_first_token with an argument self.
  return lookup_view.
  if characters '\n' or '\r' are contained in val,
  register.tag decorator,
  from .. import Warning, register and Tags into default name space.
  call the method self.as_tuple with an argument value under 'address' key of config dictionary,
  append name to 'add_' use it as the name of the attribute to get from combined object , call the result with an argument:
  substitute DjangoJSONEncoder for DateTimeAwareJSONEncoder.
  sum value and arg, return the result.
  define the method __reduce__ with an argument self.
  with all occurrences of '%s' replaced with app_name and model._meta.object_name, respectively.   if self.verbosity is greater or equal to integer 1,
  for every key in sorted list of user_settings,
  call the mail.attach_alternative method with html_message and string 'text/html' as arguments.
  if ch is contained in string '*?+',
  import module json.
  append list containing string '--no-wrap' to self.msgattrib_options.
  call the method self.enter_command with 2 arguments command and token.
  define the method __repr__ with an argument self.
  break the execution of the smallest enclosing loop.
  call the method dict.__setitem__ with 3 arguments: result, result of the function copy.deepcopy, called with 2 arguments: key,
  define the method __repr__ with an argument self.
  define the method _get_image_dimensions with self class instance as the argument.
  raise an ValueError exception with an argument string "Base36 input too large".
  convert base to lowercase, if it ends with string '.tar',
  from django.utils.encoding import python_2_unicode_compatible into default name space.
  substitute error_class for self.error_class.
  if ValueError exception is caught,
  raise an CommandError with an argument string "AppCommand cannot handle app '%s' in legacy mode because it doesn't have a models module.", where '%s' is replaced by app_config.label.
  define the method create_parser with 3 arguments: self, prog_name and subcommand.
  substitute the last element of parts for cmp_fmt.
  call the function _ with an argument string 'AM', return the result.
  if app_name is an instance of BaseCommands.
  self.cookies is an instance of SimpleCookie class created with self.cookies as an argument.
  call the function settings.is_overridden with argument string 'TEMPLATE_LOADERS', if it evaluates to boolean True,
  COMMENT_TAG_START is a string '{#'.
  for every name in self.fields,
  define the method __init__ with arguments self and attrs set to None.
  call the method types.MethodType with 3 arguments: func, obj and obj.__class__, return the result.
  define the method _new_instance with 4 arguments: (cls, children set to None, connector set to None and negated set to boolean False.
  get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.
  define the function valid_ident with an argument s.
  call the method parser.add_argument with 2 arguments: string '--template' and help set to string 'The path or URL to load the template from.'.
  define the method _list_cache_files with argument self.
  evaluate the boolean expression, if first three characters of sample equals to string of bytes '\xef\xbb\xbf\',
  call the method logging.captureWarnings with an argument boolean True.
  from __future__ import unicode_literals into default name space.
  from django.conf import settings into default name space.
  from .. import Warning, register and Tags into default name space.
  if content_length is lesser than integer 0,
  from django.db import connections, router, transaction, DEFAULT_DB_ALIAS, IntegrityError and DatabaseError into default name space.
  call the function parse_http_date with an argument date, return the result.
  try,
  self._leftover is an empty string.
  substitute initial for initial_value, if initial is not None, if not, initial_value is an empty string.
  substitute self.toks for toks.
  call the function six.reraise with 3 arguments: ValueError, instance of a class ValueError, created with an argument string,
  if target is None,
  for every form in self.extra_forms,
  try,
  fixture_files is an empty list.
  if ZeroDivisionError exception is caught,
  define the method setdefault with 3 arguments: self, key and default.
  try,
  code set to string 'max_digits' and params set to a dictionary with an entry: self.max_digits for 'max'.   if self.decimal_places is not None and decimals is grater than self.decimal_places:
  if language is contained in _DJANGO_DEPRECATED_LOCALES,
  substitute _iteritems for iteritems.
  where '%s' is replaced with filter_name.   call the method parser.parse with an argument tuple with an element string 'endfilter', substitute the result for nodelist.
  read file fp, call the method decode on the result with an argument settings.FILE_CHARSET, return tuple containing 2 elements,
  months is a tuple with 12 elements: strings 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov' and 'Dec'.
  define the function find_commands with an argument management_dir.
  call the method six.iteritems with an argument base.base_fields, convert it to a list and append fields to it, substitute the result for fields.
  insert mw_instance.process_template_response at the beginning of self._template_response_middleware.
  from django.core.management.base import BaseCommand into default name space.
  define the method close with an argument self.
  call the method self.__deepcopy__ with an empty dictionary as an argument.
  return self._post.
  substitute the result for offset_mins, otherwise offset_mins is integer 0.   convert elements of tzinfo from indexes 1 to 3 to an integer, multiply it by integer 60 and increment it by offset_mins,
  if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
  return the string '<Page %s of %s>', with occurrences of '%s' replaced by self.number and self.paginator.num_pages, respectively.
  call the function copy with an argument base class of the class BaseContext, substitute the result for duplicate.
  from django.utils.timezone import get_current_timezone_name to the default name space.
  call the function sys.exit with an integer 1 as an argument.
  from io import BytesIO into default name space.
  define the function debug with an argument request.
  get the value under the e.errno key of the ERRORS dictionary, substitute it for error_text.
  substitute paginator for self.paginator.
  substitute iter for iterbytes.
  call the method self.as_tuple with an argument value under 'mailhost' key of config dictionary,
  try,
  from django.utils.module_loading import module_has_submodule into default name space.
  self.bad_cookies is an empty set.
  raise a ValidationError exception with arguments self.message and code set to self.code.
  define the method __getitem__ with 2 arguments: self and idx.
  call the os.path.split with argument name, assign the result to the dir_name and file_name respectively.
  while self.tokens is true,
  call the method clean with an argument data from the base class of the class FileField, return the result.
  substitute c_ulong for ULONG_PTR.
  call the method extend with an argument error_list on the return value of the method error_dict.setdefault called with 2 arguments: NON_FIELD_ERRORS and an empty list.
  define the method __repr__ with an argument self.
  from django.utils.html import format_html into default name space.
  add string '%s.templatetags' to a list, where '%s' is replaced with app_config.name,
  return plural.
  if files is true, substitute it for self.files, if not self.files is an empty dictionary.
  if AmbiguityError exception is caught,
  use_null_fallback is boolean False.
  property decorator,
  convert self.changed_data into boolean, return it.
  if inverse_match is not None,
  find the first, second and third subgroup of the m regular expression match, assign the result to the attrname, rest and attrvalue, respectively.
  substitute self.rendered_content for self.content.
  default_validators is an list containing validators.validate_ipv4_address.
  join hidden_fields elements into a string, without separation, substitute the result for str_hidden.
  append '/' to prefix.
  if not,
  raise an exception.
  if not,
  convert newline character to unicode and substitute the result for newline.
  define the method run_from_argv with arguments self and argv.
  get value under the 'propagate' key of the config dictioanry, if it exists substitute it for propagate, if not propagate is None.
  import module warnings.
  return url.
  define the function set_script_prefix with an argument prefix.
  define the method render with 2 arguments: self and context.
  self.waiting_writers is an integer 0.
  from __future__ import unicode_literals into default name space.
  total_ordering decorator,
  substitute the result for the value under the 'year' key of the html dictionary.   call the function six.iteritems with an argument self.months, convert the result to a list and substitute it for choices.
  derive the class MultiPartParserError from the Exception base class.
  call the method setlistdefault from the base class of the class QueryDict, with arguments key and default_list, return the result.
  from .base import CommandError into default name space.
  derive the InMemoryUploadedFile class from the UploadedFile base class.
  if second_item is an empty list,
  call the method self.end_object with an argument obj.
  call the method self.xml.startElement with arguments string 'natural' and an empty dictionary.
  for every attr in _urllib_parse_moved_attributes,
  join elements of output into a string, return the result.
  if f.editable is true and f is an instance of models.AutoField, or f.name is not contained in cleaned_data,
  from django.conf import settings into default name space.
  call the function tempfile.mkdtemp with arguments: prefix set to prefix and suffix  set to string '_download'.
  create directories from the elements in filename.
  do nothing.
  from django.utils.text import get_valid_filename into default name space.
  self.nodelist_empty is an instance of NodeList class.
  call the method match.group with an arugument name, substitute the result for toktext.
  if errors is True,
  substitute the value under the entry key of the sys.path_importer_cache dictionary for finder.
  call the function endtag_re.sub with 2 arguments: an empty string and html, substitute the result for html.
  compile the regex "^https?://" with an argument re.I, substitute it for absolute_http_url_re.
  extra for 'extra', can_delete for 'can_delete', can_order for 'can_order', fields for 'fields', exclude for 'exclude',   min_num for 'min_num', max_num for 'max_num', widgets for 'widgets', validate_min for 'validate_min',   validate_max for 'validate_max', localized_fields for 'localized_fields', labels for 'labels', help_texts for 'help_texts',   and error_messages for 'error_messages'.   call the function modelformset_factory with 2 arguments: model and unpacked dictionary kwargs, substitute the result for FormSet.
  do nothing.
  if use_base_manager is true,
  substitute sysid for self.sysid.
  call the method regex.match with an argument date, substitute the result for m.
  if arg is None,
  if ValueError exception is caught,
  return value.pk.
  call the method datetime_safe.new_datetime with an argument value, substitute the result for value.
  append form to self.saved_forms.
  call the method initial_form_count from the base class of the class BaseInlineFormSet, return the result.
  if answer equals a string 'y',
  call the function safe_join with 2 arguments template_dir and template_name, yield the result.
  raise an NotImplementedError exception with an argument string 'may be implemented in a future release'.
  call the method __setitem__ from the base class of the class MultiValueDict, with 2 arguments key and list_.
  if i is contained in relations, is_relation is boolean True, otherwise is_relation is boolean False.
  return the content field of the base class of the class SimpleTemplateResponse.
  if length bits is smaller than intger 4,
  from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.
  if all_issues is true,
  if status is not equal to STATUS_OK,
  return FASTCGI_HELP.
  call the function get_format with an argument string 'DATE_FORMAT', substitute it for fmt.
  substitute cwords element at the cword decremented by 1 index for curr.
  call the method boundary.encode with an argument string 'ascii', substitute the result for boundary.
  call the method mail.outbox.extend with messages.
  define the method split_leading_dir with 2 arguments self and path.
  if not,
  call the method parser.delete_first_token.
  call the method connection.ops.start_transaction_sql, use the result as an argument for the call to the method self.style.SQL_KEYWORD,
  get the value under the 'content-type' key of the info dictionary, substitute it for content_type.
  if test_runner_class has an 'option_list' attribute,
  substitute _itervalues for values.
  define the function wrapper with an argument cls.
  if not,
  define the method decr with self, key, delta defaulting to integer 1 and version defaulting to None as arguments.
  derive the class MIMEMixin.
  call the method Module_six_moves_urllib_request with an argument: string ".moves.urllib.error" appended to __name__,
  substitute __setitem__ filed of the base class of the class SortedDict for super_set.
  nodelist_empty is None.
  substitute file for filename.
  changed is boolean True.
  call the function exhaust with an argument self._input_data.
  call the method parser.add_option with 2 arguments: string '--pythonpath' and help set to a string 'A directory to add to the Python  path, e.g. "/home/djangoprojects/myproject".'
  from math import ceil into default name space.
  define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwds.
  substitute _iterkeys for iterkeys.
  add self.form.error_css_class to extra_classes set.
  if prefix is None,
  property decorator,
  if VariableDoesNotExist exception is caught,
  raise an TemplateSyntaxError exception with an argument string "'for' statements should have at least four words: %s",
  if not,
  message, code as a string 'ambiguous_timezone' and params as params,   and third element of the return value of the function sys.exc_info.   return value.
  call the function render_value_in_context with 2 arguments: value and context, return the result.
  warn_msg is a string "The translator-targeted comment '%s' (%sline %d) was ignored, because it wasn't the last item on the line.",
  define the function new_date with an argument d.
  return instance.
  call the method base64.urlsafe_b64decode with sum of s and pad as argument.
  if message is an instance of SafeData.
  call the function transaction.atomic, with using set to db.alias as the argument, return value is a function which is called,
  help is a string "Prints the CREATE TABLE SQL statements for the given app name(s).".
  bitwise shift integer 1 to the left by 31 spaces, return the result.
  call the function _add_doc with 2 arguments: reraise and string """Reraise an exception.""".
  from django.utils.six.moves import reduce into default name space.
  define the method get_resolved_arguments with 2 arguments: self and context.
  derive the class OrderedSet from the object base class.
  call the BaseConverter function with BASE62_ALPHABET as argument, store the result in base62.
  for every name in pattern.reverse_dict,
  define the function pbkdf2 with 5 arguments: password, salt, iterations, dklen set to integer 0 and digest set to None.
  substitute DEFAULT_DB_ALIAS for db.   remove the value under the 'ignorenonexistent' key from the options dictionary, assign it to the ignore, if the entry doesnt exists,
  substitute length of existing for num_existing.
  raise an ValueError exception.
  substitute result for self.find_template_cache dictionary value under the key key.
  visible_issue_count is an integer 0.
  call the method self.to_python with an argument value, substitute it for value.
  if _file is None,
  from django.forms.forms import everything into default name space.
  append pattern into a list patterns, for every possibility, pattern and defaults in possibilities.
  tuple with 2 elements: '[' and ']', tuple with 2 elements: '&lt' and '&gt', tuple with 2 elements: '"' and '"',   and tuple with 2 elements: '\'' and '\''.   DOTS is a list with 6 elements: strings '&middot;', '*', '\u2022', '&#149;', '&bull;' and '&#8226;'.
  assign path_info to the value under the 'PATH_INFO' key of the self.META dictionary.
  substitute str for string_types.
  if number equals integer 1,
  return modules.s
  call the function os.spawnve with os.P_WAIT, sys.executable, args and new_environ as arguments, substitute the result for exit_code.
  call the method pulldom.parse with arguments: self.stream and return value of the method self._make_parser,
  if template_dirs is true,
  requires_system_checks is boolean False.
  if self.encoding exists substitute it for encoding, if not substitute settings.DEFAULT_CHARSET for encoding.
  substitute complain for reverse.
  for every form in self call the form.as_table method, join the results in a string, separated by an empty string.
  append name to exclude.
  call the method hmac.new with 3 arguments: key, msg set to result of the function force_bytes with an argument value,
  'ManagementForm data is missing or has been tampered with' and code as a string 'missing_management_form'.   if not,
  if not,
  if app_config.models_module is None,
  define function learn_cache_key with request, response, cache_timeout set to None, key_prefix set to None, cache set to None as arguments.
  call the method archive.extract with arguments: filename and tempdir.
  import module logging.
  define the method __init__ with 3 arguments: self, msg and params set to an empty tuple.
  substitute old_mod for self.mod.
  for every tag in open_tags,
  opts.localized_fields, opts.labels, opts.help_texts and opts.error_messages, substitute the result for fields.   for every k and v in return value of the function six.iteritems called with an argument fields, if n is false, append it to a list,
  from django.core.exceptions import ImproperlyConfigured into default name space.
  derive the class HttpResponseForbidden from the HttpResponse base class.
  property decorator,
  if m is false and p is lesser than integer 0,
  if not, content_type is an empty string and content_type_extra is an empty dictionary.   strip the content_type of the whitespaces, substitute it for content_type.
  if logging_settings is true,
  call the method value.date, return the result.
  if content_type is false,
  call the method self.write_po_file with 2 arguments: potfile and locale.
  call the method self.resolve_context with an argument self.context_data, substitute the result for context.
  return the result.   define the method id_for_label with 2 arguments: self and id_.
  call the function starttag_re.sub with 2 arguments: an empty string and html, substitute the result for html.
  substitute is_reversed for self.is_reversed.
  call the traceback.print_exc method.
  if root is true,
  define the method __getitem__ with 2 arguments: self and key.
  and token.   otherwise if token.token_type equals integer 1,
  if not,
  substitute _moved_attributes for _MovedItems._moved_attributes.
  evaluate the binary expression with 4 operands: os.O_WRONLY, binary or os.O_CREATE, binary or 'O_BINARY' attribute of object os,
  if max_length is not None,
  call the method bmatch.group with an argument integer 1, use the result as an argument for the call to the function context_re.match,
  if KeyError and TypeError exceptions are caught,
  if end_index is None and s_len is greater than truncate_len,
  call the method copy.deepcopy with 2 arguments: self._wrapped and memo, return the result.
  and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than other or self is equal to other,   tuple with 2 elements: string '__le__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is lesser than other or self is equal to other,   tuple with 2 elements: string '__ge__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than other, for '__lt__',   list with 3 tuples: tuple with 2 elements: string '__ge__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than or equal to other,   or self is equal to other, tuple with 2 elements: string '__lt__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is lesser than or equal to other,   or self is not equal to other, tuple with 2 elements: string '__gt__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than or equal to other, for '__le__',   list with 3 tuples: tuple with 2 elements: string '__lt__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than other or self is equal to other,   tuple with 2 elements: string '__ge__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is greater than other or self is equal to other,   tuple with 2 elements: string '__le__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than other, for '__gt__',   and list with 3 tuples: tuple with 2 elements: string '__le__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is not greater than or is not equal to other,   or self is equal to other, tuple with 2 elements: string '__gt__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is greater than or not equal to other,   or self is not equal to other, tuple with 2 elements: string '__lt__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than or equal to other, for '__ge__',   convert cls to a dictionary, convert the result into a set and convert convert into a set, roots is a set of differences of the two previous sets.
  join dirpath and dirname into a file path, use is as an argument for the call to the function os.path.join,
  do nothing.
  split locale by '_', append the first element of the result to locales.
  if not,
  append string "PRIMARY KEY" to field_output.
  value under the ORDERING_FIELD_NAME key of the form.fields is an instance of IntegerField class, created with 2 arguments:
  close file descriptor s.
  if length of args is greater than 4.
  if six.PY3 is true,
  call the method find_indentation with an argument node, append the result to newline, substitute the result for klass.prefix.
  call the function re.compile with arguments regex and re.UNICODE, substitute the result for compiled_regex.
  msg is an string "django.utils.text.javascript_quote() is deprecated. Use django.utils.html.escapejs() instead.".
  get config dictionary element under 'root' key, if it exists substitute it for root, if not, root is None.
  if form has an attribute 'Meta',
  if connection exists dont change it, if not call the get_connection function with username set to auth_user,
  from django.utils import six into default name space.
  call the method self.__bytes_cast, return the result.
  if autoescape is true and value is not an instance of SafeData, autoescape is boolean True, otherwise it is boolean False.
  if plan is true,
  if data is bound to the same object as FILE_INPUT_CONTRADICTION,
  if path is not contained in self._js,
  define the method reset with an argument self.
  return an empty string.
  append tok to c.
  if size is not empty,
  try,
  return value.
  from django.db import connections,  router,  transaction and DEFAULT_DB_ALIAS into default name space.
  call the function io.open with 3 arguments: work_file, string 'w' and encoding set to string 'utf-8' as arguments,
  self.message_context is None.
  return string 'rd'.
  if LookupError exception is caught,
  substitute charset for self.charset.
  call the method handler.startElement with 2 arguments: string 'author' and an empty dictionary.
  return path_info.decode method return value called with UTF_8 as the argument.
  call the method prepare_value from the base class of the class ModelChoiceField, with an argument value, return the result.
  if OSError, renamed to e, exception is caught,
  if field_name is false,
  derive the class Atom1Feed from the SyndicationFeed base class.
  substitute connection_reset for self.connection_reset.
  where '%s' is replaced with library_name and elements of tried_modules joined into a string, separated by ','.   return lib.
  return an instance of SafeBytes, created with an argument t.
  if key is not contained in self,
  __D is a raw string '(?P<day>\d{2})'.
  if count of occurrence of ':' in ip_str is greater than integer 7,
  return nothing.
  call the function re.compile with an argument raw string '\S', substitute it for dot_re.
  call the value.split method with '://' as argument, convert first element of the result to lower case, substitute the result for scheme.
  if not,
  call the function make_origin with 4 arguments: display_name, loader, name and dirs, return a tuple containing 2 elements:
  module_values is a set created from the elements of sys.modules.values method return value.
  new_value is a sum of value and delta.
  from xml.sax.saxutils import XMLGenerator into default name space.
  if vary_on is None,
  skip this loop iteration,
  define the method __getitem__ with arguments self and index.
  if truncate is None,
  call the method self.setlistdefault with an argument key, append value to the result.
  for eery app_config in app_configs,
  if not,
  nonlocal_root is an list with an element root.
  is_usable is boolean False.
  inplural is boolean False.
  call the method self.fetch_command with an argument command, call the method run_from_argv on the result with an argument self.argv.
  if ',' is not contained in arg,
  derive the class File from the FileProxyMixin base class.
  self.active_writers is an integer 0.
  default_validators is an list containing validators.validate_slug.
  derive the class SlugField from the base class CharField class.
  if field.rel.to._default_manager has an attribute 'get_by_natural_key',
  define the method url with arguments self and name.
  substitute path_info for self.path_info.
  "project name in the current directory or optionally in the given directory.".   missing_args_message is a string "You must provide a project name.".
  if sum of the top and self.orphans is greater or equal to self.count,
  derive the class NonCapture from list base class.
  join inner_text elements into a string.
  define the method configure_root with 3 arguments: self, config and incremental set to boolean False.
  for every val in value call the function smart_text with an argument val, return the results in a lit.
  if string ':::' is contained in ip_str,
  return commands.
  substitute _itervalues for values.
  if not,
  define the method __init__ with 5 arguments: self, protocol set to string 'both', unpack_ipv4 set to boolean False,
  return instance.
  define the method __init__ with 3 arguments: self, schemes set to None and unpacked dictionary kwargs.
  otherwise if ch equals a string ':',
  get the position of the file self.file pointer, substitute it for size.
  try,
  from __future__ import unicode_literals into default name space.
  if not,
  where '%s' is replaced with app_or_project and extensions joined into a string, separated by a string ', '.   call the method self.stdout.write, with an argument string "Rendering %s template files with filenames: %s\n",
  where '%s' is replaced with self.prog_name, an empty string and string "Available subcommands:".   call the method collections.defaultdict with a argument: lambda function without arguments that returns an empty list,
  replace '%s' in the string 'handler%s' with view_type, use it as an name of the attribute to get from the urls, substitute it for callback.
  called with an argument option_value, append the result to output.   for every option in option_label,
  call the method parser.add_argument with an argument string '--pythonpath'.
  if f is None,
  substitute str for text_type.
  return boolean False.
  for f in file_list,
  decorator function lru_cache.lru_cache with an argument maxsize set to integer 1000.
  table2model with an argument table_name.   call the function table2model with an argument table_name, append the result to known_models.
  if not, substitute self.field.initial for data.   if data is an callable object,
  define the function check_1_6_compatibility with argument kwargs dictionary.
  or opts.auto_created is True and return value of converter function with opts.auto_created._meta.db_table is contained in tables,   invert the evaluated expression and return it.   manifest is OrderDict class instance, created with tuple of two elements, app_name and list of elements of model_list for which model_installed function returned true, for every app_name and model_list in all_modules.
  if header list is not None,
  if not,
  define the function get_language_from_path with 2 arguments: path and strict set to boolean False.
  define the method close with an argument self.
  define the function exhaust with an argument stream_or_iterable.
  meta is an instance of a class named 'Meta', derived from the object base class, without any fields.
  set attr attribute of the self object to value.
  return plist.
  response.content is bytes empty string.
  call the function locks.unlock with fd as argument.
  return func.
  read file fp, call the method decode on the result with an argument settings.FILE_CHARSET, return tuple containing 2 elements,
  define the method list with 3 arguments: self and unpacked list args and unpacked dictionary kwargs.
  if print_ is None,
  if not,
  raise an TemplateSyntaxError exception with an argument string "'cycle' tag requires at least two arguments".
  increment i by integer 1.
  for every lineno and line is enumerated result of the method content.splitlines, called with an argument boolean True,
  define the method open with arguments self, name and mode defaulting to string 'rb'.
  '<p%(html_class_attr)s>%(label)s %(field)s%(help_text)s</p>', error_row set to a a string '%s', row_ender set to a string '</p>',   help_text_html set to a string, <span class="helptext">%s</span>' and errors_on_separate_row set to boolean True.   define the method non_field_errors with an argument self.
  for ext in pathext,
  remove first and last character from the attrvalue, substitute it for attrvalue.
  yield key.
  evaluate the function getdefaultlocale from the module locale, if second element of return value exists assign it to encoding,
  call the method to_python with an argument value from the base class of the DateTimeField class, substitute the result for result.
  return self._is_rendered.
  doesn't support that type of template loading. Consider removing that line from TEMPLATE_LOADERS.",   where '%r' is replaced with loader.   return None.
  define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
  call the method validators.ip_address_validators with arguments protocol, unpack_ipv4, substitute first element of the result for self.default_validators.
  if POST_override is not None, or otherwise generated with the call to the function pformat with an argument request.POST.   if Exception exception is caught,
  define the function _set_response_etag, with response as an argument.
  return an instance of a SpacelessNode class, created with an argument nodelist.
  substitute self.remaining for size.
  instantiate a class Group with 2 arguments: string "%%(%s)s" formated with name, and name, append it to result.
  return an integer 0.
  substitute timezone for self.timezone.
   raise CommandError with an argument string 'Unknown app in excludes: %s', where '%s' is replaced with exclude.
  if bit is true,
  define the method enter_command with 3 arguments: self, command and token.
  call the function dateformat.time_format with 2 arguments: value and result of the function get_format called with 2 arguments:
  derive the class CsrfTokenNode from Node base class.
  otherwise if level converted into a string equals level,
  yield obj, as an return value of the generator.
  if fourth element of version equals to string 'alpha' and fight element of version equals to integer 0,
  define the method get with 3 arguments: self, key and default set to None.
  if UnicodeDecodeError exception is caught,
  get the value 'reset_sequences' key of the options dictionary, if it exists substitute it for reset_sequences, otherwise reset_sequences is boolean True.
  for every slots_var in slots,
  call the function force_text with an argument ttl, substitute the result for ttl.
  convert arg to an integer.
  define the method _has_changed with arguments self, initial and data.
  import module errno.
  return size of the image that was fed to the parser p.
  for every c in self.children.   return string '(%s: %s)', formated with self.connector and string created by joining c into a string, separated by ', ',
  create dictionary out of the unpacked dictionary options, using defaults._get_kwargs as a mapping function, substitute the result for defaults.
  append ch to result.
  call the signals.request_started.send method with sender set to self.__class__ as argument.
  processors is an empty tuple.
  use the result as an argument for the call to the field.to_python method, substitute the result for initial_value.   if ValidationError exception is caught,
  TOTAL_FORM_COUNT is a string 'TOTAL_FORMS'.
  and result of the method self.field.label_from_instance, called with an argument obj.   derive the class ModelChoiceField from the ChoiceField base class.
  return nothing.
  raise an NotImplementedError exception with argument string 'subclasses of BaseEmailBackend must override send_messages() method'.
  and elements of token_string from second to second last element wiht the whitespaces striped from the both sides.   otherwise if token_string starts with BLOCK_TAG_START,
  call the function force_text with an argument text, substitute the result for text.
  string joined from invalided_apps list and separated with string ', '.   if not,
  for every handler in settings.FILE_UPLOAD_HANDLERS,
  and dictionary with an entry: 'html' for 'type'.   if value under the 'enclosure' key of the item dictionary is not None,
  if forms_valid is true and call to the method self.non_form_errors, evaluates to false, return boolean True, otherwise return False.
  separated with result of the function conditional_escape with an argument sep, for every args in args_generator,   use the result as an argument for the call to the function mark_safe, return the result.   define the function linebreaks with 2 arguments: value and autoescape set to boolean False.
  call the method self.resolve with an argument c, substitute the result for c.
  append string '_field' to new_name.
  return msgs.
  call the function force_text with an argument text, split by it word_split_re, substitute it for words.
  if display_num_errors is true,
  if not,
  write the result to self.stdout.   for every operation in migration.operations,
  categories is a list containing the results of the function force_text, called with an argument c, for every c in categories.
  convert 'Set-Cookie' to a string and convert the return value of method c.output(header='') call to a string,
  and help as a string 'Specify the app label(s) to create migrations for.'.   call the method parser.add_argument with 5 arguments: string '--dry-run', action as a string 'store_true', dest as string 'dry_run',
  where '%s' is replaced with name.   if name is not contained in parser._namedCycleNodes,
  pending_references is a empty dictionary.
  use_func is boolean True.
  if settings.STATIC_URL is None,
  call the self.style.HTTP_SUCCESS with an argument msg, substitute it for msg.
  define the method execute with 3 arguments self, unpacked list args and unpacked dictionary options.
  return boolean True.
  for meta_line in return value of the method self.get_meta called with an argument table_name.
  for every k and v in return value of the function defaults.items,
  substitute auto_id for value under the 'id' key of the attrs dictionary.
  call the function call_command with 3 arguments: string "createsuperuser", interactive is boolean True,
  try,
  define the method __init__ with arguments self, context, base, sysid and pubid.
  supports_microseconds is boolean False.
  define the method _update_errors with 2 arguments: self and errors.
  import module signal.
  iterations and dklen, return the result.   if not,
  skip this loop iteration.
  self._current is None.
  DEFAULT_ATTACHMENT_MIME_TYPE is a string 'application/octet-stream'.
  call the method __init__ from the base class of the class TemplateIfParser, with 2 arguments: unpacked list args and unpacked dictionary.
  derive the class Parser form the base class object.
  if not,
  substitute model._meta for opts.
  define the method A with an argument self.
  if self.required is true and value is false,
  value is None.
  return val.
  delete the value under the 'liveserver' key of the options dictionary.
  get the value under the 'exclude' key of the options dictionary, substitute it for exclude.
  if date is not None,
  for every k and v in result of the function six.iteritems,called with an argument self,
  call the method template.render with an argument context, substitute it for content.
  strip g of "'" from both ends,
  set filter_func objec attr attribute to value.
  return a tuple with 2 elements: integers 1 and 0.
  raise CommandError exception with "App '%s' does not have migrations (you cannot selectively sync unmigrated apps)",
  return the result.   sign is an empty string.
  replace '%s' in string "Cache table '%s' already exists." with tablename, write it to the self.stdout stream.
  from django.core.servers.fastcgi import FASTCGI_HELP into default namespace.
  return name.
  raise a CommandError exception, with string "No migrations present for: %s" as argument, substitute '%s' in previous string with,
  use the global variable _serializers.
  substitute col_name for value under the 'db_column' key of the field_params dictionary.
  called with 2 arguments: singular and trimmed, write the result to out.   if not,
  if not,
  substitute server for self._servers.
  return default.
  substitute it for candidate_subs.   if not,
  decorator function register.filter with 2 arguments string "slice" and is_safe set to boolean True.
  convert name to lower case if it equals to string 'from' or 'to,
  import module warnings.
  define the method app_dict with an argument self.
  if not,
  call the method callback.rindex with an argument character '.', substitute the result for dot.
  call the function errors.error_dict.items, for every field and messages in the result,
  append options to output.
  if not, substitute template_dirs for key.   get the value under the key key of the self.template_cache dictionary, substitute it for template_tuple.
  return an instance of SafeText, created with an argument t.
  raise an ValueError exception with an argument string 'Unable to configure formatter %r: %s' formated with name and e.
  slice the list from the i-th to the endpos-th element, substitute it for self.__starttag_text.
  from django.template.loader import BaseLoader, get_template_from_string, find_template_loader and make_origin into default name space.
  extension_map is a dictioanry with 6 initial elntries: TarArchive for '.tar', TarArchive for '.tar.bz2', TarArchive for '.tar.gz',
  otherwise if ch is contained in string "*?+{",
  latest_date is None.
  parent is a tuple with 1 element, object.
  call the function sys.exit with an argument integer 1.
  define the method __init__ with 2 arguments: self and config.
  if key is contained in d,
  if not,
  import module fnmatch.
  substitute HTMLParser from the module _html_parser for HTMLParser.
  return an instance of SafeBytes, created with an argument data.
  open err_log file in append mode with buffering size of the input buffer, substitute the result for sys.stderr.
  derive the class BaseForm from the base class object.
  call the method os.path.dirname with an argument potfile, join the result, locale and string 'LC_MESSAGES' into a file path,
  substitute every '%s' in string '%s<li>%s%s</li>' with indent, with result of the function escaper called with an argument:
  raise an exception.
  self.saved_forms is an empty list.
  convert fist p elements of language to lowercase, append '_' to it,
  append a tuple with 2 elements: obj and form.changed_data to self.changed_objects.
  substitute settings.MEDIA_URL for prefix.
  get 'widgets' attribute from the options object, if it exists substitute it for self.widgets, if not self.widgets is None.
  define class dummy.
  import module sys.
  call the function allow_lazy with an argument phone2numeric, substitute the result for phone2numeric.
  if can_fail is true,
  substitute mtime for the value under the filename key of _mtimes dictionary.
  call the method parser.parse, return the result.
  define the function ifchanged with 2 arguments: parser and token.
  otherwise if k equals a string 'bg',
  derive the class TemporaryFileUploadHandler from the FileUploadHandler base class.
  if exception is caught,
  intrans is boolean False.
  define the function fields_for_model with 9 arguments: model, fields set to None, exclude set to None, widgets set to None,
  call the method value.rjust with an argument, arg converted into a integer, return the result.
  derive the class Command from the BaseCommands base class.
  sum m and value under the medium key of the base dictionary, substitute it for m.
  format the string '{scheme}://{host}{path}' by replacing scheme with self.scheme, host with return value of the self.get_host method,
  raise an ValueError with an argument string "attempted relative import beyond top-level package".
  define the method __init__ with 2 arguments: self and s.
  with all occurrences of '%s' replaced with app_name and model._meta.object_name, respectively.   try,
  append bit to split.
  get the value under the 'HTTP_X_FORWARDED_HOST' key of the self.META dictionary, substitute the result for host.
  define the method __setitem__ with 3 arguments: self, key and value.
  if OSError or TypeError errors occurred.
  substitute msg for self.msg.
  set attr.name attribute of the Module_six_moves_urllib_request object to attr.
  call the method __init__ with an argument display_name, from the base class of the LoaderOrigin class.
  call method mail.attach_alternative as html_message and string 'text/hmtl' as arguments.
  get opt attribute of the opts object, substitute it for value.
  derive the class CycleNode from Node base class.
  for every name in MEDIA_TYPES,
  otherwise if closing_tag is true,
  match the rawdata from the position i+1, with tagfind pattern, assign the result to the match.
  raise CommandError exception with string "The %s file has a BOM (Byte Order Mark). Django only supports .po files encoded in UTF-8 and without any BOM.", with '%s' replaced with po_path, as argument.
  if encoding is false.
  define initialization method __init__, with self class instance as the argument.
  append value to the self._closable_objects list.
  split second element of hextet into parts by ':', append them to new_ip.
  call the method imp.find_module with 2 arguments: module_name and list containing element entry, assign the result to file_, _,
  if urlconf_name is not an instance of six.string_types class,
  substitute c_int64 for ULONG_PTR.
  import module sys.
  compare_to is an list with elements generated by calling the var.resolve method with 2 arguments: context and boolean True,
  call the data.decode method with a string 'latin-1' as an argument, use the result as an argument for the call to the json.load function, return the result.
  define the function wrapper with list args, and dictionary pair of values kwargs as arguments.
  import module warnings.
  raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,
  get the value under the name key of the self.initial dictionary, if it exists substitute it for initial_value,
  call the method MIMEMessage.__setitem__ with arguments self, name and val.
  convert data into boolean and substitute it for data.
  if name is true, substitute it for self.name, otherwise substitute func.__name__ for self.name.
  replace all the '%r' with self.level, self.msg, self.hint. self.obj and self.id, respectively, return the result.   define the method is_serious with argument self.
  call the method data.encode with 2 arguments: fp.encoding and errors, substitute the result for data.
  call the method self.data.replace with 2 arguments: month as integer 1 and day as integer 1, on the result call the method,
  call the function _curried_func with 2 arguments: list moreargs appended to args and unpacked,
  if self doesnt have an '_body' attribute,
  return nothing.
  import module os.
  call the function field.value_to_string with an argument obj, substitute the result for value under the field.name key of self._current dictionary.
  return an empty string,
  if string 'forloop' is contained in context,
  otherwise if self._delegate_text is true,
  define the function ugettext with an argument message.
  if ValidationError renamed to e, exception is caught,
  return value.
  if t is not None
  if name is contained in MEDIA_TYPES,
  call the method self.instance.validate_unique with an argument exclude set to exclude.
  message is a string 'use only numbers, letters and underscores'.
  replace every occurrence of string '\r\n' in message with '\n', replace every occurrence of string '\r',
  define the method _createdir with argument self.
  return self.__name.
  instantiate Header class with localpart and encoding, convert it to a string, substitute the result for localpart.
  from __future__ import unicode_literals into default name space.
  derive the class DisallowedHost from the SuspiciousOperation base class.
  if LookupError or TypeError exceptions are caught,
  from django.core import signals into default name space.
  call the method threading.RLock, substitute the result for self._lock.
  sum major and sub, return the result converted to string.
  if value is not contained in result,
  define the function load with 2 arguments: parser and token.
  for every node in self.nodelist_loop,
  get the value under the 'output' key of the options dictionary, substitute the result for output.
  if not,
  call the method datetime.datetime.strptime with 2 arguments: result of the function force_str called with an argument value,
  otherwise if message is an instance of the list type.
  from django.utils.jslex import prepare_js_for_gettext into default name space.
  if six.PY2 is true,
  join elements of self.vals into a bytes string, substitute the result for ret.
  if app_config.models_module is None,
  call the model.check method with unpacked dictionary kwargs for every model in return value of function apps.get_models,
  if newretval is not None,
  split arg by ',', substitute the result for bits.
  if six.PY3 is true and val1 and val2 are an instances of bytes,
  return value of the function quote called with arguments k and safe, and with return value of the function quote called with arguments v and safe.   if not,
  call the function trim_whitespace with an argument message, substitute the result for message.
  return self.
  split the string cc_delim_re with value under the key 'Vary' of response dictionary as delimiter, substitute result for vary_headers.
  value under '_data' key of obj_dict is a dictionary created with tuples containing 2 elements: k and result of the function,
  call the method self.tag, substitute the result for self.tagname.
  define the method __exit__ with self, exc_type, exc_value and tb as arguments.
  from xml.sax import handler into default name space.
  return _standard_context_processors.
  if string 'noreset' is not contained in opts,
  asvar is None.
  call the method self.tag with 2 arguments: function_name and compile_func.
  remove 'sep' key from the kwargs dictionary, if it exists substitute it for sep, if not sep is None.
  yield string '    %s', where '%s' is replaced with field_desc.
  define the method __init__ with 4 arguments: self, nodelist, parent_name and template_dirs set to None.
  substitute self.subject for subject.
  return self.field.widget.is_hidden,
  if ttl is not None,
  get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.
  convert bytes to floating point number, substitute it for bytes.
  import module sys.
  call the method connection.introspection.sequence_list if reset_sequences is true, substitute the result for seqs, if not, seqs is an empty tuple.
  raise an BadHeaderError exception with an argument string "Header values can't contain newlines (got %r)", where '%r' is replaced with value.
  increment Tok.num with an integer 1.
  return value under the name key of the sys.modules dictionary.
  create a directory self.default_locale_path.
  return boolean False.
  call the method return self.format with an argument string 'D, j M Y H:i:s O', return the result.
  if NameError exception is caught,
  return self.__name.
  from wsgiref.util import FileWrapper
  define the method handle with 3 arguments: self and unpacked dictionary options.
  get the LANG_INFO dictionary value under the generic_lang_code key, return the result.
  for every node in self.nodelist_empty,
  substitute ending for self.ending.
  if timeout is None,
  call the method self._lib.Client with self._servers and pickleProtocol set to pickle.HIGHEST_PROTOCOL as arguments, substitute the result for self._client.
  call the method self._cache.clear.
  call the function func with 2 arguments: obj and unpacked list arg_vals, substitute the result for new_obj.
  substitute the result for guts.   concatenate string '"', guts and string '"', substitute the result for tok.
  if subcommand is contained in no_settings_commands,
  get _iteritems attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,
  substitute pubid for self.pubid.
  format string '&%s;' with name, append it to self.fed.
  where '%(app_label)s' is replaced for obj.object._meta.app_label, '%(object_name)s' is replaced with obj.object._meta.object_name,   '%(pk)s' is replaced with obj.object.pk and '%(error_msg)s' is replaced with result of the function force_text with an argument e.   raise an exceptions
  if smtplib.SMTPException exception is caught,
  call the function get_language, substitute the result for language_code.
  get the integer representation of the i-th element of buf, return it.
  call the method value.encode with an argument charset, substitute the result for value.
  call the options.update method with an argument kwargs.
  return klass.
  if NotImplementedError exception is caught,
  return args and kwargs.
  read 4 bytes from file f and store it in sample.
  call the method self._coerce with an argument value, return the result.
  define the method save_existing_objects with 2 arguments: self and commit set to boolean True.
  if stream_created is true,
  call the method ETAG_MATCH.findall with an argument etag_str, substitute the result for etags.
  call the function _add_doc with 2 arguments: u and string """Text literal""".
  derive class BaseHandler, derive from the base class object, making this a new style class.
  define the function removetags with 2 arguments value and arg.
  if field equals NON_FIELD_ERRORS and opts.error_messages is true and NON_FIELD_ERRORS is contained in opts.error_messages,
  take locale or all_locales, whichever is not empty, respectively, and substitute it for locales.
  raise an DisallowedRedirect exception with an argument string "Unsafe redirect to URL with protocol '%s'",
  do nothing.
  if as_ is not equal to string 'as',
  call the method imp.find_module with 2 arguments: module_name and list containing element entry, assign the result to file_, _,
  if Exception exception is caught,
  if value is contained in self.empty_values,
  if name is None and filter_func is None,
  derive the class BaseModelForm from the BaseForm base class.
  for every i and field in enumerated iterable self.fields,
  unpack a dictionary with an entry id_for_label for 'for', map it through attrs mapping if attrs is true,
  for app_config in return value of the method apps.get_app_configs,
  append str_hidden to output.
  define the method __setitem__ with arguments self, name and val.
  call the method self.form with unpacked dictionary defaults as an argument, substitute it for form.
  skip this loop iteration,
  write it to self.stdout.   for every migration in migrations_to_squash,
  dependencies set to a list of tuples with 2 elements: app_label and migration.name for every migration in merge_migrations.   call the method subsclass with 2 arguments: string "%04i_merge", replace '%04i' with biggest_number incremented by one,
  try,
  if UnicodeEncodeError exception is caught,
  call the function handle_extensions exts, substitute self.extensions.
  if six.PY2 is true and path is not an instance of byes type,
  if self._wrapped is empty,
  raise an exception DjingoUnicodeDecodeError, with s and list of arguments *args from object e, as the arguments.
  import module argparse.
  call the method self._setupfunc, substitute the result for self._wrapped.
  if there is no match,
  property decorator,
  write ',' to the self.stream file stream.
  import module codecs.
  call the function m.group, if the result evaluates to true,
  if self.activated is boolean True,
  value under the 'null' key of the extra_params dictionary is boolean True.
  if not, self.hide_empty is boolean False.   get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.
  truncate the last element of filename.
  call the method __init__ from the base class of the class MultiValueDict, with an argument key_to_list_mapping.
  define the function do_ntranslate with 4 arguments: singular, plural, number and translation_function.
  inplural is boolean False.
  call the method self.__class__ with an argument self, return the result.
  call the function force_text with an argument bf.label, use the result as an argument for the call to the function conditional_escape, substitute the result label.
  if not,
  if kwds is true,
  try,
  called with 2 arguments: s and string_only as boolean True.   if categories is true,
  call the function force_text with 3 arguments: file_name, encoding and errors set to string 'replace',
  call the method __init__ from the base class of the BaseTemporalField class, with arguments: unpacked list args and unpacked dictionary kwargs.
  and code set to string 'list.   substitute self.to_field_name, if true, for key, or if not, substitute string 'pk' for key.
  LockFileEx.argtypes is a list containing 6 elements: HANDLE, DWORD, DWORD, DWORD, DWORD and LPOVERLAPPED.
  return nothing.
  if first element of base64d equals to a '.' character,
  if length of bits is greater than integer 2,
  if file object has an attribute 'mode',
  result is an instance of SimpleLazyObject class, created with an argument self._setupfunc.
  substitute '%s' in 'Forbidden (Permission denied): %s' with request.path, extra is an dictionary with two pairs of elements,
  split ip_str by ':', substitute the result for hextets.
  return an instance of metaclass class, created with 3 arguments: cls.__name__, cls.__bases__ and orig_vars.
  if not,
  substitute True for output_transaction.
  return list_ and boolean False.
  m2m_data is an empty dictionary.
  substitute the length of defaults for dlen.
  if self.number is lesser than self.paginator.num_pages, return boolean True, otherwise return boolean False.
  try,
   self._headers is an empty dictionary.
  MIN_NUM_FORM_COUNT is a string 'MIN_NUM_FORMS'.
  convert it to a string and substitute it for value under the 'cookies' key of the state dictionary.   return state.
  try,
  append cleaned_lien to statement.
  from the base class of the class TypedMultipleChoiceField.   define the method _coerce with arguments self and value.
  call the method self.filter_function with 2 arguments func and unpacked dictionary flags, return the result.
  return compile_function.
  s is an instance of the Select class, created with choices set to choices.
  define the __init__ method with 7 arguments: self, func, args, kwargs, url_name set to None, app_name set to None and namespaces set to None.
  if len_values is smaller than integer 1,
  call the method render from the base class of the class NullBooleanSelect, with 4 arguments: name, value, attrs and choices,
  return d.
  define the method __getitem__ with 2 arguments: self and key.
  raise an StopIteration exception.
  if not,
  from django.db.migrations.loader import MigrationLoader into default name space.
  call the method self.clear_checkbox_id with an argument checkbox_name, substitute the result for checkbox_id.
  raise an NotImplementedError with an argument string 'Subclasses must define this method.'.
  if fk is not an instance of ForeignKey class, or fk.rel.to is not equal to parent_model,
   substitute value under the RESULT key of the root dictionary for oldvalue.
  from functools import reduce into default name space.
  if s is an instance of SafeData.
  call the logger.warning method with string 'Bad Request (UnicodeDecodeError)', exec_info set to sys.exec_info() and dictionary extra
  message, settings.SERVER_EMAIL, list of second elements of a for every a in settings.Managers and connection set to connection,   as arguments, assign the result to mail.   if html_message is true,
  for every i and ext in enumerated iterable ext_list,
  for every field in model._meta.fields,
  otherwise if self.reason_phrase is None,
  with an argument string 'object', return the result.   define the method _get_model_from_node with arguments self, node and attr.
  substitute force_text for force_str.
  try,
  define the method check with 4 arguments: self, app_configs set to None, tags set to None, display_num_errors set to boolean False.
  import module operator.
  where '%s' are replaced by sel.file and errors, respectively.   if command.verbosity is greater than integer 0,
  if Exception, renamed to e, exception is caught,
  define the method __init__ with self and limit_value as arguments.
  return boolean False.
  from django.core.signals import request_finished into default name space.
  define the function template_localtime with 2 arguments: value and use_tz set to None.
  define the method tzname with 2 arguments: self and dt.
  dest as a string 'ignore', default set to boolean False and help set to string 'Ignores entries in the serialized data for fields that do not currently exist on the model.'.   define the method handle with 3 arguments: self, unpacked list fixture_labels and unpacked dictionary options.
  join the list of statements into a string separated by new lines, return it.
  return an instance of EscapeText, created with an argument s.
  slice the rawdata to obtain substring from i-th to j-th element, use it as the argument for the method call to the self.handle_data.
  convert fist p elements of language to lowercase, append '_' to it,
  from django.utils import six into default name space.
  if app_config.models_module is None,
  import pytz.
  return value under the DEFAULT_PALETTE key of the PALETTES dictionary.
  call the method self._archive.printdir with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  return value.
  define the function sql_indexes with 3 arguments: app_config, style and connection.
  call the function EmailMultiAlternatives with settings.EMAIL_SUBJECT_PREFIX and subject converted to strings and concatenated,
  define the method to_python with arguments self and value.
  get property attribute _get_width, and substitute it for width.
  return boolean False.
  try,
  return s.
  define the method render with 2 arguments: self and context.
  define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.
  write errors to self.stdout.
  fork a child process, if the result equals integer 0,
  call function _generate_cache_header_key with arguments key_prefix and request, substitute the result for cache_key.
  try,
  import module importlib.
  define the method values with an argument self.
  substitute arg converted into an integer for length.
  from django.conf import settings into default name space.
  'resent-to', 'resent-cc' and 'resent-bcc'.   define the function forbid_multi_line_headers with arguments: name, val and encoding.
  define lambda function that returns self.file.readlines field, use it as an argument for property function, put the result in readlines.
  RAW is a string "raw".
  while i is lesser than length of subject and i-th element of subject is not an empty space or tab character,
  define private method __repr__ with argument self.
  call the method obj.save.
  best_doublecolon_len is an integer 0.
  if want_unicode is false,
  return host.
  if urlconf is None,
  substitute i incremented by 1 for value under the 'counter' key of the loop_dict dictionary.
  call the method self.as_widget with 3 arguments: return value of the method self.field.hidden_widget, attrs,
  from django.forms.models import everything into default name space.
  define the method r with an argument self.
  if not,
  join app_config.path and string 'templates' into file path, substitute it for template_dir.
  call the function update_wrapper with 2 arguments: _wrapper and dummy.
  get the value under the 'localize' key of the kwargs dictionary, if it is true and self.widget equals to NumberInput,
  substitute i-th element of self.forms for form.
  if not,
  return self._name.
  put elements of validators.EMPTY_VALUES to a list, substitute the result for empty_values.
  call the function import_module with an argument mod_name.
  substitute t.nodelist for self.nodelist.
  append tuple containing element attr to boolean_attrs.
  substitute include_html for self.include_html.
  compare is a lambda function with arguments self, a and b, return value is boolean true if a is greater than b, otherwise is false.
  define the method loaders with an argument self.
  for 'maxSpare', value under the key 'minspare' of options dictionary converted to an integer for 'minSpare',   value under the key 'maxchildren' of options dictionary converted to an integer, for 'maxChildren',   and value under the key 'maxrequests' of options dictionary converted to an integer, for 'maxRequests'.   append string '_fork' to flup_module.
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  decorator stringfilter,
  call the method parser.parse, return the result.
  where '%d' is replaced with self.loaded_object_count and self.fixture_count, respectively.   if not,
  call the function ungettext_lazy with 3 arguments: string 'Ensure this value has at most %(limit_value)d character (it has %(show_value)d),
  if not,
  otherwise if end is not an instance of string type,
  evaluate the member method of s, encode with the encoding and errors as the arguments, return the result.
  sites is an empty list.
  update defaults dictionary with kwargs.
  if show_traceback is true,
  decorator register with argument Tags.compatibility.
  from django.db.migrations.executor import MigrationExecutor into default name space.
  and elements of rfcdate from 12-th to the 25-th index.   define the function http_date with an argument epoch_seconds set to None.
  open the file in mode 'ab' and with file name obtained by calling the self._get_filename method.
  if not,
  "path of at least one fixture in the command line."   define the method add_arguments with 2 arguments: self and parser.
  use global variable _supported.
  substitute value under the field key of the self.fields dictionary for form_field.
  try,
  return attrs.
  if not,
  define the method display with an argument self.
  if self.allow_files is true,
  define the method __getitem__ with 2 arguments: self and name.
  substitute nodelist_true and nodelist_false for self.nodelist_true and self.nodelist_false, respectively.
  must_be_first is boolean True.
  get the value under the 'use_natural_keys' key of the options dictionary, substitute the result for use_natural_keys.
  status_code is an integer 410.
  if process_all is true,
  try,
  if transfer_encoding equals a string 'base64',
  try,
  derive the class Textarea from the Widget base class.
  value under the 'author_name' key of the item dictionary and dictionary with an entry: "http://purl.org/dc/elements/1.1/" for "xmlns:dc".   if value under the 'pubdate' key of the item dictionary is not None,
  called with sep appended to base_path as an argument and results of the function normcase called twice with final_path,   and base_pah are not equal and directory name of the result of the function normcase called with an argument base_path,   if not equal to the result of the function normcase called with an argument base_path.   raise an ValueError with an argument string 'The joined path (%s) is located outside of the base path component (%s)',
  call the function func with unpacked dictionary kwargs as an argument, substitute the result for translated.
  escaped is boolean True.
  self.paths_to_remove is an empty list.
  substitute the result for url_fields.   call the function urlunsplit with an argument url_fields, substitute the result for value.
  do nothing.
  call the function warnings.warn with 3 arguments: string "`%s.%s` is deprecated, use `%s` instead.",
  substitute value.pk for value.
  if cookie is an empty string,
  define the function unescape_entities with an argument text.
  do nothing.
  call the django.setup method.
  from PIL import Image into default namespace.
  try,
  write ']' to the self.stream file stream.
  if sys.platform starts with a string 'java',
  ch2 is None.
  found is boolean True.
  otherwise if char is contained in string 'bEFMmNn',
  return first element of t.
  from django.utils.six.moves import _dummy_thread as thread into default name space.
  for every form in valid_forms,
  define the function ngettext with 4 arguments: context, singular, plural and number.
  try,
  define the method resolve_template with 2 arguments: self and template.
  if value under the 'verbosity' key of the options dictionary is greater than zero,
  if not,
  append path to self._js.
  call the os.path.splitext with argument file_name, assign the result to the file_root and file_ext respectively.
  derive the class MultiWidget from the Widget base class.
  call the function self._key_to_file with key and version as arguments, substitute it for fname.
  define the method read with an argument self.
  from the base class of the class SimpleCookie call the value_encode method with val as the argument, store the result in the val and encoded, respectively.
  _translations dictionary value, under the language key is an instance of DjangoTranslation class, created with an argument language.
  define the method choice with 2 arguments: self and obj.
  call the re.compile function with an argument raw string '^[-a-zA-Z0-9_]+$', substitute the result for slug_re.
  convert value under the 'REQUEST_METHOD' key of the environ dictionary to uppercase, substitute it for self.method.
  call the self.style.HTTP_REDIRECT with an argument msg, substitute it for msg.
  substitute TemplateSyntaxError for error_class.
  define the method extra_forms with an argument self.
  call the method cursor.execute with an argument line.
  substitute email_backend for self.email_backend.
  self.field.choice_cache is a list containing results of the method self.choice called with an argument obj,
  substitute field.rel.to for rel_model.
  call the function time.gmtime with argument timeval, use string '%Y%m%d%H%M%S' and the previous result as an argument for the call to the time.strftime function, substitute the result for utcdate.
  return result.
  do nothing.
  call the function base64_hmac with 3 arguments: string 'signer' appended to self.salt, value and self.key, substitute the result for signature.
  kwargs is an empty dictionary.
  define the function make_list with an argument value.
  return an instance of SafeText, created with an argument s.
  evaluate self._has_expired with argument key, if the result is True,
  if best_doublecolon_start equals integer 0,
  var_obj is None.
  get the value under the key key of the self.cookies dictionary, domain expires for 'domain' key of the returned dictionary.
  otherwise if msg is true,
  use global variable templatetags_modules.
  derive the class RenderContext from the BaseContext base class.
  define the method write with 4 arguments: self, msg, style_func with None and ending set None.
  if not,
  define the function _string_concat with an argument unpacked list strings.
  substitute the result for url.   if NoReverseMatch exception is caught,
  if self.__language equals settings.LANGUAGE_CODE,
  return self._urlconf_module.
  call the function check_for_migrations with arguments app_config and connection.
  nofollow_attr is an empty string.
  if f is not None append it to a list for every f in tuple containing 3 elements: style_func, self.style_func,
  define the method media with an argument self.
  raise an NotImplementedError exception with an argument sting 'subclasses of LazyObject must provide a _setup() method'.
  call the function format_html with 2 arguments: string '<ul class="errorlist">{0}</ul>', and return value of the function,
  return boolean True.
  from django.utils.encoding import python_2_unicode_compatible into default name space.
  define the method _ipython_pre_100 with an argument self.
  substitute http_cookies.SimpleCookie for SimpleCookie.
  raise an ValidationError with 3 arguments: value under the 'max_decimal_places' key of the self.error_messages dictionary,
  to the function url.hexdigest(), respectively, substitute it for cache_key.   call the function _i18n_cache_key_suffix with request and cache_key as arguments, return the result.
  define the method close with argument self.
  if KeyError exception is caught,
  raise an exception.
  call the urlsplit with an argument url, convert the result into a list and return it.
  skip this loop iteration.
  if field.rel.to._default_manager has an 'get_by_natural_key' attribute,
  call the method apps.get_app_configs, for app_config in the result,
  derive the class HttpResponsePermanentRedirect from the HttpResponseRedirectBase base class.
  s_len is integer 0.
  if self.parsed is true,
  call the method field._get_val_from_obj with obj argument, substitute the result for value.
  from __future__ import unicode_literals into default name space.
  define the method __contains__ with an argument self.
  for field in self if field.is_hidden is false, append field to a list, return the resulting list.
  if OSError, NotImplementedError or AttributeError exceptions are caught,
  otherwise if result of the call to the function _len with an argument cache is greater than or equal to maxsize,
  define the method G with an argument self.
  translators_comment_start is None.
  call the method self.as_widget with 3 arguments: instance of a class Textarea, attrs and unpacked dictionary kwargs, return the result.
  try,
  import module logging.
  from django.test.signals import setting_changed into default name space.
  append loader to loaders.
  call the method apps.get_app_configs, for every app_config in the result,
  derive the class CacheClass from the base class FileBasedCache.
  is derived from the formset base class and with fields contained in attrs, return an instance of the obtained class.   define the function all_valid with an argument formsets.
  join prefix and path into an url, return it.
  from django.conf import settings into default name space.
  p is image parser object, set by calling the PillowImageFile.Parser method.
  call the method self.nodelist.render with an argument context, substitute the result output.
  call the add_argument method on the parser object with string '--backwards', asction set to 'store_true', dest set to 'backwards',
  post is a string '<could not parse>'.
  substitute input_data for self._input_data.
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  from django.conf import settings into default name space.
  code set to string 'max_whole_digits' and params set to a dictionary with an entry: difference of the self.max_digits and self.decimal_places, for 'max'.    return value.
  call the function time_format with 3 arguments: value, string 'TIME_FORMAT' and use_l10n as use_l10n, return the result.
  if not,
  substitute value under the 'use_reloader' key of the options dictionary for use_reloader.
  from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.
  from django.utils.encoding import force_bytes,  force_text,  force_str and iri_to_uri into default name space.
  return self._queryset.
  define the method represent_decimal with arguments self and data.
  call the function new_method_proxy with an argument operator.setitem, substitute the result for __setitem__.
  define method get_exception_response, with self class instance, request, resolver and status_code as the arguments.
  from django.utils import six into default name space.
  call the method registry.tags_available, sort the result and join it into a string, separate by newlines, write it to self.stdout.
  bitwise shift integer 1 to the left by 63 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.
  convert result of the method self.__iter__ into a list, return its length.
  raise an TemplateSyntaxError with an argument string 'Unknown argument for %r tag: %r.', where '%r' is replaced with first element of bits and options.
  derive the class NodeList form the base class list.
  define the method __nonzero__ with an argument self.
  if elt is an instance of six.string_types class,
  call the method re.split with 2 arguments: string '\n{2,}' and value, substitute the result for paras.
  if not,
  if not,
  from django.core.files import locks into default name space.
  call the function get_wsgi_application, return the result.
  and result of bitwise OR performed on 2 operands: re.MULTILINE and re.VERBOSE,   substitute the result for value under the state key of the self.regexes dictionary.   substitute first for self.state.
  call the method one_percent_re.sub with 2 arguments: string '%%' and g, substitute the result for .
  define the method is_secure with an argument self.
  remove first element from self.tokens, return removed element.
  serializers is an empty dictionary.
  define the method clean with 2 arguments: self and value.
  if basetype equals a string 'text',
  call the function forbid_multi_line_headers with 3 arguments: name, val and self.encoding, substitute the result for name and val, respectively.
  cls.__dispatch is an empty dictionary.
  with new_class.__name__, '%(opt)s' is replaced with opt and '%(value)s' is replaced with value.   raise an TypeError exception with an argument msg.
  define the method __init__ with 4 arguments: self, permitted_methods, unpacked list args and unpacked dictionary kwargs.
  from django.utils import six into default name space.
  status set to None and current_app set to None.   substitute request for self._request.
  derive class Command from the BaseCommand base class.
  get is a tuple containing elements generated by the call to the function pformat with an argument COOKIES_override,
  append k into a list for every k and v in return value of the six.iteritems function with an argument _serializers,
  define the function cut with 2 arguments value and arg.
  if return value of function response.has_header with string 'Vary' as argument is boolean False,
  strfunc is an instance of a class Name, created with 2 arguments: string "__str__" and prefix as unifunc.prefix.
  call the method now.decode with an argument string 'utf-8', substitute the result for now.
  call the function _ with an argument string 'noon', return the result.
  set attr.name attribute of the Module_six_moves_urllib_error object to attr.
  substitute self.model._meta.pk for pk_field.
  import module sys.
  substitute filter_func for value under the name key of self.filters dictionary.
  call the method self.configure_logger with 2 arguments: name and value under loggers dictionary key name.
  derive the class Command from the BaseCommand class.
  for every path in paths,
  convert filename to lowercase, use the result as an argument for the call to the function os.path.splitext,
  from django import http into default name space.
  clean is a lambda function with self and x as arguments, return value is length of x.
  define the method __init__ with 4 arguments: self, template, unpacked list args and unpacked dictionary kwargs.
  define the method cleaned_data with an argument self.
  if value is an instance of six.string_types,
  do nothing.
  if not,
  define the function module_has_submodule with 2 arguments: package and module_name.
  substitute declared_fields for new_class.base_fields.
  try,
  append a tuple with 2 elements: None and nodelist to conditions_nodelists.
  from ctypes import sizeof, c_ulong, c_void_p, c_int64, Structure, Union, POINTER, windll and byref into default name space.
  url is an empty string.
  if truncate_len equals integer 0.
  convert processors elements into a tuple, substitute it for _standard_context_processors.
  update attrs dictionary with extra_attrs entry.
  call the function _trans.get_language_from_path with an argument path, return the result.
  substitute kw for self.__kw.
  if i is greater than or equal to length of subject.
  call the method self.loader with 2 arguments: self.loadname and self.dirs, return the first element of the result.
  call the method gettext_module.find with 3 arguments: string 'django', path and list with an element: result of the function,
  call the method __getitem__ from the base class of the class MultiValueDict, with an argument key, return the result..
  templatetags_modules_candidates is an list with an argument string 'django.templatetags'.
  substitute SplitHiddenDateTimeWidget for hidden_widget.
  create directories from the elements in filename.
  define the method __init__ with arguments: self, unpacked list args and unpacked dictionary kwargs.
  import module os.
  if call to the _has_expired method with argument key evaluates to boolean False,
  if string 'id' is contained in self.attrs,
  define the method handle_field with arguments self, obj and field.
  join self into a bytes string, yield the result as the return value of the generator.
  define the method to_python with arguments self and data.
  if not,
  if not,
  raise an TypeError with an argument string "update expected at most 1 arguments, got %d" formated with length of args.
  return boolean False.
  on the result call the method encode with the arguments encoding and errors, return the result.   if strings_only and boolean return value of the call to the function is_protected_type for argument s are boolean True,
  if not,
  result is an empty list.
  finally perform,
  return a string '%s %s %s' formated with 3 elements: result of the function force_text called with an argument i,
  call the __init__ method with 3 arguments: CRITICAL, unpacked list args and unpacked dictionary kwargs from the base class of Critical.
  if last element of args is not equal to a string "silent",
  return self.value.
  if self has an attribute 'error_dict',
  call the method pyinotify.INotifyWrapper.create, on the return value call the inotify_init method, substitute the result for fd.
  define the method reload with an argument self.
  if logging_config is true,
  for every program in programs,
  substitute '%s' in string "No changes detected in app '%s'" with the result of the method app_labels.pop, write it to self.stdout.
  call the method self.getvalue, return the result.
  if ch equals a string '<',
  if six.PY2 is true,
  append resolved_args to a list containing context element, substitute it for resolved_args.
  if not,
  if y and m and d are all true,
  for every loader in self._loaders,
  utf8_charset.body_encoding is None.
  force_bytes function, use the result as the argument for the call to the hashlib.mdb function, store the result in url.   substitute the '%s' in string 'views.decorators.cache.cache_page.%s.%s.%s.%s' with key_prefix, method,
  otherwise if o is an instance of datetime.time object,
  if self doesnt have an attribute '_fqdn',
  params is a dictionary with 2 initial entries: self.limit_value for 'limit_value' and cleaned for 'show_value'.
  substitute compare_to for value under the state_frame dictionary under the self key.
  define the method _should_delete_form with an argument self.
  import module unicodedata.
  return raw_data.
  call the fastcgi_help function with an argument string "Invalid combination of host, port, socket.", return it.
  sum _cached_filenames, new_filenames and _error_files, store the result in filelist.
  return a tuple with an element self.__offset.
  if self.verbosity is greater of equal to integer 1,
  from django.utils.six.moves import xrange into default name space.
  raise an ValueError exception with string "Key '%s' not found" as argument, substitute '%s' with key converted into a string.
  define the method close with an argument self.
  if not,
  call the method _ExpatParser.reset with an argumen sefl.
  if mw_instance has an attribute named 'process_template_response'.
  if return value of the code_changed function is true,
  substitute the result for new_migration.   writer is an instance of a class MigrationWriter, created with an argument new_migration.
  define the method reader_leaves with an argument self.
  delete the value under key key of self._cache dictionary.
  match value string with regex self.CONVERT_PATTERN, substitute the result for m.
  raise a ValidationError exception with arguments self.message and code set to self.code.
  increment year by integer 1900.
  find the first subgroup of the matched string from the match object, strip the whitespaces from the begging and end, replace it for tag.
  return response.
  self.invoked_for_django is boolean True.
  split msgs by newline characters, for every line in result,
  yield meta_line as the result.
  for x in a list containing 3 elements: self.id, self.first and self.second, if x is not None,
  return the second element of the return value of the call to the self._det_image_dimensions method.
  if e.errno equals to errno.EEXIST,
  try,
  if func doesnt have a attribute '__name__',
  if key is not contained in self,
  convert pattern to lowercase, substitute it for pattern.
  if mw_instance has an attribute named 'process_view'.
  define the function get_template with 2: template_name and dirs set to None.
  call the function allow_lazy with 2 arguments: get_valid_filename and six.text_type, substitute the result for get_valid_filename.
  get the value under the field key of the html dictionary, append it to output.
  help is a string "Prints the CREATE INDEX SQL statements for the given model module name(s).".
  for every app_label in app_labels,
  calculate the length of args, substitute it for alen.
  substitute instance for self.instance.
  derive the class ChoiceFieldRenderer from the object base class.
  if s is not an instance of the object six/string_types,
  return boolean False.
  increment i by integer 1.
  try,
  if not,
  if __name__ equals a string '__main__'.
  REASON_PHRASES is a dictionary containing 59 initial entries: 'CONTINUE' for 100, 'SWITCHING PROTOCOLS' for 101,
  call the method _parse_header with an argument line, assign the result to name and tuple with 2 elements: value and params, respectively.
  substitute empty bytes string for self.buffer.
  substitute new_args for result_args.
  for every obj in return value of the PythonDeserializer created with 2 arguments: return value of the function yaml.load,
  define the method get_many with 3 arguments, self class instance, keys and version set to None.
  for every name in bits from the start index 1 to the end index negative 2,
  if self.use_natural_foreign_keys is true and field.rel.to has an 'natural_key' attribute,
  substitute _urllib_parse_moved_attributes for Module_six_moves_urllib_parse._moved_attributes.
  raise an TemplateSyntaxError exception with an argument string '"with" in %r tag needs at least one keyword argument.',
  if Exception exception is caught.
  define the method L with an argument self.
  for integer representation of z converted into a string.   define the function escapejs with an argument value.
  if not self.isolated_context is boolean False.   call the method __init__ from the base class of the class IncludeNode, called with 2 arguments: unpacked dictionary args,
  call the function lazy with arguments _get_val and six.text_type, substitute the result for _get_val.
  call the get_deserializer function with an argument format, substitute the result for d.
  allow_multiple_selected is boolean False.
  remove the first element from colors, substitute it for fg.
  append self.data.day to the value under the self.data.month key of the self.year_days dictionary, substitute the result for doy.
  and string 'ignore', call the method decode on the result with an argument string 'ascii', substitute the result for value.   call the method re.sub with 3 arguments: string '[^\w\s-]', empty string and value, strip the result of whitespaces from both ends,
  for every base in new_class.__mro__ in reversed order,
  call the method parser.add_argument with 2 arguments: string 'app_label',
  call the method os.path.splitext with an argument base, substitute the result for base and ext, respectively.
  call the method queryset.none, substitute it for qs.
  call the method timezone.normalize with an argument value, substitute the result for value.
  if first element of s is not contained in "\"'" or last element of s is not equal to first element of s,
  if not,
  if value is true and character ':' is contained in value,
  substitute version_info from module sys for surrent_version.
  call the function importlib.import_module with 2 arguments: flup_module converted to string and appended to '.' character, and string 'flup', substitute the result for module.
  evaluate self.clear method and return the result.
  num_pages is a property object with _get_num_pages as a getter method.
  opts is a tuple created out of elements s, for every s in styles is s is in the keys of the opt_dict dictionary.
  from django.dispatch import Signal into default name space.
  if encoded contains string "\\" and if encoded doesnt start with the double quote symbol,
  if there is no match,
  for every app and names in key, value tuple pairs of conflicts dictionary join names into a string separated by commas,
  define the method __reversed__ with an argument self.
  substitute list_ for first_item and second_item, respectively.
  substitute asvar for self.asvar.
  statement is an empty list.
  define the method add_initial_prefix with 2 arguments: self and field_name.
  split extra_classes into words, by whitespaces, substitute the result for extra_classes.
  import module tempfile.
  if value under the 'feed_copyright' key of the self.feed dictionary is not None,
  join into a string: md5 hash sum of force_bytes(key) and self.cache_suffix, compose root file path out of self._dir and previous result, return it.
  call the function _trans.get_language, return the result.
  raise an self.error exception with 2 arguments: token and string  "Invalid block tag: '%s', expected %s",
  substitute first end elements of s for f.
  otherwise if rhs is an instance of SafeBytes,
  try,
  if six.PY3 is true,
  define the method __str__ with an argument self.
  define the method scheme with an argument self.
  get_language is a lambda function returning settings.LANGUAGE_CODE.
  if not,
  define the method M with an argument self.
  if not,
  otherwise if field.required is true,
  substitute value for the vale under the name key of the pdict dictionary.
  raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a listdir() method'.
  append string ".moves.urllib_response" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for response.
  if value is true,
  map elements of value through mapping function force_text, substitute the result for value.
  if app_config is None,
  define the method empty_variable with 2 arguments: self and token.
  call the method self.check_for_whole_start_tag with i as an argument, substitute result for the endpos.
  get the value under the 'content-disposition' key of the meta_data dictionary, substitute second element of it for disposition.
  if self.verbosity is greater than integer 0,
  if value is contained in self.empty_values,
  call the method bad_app_labels with an argument app_label,
  call the function force_str with 3 arguments: string "<Text Node: '%s'>", with '%s' replaced with first 25 elements of self.s string,
  call the function get_language_from_path with an argument request.path_info, substitute it for lang_code.
  call the get_complete_version with an argument version, store the result in version.
  from django.utils.formats import localize into default name space.
  substitute language for self.__language.
  do nothing.
  derive the class Serializer from the base.Serializer base class.
  convert value into a string, take character at the negative arg index, convert it into an integer, return it.
  substitute name for self.name.
  return self._errors.
  attrs is a dictionary containing 1 entry: return value of the smart_text function with argument obj._meta for 'model'.
  define the function dec with an argument func,
  convert self.name into an boolean, return it.
  divide j by integer 7, substitute the floored result for week_number.
  call the function self.path with argument name, use the result as an argument for the call to the function os.path.getatime,
  substitute os.unlink for unlink.
  floor the division of delta by integer 100 and delta by integer 400, sum the two results, multiply integer 6 by it, substitute the result for off.
  if self.verbosity is greater or equal to integer 2,
  return result.
  in_tag is boolean True if in_tag is False, otherwise is boolean False.
  if typed is true,
  _assertRaisesRegex is a strnig "assertRaisesRegexp".
  from email.mime.base import MIMEBase into default name space.
  define the method __setitem__ with 3 arguments: self, kay and value.
  substitute charset for self.encoding.
  dirs is an empty dictionary.
  if method self.validate_domain_part with an argument domain_part evaluates to true,
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  call the function warnings.warn with an argument string "Your TEMPLATE_LOADERS setting includes %r, but your Python installation
  try,
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  if last_bit is true,
  substitute the result for the value under the 'day' key of the html dictionary.   output is an empty list.
  property getter decorator,
  call the function warnings.warn with 3 arguments: string 'Reversing by dotted path is deprecated (%s).', with '%s' replaced with
  call the method self.stdout.write, with an argument string "Rendering %s template files with extensions: %s\n",
  define the method __repr__ with an argument self.
  define the method __deepcopy__ with 2 arguments: self and memo.
  join statements into a string, separated by newlines, return it.
  substitute '%s' is "%s.process_response didn't return an HttpResponse object. It returned None instead.",
  from django.core import signals into default name space.
  define the method item_attributes with 2 arguments self and item.
  call the method self.error_class with an argument list containing results of the function conditional_escape,
  split server with ';' as delimiter, substitute the result for self._servers.
  call the method handler.addQuickElement with 2 arguments: string 'description' and value under the 'description' key of the item dictionary.
  assign it to value under the string ".moves.urllib_response" appended to __name__ key of the sys.modules dictionary,   and to value under the string ".moves.urllib.response" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_robotparser from the _LazyModule base class.
  get the value under f key of dictionary under 'filters' key of self.config dictionary,
  f _serializers is false,
  append an empty string to dirs list.
  if KeyError exception is caught,
  name is a string "_%d" formated with num_args.
  if exception SuspiciousOperation as e is caught,
  if not,
  if las equals integer 2,
  derive class MovedModule from the _LazyDescr base class.
  define the initialization method __init__, with self instance of this class, convert_charrefs set to boolean False,
  substitute first 2 elements of bits for singular_suffix and plural_suffix, respectively.
  substitute options.args for args.
  substitute _iterkeys for iterkeys.
  substitute charset for self.charset.
  define the method has_key with 2 arguments: self and key.
  return boolean True.
  substitute length of list_ for list_length.
  call the function six.reraise with 3 arguments: DeserializationError, return value of the DeserializationError called with an argument e,
  call a function _ with a string 'Enter a valid value.' as an argument, substitute the result for message.
  _cached_filenames is an empty list.
  call the method __init__ from the base class of the DTDForbidden class.
  if ImportError, rename it to e, exception is caught,
  return a string '%02d' formated with self.data.day.
  substitute func.__doc__ for compile_func.__doc__.
  substitute value under 'warning' key of kwargs dictionary for warning.
  return attrs.
  define lambda function that returns self.file.fileno field, use it as an argument for property function, put the result in fileno.
  call method executor.collect_sql with plan as the argument, substitute the result for sql_statements.
  integer 0 and integer 0.   try,
  BLOCK_TAG_END is a string '%}'.
  return self.file.name.
  if plan_node is not contained in shown and first element of plan_node equals to app_name,
  from django.utils import six into default name space.
  if level is not None,
  delete self.name attribute from the obj.__class__ object.
  convert value, self.sep and return value of the function timestamp, concatenate them, substitute the result for value.
  decorator stringfilter,
  if shown is an empty set,
  call the function contains with 2 arguments: elt and inst, if it evaluates to true,
  otherwise if call the method simple_url_2_re.match with an argument middle evaluates to true,
  if _file is not None,
  call the function sql_all with 3 arguments: app_config, self.style and connection, substitute the result for statements.
  if TypeError, AttributeError, KeyError or ValueError exceptions are caught,
  get the value under the 'database' key of the options dictionary, substitute it for self.database.
  call the method _isdst with an argument dt from the base class of the class LocalTimezone, return the result.
  if LookupError exception is caught,
  substitute settings.TEMPLATE_STRING_IF_INVALID with obj.
  call the function force_text with an argument option_value, substitute the result for option_value.
  with name of the class type of the middleware_method instance, use it as the argument for call to the ValueError exception raise.   call the response.render() method and assign the return to the response.
  try,
  import module re.
  return an empty dictionary.
  decrement remaining by length of emitting.
  call the method parser.parse_args with argv, without the first 2 elements, substitute the result for options and args.
  return boolean False.
  do nothing.
  if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
  return boolean True.
  queryset set to qs and unpacked dictionary kwargs.   define the method initial_form_count with an argument self.
  return response.
  if not,
  raise an TemplateSyntaxError exception with an argument string "'firstof' statement requires at least one argument".
  call the method self.nodelist_true.render with an argument context, assign the result to compare_to and nodelist_true_output.
  slice the list value with unpacked list bits as an argument, return the result.
  append old_app_dir to app_dirs.
  substitute _urllib_request_moved_attributes for Module_six_moves_urllib_request._moved_attributes.
  property decorator,
  if var ends with '.',
  property decorator,
  if self.field.empty_label is not None,
  for every i and arg in enumerated iterable args,
  called with 2 arguments: s and string_only as boolean True.   if categories is true,
  read chunk_size bytes from the old_file file, substitute the result for current_chunk.
  "Starting development server at http://%(addr)s:%(port)s/\n Quit the server with %(quit_command)s.\n",   where '"%(started_at)s' is replaced with now, '%(version)s' is replaced with return value of the method self.get_version,   '%(settings)r' is replaced with settings.SETTINGS_MODULE, '%(addr)s' is replaced with self.addr if self._raw_ipv6 is true,   or with self.addr if it is false, '%(port)s' is replaced with self.port and '%(quit_command)s' is replaced with quit_command.   call the method translation.activate with an argument settings.LANGUAGE_CODE.
  substitute the result for key.   pdict is an empty dictionary.
  define the method __deepcopy__ with 2 arguments: self and memo.
  try,
  return error_dict.
  call the method fp.getvalue, return the result.
  derive the class ClearableFileInput from the FileInput base class.
  call the function is_aware with an argument o, if it evaluates to true,
  substitute the result for offset.   if not,
  return a tuple with 3 elements: self.__newobj__, tuple with an element self.__class__ and result of the method self.__getstate__.
  called with 2 arguments: singular and trimmed and result of the function join_tokens called with 2 arguments: plural and trimmed,   write the result to out.   if not,
  if not,
  define the method get_field_type with 4 arguments: self, connection, table_name and row.
  derive the class ContentNotRenderedError from the Exception base class.
  derive the class CallbackFilter from logging.Filter base class.
  remove key element from self.keyOrder dictionary.
  if prefix doesnt end with character '/',
  if self.translate is true,
  call the method django.setup.
  if not,
  call the method match.groups, assign the result to name and value, respectively.
  if value is contained in self.empty_values,
  define the function urlunquote with an argument quoted_url.
  if self._encoding is None,
  do nothing.
  __all__ is an list with an element 'luhn'.
  call the method self.full_clean.
  if val is an instance of bytes, return val, otherwise return result of the method val.encode called with an argument encoding.
  g is an instance of a class generator.BytesGenerator called with fp and mangle_from_ set to False.
  self.GET is an instance of QueryDict class created with an argument mutable set to boolean True.
  return self.
  append list containing string '--no-location' to self.msgattrib_options.
  self.xml is a instance of SimplerXMLGenerator class created with 2 arguments: self.stream and value under the 'encoding' key of the
  or path is not contained in the value under the medium key of self._css dictionary.   call the method self._css.setdefault with 2 arguments medium and an empty string, append path to the result.
  and return value of the function flatatt called with an argument final_attrs, substitute the result for output.   call the method self.render_options with 2 arguments: choices and list with an entry, value, substitute the result for options.
  for every app_config in return value of the call to the function apps.get_app_configs,
  do nothing.
  call the function loader with arguments name and dirs, assign the result to template and display_name, respectively.
  dest set to 'format' and help is a string 'Specifies the output serialization format for fixtures.'.   call the method parser.add_argument with 5 arguments: string '--indent', default set to None, dest set to 'indent',
  common_ancestor is None.
  field_notes is an empty list.
  call the method self.create_nodelist, substitute the result for nodelist.
  raise an base.DeserializationError exception with an argument string "<%s> node is missing the required '%s' attribute",
  from django.utils import datetime_safe into default name space.
  import module gettext as gettext_module.
  if method msg.get_charset evaluates to true, call the get_output_charset method on the return value of the msg.get_charset method, substitute the result for charset, otherwise if it is false, substitute the string 'utf-8' for charset.
  call the function table_name_filter with an argument table_name, if it evaluates to true,
  call the method operator.attrgetter with an argument _func_code, substitute the result for get_method_code.
  not_found is an empty list.
  x is integer 0.
  from django.core.files import locks and File into default name space.
  call the method self.strptime with arguments value and format, return the result.
  substitute the result for language_code_re.   call the function re.compile with an argument raw string '^/([\w-]+)(/|$)', substitute the result for language_code_prefix_re.
  call the method kwarg_re.match with an argument bit, substitute it for match.
  return client.
  if return value of the function normcase called with an argument final_path doesnt starts with result of the function normcase,
  try,
  call the method os.path.abspath with an argument dirpath, join the result and dirname into a file path, inset it at the beggining of self.locale_paths.
  define the method __init__ with 3 arguments: self, stream_or_string and unpacked dictionary options.
  with the result renamed to fp, perform the following:   read data from file fp, use the result as an argument for the call to the function plural_forms_re.search, substitute it for m.
  if self.limit_choices_to object is callable,
  define the method to_language with an argument self.
  call the function import_string with an argument path, substitute the result for func.
  for every key and value in items of other_dict dictionary,
  from django.test.utils import get_runner into default namespace.
  for every item in sequence,
  if not,
  try,
  if can_fail is true,
  open the file fn in read mode, with file descriptor as f,
  define the function get_language_from_path with an argument request.
  call the function codecs.open with 3 arguments: sql_file, string 'r' and  encoding set to settings.FILE_CHARSET, with the result renamed to fp,
  get the value from the options dictionary under the key 'interactive', substitute it for self.interactive.
  from django.utils.translation import ungettext and ugettext as _ into default name space.
  encoding set to None and unpacked dictionary _params.   substitute encoding for self.encoding.
  define the method bound_data with arguments self, data and initial.
  kwargs is an dictionary, populated for every k and v in result of the method self.kwargs.items with:
  define the __init__ method with arguments: self, unpacked list args and unpacked dictionary kwargs.
  if self.allow_folders is true,
  from django.utils.safestring import mark_safe, SafeData and mark_for_escaping into default name space.
  break the loop execution,
  for every filename in gen_filenames(),
  derive the class SplitDateTimeWidget from the MultiWidget base class.
  default set to True, help containing string 'Tells Django to NOT prompt the user for input of any kind.' as arguments.   call the method parser.add_argument with string '--no-initial-data', action containing string 'store_false',
  call the method self._load_post_and_files.
  call the function supports_color, if evaluates to False,
  append filename to filenames.
  derive the class InterBoundaryIter from the six.Iterator base class.
  otherwise if child.nodeType equals to child.ELEMENT_NODE,
  if not,
  derive the class SubWidget from the object base class.
  return nothing.
  self._wrapped.
  value is an instance of ConvertingList class, created with an argument value.
  convert deader to lowercase, if it is contained in self._headers return boolean True, if not, return boolean False.
  with the result renamed to fp, perform the following:   call the method fp.write with an arguments src_data.
  call the method self.port.isdigit, if it evaluates to false,
  derive the class DebugParser from the Parser base class.
  return style.
  define the method tzname with 2 arguments: self and dt.
  otherwise if name is not None and filter_func is None,
  if length of args is not equal to the sum of the lengths of params and prefix_args,
  if not evaluate the method self.form.error_class and return the result.   define the method as_widget with 4 arguments: self, widget set to None, attrs set to None, only_initial set to boolean False.
  if ImportError exception is caught,
  call the function unicodedata.normalize with 2 arguments: string 'NFKD' and thousand_sep, put the result and thousand_sep into a set,
  from django.core.exceptions import SuspiciousMultipartF into default name space.
  if children is true, copy children list to self.children, otherwise self.children is an empty list.
  if mimetype is None,
  if value under the "RUN_MAIN" key of the os.environ dictionary equals to string "true",
  lock is an instance of RLock class.
  substitute SplitDateTimeWidget for widget.
  if related is true,
  if not,
  substitute the result for plural_form_line.   if self.verbosity is greater than integer 1,
  app_configs is None.
  if lookup is false,
  return s.
  define the __init__method with arguments self and exception.
  return __wrapper__.
  for every pattern in allowed_hosts:
  define the method exists with arguments self and name.
  define the method __init__ with arguments: self, host set to None, port set to None, username set to None, password set to None,
  call the function force_str with raw data as an argument and substitute it for rawdata.
  if not_installed_models is true,
  otherwise if sep is not an instance of string type,
  if SystemExit exception is caught,
  return total_forms.
  call the function sql_create with 3 arguments: app_config, self.style and connection, substitute the result for statements.
  get models.signals name attribute, store it in obj.
  raise an NoReverseMatch exception with an argument string "Reverse for '%s' with arguments '%s' and keyword ",
  call the method self.fetch_command with first element of options.args as argument, on the result call the method print_help,
  substitute language for self.language.
  substitute root for value under the NEXT key of the link dictionary.
  from __future__ import unicode_literals into default name space.
  with arguments cookie_value and max_age set to max_age.   if signing.BadSignature exception is caught,
  sum return value of the function call time.time() and cache_timeout, use it as an argument for function call of http_date,
  if conflicts is true and self.merge is false,
  return nothing.
  decorator deconstructible,
  get the value under the lang_code key of the _BROWSERS_DEPRECATED_LOCALES dictionary, substitute it for replacement.
  call the method value.encode with an argument self._charset, use the result as an argument for the call to the bytes function,
  if _BASE64_DECODE_ERROR exception is caught,
  if serializers is None and _serializers is false,
  if not,
  check_for_language is lambda function that returns boolean True for every argument x.
  "enclosure" for 'rel', field url of value under the "enclosure" key of item dictionary for 'href',   field length of value under the "enclosure" key of item dictionary for 'length',   and field mime_type of value under the "enclosure" key of item dictionary for 'type'.   for every cat in value under 'categories' key of item dictionary,
  return an empty string.
  set name attribute of self._wrapped object to value.
  substitute settings.STATIC_URL for prefix.
  if StopIteration exception,
  append the result to old_app_dirs.   if file path old_app_dir exists,
  if seconds smaller than integer 0, sign is '-', otherwise sign is '+',
  close file file.
  call the function user_function with 2 arguments: unpacked list args and unpacked dictionary kwds, substitute the result for result.
  derive the class SortedDict from the dict base class.
  if hextet converted to hexadecimal number is smaller than hexadecimal 0, or hextet converted to hexadecimal number is smaller than hexadecimal FFFF,
  call the function get_language, split the result by '-', substitute the first element of the result for base_lang.
   from django.utils import timezone into default name space.
  define the function to_language with an argument locale.
  from django.core import checks into default name space.
  _translations is an empty dictionary.
  return self._request.
  append string 'Field renamed to remove unsuitable characters.' to field_notes.
  call the function bytes with an argument value, return the result.
  call the function _ with an argument string 'PM', return the result.
  call the function endblock_re.match with an argument t.contents, substitute the result for endbmatch.
  if as_form is true,
  call the method operator.methodcaller with 3 arguments: string 'to_bytes', integer 1 and string 'big', substitute the result for int2byte.
  if error_message is not None,
  call the method handler.file.close.
  result of the function force_text with an argument option_label, return the result.   define the method render_options with 3 arguments: self, choices and selected_choices.
  derive the class BaseMemcachedCache from base class BaseMemcachedCacheMethods and BaseCache.
  call the BaseConverter function with BASE16_ALPHABET as argument, store the result in base16.
  close file_ file descriptor.
  if length of x is equal to integer 0,
  if self.timezone is None,
  substitute code for self.code.
  and help set to a string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.   define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
  call the function re.compile with an argument raw string "_\(((?:".*?")|(?:'.*?'))\)", substitute the result for constant_re.
  call the function get_script_prefix, substitute the result for prefix.
  call the method path_rest.replace with arguments base_name and name, substitute the result for relative_dir.
  call the method gettext_module.translation with 5 arguments: domain set to string 'django', localedir set to localedir,
  self.render_context is a instance of RenderContext class.
  return result.
  call the function strftime with 2 arguments: self and fmt, return the result.
  call the method self.options.copy, substitute the result for self.json_kwargs.
  define the method __new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs.
  derive the class NumberInput from the TextInput base class.
  return token.
  derive the class Command from the BaseCommand base class.
  decorator function register.filter with an argument is_safe set to boolean True.
  where '%(field)s' is replaced with first element of unique_check, return the result.   if not,
  create a tuple out of types of v, for every v in args, extend key tuple with the result.
  if new_value equals value,
  write it to self.stdout stream.   replaces is an empty list.
  for every key and value in data.items function return value,
  multiply x by length of from_digits add the return value of method from_digits.index with digit argument, substitute the result for x.
  call the function write with an argument end.
  define the method render with an argument self.
  get 'render' attribute of template object, if it is callable,
  for every template_name in template_name_list,
  help is a tuple containing a string "Output the contents of the database as a fixture of the given "
  for every i and choice in enumerated iterable self.choices,
  define the function _get_val.
  set file pointer at the beginning of the self.file file.
  try,
  import memcache.
  substitute params without the first element for params.
  define the method close with argument self.
  derive the class TagHelperNode form the base class Node.
  if default_list is None,
  otherwise if file_name is not an instance of six.string_types and call to the function is_iterable with an argument file_name,
  try,
  raise an exception.
  if not self.initial_extra is None.   defaults is a dictionary with 4 entries: data for 'data', files for 'files', auto_id for 'auto_id' and prefix for 'prefix'.
  if length of bits is not zero,
  define the function check_for_language with an argument lang_code.
  define the method is_valid with an argument self.
  assign the settings.SECURE_PROXY_SSL_HEADER to header and value, respectively.
  substitute '%s' in string '%s-%s' with self.prefix and field_name and return it, if self.prefix is true, if not return field_name.
  if not,
  for every obj in result of the method self.queryset.all.   for every choice in self.field.choice_cache,
  help is an string "Introspects the database tables in the given database and outputs a Django model module.".
  define the method end_serialization with an argument self.
  define the method start_object with argument self and obj.
  if param is contained in unhandled_params,
  call the method loader.graph.forwards_plan with argument a tuple, with 2 elements: app_label and migration_name,
  define the method check_programs with an argument unpacked list programs.
  if incremental is true,
  substitute the result for time_str.   if six.PY2 is true,
  get the value under the key key of the self.cookies dictionary, substitute path for 'path' key of the returned dictionary.
  for every smigration in migrations_to_squash,
  call the method formats.sanitize_separators with an argument value, substitute the result for value.
  if self.timezone is true, call the method self.timezone.tzname with an argument self.data, substitute the result for name,
  call the functoin callback with an argument self.
  return _make_decorator.
  join app_config.path and string 'fixtures' into a valid file path, substitute it for app_dir.
  and unpacked dictionary connection_params.   if self.use_ssl and self.use_tls are false,
  if self.data and self.files are both False,
  get 'fields' attribute from the options object, if it exists substitute it for self.fields, if not self.fields is None.
  do nothing.
  convert the first element of the first row of targets to string, append it to the string "  Unapply all migrations: ",
  if regex is an instance of six.string_types class,
  call the function next_space_index with 2 arguments: subject and i, substitute the result for i.
  if AttributeError exception is caught.
  if errors is true,
  define the function trim_whitespace with an argument s.
  if not,
  derive the class Command from the BaseCommand base class.
  from django.utils import six into default name space.
  return the length of self.object_list.
  try,
  derive class Command from the base class AppCommand.
  if urlconf is None,
  call the function resolver.resolve_error_handler with status_code as an argument, assign the result to the callback and param_dict, respectively.
  call the method self.attrs.copy, substitute the result for attrs_plus.
  if option_value is None,
  ch2 is None.
  define the method render with 2 arguments: self and context.
  from __future__ import unicode_literals into default name space.
  msguniq_options is an list with elements: string '--to-code=utf-8'.
  try,
  value under the all_label key of the directory_created dictionary is boolean True.
  define the method ipython with an argument self.
  output_transaction is boolean True.
  call the self.load_middleware method.
  try,
  import module warnings.
  convert value into an floating point number, substitute it for value.
  throw an exception with string "unexpected call to parse_endtag" as the message.   search anywhere in the rawdata string starting from the (i+1)-th element for the _html_parser.endendeag, replace the result for match.
  substitute value under the NON_FIELD_ERRORS key of opts.error_messages dictionary for error_messages.
  return string 'nd'.
  if not,
  otherwise returns s.   call the method connection.cursor, with the result as cursor,
  import hashlib module.
  call the function force_text with an argument truncate, substitute the result for truncate.
  increment chunk by over_chunk.
  get attr attribute of self object, if it exists substitute it for nodelist, if not nodelist is None.
  define the method Z with an argument self.
  self.first is boolean True.
  if content is not None raise an error.
  define the function reraise with 3 arguments: tp, value and tb set to None.
  convert e to a string, substitute it for error_text.
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  return boolean False.
  return output.
  if "'stream'" is not contained in te converted into a string,
  if colors is true and last element of colors is contained in color_names,
  for every app_config in return value of the method apps.get_app_configs,
  position the file pointer at the start of the self.file file.
  for every func and args in self.filters,
  call the method f.seek with an argument integer 0.
  raise an NoReverseMatch exception with an argument string "%s is not a registered namespace inside '%s'",
  substitute smtplib.SMTP_SSL for connection_class if self.use_ssl is true, if not substitute smtplib.SMTP for connection_class.
  if not,
  buffer_ is None.
  remove the first element from result.
  from django.utils.html import conditional_escape and format_html into default name space.
  import module mimetypes.
  if not,
  delete _urlconfs.value.
  for every choice in value,
  try,
  call the method __init__ from the base class of the class AssignmentNode, with 3 arguments: takes_context, args and kwargs.
  requires_system_checks is boolean False.
  substitute its __name__ field for function name, if it doesnt exists substitute func.__name__ for function_name.   call the function generic_tag_compiler, params set to params, varargs set to varargs, varkw set to varkw, defaults set to defaults,
  if app_config.models_module is None,
  substitute content.name for name.
  call the function user_function with 2 arguments: unpacked list args and unpacked dictionary kwds, substitute the result for result.
  substitute level for self.level.
  substitute template for self.template_name.
  raise an SyntaxError with an argument string "Translation blocks must not include other block tags: %s (%sline %d)",
  from django.utils.timezone import is_aware into default name space.
  if i is greater than or equal to the result of the method self.initial_form_count,
  raise an TemplateSyntaxError exception with an argument string "'regroup' tag takes five arguments".
  _func_code is a string "func_code".
  substitute fields for self.fields.
  "pulls out all strings marked for translation. It creates (or updates) a message "   "file in the conf/locale (in the django tree) or locale (for projects and "   "applications) directory.\n\nYou must run this command with one of either the "   "--locale, --exclude or --all options.".    requires_system_checks is boolean False.
  tablename and return value of the function force_text called with an argument e, respectively.   for every statement in index_output,
  substitute file_name for self.file_name.
  call the function re.compile with an argument raw string "^((?:'[^']*'|[^'])*?)--.*$", substitute the result for comment_re.
  join package.__name__ and module_name into a string separated with '.', substitute it for name.
  if self.body is true,
  import module warnings.
  with call to the function transaction.atomic with using set to connection.alias and savepoint set to connection.features.can_rollback_ddl, as arguments.
  if length of t is greater than integer 1,
  if not,
  if not,
  return exclude.
  call the self._get_pages method with 3 arguments: self.object_list from the bottom to the top index, number and self, return the result.
  append string '</optgroup>' to output.
  call the function dateformat.format with 2 arguments: value and result of the function get_format called with 2 arguments:
  define the method strftime with 2 arguments: self and fmt.
  call the method content.decode with an argument string 'utf-8', substitute it for content.
  from django.utils.encoding import force_st into default name space.
  if use_l10n is true, or if use_l10n is None and settings.USE_L10N is true,
  define the function tz with an argument request.
  return text.
  if not,
  while i is lesser than length of subject and i-th element of subject is not equal to p-th element of subject,
  return hard copy of self.keyOrder elements.
  if self.field.required is true and self.form has an attribute 'required_css_class' ,
  evaluate the method s.getvalue, return the result.
  get the next element of iterable self, substitute it for chunk.
  substitute smart_bytes for smart_str.
  self._raw_ipv6 is boolean False.
  derive the class ChoiceInput from the SubWidget base class.
  define the _fd function with argument f.
  call the method self._create_attachment with an unpacked list attachment as an argument, use the result as an argument for the call to the msg.attach method.
  import module warnings.
  if not,
  call the method handler.upload_complete, substitute the result for retval.
  call the function get_library with an argument taglib, substitute the result for lib.
  from __future__ import unicode_literals into default name space.
  if messages is not an instance of the ValidationError class,
  value under the comment_lineno_cache key of the lineno_comment_map dictionary is an empty string.
  from django.utils.six.moves.urllib.parse import urljoin into default name space.
  get 'EMAIL_FILE_PATH' from the settings, if it exists, substitute it for self.file_path, if not substitute None for self.file_path.
  substitute the result for value under the field key of the self._errors dictionary.   if not,
  'Enter a list of values.' for 'invalid' and return value of the function _ called with an argument string,   'Enter a complete value.' for 'incomplete'.   define the method __init__ with arguments self, fields set to an empty ilst, unpacked list args and unpacked dictionary kwargs.
  for every i and widget in enumerated iterable self.widgets, call the function widget.value_from_datadict with 3 arguments: data,
  if pk.editable is true, or pk.auto_created is true or pk is an instance of AutoField class, or if pk.rel is true,
  call the method self.get_resolved_arguments with an argument context, substitute the result for resolved_args and resolved_kwargs.
  flush the output buffer of the self.stdout object.
  define the function urlencode with 2 arguments value and safe set to None.
  do nothing.
  parser is an instance of CommandParser class, created with 3 arguments: self, prog as a string created by joining:
  if not,
  write the string "  Creating tables...\n" to the standard output.
  get the id of the self object, use it as a key to obtain the value from the memo dictionary, substitute self with it.
  return nothing.
  join result of the parts function into a bytes string, substitute it for out.
  define the method open with argument self.
  define the function inlineformset_factory with 20 arguments: parent_model, model, form set to ModelForm,
  if middle starts with opening,
  from django.core.validators import validate_ipv4_address.
  call the function os.path.expanduser with an argument pythonrc, substitute the result for pythonrc.
  if it does append it to targets list.   if not,
  call the method get_unique_error_message from the base class of the class BaseInlineFormSet, with an argument unique_check, return the result.
  if field_value has an attribute '__iter__' and is not an instance of six.text_type object,
  try,
  define the method run_checks with self class instance, app_configs defaulting to None, tags defaulting to None as argument.
  if string '()' is contained in config,
  if format_module_path is an instance of six.string_types,
  define the function dec with an argument func.
  if s is an instance of the subclass Exception,
  define the method tokenize with an argument self.
  if chunk_size is false,
  define the method handle_raw_input with arguments: self, input_data, META, content_length, boundary and encoding set to None.
  define the function add_to_builtins with an argument module.
  call the method self.create_parser with arguments prog_name and subcommand.
  call the method self.write_migration_files with an argument changes.
  call the method copy.deepcopy with 2 arguments: self._wrapped and memo, return the result.
  define the method translate_token with 2 arguments: self and token.
  set opname attribute of cls object to opfunc.
  otherwise if bmatch is true,
  define the method __str__ with an argument self.
  try,
  for every supported_code in _supported,
  call the function formats.localize_input with 2 arguments: value and self.format if true, if not,
  multiply 10 to the power of 200, with itself, substitute the result for pos_inf.
  call the function prepare_js_for_gettext with an argument src_data, substitute it for src_data.
  do nothing.
  get the value under the key of the dictionary self, if key does not exists return evaluated result of the function Morsel, substitute it for M.
  substitute the list of results for values.   return an instance of a class IfChangedNode, created with 3 arguments: nodelist_true, nodelist_false and unpacked list values.
  call the method self.validate_key with argument key.
  substitute '%s' in 'Internal Server Error: %s' with request.path, exc_info set to exc_info,
  derive the class HttpRequest from the object base class.
  call the method closable.close.
  get the value under the settings.LANGUAGE_COOKIE_NAME key of the request.COOKIES dictionary, substitute it for lang_code.
  from django.core.exceptions import ValidationError into default name space.
  evaluate the method self._has_expired with argument key, if it as False,
  define the function format with 6 arguments: number, decimal_sep, decimal_pos set to None, grouping set to integer 0,
  from UserList import UserList into default namespace.
  define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.
  call the method unicodedata.normalize with 2 arguments: string 'NFKD' and value, encode the result with 2 arguments: string 'ascii',
  subtract i from len_values, substitute the result for value under the 'revcounter' key of the loop_dict dictionary.
  'startapp' and 'startproject'.   try,
  if field.rel.through._meta.auto_created is true,
  if except UnicodeDecodeError exception is caught,
  if ttl is not None,
  try,
  define the method setlistdefault with 3 arguments: self, key and default_list set to None.
  call the method hashlib.sha1 with an argument secret appended to key_salt, call the method digest on the result, return the result.
  define the method cfg_convert with 2 arguments: self and value.
  define the method serialize_headers with an argument self.
  for model in router.get_migratable_models method return value, called with 3 arguments: app_config, connection.alias,
  format self.year_field string with name, use it as the key for the data dictionary, substitute the result for y.
  define the method namespace_dict with an argument self.
  do not perform the following only if bits.scheme and bits.netloc are both true,
  derive the class SuspiciousMultipartForm from the SuspiciousOperation base class.
  set value under the 'timeout' key of the connection_params to self.timeout.
  if self.is_bound is false,
  substitute lib for value under the library_name key of libraries dictionary.
  get the value under the 'domain' key of the options dictionary, substitute it for self.domain.
  if val is None,
  call the function normalize_newlines with an argument value, substitute the result for value.
  define the messages with an argument self.
  define the function smart_urlquote with an argument url.
  define the function cleanup_url with an argument url.
  if Exception exception is caught,
  call the method self._clean_fields.
  extend basedirs list with settings.LOCALE_PATHS.
  define initialization method __init__ with self class instance, level, msg, hint defaulting to None, obj defaulting to None and if defaulting to None as arguments.
  attrs is a empty list.
  get format_type attribute of the settings object, return it.
  define the method __init__ with an argument self.
  call the function remove_tags with 2 arguments value and tags, return the result.
  call the method parser.parse with an argument tuple with an element string 'endspaceless', substitute the result for nodelist.
  substitute NumberInput for widget.
  try,
  derive the class SplitHiddenDateTimeWidget from the SplitDateTimeWidget base class.
  define the method initial_forms with an argument self.
  call the method self.show_migration_list with connection as first argument, as second argument use value under the 'app_label' key of options dictionary,
  from django.utils.safestring import mark_safe into default name space.
  call the function post_callback with an argument retval, substitute the result for newretval.
  if kwarg is true,
  if vale is not an instance of ConvertingDict and value is an instance of dict type,
  dest as a string 'all' default as boolean False and help as a string 'Updates the message files for all existing locales.'.   call the method parser.add_argument with 5 arguments: string '--extension', string '-e', dest set to string 'extensions',
  if basedirs is empty,
  if css_classes is true,
  multiply delta.days with an integer 86400 add to the result delta.seconds, if the result is greater than integer 0,
  second contains: string 'InternalHigh and ULONG_PTR, third: '_offset_union' and _OFFSET_UNION, forth 'hEvent' and HANDLE.   call the function POINTER with argument OVERLAPPED, substitute the result for LPOVERLAPPED.
  call the function custom_sql_for_model with 3 arguments: model, style and connection, extend the output with the result.
  return new_class.
  call the method self.common_logger_config with 3 arguments: root, config and incremental.
  raise TemplateSyntaxError("%r must be the first tag in the template.", where '%s' is replaced with node.
  call the function exhaust with an argument self._input_data.
   substitute value under the KEY key of the root dictionary for oldkey.
  derive the class JsLexer from the Lexer base class.
  if settings.USE_L10N is true, substitute settings.USE_THOUSAND_SEPARATOR for use_grouping,
  call the function allow_lazy with 2 arguments: normalize_newlines and six.text_type, substitute the result for normalize_newlines.
  call the method handler.startElement with 2 arguments: string 'entry' and result of the function self.item_attributes,
  if field.rel.through._meta.auto_created is true,
  get the value under the 'database' key of the options dictionary,
  call the method msg.as_bytes, substitute the result for msg_data.
  decorator deconstructible,
  decompress is boolean True.
  substitute '%s' in string '%s_%s' with id_ and first_select, return it.
  from django.views import debug into default name space.
  try,
  use global variable _localtime.
  append key to self.keyOrder.
  import module time.
  append self.pointer to self.backout.
  return self.msg formatted with a tuple, with elements generated from return value of the function force_text with 2 arguments:
  if self.active_readers equals integer 0 and self.waiting_writers is not equal to integer 0,
  otherwise if '=' is contained in part,
  if not,
  if self.match is not None,
  otherwise if func is callable,
  define the method bpython with an argument self.
  if expires is false,
  and re.VERBOSE, substitute the result for accept_language_re.   call the function re.compile with 2 arguments: raw string '^[a-z]{1,8}(?:-[a-z0-9]{1,8})*$' and re.IGNORECASE,
  define the function _get_foreign_key with 4 arguments: parent_model, model, fk_name set to None and can_fail set to boolean False.
  call the function digest, substitute the filed digest_size of the result for hlen.
  derive the class _OFFSET_UNION from the Union base class.
  for every table_name in return value of the method connection.introspection.table_names called with an argument cursor,
  call the nethod self._isdst with an argument dt, if it evaluates to true,
  call the function ugettext with an argument string "%s TB", substitute '%s' with the result of the call to the function,
  return ip_str.
  if field.help_text is true,
  define the function split_url with an argument url.
  define the method u with an argument self.
  replace every occurrence of '\\' in s with '\\\\'.
  return an empty string.
  formated with value under 'target' key of config dictionary and e.   otherwise if klass is a subclass of logging.handlers.SMTPHandler and string 'mailhost' is contained in config,
  if ret is true.
  return boolean True.
  if not,
  if self.m2m.data and save_m2m are true,
  import module re.
  define the function build_request_repr with arguments: request, path_override set to None, GET_override set to None,
  if not,
  skip this loop iteration.
  get the directory name of filename, substitute it for dirname.
  call the function middleware_class with 2 arguments: unpacked list m_args and unpacked dictionary m_kwargs,
  define the method __init__ with 7 arguments: self, file set to None, name set to None, content_type set to None, size set to None, charset set to None and content_type_extra set to None.
  call the function mark_safe with an argument data, return the result.
  append ':' and ipv4_address to result.
  substitute first, second and second elements of bits for yes, no, maybe, respectively.
  call the method g.flatten with arguments self and unixfrom set to unixfrom.
  close file_ file descriptor.
  raise an ImportError exception.
  call the function inline_re.match with an argument t.contents, substitute the result for imatch.
  return context_extras.
  substitute '%s' in the string '%%prog %s [options] %s' with subcommand and self.args, respectively, substitute it for usage.
  return value.
  from django.utils import six into default name space.
  call the function sys.exc_info with an argument exc_info.
  raise an ValueError exception with an argument string 'Unable to add handler %r: %s' formated with h and e.
  separated with string ', ', substitute '%s' with self.sequence, substitute '%d' with length of self.nodelist_loop,   substitute '%s' with reversed_text.   define the method __iter__ with an argument self.
  substitute return value of call to the function _set_response_etag with response as an argument, for response.
  call the mimetypes.guess_type with an argument filename, assign the result to the mimetype and _, respectively.
  a dictionary with 18 pairs of dictionary value and string keys for DARK_PALETTE,   and a dictionary with 18 pairs of dictionary value and string keys for LIGHT_PALETTE.   substitute DARK_PALETTE for DEFAULT_PALETTE.
  define the function center with 2 arguments value and arg.
  slice the rawdata to obtain substring from i-th to j-th element, use it as the argument for the method call to the self.handle_data.
  substitute value under the f.name key of the labels dictionary for value under the 'label' key of kwargs dictionary.
  call the method self.validate_name with 2 arguments: app_name and string 'app'.
  get the value under the 'interactive' key of the options dictionary, substitute it for self.interactive.
  raise an TemplateSyntaxError exception with an argument string "'%s' tag with name '%s' appears more than once",
  substitute connection.queries for value under the 'debug' key of the context_extras dictionary.
  define the method push with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  import module datetime.
  from django.contrib.auth import get_user_model into default name space.
  define the function select_template with 2 arguments: template_name_list and dirs set to None.
  call the function six.reraise with 3 arguments: UnreadablePostError, UnreadablePostError instantiated with unpacked list e.args,
  code set to string 'invalid_choice' and params as a dictionary with an entry, val for 'value'.   call the method self.run_validators with an argument value.
  get the value under the 'dry_run' key of the options dictionary, if the key exists substitute it for self.dry_run,
  from django.core.files import uploadhandler into default name space.
  if 'widget' key of the kwargs dictionary doesnt exists assign it widget field of the base class of the IntegerField class value.
  if reason is not None,
  substitute number for value under the 'number' key of the kwargs dictionary.
  if not,
  value under the "RUN_MAIN" key of new_environ dictionary is a string 'true'.
  if not,
  call the method self.empty_variable with an argument token,
  substitute app_namefor command.
  get field.name attribute of obj, convert it to a string, substitute it for the value under the filed.name key of self._current dictionary.
  call the function force_text, with the function get_current_timezone_name and errors set to string 'ignore' as arguments,
  if self.message_context is true,
  from collections import OrderedDict into default name space.
  for every i in self.years append tuple containing i and i elements into a list, substitute the resulting string for choices.
  define the method __init__ with, self, server, params, library, value_not_found_exception as arguments.
  if not,
  substitute length of digittuple for digits.
  e.args is a tuple containing string "Could not load %(app_label)s.%(object_name)s(pk=%(pk)s): %(error_msg)s,
  return func.
  from django.core.exceptions import ValidationError into default name space.
  if latest_date is None or item_date is greater than latest_date,
  root dictionary values under the KEY and RESULT keys are both None.
  value under the 'feed_url' key of the self.feed dictionary for 'href'.   if value under the 'language' key of the self.feed dictionary is not None,
  if ValidationError exception is caught,
  for every resultclass in resultclasses,
  and instance of TimeInput class, created with 2 arguments: attrs set to attrs and format set to date_format.   call the method __init__ from the base class of the class SplitDateTimeWidget, with 2 arguments: widgets and attrs.
  return self.__language.
  return None.
  call the method time_str.decode with an argument string 'utf-8', substitute the result for time_str.
  value is boolean True.
  return field.to_python.
  return result.
  if p2.scheme, p2.hostname and p2.port equals p1.scheme, p1.hostname and p1.port, respectively, return boolean True, otherwise return boolean False.
  decorator function register.filter with an argument is_safe set to boolean False.
  call method __init__ from the base class of the class MemcachedCache with arguments: server, params,
  define the method end_serialization with an argument self.
  call the method self._assert_mutable.
  default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid date/time.' for 'invalid'.
  define the method _start_relational_field with arguments self and field.
  call the function get_supported_language_variant with an argument lang_code, return the result.
  return kwargs.
  if the result is equal to the result of the call to the function force_text with data_value as an argument, return boolean True,   otherwise return boolean False.   derive the class ModelMultipleChoiceField from the ModelChoiceField base class.
  return _translations dictionary value, under the language key.
  derive the class ImageField from the base class FileField class.
  otherwise html_message is None.   call the method mail.mail_admins with 5 arguments: subject, message, fail_silently as boolean True, tml_message as html_message,
  call the get method with an argument string 'tried' on the first element of the e.args, substitute the result for sub_tried.
  increment i by integer 1.
  put to into a list, assign it to self.to.
  if upto is not equal to start.
  substitute allow_files and allow_folders for self.allow_files and self.allow_folders.
  call the method __getitem__ with an argument key from the base class of the class DictWrapper, substitute the result for value.
  if TypeError or ValueError exceptions are caught,
  if cnt is true and remained of dividing cnt with grouping is zero,
  return ip_str.
  match the rawdata from the position i, with _html_parser.endtagfind pattern, assign the result to the match.
  call the method self.create_select with 6 arguments: name, self.year_field, value, year_val, choices and self.year_none_value,
  from django.utils.safestring import mark_safe into default name space.
  call the method host_validation_re.match with an argument host.
  from xml.sax.expatreader import ExpatParser as _ExpatParser into default name space.
  self.keyOrder is an empty list.
  otherwise if value is an instance of datetime.time,
  return an instance of TemplateSyntaxError class with an argument msg.
  if e.is_serious method evaluates to true, call the function color_style, on the result call the method ERROR with result of the  force_str called with an argument e, if not call the function color_style on the result call the method ERROR with result of the  force_str called with an argument e, for every e in issues, formatted is a tuple containing the previous result.
  try,
  in string '%s_%d', replace '%s' with new_name and '%d' with num, while the result is contained in used_column_names,
  name set to function_name, and takes_context set to takes_context and node_class set to SimpleNode.   substitute func.__doc__ for compile_func.__doc__.
  set value under the 'stream' key of kwargs dictionary to None.
  if ImportError exception is caught,
  use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.   call the method writer.as_string, append newline to the result, write it to self.stdout.
  call the klass method with fail_silently set to fail_silently and dictionary arguments kwds as arguments, return the result.
  call the method regex_match.group with an argument integer 1, substitute the result for lang_code.
  both_after is an list with an element instance of Tok class, created with 2 arguments: string 'other' and raw string '.'.
  substitute length and mime_type for self.length and self.mime_type.
  raise an EmptyPage exception with string 'That page contains no results' as an argument.
  call the method self._archive.list.
  from django.utils.timezone import is_aware and utc into default name space.
  potfiles is an empty list.
  define the method __str__ with an argument self.
  if first two elements of sys.version_info equal to integers 2 ant 7, respectively,
  define the function unordered_list with 2 arguments value and autoescape set to None.
  if token.token_type equals TOKEN_BLOCK and token.contents equals endtag,
  if inplural is true,
  where '%s' is replaced with first upto elements of token string, token string elements from upto to start index,   and token string elements from start index to the end.   if var_obj is None,
  append self to context.dicts.
  root is a list with elements: root, root, None and None.
  if TypeError exception is caught,
  call the method fixture_name.rsplit with 2 arguments: character '.' and integer 2, substitute the result for parts.
  for every handler in self._upload_handlers,
  call the msg.attach with an argument body_msg.
  if i is equal to len_values decremented by 1, value under the 'last' key of the loop_dict dictionary is boolean True, otherwise it is False.
  substitute cls.__text_cast for cls.__str__.
  prefix set to None, queryset set to None and unpacked dictionary kwargs.   substitute queryset for self.queryset.
  self._regex_dict is an empty dictionary.
  call the method self.target.resolve with 2 arguments: context and boolean True, substitute it for obj_list.
  raise an TemplateSyntaxError exception with an argument string, "'%s' tag takes at least 2 arguments and the second last argument
  call the function get_callable with an argument callback, return the result and an empty dictionary.
  __Y is a raw string '(?P<year>\d{4})'.
  if self.timezone is true,
   if t.token_type equals TOKEN_BLOCK,
  if LookupError exception is caught,
  raise an CommandError exception with an argument string, "Incompatible values of 'leave_locale_alone' "
  substitute model._meta for opts.
  define the method utcoffset with 2 arguments: self and dt.
  substitute sysid for self.sysid.
  substitute callable for callable.
  call the cursor.execute method with sql as argument.
  define the method tell with an argument self.
  raise an base.DeserializationError exception with string "<field> node is missing the 'name' attribute" as argument.
  consume_next is boolean True.
  languages set to a list with an element self.__locale, codeset set to a string 'utf-8' and fallback set to use_null_fallback,   substitute the result for translation.   if translation has an attribute '_catalog',
  call the function make_middleware_decorator with an argument middleware_class, call the result, return the new result.
  get value under the 'filters' key of the config dictioanry, if it exists substitute it for filters, if not filters is None.
  if chunks is false,
  convert return value of the function time.time to an integer, increment timeout by it.
  for every i and tuple containing dirpath and f, in enumerated list of locations,
  remove symlink_path file.
  from django.core.validators import EMPTY_VALUES into default name space.
  try,
  define the method words with 4 arguments: self, num, truncate set to None, html set to boolean False.
  call the function force_bytes with an argument password, substitute the result for password.
  return boolean False.
  if _default is None,
  if data is boolean False,
  from django.core.management.base import BaseCommand and CommandError into default name space.
  define the function static with an argument request.
  autodetector is an instance of the MigrationAutodetector class, created with 3 arguments: result of the method loader.project_state,
  for every o in opts,
  if autoescape is true and safe_input is false,
  break from the smallest enclosing loop.
  args is an empty list.
  call the function format_html with 3 arguments: string '<ul class="{0}">{1}</ul>', self.error_class and return value of the function,
  if self.data.minute equals integer 0 and self.data.hour equals integer 0,
  substitute token.source for e.django_template_source.
  self.method is None.
  derive the class LoaderOrigin from the Origin base class.
  from django.db.migrations.executor import MigrationExecutor into default name space.
  output is an empty list.
  call the method handler.addQuickElement with 2 arguments: string 'uri' and value under the 'author_link' key of the self.feed dictionary.
  return result.
  if args is true,
  substitute error_messages under the message.code key of error_messages dictionary for message.message.
  split string s once, with '=' as delimiter, substitute the result for t.
  for every locale in locales,
  define the method value_from_datadict with 2 arguments: self, data, files and name.
  decorator stringfilter,
  mapped_tokens is an empty list.
  if 'args' is contained in options,
  skip this loop iteration.
  for every f in file_field_list,
  if viewname is not an instance of the six.string_types object,
  _ with an argument string "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.",   and string 'invalid'.   call the re.compile function with an argument raw string '^(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}$',
  define the function find_filter with 2 arguments: self and filter_name.
  substitute self for value.configurator.
  if exception OSError occurred,
  if cache is None,
  if block_context is None,
  for every tag in tags, are false,   for every tag in tags, if return value of the method checks.tag_exists called with an argument tag, evaluates to false,
  if not,
  return t.
  if loader is not None,
  call the function force_text with an argument value, substitute the result for value.
  call the method self.extra_headers.get with string 'From' and self.from_email as arguments, substitute the result for value under the 'From' key of msg dictionary.
  define the function rjust with 2 arguments value and arg.
  match rest string with self.DOT_PATTERN regex, substitute the result for m.
  derive the class SyndicationFeed from the object base class.
  define the method add_arguments with self class instance and parser as the arguments.
  property decorator,
  from django.db.migrations.loader import MigrationLoader into default name space.
  if Exception, renamed to e, exception is caught,
  substitute value for value under the field.name key of the self._current dictionary.
  used_column_names is an empty list.
  substitute col_name for value under the 'db_column' key of the field_params dictionary.
  return None.
  define the function handle_m2m with an argument value,
  if self.language is not None,
  define the method total_error_count with an argument self.
  derive the class RequestContext from the Context base class.
  call the function linebreaks with 2 arguments value and autoescape, use the result as an argument for the call to the mark_safe,
  substitute the value under the command key of self.tags dictionary for compile_func.
  call the method self.connection.close.
  otherwise, value under the 'max_digits' key of the field_params is integer 10.   if sixth element of row is not None, substitute it for value under the 'decimal_places' key of the field_params,
  DELETION_FIELD_NAME is a string 'DELETE'.
  define the method clean with arguments self and value.
  do nothing.
  append filename to the self.attachments list.
  filesize_number_format is an lambda function with an argument value, return value is the result of the method formats.number_format,
  call the method self.handle_file_complete with arguments old_field_name, counters.
  raise CommandError exception with string "This script should be run from the Django Git checkout or your project or app tree, or with the settings module specified.", as argument.
  join elements of quant into a string, split it by string ',', substitute the result for values.
  increment length of template_dir by one and substitute it for prefix_length.
  raise an ValidationError with 2 arguments: value under the 'max_length' key of the self.error_messages dictionary and code set to 'max_length'.
  if field.serialize is true,
  if decimal_separator is contained in value,
  delete first element of bits.
  daemonize is boolean True.
  convert value into a iterator, substitute the result for self._iterator.
  if site is contained in sites2,
  run_syncdb is boolean True.
  if self._read_started is true and self doesnt have an '_body' attribute.
  return an empty string.
  try,
  substitute sixth element of bits for var_name.
  message_context is None.
  return sys.modules dictionary value under the name key.
  try,
  if self.verbosity is integer 1,
  add plan_node to the shown set.
  use the result as an argument for the call to the function datetime.fromtimestamp, return the result.   define the function get_storage_class with argument import_path=None defaulting to None.
  if self does not has an '_post' attribute.
  return klass.
  substitute new_name, without the last 3 elements for new_name.
  insert tagname at the beginning of open_tags.
  return model_list.
  if it exists return the second element of the result, if not, return alternate.   define the method set_cookie with 9 arguments: self, key, value set to an empty string, max_age set to None, expires set to None,
  define the method encode with self class instance and i as arguments.
  substitute i-th element of list for title.
  if not,
  db_module is a string 'django.db'.
  define the method popitem with an argument self.
  if exception OSError, renamed to e, occurred,
  instantiate class Module_six_moves_urllib_robotparser with an argument, string ".moves.urllib.robotparser" appended to __name__,
  get the value under the self.name key of the self.form.errors dictionary, if the key exists, return it,
  replace every occurrence of '\\' in url with '/'.
  do nothing.
  from lib2to3 import fixer_base into default name space.
  return an instance of IncludeNode class, created with 3 arguments: return value of the method parser.compile_filter,
  if tuple current_version elements are greater or equal to (3, 4), respectively,
  if settings.USE_L10N is true,
  USE_INOTIFY is boolean False.
  return a instance of the class Page, created with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  derive the class Loader from the BaseLoader base class.
  substitute RadioFieldRenderer for renderer.
  if mw_instance has an attribute named 'process_exception'.
  return data.
  if not,
  if os has an attribute 'utime',
  where '%s' is replaced with parse_until elements joined into a string, separated with ', '.   define the method compile_filter_error with 3 arguments: self, token and e.
  do nothing.
  try,
  substitute func for self.func.
  i is integer 0.
  return boolean True.
  '\\u0027' for integer representation of string '\', '\\u0022' for integer representation of string '"',   '\\u003E' for integer representation of string '>', '\\u003C' for integer representation of string '<',   '\\u0026' for integer representation of string '%', '\\u003D' for integer representation of string '=',   '\\u002D' for integer representation of string '-', '\\u003B' for integer representation of string ';',   '\\u2028' for integer representation of string '\u2028' and '\\u2029' for integer representation of string '\u2029'.   for eery z in range of integers from 0 to 31, update _js_escapes dictionary with '\\u%04X' formated with z,
  call the method self.add_fields with arguments form and i).
  substitute list with an element block_name for parser.__loaded_blocks.
  self.feed is an dictionary with 13 initial entries, result of the function to_unicode called with an argument title for 'title',
  define the function yesno with 2 arguments value and arg set to None.
  if value under the 'socket' key of the options dictionary is false and values under the 'host' and 'port' keys of the options dictionary are true,
  call the method self.to_python with an argument value, strip the whitespaces from the both ends of the result and substitute it for value.
  define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  import module os.
  derive the class DebugLexer from the Lexer base class.
  substitute fcntl.LOCK_NB for LOCK_NB.
  call the function smart_text with an argument auto_id, format the result with self.html_name, return it.
  substitute urlconf_name for _urlconfs.value.
  return f.
  derive the class DebugVariableNode from the VariableNode base class.
  define the method __init__ with 4 arguments: self, content_type set to None, status set to None, reason set to None.
  define the method handle with 3 arguments: self, unpacked list labels and unpacked dictionary options.
  call the method formats.time_format with 2 arguments: value and arg, return the result.
  from django.utils.six.moves import xrange into default name space.
  if cleaned_data is not None,
  call the function date_format with 2 arguments: value, string 'DATETIME_FORMAT' and use_l10n as use_l10n, return the result.
  substitute model._default_manager for objects.
  substitute length of values for len_values.
  call the method dig2.digest, substitute the result for u.
  if self.LibraryValueNotFoundException exception is caught,
  define iterator method __iter__ with self as the argument.
  try,
  from django.utils.encoding import smart_text into default name space.
  return result and result_args.
  from binascii import Error as BinasciiError into default name space.
  call the method self.choice_input_class with 5 arguments: self.name, self.value, return value of the method self.attrs.copy,
  if UnicodeEncodeError exception is caught,
  substitute args for key.
  from django.core.management.utils import handle_extensions, find_command and popen_wrapper into default name space.
  call the __getstate__ method from the base class of the class SimpleTemplateResponse, substitute the result for obj_dict.
  media is an instance of Media class.
  call the method parser.next_token, substitute the result for token.
  if size is None,
  for bit in self.lookups,
  call the method query.lists, substitute the result for query.
  return new_name, field_params and field_notes.
  if message_context is true,
  if not,
  derive the class TimestampSigner from the Signer base class.
  return self.content
  call the connection.introspection.table_names with tables as argument, store the result in seen_models.
  if answer is false,
  from django.utils.translation import templatize into default namespace.
  return result
  evaluate method self.literal_regex.match with an argument domain_part, substitute the result for literal_match.
  statement is an empty list.
  if words is not empty and length is smaller than or equal to integer 0,
  confirm is a string 'yes'.
  from django.core.management.color import no_style into default name space.
  derive the class WSGIRequest from base class http.HttpRequest.
  if self.is_bound is false,
  call the os.path.splitex with argument name, assign the result to name and ext, respectively.
  substitute '%s' in string "%s_%s%s" with: file_root, next(count) and file_ext, join the dir_name and previous string into a valid file path, substitute it for name.
  if IOError exception is caught,
  if handler has an attribute 'file',
  return integer -1.
  substitute x for k and boolean True for v.
  get executor.loader.graph.nodes list item at the index of the first element of targets list, get the value under the 'backwards' key of options dictionary, put previous two elements is a tuple, tuple is contained in a plan list.
  substitute '%s' in string '%s %s' with the elements of value converted into a tuple, substitute the result for value.
  call the function local, substitute the result _urlconf.
  if default_kwargs exists, substitute it for self.default_kwargs, otherwise self.default_kwargs is an empty dictionary.
  append list containing string '--no-location' to self.msgmerge_options.
  substitute it for max_age, if not, max_age is integer 0.   if not,
  call the method self.field.widget.value_from_datadict with 3 arguments: self.form.data, self.form.files, self.html_name, return the result.
  if not self.to_field is None.   if self.parent_instance is not None,
  if not,
  try,
  and unpacked dictionary kwargs.   delete the value under the 'content-type' key of the self dictionary.
  define the _set_post method with self class instance and post as the arguments.
  if length of bits is not equal to integer 2,
  for every f in post_sql_fields,
  define the method _send with arguments self and email_message.
  define the method __new__ with 4 arguments mcs, name, bases and attrs.
  call the function re.compile with an argument raw string '^\w{3}, %s %s %s %s GMT$' formated with __D, __M, __Y and __T,
  return self.tag_function.
  create a tuple out of types of v, for every k and v in sorted_items, extend key tuple with the result.
  call the method self._callback_strs.update with an argument pattern._callback_strs.
  replace "%s" from the string ' class="%s"' with css_classes, substitute it for html_class_attr.
  otherwise if value under the 'CONTENT_TYPE' key of hte self.META dictionary starts with 'application/x-www-form-urlencoded',
  if KeyError exception is caught,
  from django.core.exceptions import ImproperlyConfigured and ViewDoesNotExist into default name space.
  if value is None,
  return None.
  convert protocol to lowercase, use it as a key to get a value from the ip_address_validator_map dictionary, return it.
  if pks is true,
  if self.to_field_name is true,
  and 'request with value request, respectively use the previous as the arguments for the call to the logger.warning function.   if settings.DEBUG is True,
  define the function get_current_timezone_name.
  call the method handler.addQuickElement with 2 arguments: string 'rights' and value under the 'item_copyright' key of the item dictionary.
  call the mail.send method with fail_silently set to fail_silently as argument.
  import module base64.
  self._app_dict is an empty dictionary.
  import module random.
  convert keys of dictionary self.dict into a iterable, return it.
  import module binascii.
  if result is true,
  substitute file_name for self.file_name.
  call the method blankout with 2 arguments: part and 'P', write the result to out.
  remove dirname key from dirs.
  while start is lesser than end.
  if value under the 'unique_id' key of the item dictionary is not None,
  if ValueError exception is caught,
  if e.args list first element starts with string "Error -5",
  to the function timedelta called with an argument seconds as negative time.altzone, return the result.   if not,
  from django.conf import settings into default name space.
  call the method app_config.get_models with include_auto_created set to boolean True, substitute the result for models.
  call the __init__ method with an argument name from the base class of the MovedModule class.
  join dir_ and return value of the function os.path.dirname called with an argument fixture_name into a valid file path,
  if not substitute field.initial for initial.   call the method filed.clean with arguments value and initial, substitute the result for value.
  define the function ljust with 2 arguments value and arg.
  return wrapper.
  while i is lesser than num_existing and first pflen elements of i-th element of existing equals prefixed,
  append string '.' to result.
  assign the value of the dictionary color_settings under the key role to format, if key doesnt exist assign the empty dictionary.
  and returns x striped of the surrounding whitespaces, extend the extra_files with the mapped list.   if self.verbosity is greater or equal to integer 2,
  if not,
  called with an argument lang_code is true,   return lang_code.
  and unpacked dictionary kwargs.   define the method new_file with arguments: self, file_name, unpacked list args and unpacked dictionary kwargs.
  DNS_NAME is a instance of CachedDnsName class.
  get the value under the state key of the regexes dictionary, call the method finditer on the result with 2 arguments: text and start,
  substitute _upload_handlers for self.__upload_handlers.
  default set to DEFAULT_DB_ALIAS, help containing string 'Nominates a database to synchronize. Defaults to the "default" database.' as arguments.   call the method parser.add_argument with string '--fake', action containing string 'store_true', dest set to string 'fake',
  define the method add_arguments with self and parser.
  join m and n into a string, separated by '.', substitute the result for lookup_view_s.
  substitute string "Enter at least one %s.", with '%s' replaced by label, for missing_args_message.
  if init_path is not a file,
  evaluate function Lock() assign the result to initLock.
  if migrations_directory is not a directory,
  call the method one_percent_re.sub with 2 arguments: string '%%' and t.contents, substitute the result for contents.
  from threading import local into default name space.
  stderr set to PIPE, close_fds set to boolean True is os.name is not equal to 'nt', universal_newlines set to boolean True.   if OSError, renamed to e, exception is caught,
  check if obj is instance of the object _PROTECTED_TYPES, return the boolean result.
  cal the method operator.attrgetter with an argument string "__class__", use the result as an argument for the call to the function,
  if ImproperlyConfigured exception is caught,
  add ext to f, substitute the result for fext.
  define the method g with an argument self.
  substitute NullBooleanSelect for widget.
  match is boolean True.
   for every p in path,
  substitute _iterlists for iterlists.
  return self.data.hour.
  derive the class BadHeaderError from the ValueError base class.
  otherwise if intrans is true,
  join elements of output into a string with newline as separator, use it as an argument for the call to the function mark_safe, return it.
  import module sys.
  use the it as an argument for the call to the self.style.MIGRATE_LABEL method, use the result to cal the self.stdout.write method.   if not,
  if first element of text is contained in 'xX'.
  define the function get_language.
  substitute _itervalues for itervalues.
  define the method parse_args with 3 arguments: self, args set to None and namespace set to None.
  get _assertRaisesRegex attribute of the self object, call the result with 2 arguments: unpacked list args,
  raise an ValidationError with 2 arguments: value under the 'invalid_date' key of the self.error_messages dictionary and code set to string 'invalid_date'.
  if UnicodeError, renamed to e, exception is caught,
  append arg to ',', substitute the result for arg.
  with call to the function transaction.atomic with using set to connection.alias as argument,
  from __future__ import unicode_literals into default name space.
  call the function shutil.rmtree with 2 arguments: path_to_remove and onerror set to rmtree_errorhandler.
  __all__ is a string containing strings: 'UploadFileException', 'StopUpload', 'SkipFile', 'FileUploadHandler',
  if form.is_bound is true,
  call the method FASTCGI_OPTIONS.copy, substitute the result for options.
  and result of the function escape called with an argument line, substitute the result for i-th element of lines.   call the method mark_safe with lines joined into a string, separated by newlines as argument, return the result.
  call the method self.style.NOTICE with string "  Your models have changes that are not yet reflected in a migration, and so won't be applied." as an argument, use the result as an argument for the call to the self.stdout.write method.
  return id_.
  define the method _assert_mutable with an argument self.
  if field is an instance of FileField,
  if not,
  call the method connection.ops.sequence_reset_sql with 2 arguments: return value of the no_style and self.models,
  if 'file_path' is contained in kwargs,
  if request has an attribute 'session',
  for every filename is filelist,
  define the function import_string with an argument dotted_path.
  try,
  try,
  find first index of occurrence of character '-' in locale, substitute it for p.
  define the method _construct_form with 3 arguments: self, i and unpacked dictionary kwargs.
  substitute settings.CACHE_MIDDLEWARE_SECONDS for cache_timeout.
  if self.activated is boolean True,
  from collections import OrderedDict into default name space.
  from __future__ import unicode_literals into default name space.
  otherwise if self.verbosity is greater than integer 0,
  RemovedInDjango19Warning and integer 2.   substitute dicts for self.dicts.
  if ValueError exception is caught,
  call the method self.next_token, substitute the result for self.current_token.
  dirs is a list containing basedir.
  convert ret to a boolean, return it.
  first and second are None.
  cached_property decorator,
  VARIABLE_TAG_START for 'openvariable', VARIABLE_TAG_END for 'closevariable', SINGLE_BRACE_START for 'openbrace',   SINGLE_BRACE_END 'closebrace', COMMENT_TAG_START 'opencomment' and COMMENT_TAG_END for 'closecomment'.   define the method __init__ with 2 arguments: self and tagtype.
  substitute the result for value under the 'To' key of msg dictionary.   if self.cc is true,
  raise an exception,
  define the method widget_attrs with arguments self and widget.
  strip message_context of "'" characters from both ends, substitute the result for message_context.
  raise an StopIteration exception.
  call the function F with an argument x, for every x in sequence of integers from 1 to l, not included,
  call the function six.text_type with an argument self, divide the result with rhs and return the reminder of the division.
  substitute link for values under the NEXT key of the last dictionary and PREV key of the root dictionary.
  define the method __init__ with arguments self and request defaulting to None.
  return a list containing an empty string and a list containing an empty list.
  with an argument: value under the name key of the media_attrs dictionary, if it exists, if not use None as an argument.   define the method __str__ with an argument self.
  property decorator,
  call the _lock.setdefault method with name and RWLock() as arguments, substitute the result for self_lock.
  substitute key for value under the KEY key of the oldroot dictionary.
  convert the value under the 'umask' key of options dictionary into an integer of base 8, substitute it for value under the 'umask' key of daemon_kwargs dictionary.
  self.attrs is an empty dictionary.
  call the method parser.add_argument with string '--locale', string '-l', dest set to string 'locale', action set to string 'append',
  take all but the length of path_info last elements of script_url, substitute it for script_name.
  property decorator,
  derive the class Lexer form the base class object.
  from django.utils import six into default name space.
  execute statement on the database that curs points to.
  call the method o.isoformat substitute the result for r.
  has_bz2 is boolean True.
  append site to sites.
  append string '-- The following references should be added but depend on non-existent tables:' to the final_output.
  delete the first element of self.tokens.
  substitute regex for self._regex.
  call the function tempfile.mkdtemp, substitute the result for tmpdir.
  substitute boolean_check for self.check_test if check_test is None, otherwise substitute check_test for self.check_test.
  return mod.register.
  result of the function force_text called with an argument title, and with sublist, append the string to output.   increment i by 1.
  with different 3 string arguments, the others are results of the call to the function MovedModule called with 3 string arguments.   for every attr in _moved_attributes,
  DEFAULT_DB_ALIAS for self.db.   remove the 'ignorenonexistent' key from the options dictionary, substitute the return value for self.db,
  for every name and value in items of props dictionary,
  break from the loop execution,
  sub_match.url_name, self.app_name if it exists or if not sub_match.app_name and sub_match.namespaces list appended to self.name.   append pattern to tried list.
  if upto is not equal to length of token,
  and construct as boolean False, return the result.   save.alters_data is boolean True.
  choice and idx, return the result.   define the method __str__ with an argument self.
  substitute apps for the value under language_code key of the self._app_dict dictionary.
  define the method extract with 2 arguments self and to_path.
  call the traceback.extract_tb method with argument tb, substitute the first element of last row of the result to filename.
  if 'is_safe' attribute of func object exists and is true and obj is an instance of SafeData,
  increment level by one.
  call the function logging.getLogger with string 'django.request' as the argument, assign the return object handle to logger.
  append tuple containing 2 elements: k and v to a list, for every k and v in options, only if k starts with curr,
  paths is a list containing results of the function force_text called with an argument p, for every p in paths.
  BM_compatible is boolean True.
  register.tag decorator,
  return nothing.
  substitute value under the "unifunc" key of the results dictionary for unifunc.
  substitute it for self.view_name.   define the method __getitem__ with arguments self and index.
  if self.to_field is true,
  try,
  if self._is_rendered is false,
  from django.core.mail.backends.base import BaseEmailBackend into default name space.
  if self.field.label is None,
  define the method getlist with 2 arguments: self and key.
  assign self.model._meta.pk to self._pk_field and pk.
  if KeyError exception is caught,
  call the function _check_middleware_classes with dictionary kwargs as argument, use the result as an argument for the call to the function errors.extend.
  call the method self.nodelist_empty.render with an argument context, return the result.
  if self._count is None,
  insert mw_instance.process_exception at the beginning of self._exception_middleware.
  for every dep in deps call the method apps.get_model with an argument dep, and append the result to the list, substitute it for deps.
  try,
  define the method path with an argument self.
  models is an empty set.
  if length of password is greater than inner.block_size,
  define the method __init__ with arguments: self and options set to None.
  and unpacked dictionary kwargs.   python_2_unicode_compatible decorator,
  where '%s' is replaced with filename.   return cls.
  if UnicodeDecodeError exception is caught,
  substitute value for self.value.
  call the method stat.S_IMODE with an argument st.st_mode, calculate binary OR with the result and stat.S_IWUSR, as operands,
  from django.utils.datastructures import MultiValueDict into default name space.
  remove last element for quant.
  substitute name for self.name.
  otherwise if common_prefix is None,
  return it.   define the function iteritems with 2 arguments: d and unpacked dictionary  kw.
  CONTEXT_SEPARATOR is a string "\x04".
  call the method copy.deepcopy with arguments self._choices and memo, substitute the result for result._choices.
  call the function os.stat with an argument filename, substitute the result for st.
  derive the class CharField from the base class Field class.
  if not,
  if self.is_bound is true,
  call the function force_text with an argument first element of args, substitute the result for first element of args.
  call the function _trans.to_locale with an argument language, return the result.
  skip this loop iteration.
  substitute value for rest.
  call the function get_template_from_string with 3 arguments: template, origin and template_name, substitute the result for template.
  if kwargs is true,
  break the loop execution.
  delete all the whitespaces from ext, split it by ',' character, extend ext_list with the result.
  call the function self.filepath.resolve with an argument context, substitute the result for filepath.
  return nothing.
  call the Error function with 4 arguments, string "%s was connected to the '%s' signal with a lazy reference to the '%s' sender,
  define the method create_var with 2 arguments: self and value.
  substitute value under the name key of the lib.tags dictionary for value under the name key of the temp_lib.tags dictionary.
  get the value under the 'list' key of options dictionary, if key doesnt exist return False, if the return value is True,
  call the fastcgi_help function, return the result.
  UNKNOWN_SOURCE is a string '<unknown source>'.
  parent is a tuple with 2 arguments: form.Meta and object.
  try,
  fk_name, parent_model._meta.app_label and parent_model._meta.object_name, respectively.   otherwise if length of fks_to_parent is zero,
  form._meta.fields is a list created out of form._meta.fields elements.
  self.changed_objects is an empty list.
  substitute the result for name.   call the function __import__ with an argument name.
  from __future__ import unicode_literals into default name space.
  substitute first element of to_digits for res.
  a string '%s_%s', where '%s' is replaced with tablename and f.name, respectively,   return value of the function qn called with an argument tablename and return value of the function qn called with an argument f.name.   join field_output elements into a string, separated by whitespaces, append it to table_output.
  call the function lazy with 2 arguments: func and unpacked list resultclasses, call the result with 2 arguments: unpacked list args,
  define the method open with argument self.
  convert self to a tuple, call the result with 2 arguments: block.name and block.nodelist, substitute the result for block.
  call the function base64.b64decode with an argument raw_data, substitute the result for data.
  call the field.rel.to._meta.get_field method with an field.rel.field_name argument, on the result call the method to_python,
  substitute app_name for klass.
  call the method token.split_contents, substitute results without the first element for bits.
  get the value from META dictionary, under the 'HTTP_CONTENT_TYPE' key, if the key doesnt exist,
  if not,
  if exclude is true and f.name is contained in exclude,
  replace all the elements of the basedir list by its corresponding absolute directory path, only is that directory exists.
  attachment is an instance of a class SafeMIMEMessage, created with the arguments content and subtype.
  call the self._lock.writer method, with the result perform the following,
  define the method __init__ with an argument self.
  define lambda function that returns self.file.isatty field, use it as an argument for property function, put the result in isatty.
  if self.asvar is true,
  append ch to result.
  msg is a string "Could not decode base64 data: %r", where '%r' is replace with e.
  if protocol is not equal to string 'both' and unpack_ipv4 is true,
  try,
  from itertools import chain into default name space.
  import module sys.
  call the method app_config.get_models, substitute the result fr model_list.
  substitute self.files for value under the 'files' key of the defaults dictionary.
  for every key_value in related,
  join into a file path: path and string '%s.pot', where '%s' is replaced with self.domain converted into a string, substitute the result for pot_path.
  return nothing.
  if not,
  modes is an empty list.
  finally perform,
  if m is None,
  substitute the result for formatters dictionary value under name key.   if StandardError, renamed to e, exception is caught,
  return an empty string.
  replace '%s' in string '</%s>' with tag, append the result to out.
  call the method parser.add_argument with 3 arguments: string 'directory', nargs set to '?' and help set to string 'Name of the application or project.'.
  if string '__str__' is not contained in __dict__ field of klass,
  substitute the result for final_attrs.   call the method widget.render with 3 arguments: string created by concatenation from: name, string '_' and i, widget_value,
  return out.
  return self.
  call the function walk_to_end with 2 arguments: ch and pattern_iter.
  concatenate CheckCommand.help to string 'Deprecated. Use "check" command instead. ', substitute it for help.
  try,
  return a tuple with 2 elements: result of the method self.field.prepare_value called with an argument obj,
  substitute parts, without the first element, for path.
  try,
  from django.http.request import HttpRequest, QueryDict, RawPostDataException, UnreadablePostError and build_request_repr into default name space.
  otherwise if first element of second row of args equals a string '1',
  call the __init__ method with 3 arguments: INFO, unpacked list args and unpacked dictionary kwargs from the base class of Info.
  if lib is false,
  if IndexError exception is caught,
  for every first_select in return value of the function _parse_date_fmt.
  if OSError renamed to e, exception is caught,
  if os has an attribute 'chmod',
  msg is an instance of a class SafeMIMEMultipart, created with arguments: _subtype set to self.mixed_subtype and encoding set to encoding.
  call the method self.can_write.release.
  for every path in format_module_path,
  call the method translation.activate with an argument settings.LANGUAGE_CODE.
  call the function update_wrapper with 3 arguments: _dec, decorator and assigned as result of the function available_attrs,
  while newline character is not contained in self.buffer and, size is None or length of self.buffer is less than size,
  raise an ValidationError with 3 arguments: value under the 'required' key of the self.error_messages dictionary,
  return node.
  call the method self.style.NOTICE with an argument:
  register.tag decorator,
  return an empty string.
  if subcommand_cls.use_argparse is true,
  call the method pk.rel.to._default_manager.get_queryset, substitute the result for qs.
  define the method __deepcopy__ with 2 arguments: self and memo.
  from django.utils.encoding import force_bytes into default name space.
  load_template_source.is_usable is boolean True.
  no_settings_commands is a list containing entries: 'help', 'version', '--help', '--version', '-h', 'compilemessages', 'makemessages',
  from io import BytesIO,  StringIO and UnsupportedOperation into default name space.
  call the method models.signals.post_migrate.send with 5 arguments: sender set to app_config, app_config set to app_config,
  if ImportError exception is caught,
  if match is true,
  break from the loop execution,
  substitute connection for self.connection.
  split string s once, with '=' sign as a delimiter, assign the resulting list to the t.
  call the method sys._getframe with an argument 1, substitute the result for frame.
  if KeyError, IndexError and AttributeError exception is caught,
  '<li%(html_class_attr)s>%(errors)s%(label)s %(field)s%(help_text)s</li>', error_row set to a a string '<li>%s</li>',   row_ender set to a string '</li>', help_text_html set to a string, ' <span class="helptext">%s</span>',   and errors_on_separate_row set to boolean False.   define the method as_p with an argument self.
  call the function ugettext with an argument string "Please correct the duplicate data for %(field_name)s which must be unique for,
  raise an ValueError with an argument string "'package' not set to a string".
  do nothing.
  where '%s' is replaced with bit and '%r' is replaced with current.   if current is callable object,
  return a string '%02d' formated with self.data.month.
  try,
  call the method self.iterkeys, return the list of results.
  call the method self.setlistdefault with an argument key, extend the result with value_list.
  call the method form.save with an argument commit as commit, return the result.
  subtype and charset, respectively.   if not,
  call the os.utime unction, with path and None as arguments.
  from django.apps import apps into default name space.
  call the function force_bytes with 2 arguments: safe and self.encoding, substitute it for safe.
  derive the class LazyStream from the six.Iterator base class.
  from django.core.management.commands.check import Command as CheckCommand into default name space.
  call the function os.chmod with arguments dst and mode.
  otherwise if field is contained in self.fields,
  substitute fifth element of row for value under the 'max_digits' key of the field_params.
  call the function urlquote with an argument _prefix, use the result as an argument for the call to the normalize function,
  for every child in node.childNodes,
  ADDRESS_HEADERS is a set containing strings: 'from', 'sender', 'reply-to', 'to', 'cc', 'bcc', 'resent-from', 'resent-sender',
  import module django.
  if content_disposition is true,
  call the method add_arguments from the base class of the Command class, with an argument parser.
  derive the class SafeMIMEText from the MIMEMixin and MIMEText base class.
  call the __add__ method with an arguments rhs from the base class of the class SafeText, substitute the result for t.
  convert params into a list, substitute it for unhandled_params.
  if value is not equal self.empty_value,
  row_data is an generator object that returns value under the field key of form.cleaned_data dictionary,
  get field.name attribute of the obj, substitute it for related.
  if Exception, renamed to e, exception is caught,
  if tags exists and if all elements in the return value of the method checks.tag_exists called with an argument tag,
  convert var into an floating point number, substitute it for self.literal.
  self.compression_formats is an dictionary with 3 initial entries: tuple containing 2 elements: open and string 'rb' for None,
  close fd file descriptor.
  if '.' is not contained in var and 'e' is not contained in var converted into lowercase,
  substitute base_url for self.base_url.
  if self._fname is None:
  write data bytes to outfile.
  substitute WSGIRequest for request_class.
  from django.core.management.sql import sql_all into default name space.
  substitute messages.error_list for the value under the field key of the self.error_dict dictionary.
  form_class_attrs is a dictionary with 2 entries: Meta for 'Meta' and formfield_callback for 'formfield_callback'.
  define the method to_python with arguments self and value.
  raise an TemplateSyntaxError exception with an argument "Searching for value. Expected another value but found end of string: %s",
  create a list with count decremented by 1 number of last element of result elements, extend list result with it.
  from io import BytesIO into default name space.
  derive the class __proxy__ from the Promise base class.
  call the function locks.lock with arguments fd and locks.LOCK_EX.
  excluded_models is an empty set.
  define the function quote_etag with an argument etag.
  return boolean False.
  if input_formats is not None,
  and sub_widgets set to return value of the function sub_ul_renderer.render, append the result to output.   if not,
  if KeyError exception is caught,
  from django.utils.text import normalize_newlines into default name space.
  if self.method is not equal to string 'POST',
  derive the class Serializer from the object base class.
  define the method modified_time with arguments self and name.
  derive class WindowsError from Exception base class.
  call the function escape with an argument output.
  return decorating_function.
  while self.tokens is true,
  if not,
  substitute length of self.object_list for self._count.
  call the Warning function with 3 arguments: hint tuple containing one string, Django 1.6 introduced a new default test runner.
  for every x is the range of integers from level to the integer 2, in the reversed order,
  if function form.has_changed evaluates to false,
  if name is None and compile_function is None,
  define the class Serializer from the PythonSerializer base class.
  get_language_bidi is lambda function returning boolean True if settings.LANGUAGE_CODE is contained in settings.LANGUAGES_BIDI.
  derive the class HttpResponseRedirect from the HttpResponseRedirectBase base class.
  call the function template_dir.decode with an argument fs_encoding, substitute the result for template_dir.
  if initial is not an instance of the list type,
  call the method self.add_initial_prefix with an argument name, substitute the result for initial_prefixed_name.
  memo is an empty dictionary.
  call the method __init__ from the base class of the EmailMultiAlternatives class, with 9 arguments: subject, body, from_email, to,
  call the method self._new_instance with 3 arguments: self.children, self.connector and self.negated, substitute the result for obj.
  call the method __init__ with an argument name form the base class of the class MovedAttribute.
  define the function npgettext with 4 arguments: context, singular, plural and number.
  form is an instance of ManagementForm class, created with 3 arguments: self.data, auto_id as self.auto_id and prefix as self.prefix.
  split p into two parts at the first ':', use the second element of the result to format string ' _(%s) ', write it to out.
  get the value under the 'no_location' key of the options dictionary, if it is true,
  if ValueError exception is caught,
  define the method handle with arguments self and unpacked dictionary options.
  if token equals a string "not" and i incremented by 1 is lesser than l,
  delete element under 'warning' key of kwargs dictionary.
  call the function lazy with 2 arguments: lambda function with unpacked dictionary kwargs as an argument and return value an instance of NumberAwareString class and NumberAwareString, call the result with an argument unpacked dictionary kwargs, substitute the result for proxy.
  if six.PY3 is true,
  if part is contained in PALETTES,
  derive the class FileInput from the Input base class.
  substitute path_override for path if path_override is not None, otherwise substitute request.path for path
  try,
  define the method callback with an argument self.
  if errors is true,
  call the function exc_type with an argument string "Unsupported value: %r. You should install pytz.", replace '%s' with dt,
  dest as a string 'interactive', default as boolean True help as a string 'Tells Django to NOT prompt the user for input of any kind.'.   define the method handle with 3 arguments: self and unpacked dictionary options.
  raise an ValueError exception with an argument string 'Not a valid Python identifier: %r' formated with s.
  for every template_dir in template_dirs,
  call the sign method from the base class of the TimestampSigner class with an argument value, return the result
  return obj.
  call the function block_re.match with an argument t.contents, substitute the result for bmatch.
  derive the class TemplateEncodingError form the base class Exception.
  call the function re.compile with an argument raw string "^\s*blocktrans(\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?')))?(?:\s+|$)",
  call the method stream_or_string.decode with string 'utf-8' as argument, substitute the result for stream_or_string.
  for every k and v in return value of the extra_params.items method, join all results into a string separated by a string ', ',   substitute it for field_desc.   append string ')' to field_desc.
  define the method tag with an argument self.
  from django.core.exceptions import DisallowedHost and ImproperlyConfigured into default name space.
  define the method urlencode with 3 arguments: self and safe set to None.
  call the method initial_form_count from the base class of the class BaseModelFormSet, return the result.
  add app_config to excluded_apps set.
  define the function linebreaks_filter with 2 arguments value and autoescape set to None.
  substitute initial_id for self.auto_id.
  define the function is_ignored with arguments path and ignore_patterns.
  define the method make_key with self class instance, key and version defaulting to None as arguments.
  define the function total_ordering with an argument cls.
  if IndexError, ValueError, KeyError or TypeError exceptions are caught,
  if character is not equal to a string '.',
  call the method s.get_data, return the result.
  return val and encoded as a tuple.
  if length of tablenames is greater than zero,
  derive the class DjangoRuntimeWarning from the RuntimeWarning base class.
  if fk.unique is boolean true,
  call the method __init__ from the base class of the class BaseInlineFormSet, with 5 arguments: data, files, prefix set to prefix,
  set value under the 'bindAddress' key of wsgi_opts to None.
  from django.utils.encoding import force_unicode.
  raise an ValueError with an string "Zip-compressed fixtures must contain one file.".
  if count does not equals to integer 0,
  define the method push with 3 arguments: self, name and block.
  substitute the result for value under the NON_FIELD_ERRORS key of the form._errors dictionary.   for every field in unique_check,
  property decorator,
  try,
  TEMPLATE_FRAGMENT_KEY_TEMPLATE is a string 'template.cache.%s.%s'.
  decorator stringfilter,
  join path and entry into a file path, if it exists,
  call the method parser.add_argument with 4 arguments: string '--plain', action set to string 'store_true', dest as a string 'plain',
  from django.utils.six.moves import socketserver into default name space.
  derive the class ContextDict from the dict base class.
  from django.utils.encoding import force_str,  force_text and DEFAULT_LOCALE_ENCODING into default name space.
  define the function get_urlconf with an argument default set to None.
  extend comment_notes list with notes.
  call the method handler.handle_raw_input with 5 arguments: self._input_data, self._meta, self._content_length, self._boundary,
  count is a property object with _get_count as a getter method.
  return an empty list.
  template_with_clear is a string '%(clear)s <label for="%(clear_checkbox_id)s">%(clear_checkbox_label)s</label>'.
  write errors to self.stdout.
  sites is an empty list.
  for every p in plist,
  TOKEN_MAPPING is a dictionary with 4 initial entries: 'Text' for TOKEN_TEXT, 'Var' for TOKEN_VAR, 'Block' for TOKEN_BLOCK,
  from django.utils.six.moves.urllib.parse import urlparse into default name space.
  from django.core import serializers into default name space.
  connection_params is a dictionary with 1 initial entry: return value of the function DNS_NAME.get_fqdn for 'local_hostname'.
  help is a string 'Runs a development server with data from the given fixture(s).'.
  '"Upload a valid image. The file you uploaded was either not an image or a corrupted image."' for 'invalid_image'.   define the method to_python with arguments self and data.
  convert number to a string, truncate first element.
  append ch to result.
  result is a list containing an empty string.
  read file fp, substitute the read data for output.
  define the function _add_doc with 2 arguments: func and doc.
  otherwise if o is an instance of datetime.date object,
  derive the class datetime from the real_datetime base class.
  call the method self.is_valid, if it evaluates to false,
  call the method netloc.encode with an argument string 'idna', on the return value call the decode method with string 'ascii' as argument, substitute the result for netloc.
  if self._wrapped is empty,
  derive the class TimeInput from the DateTimeBaseInput base class.
  params is a list with second element of source as a element.
  plural set to plural and number set to number, return the result.   define the function activate with an argument language.
  define the function mail_admins with subject, message, fails_silently set to boolean False, connection set to None,
  if OSError exception is caught,
  if not, self.coerce is an identity lambda function with an argument val.   if 'empty_value' key of the kwargs dictionary exists remove it and substitute its value for self.empty_value,
  call the function format_html with 4 arguments: string '<label{0}>{1} {2}</label>', label_for, result of the method self.tag,
  self._read_started is boolean True.
  call the function conditional_escape with an argument checkbox_name,
  call the function loader with 2 arguments name and dirs, substitute the result for source and display_name, respectively.
  call the function to_current_timezone with an argument value, substitute the result for value.
  if Exception exception is caught,
  import flup
  derive the class JsonResponse from the HttpResponse base class.
  from django.conf import settings into default name space.
  ge the absolute path of the return value of the function path.expanduser with the argument target, substitute it for top_dir.
  if compare_to is not equal to value under the self key of state_frame.
  substitute input_formats for self.input_formats.
  call the method sign on the result with an argument value, substitute the result for value.   call the method self.set_cookie with 3 arguments: key, value and unpacked dictionary kwargs, return the result.
  substitute level for rv.
  for every cat in value under the 'categories' key of the self.feed dictionary.
  if not,
  call the function re.search with 3 arguments: string '^%s%s', with '%s' replaced for prefix_norm and pattern, respectively,
  derive the class Loader from the BaseLoader base class.
  return response.
  __dispatch is None.
  return a list containing 2 elements: return value of the value.date method and return value of the replace method,
  if self.min_value is not None,
  call the method self.__cast, return the hash value of the result.
  nm and addr are addr.
  define the __init__ method with 3 arguments: self, unpacked list args and unpacked dictionary **kwargs.
  raise an CommandError with an argument string "You must supply at least one app label when using --empty.".
  from django.utils import six into default name space.
  substitute memoryview for memoryview.
  concatenate opts.concrete_fields, sortable_virtual_fields and opts.many_to_many, for every f in sorted result,
  imported_objects is an empty dictionary.
  if match is true,
  raise an TemplateSyntaxError exception with an argument string "'%s' takes one argument", where '%s' is replaced with first element of bits.
  call the method self.style.NOTICE with string "  Run 'manage.py makemigrations' to make new migrations, and then re-run 'manage.py migrate' to apply them." as an argument, use the result as an argument for the call to the self.stdout.write method.
  call the method self._setup.
  while i is smaller than list_length,
  instantiate base class of the class ModelMultipleChoiceField, substitute filed to_python of the  result for to_py.
  call os.path.splitext function with po_path as argument, substitute the first element of the result for base_path.
  try,
  return boolean False.
  call the field.to_python method with field_value, substitute the result for field.name key of the data dictionary.
  if package doesnt have an 'rindex' attribute,
  change access mode of path to stat.S_IWRITE mode.
  define the function slice_filter with 2 arguments value and arg.
  define the method self and blocks.
  call the method warnings.warn with an argument string "No fixture named '%s' found." where '%s' is replaced with fixture_name.
  dest set to string 'no_color' default set to boolean False and help set to a string "Don't colorize the command output.".   for every opt in self.option_list,
  return get_git_changeset.cache.
  for every w in self.widgets,
  call the self.stderr.write method with string "    No custom SQL for %s.%s model\n" as argument,
  if action equals to string "apply_start",
  increment self.active_writers by 1.
  update attrs dictionary with entry: self.max_length converted into a string for 'maxlength'.
  call the method six.moves.input with an argument string "Do you wish to proceed? [yN] ", substitute the result for answer.
  try,
  field url of the value under the 'enclosure' key of the item dictionary for 'url',   field length of the value under the 'enclosure' key of the item dictionary for 'length',   and field mime_type of the value under the 'enclosure' key of the item dictionary for 'type'.   for every cat in value under the 'categories' key of the item dictionary,
  return self._callback.
  call the method handler.startDocument.
  self._post is an instance of QueryDict created with arguments: an empty string and encoding set to self._encoding,
  if option_value is contained in selected_choices,
  self._num_pages is a integer 0.
  call the httpd_cls function with 4 arguments: server_address, WSGIRequestHandler and ipv6 set to ipv6, substitute the result for httpd.
  returns the result of the call the method d._get_pk_val, if not return d, put all the generator items into a tuple row_data.   if row_data is true and None is not contained in row_data,
  substitute connection.ops.quote_name for qn.
  if value has an '__iter__' attribute and value is not an instance of bytes or six.string_types class.
  join together callback.__module__, character "." and callback.__name__, substitute the result for lookup_str.
  for every k and v in result of the call to the method type_.__dict__.items,
  if field_type is not equal to string 'TextField(' or string 'CharField(',
  return self.
  call the method __new__ with 4 arguments: cls, name, bases and attrs, from the base class of the class RenameMethodsBase.
  if e.errno does not equals to errno.ENOENT,
  call the function BytesIO with self.buffer as argument, store the result is sio.
  re.U and re.S, substitute the result for re_chars.   call the function re.compile with 2 arguments: raw string '<(/)?([^ ]+?)(?:(\s*/)| .*?)?>' and bitwise OR performed with 2 operands,
  call the method mimetype.split with arguments: character '/' and integer 1, substitute the result for basetype and subtype, respectively.
  try,
  import module os.
  otherwise if f.unique is true,
  raise an SystemRestart exception,
  define the method receive_data_chunk with arguments: self, raw_data and start.
  raise an Exception exception with an argument string "This %s instance cannot tell its position",
  substitute i-th element of value for field_value.
  get the value under the funcname key of the t-th elment of self.__dispatch dictionary, call the result with 3 arguments: res,
  return fixture_files.
  if first and second element of sys.version_info are equal to integers 3 and 4, respectively,
  substitute string 'checked' for value under the 'checked' key of final_attrs dictionary.
  if AmbiguityError exception is raised,
  substitute exc for self.settings_exception,
  if not,
  deifne the method __init__ with 5 arguments: self, class_name, old_method_name, new_method_name and deprecation_warning.
  substitute file for self.file.
  created with arguments sys.stderr and self.style.ERROR.   replace '%s' in string '%s: %s' with e.__class__.__name__ and e, respectively, write it to the stderr stream.
  define the method resolve_error_handler with arguments self and view_type.
  substitute max_width for self.max_width.
  return an empty string.
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  substitute tempfile.NamedTemporaryFile for NamedTemporaryFile.
  call the method form.add_prefix with an argument self, substitute the result for self.html_name.
  if in_tag and is not contained in self.verbatim,
  from django.forms.forms import DeclarativeFieldsMetaclass and BaseForm into default name space.
  substitute length of self.loopvars for num_loopvars.
  if re.error, renamed to e, is caught,
  try,
  define the function rfc2822_date with an argument date.
  do nothing,
  if formfield is true,
  if filename is empty,
  if deps is true,
  define the function capfirst with an argument value.
  call the method form.save, with an argument commit set to boolean False, substitute the result for obj.
  import module os.
  and instance of Name class created with an argument string 'python_2_unicode_compatible'.   decorated is an instance of class Node, created with 3 arguments: syms.decorated, list with 2 arguments: decorator and klass,
  if file path top_dir doesnt exists,
  from django.utils.translation import get_language, to_locale and check_for_language into default name space.
  if token.contents doesn not equals a string 'endif', raise an AssertionError exception,
  call the method self._delete with argument key.
  convert first element of values into a integer, return the result and ch.
  from django.conf import settings into default namespace.
  _encoding is None.
  import module base64.
  try,
  from django.utils.encoding import force_text and python_2_unicode_compatible into default name space.
  call the function ngettext with 3 arguments: singular, plural and number, use the result as an argument for the call to the force_text,
  from __future__ import unicode_literals into default name space.
  from __future__ import unicode_literals into default name space.
  substitute unicode for text_type.
  define the method unparsed_entity_decl with arguments self, name, base, sysid, pubid and notation_name.
  if commit is true,
  return obj.
  output_transaction is boolean True.
  if auto_id is true and '%s' is contained in result of the call to the function smart_text with an argument auto_id,
  call the method os.environ.get with 2 arguments: strings 'PATHEXT' and '.COM;.EXE;.BAT;.CMD', split the result at os.pathsep, substitute it for pathext.
  old_style_list is boolean True.
  close the file stream.
  from django.db import connections, router, transaction, models and DEFAULT_DB_ALIAS into default name space.
  if args is None,
  gett self.attr from the module object, return it.
  define the method __len__ with an argument self.
  define the method dst with 2 arguments self and dt.
  if not,
  call the operator.add on the values of the self object converted into a dictionary, until it is reduced to a single value, return it.
  substitute '%s' in string "#. #-#-#-#-#  %s.pot (PACKAGE VERSION)  #-#-#-#-#\n" with self.domain,
  define the method start_serialization with an argument self.
  result of the function iri_to_uri called with an argument link for 'link',   result of the function to_unicode called with an argument description for 'description',   result of the function to_unicode called with an argument author_email for 'author_email',   result of the function to_unicode called with an argument author_name for 'author_name',   result of the function iri_to_uri called with an author_link link for 'author_link', pubdate for 'pubdate',   updateddate for 'updateddate', result of the function to_unicode called with an comments author_name for 'comments',   result of the function to_unicode called with an argument unique_id) for 'unique_id)',   unique_id_is_permalink for 'unique_id_is_permalink', enclosure for 'enclosure',    if true, categories is value for 'categories' key, if not, empty tuple is value for 'categories' key,   result of the function to_unicode called with an argument item_copyright for 'item_copyright', ttl for 'ttl'.   update dictionary item with an argument kwargs.
  substitute self.STDOFFSET for self.DSTOFFSET.
  call the method handler.addQuickElement with 2 arguments: string 'name' and value under the 'author_name' key of the self.feed dictionary.
  define the function do_block with 2 arguments parser and token.
  append obj to self.deleted_objects list.
  call the method field_stream.read with an argument: over_bytes subtracted from integer 4, substitute the result for over_chunk.
  substitute the result for args and kwargs.   return an instance of AssignmentNode class created with 4 arguments: takes_context, args, kwargs and target_var.
  if value is contained in self.empty_values,
  if not,
  call the method path.encode with an argument fs_encoding, return the result.
  call the function _trans.deactivate_all, return the result.
  substitute choice for choice_value and choice_label, respectively.
  define the method __repr__ with an argument self.
  raise an exception.
  call the get_bytes_from_wsgi function with environ, string 'PATH_INFO' and empty strings as arguments, substitute the result for path_info.
  decorator method register.tag with an argument 'block',
  substitute exclude for value under the 'exclude' key of attrs dictionary.
  define the method __str__ with an argument self.
  for every refto and refs in return value of references.items method.
  define the method render with 4 arguments: self, name, value and attrs set to None.
  call the method match.groups, substitute the result for args.
  call the method validators.RegexValidator with an argument regex set to regex, substitute it for self._regex_validator.
  call the function ugettext with string 'yes,no,maybe' as an argument, substitute the result for arg.
  if pattern has an attribute '_callback_str',
  raise an AttributeError exception with an argument string "This method is available only on the view class.".
  get config dictionary element under 'handlers' key, if it exists substitute it for handlers, if not, handlers is EMPTY_DICT.
  return j.
  substitute the result for trimmed.   middle is a string '<a href="%s"%s>%s</a>' formated with url, nofollow_attr and trimmed.
  if attr is contained in obj_dict,
  assign value and params to the value under the name key of the outdict dictionary.
  raise an ValueError exception with an argument string "make_aware expects a naive datetime, got %s", where '%s' is replaced with value.
  call the method fp.getvalue, return the result.
  if c doesnt have an attribute '__call__', and types has an attribute 'ClassType', and type of c is not equal to types.ClassType,
  define the method h with an argument self.
  derive the class FileSystemStorage from the Storage base class.
  if ValueError exception is caught,
  call the function datetime_safe.new_datetime with an argument date, substitute the result for date.
  append the result to app_dirs.   join app_dir and string 'models/sql' into a file path, use the result as an argument for the call to the function os.path.normpath,
  substitute the result for tag.   if tag is false or current_len is greater or equal to truncate_len,
  self._errors is None.
  if not,
  call the method self.xml.startElement with 2 arguments: string 'field' and a dictionary containing 2 entries: field.name for 'name',
  split into two parts string main_value_pair at character ':', substitute the parts for name and value, respectively.
  from django.utils import six and lru_cache into default name space.
  import module django.core.checks.model_checks.
  with the result renamed to fp, perform the following:   write msgs to fp.
  _func_closure is a string "func_closure".
  define the function trim_url with 2 arguments: x and limit set to trim_url_limit.
  if middleware has an attribute 'process_response',
  filesize_number_format with result of division of bytes by TB as an argument, substitute the result for value.   if not,
  substitute registry.tag_exists for tag_exists.
  call the function force_text with an argument text, substitute the result for input_val.
  return self.
  raise an exception e.
  substitute the result for self.instance.   try,
  if AttributeError exception is caught,
  define the method __init__ with 3 arguments: self, attrs set to None and choices set to an empty tuple.
  source and previous result.   if TemplateDoesNotExist exception is caught,
  evaluate the function smart_text with argument self.name, if exists, or an empty string, if not, return the result.
  define the method __init__ with an argument self.
  for every k in doomed,
  increment weight by integer 2.
  internal_use_only is boolean False.
  from django.core.exceptions import ImproperlyConfigured into default name space.
  from __future__ import unicode_literals into default name space.
  call the function self.compress with empty list as an argument, return the result.
  open filepath file in read mode, with file descriptor as fp, perform,
  call the method self.validate_unique.
  call the method self.connection.ehlo.
  substitute value under the database key of the connections dictionary for connection.
  define the method handle_merge with arguments self, loader and conflicts.
  call the method date.tzinfo.utcoffset with an argument date, substitute the result for offset.
  call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self.feed dictionary.
  call the method self.itervalues, return list of results.
  raise an ValueError exception with an argument string 'Unable to configure logger %r: %s' formated with name and e.
  close the process with an argument 0.
  raise an TypeError with an string 'formfield_callback must be a function or callable'.
  otherwise if self.object is an instance of the models.base.ModelBase class,
  mime_type is a string 'application/atom+xml; charset=utf-8'.
  call the function cls with 8 arguments: date.year, date.month, date.day, time.hour, time.minute, time.second, time.microsecond,
  and help is a string 'Module paths to test; can be modulename, modulename.TestCase or modulename.TestCase.test_method'.   call the method parser.add_argument with 5 arguments: string '--noinput', action set to 'store_false', dest set to 'interactive',
  define the function dictConfig with an argument config.
  cursor is None.
  substitute parent_instance for self.parent_instance.
  substitute labels for value under the 'labels' key of attrs dictionary.
  call the method m.group with an argument string 'hour', convert the result into a string, substitute it for hour.
  substitute EscapeBytes for EscapeString.
  VARIABLE_TAG_START is a string '{{'.
  try,
  call the method apps.get_app_config with an argument app_label, substitute the result for app_config.
  if filename ends with string ".pyc" or it ends with ".pyo",
  call the method sys.stderr.write with an argument string "Unknown command: %r\nType '%s help' for usage.\n",
  call the method self.handle_merge with 2 arguments: loader and conflicts, return the result.
  define the function gettext_noop with an argument message.
  consume_next is boolean True.
  if tag is not contained in TemplateTagNode.mapping,
  return boolean False.
  call the method unescape with attrvalue as the argument on the self class instance, substitute the result for attrvalue.
  try,
  replace '%r' from string '\nServer stopped.\nNote that the test database, %r, has not been deleted. You can explore it on your own.',  with db_name, substitute it for shutdown_message.
  call the __init__ method with 3 arguments: ERROR, unpacked list args and unpacked dictionary kwargs from the base class of Error.
  from __future__ import unicode_literals into default name space.
  split content by newline character, for every line in result,
  call the function force_text with 3 arguments: old_field_name, self._encoding and errors as a string 'replace',
  define the function urlencode with 2 arguments query and doseq set to integer 0.
  if app_config.models_module is None.
  append the result at the end of string '.', append it all at the end of string cache_key.   if settings.USE_TZ is True,
  if not,
  yield one element from the buffer_ iterable.
  substitute the last element of parts for parts.
  if value is contained in self.empty_values,
  return output.
  get the value under the 'locale' key of the options dictionary, substitute it for locale.
  join elements of list source from index last to the end into a string, substitute it for piece.
   if initial equals a string 'False',
  call the method parser.compile_filter with an argument, second element of bits, substitute the result for val1.
  if filename is not contained in _mtimes,
  define the method defalt with arguments self and o.
  substitute self._rollback for rollback.
  substitute boundary for self._boundary.
  return default.
  if escaped is true,
  define the method media with an argument self.
  define lambda function that returns self.file.readline field, use it as an argument for property function, put the result in readline.
  define the method _itervalues with an argument self.
  raise an exception.
  from django.core.servers.fastcgi import FASTCGI_OPTIONS into default namespace,
  call the method urlresolvers.set_urlconf with urlconf as the argument.
  define the method end_serialization with an argument self.
  import module time.
  call the method HttpResponse.content.fset with 2 arguments: self and value.
  context_extras is an empty dictionary.
  convert the value under the 'daemonize' key of options dictionary to lowercase, if it equals to string 'true', 'yes' or 't',
  call the initialization method _html_parser.HTMLParser.__init__(self) for the base class.
  remove last 2 elements from bits.
  define the method add_arguments with 2 arguments self and parser.
  try,
  append d to self.fed.
  and self._current for 'fields'.   if self.use_natural_primary_keys is false or obj doesnt have a 'natural_key' attribute.
  for every sub_stream in boundarystream,
  substitute force_bytes for force_str.
  define the method _delete with self and fname as arguments.
  call the function new_method_proxy with an argument str, substitute the result for __str__.
  call the function get_library with an argument taglib, substitute the result for lib.
  extend all_models list with the result.   call the function emit_post_migrate_signal with 4 arguments: all_models converted into a set, verbosity, interactive and database.
  call the method filter.get_request_repr with an argument request, format string '\n{0}' with the result, substitute the result for request_repr.
  from django.http import HttpResponse into default name space.
  try,
  get the position of the self.file file pointer, substitute it for pos.
  call the function normpath with an argument path, return the result.
  split string pks by ',', substitute the result for primary_keys.
  define the function reloader_thread.
  msg is a tuple containing string "\nYou have installed Django's auth system, and don't have any superusers defined.\nWould you like to create one now? (yes/no): ".
  self._done is boolean True.
  join root and filename into a file path, substitute it for old_path.
  define the method clean with an argument self.
  nodes is an empty list.
  endless loop,
  code set to string 'invalid_pk_value and params with an entry: pk for 'pk'.   call the method self.queryset.filter with an argument, unpacked dictionary with an entry: value for string '__in' appended to key,
  can_delete for 'can_delete', min_num for 'min_num', max_num for 'max_num', absolute_max for 'absolute_max',   validate_min for 'validate_min' for validate_max for 'validate_max'.   create a class class which name is generated by converting 'FormSet' into a string and appending it to form.__name__,
  from itertools import chain into default name space.
  call the method signals.request_finished.send with an argument sender set to self._handler_class.
  substitute empty for self._wrapped.
  substitute connection.features.test_db_allows_multiple_connections for use_threading.
  title is an empty string.
  self.literal is None,
  define the function deactivate.
  and re.IGNORECASE, substitute the result for simple_url_re.   call the function re.compile with raw string '&(?!(\w+|#\d+);)', substitute the result for simple_email_re.
  try,
  define the function do_with with 2 arguments: parser and token.
  if m is not None,
  self.POST is an instance of QueryDict class created with an argument mutable set to boolean True.
  call the method f.formfield with an argument, unpacked dictionary kwargs, substitute the result for formfield.
  call the function io.open with 3 arguments: potfile, string 'w' and encoding set to string 'utf-8' as arguments,
  derive the class Http404 from the Exception base class.
  if length of bits is greater or equal to intger 2 and second last element of bits is equal to string 'as',
  convert to integer the value of dictionary cc under the key 'max-age', and return it
  of the obj object.   if commit is true,
  if not,
  derive the class DjangoUnicodeDecodeError from the base class UnicodeDecodeError.
  substitute result for value under the self.asvar key of context dictionary.
  mapping is a dictionary with 3 initial entries: 'a' for 'alpha', 'b' for 'beta' and 'c' for 'rc'.
  substitute options.settings for value under the 'DJANGO_SETTINGS_MODULE' key of the os.environ dictionary.
  call the method self.recipients, if it evaluates to false,
  attrs is an empty dictionary.
  if not,
  from django.apps import apps into default name space.
  call the load method on the c class instance, with the cookie argument.
  if self.scheme equals to string 'https', return boolean True, otherwise return boolean False.
  return check.
  if value under the 'daemonize' of options dictionary is None,
  return other_dict.
  for every f in return value of the os.listdir function called with an argument command_dir, append f without 3 last elements to a list, only if f doesnt start with character '_' and doesnt ends with string '.py', return the resulting list.
  for every entry in package_path,
  call the method domain_part.encode with an argument string 'idna', on the return value call the decode method with string 'ascii' as argument, substitute the result for domain_part.
  if limit is None or length of x is lesser than or equal to limit,
  if representative is None,
  from __future__ import unicode_literals into default name space.
  return boolean False.
  from django.utils import datastructures into default name space.
  call the function sys.exit with argument integer 3.
  import module re.
  put bcc into a list, assign it to self.bcc.
  if ch equals a string '?',
  return an empty string.
  call the method notifier.read_events.
  call the method pending_references.keys, put the result into a set and substitute it for not_installed_models.
  with 2 arguments: self.prog_name and first element of options.args.   otherwise if subcommand equals a string 'version' or self.argv, without the first element equals a list containing a string '--version'
  self._callback_strs is an empty set.
  with an argument escape_html for f, for every f and e in list of tuples of self dictionary key, pair entries, return the result.   define the method as_ul with an argument self.
  if t is not None,
  with the result renamed to fp, perform the following:   read file fp and substitute the result for msgs.
  if value is false,
  return neg and res.
  call the method deactivate.
  from pprint import pformat into default name space.
  raise an ContentNotRenderedError exception with an argument string 'The response content must be rendered before it can be pickled.'.
  for every migration_name in migration_names,
  define the method get_response, with self class instance and request as the arguments.
  call the connection.cursor method, substitute the result for cursor.
   help is a string "Creates new migration(s) for apps.".
  call the function patch_response with response and cache_timeout decremented by integer 1 as arguments.
  call the os.umask function with argument integer 0, substitute the result for old_umask.
  call the method datetime.datetime.combine with unpacked list data_list, substitute the result for result.
  call the method node.render with an argument context, append the result to the nodelist.
  if 'pk' is contained in d,
  call the import_string with argument: import_path if exists or settings.DEFAULT_FILE_STORAGE, if not, return the result.
  define the method timestamp with an argument self.
  and args, respectively.   call the method handle_default_options with an argument options.
  return the value under the language_code key of the self._reverse_dict dictionary.
  if not,
  return message.
  derive the class BooleanField from the base class Field class.
  data is an empty dictionary,
  yield a tuple with 2 elements: an empty string and self.field.empty_label.
  derive the class HttpResponseGone from the HttpResponse base class.
  default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid URL.' for 'invalid'.
  if self.pos is greater than or equal to self.tokens,
  token is an instance of Token class, created with 2 arguments: TOKEN_BLOCK and block_content.
  derive the class EscapeText from six.text_type and EscapeData base classes.
  call the method self.error_class, substitute the result for value under the field key of the self._errors dictionary.
  try,
  define the method F with an argument self.
  response.streaming_content is an empty list.
  from django.forms.formsets import BaseFormSet and formset_factory into default name space.
  if format is not contained in return value of the method serializers.get_public_serializer_formats,
  return a string '%02d' formated with self.data.second.
  join output into a string, separated by newline characters, return it.
  if not, call the function sys.getdefaultencoding and substitute the result for fs_encoding.   app_template_dirs is an empty list.
  reverse element order of dicts, join them in a string, substitute the result for number.
  consume_next is boolean False.
  substitute idx-th element of self.choices for choice.
  called with an argument commit, return the result.   save.alters_data is boolean True.
  derive Serializer from the base.Serializer base class.
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  return self.
  return nothing.
  while factor is greater or equal to integer 0,
  if not,
  from django.utils.translation import trans_null as trans.
  from django.forms.fields import everything into default name space.
  call the method self._populate,
  call parser.add_argument method with '--ipv6', string '-6', action set to string 'store_true', dest set to string 'use_ipv6',
  if subcommand equals to a string 'help'.
  call the method self.data.weekday, increment the result by an integer 1, divide it with integer 7, return the reminder of the division.
  called with n.getAttribute('pk') method.   call the m2m_convert function with an argument c, for every c in return value of the method node.getElementsByTagName,
  if mtime is different than the value of dictionary _mtimes under the key filename,
  call the method self.filter_function with arguments name and unpacked dictionary flags, return the result.
  output is an empty list.
  get config dictionary element under 'format' key, if it exists substitute it for fmt, if not, fmt is None.
  from django.utils import six into default name space.
  if name is true,
  substitute upload_handlers for self._upload_handlers.
  derive the class CheckboxFieldRenderer from the ChoiceFieldRenderer base class.
   define the method resolve with arguments self and path.
  otherwise if value under the 'app_label' key of options dictionary is true,
  from django.core import urlresolvers into default name space.
  with field_value as an argument, substitute the result for obj_pk.   return obj_pk.
  derive the class Paginator from the object base class.
  slit by whitespace the value under the 'COMP_WORDS' key of the os.environ dictionary, substitute the result without the first element for cwords.
  increment self.pos by integer 1.
  define the method __init__ with 2 arguments: self and content.
  for arg in argv list without the first two elements,
  do nothing.
  substitute a tuple with 2 elements: characters ',' and ': ' for value under the 'separators' key of the self.json_kwargs dictionary.
  substitute regex for self._regex.
  join elements of output in a string, separated by newlines, return it.
  if not,
  try,
  define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.
  if settings.DEBUG is true,
  define the method normalize_col_name with 4 arguments: self, col_name, used_column_names and is_relation.
  define the method compile_function_error with 3 arguments: self, token and e.
  import code.
  call the function force_text with an argument template_string.
  raise an ValueError with an argument string "Non-reversible reg-exp portion: '(?%s'" formated with ch.
  if t is contained in self.__dispatch,
  if param is true,
  import module json.
  try,
  import module warnings.
  import module os.
  return s.
  define the function register_serializer with 3 arguments: format, serializer_module and serializers set to None.
  from django.core.management.base import BaseCommand and CommandError into default name space.
  activate is a lambda function which returns None for any argument x.
  substitute record.request for request.
  convert self.index into a string and append it to '_' string, substitute it for value under the 'id' key of self.attrs dictionary.
  define the function ungettext with 3 arguments: singular, plural and number.
  define the method __init__, with 3 arguments: self, m2m and data set None.
  call the method bf.css_classes, substitute the result for css_classes.
  define the function become_daemon with 4 argument: our_home_dir set to '.', out_log set to None, err_log set to None,
  if extra_classes has an attribute 'split',
  call the function mark_safe with an argument output.
  import module warnings.
  substitute self for self.config.configurator.
  where '%s' is replaced with var.   call the method var.split with an argument VARIABLE_ATTRIBUTE_SEPARATOR, convert the result to a tuple and substitute it for self.lookups.
  call the method parser.compile_filter with an argument value, substitute the result for value under the name key of kwargs dictionary.
  define the method _existing_object with 2 arguments: self and pk.
  bitwise shift integer 1 to the left by 31 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.
  if mode is not contained in app_list_value,
  define the method run with 3 arguments: self and unpacked dictionary options.
  subtract length of the ext from the integer 255, take first elements of the name list up to the previous result index,
  call the method selected_choices.remove with an argument option_value.
  ignored  is an empty list.
  import io.
  if settings.USE_TZ is true substitute result of the function timezone.get_current_timezone for tzinfo, if not tzinfo is None.
  define the method __copy__ with an argument self.
  derive the class NowNode from Node base class.
  return response.
  call the method field._has_changed with 2 arguments: return value of the function field.to_python called with an argument initial,
  week_number is integer 52.
  remove config dictionary element under 'class' key, use it as an argument for the call to the method self.resolve,
  substitute _urllib_error_moved_attributes for Module_six_moves_urllib_error._moved_attributes.
  raise an FieldError exception with an argument message.
  define the method __getitem__ with 2 arguments: self and key.
  derive the class classonlymethod from the classmethod base class.
  try,
  for every accessor_name and object_list is return value of the method self.m2m_data.items.
  if not,
  and third element of result of the function sys.exc_info.   define the function import_by_path with 2 arguments dotted_path and error_prefix set to an empty string..
  yield string "# into your database." as the result.
  if not, substitute self.auto_id for id_.   if id_ is true,
  pk_value is None.
  return token.
  if '_' is contained in locale,
  call the method s.find with an argument bytes string ';', substitute the result for end.
  do nothing.
  if first element of params equals a string 'context',
  call the function find_template with 2 arguments: template_name and dirs, substitute the result for template and origin.
  if not,
  if self.data.day equals integer 11, 12 or 13,
  if TypeError, ValueError or UnicodeDecodeError exceptions are caught,
  if attrs is not None,
  try,
  replace '%s' in string "### %s = %s" with key and value under the key key of the user_setting dictionary, append it to the output.
  define the function truncatewords with 2 arguments value and arg.
  convert app_template_dirs to a tuple, return it.
  set the value under the 'bindAddress' key of the wsgi_opts dictionary to a tuple containing 2 elements: value under the 'host' key,
  substitute content_length for self._content_length.
  call the function context_class with 2 arguments: _dict and unpacked dictionary containing 4 entries:
  call the method self._cache.incr with key and delta as arguments, substitute the result for val.
  call the __init__ method with stream_class(content) and name set to name arguments, from the base class of the ContentFile class.
  return instance.
  derive the class DjangoSafeDumper from the SafeDumper base class.
  call the function urlunsplit with an argument url_fields, use the result as an argument for the call to the function split_url,
  if instance is None,
  define the method close with an argument self.
  substitute instance._meta for opts.
  num_args is an integer 0.
  if UnicodeError exception is caught,
  return nothing.
  while RUN_RELOADER is true.
  call the function to_current_timezone with an argument, substitute the result for value.
  substitute module for the value under the format key of the serializers dictionary.
  use it to call the cgi.parse_header method, assign the result to the _ and content_params respectively.   if string 'charset' is contained in content_params,
  from django.conf import settings into default name space.
  if '.' is contained in words or '@' is contained in word or ':' is contained in word,
  if ValueError exception is caught,
  substitute app_or_project for self.app_or_project.
  define the function _check_test_runner with app_config set to None and kwargs dictionary as arguments.
  call the function func with 3 arguments: context, self.first and self.second, return the result.
  call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self.feed dictionary.
  decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
  do nothing.
  if widget is an instance of type class,
  substitute url for display_url.
  call the method pyinotify.Notifier with wm and EventHandler() as arguments, assign the result to notifier.
   if app_config.models_module is None or app_config is contained in excluded_apps,
  if not self.max_length is None.   remove the value under 'allow_empty_file' key from the kwargs dictionary and if the key exists,
  define function fix_location_header with request and response as arguments.
  if namespaces is true,
  substitute first args for other_dict.
  get the value under the root key of the convert dictionary, for every opname and opfunc in the result,
  call the __init__ method with 3 arguments: DEBUG, unpacked list args and unpacked dictionary kwargs from the base class of Debug.
  return boolean True.
  get the value under the e.code key of the self.error_messages dictionary, substitute the result for e.message.
  define the function get_language_from_request with 2 arguments: request and check_path set to boolean False.
  from __future__ import absolute_import into default name space.
  convert self.children into an boolean, return it.
  if header equals a string 'ACCEPT_LANGUAGE' and is_accept_language_redundant is boolean True,
  if lookup_view is contained in self._callback_strs,
  substitute first element of self.argv for subcommand.
  otherwise call the method table2model with second element of the i-th row of relations and substitute it for rel_to.   if rel_to is contained in known_models,
  define the function get_commands.
  if scheme is not contained in self.schemes,
  if rhs is an instance of SafeText,
  increment weight by integer 2.
  define the method get_full_path with an argument self.
  if not,
  method lru_cache.lru_cache with an argument maxsize set to None, as a decorator,
  if PY3 is true,
  import module threading.
  from django.utils.deconstruct import deconstructible into default name space.
  get the value under the 'id' key of the final_attrs dictionary, substitute it for id_, if it doesnt exists, id_ is None.
  call the __init__ method with arguments file and name, from the base class of the UploadedFile class.
  join into a file path: django_dir, 'conf', 'locale', locale, 'LC_MESSAGES' and string '.po' appended to domain, substitute the result for django_po.
  try,
  exp is an instance of Decimal, created with an argument integer 1.
  try,
  try,
  set the file position pointer at the beginning.
  call the function _check_test_runner with dictionary kwargs as argument, use the result as an argument for the call to the function errors.extend.
  split ip_str into parts by ':', for every x in the result, calculate length of x, if any is smaller than integer 4,
  call the method self.close.
  get the value under the 'indent' key of the options dictionary, multiply it with level, create a string containing number of  whitespaces equal to the previous result, append it to the string containing newline character, use the result as the argument for  the call to the self.xml.ignorableWhitespace method.
  call the method self.importer with an argument used, substitute the result for found.
  define the method css_classes with 2 arguments: self and extra_classes set to None.
  call the method __getitem__ from the base class of the class MultiValueDict, with an argument key, substitute the result for list_.
  call the method handler.addQuickElement with 2 arguments: string 'category' and cat.
  if ImportError exception is caught,
  buffer_types is a tuple with 3 elements: bytes, bytearray and memoryview.
  call the method self._expire_info.get with key and integer -1 as arguments, substitute the result for exp.
  raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.
  if KeyError exception is caught,
  raise an TypeError exception with an argument string "invalid keyword arguments to print()".
  if KeyError exception is caught,
  substitute val for the value under the cache_key key of the _format_cache dictionary.
  call the method handler.addQuickElement with an argument string "author", "%s (%s)",
  'TemporaryFileUploadHandler', 'MemoryFileUploadHandler', 'load_handler' and 'StopFutureHandlers'.   derive the class UploadFileException from the Exception base class.
  replace all the occurrences of previous string in msgs for an empty string, substitute the result for msgs.   call the function io.open with 3 arguments: pofile, string 'w' and encoding set to string 'utf-8' as arguments,
  if commit is true and form has an attribute 'save_m2m',
  if self has an attribute 'clean_%s', where '%s' is replaced with name,
  from functools import wraps into default name space.
  define the method assignment_tag with 4 arguments: self, func set to None, takes_context set to None and name set to None.
  do nothing.
  convert self.option_list into a boolean, return the inverted value.
  if app_config.label is contained in loader.migrated_apps,
  if doublecolon_start equals integer -1,
  define the method _isdst with 2 arguments: self and dt.
  substitute it for value under the 'initial' key of kwargs dictionary.   if IndexError exception is caught,
  ctx is an hashlib object, for calculating hash function with md5 algorithm.
  if option is contained in options,
  decorator function register.filter with an argument is_safe set to boolean False.
  call the method domain.encode with an argument string 'idna', call the method decode on the result with an argument string 'ascii',
  decorator function register.filter with an argument is_safe set to boolean True.
  substitute second element of plan_node for title.
  file is an instance of BytesIO class created with an argument: return value of the method data.read.
  if ValueError, TypeError or OverflowError exceptions are caught,
  substitute self for data.
  substitutions is a dictionary with 4 initial entries: self.initial_text for 'initial_text', self.input_text for 'input_text',
  return dec.
  define the method __init__ with 2 arguments: self and conditions_nodelists.
  for every key in self.keyOrder,
  cal the method re.subn with 3 arguments: raw string '\W', string '_' and new_name.
  substitute the value under the 'errlog' key of options dictionary for value under the 'err_log' key of daemon_kwargs dictionary.
  call the function new_method_proxy with an argument bytes, substitute the result for __bytes__.
  if AttributeError exception is caught,
  split ip_str into parts by ':', for every hextet in the result,
  substitute content for self.content.
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  if self.interactive is true,
  if not,
  call the function check_programs with an argument string 'xgettext'.
  call the function re.compile with an argument raw string '(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))', substitute the result for re_camel_case.
  pop_context is boolean True.
  define the function assertCountEqual with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  call os.makedirs function with self._dir and hexadecimal 0o700 as arguments.
  call the method re.compile with 2 arguments: raw string '^(?P<value>"Plural-Forms.+?\\n")\s*$',
  and RemovedInDjango19Warning.   get the value under the ' use_natural_foreign_keys' key of the options dictionary, substitute the result for  use_natural_foreign_keys.
  import module itertools.
  return a tuple with 3 elements: copyreg._reconstructor, tuple with 3 elements: self.__class__, object and None,
  endless loop,
  raise an ImproperlyConfigured exception with an argument string "Creating a ModelForm without either the 'fields' attribute,
  raise an ValidationError with 2 arguments: self.error_messages dictionary value under the 'invalid_choice' key,
  define the function strip_tags with an argument value.
  derive the class WidthRatioNode from Node base class.
  get the value under the format key of the _serializers dictionary, return the Serializer filed of the result.
  append self.fk.name to form._meta.fields.
  for every attachment in self.attachments,
  if not, substitute self.auto_id for id_.   if if_is true attrs is an dictionary with initial entry: id_ for 'id', if not, attrs is an empty dictionary.
  set filter_func._decorated_function objects attr attribute to value.
  substitute app_name for self.app_name.
  from django.utils.http import http_date to the default name space.
  substitute new_result for result.
  if self.takes_context is true,
  self.tags is an empty dictionary.
  from django.utils.html import conditional_escape and format_html into default name space.
  if url ends with '/' character,
  if lookup_view is a callable object,
  derive the class EmailValidator form the object base class.
  from django.conf import settings into default name space.
  call the method handler.addQuickElement with 2 arguments: string 'subtitle' and value under the 'subtitle' key of the self.feed dictionary.
  define the method __init__ with 3 arguments: self, func and name set to None.
  raise an exception.
  raise an CommandError exception with an argument string '"%s" is not a valid IPv6 address.' where '%s' is replaced with self.addr.
  call the method self.merge with an argument translation.
  call the method __setitem__ from the base class of the class SortedDict, with 2 arguments key and value.
  from django.conf import settings into default name space.
  substitute func for value under the '_setupfunc' key of the self.__dict__ dictionary.
  substitute the result for value.   call the function avoid_wrapping with an argument value, return the result.
  and call to the method form.has_changed evaluates to false,   skip this loop iteration,
  call the method copy.deepcopy with arguments self.widget and memo, substitute the result for result.widget.
  call the function ip.
  define the method encoding with arguments self and val.
  _fields_ is a list containing 4 tuples: first tuple contains: string 'Internal' and ULONG_PTR,
  increment weight by integer 2.
  import module traceback.
  biggest_number is integer 1.
  called with 2 arguments: value rounded to 1 decimal point and integer 1.   move integer 1 left for 10 bits, substitute the result for KB.
  define the method __get__ with 3 arguments: self, instance and name type to None.
  from django.core.exceptions import ImproperlyConfigured into default name space.
  call self.stdout.write method with app_name and self.style.MIGRATE_LABEL as arguments.
  define the method inner with argument check.
  from __future__ import unicode_literals into default name space.
  if data is instance of Node and data.negated is false, and if data.connector equals conn_type or length of data equals integer 1,
  return integer 12.
  from django.forms import Form into default name space.
  if not,
  return cls.
  define the __init__ method with 4 arguments: self, message set to None, code set to None and whitelist set to None.
  raise an EnvironmentError exception with string "Cache directory '%s' does not exist and could not be created" as argument,
  derive the class ConvertingTuple from tuple base class.
  escaped is boolean False.
  and help as a string 'Nominates a database to print the SQL for. Defaults to the "default" database.', as arguments.   define the method handle_app_config with self class instance, app_config and dictionary options as arguments.
  __all__is an tuple with 2 elements: strings 'BaseForm' and 'Form'.
  result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Feb.' for 2,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'March' for 3,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'April' for 4,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'May' for 5,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'June' for 6,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'July' for 7,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Aug.' for 8,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Sept.' for 9,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Oct.' for 10,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Nov.' for 11,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Dec.' for 12,   MONTHS_ALT is an dictionary with 12 entries: result of the function pgettext_lazy with 2 arguments: 'alt. month' and 'January' for 1,
  if ValidationError exception is caught,
  call the method middleware.process_view with 4 arguments: request, view_func, args and kwargs, substitute the result for result.
  invert self.negated.
  substitute code for self.code.
  substitute stream for self._stream.
  if string 'trimmed' is contained in result of the method t.split_contents, trimmed is boolean True, otherwise is boolean False.
  define the function check_for_migrations with 2 arguments: app_config and connection.
  raise an AttributeError exception with an argument string: "'%s' object has no attribute 'ordered_forms'",
  call the function walk_to_end with 2 arguments: ch and pattern_iter.
  if ImportError exception is caught,
  call the function popen_wrapper with argument args, assign the result to msgs, errors and status.
  content_type, length of content, None and None.   decorator classmethod.
  if ending is None substitute self.ending for ending.
  call the method apps.get_app_config with an argument app_label.
  write string ' #\n' to out file.
  from pkg_resources import resource_string into default name space.
  define the function join_tokens with 2 arguments: tokens and trim set to boolean False.
  define the function upper with an argument value.
  do nothing.
  if definition is true,
  call the method self.next_token, substitute the result for self.current_token.
  if settings.USE_L10N is true and value is an instance of six.string_types,
  get 'value' attribute of the _prefixes, if it exists, return it, otherwise return '/'.
  missing_args_message is an string "Enter at least one application label.".
  try,
  substitute self.__class__ for response._handler_class.
  get translation_function attribute of the object _default, call the result with an argument eol_message, substitute the result for result.
  call the method self.configurator.convert with an argument value, substitute the result for result.
  return first and second element of result.
  call function _checkLevel with an argument level, use the result as an argument for the method result.setLevel.
  define the method __add__ with 2 arguments self and rhs.
  try,
  cache_key is a tuple with 2 argumetns: format_type and lang.
  name is an empty list.
  'App label of an application to synchronize the state.' as arguments.   call the method parser.add_argument with string 'migration_name', nargs set to charcter '?', help containing string,
  call the function new_method_proxy with an argument dir, substitute the result for __dir__.
  raise an CommandError with an argument string "Unable to find a locale path to store translations for file %s",
  return msg_count.
  try,
  if not,
  from django.db.models.fields.related import RelatedObject into default namespace.
  try,
  from django.utils.encoding import force_text and DEFAULT_LOCALE_ENCODING into default name space.
  define the method list with 3 arguments: self and unpacked list args and unpacked dictionary kwargs.
  self.error_dict is an empty dictionary.
  app is a string 'django'
  return boolean False.
  return the result.   define the method value_from_datadict with 4 arguments: self, data, files and name.
  define the method _create_attachment with 4 arguments: self, filename, content and mimetype set to None.
  'PasswordInput', 'HiddenInput', 'MultipleHiddenInput', 'ClearableFileInput', 'FileInput', 'DateInput', 'DateTimeInput', 'TimeInput',   'Textarea', 'CheckboxInput', 'Select', 'NullBooleanSelect', 'SelectMultiple', 'RadioSelect','CheckboxSelectMultiple', 'MultiWidget',   'SplitDateTimeWidget' and 'SplitHiddenDateTimeWidget'.   MEDIA_TYPES is a tuple with 2 strings: 'css' and 'js'.
  if self.is_localized is true,
  for every matches, pat and defaults in return value of the method pattern.reverse_dict.getlist called with an argument name,
  define the function make_msgid with argument idstring set to None.
  if self.load_initial_data is not empty,
  return boolean False.
  if obj is an instance of Field, append to a list a tuple with 2 elements: field_name,   and poped value under the field_name key of the attrs dictionary, substitute the resulting list for fields.   sort fields elements with key being a lambda function with argument x and return value creation_counter filed of first element of x.
  define the method _clean_fields with an argument self.
  value under the MISSES key of the stats dictionary, maxsize and length of cache.   define the function cache_clear.
  if initial is not equal to data, return boolean True, if it is return boolean False.
  define the method _text_chars with 5 arguments: self, length, truncate, text and truncate_len.
  define the method __deepcopy__ with 2 arguments: self and memo.
  return value under the name key of the data dictionary, if it doesnt exists, return None.
  if TypeError, renamed to te, exception is caught,
  define the method _get_context_stack_frame with 2 arguments: self and context.
  substitute csrf_token for value under the 'csrf_token' key of new_context dictionary.
  raise an ValidationError with 2 arguments: value under the 'contradiction' key of the self.error_messages dictionary and code set to 'contradiction'.
  import module datetime.
  encoding.setter decorator,
  return an dictionary containing 1 entry: return value of the function _get_val for 'csrf_token'.
  get the value under ch key of the ESCAPE_MAPPINGS dictionary, if it exists substitute it for representative, if not substitute ch for representative.
  call the function os.path.dirname with an argument writer.path, substitute the result for migrations_directory.
  call the method self.set_charset with utf8_charset as an argument.
  call the function os.path.dirname with argument full_path, substitute the result for directory.
  define the method __next__ with an argument self.
  get "_decorated_function" attribute from func object, if it exists substitute __name__ field of the result for name,
  if self.hint exists, replace '%s' in a string "\n\tHINT: %s" with value of self.hint, substitute it for hint, otherwise hint is an empty string.
  call the function sys.exit with argument exit_code.
  substitute the result for the value under the Model._meta.pk.attname key of data dictionary.   m2m_data is an empty dictionary.
  sum index and length of self._boundary, substitute the result for next.
  call the function trim_url with an argument middle, substitute the result for trimmed.
  call the method MIMEText.__init__ with 4 arguments: self, text, subtype and charset.
  do nothing.
  derive the class IfNode from Node base class.
  if bit starts with '_("' ot bit starts with "_('",
  call the method language_code_re.search with an argument accept_lang, if it evaluates to false,
  define the method sync_apps with self class instance, connection and app_labels as arguments.
  try,
  append string '%%(%s)s' to singular, where '%s' is replaced with t.contents.
  from django.utils.encoding import force_text and smart_text into default name space.
  call the function do_ifequal with 3 arguments: parser, token and boolean False, return the result.
  define method add_arguments with self class instance and parser as the arguments.
  from django.http.cookie import SimpleCookie and parse_cookie into default name space.
  define function force_bytes with s, encoding set to 'utf-8', strings_only set to False and errors set to 'strict' as arguments.
  get name attribute from the instance object, call it and return the result.
  call the method parser.add_argument with 3 arguments: string 'args', metavar set to string 'app_label' and nargs set to '*'.
  _anonymous_ is a list containing one string: '_offset'.
  if file_obj is true,
  if script_url is true,
  try,
  if 'warning' is contained in kwargs,
  define the method __init__ with 3 arguments: self, args and kw.
  convert new_name to a string and append string 'field' to it, substitute the result for new_name.
  return value.
  import module smtplib.
  'status_code' with value 403, and 'request with value request,   respectively use the previous as the arguments for the call to the logger.warning function.   call the method self.get_exception_response with request, resolver and integer 403 as the arguments, assign the result to response.
  call the self._load_post_and_files method.
  if ValueError exception is caught,
  call the method content.encode with an argument string 'utf-8', substitute it for content.
  if s equals a string '"',
  help is a tuple containing a string "Creates a Django app directory structure for the given app name in the current directory or optionally in the given directory.".
  call the method _trans.npgettext with 4 arguments context, singular, plural and number.
  from django.db import models into default name space.
  if first element of the url_fields is false,
  call the method Model._meta.pk.to_python with one argument: value under the 'pk' key of dictionary d, or None if previous doesnt exists,
  int_part_gd is an empty string.
  if is_relation,
  insert token at the beginning of self.tokens.
  previous result and filepath.   if IOError exception is caught,
  if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
  content.setter decorator,
  call the function chain with 2 arguments: self.choices and choices, convert the result into a list and substitute it for choices.
  derive the class Command from the AppCommand base class.
  errors is an empty list.
  call the method package.rindex with 3 arguments: string '.', integer 0 and dot, substitute the result for dot.
  for every chunk in field_stream,
  replace all occurrences of symbol '_' in string k with symbol '-', use new string as key to find a value in dictionary cc,
  call the function io.open with 3 arguments: potfile, string 'a' and encoding set to string 'utf-8' as arguments,
  substitute str_number and an empty string for int_part and dec_part.
  try,
  if potfile file path doesnt exist,
  write it to self.stdout.   if not,
  substitute node for bit.
  get 'nodelist' attribute from self object. if it doesnt exists return boolean False, if the result evaluates to false,
  substitute the return value of the method self.object_list.count for self._count.
  call the method logger.removeHandler with an argument handler.
  if opts.model is true,
  call the function timezone.make_aware with arguments value and current_timezone, return the result.
  try,
  call the method objects.using with an argument using, call the method order_by on the result with an argument model._meta.pk.name,
  substitute http_cookies.Morsel for Morsel.
  remove first element from name, substitute the result for used.
  substitute locale_dir for self.locale_dir.
  append string "    %s", where '%s' is replaced by name to the usage.
  define the method parse with an argument self.
  raise an exception,
  append form.errors to self._errors.
  self._ordering is an empty list.
  if value is an instance of datetime.date class,
  call the method self._headers.values, return the result,
  return s.
  value under the 'link' key of item dictionary for 'href' and "alternate" for "rel".   if value under the 'pubdate' key of the item dictionary is not None,
  use_l10n set to None and use_tz set to None.   call the method Context.__init__ with 5 arguments: self, dict_, current_app as current_app, use_l10n as use_l10n, use_tz as use_tz.
  skip this loop iteration.
  return duplicate.
  if file_ext is contained in command.extensions, is_templatized is boolean True, otherwise it is boolean False.
  if cache_timeout is lesser than integer 0,
  _supported is an instance of OrderedDict class, created with an argument settings.LANGUAGES.
  call the method self._get_model_from_node with arguments node and string 'model'.
  call the function BytesIO, substitute the result for self.file.
  self._post is an instance of QueryDict created with arguments: an empty string and encoding set to self._encoding,
  validate_slug is a instance of a RegexValidator class, created with 3 arguments: slug_re, return value of the call to the function,
  try,
  index of the first occurrence of '\\' in path, or alternatively if '\\' is not contained in path,   split path in two parts by '/' character, return the result.
  define the method resolve with 2 arguments: self and context.
  call the method self.reader_enters.
  import module tempfile.
  do nothing.
  if filename ends with '.pyo', '.pyc' or '.py.class',
  if settings.configured is true,
  re_formatchars.split, for every i and piece in enumerated result,   if i is even number,
  try,
  call the method app.initialize with an argument argv as an empty list.
  self.bcc is an empty list.
 _format_modules_cache is an empty dictionary.
  define the method __init__ with 4 arguments: self, nodelist_true, nodelist_false and unpacked list varlist.
  break the loop execution.
  call te method operator.itemgetter with an argument integer 0, substitute the result for byte2int.
  from django.db.migrations.autodetector import MigrationAutodetector into default name space.
  substitute index for end.
  for every loc in locales,
  call the function six.text_type with s, encoding and errors as the arguments, substitute the result for s.
  get the attribute '__name__' from the getattr, if it exists substitute it for m, if not, m is None.
  otherwise if autoescape is true,
  define the method _get_closed with argument self.
  if not,
  substitute None for self.style_func.
  return s.
  if VariableDoesNotExist exception is caught,
  for every ext in combo, if ext is true, join it to a string, separated by '.', put the result in a tuple,
  replace '%s' in a string "Created new squashed migration %s" with writer.path, use it as an argument for the call to the method,
  if not,
  append string "Field renamed because it ended with '_'." to field_notes.
  return the result of the call to the function force_text, with s, encoding, string_only and errors as arguments.
  define the method __repr__ with an argument self.
  if self.old_timezone is None,
  import module keyword.
  call the function pickle.load with argument f, substitute the result for exp.
  return EventHandler.modified_code.
  and unpacked dictionary kwargs, return the result.   property decorator,
  if model is contained in created_models,
  if col_name is not equal to new_name and field_notes is true,
  raise an TypeError with an argument string "relative imports require the 'package' argument".
  get attribute class_name form the module object, return it.
  strip g of '"' from both ends,
  define the function m2m_convert with an argument n,
  from django.utils import six into default name space.
  joined into a string, separated by whitespaces, substitute the result for loopvars.   for every var in loopvars,
  define the function translation with an argument language.
  call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for _default.
  if field_type equals a string 'BooleanField(',
  do nothing.
  substitute elements of self.validators list for result.validators.
  call the translation.get_language function, substitute the result for the value under the 'LANGUAGE_CODE' key of the context_extras dictionary.
  if domain is true and return value of the function validate_host called with 2 arguments: domain and settings.ALLOWED_HOSTS, evaluates to true,
  if tablename is contained in return value of the method connection.introspection.table_names,
  raise an NotImplementedError with an argument string 'subclasses of SyndicationFeed must provide a write() method'.
  call method sort on the headerlist.
  if i is smaller than result of the method self.initial_form_count and key 'instance' is not contained in kwargs,
  chars is a string 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'.
  create directories from the elements in filename.
  if Exception exception is caught,
  call the self.start_object with an argument obj.
  default set to boolean True and help set to string 'Tells Django to NOT prompt the user for input of any kind.'.   call the parser.add_argument with string '--addrport', default set to an empty string and help as string 'Port number or ipaddr:port to run the server on.'.
   from django.utils import translation into default namespace.
  if not,
  import module sta.
  join self.dirpath, thefile into a file path, substitute it for work_file.
  if error is not an instance of ValidationError,
  and dictionary of arbitrary length **kwargs as arguments.   call the initialization method for the base class, _html_parser.HTMLParser.__init__ with self,
  for dirpath, dirnames and filenames, respectively, in directory tree tuple starting from the ldir,
  substitute self.current_token for t.
  if args is true,
  call the method self.appendlist with 2 arguments: return value of the function force_text with 3 arguments:
  call method request.META.get with arguments header and None.
  if attrvalue is not an empty string,
  value is an empty string.
  if set is empty return string '(none)' instead, append the previous to the string " Apply all migrations: ",   use the previous string as the argument for the call to the method self.style.MIGRATE_LABEL,   use the result as an argument for the call to the method self.stdout.write.   if not,
  if not,
  call the function run with 5 arguments: self.addr, self.port converted to an integer, handler, ipv6 set to self.use_ipv6,  and threading set to threading.
  define the method pop with 3 arguments: self, key and unpacked list args.
  call the method clean with an argument value from the base class of the EmailField class.
  if ValueError exception is caught,
  call the method regex.search with 2 arguments: text and pos.
  substitute OPERATORS dictionary element under token key for op.
  primary_keys is an empty list.
  if not,
  if fourth element of attr_list and termios.ECHO are both true,
  try,
  call the method self.normalize_col_name with 3 arguments column_name, used_column_names, is_relation, assign the result to att_name,  params and notes, respectively.
  from django.template import loader,  Context and RequestContext into default name space.
  define the function _import_module with an argument name.
  substitute value under idx key of dictionary d for d.
  obj is None,
  call the method self.connection.login with arguments self.username and self.password.
  sort elements of handlers, for every name in result,
  call the method self.remove_potfiles.
  call the method token.contents.split, substitute the result for args.
  define the method _set_name with arguments self and name.
  define the function get_mod_func with an argument callback.
  substitute sign for self.sign.
  call the method self.error_class with an argument error_class as an string 'nonfield',
  define the method clean with an argument self.
  call the function is_aware with an argument date, if it evaluates to true,
  dest is string 'use_natural_foreign_keys', default is boolean False and help is a string 'Use natural foreign keys if they are available.'.   call the method parser.add_argument with 5 arguments: string '--natural-primary', action set to 'store_true',
  binary or os.O_EXCL if allow_overwrite is boolean False, use the previous as the mode to open new_file_name file, assign the file descriptor to fd.   try,
  do nothing.
  substitute self.rawdata for rawdata.
  substitute the resulting list for list_.   call the method setlist from the base class of the QueryDict class, with arguments key and list_.
  decorator stringfilter,
  otherwise if ch equals a string '^',
  self._files is an instance of MultiValueDict class.
  ns is a string "http://www.w3.org/2005/Atom".
  call the function get_template with 2 arguments: template_name and dirs, substitute the result for t.
  fill_to is an integer 8.
  from functools import total_ordering.
  return ZERO.
  import module calendar.
  try,
  call the function no_style, substitute the result for self.style.
  if ValueError exception is caught.
  substitute socket.AF_INET6 for self.address_family.
  if self has an attribute '_size'.
  if s is not an instance of the object Exception,
  call the method token_string.count with an argument '\n', append the result to self.lineno.
  find the value of response under the key 'Cache-Control', use it as a delimiter to split string ss_delim_re,
  call the method self.configure_filter with an argument value under name key of filters dictionary,
  cached_loaders is an empty list.
  call the function force_text with 3 arguments: field_name, encoding and errors as a string 'replace', substitute the result for field_name.
  raise an v exception.
  join elements of extra_classes into a string separated by whitespaces, return it.
  from django.core.management.base import BaseCommand and CommandError into default name space.
  or model._meta.app_config is contained in app_configs, for every field in model._meta.local_fields,  #ANNOTATION only if field is an instance of models.BooleanField and field.has_default() evaluates to False.    call the Warning function with 4 arguments: string "BooleanField does not have a default value.",
  return retval.
  call the function warnings.warn with 3 arguments: string "`%s.%s` method should be renamed `%s`.",
  call the method self.create_token with 3 arguments: self.template_string list elements from upto index to start index,
  if mimetype is None,
  for every node in self,
  define the method data with an argument self.
  call the method self.prepend_token with an argument token,
  if sys.platform starts with string 'java',
  add elements from new_modules set to _cached_modules set.
  content_length is None.
  define the function escape_filter with an argument value.
  if addr is a instance of six.string_types,
  define the method end_object with argument self and obj.
  if not,
  call the function formatdate with 2 arguments: epoch_seconds and usegmt set to boolean True, return the result.
  convert to strings and concatenate context, CONTEXT_SEPARATOR and message, substitute the result for msg_with_ctxt.
  if not,
  value is None.
  call the function escape with an argument lead, substitute the result for lead, call the function escape with an argument trail,
  do nothing.
  do nothing.
  substitute state for self.state.
  called with an argument error, for every error in bf.errors, substitute the result for bf_errors.   if bf.is_hidden is true,
  if tags is not None.
  all the method self.create_table with arguments: db and cache._table.
  if not.
  if delta is smaller than integer 0.
  call the method parser.add_argument with 3 arguments: string 'args', nargs set to argparse.REMAINDER and help as a string 'Various KEY=val options.'
  if lengths of initial and data are equal,
  if varargs is None,
  if not,
  raise an exception.
  from django.conf import settings into default name space.
  from django.utils.module_loading import import_string into default name space.
  define the function make_origin with 4 arguments: display_name, loader, name and dirs.
  join to_path and name into a valid system path, substitute the result for filename.
  if IndexError exception is caught,
  if autoescape is true and value is not an instance of SafeData, autoescape is boolean True, otherwise it is boolean False.
  call the method msg_data.decode with argument charset, substitute the result for msg_data.
  join elements of self.fed into a string, return the result.
  from django.core.management.color import no_style into default name space.
  call the method handler.addQuickElement with 2 arguments: string 'ttl' and value under the 'ttl' key of the item dictionary.
  define the method add_root_elements with 2 arguments: self and handler.
  substitute conditions_nodelists for self.conditions_nodelists.
  if data has an attribute 'read',
  if not,
  define the method usage with 2 argument: self and subcommand.
  define the method __str__ with an argument self.
  define the method fetch_command, with arguments self and subcommand.
  substitute self.config for config.
  return an empty string.
  convert slice of language string from (p+1)-th index to the end to uppercase, append it to the previous result, return the resulting string.   if not,
  define the method strptime with arguments self, value and format.
  define the initialization method __init__ with self class instance and environ as arguments.
  if app_name is not contained in loader.migrated_apps,
  wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " OK" as a argument.
  skip this loop iteration.
  if view_function is not a callable function,
  and unpacked dictionary kwargs, return the result.   define the function assertRegex with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  call the method self.validate with an argument out.
  if not,
  otherwise if ch equals a string '|',
  call the function check_for_migrations with an arguments app_config, connection.
  for every message in email_messages,
  from django.conf import settings into default name space.
  for 'maxSpare', value under the key 'minspare' of options dictionary converted to an integer for 'minSpare',   and value under the key 'maxchildren' of options dictionary converted to an integer, for 'maxThreads'.   if not,
  define private method __repr__ with argument self.
  define the method utcoffset with 2 arguments: self and dt.
  if not,
  call the function re.compile with 2 arguments: raw string "([A-Za-z]{1,8}(?:-[A-Za-z0-9]{1,8})*|\*)(?:\s*;\s*q=(0(?:\.\d{,3})?|1(?:.0{,3})?))?(?:\s*,\s*|$)",
  return a string "<Variable Node: %s>", substitute '%s' with self.filter_expression.
  call the function self.to_python with an argument data, substitute the result for data.
  call the method apps.setdefault with 2 arguments: app_name and an empty list, extend the resulting list with namespaces_list.
  call the self.get_dum_object method with an argument obj, use the result as an argument for the self.objects.append method.
  skip this loop iteration.
  import module re.
  do nothing.
  'Nominates a database to print the SQL for. Defaults to the "default" database.' as the arguments.   define the method handle with self class instance and dictionary options as the arguments.
  if settings.USE_TZ is true,
  concatenate string '%0', width and string "d. %s", format the previous string with i incremented by 1,
  for every match in matches,
  if self.help is true,
  join self.path and f in path, substitute the result for full_file.
  for second and third element of args, respectively.   if length of args equals integer 2,
  if not accept is an empty string.   call the function parse_accept_lang_header with an argument accept, for every accept_lang and unused in the result,
  if ValueError exception is caught,
  substitute operator.getitem for indexbytes.
  derive the class ContextPopException from the Exception base class.
  import module os.
  silent is boolean True.
  convert self to a list and return it.
  raise a NotImplementedError with an argument string 'subclasses of Deserializer must provide a __next__() method'.
  join statements into a string, separated by newline characters, return it.
  define the method listdir with arguments self and path.
  call the method unicodedata.combining with an argument char, if it evaluates to false,
  and result of the function force_bytes called with an argument val2, return the result.   if not,
  and unpacked dictionary kwargs.   define the method render with 2 arguments self and context.
  call the method self.check_migrations.
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  call the method comment_re.sub with an arguments: raw string '\1' and line, strip the whitespaces surrounding the result, return it.
  define the method __len__ with an argument self.
  call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',
  "Django 1.7 changed the global defaults for the MIDDLEWARE_CLASSES. django.contrib.sessions.middleware.SessionMiddleware,   django.contrib.auth.middleware.AuthenticationMiddleware, and django.contrib.messages.middleware.MessageMiddleware were removed   from the defaults. If your project needs these middleware then you should configure this setting.", obj set to None, and   id set to a string '1_7.W001', put the result into a list and return it.   if not,
  call the method self.build_attrs with 3 arguments: attrs, type set to self.input_type, name set to name,
  call the function os.fdopen with arguments fd and mode, substitute it for _file.
  derive the class ReferenceLocalTimezone from the tzinfo base class.
  and element of tokens at i incremented by 1 index equals a string "in",   token is a string "not in".
  split template once at the first character ':', convert the first element to lowercase and substitute it for scheme.
  day_field is a string '%s_day'.
  return self.new_objects.
  if OSError, renamed to e, is caught,
  skip this loop iteration.
  call the method formats.number_format with 2 arguments: number and absolute value of p,
  self.request is None.
  for every bit in elements of bits without the first element, call the method parser.compile_filter, with an argument bit,
  if commit is true,
  value under the 'declared_fields' key of the attrs dictionary is an instance of OrderedDict class, created with an argument current_fields.
  BLOCK_CONTEXT_KEY is a strign 'block_context'.
  substitute key for result.key.
  substitute obj for self.data.
  if self doesnt have '_queryset' attribute,
  if call to the method self.is_valid, evaluates to false or self.can_delete is boolean false,
  if not,
  if attr is an instance of MovedModule.
  field_list is an empty list.
  call the method connection.client.runshell.
  call the function _generate_cache_key with request, request.method, headerlist, key_prefix as arguments, return the result.
  return an instance of a class RegexURLResolver created with arguments: raw string '^/' and a list containing an element ns_resolver.
  if doublecolon_len is greater than best_doublecolon_len,
  try,
  get the name key of the data dictionary, if the key exists return it, if not return None.
  define COOKIES method with self as the argument.
  call the method other.__cast, substitute the result for other.
  if f doesnt has an 'save_form_data' attribute,
  if second element of k is None,
  if "__call__" is contained in klass.__dict__ for any klass in __mro__ field of the obj class, return boolean True, otherwise return False.
  try,
  return an instance of DebugNodeList class.
  _localtime is None.
  evaluate the self.getpos() and assign the result to the lineno and offset respectfully.
  if name is None,
  message is an instance of the ValidationError class created with an argument message.
  substitute settings.CACHE_MIDDLEWARE_SECONDS for cache_timeout.
  if only_new is true,
  if self.urlconf_name is an instance of a list type and its length is not zero.
  import module itertools.
  skip this loop iteration,s
  substitute empty_label for self.empty_label.
  USE_INOTIFY is boolean True.
  if not settings.DEBUG is true and settings.ALLOWED_HOSTS is false,
  where '%(field)s' is replaced with return value of the get_text_list function called with 2 arguments:   unique_check and return value of the function six.text_type called with return value of the function _ with an argument string 'and',   return the result.   define the method get_date_error_message with 2 arguments: self and date_check.
  call the method posixpath.splitext with an argument the_path.
  define the function reset_translation.
  return attrs.
  return out.
  and input_format, substitute the result for v.   substitute v.year, v.month and v.day for year_val, month_val and day_val, respectively.
  if call to the method self.L evaluates to true, and result of the call to the method self.data.month is greater than integer 2,
  self.items is an empty list.
  define the function templatize with 2 arguments: src and origin set to None.
  define the method __str__ with an argument self.
  if from_email exists substitute from_email for self.from_email, if not substitute settings.DEFAULT_FROM_EMAIL for self.from_email.
  substitute name for self.name.
  call the function write_pot_file with 2 arguments: potfile and msgs.
  if KeyError exception is caught,
  call method __init__ from the base class of the class PyLibMCCache with arguments: server, params,
  self.fixture_count is integer 0.
  call the function func with an argument path.
  xgettext_options is an list with elements: strings '--from-code=UTF-8' and '--add-comments=Translators'.
  while field.rel is not None,
  replace every occurrence of "'" in s with "\\'".
  call the function force_text with 2 arguments: value under the is_dst key of the time.tzname and DEFAULT_LOCALE_ENCODING,
  if not,
  if template is an instance of list or tuple types,
  call the method self.getlist with an argument key, return the result.
  string "resolve_variable() is deprecated. Use django.template. Variable(path).resolve(context) instead", RemovedInDjango20Warning,   and stacklevel set to integer 2.   call the method resolve with an argument context, from the instance of Variable class, created with an argument path.
  call the function self._new_gnu_trans with 2 arguments: localedir and use_null_fallback, substitute the result for translation.
  take last four elements of base and append ext to it, substitute result for ext.
  return boolean True.
  call the function _import_module with an argument self.mod, return the result.
  call the method self.error_class, substitute the result for self._non_form_errors.
  call the function itertools_cycle with an argument self.cyclevars, substitute the result for value under the self dictionary context.render_context.
  call the method field_params.update with an argument new_params.1
  from functools import lru_cache.
  do nothing.
  define private method __str__ with argument self.
  WRAPPING_PUNCTUATION is a list with 6 elements: tuple with 2 elements: '(' and ')', tuple with 2 elements: '<' and '>',
  break the loop execution.
  call the method self._archive.namelist, substitute the result for namelist.
  define the method to_python with arguments self and value.
  define the function pgettext with 2 arguments: context and message.
  define the function force_text, with s, encoding set to 'utf-8', strings_only set to False, errors set to string 'strict' as arguments.
  try,
  __all__ is an list containing string 'SelectDateWidget'.
  where '%d' is replaced with name, dlen subtracted from alen, and plen.   return boolean True.
  define the method write with 2 arguments: self and content.
  break from the loop execution,
  define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  get value under 'target' key of config dictionary, use it as a key to get the value from the dictionary,
  define the function __init__ with 5 arguments: self, takes_context, args, kwargs and target_var.
  raise an TemplateSyntaxError exception with an argument string "'ssi' tag takes one argument: the path to the file to be included".
  append truncate_text to out.
  as_form is boolean True.
  call the method fixture.close.
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  if not,
  do nothing.
  if nesting is false,
  missing_args_message is a tuple containing a string "No database fixture specified. Please provide the "
  call the encode function on the Header class instance, created with arguments addr and encoding, substitute the result for addr.
  define the method get_default_prefix with an argument cls.
  return value of method url.hexdigest(), return value of method ctx.hexdigest, respectively, substitute it for cache_key.   call the function _i18n_cache_key_suffix with request and cache_key as arguments, return the result.
  if value is false,
  else if timeout converted into an integer equals to integer 0,
  import module warnings.
  substitute cache_info for wrapper.cache_info.
  if exclude is true and f.name is contained in exclude,
  define the method render with 2 arguments: self and context.
  define the function b with an argument s.
  assign obj to the obj field of self instance of this class.
  decorator function register.filter with 2 arguments string "timesince" and is_safe set to boolean False.
  call the method self._mark_post_parse_error.
  for every digit in number coverted to a string,
  try
  if socket.error, renamed to e, exception is caught,
  if palette equals value under the NOCOLOR_PALETTE key of the PALETTES dictionary,
  decorator function register.filter with an argument is_safe set to boolean True.
  define the function handle_default_options with an argument options.
  app_list is an instance of OrderedDict class, created with an argument a tuple containing elements: app_config and None,
  contextlib.contextmanager decorator,
  return data.
  define the method __repr__ with an argument self.
  from xml.dom import pulldom into default name space.
  call the formatdate function, substitute it for value under the 'Date' key of msg dictionary.
  substitute val_expr for self.val_expr.
  call the function date.strftime with an argument string '%Y-%m-%dT%H:%M:%S', substitute the result for time_str.
  append digit to int_part_gd.
  return boolean False.
  if new_name is not equal to col_name,
  define the method incr with self class instance, key, delta set to integer 1 and version set to None, as arguments.
  indent contain tabs number of tab character.
  from django.utils.http import urlquote into default name space.
  break the loop execution.
  call the function _ with an argument string '(Hidden field %(name)s) %(error)s', where '%(name)s' is replaced with name,
  convert language to lowercase and return it.
  name is a property object with _get_name as a getter method and _set_name as a setter method.
  call the method to_python with an argument value from the base class of the DateField class, return the result.
  default string value, substitute it for value.   return value if six.PY2 is true, if not return value.encode(ISO_8859_1).decode(UTF_8).
  chunks is an empty list.
  if PY3 is true,
  import module warnings.
  get the value under the 'filename' key of the params dictionary, if the key exists substitute it for guessed_filename,
  define the method latest_post_date with an argument self.
  if opts.managed is true,
  define the method handle_inspection with 2 argument: self and options.
  if second element of the i-th row of relations equals table_name, rel_to is string 'self',
  collect is an empty list.
  import module warnings.
  append f.name to ignored list.
  call the method self._get_validation_exclusions, substitute the result for exclude.
  if unpack is true,
  from django.utils.html import conditional_escape, escapejs, escape, urlize as _urlize, linebreaks, strip_tags, avoid_wrapping,
  substitute show_hidden_initial for self.show_hidden_initial.
  ip_address_validator_map is a dictionary containing 3 initial entries: tuple containing 2 elements: list with an element,  validate_ipv46_address and return value of the function _ with an argument string 'Enter a valid IPv4 or IPv6 address.' for 'both',
  derive class CheckMessage from object base class.
  define the method __iter__ with an argument self.
  substitute frame.f_globals for _globs_.
  where '%s' is replaced with first element of bits.   return an instance of ExtendsNode with 2 arguments nodelist and parent_name.
  if other is an instance of BaseContext class,
  if dklen is false,
  id is None.
  call the function new_method_proxy with an argument getattr, substitute the result for __getattr__.
  return result.
  if AttributeError exception is caught,
  define the method end_object with arguments self and obj.
  substitute the result for sequence.   call the method parser.parse with an argument tuple with 2 elements strings 'empty' and 'endfor', substitute the result for nodelist_loop.
  stats is an list with 2 elements: 2 integers 0.
  if prefix is false, and self doesnt have '_callback_str' attribute,
  if not,
  define the function pbkdf2 with 5 arguments: password, salt, iterations, dklen set to integer 0 and digest set to None.
  append the resulting string to dec_part, substitute it for dec_part.   if dec_part is true,
  default set to False, help containing string 'Mark migrations as run without actually running them' as arguments.   call the method parser.add_argument with string '--list', string '-l', action contains string 'store_true', dest set to string 'list',
  and connection as the result of the method self.connection.   define the connection with an argument self.
  split ip_str into parts by ':', substitute the result for hextets.
  do nothing.
  and result of the method self.__getstate__.   define the method __deepcopy__ with 2 arguments self and memo.
  ISO_INPUT_FORMATS is a dictionary with 3 entries: tuple with an element string '%Y-%m-%d' for 'DATE_INPUT_FORMATS',
  if key is not contained in self,
  define the method list with an argument self.
  if LookupError exception is caught.
  if self has an '_files' attribute.
  from django.utils.synch import RWLock into default name space.
  substitute callback for self._callback.
  get the value under the format key of the _serializers dictionary, return the Deserializer filed of the result.
  value under the 'primary_key' key of the extra_params dictionary is boolean True,
  define the method empty_block_tag with 2 arguments: self and token.
  if _standard_context_processors is None,
  from django.db.migrations.writer import MigrationWriter into default name space.
  define the method copy_plural_forms with arguments self, msgs and locale.
  if dt.year is greater than or equal to integer 1900,
  raise an ValueError with an argument string "Invalid timezone: %r", substitute '%r' with timezone.
  define the function luhn with an argument candidate.
  call the function time.sleep with argument integer 1.
  from django.http.cookie import SimpleCookie into default name space.
  register.tag decorator,
  _dec.__name__ is a string 'method_decorator(%s)' formated with decorator.__class__.__name__.
  using_sysrandom is boolean True.
  define the method __len__ with an argument self.
  from __future__ import absolute_ into default name space.
  if not,
  delete the value under the key key of self._expire_info dictionary.
  return nothing.
  call the method six.iteritems with an argument dict_, for every k and v in the result,
  if t is not None,
  call the function six.reraise with unpacked list exc_info as an argument.
  yield line.
  substitute self.urlconf_module for self.urlconf_module.   try,
  join elements of lines into a string, separated by newline characters, substitute it for msgs.
  define the method __iter__ with an argument self.
  i is integer 366.
  substitute the result for netloc.   if UnicodeError exception is caught,
  if match is true,
  from importlib import import_module into default name space.
  if exclude is true and f.name is contained in exclude,
  use the result as an argument for the call to the method final_output.extend.   call the method connection.creation.sql_for_pending_references with 3 arguments: refo, style and pending_references,
  open the file self.name in mode or self.mode mode, whichever exists, assign the file handler to self.file.
  define the method __str__ with argument self.
  from __future__ import unicode_literals into default name space.
  if self.verbosity is greater than integer 0,
  append att_name to used_column_names list.
  try,
  create a printable representation of self.urlconf_name object, substitute it for urlconf_repr.
  call the method lookups.appendlist with 2 arguments: name and a tuple containing 3 elements: new_matches, sum of p_pattern and pat,
  for every bwidget in self.widgets,
  define the method configure_filter with 2 arguments: self and config.
  if rel_model has an 'natural_key' attribute and rel_model is not equal to model,
  call the method settings.configure.
  if not,
  if first element of text equals '#',
  value under the 'debug' key of the context_extras dictionary is boolean True.
  args is an list with 3 initial elements self.name, self.value and self.attrs.
  import module sys.
  I18N_MODIFIED is integer 2
  string 'ascii' and errors set to a string 'replace', return the result.   define the method render with 2 arguments: self and context.
  call the method self.exit_command.
  convert header to lowercase, use it to as a key to get the value of the self._headers dictionary,
  if BLOCK_CONTEXT_KEY is not contained in context.render_context,
  choices is an property object of this class where _get_choices is a getter and _set_choices is a setter function.
  cache is an instance of BaseDatabaseCache class, created with arguments: tablename and an empty dictionary.
  call the encode function on the Header class instance, created with argument val, substitute the result for val.
  derive the class CacheClass from the base class LocMemCache.
  call the method self._convert_to_charset with arguments: header, string 'latin-1' and mime_encode set to boolean True,
  substitute msg for self.msg.
  return value.
  value is an instance of a class Decimal created with value as an argument.
  define the function force_escape with an argument value.
  derive the class DjangoTranslation from gettext_module.GNUTranslations base class.
  call the method logging._acquireLock.
  raise an exception.
  if not,
  get the length of the options, use it as a starting index for the slicing arg list, substitute it for self.test_runner.
  substitute the results in a list for T.   join elements of T in a bytes string, append first r elements of result of the call to the function F with an argument l to it,
  self.waiting_readers is an integer 0.
  if data is not None or files is not None, self.is_bound is boolean True, otherwise it is boolean False.
  return an dictionary containing 1 entry: settings.STATIC_URL for 'STATIC_URL'.
  if var starts with '_(' and var ends with ')',
  self._view_middleware is an empty list.
  substitutions dictionary.   call the function mark_safe with an argument template, formated with substitutions, return the result.
  define the method write_po_file with arguments self, potfile and locale.
  create the Singer class with 2 arguments: key appended to string 'django.http.cookies' and salt set to salt, return it.
  define the function get_format_modules with 2 arguments: lang set to None and reverse set to boolean False.
  if not,
  if y, m and d are all equal to string '0',
  return printable representation of self.value.
  zip self.loopvars and item is a list to tuples, convert the result to an dictionary, substitute it for unpacked_vars.
  derive the class ExtendsError from the Exception base class.
  substitute the result for data.   if AttributeError exception is caught,
  if t.token_type is not equal to TOKEN_COMMENT,
  substitute value under name key of handlers dictionary for handler_config.
  call the method self.fields.items, for every name and field in return value,
  _func_defaults is a string "func_defaults".
  incomment is boolean False.
  decorator function receiver with an argument setting_changed,
  substitute self.closed for close.
  substitute sys.stdin for fd.
  import module os.
  define the method write_migration_files with arguments self and changes.
  define the method __contains__ with 2 arguments: self and key.
  return output.
  substitute self.is_localized for widget.is_localized.
  return boolean True.
  define the method get with 5 arguments, self class instance, key, default set to None and version set to None.
  if takes_context is true,
  return a list containing results of the function format_html called with 2 arguments:
  call the method self.resolve with an argument c, substitute the result for c.
  append the result to pieces.   otherwise if piece is true,
  define the method register with self ans unpacked list tags as arguments.
  call the method logging.StreamHandler, substitute the result for handler.
  return result.
  if self.parent_name.filters is true or self.parent_name.var is an instance of Variable.
  if not self._mutable,
  import module django.
  if args and kwargs are both true,
  supported is boolean True.
  if lang is None,
  define the function is_valid_ipv6_address with an argument ip_str.
  if chunk is None,
  serialize set to boolean False, substitute the return value for db_name.   call the method call_command with 3 arguments, string 'loaddata', unpacked list fixture_labels and unpacked dictionary containing 1 element: verbosity for 'verbosity'.
  import module gzip.
  return an instance of VariableNode class with an argument filter_expression.
  if self.stream is None:
  while x is greater than zero,
  ALLOWED_VARIABLE_CHARS is a string 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.'.
  if is_compressed is true,
  if block is None,
  call the method fp.write with an argument string '%d\n", with '%d' replaced by os.getpid function return value.
  if not,
  where '%r' is replaced with name and filter_func, respectively.   define the method filter_function with 3 arguments: self, func and unpacked dictionary flags.
  if 'step' key of the attrs dictionary doesnt exists assign it step as an value.
  return value of the npath function with string '.mo' appended to the base_path as argument,   and return value of the npath function with string '.po' appended to the base_path as argument, substitute it for args.   call the popen_wrapper with args as the argument, assign the result to the output, errors and status, respectively.
  call the BaseConverter function with BASE36_ALPHABET as argument, store the result in base36.
  call the method setlistdefault from the base class of the class QueryDict, with arguments key and default_list, return the result.
  return the result of the method self._html_output, called with 5 arguments: normal_row to a string,
  try,
  if line ends with a new line character substitute width incremented by integer 1 for max_width, if not substitute width for max_width.
  _urllib_robotparser_moved_attributes is a list containing an instance of MovedAttribute class, created with 3 argument: strings,
  remove self._regex_validator from self.validators.
  call the self.stdout.write method, with string "  Applying %s..." with '%s' replaced with migration and ending set to '', as arguments.
  if callback is an instance of functools.partial object,
  substitute doublecolon_len for best_doublecolon_len.
  return nothing.
  _upload_handlers is an empty list.
  call the method dict_.getlist with an argument key, return the result.
  call the function shutil.copymode with arguments old_path and new_path.
  substitute self._upload_handlers for handlers.
  import termios module.
  raise an TemplateDoesNotExist exception with an argument template_name.
  supports_microseconds is boolean False.
  define the function get_script_prefix.
  replace every occurrence of '\r' in s with '\\r'.
  call the function sql_custom with app_config, self.style and connection as the arguments, substitute the result for statements.
  if DatabaseError, renamed to e, exception is caught,
  call the function mark_safe with an argument word, substitute the result for i-th element of words.
  call the method value.encode with an argument charset.
  call the function random.randrange with argument integer 100000, substitute the result for randint.
  import pyinotify module.
  if TypeError exception is caught,
  if value is not contained in result,
  self._validate_unique is boolean False.
  add key to the self.bad_cookies set.
  call the __init__ method from the base class of the TemporaryFileUploadHandler class with arguments: unpacked list args,
  remove slots_var key from the orig_vars dictionary.
  derive the class TimeFormat from the base class Formatter.
  for every bit in bits.   register.tag decorator function with an argument 'for',
  sum the result of the method s.get_data and s.rawdata, return the result.
  for every handler in handlers,
  try,
  substitute TemporaryFile for NamedTemporaryFile.
  left justify value under the 'microsecond' key of the kw dictionary, in the field of width 6, fill the rest with '0',
  t is an instance of Template class, created with 2 arguments output and name set to filepath.
  substitute pubid for self.pubid.
  remove config dictionary element under '.' key, if it exists substitute it for props, if not, props is None.
  decrement self.waiting_writers by integer 1,
  return value.
  template_source_loaders is None.
  instantiate class X, get its length.
  define the method appendlist with 3 arguments: self, key and value.
  append orig_file to string '#: ', substitute it for new.
  if self.timeout is not None,
  substitute length of package for dot.
  from django.utils.functional import total_ordering into default name space.
  call the function escape with an argument word, substitute the result for i-th element of words.
  if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
  sort loader.migrated_apps, substitute it for app_names.
  return an empty string.
  and number set to number, return the result.   define the function npgettext_lazy with 4 arguments: context, singular, plural and number set to None.
  substitute sixth element of row for value under the 'decimal_places' key of the field_params.
  if call to the self.is_valid method evaluates to false or self.can_order is false,
  if content is an instance of a EmailMessage class,
  call the get_bytes_from_wsgi function with environ, string 'REDIRECT_URL' and empty strings as arguments, substitute the result for script_url.
  call the function func with 2 arguments: context and self.first, return the result.
  call the function _add_doc with 2 arguments: b and string """Byte literal""".
  raise an TemplateSyntaxError exception with an argument string "%r received an invalid token: %r", where '%r' is replaced with,
  call the function getattr with request, string 'LANGUAGE_CODE' and function get_language as arguments,
  derive the class NoReverseMatch with Exception as base class.
  if self.render_value is false,
  if ret equals to integer 0, return boolean True, otherwise return boolean False.
  if Exception, renamed to e, exception is caught,
  parse_until is an empty list,
  call the method self._assert_mutable.
  from django.utils.encoding import force_text into default name space.
  if not,
  call the sys.stderr.write function with an argument msg.
  define the function deserialize with 3 arguments: format, stream_or_string and unpacked dictionary options.
  pk_key is a string "%s-%s", where '%s' is replaced with: result of the method self.add_prefix called with an argument i,
  BASE62_ALPHABET is string '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.
  define class dummy.
  if not,
  call the method cursor.execute with an argument sql.
  value under the self._pk_field.name key of form.fields dictionary is an instance of ModelChoiceField class,
  url is a string 'mailto:%s@%s' formated with local and domain.
  if self.timezone is true and call to the method self.timezone.dst with an argument self.data, evaluates to true,
  close the file fd.
  from django.utils.functional import lazy into default name space.
  derive the class CommentNode from Node base class.
  try,
  call the dict function with 2 arguments: final_attrs and id set to string '%s_%s', where '%s' is replaced with id_ and i,
  register.tag decorator function with an argument 'filter',
  call the method self.data.isocalendar, return the first element of the result.
  import module datetime.
  decrement end by one.
  __all__ is a tuple containing strings: 'ModelForm', 'BaseModelForm', 'model_to_dict', 'fields_for_model', 'save_instance',
  do nothing,
  table2model is a lambda function with an argument table_name, return value is the return value of the re.sub method,
  if not,
  define the method enter_command with 3 arguments: self, token and msg.
  split part by '=' character, substitute the result for role and instructions, respectively.
  get the value filed from the return value of the call to the c.key with the argument key, add the value to the cookiedict under the key key.
  append value to self._closable_objects list.
  substitute the result for formatted_subject.   return first 989 elements of formatted_subject.
  raise an TemplateDoesNotExist exception with an argument name.
  call the method render from the base class of the class PasswordInput, called with 3 arguments: name, value and attrs,
  replace '%s' in string 'ignoring directory %s\n' with dirname, write it to self.stdout stream.
  define the method dst with 2 arguments self and dt.
  if path is an instance of six.string_types,
  get attribute real_name from the trans object, return it.
  for every app_label in bad_app_labels,
  call the function processor with an argument request, update updates dictionary with the result.
  from django.utils import six into default name space.
  call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for key.
  call the mail.attach_alternative method with html_message and string 'text/html' as arguments.
  if not,
  for every key and val in return value of the function six.iteritems called with an arguments self.extra_context.   call the method context.push with an argument unpacked dictionary values, with the result as an argument,
  saved_locale is None.
  return self.text.
  for every f in return value of the return value of the method chain.from_iterable called with argument:
  convert param to a string, use it as a key to get the value from kwargs dictionary, assign it value.
  raise CommandError with an argument string "Unable to serialize database: %s", where '%s' is replaced with e.
  define the method empty_form with an argument self.
  call the function calculate_app_template_dirs, substitute the result for app_template_dirs.
  substitute second element of args for name.
  remove name from existing.
  define the method get_parent with 2 arguments self and context.
  call the function os.path.basename with first element of self.argv as an argument, substitute the result for self.prog_name.
  execute code statement """exec _code_ in _globs_, _locs_""".
  msgs_with_ctxt is a tuple containing 2 elements: string created by concatenating context, CONTEXT_SEPARATOR and singular,
  if widget is an instance of NumberInput and string 'step' is not contained in widget.attrs.
  output is a list containing an element: result of the function format_html called with 2 arguments: string '<select{0}>',
  while i is lesser than length of subject and i-th element of subject is not equal to c,
  substitute value under the f.name key of the widgets dictionary for value under the 'widget' key of kwargs dictionary.
  define the function _load_serializers.
  otherwise if ch equals a string '$',
  return a list with an element etag_str.
  in not,
  get the value under the 'use_base_manager' key of the options dictionary, substitute the result for use_base_manager.
  do nothing.
  and RemovedInDjango19Warning.   from django.conf import settings into default namespace.
  substitute the result for value under the index key of the hextets dictionary.   get the value under the index key of the hextets dictionary, if it is false,
  define the method path with arguments self and name.
  if self.directory_permissions_mode is not None,
  if VariableDoesNotExist exception is not caught,
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  new_value is an empty list.
  substitute the result of the function data.temporary_file_path for file.
  yield v.
  if TypeError exception is caught,
  for every item in values,
  define the method find_template with 3 arguments: self, name, dirs set to None.
  if self.verbosity is greater than integer 1,
  substitute the result for value under the 'clear_checkbox_id' key of the substitutions dictionary.   call the method render from the instance of CheckboxInput class, with 3 arguments: checkbox_name, boolean False,
  append migration.name to string ' - ', write it to self.stdout stream.
  define the function iriencode with an argument value.
  return context.
  return s.
  if IndexError exception is caught,
  if level is not an integer raise an error with message string "The first argument should be level.".
  classmethod decorator,
  if s is an instance of object bytes,
  call the method f.save_form_data with 2 arguments: instance and value under the f.name key of cleaned_data dictionary.
  if value has an attribute '__iter__' and value is not an instance of six.text_type and value doesnt have an attribute '_meta',
  if not,
  derive the class SkipFile from the UploadFileException base class.
  call the color_style function, substitute the result for style.
  from django.template.defaultfilters import date into default name space.
  if to is not an six.string_types instance raise an error with message string '"to" argument must be a list or tuple'.
  substitute source for self.source.
  call the method formats.localize_input with an argument value, return the result.
  if not formfield_callback is None.   call the method __new__ from the base class of the class ModelFormMetaclass, with 4 arguments: mcs, name, bases and attrs,
  if self.verbosity is grater than, or equal to integer 2,
  if self.is_localized is true,
  self._reverse_dict is an empty dictionary.
  from __future__ import unicode_literals into default name space.
  return boolean False.
  substitute a tuple with 2 elements: template and None, for self.find_template_cache dictionary value under the key key.
  if self.negate is true and val1 is not equal to val2, or if, self.negate is false and val1 equals val2,
  substitute complain for extend.
  if six.PY2 is true,
  call the function msvcrt.get_osfhandle with return value of the _fd(f) function as argument, substitute the result for hfile.
  if not field_value is None.   if f.blank is false and form_field.required is false and field_value is contained in form_field.empty_values,
  remove k element from self.keyOrder dictionary.
  close the _file file.
  define the function create_bound_function with 2 arguments: func and obj.
  if length of self.backout is greater than zero,
  __M is a raw string '(?P<mon>\w{3})'.
  use global variable _standard_context_processors.
  feed data to the parser p.
  try,
  call the method sys.stderr.write with an argument string "  as a FastCGI application, you will need to get flup from\n".
  call the method self.setlist with 2 arguments: k and v.
  define the method handle_m2m_field with self, obj and field arguments.
  class_types is a tuple with 2 elements: type and types.ClassType.
  property decorator,
  define the function loads with 5 arguments: s, key set to None, salt set to string 'django.core.signing',
  remove first element from styles, split it by the '/' character, substitute the result for colors.
  call the method operator.attrgetter with an argument _func_globals, substitute the result for get_method_globals.
  call the method self.translate_token with an argument token, append the result to mapped_tokens.
  return string '(NOT (%s: %s))', formated with self.connector and string created by joining c into a string, separated by ', ',
  call the method result.utctimetuple, use the result as an argument for the call to the method calendar.timegm, return the result.
  try,
  if confirm equals a string 'yes',
  substitute hashlib.sha256 for digest.
  filter all the subcommands element through the lambda function with an argument x, that evaluates the method x.startswith,
  call the method self.__class__ with an argument list, with 2 elements: key and result of the function copy.deepcopy,
  call the function _trans.get_language_bidi, return the result.
  derive the class MediaDefiningClass from the type base class.
  for every tablename in tablenames,
  define the function _get_timezone_name with an argument timezone.
  if self.use_ssl and self.use_tls are boolean True,
  remove first element from non_capturing_groups, substitute it for start.
  with arguments al and mn, for every al, mn in executor.loader.graph.forwards_plan method return value called with 2 arguments:   migration.app_label, migration.name, only if al equals migration.app_label.   if self.verbosity is greater than integer 0 or self.interactive is true,
  call the method self.full_clean.
  convert result to lowercase and return it.
  raise an NoReverseMatch exception with an argument string "%s is not a registered namespace", with '%s' replaced with key.
  call the encode method on the result with string 'latin-1' as an argument, return the result.   define the method loads with arguments self and data.
  if TypeError exception is caught,
  derive the class ComboField from the base class Field class.
  call the function warnings.warn with 2 arguments string "IPAddressField has been deprecated. Use GenericIPAddressField instead.",
  get attribute piece of the self object, call it and use the result as an argument for the call to the function force_text,
  if field.rel is None,
  replace every occurrence of ' ' in value for '\xa0', return the result.
  get the value under the date_key key of the item dictionary, substitute it for item_date.
  decorator function register.filter with an argument is_safe set to boolean False.
  and final_attrs, append the result to output.   call the method self.format_output with an argument output, use the result as an argument for the call to the function mark_safe,
  call the method self.clear_cdata_mode.
  if item is contained in the list of the elements of self, return boolean True, otherwise return boolean False.
  do nothing.
  msg is a string 'Module "%s" does not define a "%s" attribute/class' formated with dotted_path and class_name, respectively.
  derive the class UnreadablePostError from the base class IOError.
  get the unicode representation of current working directory, join it and path into a string, substitute the result for path.
  substitute value for the value under the key key of self._cache dictionary.
  return the value under the self.data.month key of the MONTHS_ALT dictionary.
  define the method handle_charref with 2 arguments self and name.
  substitute value under the database key of the connections dictionary for connection.
  from django.utils import formats into default name space.
  if message_context is true,
  substitute form.instance.pk for pk_value.
  substitute value under the 'database' key of the options dictionary for database.
  if six.PY2 is true,
  convert self.forms into an iterable, return it.
  return string 'th'.
  raise an value.with_traceback exception with an argument tb.
  derive the class BaseConfigurator from object base class.
  requires_system_checks is boolean False.
  decorator function wraps with an argument fget.
  FILE_MODIFIED is integer 1.
  derive the class SelectDateWidget for the Widget base class.
  call the method data.find with an argument self._boundary, substitute the result for index.
  default set to boolean False and help  set to string 'Tells Django to stop running the test suite after first failed test.'.   call the method parser.add_argument with 4 arguments: string '--testrunner', action set to string 'store', dest set to 'testrunner',
  substitute name for new_attr.
  define the method __add__ with arguments self and other.
  define the function compress_sequence with an argument sequence.
  call the middleware_method with request, callback, callback_args and callback_kwargs as the arguments, substitute the result for response.
  raise an TemplateSyntaxError exception with an argument string "%r expected at least one variable assignment",
  call the self.path with argument name, substitute it for name.
  new_msg is a tuple containing a string: "Database %s couldn't be flushed. Possible reasons:\n"
  substitute old_setting for context.autoescape.
  raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a delete() method'.
  if it exists, get 'stderr' attribute of self, substitute it for stderr, if not, stderr is an instance of OutputWrapper class,
  call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  try,
  call the method self.data.utctimetuple, use the result as an argument for the call to the function calendar.timegm,
  define the method values with an argument self.
  from django.db import models and router into default name space.
  if fields is true and f.name is not contained in fields,
  return result.
  if not,
  raise an NotImplementedError exception with an argument string 'Awaiting Implementation'.
  call the method parser.add_argument with string 'app_label', nargs set to charcter '?', help containing string,
  substitute next for self.next.
  define the function prepare_js_for_gettext with an argument js.
  call the function get_supported_language_variant with an argument settings.LANGUAGE_CODE, return the result.
  return None.
  return e.
  errors is an empty list.
  define the method close with self class instance as the argument.
  if title is an instance of list or tuple,
  if Exception exception is caught,
  import module datetime.
  if index is not None and index is smaller than return value of the method self.initial_form_count,
  if for all attr in list of attributes 'level', 'msg', 'hint', 'obj' and 'id', self and other have the same attribute attr,
  otherwise if self.fixture_object_count equals self.loaded_object_count,
  errors is a string "strict".
  if stream is true,
  call the method __init__ from the base class of the class IntegerField, with arguments unpacked list args and unpacked dictionary kwargs.
  get the value under the 'database' key of the options dictionary, use it as the key to get the value from the connections dictionary, substitute the result for connection.
  return endpos.
  substitute context for current.
  define the method __iter__ with an argument self.
  try,
  call the __init__ method with 3 arguments: WARNING, unpacked list args and unpacked dictionary kwargs from the base class of Warning.
  substitute __name__ field of the result for function_name, in not, substitute func.__name__ for function_name.   call the function partial with 8 arguments: generic_tag_compiler, params set to params, varargs set to varargs, varkw set to varkw,
  call the __init__ method of the base class of the QueryDict class.
  leave_locale_alone is boolean True.
  parsed is boolean False.
  derive the class DecimalField from the base class IntegerField class.
  define the method __init__ with 3 arguments: self, media set to None and unpacked dictionary kwargs.
  call the function get_user_model, substitute the result for UserModel.
  substitute value under the 'verbosity' key of the options dictionary for self.verbosity.
  substitute old for self.mod.
  _error_files is an empty list.
  if value is an instance of six.text_type class,
  origin is an instance of StringOrigin class created with an argument template_string.
  raise an ValidationError with 2 arguments: value under the 'invalid_time' key of the self.error_messages dictionary and code set to string 'invalid_time'.
  call the function func with 2 arguments: unpacked list resolved_args and unpacked dictionary resolved_kwargs,
  if data is true, substitute it for data, otherwise data is an empty list.
  if self._done is true,
  return palette.
  define the method __init__ with 4 arguments: self, target, expression and var_name.
  for every file in value under the 'files' key of the options dictionary.
  and return value of the call to the method ProjectState.from_apps with apps as an argument, assign it to the autodetector.   call the method autodetector.changes with the graph set to executor.loader.graph as an argument, substitute it for the changes.
  substitute True for self.close_called.
  call the os.umask function with argument old_umask.
  raise an base.DeserializationError exception with an argument string "Invalid model identifier: '%s'", where '%s' is replaced with model_identifier.
  if not,
  call the method self.load_template with 2 arguments: template_name and template_dirs, return the result.
  define the method clear_checkbox_name with 2 arguments: self and name.
  substitute var for value under the name key of the self.extra_context dictionary.
  return exit_code.
  call the method shutil.copyfileobj with 2 arguments: extracted and outfile.
  raise an ValidationError exception with 2 arguments: error_message and code as a string 'invalid'.
  define the method render with 2 arguments: self and context.
  derive the class VariableNode form the base class Node.
  if nodelist_empty is None,
  return an empty string.
  for every node_app and node_name in migration.branch,
  call the self.stream.close function.
  try,
  if Exception, renamed to e, exception is caught,
  call the method cursor.execute with sql as argument.
  if IndexError exception is caught,
  if length of bits is not equal to integer 2,
  return settings.LANGUAGE_CODE.
  call the executor.migration_plan method with targets as the argument, substitute the result for plan.
  replace '%s' in string '%s_%s' with id_ and i, substitute the result for input_attrs dictionary value under the 'id' key.
  if fields is true,
  yield d.
  if model_identifier is false,
  define the method clean with arguments self and value.
  call the method self._update_unget_history with length of bytes as an argument.
  derive the class RWLock from the object base class.
  values is an dictionary with entries: return value of the method var.resolve with an argument context for name,
  define the method __iter__ with an argument self.
  if not,
  append name to the value of under the app key of the commands_dict.
  return boolean True.
  return fext.
  assign bits elements to yes, no and maybe, respectively.
  define the method __next__ with an argument self.
  return nothing.
  return an empty string.
  if ImportError exception is caught.
  iter_format_modules called with 2 arguments: lang and settings.FORMAT_MODULE_PATH, substitute the result for modules.   if reverse is true,
  join elements of base36 into a string, return it.
  default as an empty list and help as an string 'Locale(s) to process (e.g. de_AT). Default is to process all. Can be used multiple times.'.   call the method parser.add_argument with string '--exclude', string '-x', dest set to string 'exclude', action set to string 'append',
  if the value of the kwargs dictionary under the key k is not equal to v,
  call the method form.instance._get_unique_checks with an argument exclude as exclude, substitute the result for unique_checks,  and date_checks, respectively.
  try,
  if check is not contained in self.registered_checks.
  if construct is true,
  call the method parser.parse with an argument tuple with 2 elements strings: 'else' and 'endfilter', substitute the result for nodelistelse.
  if not,
  write new line to the self.stream file stream.
  if not,
  return value under key key of dict_ dictionary.
  for every formset in formsets,
  if ValidationError, renamed to e, exception is caught,
  call the method self.create_parser with first and second element of argv, substitute the result for parser.
  if six.PY2 is true and rawdata is an instance of the type six.text_type.
  increment i by integer 1,
  substitute MONTHS for self.months.
  call the method self.get_resolved_arguments with context as an argument, substitute the result for resolved_args and resolved_kwargs.
  try,
  decorator function wraps with an argument fset.
  substitute the result input_attrs.   if id_,
  use the result as an argument for the call to the function mark_safe, return the result.   define the function format_html_join with 3 arguments: sep, format_string and args_generator.
  call the function force_text with an argument redirect_to, use the result as an argument for the call to the function urlparse,
  call the method apps.get_app_config with an argument app_label, substitute the result for app_config.
  call the method __init__ from the base class of the class BaseModelForm, with 8 arguments: data, files, auto_id, prefix, object_data,
  substitute style.ERROR for style.ERROR_OUTPUT.
  call the function date_format with 2 arguments: value and use_l10n as use_l10n, return the result.
  return value.
  call the method val.encode with argument string 'ascii'.
  tpl is an string "ExternalReferenceForbidden(system_id='{}', public_id={})".
  from __future__ import unicode_literals into default name space.
  call the function decorator with 2 arugments: unpacked list args and unpacked dictionary kwargs, return the result.
  remove '__dict__' key from the orig_vars dictionary.
  define the method open with arguments self and mode set to None.
  return _wrapper.
  substitute i for self.pointer.
  split x by character '=' and append first element of the result to the prev_opts list.   for every opt in options, if first element of opt is not contained in prev_opts, append opt to the list, substitute it for options.
  label set to return value of the function _ called with an string 'Delete' and required as boolean False.   define the method add_prefix with an argument self.
  define the function get_version with version set to None as argument.
  if first element of bits is not equal to string 'and',
  substitute mapped_tokens for self.tokens.
  table_names is an empty list.
  __slots__ is a string 'hashvalue'.
  call the os.fdopen function with fd, mode and bufsize as the arguments, assign the file handle object to self.file.
  if not,
  "is deprecated, use ArgumentParser instead" and RemovedInDjango20Warning.   parser is an instance of the object OptionParser, created with arguments: prog set to prog_name,
  property decorator,
  default set to False and help set to string'Creates SQL to unapply the migration, rather than to apply it' as arguments.   define the method handle with self class instance, list of arguments args and options dictionary as the arguments.
  return dec.
  otherwise if i is smaller than list_length decremented by one,
  define the method render with 2 arguments: self and context.
  want_unicode is boolean False.
  from collections import UserList into default namespace.
  from django.conf import settings into default name space.
  append callback to self._post_render_callbacks list.
  add self.default_validators and validators, substitute the result for self.validators.
  'self' for 'rel' and value under the 'feed_url' key of self.feed dictionary for 'href'.   call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self.feed dictionary.
  define the method items with an argument self.
  define the method add_arguments with 2 arguments self and parser.
  if Exception, renamed to e, exception is caught,
  model._meta.app_label and model._meta.object_name joined into a string, with separator '.',   result joined into a string, separated by string ', ' for every model and deps in sorted list of elements skipped sorted by key:   return value of the lambda function with an argument obj, and result the __name__ field of the first element of obj.   substitute skipped for model_dependencies.
  call the function pgettext with an argument 'String to return when truncating text', '%(truncated_text)s...', substitute the result for truncate.
  write a new line to the self.stream file stream.
  substitute changeset for get_git_changeset.cache.
  return length of self.items.
  from django.conf import settings into default name space.
  return dec.
  call the method copy.copy with an argument register_to._registry, substitute the result for before_import_registry.
  for every attr in tuple with 3 arguments: strings 'expects_localtime', 'is_safe' and 'needs_autoescape',
  crate a file named init_path.
  if self.data.minute equals integer 0 and self.data.hour equals integer 12,
  if other_dict is an instance of MultiValueDict.
  if length of bits is not equal to integer 2,
  call the method base.build_instance with arguments Model, data and db, substitute the result for obj.
  call the strftime function with argument string "%Y%m%d-%H%M%S" on the return value of the function datetime.datetime.now, substitute the result for timestamp.
  define the method __init__ with 2 arguments self and dt.
  if template_source_loaders is None,
  raise an ImproperlyConfigured exception with argument string 'Path for saving email messages exists, but is not a directory: %s',  replace '%s' with self.file_path.
  define the method has_error with 3 arguments: self, field and code set to None.
  call the function new_method_proxy with an argument operator.ne, substitute the result for __ne__.
  where '%s' is replaced with migration_name and app_label.   if KeyError exception is caught,
  derive the class Promise from the object base class.
  call the function force_text with an argument text, substitute the result for text.
  substitute target and expression for self.target and self.expression, respectively.
  call the method self.parse_file_upload with arguments self.META and data, assign the result to self._post and self._files.
  if node is not an instance of TextNode,
  kw is a list with 3 elements: d.year, d.month and d.day.
  define the method __repr__ with an argument self.
  return a string "UTC".
  call the method self.xml.startElement with argument string 'object' and an empty dictionary.
  define the method led with 3 arguments self, left and parser.
  call the method normalize with sum of parent_pat and pat as an argument, substitute the result for new_matches.
  if value has an attribute '__iter__' and value is not an instance of six.text_type,
  if not,
  from django.core.management import call_command into default name space.
  do nothing.
  get handler_config dictionary element under 'level' key, if it exists substitute it for level, if not, level is None.
  call the function format_html with 3 arguments string '<label{0}>{1}</label>', attrs and contents, substitute the result for contents.
  call the function copystat with old_file_name and new_file_name as arguments.
  if field is not contained in self.fields,
  return an instance of FixedOffset class, created with 2 arguments: offset and name.
  delete entry under the name key of the moves.__dict__ dictionary.
  if arg is not string 'on' or 'off',
  for every model in model_list,
  call the function module_has_submodule with 2 arguments: package and module, return inverted boolean result.
  append the result to sql_files.   join into a file path: app_dir and string %s.%s.sql, where '%s' is replaced by opts.model_name, append the result to sql_files.
  if change equals to FILE_MODIFIED,
  write 79 '-' characters into self.stream file stream.
  call the method tuple.__getitem__ with 2 arguments: self and key, substitute the result for value.
  delete entry under the attr key of the attrs dictionary.
  property decorator,
  define the method s with an argument self.
  substitute value for value.   return value converted into a boolean.
  read the whole self file and yield it as a generator return value.
  termios is None.
  define the method D with an argument self.
  define the method N with an argument self.
  define the method Y with an argument self.
  from django.utils.functional import lazy into default name space.
  otherwise substitute args for key.   with lock,
  call the function handle_default_options with an argument options.
  call the method match.start, substitute the result for start.
  otherwise if self.required is true,
  substitute chunk_size for self.chunk_size.
  substitute self.field.label for self.label.
  if settings.TEMPLATE_DEBUG and display_name are both true,
  create directories from the elements in filename.
  substitute setting and nodelist for self.setting and self.nodelist, respectively.
  from django.conf import settings into default name space.
  return an empty list.
  join 'conf' and 'locale' into a file path, use it as an argument for the call the method os.path.abspath,
  if message is an instance of dict type,
  get the value under the name key of the data dictionary, if it exists substitute it for value, if not, value is None.
  if self.flags is true and self.regex is not an instance of a six.string_types type,
  code set to an string 'invalid_choice' and dictionary params with an entry: value for 'value'.   define the method valid_value with arguments self and value.
  for every e in self, append convert e to an string and append it to string '* ',
  get attribute 'print' from the moves.builtins object, if it exists substitute it for print_, if not print_ is None.
  get the value under the 'ignore' key of the options dictionary, substitute it for self.ignore.
  call the method self.merge with an argument translation.
  for every i and tuple containing 2 elements: seconds and name, in enumerated chunks,
  define the method getvalue with an argument self.
  derive the class UnrecognizedArchiveFormat from the ArchiveException base class.
  derive the class IPAddressField from the base class CharField class.
  call the method parser.add_argument with 6 arguments: string '--ipv6', string '-6', action set to string 'store_true',
  call the method self.xml.addQuickElement with an argument string 'None'.
  if _win is true,
  append string "Field renamed because it started with '_'." to field_notes.
  from pprint import pformat.
  for every value in data.   if data_set is not equal to initial_set return boolean True, otherwise return boolean False.
  return a dictionary with 2 entries: value under the 'language' key of the self.feed dictionary for "xml:lang",
  remove '__weakref__' key from the orig_vars dictionary.
  if TypeError exception is caught,
  if dirname is true, return dirname converted to a string and surounded by single quotes, if not return string 'absolute path'.
  from __future__ import unicode_literals into default name space.
  token is an instance of Token class, created with 2 arguments: TOKEN_TEXT and token_string.
  call the method self.create_token with 3 arguments: last_bit, tuple with 2 elements: upto and sum of upto and length of last_bit,
  call the function self.filter_expr.resolve with an argument context, return the result.
  define the method fastcgi_help with an argument message set to None.
  return result.
  raise an TemplateSyntaxError exception with an argument string "Could not parse the remainder: '%s' from '%s'",
  and substitute the result for self.prefix.   substitute auto_id for self.auto_id.
  doublecolon_len is integer 0.
  TOKEN_BLOCK is integer 2
  if field.rel has an 'to' attribute,
  return nothing.
  label_for is an empty string.
  define the method __iter__ with an argument self.
  call the function import_module with an argument string '%s.%s', where '%s' is replaced with app_config.name and module_to_search.
  convert name to lower case, if it is contained in ADDRESS_HEADERS,s
  return self.size.
  delete name attribute of the _MovedItems object.
  if length of tzinfo is greater than integer 3, convert elements of tzinfo from indexes 1 to 3 to an integer,
  if year is lesser than integer 100,
  pos and last are integer 0.
  self._css is an empty dictionary.
  import module warnings.
  skip this loop iteration.
  if length of bits is greater or equal to integer 4 and second last element of bits equals sting 'from',
  define the method __mod__ with 2 arguments: self and rhs.
  if exception of class Exception, as e, is caught,
  import module sys.
  otherwise if timezone is an instance of six.string_types and pytz is not None,
  vary_headers is an empty list.
  if first element of new_name is digit,
  derive the class RegexURLResolver with LocaleRegexProvider as base class.
  if response is True,
  self._callback is None.
  call the LockFileEx function with 6 arguments: hfile, flags, integer 0, integer 0, hexadecimal value FFFF0000, return value of the byref function called with argument overlapped, substitute the result for ret.
  if self.stream is not None,
  import module json.
  if match is true,
  return end ans next.
  status_code is an integer 400.
  ESCAPE_MAPPINGS is an dictionary with 10 initial entries: None for 'A', None for 'b', None for 'B', '0' for 'd', 'x' for 'D',
  call the function resource_string with 2 arguments app_config.name and pkg_name, substitute the result for resource.
  call the function format_html with 3 arguments: string ('<textarea{0}>\r\n{1}</textarea>', return value of the function flatatt,
  convert value and arg into a integers, return their sum.
  substitute model._base_manager for objects.
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  define the method close with self and dictionary pairs of elements kwargs.
  import module datetime.
  if widget is an instance of the NumberInput class, and string 'step' is not contained in widget.attrs,
  position the file self.file pointer at the end.
  skip this loop iteration,
  if count is equal to integer 0.
  define the method encoding with an argument self.
  call the method app_config.get_model with an argument model_label, substitute the result for model.
  import module os.
  define the method __init__ with 4 arguments: self, message, code set to None and params set to None.
  and return value of the function f.db_type called with an argument connection set to connection.   if f.null is false, append string append "NOT NULL" to field_output, otherwise append "NULL" to field_output.
  called with 3 arguments: raw string '[^a-zA-Z0-9]', empty string and result of the method table_name.title.   strip_prefix is a lambda function with an argument s, return value is s without the first element if s starts with string 'u'',
  call the method node.render with an argument context, return the result.
  call the self.stdout.write method with string "    Installing custom SQL for %s.%s model\n" as argument,
  if self.connection_reset is true,
  return boolean False.
  current_len is equal to integer 0.
  define the method setlistdefault with 3 arguments: self, key and default_list set to None.
  call the os.path.basename with path as argument, substitute the result for filename.
  if contents is not None,
  derive the class SuspiciousFileOperation from the SuspiciousOperation base class.
  substitute length of content for self.size.
  call the method __init__ with an argument initlist from the base class of the class ErrorList.
  an empty string for 'clear_template' and self.clear_checkbox_label for 'clear_checkbox_label'.   template is a string '%(input)s'.
  substitute new_class.declared_fields for fields.
  call the function limit_choices_to, substitute the result for limit_choices_to.
  if length of self.dicts is equal to an integer 1,
  call the method self.endChannelElement with an argument handler.
  define the function timeuntil with 2 arguments, d and now defaulting to none.
  do nothing.
  method, substitute the result for file_name.   get the value under the 'content-type' of the meta_data dictionary, if it exists assign it to content_type, content_type_extra,
  substitute _iteritems for iteritems.
  if TemplateSyntaxError, replaced with e, exception is caught,
  define the method __enter__ with an argument self.
  if bf.label is true,
  locale_dirs is a list of elements from the list of path names that maths the basedir path with '/*' wild card characters for which call to the os.path.isdir returned true, assign it to locale_dirs.
  get the value under the name key of the data dictionary, if it exists return it, if not return None.
  path_info is a character '/'.
  from django.core.management.base import BaseCommand into default name space.
  define the method chars with 4 arguments: self, num, truncate set to None, html set to boolean False.
  substitute oldroot for value under the key key of the cache dictionary.
  from django.db.migrations.questioner import MigrationQuestioner and InteractiveMigrationQuestioner into default name space.
  from django.core.servers.fastcgi import runfastcgi into default namespace.
  call the method data.replace with an argument microsecond set to integer 0, substitute the result for data.
  import module re.
  try,
  if locations is not empty,
  derive class Command from the base class BaseCommand.
  try,
  compare is a lambda function with arguments self, a and b, return value is boolean true if a is lesser than b, otherwise is false.
  for every app_config in return value of the method apps.get_app_configs if app_config.models_module is not None,
  define the function python_reloader with main_func and kwargs as arguments.
  if self.choice_value is contained in self.value return boolean True, otherwise return boolean False.
  substitute the result for value under the 'clear_checkbox_name' key of the substitutions dictionary.   call the function conditional_escape with an argument checkbox_id,
  define the function deactivate_all.
  define the method add_handlers with 3 arguments: self, logger and handlers.
  call the method qs.order_by with argument self.model._meta.pk.name, substitute the result for qs.
  from django.conf import settings into default namespace,
  define the method __text_cast with an argument self.
  derive the class ConvertingList from list base class.
  slots is a list with an element, slots.
  d is an empty string.
  try,
  from django.core.exceptions import ValidationError into default name space.
  derive the EventHandler class from the base class pyinotify.ProcessEvent.
  call the function get_callable with arguments lookup_view and boolean True, substitute the result for lookup_view.
  return an instance of a BlockNode class, created with 2 arguments: block_name and nodelist.
  skip this loop iteration.
  if not,
  return value.
  increment stats dictionary value under the HITS key by integer 1.
  call the method self.val_expr.resolve with an argument context, substitute the result for value.
  call the pickle.dumps function with value and pickle.HIGHEST_PROTOCOL as arguments.
  from django.core import mail into default name space.
  derive the class GenericIPAddressField from the base class CharField class.
  if not,
  define the method __init__ with 2 arguments: self and name.
  return is empty dictionary.
  if _globs_ is None,
  if self does not have '_files' attribute,
  if value is Nan, or value is contained in return value of the Decimal called twice with string 'Inf' and with string '-Inf',
  define the function split_domain_port with an argument host.
  if self does not have 'bad_cookies' attribute,
  call parse.add_argument method, with string '--database', default set to DEFAULT_DB_ALIAS,
  and generic_lang_code.   call the function re.compile with an argument string '\s*\n\s*', substitute the result for trim_whitespace_re.
  make target_dir directory,
  define the method clean with an argument self.
  if end is lesser than integer 0,
  substitute self for value.configurator.
  for every h in handlers,
  if initial is None,
  do nothing.
  and help is a string 'Tells Django to use plain Python, not IPython or bpython.'.   call the method parser.add_argument with 4 arguments: string '--no-startup', action as a string 'store_true',
  call the method handler.addQuickElement with 2 arguments: string 'ttl' and value under the 'ttl' key of the self.feed dictionary.
  substitute error_messages for value under the ''error_messages' key of the kwargs dictionary.
  if self.is_reversed is true, substitute reversed_text is an string ' reversed', if not, reversed_text is an empty string.
  substitute self.default_timeout for timeout.
  create a list out of fist end_text_pos text elemnts, substitue it for out.
  split arg by ':', for every x in result,
  except ImportError.
  if not,
  original_lookup, RemovedInDjango20Warning and stacklevel set to integer 3.   call the method self.reverse_dict.getlist with an argument lookup_view, substitute the result for possibilities.
  raise a ValidationError exception with 2 arguments: return value of the function _ called with an argument string 'Enter a valid IPv4 or IPv6 address.', and code set to string 'invalid'.
  call the function six.reraise with 3 arguments: ValidationError, ValidationError created with 2 arguments:
  if not,
  OPERATORS is an dictionary with 12 initial entries: result of the function inflix called with 2 arguments, integer 6,
  default is a string 'DEFAULT'.
  terminal_char is an string '>'.
  call the method connection.creation.sql_for_pending_references with 3 arguments: refo, style and pending_references,
  call the function vars with an argument options, substitute the result for cmd_options.
  for every f in opts.local_fields,
  instantiate class ModelFormOptions with argument: attribute 'Meta' of the new_class object. if it exists or None, if not,
  substitute propagate for logger.propagate.
  if OverflowError exception is caught,
  if data is contained in self.children,
  seen is an empty set.
  if arg is an instance of unicode,
  define lambda function that returns self.file.write field, use it as an argument for property function, put the result in write.
  define the method endChannelElement with 2 arguments: self and handler.
  get the value under the 'primary_keys' key of the options dictionary, substitute the result for pks.
  if not,
  where '%s' is replaced with self.__class__.__name__.   derive the class HttpResponse from the HttpResponseBase base class.
  do nothing.
  if not,
  name for base_name, top_dir for base_directory and docs_version for 'docs_version' and autoescape set to boolean False.   from django.conf import settings into a default name space,
  if formfield_callback is None,
  append flup_module to string "Can't import flup.", print it to the standard output.
  derive the class warn_about_renamed_method from object base class.
  get the value under the 'verbosity' key of the options dictionary, convet it to an integer and substitute for self.verbosity.
  raise an ValidationError with 2 arguments: value under the 'invalid_list' key of the self.error_messages dictionary and code set to 'invalid_list'.
  if age is greater than max_age,
  call the method self._lib.Client with argument self._servers.
  for every migration in merge_migrations,
  define the method o with an argument self.
  try,
  substitute regex for self.regex.
  substitute nodelist for self.nodelist.
  define the __init__ method with 5 arguments: self, urlconf_name, default_kwargs set to None, app_name set to None and  namespace set to None.
  call the method self.build_attrs with an argument attrs, substitute the result for final_attrs.
  substitute name and value for self.name and self.value.
  replace '%s' in a string "Error: %s" with error_text, write it to self.stderr.
  call the method self.extra_headers.get with arguments: string 'To' and joined string from self.to elements separated by ', ',
  define the method visible_fields with an argument self.
  define the method expression with 2 arguments: self and rbp set to integer 0.
  if self.use_natural_foreign_keys is true and field.rel.to has an 'natural_key' attribute.
  call the method handler.endElement with an argument string 'entry'.
  if form.errors is true,
  for model in self.models append model._meta.db_table to a list, substitute the resulting list for table_names.
  call the get_major_version wit version as argument, store the result in major.
  if IndexError exception is caught,
  from django.core.management.base import BaseCommand into default name space.
  call the pyinotify.WatchManager method, assign the result to wm.
  help is a tuple containing string "Creates a Django project directory structure for the given "
  if not,
  if InvalidTemplateLibrary, renamed to e, exception is caught,
  if cls has an attribute k,
  if not,
  derive the class NullDevice.
  df is an instance of DateFormat class, created with an argument value.
  substitute self for result.parent.
  if value has an attribute 'close',
  call the function do_ntranslate with 3 arguments: singular, plural, number and string 'ngettext', return the result.
  where '%r' is replaced with first element of bits.   if remaining_bits is true,
  call the method signing.get_cookie_signer with an argument salt set to sum of key and salt,
  yield representative and boolean True.
  define the method clear_checkbox_id with 2 arguments: self and name.
  decorator stringfilter,
  if not,
  call the function force_str with an argument: default if it is true, or if not, first element of the result of the function,
  define the method _reverse_with_prefix with arguments self, lookup_view, _prefix, unpacked list args and unpacked dictionary kwargs.
  mapping is an dictionary with 8 initial entries: BLOCK_TAG_START for 'openblock', BLOCK_TAG_END for 'closeblock',
  if not,
  if m is false,
  if MiddlewareNotUsed exception is raised,
  if target_dir path doesnt exists,
  substitute bp for lbp.
  from django.core.serializers.base import DeserializationError into default name space.
  call the method self.configure_custom with an argument config, substitute the result for result.
  call the method match.group with an argument integer 0, return the result.
  substitute field for self.field.
  if cookie is not an instance of http_cookies.BaseCookie,
  if id_ is true,
  return value, if it is None return arg.
  gettext._translations is an empty dictionary.
  if self._is_rendered is false,
  substitute (i+1)-th element of list_ for next_item.
  call the method tpl.format with an arguments self.name, self.sysid and self.pubid.
  endless loop,
  import module re.
  if saved_locale is not None,
  call the method match.group with 2 arguments: strings "constant_arg" and "var_arg", substitute the result for constant_arg,
  if settings.FORCE_SCRIPT_NAME is not None,
  if not,
  id is a string "literal".
  call the method os.dup2 with 2 arguments: result of the method se.fileno and result of the method sys.stderr.fileno.
  return self.
  evaluate next boolean expression, value of converter function with opts.db_table as argument is contained in tables,
  call the method HTMLParser.__init__ with 2 arguments: self and strict set to boolean False.
  as the arguments, substitute the result for response.   try,
  define the function do_translate with 2 arguments: message and translation_function.
  if not,
  call the method tempfile.NamedTemporaryFile with argument suffix set to string '.upload'.
  if language_code is not contained in self._reverse_dict
  return boolean False.
  define the method create_variable_node with 2 arguments: self and contents.
  formated with c, filemsg and comment_lineno_cache.   call the function warnings.warn with 2 arguments: warn_msg and TranslatorCommentWarning.
  call the method self.iterlists, return list of results.
  self.find_template_cache is an empty dictionary.
  get the hash value of the tup, substitute it for self.hashvalue.
  define the method root_attributes with an argument self.
  from django.utils.six.moves.urllib.parse import parse_qsl,  urlencode,  quote,  urljoin and urlsplit into default name space.
  divide absolute offset by module 60, use the result to format string '%02d%02d', substitute it for hhmm.
  if six.PY3 is true,
  return self.__name.
  raise an ImproperlyConfigured exception with an argument string 'The SECURE_PROXY_SSL_HEADER setting must be a tuple containing two values.'.
  call the method form.is_valid, perform bitwise and with the result and forms_valid as operands, substitute the result for forms_valid.
  _urllib_request_moved_attributes is an list with 33 elements, all of them are the results of the call to the function MovedAttribute with 3 different string arguments.
  raise an ValueError with an argument string "The %s could not be %s because the data didn't validate.",
  status_code is an integer 302.
  call the function strftime with 2 arguments: self and fmt, return the result.
  evaluate the function import_string with middleware_path as argument, substitute the result for my_class.
  raise an exception PageNotAnInteger with string 'That page number is not an integer' as an argument.
  call the OVERLAPPED function, substitute the result for overlapped.
  if count of occurrence of '::' in ip_str is greater than integer 1,
  call the function ugettext with 3 arguments, string "%(size)d byte", string "%(size)d bytes" and bytes,
  if not,
  if error is an instance of ValidationError,
  if GeneratorExit exception is caught,
  call the function get_current_timezone, substitute the result for timezone.
  for every key and value in items of dictionary self,
  created with an argument constant_arg, append it to args.   otherwise if var_arg is true,
  if not,
  return an instance of Template class, created with 2 arguments: source, origin and name, return the result.
  otherwise if self.use_ipv6 is true and _fqdn is false,
  define the method writer_leaves with an argument self.
  if middleware has an attribute 'process_request',
  call the method handler.addQuickElement with 2 arguments: string 'rights' and value under the 'feed_copyright' key of the self.feed dictionary.
  call the method handler.addQuickElement with 2 arguments: string 'name' and value under the 'author_name' key of the item dictionary.
  append header to the string 'HTTP_', append the result to the list headerlist.
  append f.name to exclude.
  define the function infix with 2 arguments bp and func.
  if context.autoescape is true and value is not an instance of SafeData, or value is an instance of EscapeData,
  divide negative dklen with hlen, substitute floored result for l.
  for every app_label and app_migrations in result of the method changes.items,
  convert self.use_ipv6 to boolean, substitute it for self._raw_ipv6.
  if form._meta.fields is an instance of tuple type,
  from django.core.management.sql import sql_indexes into default name space.
  return the result of the method self._html_output, called with 5 arguments: normal_row to a string,
  call the method router.allow_migrate with 2 arguments: self.using and obj.object.__class__, if it evaluates to true,
  call the method six.reraise 3 with arguments: os_err_exc_type, return value of the function os_err_exc_type,
  call the method template.render with an argument context, return the result.
  call the function force_text with second element of choice as an argument, substitute the result for self.choice_label.
  define the method more with an argument self.
  call the function six.iteritems with an argument dict_, for every item in the result,
  otherwise if token_string starts with COMMENT_TAG_START,
  if self.variable_name is true.
  if args is true,
  decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
  crate a dictionary with app mapping and from the class Migration, created with arguments: string 'custom' and app,
  if extend is true,
  sub is an empty string.
  method MONTHS.index, increment the result by integer 1, substitute it for month.   call the method m.group with an argument string 'fay', convert the result into a string, substitute it for day.
  derive the class Command from the AppCommand base class.
  from django.utils import translation into default name space.
  if remaining is None,
  otherwise if field is contained in the result of the call to the method self._errors.keys,
  call the method as_tuple on the result, substitute the result for sign, digits and exponent, respectively.   append result of method six.text_type called with an argument digit to an list, for every digit in reversed order of digits,
  replace all the occurrences of character '_' in name with a whitespace, capitalize the first letter and return the result.
  return string 'StopUpload: Halt current upload.'.
  self.objects is an empty list.
  settings.BASE_DIR.
  derive the class IncludeNode from the Node base class.
  if length of words is greater than length,
  if not,
  where '%s' is replaced with migration_name and app_label.   migrations_to_squash is a list created dynamically with elements: return value of the method executor.loader.get_migration called,
  if not,
  get name attribute from the instance object, call it with an argument value and return the result.
  "  * The database isn't running or isn't configured correctly.\n  * At least one of the expected database tables doesn't exist.\n"   "  * The SQL was invalid.\nHint: Look at the output of 'django-admin.py sqlflush'. That's the SQL this command wasn't able to run.\n"   "The full error: %s", where '%s' is replaced by value under the 'NAME' key of the connection.settings_dict dictionary and e.   call the function six.reraise with 3 arguments: CommandError, CommandError created with argument new_msg,
  define the method clear with argument self.
  where string '%s' is replaced by mod_name and func_name, respectively.   return view_func.
  if filters is true,
  if lang_code is true,
  from django.core.serializers.python import Serializer as PythonSerializer into default name space.
  try,
  call the method build_request_repr with an argument self, return the result.
  if 'step' attribute of attrs dictionary does not exists, set it to to string 'any'.
  return first element of key.
  substitute the result for year.   call the method dt.timetuple, substitute the result for timetuple.
  import pylibmc.
  substitute _iterkeys for keys.
  decorator function register.filter with 2 arguments expects_localtime set to boolean True and is_safe set to boolean False.
  get the value under the 'database' key of options dictionary, use it as a index to get connections list element, store it in connection.
  if AttributeError exception is caught,
  if data is false and initial is true,
  if value is an instance of six.text_type class,
  call the function _bin_to_long with an argument u perform bitwise exclusive OR with 2 operands, previous result an result,
  define the method handle_fk_field with arguments self, obj and field.
  call the method field_stream.read, substitute the result for data.
  server_address is a tuple containing 2 initial elements: addr and port.
  raise a TypeError exception,
  if not,
  if safe is not None,
  if not,
  return result.
  define the method configure with an argument self.
  msg is an instance of a class SafeMIMEMultipart, created with the arguments: _subtype set to self.alternative_subtype and encoding set to encoding.
  try,
  call the method query_string.decode, substitute the result for query_string.
  substitute self._meta for opts.
  define the method _iter with an argument self.
  for every key_value in natural,
  do nothing.
  define lambda function that returns self.file.readinto field, use it as an argument for property function, put the result in readinto.
  return initial.
  get 'clean_%s', where '%s' is replaced with name' attribute of the self object, call the result as an function,
  round up radio, convert it to an integer and the convert it to a string and substitute the result for result.
  return boolean True.
  call the method signals.got_request_exception.send with the sender set to the type of this class, and request set to request as the arguments.
  while rbp is smaller than self.current_token.lbp,
  if self.asvar is true,
  exclude is an empty list.
  from django.template.base import Variable, Library and VariableDoesNotExist into default name space.
  try,
  call the method value.decode with an argument charset.
  call the method re.sub with 3 arguments: raw string '>\s+<', string '><' and result of the function force_text,
  otherwise if ch equals a string '.',
  call the self.stderr.write method with string "    Failed to install index for %s.%s model: %s\n" as argument,
  call the function self.path with argument name, use it and mode as arguments for the call to the function open, use it as an argument for creatinon of a File object instance, return it.
  raise ValueError exception with string 'Sign character found in converter base digits.' as an argument.
  call the method obj.delete.
   and field _state.adding of value under the name key of self.cleaned_data dictionary is true,   append name to construct_instance_exclude list.
  from django.utils.encoding import force_str into default name space.
  derive the class BoundaryIter from the six.Iterator base class.
  return value of the call to the function _ with an argument string 'Enter a valid IPv4 address.' and string 'invalid'.   define the function validate_ipv6_address with an argument value.
  substitute data.name for file_name.
  substitute digits for self.digits.
  define the method __init__ with 2 arguments: self and format_string.
  import module re.
  python_2_unicode_compatible decorator,
  call the function ungettext_lazy with 3 arguments: string 'Ensure this value has at least %(limit_value)d character (it has %(show_value)d),
  define the method __init__ with 2 arguments: self and value.
  as the arguments, substitute the result for response.   append the request to the end of the protected class member response._closable_objects.
  call the method self._save with arguments name and content, substitute it for name.
  call the method writer.as_string, substitute the result for migration_string.
  return an empty string.
  define the method unsign with arguments self, value and max_age set to None.
  define the method __iter__ with an argument self.
  input_type is a string 'number'.
  append entry to files list.
  append self to nodes.
  if visible_issue_count equals to integer 0, or for string "1 issue" if visible_issue_count equals integer 1,   or for string "%s issues", with '%s' replaced by visible_issue_count, subtract visible_issue_count from length of all_issues,   and substitute it for second '%s' in the stirting string.   if any element in the return value of the e.is_serious method is true, and if return value of the method e.is_silenced is false,
  if initial is not None,
  derive the class Archive from the object base class.
  decorator function register.filter with an argument is_safe set to boolean True.
  convert text to an integer, substitute it for c.
  len_item is integer 1.
  seen_data is an empty set.
  define the method __call__ with 2 arguments: self and f.
  from email import charset as Charset, encoders as Encoders, message_from_string and generator.
  call the function os.remove with argument fname.
  if self.deactivate is true,
  define the function next_space_index with 2 arguments: self and subject.
  raise an ValueError exception with an argument string "%r is not in a valid HTTP date format" formated with date.
  if decompress is true,
  if self has an attribute '_files',
  return template and None.
  define the method __str__ with argument self.
  call the method self.connection.quit.
  define the function with_metaclass with 2 arguments meta and unpacked list bases.
  apply operator.eq function to elements of level iterable, until level is reduced to a single value, if the result is true,
  define the method reload with an argument self.
  if not,
  yield a tuple with 2 elements: tok.name and toktext.
  if ext is false and content_type is true,
  from django.utils.encoding import force_str into default name space.
  is replaced with '\\"'.   define the function same_origin with 2 arguments url1 and url2.
  substitute Field.creation_counter for self.creation_counter.
  and guid_attrs.   if value under the 'ttl' key of the item dictionary is not None,
  days is a tuple with 7 elements: strings 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' and 'Sun'.
  substitute obj for self.obj.
  "format (using each model's default manager unless --all is specified).".   define the method add_arguments with arguments self and parser.
  skip this loop iteration,
  if value under the 'indend' key of the options dictionary exists and is not None,
  if settings.USE_TZ is true and value is not None and call to the function timezone.is_naive with an argument value, evaluates to true,
  get the value under the key key of the self.cookies dictionary, substitute boolean True for 'httponly' key of the returned dictionary.
  if self._read_started is true,
  format self.day_field string with name, use it as the key for the data dictionary, substitute the result for d.
  call the method __deepcopy__ from the base class of the class MultiWidget, with an argument memo, substitute the result for obj.
  "Use django.forms.utils instead.", RemovedInDjango19Warning and stacklevel set to an integer 2.   from django.forms.utils import everything into default name space.
  call the method self.__class__, substitute the result for result.
  (?P<filter_name>\w+)(?:%(arg_sep)s(?:(?P<constant_arg>%(constant)s)|(?P<var_arg>[%(var_chars)s]+|%(num)s)))?)",   where 'constant' is replaced with constant_string, 'num' with raw string '[-+\.]?\d[\d\.e]*', 'var_chars' with string "\w\.",   'filter_sep' with result of the function re.escape called with an argument FILTER_SEPARATOR,   anbd 'arg_sep' with result of the function re.escape called with an argument FILTER_ARGUMENT_SEPARATOR.   call the function re.compile with 2 arguments: filter_raw_string and result for bitwise OR on 2 operands re.UNICODE and re.VERBOSE,
  call the function formset.is_valid, if it evaluates to false,
  if not,
  if dt is None is_dst is boolean False, otherwise call the method self._isdst with an argument dt, substitute the result for is_dst.
  define the method utcoffset with 2 arguments self and dt.
  create list out of last_row elements from the start to the last length of row_ender element, append str_hidden and row_ender to it,
  substitute the result for value under the 'microsecond' key of the kw dictionary.   remove entry under the 'tzinfo' key of the kw dictionary, substitute it for tzinfo.
  delete the value under the 'Content-Transfer-Encoding' key of self dictionary.
  raise an exception StopFutureHandlers.
  from django import http into default name space.
  nodelist is an empty list.
  joint prefix, character '.' and self._callback_str together, substitute the result for self._callback_str.
  convert_charrefs set to convert_charrefs and dictionary **kwargs as the arguments.   if not,
  call the method field_stream.read, substitute the result for raw_data.
  define the method __getitem__ with an argument self.
  try,
  call the method urlresolvers.RegexURLResolver with raw literal string '^/' and urlconf as the arguments, substitute the result for resolver.
  get the value under the 'traceback' key of the options dictionary, substitute the result for traceback.
  call the method self.__copy__, return the result.
  if parse_until is true,
  call the method logger.addHandler with an argument: h-th element of value under 'handlers' key of self.config dictionary.
  "(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}(?<!-)\.?)|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\[?[A-F0-9]*:[A-F0-9:]+\]?)(?::\d+)?(?::\d+)?(?:/",   "?|[/?]\S+)$" and re.IGNORECASE, substitute the result for regex.   call a function _ with a string 'Enter a valid value.' as an argument, substitute the result for message.
  define the method add_post_render_callback with 2 arguments: self and callback.
  define the function escape with an argument text.
  call the method dict with 4: self.attrs, type as self.input_type, name as self.name, value as self.choice_value,
  assign the result to opts and new_class._meta.   for every opt in list containing 3 elements: strings 'fields', 'exclude' and 'localized_fields',
  creation_counter is an integer 0.
  quant is an empty list.
  return the result.   define the method value_from_datadict with 4 arguments: self, data, files and name.
  define the method __init__ with 4 arguments: self, key set to None, sep set to ':' and salt set to None.
  self.use_ipv6 is boolean True.
  define the function write with an argument data.
  from django.utils.ipv6 import clean_ipv6_address into default name space.
  join self.dirpath and self.file into a file path, substitute it for orig_file.
  call the function token.split_contents, substitute the result without the first element for bits.
  if not,
  if text has an '__html__' attribute,
  if config_string is false,
  otherwise if ns is not contained in app_list,
  decorator function register.filter with an argument is_safe set to boolean True.
  and prefix as node.prefix.   call the method node.replace with an argument decorated.
  acceptable_endblocks is a tuple with 2 elements: string 'endblock' and 'endblock %s', where '%s' replaced with block_name.
  and self.message equals to other.message, and self.code equals to other.code, return boolean True, otherwise return boolean False.   validate_email is an instance of EmailValidator class.
  decorator stringfilter,
  call the function getInnerText with an argument node, call the strip method on the result, substitute the result for field_value.
  decorator is an instance of class Node, created with 2 arguments: instance of Leaf class created with 2 arguments: token.AT and "@',
  define the method get_default_prefix with an argument cls.
  call the function is_library_missing with an argument taglib_module, if it evaluates to true,
  call the os.utime function with arguments dst and tuple containing 2 elements: st.st_atime and st.st_mtime.
  strip url of surrounding '/' characters, substitute it for tmp.
  if not,
  call the method value_from_datadict from the base class of the class ClearableFileInput,
  if self.is_bound is false,
  call the method self.data.weekday, use the result as an key for obtaining WEEKDAYS_ABBR dictionary value, return it.
  register is an instance of Library class.
  remove kwargs dictionary element under the 'method' key, substitute it for method.
  call the function six.text_type with s as an argument, substitute result for s.
  call the method n.getElementsByTagName with string 'natural' as argument, substitute result for keys.
  substitute i-th element of subject for c.
  if charset equals to string 'utf-8',
  if not,
  replace '%s' in string "Running post-migrate handlers for application %s" with app_config.label, print it to the standard output.
  try,
  sum length of self.quertset and integer 1 if self.field.empty_label is not None, or integer 0 if not, return the result.
  call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, return the result.
  define the function camel_case_to_spaces with an argument value.
  call the method self.__text_cast, return the result.
  if callback is of instance types.FunctionType,
  unpack the manifest.values function return value and feed it to the itertools.chain function, create_models is a set containing chanied list.
  raise an exception.
  define the function get_fixed_timezone with an argument offset.
  substitute first element of parts for view.
  call the method self.fields.values, for every field in result,
  call the method notifier.stop.
  and self.choice_label, return the result.   define the method is_checked with an argument self.
  define the method indent with argument self and level.
  call the function force_text with an argument base, substitute the result for base.
  define the method language with an argument self.
  status code set to integer 400, return the result.   call the method self.get_exception_response with the request, resolver and integer 400 as the arguments, substitute the result for response.
  substitute the result for i-th element of words.   if not,
  call the method self._cache.add with key, value, self.get_backend_timeout(timeout) as arguments.
  derive the class TemplateResponse from the SimpleTemplateResponse base class.
  append new_filenames to _cached_filenames.
  "|^"([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-\011\013\014\016-\177])*"$)" and re.IGNORECASE, substitute the result for user_regex.    call the re.compile function with 2 arguments: raw string '(?:[A-Z0-9](?:[A-Z0-9-]{0,247}[A-Z0-9])?\.)+(?:[A-Z]{2,6}|[A-Z0-9-]{2,}(?<!-))$',
  python_2_unicode_compatible decorator
  if current_len is smaller than or equal to length,
  for every i in range of integers from 0 to length of result, not included,
  status_code is an integer 404.
  if call to the function response.has_header with string 'Last-Modified' as an argument returns boolean False,
  return value.
  call the function import_module with an argument templatetag_module.
  if not,
  if receiver is an instance of types.FunctionType type,
  convert _serializers into a list, return it.
  define the method __nonzero__ with an argument self.
  try,
  convert elements of defaultdict to list, substitute it for self.blocks.
  call the function _urlize with 4 arguments: value, trim_url_limit as limit converted into an integer, nofollow as boolean True,
  if iterations is lesser than integer 0, raise an error.
  append an empty string to usage.
  divide message by error.params, substitute the residue of the division for message.
  define the method __init__ with 3 arguments self and unpacked list args and unpacked dictionary kwargs.
  for every app_dir in app_dirs,
  if length of compressed is lesser than length of data decremented by 1,
  from django.conf import settings into default name space.
  dest as a string 'locale', action as a string 'append' and help as a string,   'Creates or updates the message files for the given locale(s) (e.g. pt_BR). Can be used multiple times.'.   call the method parser.add_argument with 5 arguments: string '--exclude', string '-x', default as a empty list,
  raise an ValueError with an argument string 'ModelForm has no model class specified.'.
  join chunks into bytes string, substitute it for chunk.
  call the function locks.unlock with argument fd.
  define the method as_json with 2 arguments self and escape_html set to boolean False.
  define the method add with 4 arguments: self, data, conn_type and squash set to boolean True.
  if format_module_path is true,
  define the method get with 4 arguments, self class instance, key, default set to None and version set to None.
  if not,
  if f is a file,
  if attr equals any of the strings "__file__", "__name__" or "__path__" and self.mod is not contained in sys.modules,
  if self.require_all_fields is true,
  define the method __bool__ with an argument self.
  call the method self.compile_filter with an argument token.contents, substitute the result for filter_expression.
  decorator function register.filter with an argument is_safe set to boolean False.
  return tuple containing 3 elements: RAW, an empty dictionary and stream.
  return self.DSTDIFF.
  substitute newretval for retval.
  call the method self.can_write.release.
  define the method __nonzero__ with an argument self.
  if object response has an attribute 'render' and if response.render is callable object,
  if self.active_writers and self.waiting_writers both equal to integer 0,
  if fd is greater or equal to integer 0.
  raise an exception.
  if finder is None,
  call the function construct_instance with 4 arguments form, instance, fields, exclude and substitute the result for instance.
  args is a list containing arg surrounded by double quotes for every arg in args.
  if LookupError or TypeError exceptions are caught,
  text_kwargs is a dictionary created from the result of the function force_text with an argument v, mapped through function k, for every k and v in return value of the kwargs.items.
  from django.core.exceptions import ImproperlyConfigured into default name space.
  daemon_kwargs is an empty dictionary.
  if length of bits is lesser than integer 2,
  call the get_script_name function with environ as argument, use the result as an argument for call to the set_script_prefix function.
  leave_locale_alone is boolean False.
  return boolean False.
  try,
  raise an exception.
  call the function _load_serializers.
  return nothing.
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  for every char in fmt,
  raise an Exception exception with an argument string "This %s instance is not writable",
  call the function ugettext with an argument msg_with_ctxt, substitute the result for result.
  define the method _cache with argument self.
  if kwargs is None,
  define the method accessed_time with arguments self and name.
  if self.encoding exists substitute it for encoding, if not substitute settings.DEFAULT_CHARSET for encoding.
  return obj_dict.
  return an empty list.
  as long k is smaller than endpos,
  call the method os.environ.copy, substitute the result for new_environ.
  if response.streaming is true,
  call the method blankout with 2 arguments: part and 'S', write the result to out.
  return an empty list.
  call the function zlib.decompress with an argument data, substitute the result for data.
  return value of the method field.rel.to._meta.pk.to_python called with an argument v.   call the m2m_convert function with pk as argument, for every pk in field_value, substitute the value under the field.name key of the m2m_data dictionary.
  format_module_path is a list containing an element format_module_path.
   if self.file_permissions_mode is not None,
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  call the function wrapped_callback with request, list or arguments callback_args and dictionary arguments callback_kwargs,
  for every filename in filenames,
  if offset is smaller than integer 0, sign is '-', otherwise sign is '+'.
  zfile is an instance of GzipFile class, created with 3 arguments: mode set to string 'wb', compresslevel set to integer 6,
  import module struc.
  call the function iri_to_uri with an argument value, use the result as an argument for the call to the force_text function,
  define the method start_object with arguments self and obj.
  substitute filepath for self.filepath.
  call the function urlparse with an argument url, substitute the result for url_info.
  return output.
  define the method __hash__ with an argument self.
  if error_messages is not None,
  call the function to_language with an argument language, substitute it for self.__to_language.
  if not,
  extra is an dictionary with two pairs of elements 'status_code' with value 500, and 'request with value request,   respectively use the previous as the arguments for the call to the logger.error function.   if settings.DEBUG is True,
  substitute stream_or_string for self.stream.
  if error.code equals code,
  import module sys.
  if self.leave_locale_alone is false,
  if ValueError exception is caught,
  raise a NotImplementedError with an argument string 'subclasses of Serializer must provide a start_serialization() method'.
  from django.core.files import File into default name space.
  self._fname is None.
  filemsg is an empty string.
  if iterable is true, otherwise use an empty list as an argument.   define the method add with 2 arguments: self and item.
  result of the call to the function _ with an argument string 'Tue' for 1,   result of the call to the function _ with an argument string 'Wed' for 2,   result of the call to the function _ with an argument string 'Thu' for 3,   result of the call to the function _ with an argument string 'Fri' for 4,   result of the call to the function _ with an argument string 'Sat' for 5,   and result of the call to the function _ with an argument string 'Sun' for 6.   WEEKDAYS_REV is an dictionary with 7 entries: 0 for 'monday', 1 for 'tuesday', 2 for 'wednesday', 3 for 'thursday', 4 for 'friday',   5 for 'saturday' and 6 for 'sunday'.
  from django.utils import six into default name space.
  substitute token_type and contents for self.token_type and self.contents.
  if not,
  evaluate the function timesince with d, now and reversed set to boolean true as arguments, return the result.
  get the value under the 'database' key of the options dictionary, use it as a key to access the element under the connections dictionary, substitute it for connection.
  call the os.makedirs function with directory and self.directory_permissions_mode as arguments.
  call the color_style method, substitute the result for self.style.
  if middle ends with closing and count of occurrence of closing in middle equals count of occurrence of opening in middle incremented by one,
  call the handle method of the base class of the Command class, with 4 arguments: string 'project', project_name, target,
  call the method parser.parse_args with an argument args set to args, substitute the result for defaults.
  call the cursor.execute method with statement as argument.
  define the method symlinks_supported.
  call the function force_text with an argument s, strip the result of whitespaces from both ends,
  define function get_max_age with response as an argument.
  join self.dirpath and self.file into a file path, return it.
  join it with app into a string, separated with string '; ', substitute it for name_str.   substitute '%s\ in string "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'",
  call the method lineno_comment_map.setdefault with 2 arguments: t.lineno and an empty list, append t.contents to the result.
  join func.__class__.__module__ and func.__class__.__name__ into a string, separated by character '.', substitute it for self._func_path.
  raise an ValidationError with 2 arguments: dictionary self.error_messages value under the key 'required',
  define the method validate_domain_part with arguments self and domain_part.
  call the function quote with return value of the evaluated function force_bytes(iri),
  sum of the result of the function time.time and max_age, substitute it for 'expires' key of the previously returned dictionary.   if path is not None,
  substitute self for value under the 'block' key of context dictionary.
  derive the class Literal from the TokenBase base class.
  call the function number_format with an argument value, return the result.
  define the function parse_etags with an argument etag_str.
  if ValueError exception is caught,
  call the method context.render_context.push.
  call the method o.isoformat substitute the result for r.
  if self.verbosity is greater than integer 0,
  if value is an instance of Field class,
  if TemplateDoesNotExist, renamed to e, exception is caught,
  if func is None,
  "Use django.utils.timezone.get_default_timezone instead." and RemovedInDjango19Warning.   call the method tzinfo.__init__ with an argument self.
  call the method __init__ from the base class of the class SimpleTemplateResponse, return the result.
  call the method __setitem__ from the base class of the QueryDict class, with arguments key and value.
  message_context is None.
  if help_texts is true and f.name is contained in help_texts,
  default_error_messages is a dictionary with an entry, result of the call to the function _ with an argument,
  if data is an instance of MultiValueDict or MergeDict class,
  call the method template.render with an argument context, substitute the result for content.
  for every sql in return value of the function connection.creation.sql_for_pending_references called with arguments: model, style,
  if not,
  return an empty string.
  format string ' pgettext(%r, %r) ' with message_context and g, write it to out.
  doctring
  and unpacked dictionary kwargs.   join into a string permitted_methods, separated by string ', ', substitute it for value under the 'Allow' key of the self dictionary.
  formated with 3 elements: self.class_name, self.old_method_name and self.new_method_name, self.deprecation_warning and integer 2.   call the function f with a arguments: unpacked list args and unpacked dictionary kwargs, return the result.
  define the method validate with 2 arguments: self and value.
  if length of fks_to_parent equals integer 1.
  define method clear_cdata_mode, with self class instance as an argument.
  property decorator,
  if i-th element of subject is '"' character or "'" character,
  from django.db.models import AutoField, OneToOneField and ForeignKey.
  substitute the result for the value under the 'month' key of the html dictionary.   for every i in successive list of integers from 1 to 30, append tuple containing i and i elements into a list,
  call the function is_library_missing with an argument path, return the result.
  derive the class MemcachedCache from the BaseMemcachedCache base class.
  define the method widget_attrs with arguments self and widget.
  if matches is false,
  call the method self.find_files with an argument string '.', substitute the result for file_list.
  if fdel is not None,
  DEFAULT_ATTACHMENT_MIME_TYPE, make_msgid, BadHeaderError and forbid_multi_line_headers into default name space.   __all__ is a list of strings, 'CachedDnsName', 'DNS_NAME', 'EmailMessage', 'EmailMultiAlternatives', 'SafeMIMEText',
  from importlib import import_module into default name space.
  define the method _has_changed with 3 arguments: self, initial and data.
  initial set to None, help_text set to an empty string, error_messages set to None, show_hidden_initial set to boolean False,   validators is an empty, localize set to boolean False, label_suffix set to None.   substitute required, label and initial for self.required, self.label and self.initial.
  substitute complain for __delitem__.
  evaluate the logical expression, if other is an instance of RegexValidator and self.regex.pattern equals to other.regex.pattern,
  if value.tzinfo is None and call to the method value.tzinfo.utcoffset called with an argument value evaluates to None,
  self.parse_name, assign the result to _, ser_fmt and cmp_fmt, respectively.   get the value under the cmp_fmt key of the self.compression_formats dictionary, assign it to open_method and mode.
  if IOError, renamed to e, exception is caught,
  yield obj as generator return value,
  from __future__ import unicode_literals into default name space.
  from django.core.management import call_command into default name space.
  use it as an argument for the call to the self.style.MIGRATE_LABEL method, use the result of the previous method as an argument for the call to the self.stdout.write method.   if target_app_labels_only is true,
  empty is an instance of object class.
  from django.utils import six into default name space.
  of the obj object, append the results in a list, substitute it for value under the field.name key of the self._current dictionary.   define the method getvalue with an argument self.
  'Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice'.   define the method __init__ with 9 arguments: self, choices set to an empty tuple, required set to boolean True, widget set to None,
  define the function now with 2 arguments: parser and token.
  try,
  return path,
  do nothing.
  return self.
  derive the class EmailBackend from the BaseEmailBackend base class.
  if self.use_argparse is false,
  substitute token for self.token.
  if value,
  return self.forms element at the index index.
  if not,
  return boolean False.
  for every key is self.bad_cookies,
  from django.apps import apps into default name space.
  register.tag decorator,
  call the method parser.parse, substitute the result for nodelist.
  skip this loop iteration.
  substitute value for value under the options key of options dictionary.
  define the function smart_text, with s, encoding set to string 'utf-8', strings_only set to False, errors set to 'strict' as arguments.
  if filename is true,
  if not,
  output is an empty list.
  if not,
  decrement date.month by integer 1, use the result as an key to obtain the value from the months dictionary, substitute it for month.
  call the function re.compile with 2 arguments regex, re.UNICODE and substitute the result for regex.
  raise a ValidationError exception with arguments self.message and code set to self.code.
  derive the class Parser from the base class object.
  define the method get_nodes_by_type with 2 arguments: self and nodetype.
  try,
  constant_string is a raw string "(?:%(i18n_open)s%(strdq)s%(i18n_close)s|%(i18n_open)s%(strsq)s%(i18n_close)s|%(strdq)s|%(strsq)s)",
  if memo is None,
  attrs is an dictionary with 9 initial entries: form for 'form', extra for 'extra', can_order for 'can_order',
  self.fixture_object_count is integer 0.
  substitute DEFAULT_PORT for self.port.
  where '%s' is replaced with result of the method self.current_token.display.   return retval.
  call the function six.text_type with an argument value, use the result as an argument for the call to the function mark_safe,
  decode with an argument string 'ascii', substitute the result for name.   take elements of p from index i incremented by 1 to the end, strip the result of the whitespaces, substitute it for value.
  call the method b64_decode with an argument base64, substitute the result for data.
  call the function format_html with an argument empty string, return the result.
  call the method ustring_re.sub with 2 arguments: fix and s, return the result.
  nargs set to '*' and help is a string 'Restricts dumped data to the specified app_label or app_label.ModelName.'.   call the method parser.add_argument with 4 arguments: string '--format', default set to string 'json',
  if not,
  return data.
  if help_texts is not None,
  define the function get_language_from_request with 2 arguments: request and check_path set to boolean False.
  input_type is a string 'file'.
  call the callback function with request and dictionary argument param_dict as the arguments, substitute it for response.
  call the method dig1.update with an argument u.
  if ValueError exception is caught,
  from django.utils import termcolors into default name space.
  inputs is an empty list.
  remove first element from model_dependencies, assign it to model and deps, respectively.
  append to list, a tuple with 2 elements: f and value under the f key of field_dict dictionary, use the resulting list as an argument,   for the creation of the instance of OrderedDict class, substitute it for field_dict.   return field_dict.
  return form.
  where '%r' are replaced by val and name, respectively.   try,
  if locale_dir is false,
  skip this loop iteration,
  substitute _urllib_response_moved_attributes for Module_six_moves_urllib_response._moved_attributes.
  if self has an '_regex_validator' attribute and self._regex_validator is contained in self.validators,
  substitute the last element of parts for ser_fmt.
  call the method blankout with 2 arguments: part and 'S', write the result to out.
  call the method __init__ from the base class of the CommandParser class, with unpacked dictionary kwargs as argument.
  return boolean False.
  return nothing.
  from shutil import copystat into default name space.
  define the method __getitem__ with an argument self.
  for every iso_input in the result,   if iso_input is not contained in val,
  to_unicode is an lambda function with an argument s, result is the result of the function force_text,
  use the result as an argument for the call to the self.stdout.write.   call the self.sync_apps method with connection and executor.loader.unmigrated_apps as arguments, substitute it for created_models.
  format string hex_format_string with x, call the method encode on the result with an argument string 'ascii',
  call the method middleware.process_response with 2 arguments: request and response, return the result.
  val is None.
  call the method self.add_truncation_text with 2 arguments: elements of words joined in a string, separated with whitespaces,
  define the function iter_format_modules with 2 arguments: lang and format_module_path set to None.
  call the method warnings.warn with 2 arguments: string "No fixture data found for '%s'. (File format may be invalid.)",
  call the method cls.__new__ with 2 arguments: cls and unpacked list args.
  define the method __repr__ with an argument self.
  if os.name equals to 'nt',
  self.upload_handlers is an instance of ImmutableList, created with 2 arguments: self.upload_handlers,
  for every name in loggers,
  define the function do_ifequal with 2 arguments: parser, token and negate.
  join tmpdir and sting 'original' into a file path name, substitute it for original_path.
  if password is None substitute settings.EMAIL_HOST_PASSWORD for self.username, if not substitute password for self.password.
  if ip_str starts with ':, but it doesnt starts with '::', or if ip_str ends with ':, but it doesnt ends with '::',
  substitute last element of bits for asvar.
  get the value under the key 'database' of the options dictionary, use it as a index to get an element from connections, substitute it for connection.
  call the function force_bytes with an argument password, substitute the result for password.
  with '%s' substituted for name_str, as argument.   run_syncdb is boolean False.
  if self._dir path doesnt exists,
  call the method self.nodelist.render with an argument context, strip the result of the surrounding whitespaces,
  call the method parser.expression with an argument bp, substitute it for self.seconds.
  third element of the result of the function sys.exc_info.   define the method __init__ with an argument self.
  from django.core.mail.message import EmailMessage, EmailMultiAlternatives, SafeMIMEText, SafeMIMEMultipart,
  requires_system_checks is boolean False.
  if filename ends with string "$py.class",
  call the method self.extract with an argument absolute_path, return the result.
  define the method add_arguments with 2 arguments self and parser.
  if filename ends with '/' or with '\\',
  return value under key key of self dictionary
  if node is not an instance of ExtendsNode,
  define the method encoding with an argument self.
  if model is not contained in app_models for every model in return value of the connection.introspection.installed_models function return value,
  split string cc_delim_re by value of dictionary response under the key 'Vary' as a delimiter, substitute it for vary_headers.
  define the method tzname with 2 arguments self and dt.
  define the function urlsafe_base64_decode with an argument s.
  if kwarg_format is true,
  if template_name_list is false,
  if file_name is false,
  call the method token.split_contents, substitute the result for bits.
  if self.number equals to self.paginator.num_pages,
  if not,
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  convert path to a string, substitute the result for path.
  and '%s' is replaced with app_or_project and message, respectively.   define the method download with arguments self and url.
  return an empty list.
  and unpacked dictionary kwargs.   call the function force_text with an argument self.value, substitute the result for self.value.
  from django.core.exceptions import ImproperlyConfigured into default name space.
  if not,
  if migration.replaces is true,
  selected_html is an empty string.
  call the method sys.stderr.write with an argument string "fork #2 failed: (%d) %s\n", formated with e.errno and e.strerror.
  write string "  all instances of the codebase have applied the migrations you squashed," to self.stdout.
  from django.core.management.base import BaseCommand and CommandError into default name space.
  define the method __eq__ with 2 arguments: self and other.
  call the function to_locale with an argument language, substitute it for self.__locale.
  substitute message for self.message.
  from importlib import import_module into default name space.
  query a string 'Please enter either "yes" or "no": ' and store the result in confirm.
  self._errors is an instance of ErrorDict.
  try,
  call the method handler.startElement with 2 arguments: string 'feed' and result of the method self.root_attributes.
  return parent.
  dictionary containing element v for k.   for every k and list_ in return value of the method self.lists,
  if args is true,
  code is a string 'invalid'
  if not,
  taglib_module is an string '%s.%s', where '%s' is replaced to module and library_name.
  call the method middleware.process_template_response with 2 arguments: request and response, substitute the result for response.
  if refto is contained in known_models,
  append ending to msg.
  define the function blankout with 2 arguments: src and char.
  define the method _set with 4 arguments, self class instance, key, value and timeout set to DEFAULT_TIMEOUT.
  return boolean True.
  if member is a directory,
  try,
  from django.utils.deprecation import RemovedInDjango19Warning and RemovedInDjango20Warning into default name space.
  define the function javascript_quote with 2 arguments: s and quote_double_quotes set to boolean False.
  substitute value under the NEXT key of the oldroot dictionary for root and first element of nonlocal_root.
  open new_path file in 'wb' mode, with file descriptor renamed to new_file,
  define the function to_current_timezone with an argument value.
  raise an ValidationError with 3 arguments: dictionary self.error_messages value under the key 'invalid_choice',
  call the method self.build_attrs with an argument id set to field modulus id_, substitute the result for local_attrs.
  do nothing.
  do nothing.
  return default.
  substitute settings.MEDIA_URL for base_url.
  if third element of bits equals a string 'parsed',
  define the method __iter__ with an argument self.
  append rel_model to deps.
  substitute value under the field_name key of the self.fields dictionary for formfield.
  import module warnings.
  from collections import OrderedDict into default name space.
  increment i-th element of counters by chunk_length.
  if bad_app_labels is true,
  call the method self.split_leading_dir with an argument name, substitute the second element of the result for name.
  pieces is an empty list.
  use the result as an argument for the call to the function iri_to_uri, return the result.   call the function lazy with arguments reverse and str, substitute the results for reverse_lazy.
  return a list containing first element of source and a list containing params.
  if not,
  import module sys.
  if not,
  substitute DateTimeInput for widget.
  define the method __lt__ with 2 arguments: self and other.
  try,
  code set to an string 'invalid_choice' and dictionary params with an entry: val for 'value'.   define the method _has_changed with arguments self, initial and data.
  return an instance of SafeBytes, created with an argument data.
  raise an ImproperlyConfigured with an argument string 'Loader does not define a "load_template" callable template source loader'.
  import module warnings.
  if not,
  skip this loop iteration,
  import module os.
  try,
  define the method __add__ with 2 arguments self and rhs.
  try,
  define the method as_tuple with 2 arguments: self and value.
  if InputStreamExhausted exception is caught,
  dest set to string 'interactive', default set to boolean True, help as a string 'Tells Django to NOT prompt the user for input of any kind.'.   call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',
  define the method add_item_elements with 3 arguments: self, handler and item.
  if value is None,
  derive the class HttpResponseNotFound from the HttpResponse base class.
  call the method sys.stderr.write with an argument string "  installed flup, then make sure you have it in your PYTHONPATH.\n".
  url is None.
  call the json.dumps function with 2 arguments: obj and separators set to tuple containing ',' and ':' characters,
  join basedir, l and string 'LC_MESSAGES' into a path separated by '/' for every l in locales, assign the list to dirs.
  decorator function wraps with an argument func.
  _ is an empty dictionary.
  for every subject, message, sender and recipient in datatuple, store the results in the messages list.   return evaluated result of the method connection.send_messages with messages as argument.
  raise an TemplateSyntaxError exception with an argument string "'%s' is not a valid tag or filter in tag library '%s'",
  create a list of tuples out of 2 lists: appended params list to prefix_args and text_args, covert the result into a dictionary,
  and unpacked dictionary kwargs.   substitute queryset for self.queryset.
  raise an NotImplementedError with an argument string "Subclasses of AppCommand must provide a handle_app_config() method.".
  skip this loop iteration.
  if UnicodeEncodeError exception is caught,
  define the method __repr__ with an argument self.
  call the method clear from the base class of the class QueryDict, return the result.
  call the method __deepcopy__ from the base class of the class ChoiceField, with an argument memo, substitute the result for result.
  sum media and w.media, substitute the result for media.
  for every var in self.vars,
  derive the class StopUpload from the UploadFileException base class.
  finally perform,
  from django.forms.fields import Field and FileField into default name space.
  call the method t.render with an argument, instance of Context class, created with an argument dictionary, return the result.
  define the method __init__ with 6 arguments: self, regex set to None, message set to None, code set to None,
  call the private dict.__setitem__ method with self class instance, key and result of the function http_cookies.Morsel() as arguments.
  append a tuple with 2 elements: f.name and formfield to field_list.
  define the method __init__ with 4 arguments: self, data set to None, files set to None, auto_id is an string 'id_%s', prefix is None,
  return an empty string.
  call the method related.natural_key, substitute the result for related.
  if six.PY3 is true,
  and code set to a string 'invalid_choice'.   return self.parent_instance.
  call the method parser.add_argument with 4 arguments: string 'args', metavar set to 'app_label', nargs set to '+',
  return value.
  call the function settings.is_overridden with argument string 'ADMINS', if it evaluates to boolean True,
  if s is an instance of an object Promise.
  zip val1 and va2 into list of tuples, for every x and y in the result,
  try,
  get the value under the key key of the self.find_template_cache dictionary, substitute it for result.
  and help set to string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.   define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
  return nothing.
  call the method parse from the instance of TemplateIfParser class, created with 2 arguments parser and bits, substitute the result for condition.
  call the function pformat with an argument value, return the result.
  if not,
  extend self.children list with data.children.
  help is string 'Compiles .po files to .mo files for use with builtin gettext support.'.
  call the method __new__ with an argument cls from the base class of the klass function.
  create a tuple out a tuple with an element integer 2037 and a list tt elements without the first element, substitute the result for tt.
  convert value into an floating point number, substitute it for value.
  call the function import_module with an argument string '%s.formats' formated with location, which is formated with loc,
  define the function deconstruct with an argument obj.
  call the method self.fetch_command with first element of cwords as an argument, substitute it for subcommand_cls.
  app_dirs is an empty list.
  get fist max_width incremented by 1 elements from line, find index of the first occurrenece of whitespace from the right side,
  raise an ValueError exception with an argument string 'must define at least one ordering operation: < > <= >='.
  write string "Performing system checks...\n\n" to self.stdout stream.
  slice the rawdata from k to endpos, then take the first 20 elements of the previous slice,
  define the function _check_boolean_field_default_value with app_config set to None and kwargs dictionary as arguments.
  from django.apps import apps into default name space.
  message is an string "%s\n\nRequest repr(): %s"  formated with the result of the metod self.format with an argument record,
  return nothing.
  output is an empty list.
  substitute self._meta for opts.
  call the method __init__ from the base class of the class DecimalField, with 4 arguments: max_value, min_value,
  if resolver.urlconf_module is None:
  get the value under the 'id' key of the widget.attrs dictionary, if the key exists substitute it for id_,
  call the method make_key with arguments key and version from the base class of the class BaseMemcachedCache, use it as an argument for the call to the function force_str, return the result.
  get the value from the options dictionary under the key 'verbosity', substitute it for self.verbosity.
  get translation_function attribute of the object t, call the result with an argument eol_message, substitute the result for result.
  if self.addr is false,
  delete the entry of self.cleaned_data dictionary under the key field.
  define the method widget_attrs with arguments self and widget.
  write the result to the self.stdout stream.   write output to self.stdout stream.
  define the function divisibleby with 2 arguments value and arg.
  __expire_info is an empty dictionary.
  output is an empty list.
  get "_decorated_function" attribute from func, return func if the attribute doesnt exists,
  call the function six.iteritems with an argument kwargs, for every key and value in the result,
  call the function factory with an argument unpacked dictionary kwargs, substitute the result for result.
  return cached.
  call the method dig1.digest, use the result as an argument for the call to the function dig2.update.
  return host.
  call the function get_token with an argument request, substitute the result for token.
  derive the class ForNode from Node base class.
  from __future__ import unicode_literals into default name space.
  attrs as attrs_plus and choices as choice_label.   substitute self.choice_input_class for sub_ul_renderer.choice_input_class.
  call the method re.compile with an argument raw string "&(#?[xX]?(?:[0-9a-fA-F]+|\w{1,8}));", substitute the result for _entity_re.
  call the function get_template with an argument parent, return the result.
  substitute field_name for self.field_name.
  assign the result to the value under the string ".moves.urllib_error" appended to __name__ key of the sys.modules dictionary,   and to the value under the string ".moves.urllib.error" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_request from the _LazyModule base class.
  return _localtime.
  return self._fqdn.
  if GET_override is not None, or otherwise generated with the call to the function pformat with an argument request.GET.   if Exception exception is caught,
  call the function django.get_version, return the result.
  convert fist p elements of locale to lowercase, append '_' to it,
  call the function data with 3 arguments: d.year, d.month and d.day, return the result.
  if server is an instance of six.string_types,
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  from __future__ import unicode_literals into default name space.
  define the method start_serialization with an argument self.
  substitute value under the name key of the lib.filters dictionary for value under the name key of the temp_lib.filters dictionary.
  substitute key for result.key.
  try,
  from django.utils.functional import cached_property into default name space.
  take a tuple with 2 elements: boolean False and method resolve called with an empty dictionary on the instance of Variable class,
  try,
  from django.utils.module_loading import import_string into default name space.
  call the method self.next_token, substitute the result for self.current_token.
  define the method attach with 4 arguments: self, filename set to None, content set to None and mimetype set to None.
  define the method __repr__ with an argument self.
  call the method start_ipython with an argument argv as an empty list.
  if filename is an instance of MIMEBase,
  substitute error_messages for value under the 'error_messages' key of attrs dictionary.
  call the method m.groupdict, substitute the result for d.
  call the method self.nodelist.render with an argument context, return the result.
  dest set to string 'use_ipv6', default set to boolean False and help set to string 'Tells Django to use an IPv6 address.'.   call the method parser.add_argument with 5 arguments: string '--nothreading', action set to string 'store_false',
  substitute FIELD for TYPE,
  join 'conf' and 'locale' into a file path, if it is a directory,
  self.max_digits and self.decimal_places,   raise an ValidationError with 3 arguments: value under the 'max_whole_digits' key of the self.error_messages dictionary,
  if message has an 'error_dict' attribute,
  from django.utils import six into default name space.
  extend the value under the field key of the self._errors dictionary with error_list.
  call the method cache.clear.
  define the function filesizeformat with an argument bytes.
  if KeyError exception is caught,
  for every subnode in node,
  if max_value is not None,
  if the key doesnt exists substitute self.use_natural_keys for self.use_natural_foreign_keys.   remove the 'use_natural_primary_keys' key from the options dictionary and substitute it for self.use_natural_primary_keys,
  if errors is None,
  call the server_bind method from the base class of the WSGIServer class.
  derive the class MiddlewareNotUsed from the Exception base class.
  define lambda function that returns self.file.seek field, use it as an argument for property function, put the result in seek.
  call the method value.replace with an argument tzinfo as timezone, return the result.
  derive the class Tags with base class object.
  define the method body with an argument self.
  call the method self.configurator.convert with an argument value, substitute the result for result.
  if KeyError exception is caught,
  if max_age is not None,
  try,
  if data is None,
  call the function method with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, substitute the result for data.
  call the method Module_six_moves_urllib_request with an argument: string ".moves.urllib_parse" appended to __name__,
  use the result as an argument for the call to the function mark_safe, return the result.   decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
  call the function _trans.templatize with 2 arguments: src and origin, return the result.
  zip val1 and va2 into list of tuples, for every x and y in the result,
  call the function import_string with an argument logging_config, substitute the result for logging_config_func.
  define the method handle with 3 arguments: self, unpacked args and unpacked dictionary options.
  define the function is_iterable with an argument x.
  if key is contained in d,
  return value.
  if not,
  substitute name for self.name.
  substitute the return value of the function abspathu with self.base_location as argument for self.location.
  use tag as an argument to call the iterator method next, substitute the result for invalid_tag.   raise an CommandError exception with an argument string 'There is no system check with the "%s" tag.', where '%s' is replaced with invalid_tag.
  derive the class ModelForm from the base class in the return value of the method six.with_metaclass, called with 2 arguments:
  return the result.   decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
  and re.VERBOSE, substitute the result for smart_split_re.   define the function smart_split with an argument text.
  define the method open with arguments self and mode defaulting to None.
  and data, if it evaluates to true,    return boolean  True.
  from django.apps import apps into default name space.
  if ValueError exception is caught,
  import module logging.
  return an empty string.
  remove value under key key of self dictionary, if it doesnt exists return default, substitute the result for value.
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  instantiate class Module_six_moves_urllib with an argument, string ".moves.urllib" appended to __name__,
  unpacked list args, unpacked dictionary kwargs.   substitute unpack_ipv4 for self.unpack_ipv4.
  add state element to self.__dict__ dictionary.
  args is an empty string.
  if six.PY2 is true, _BASE64_DECODE_ERROR is TypeError, if not, _BASE64_DECODE_ERROR is binascii.Error.
  default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a database to flush. Defaults to the "default" database.'.   call the method parser.add_argument with 5 arguments: string '--no-initial-data', action set to string 'store_false',
  if middleware has an attribute 'process_response',
  substitute value under the attr key of flags dictionary for value.
  call the function register_serializer with 3 arguments: format, value under the format key of the BUILTIN_SERIALIZERS dictionary and serializers.
  call the function module_to_dict with an argument settings._wrapped, substitute it for user_settings.
  call the method self._truncate_html with 5 arguments: length, truncate, self._wrapped, length and boolean True, return the result.
  substitute limit for self.remaining.
  from django.utils.module_loading import module_has_submodule into default name space.
  call the method self._isdst with an argument dt, if it evaluates to true,
  app_list is an instance of a class OrderedDict.
  if UnicodeDecodeError exception is caught,
  for every form in self call the method form.has_changed if any of the results evaluates to true, return boolean True,
  BASE16_ALPHABET is a string '0123456789ABCDEF'.
  convert self.literal into an integer, substitute it for self.literal.
  property decorator,
  append templatetag_module to _templatetags_modules.
  increment i by integer 1.
  define the method errors with an argument self.
  define the function lock with arguments f and flags.
  return self._client.
  format string ' _(%s) ', with fmatch, write it to out.
  import module re.
  from yaml import CSafeLoader as SafeLoader into default name space.
  define the method strptime with arguments self, value and format.
  if urlconf_name is true,
  if self.verbosity is greater or equals integer 2 and fixture_files_in_dir is false,
  from __future__ import absolute_import into default name space.
  substitute if _locs_ is None for _locs_.
  if data_list is true,
  use the result as an argument for the call to the mark_safe function, return the result.   call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs, return the result.
  call the function force_str with an argument quoted_url, use the result as an argument for the call to the function unquote_plus,
  define the serialize content with an argument self.
  for every path in self.locale_paths,
  from django.utils.six.moves.urllib.request import urlretrieve into default name space.
  define the function parse_header with an argument line.
  subtract i from len_values, decrement the result by integer 1, substitute it for value under the 'revcounter' key of the loop_dict dictionary.
  call the function _resolve_name with 3 arguments: name list elements from the level index to the end, package and level,
  increment i by integer 1.
  call the method apps.get_model with 2 arguments: string 'auth' and string 'Permission'.
  return boolean False.
  return new_class.
  try,
  if ValueError or TypeError exceptions are caught,
  if not self.localized_fields is None.   get 'labels' attribute from the options object, if it exists substitute it for self.labels, if not self.labels is None.
  substitute it for d.   while rest is true,
  return t.
  if contents is false, substitute self.label for contents.
  substitute StringIO for stream_class if content is an instance of six.text_type, otherwise substitute BytesIO for stream_class.
  return.
  substitute self.subject for subject.
  define the method __get__ with 3 arguments: self, instance and owner.
  filesize_number_format with result of division of bytes by KB as an argument, substitute the result for value.   otherwise if bytes is smaller than GB,
  if response is True,
  call a function _ with a string 'Enter a valid value.' as an argument, substitute the result for message.
  derive the class Trans from the object base class.
  divide value by max_value, multiply the result with max_width, substitute it for ratio.
  raise an ValueError with an argument string "Non-reversible reg-exp portion: '(?P%s'" formated with ch.
  for every dict_ in self.dicts,
  plural is an empty list.
  call the method render from the base class of the class ClearableFileInput, called with 3 arguments: name, value and attrs,
  if TypeError exception is caught,
  _builtin_context_processors is a tuple containing a string 'django.core.context_processors.csrf'.
  call the method Model._meta.get_all_field_names, substitute the result for model_fields.
  call the method self.main_help_text with an argument commands_only set to boolean True, append new line to it, write it to sys.stdout.
  return singular.
  "apps registry is ready. Check that you don't make non-lazy gettext calls at import time.".   for every app_config in app_configs,
  if KeyboardInterrupt exception is caught,
  raise an TemplateDoesNotExist exception with an argument error_msg.
  if token.contents equals string 'empty',
  call the function var.find with an argument: '_' appended to VARIABLE_ATTRIBUTE_SEPARATOR, if the result is greater than integer -1,
  try,
  call the method self.is_url with an argument template, if it evaluates to true,
  trimmed is boolean False.
  replace all the occurrences of '\\\\' in string value with '\\' and all occurrences of '\\"' for '"', substitute the result for value.
  if not,
  result of the call to the method v.resolve with an argument context,   for result of the function smart_text called with 2 arguments k and string 'ascii'.   call the method self.view_name.resolve with an argument context, substitute the result for view_name.
  if first element of message_context equals to character '"',
  is_compressed is boolean False.
  if USE_INOTIFY is true,
  get 'exec' attribute from the moves.builtins object, substitute it for exec_.
  call the method self.read_limited with length of self.buffer subtracted from size as argument, add result to self.buffer, store it in result.
  instantiate ValidationError class with an argument self.data, return its field error_list.
  derive class Command from the BaseCommand base class.
  initial_set is set created out of return values of the function force_text called with an argument value,
  convert the result into a lowercase, append it to ret_ip.   join elements of ret_ip into a string separated with ':', return it.
  allowed_schemes is an list containing 3 elements: strings 'http', 'https' and 'ftp'.
  call the function handle_app with 2 arguments: app_config.models_module and unpacked dictionary options.
  if years is true,
  call the method data, substitute the result for data.
  if self.paginator.count equals a integer 0,
  substitute tok for value under the groupid key of the self.toks dictionary.
  call the method self.validate_key with argument key.
  if cc contains item 'public' and kwargs contains item 'private',
  derive the class TarArchive from the BaseArchive base class.
  from __future__ import unicode_literals into default name space.
  substitute settings.ROOT_URLCONF for urlconf.
  for every c in return value of the method response.cookies.values,
  call the function converter with an argument suffix, substitute the result for value.
  call the decode function with argument string 'ascii' on the return value of the method domain.encode with argument string 'idna' substitute the result for domain.
  append value to parts.
  program is string 'msgfmt'
  define the function execute_from_command_line with an argument argv set to None.
  if data is true, substitute it for self.data, if not self.data is an empty dictionary.
  substitute the result for file_name.   call the function unescape_entities with an argument file_name, use the result as an argument for the call to the self.IE_sanitize,
  output_transaction is boolean True.
  call the method template_localtime with 2 arguments: value and use_tz=context.use_tz, substitute the result for value.
  return an empty string,
  define the method IE_sanitize with arguments self and filename.
  define the function truncatechars_html with 2 arguments value and arg.
  return self.
  call the function pickle.dumps with expiry and integer -1 as arguments, use the result as the argument for the call to f.write function.
  from django.conf import settings into default name space.
  call the method __init__ from the base class of the class RegexField, with 4 arguments: max_length, min_length, unpacked list args,
  options is a list containing a tuple with 2 entries: string '--help' and None.
  if value is true,
  substitute value under the cache_alias key of the caches dictionary for cache.
  return no.
  define the method initial_form_count with an argument self.
  if message is true,
  define the method _set_choices with arguments self and value.
  from django.conf import settings into default namespace.
  if ext doesnt start with '.' character,
  if self.use_natural_primary_keys is false and obj doesnt have 'natural_key' argument.
  if value under the header key of the self.META dictionary is equal to value,
  call function update with path as the argument, for every path in settings.LOCALE_PATHS, extend basedirs list with previous items.
  if OSError, renamed to e, exception is caught,
  if vale is None or an empty string,
  get config dictionary element under 'filters' key, if it exists substitute it for filters, if not, filters is EMPTY_DICT.
  if table_name_filter is not None and table_name_filter is callable object,
  substitute instance for self.instance.
  from django.utils.encoding import force_text into default name space.
  derive the class SignatureExpired from the BadSignature base class.
  try,
  from django.core.exceptions import DisallowedRedirect into default name space.
  call the function sql_destroy_indexes with 3 arguments: app_config, self.style and connection, substitute the result for statements.
  if buf is false,
  format string normal_row with an dictionary containing 6 entries: return value of the function force_text with an argument bf_errors,
  if 'Location' is contained in response and function request.get_host evaluates to True,
  if length of t equals to integer 2,
  sum item and i_item together, append the result to new_result.
  if not,
  if rel_model has an attribute 'natural_key' and rel_model is not equal to model,
  format string ' gettext(%r) ' with g, write it to out.
  call the method df.format with an argument format_string, return the result.
  get_format called with an argument string 'DATETIME_INPUT_FORMATS', substitute the result for format.   call the method value.strftime with an argument format, return the result.
  define the method add_root_elements with 2 arguments: self and handler.
  sort value with key set to filed resolve of instance of a class Variable, created with an argument arg, reverse the sort and return the result.
  call the method opts.model, substitute the result for self.instance.
  substitute reason for self.reason_phrase.
  if min_value is not None,
  __all__ is a tuple, containing strings 'NamedTemporaryFile' and 'gettempdir'.
  return potfiles.
  substitute safe for value under the 'safe' key of kwargs dictionary.
  if line ends with a new line character substitute width incremented by integer 1 for max_width, if not substitute width for max_width.
  define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  define the function module_to_dict with 2 arguments: module and omittable as a lambda function with an argument k,
  if i is greater than or equal to length of subject,
  increment self.active_writers by integer 1,
  filemsg is a string 'file %s, ', where '%s' is replaced with origin.
  try,
  continue with the next iteration of the for loop.
  media is a property object of the current class, with _get_media as getter function.
  call the method self._assert_mutable.
  remover 'file' key from the kwargs dictionary, if it exists substitute it for fp, if not substitute sys.stdout for fp.
  called with 2 arguments: value and memo, for every key and value in result for the method self.items, return the result.   define the method __copy__ with an argument self.
  define the method _create_message with arguments self and msg.
  call the method o.isoformat, return the result.
  call the method self._callback_strs.add with an argument lookup_str.
  incomment is boolean False.
  call the function language_code_prefix_re.match with an argument path, substitute it for regex_match.
  call the method to_python with an argument value from the base class of the TimeField class, return the result.
  call the function sanitize_address with arguments addr and encoding, for every addr in return value of the getadresses function with tuple containing val as argument, join all the results into a string separated by ', ', substitute the result for val.
  raise TemplateSyntaxError(
  substitute to_field_name for self.to_field_name
  filters is an empty list.
  define the method __init__ with arguments: self, fail_silently set to boolean False and unpacked dictionary kwargs.
  return result.
  call the self.indent method with integer 0 as an argument.
  define the method update_watch with sender defaulting to None and dictionary pair of elements kwargs.
  if self._wrapped is contained in empty,
  define the function is_safe_url with 2 arguments url and host set to None.
  if TemplateDoesNotExist exception is caught,
  with lock,
  convert text without first element to hexadecimal integer, substitute it for c.
  call the method text.encode with argument utf8_charset.output_charset, substitute the result for payload.
  re.U and re.S, substitute the result for re_chars.   call the function re.compile with an argument raw string '\r\n|\r', substitute the result for re_newlines.
  if not,
  if second from the end element of args equals a string 'as',
  get the value under the 'content-disposition' key of the info dictionary, substitute it for content_disposition.
  call the method connection.ops.sql_flush with arguments: style, tables, seqs and allow_cascade, substitute the result for statements.
  if length of bits is not equal to integer 3,
  request_queue_size is integer 10.
  call the method Model._meta.get_field with an argument field_name, substitute it for field.
  for every dirpath, dirnames and filenames in the result,   for every dirname in list dirnames,
  return an string "[Included template had syntax error: %s]", where '%s' is replaced with e.
  if smtplib.SMTPException exception is caught,
  formated with values under the 'author_email' and 'author_name' keys of item dictionary.   otherwise if value under the "author_email" key of the item dictionary is true,
  define the method _new_gnu_trans with 3 arguments: self, localedir and use_null_fallback set to boolean True.
  if digest is false,
  call the method parser.parse with an argument tuple with an element string 'endif', substitute the result for nodelist.
  if not,
  call the method json.dumps with a dictionary generate with an expression as an argument, return value of the function e.get_json_data,
  if name starts with an string '.',
  substitute object_list for self.object_list.
  define the function get_templatetags_modules.
  compare is a lambda function with arguments self, a and b, return value is boolean true if a is lesser than b, otherwise is false.
  chunks is a tuple containing 6 initial tuples:
  if ImportError exception is caught,
  import module hmac.
  print opt_label to the standard output.
  define the method _media with an argument self.
  raise an TypeError exception with an argument string 'other_dict must be a mapping (dictionary-like) object.'.
  call the function curry with 2 arguments: _proxy_method and method set to bytes.decode, substitute the result for decode.
  substitute left for self.first.
  exception in Django 2.0." formated with num_loopvars and len_item, respectively, and RemovedInDjango20Warning.   try,
  define the method to_python with arguments self and value.
  substitute subject elements from p-th to i-th index for res.
  call the self._lock.writer method, with the result perform the following,
  if CONTEXT_SEPARATOR is contained in result,
  call the method self._assert_mutable.
  self._done is boolean True.
  from django.middleware.csrf import get_token into default name space.
  values is an dictionary created with result of the method val.resolve called with an argument context, for key,
  call the function blankout with 2 arguments: t.contents and 'X', write the result to out.
  if field.rel.to._meta.pk.rel is true,
  call self._delete method with argument fname.
  substitute '%s' in a string "Full migrations file '%s':" with writer.filename, append newline to it,
  while answer is false or answer is not contained in string "yn", perform the following,
  remove the old_file_name file.
  ' ' for 's', 'x' for 'S', 'x' for 'W', '!' for 'W' and None for 'Z'.   derive the class Choice from list base class.
  week_number is None.
  if base has an attribute 'declared_fields',
  DARK_PALETTE is a string 'dark'.
  substitute complain for __setitem__.
  yield nothing.
  for every fname in return value of the glob.glob1 function called with 2 arguments: self._dir and ,
  if extensions is false, substitute it for exts, otherwise exts is a list containing string 'js'.
  add model to excluded_models set.
  define the method needs_multipart_form with an argument self.
  return an instance of IfNode class, created with an argument conditions_nodelists.
  format_html_join, called with 3 arguments: empty string, string '<li>{0}</li>', tuple containing results of the function,   force_text with an argument e, for every e in self, return the result.   define the method as_text with an argument self.
  split str_number by '.', substitute the result for int_part and dec_part, respectively.
  define the method to_python with arguments self and value.
  decorator python_2_unicode_compatible,
  raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,
  substitute string 'ascii' for encoding.
  define the method __init__ wiht 5 arguments: self, META, input_data, upload_handlers and encoding set to None.
  define the method __delattr__ with 2 arguments self and name.
  get self.instance
  define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  try,
  if not,
  substitute cached_loaders for self._cached_loaders.
  RemovedInDjango19Warning and stacklevel set to integer 2.   import module logging.handlers.
  call the function socket.getfqdn, substitute the result for self._fqdn.
  define the method new_file with arguments: self, field_name, file_name, content_type, content_length, charset set to None,
  from django.utils import six into default name space.
  replace '%s' in the string "<BaseConverter: base%s (%s)>" with length of self.digits and self.digits, respectively, return the string.
  call the method self._create_alternatives with an argument msg, use it as an argument for the call to the self._create_attachments method, return the result.
  define the method __len__ with argument self.
  call the method validate with an argument value, from the base class of the FloatField class.
  from django.conf import settings into default name space.
  self._files is an instance of class MultiValueDict.   if not,
  if ValueError exception is caught,
  for every name in namelist,
  call the stream_or_string.read function, substitute the result for stream_or_string.
  call the function ungettext with 3 arguments: singular, plural and number, substitute the result for result.
  self.verbatim is boolean False.
  call the method expires.utcnow, subtract the result from expires, substitute the result for delta.
  append current_number to a list for current_number in self._unget_history, if current_number is equal to num_bytes,
  substitute date_check elements to uclass, lookup, field and unique_for, respectively.
  define the method __delitem__ with 2 arguments: self and key.
  call the function strip_tags with an argument value, return the result.
  call the method zbuf.getvalue, return the result.
  for every path in self.locale_paths,
  if base has an 'declared_fields' attribute,
  if value under the 'indent' key of the self.options dictionary is true,
  call the method connection.ops.prepare_sql_script with 2 arguments: return value of the function fp.read,
  called with the argument microseconds set to integer 0, on the result of the method value.time.   return list containing 2 elements: None and None.
  called with an argument view_func.   define the function _wrapped_view with 3 arguments: request, unpacked list args and unpacked dictionary kwargs.
  do nothing.
  call the function inner.copy, substitute the result for dig1, call the function outer.copy, substitute the result for dig2.
  derive class Command from base class BaseCommand.
  SINGLE_BRACE_START is a string '{'.
  define the method  main_help_text with arguments: self class instance and commands_only set to boolean False.
  define the method close with argument self.
  get attr attribute from the _module object, substitute it for value.
  define the function _long_to_bin with 2 arguments: x and hex_format_string.
  call the __init__ method from the base class of the EmailBackend class, with arguments: unpacked list args and unpacked dictionary kwargs.
  convert is a dictionary with 4 initial entries: list with 3 tuples: tuple with 2 elements: string '__gt__',
  if version is None,
  for every loader_name in settings.TEMPLATE_LOADERS,
  raise an NotImplementedError exception with an argument string 'subclasses of BaseArchive must provide a list() method'.
  raise an NotImplementedError exception with argument string "This backend doesn't support absolute paths.".
  return value,
  define lambda function that returns self.file.flush field, use it as an argument for property function, put the result in flush.
  call the method handler.startDocument.
  derive the class Command from the TemplateCommand base class.
  define the method close with an argument self.
  define the function resolve with arguments path and urlconf set to None.
  if data is empty.
  put every header in newheaders in a list, only if newheader converted to lowercase does not exist in existing_headers,
  return boolean True.
  with self.initLock,
  define the function dec with an argument func.
  from django.apps import apps into default name space.
  raise a ValueError exception with an argument "You can only use `unpack_ipv4` if `protocol` is set to 'both'".
  define method parse_starttag with self class instance and i as the arguments.
  substitute file_size for self.file.size.
  if not,
  closed is a property object with _get_closed as a getter method.
  define the function url with 2 arguments: parser and token.
  from django.apps import apps into default name space.
  get the value under the 'filename' key of the disposition dictionary, substitute it for file_name.
  call the method self._is_expired with argument f, invert the boolean result and return it.
  return an empty string.
  define the method create_table with arguments self, database and tablename.
  if opname is not contained in roots,
  requires_system_checks is boolean False.
  if IndexError, TypeError or ValueError exception is caught,
  'migrations. Unmigrated apps will also have their initial_data fixture reloaded. Does not achieve a "fresh install" state.'   define the add_arguments with arguments self and parser.
  if not,
  delete _active.value.
  call the signals.got_request_exception.send method with sender set to type of the self class instance and request set to request.
  call the method tag_re.finditer with an argument self.template_string, for every match in result,
  if encoding is true, substitute it for self._encoding, if not substitute settings.DEFAULT_CHARSET for self._encoding.
  doublecolon_start is an integer -1.
  decrement self.active_writers by integer 1,
  where '%s' is replaced with name.   args is an empty list.
  _mtimes is an empty dictionary.
  if self has an 'requires_model_validation' attribute, has_old_option is boolean True, otherwise it is boolean False.
  if not,
  import module time.
  call the method viewname.split, with an argument ':', substitute the result for parts.
  call the function is_aware with an argument date, if it evaluates to true,
  try,
  if data is not None, substitute data for initial_value, otherwise data_value is an empty string.
  from django.utils import six into default name space.
  import module sys.
  substitute value for self.cookies dictionary value under the key key.
  from decimal import Decimal, InvalidOperation, Context and ROUND_HALF_UP into default name space.
  define the method _setup with an argument self.
  define the method add_item_elements with 2 arguments, handler self and item.
  if not,
  msgmerge_options is an list with elements: strings '-q' and '--previous'.
  join the executor.loader.unmigrated_apps into a string separated by string ', ' append it to the end of a string "  Synchronize unmigrated apps: ",
  call the clean method wiht value argument from the base class of the SlugField class, return the result.
  if arg is true,
  called with an argument BlockNode.   define the method __repr__ with an argument self.
  substitute self.to_field_name, if exists, for key, if not substitute string 'pk' for key.
  from django.utils.translation import trans_real into default namespace.
  if old_method is false and new_method is true,
  if fk_name is true,
  if module os field name equals to string 'nt',
  substitute it for data.   if data is contained in seen_data,
  define the method __init__ with 2 arguments: self and attrs set to None.
  import module sys.
  define the method render with 2 arguments: self and context.
  call the force_str function with an argument: salt, if it exists, if not with a string '%s.%s', with '%s' replaced by,
  use its __name__ field as a key to get the value from self.tags, assign func to it.   return func.
  substitute first element of self.locale_paths for self.default_locale_path.
  define the function autodiscover_modules with 2 arguments unpacked list args and unpacked dictionary kwargs.
  define the method tag with an argument self.
  url_schemes is list of strings 'http', 'https' and 'ftp'.
  substitute _iteritems for items.
  call the method self.build_attrs with arguments attrs, name as name, substitute the result for final_attrs.
  finally perform,
  for every k in config, only if result of the function valid_ident called with an argument k evaluates to true.   try,
  import module os.
  substitute self.queryset for qs.
  return the value under the language_code key of the self._regex_dict dictionary.
  derive the class Storage from the object base class.
  call the method connection.constraint_checks_disabled, with the result perform,
  extend replaces list with migration.replaces,
  inplural is boolean True.
  call the function find_template_loader with an argument loader, append the result to cached_loaders.
  call the method connection.ops.end_transaction_sql, use the result as the argument for the call to the method self.style.SQL_KEYWORD,
  substitute cache_choices for self.cache_choices.
  from django.utils import six and timezone into default name space.
  define the method delete with self, key and version set to None as arguments.
  substitute next_item for sublist_item.
  define the method getvalue with an argument self.
  import module codecs.
  get the value under the key key of the self.cookies dictionary, substitute expires for 'expires' key of the returned dictionary.
  evaluate the method connection.introspection.table_name_converter with model._meta.db_table as argument, append it to tables.
  return an empty string and an empty string.
  decorator stringfilter,
  call the function self._truncate_html with 5 arguments: length, truncate, text, truncate_len and boolean False, return the result.
  substitute resolver_match for request.resolver_match.
  substitute cache_clear for wrapper.cache_clear.
  return boolean True.
  try,
  substitute _globs_ with an argument _locs_.
  define the method __setstate__ with 2 arguments: self and state.
  raise an CommandError exception with an argument string "errors happened while running xgettext on %s\n%s",
  if Exception, renamed to e, exception is caught,
  subclass is a class named Migration, sub classed from migrations.Migration base class, with fields dependencies set to an empty list,
  define the method __init__ with 4 arguments: self, dirpath, file_name and locale_dir.
  if not,
  import module django.
  define the method __iter__ with an argument self.
  return self.
  call the function _slugify with an argument value, return the result.
  define the function get_serializer with an argument format.
  do nothing.
  decorator function register.filter with an argument is_safe set to boolean False.
  call the os.path.abspath with argument self.file_path, substitute the result for self.file_path.
  derive the class RemovedInDjango19Warning from DeprecationWarning base class.
  define the funtion _generate_cache_header_key with key_prefix and request as arguments.
  substitute options for self.options.
  finally perform,
  import bpython.
  if not,
  for every filenam in locale_filenames,
  if last_row doesnt ends with row_ender,
  return EndToken.
  call the function force_str with an argument url, use the result as an argument for the call to the function unquote, substitute the result for url.
  return maybe.
  call the function clean_ipv6_address with arguments value and self.unpack_ipv4, return the result.
  define the method _convert_to_charset with 4 arguments: self, value, charset and mime_encode set to boolean False.
  return attrs.
  decorator register.filter.
  input_type is a string 'radio'.
  call the method connection.creation.sql_destroy_model with arguments: model, references_to_delete and style, extend with the result the list output.
  if not,
  convert role to uppercase.
  define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.
  from django.db import models into default name space.
  call the method apps.get_model with exclude as an argument, substitute it for model.
  return found.
  self.tags is an empty dictionary.
  try,
  substitute config dictionary value under '()' key for factory.
  streaming_content.setter decorator,
  if not,
  set attrvalue to None.
  call the method self.add_root_elements with an argument handler.
  if comment_notes is true,
  define the method render with 2 arguments: self and context.
  skip this loop iteration.
  exit program with code integer 0.
  if s is an instance of SafeData or EscapeData,
  if six.PY2 is true,
  kwargs is a dictionary with an entry: attribute 'label' of the object under the name key of the form.fields dictionary for 'label',
  define the method __new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs.
  decorator stringfilter,
  define method value_encode with self class instance and val as arguments.
  substitute self for result.parent.
  return self.source.
  "django.core.serializers.python" for "python", "django.core.serializers.json" for "json",   and "django.core.serializers.pyyaml" for "yaml".   _serializers is an empty dictionary.
  if label_suffix is None,
  if not,
  if string 'help' is contained in options,
  call the function write with an argument arg.
  if not,
  instantiate class Header with 3 arguments: value, string 'utf-8', maxlinelen set to sys.maxsize, call the encode method on it,
  substitute result for value under the RESULT key of the oldroot dictionary.
  if self._cached_loaders is false,
  substitute value under the self.token_type key of the TOKEN_MAPPING dictionary for token_name.
  if exception ValueError or TypeError is caught,
  otherwise if self.file_path file path doesnt exists,
   _cookie_allows_colon_in_names is a boolean True.
  define the method __init__ with arguments self, stream and boundary.
  substitute conditional_escape for escaper.
  new_method_proxy, __class__ is an property object created with previous result as an argument.   call the function new_method_proxy with an argument operator.eq, substitute the result for __eq__.
  append ch to result.
  if DatabaseError or IntegrityError, renamed to e, exceptions are caught,
  if OSError, renamed to e, exception is caught,
  if value is contained in self.empty_values,
  substitute stream for self._stream.
  define the method regex with an argument self.
  return an instance of DebugVariableNode, created with an argument contents.
  define the method eval with 2 arguments self and context.
  substitute messages for self.error_messages.
  get the value under the 'csrf_token' key of the context dictionary, if it exists substitute the result for csrf_token,
  if since is lesser or equal to integer 0,
  called with an argument kw, only if v is not None, substitute the result for kw.   substitute tzinfo for value under the 'tzinfo' key of the kw dictionary.
  if length of hextet is greater than integer 1,
  choice and i, substitute the result for w.   call the function format_html with 3 arguments: self.inner_html, choice_value set to result of the function force_text,
  call the method signals.got_request_exception.send with sender set to type of the self class instance and request set to request.
  if TypeError or ValueError exceptions are caught,
  import module re.
  if origin is true,
  from os.path import join, normcase, normpath, abspath, isabs, sep and dirname into default name space.
  define the method extend_nodelist with 4 arguments: self, nodelist, node and token.
  if attrs is true,
  if val is None,
  define the function code_changed.
  if template_dirs is false,
  call the method self.unclosed_block_tag with an argument list with an element endtag.
  call the function smart_text with argument related_att, use the result as an argument for the call to the self.xml.characters method.
  raise an CommandError with an argument string "Cannot find a migration matching '%s' from app '%s'.",
  substitute DEFAULT_MIN_NUM for min_num,
  return an empty string,
  if ValueError exception is caught,
  if dirname is true and dirname directory doesnt exists,
  if StopFutureHandlers exception is caught.
  return val.
  derive the class BlockNode from the Node base class.
  get the value under the 'app_label' key of the options dictionary, substitute it for self.app_label.
  define the method __setitem__ with 3 arguments: self, header and value.
  substitute windll.kernel32.UnlockFileEx for UnlockFileEx.
  remove the first element from self.backout, substitute the result for self.pointer.
  if maxsize equals integer 0,
  all_date_checks is an empty set.
  raise an CommandError with an argument string "More than one migration matches '%s' in app '%s'. Please be more specific.",
  substitute attrs and choices for self.attrs and self.choices
  from django.utils.safestring import mark_safe into default name space.
  call the method add_arguments from the base class of the class Command, with an argument parser.
  define the method __init__ with 4 arguments: self, name, old and new set to None.
  call the method self.write_message with argument message.
  if not,
  call the function datetime.now, on the result call the method strftime with an argument string '%B %d, %Y - %X', substitute the result for now.
  define the method render with 2 arguments: self and context.
  help set to a string 'The file extension(s) to examine (default: "html,txt", or "js" '   'if the domain is "djangojs"). Separate multiple extensions with commas, or use -e multiple times.' and action as a string 'append'.   call the method parser.add_argument with 6 arguments: string '--symlinks', string '-s', action as a string 'store_true',
  if not,
  call the method close on self.
  for every ch in input_iter,
  import module random.
  define the method add_fields with 2 arguments: self, form and index.
  substitute ClearableFileInput for widget.
  if email_messages is false,
  try,
  from django.template.base import Origin,  Template,  Context and TemplateDoesNotExist into default name space.
  FILE is a file".
  return self._encoding.
  from django.utils.safestring import mark_safe into default name space.
  from django.utils.regex_helper import normalize into default name space.
  define the method open with arguments self and mode set to None.
  call the method field._has_changed with 2 arguments: initial_value and data_value, if it evaluates to true,
  if format_module_path is None.
  call the method parser.add_argument with 3 arguments: string 'args', metavar set to self.label and nargs set to '+'.
  code is a string 'limit_value'
  substitute message.error_list for message.
  call the initialization method UnicodeDecodeError.__init__, with self instance of this class and *args as arguments.
  create list of first remaining elements of chunk, substitute it for emitting.
  unpack dictionary kwargs, map it through self.attrs and convert to dictionary, substitute the result for attrs.
  call the method threading.RLock, substitute the result for self.mutex.
  if settings.TIME_ZONE is an instance of six.string_types and pytz is not None,
  import module sys.
  call the method self._cache.set with key, value, self.get_backend_timeout(timeout) as arguments.
  for every app_name is app_names,
  substitute the result for ASCTIME_DATE.   define the function urlquote with 2 arguments: url and safe set to '/'.
  if custom_sql is empty,
  call the function datetime with an argument unpacked list kw, return the result.
  return the result.   define the method unclosed_block_tag with 2 arguments: self and parse_until.
  define the function urlize with 4 arguments: text, trim_url_limit set to None, nofollow set to boolean False,
  derive the WSGIHandler class from the base class base.BaseHandler.
  if not,
  if first and second elements of value are contained in self.empty_values,
  substitute rhs for number_value.
  define the method render with 2 arguments: self and context.
  substitute regex for self.regex.
  msgattrib_options is an list with elements: string '--no-obsolete'.
  define the function get_library with an argument library_name.
  from itertools import chain into default name space.
  is_required is boolean False.
  try,
  if value is None,
  from django.core.mail.utils import CachedDnsName and DNS_NAME into default name space.
  define the method __setitem__ with arguments self, name and val.
  self.models is an empty set.
  if html_message is True,
  define the method run_shell with an arguments self and shell set to None.
  call the function format_html with 2 arguments: string '<input{0} />', return value of the function flatatt, called with an argument,
  try,
  try,
  define the method __str__ with an argument self.
  take subject elements from p-th to i-th index, substitute it for s.
  get the next element of the self._producer iterable, substitute it for output.
  from django.utils import six into default name space.
  call parser.add_argument method with '--noinput', action set to string 'store_false', dest set to string 'interactive',
  if value is None,
  import module binascii.
  call the hashlib.md5 fuction with force_bytes(key) as argument.
  define the method _itervalues with an argument self.
  return result.
  call the method handler.addQuickElement with 2 arguments: string 'email' and value under the 'author_email' key of the item dictionary.
  if length of s is greater than integer 13,
  substitute self.count for top.
  call the method popitem from the base class of the class QueryDict, return the result.
  from django.db.migrations.executor import MigrationExecutor into default name space.
  if ssl.SSLError or smtplib.SMTPServerDisconnected exception occurred,
  define the method save_new with 3 arguments: self, form and commit set to boolean True.
  DEFAULT_MIN_NUM is an integer 0.
  unpack dictionary final_attrs, map the values through force_text function with an argument v and convert it to a dictionary, again,
  call the function CheckRegistry, substitute the result for registry.
  or with string 'models.' if it is not and field_type.   if extra_params is true,
  substitute the result for trail.   call the function escape with an argument url, substitute the result for url, call the function escape with an argument trimmed,
  call the method self.to_python with an argument value, strip the whitespaces from the result, substitute it for value.
  substitute func for _dec._decorated_function.   call the function wraps with an argument func, call the result with an argument _dec, return the result.
  if obj.pk is None,
  if source is an instance of inst class,
  call the method attachment.add_header with 3 arguments: string 'Content-Disposition', string 'attachment' and filename set to filename.
  if not,
  call the method instance of TerminalIPythonApp class, substitute the result for app.
  skip this loop iteration.
  for every cnt and digit in enumerated list int_part with reversed ordering of elements,
  call the method self.configurator.convert with an argument value, substitute the result for result.
  call settings.INSTALLED_APPS.
  try,
  call the object Decimal with string '1' as an argument, divide it by 10, bring the result to the power of self.decimal_places,
  call the method parser.compile_filter with an argument first element of bits, substitute the result for target.
  if decimal_pos is not None,
  call the method self.sequence.resolve with 2 arguments: context and boolean True, substitute the result for values.
  level is an integer 0.
  and list with results of the function force_str with an argument i, for every i in v, only if v is a list or a tuple,   otherwise second element is result of the function force_str with an argument v, for every k and v in query,   and doseq, return the result.   define the function cookie_date with an argument epoch_seconds set to None.
  append value under the key v of background dictionary to code_list.
  as long as current_chunk is not an empty string,
  name set to a string 'cache_key', max_length set to integer 255, unique set to boolean True and primary_key set to boolean True,   return value of the method models.TextField called with argument name set to a string 'value',   and return value of the method models.DateTimeField called with 2 arguments: name set to string 'expires' and db_index set to True.   table_output is an empty list.
  define the method render with 4 arguments: self, name, value and attrs set to None.
  from django.core import mail into default name space.
  from django.utils.functional import cached_property into default name space.
  replace all occurrences of '\\' with '\\\\' in value, replace all occurrences of '"' with '\\"' in the previous result,
  skip this loop iteration.
  if not,
  derive the class HttpResponseNotModified from the HttpResponse base class.
  convert per_page into an integer and substitute it for self.per_page.
  call the method input with an argument msg and store the result in confirm.
  if not,
  classmethod decorator,
  for every dict_ in self.dicts,
  tr,
  if six.PY3 is true,
  return an empty list.
  call the function plural_re.match with an argument t.contents, substitute the result for pluralmatch.
  get the value under the DELETION_FIELD_NAME key of the form.cleaned_data dictionary, if it exists return it, if not, return boolean False.
  from django.template import Lexer, TOKEN_TEXT, TOKEN_VAR, TOKEN_BLOCK, TOKEN_COMMENT and TRANSLATOR_COMMENT_MARK.
  call the the method __copy__ from the base class of the class Context, substitute the result for duplicate.
  define the method render with an argument self.
  called with an argument value, return the result.   call the function allow_lazy with 2 arguments: strip_spaces_between_tags, six.text_type, substitute the result for strip_spaces_between_tags.
  from django.utils.html import format_html, format_html_join and escape into default name space.
  cookies is a string '<could not parse>'.
  define the function custom_sql_for_model with 3 arguments: app_config, style and connection.
  if not,
  append a tuple containing 2 elements: content and mimetype, to the self.alternatives list.
  for every f in fields, if exclude is false, or if exclude is true and f is not contained in exclude, and only if f is not in ignored,
  call the function module_to_dict with an argument global_settings, substitute it for default_settings.
  add params to extra_params dictionary.
  logger.handlers is an empty list.
  call the salted_hmac with 3 arguments: salt, value and key, call the digest method on the result,
  for every role in termcolors.PALETTES list at the index termcolors.NOCOLOR_PALETTE,
  if propagate is not None,
  call the function urlunsplit with an argument tuple with 4 elements: scheme, netloc, path, query and fragment, substitute the result for url.
  loaders is an empty list.
  substitute boundary for self.boundary.
  substitute self.form.auto_id for auto_id.
  yield nothing.
  m2m_convert is an lambda function with an argument n, return value is the return value of the method field.rel.to._meta.pk.to_python,
  if language_code is not containsed in self._app_dict
  call the method self._populate.
  call the method cgi.parse_header with an argument content_disposition, assign the result to _ and params, respectively.
  define the method clean with arguments self and value.
  if app_label is not contained in executor.loader.migrated_apps,
  import module os.
  """(?P<ipv6>\[[a-fA-F0-9:]+\]) | (?P<fqdn>[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*) ):)?(?P<port>\d+)$""", re.X   DEFAULT_PORT is a string "8000".
  raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.
  call the method self._archive.close.
  i is the reminder of the division of i by j.
  substitute ngettext for ngettext_lazy.
  get the attribute '__module__' from the getattr, if it exists substitute it for m, if not, m is None.
  raise an ImproperlyConfigured exception with argument string 'Could not create directory for saving email messages: %s (%s)',
  replace every occurrence of whitespaces in the previous result for '_', substitute the result for s.   call the function re.sub with 3 arguments: raw string '(?u)[^-\w.]', an empty string and s, return the result.
  call the method self.add_root_elements with an argument handler.
  if ImportError exception is caught,
  if not,
  define function add_never_cache_headers, with response as an argument.
  call the method self._format_value with an argument value, use the result as an argument for the call to the function force_text,
  if call to the function os.path.exists with argument directory evaluates to boolean False,
  replace '%s' in string "Running pre-migrate handlers for application %s" with app_config.label, print it to the standard output.
  if not,
  call the function get_language, substitute the result for language_code.
  if size of c_ulong does not equals to size of c_void_p,
  call the executor.loader.detect_conflicts, substitute the result fr conflicts.
  raise an LookupError with an argument lang_code.
  substitute filter_expr and nodelist for self.filter_expr and self.nodelist, respectively.
  delete X.
  and result of the function flatatt, called with an argument final_attrs.   define the method value_from_datadict with 4 arguments: self, data, files and name.
  convert provided into a list and substitute it for provided.
  call the function digest twice, substitute the results for inner, outer, respectively.
  if language_code is not contained in self._regex_dict,
  substitute settings.DEFAULT_CHARSET for self._encoding.
  if length of value is not equal to integer 1,
  if second element of source is None,
  if offset is an instance of timedelta class,
  if TypeError exception is caught,
  from django.apps import apps.
  concatenate string '%0', width and string "d. %s", format the previous string with i incremented by 1 and line,
  split tag_re by self.template_string separator, for every bit in result,
  from django.db.models.fields import Field as ModelField.
  call the function import_library with an argument taglib_module, substitute the result for lib.
  BLOCK_TAG_START is a string '{%'.
  get the value under the template_name key of the self.cache_key dictionary, if it exists, substitute it for key,
  try
  define the method __init__ with 2 arguments: self and attrs set to None.
  call the method self.xml.startElement with arguments string 'object' and attrs.
  where '%s' is replaced with token.contents.   assign the string 'reversed' to is_reversed and bits last elements.
  from django.conf import settings into default name space.
  raise an NotImplementedError exception with an argument string 'subclasses of BaseArchive must provide an extract() method'.
  if self.connection is true,
  derive the class ExternalReferenceForbidden from the DefusedXmlException base class.
  and self.model._meta.pk.name.   substitute the value under the pk_key key of the self.data dictionary for pk.
  for every x in upload_handlers if x.chunk_size is true, append x.chunk_size to a list, substitute the result for possible_sizes.
  return scrip_name.decode method result called with UTF_8 as argument.
  if file path of src and dst files are the same, return boolean True, otherwise return boolean False.
  call the get_script_name function with environ as argument, substitute the result for script_name.
  from django.core.exceptions import SuspiciousFileOperation into default name space.
  try,
  with open file path in append mode,
  if value is contained in self.empty_values,
  __all__ is a tuple containing 2 initial elements: strigs 'WSGIServer' and 'WSGIRequestHandler'.
  call the encode function on the Header class instance, created with arguments val and encoding, substitute the result for val.
  try,
  code set to a string 'invalid_choice'.   return value.
  convert '\n' to a string, if it is contained in value or '\r' converted to an string is contained in value,
  if field is an instance of models.TimeField and filed.name attribute of obj is not None,
  self._is_rendered is boolean True.
  call avoid_wrapping function with name2 modulus count2 as argument, call the ugettext with ', ' as argument, add previous 2 results, increment variable result by it.
  return a dictionary generated with an expression, return value of the method e.as_data for f,
  call the function force_text with first element of choice as an argument, substitute the result for self.choice_value.
  flush zfile stream buffer.
  call the method handler.addQuickElement with 2 arguments: string 'link' and value under the 'link' key of the item dictionary.
  derive the class LocalTimezone from the tzinfo base class.
  choice_input_class is None.
  template_with_initial is a string '%(initial_text)s: %(initial)s %(clear_template)s<br />%(input_text)s: %(input)s'.
  define the method __init__ with 2 arguments self and file.
  if not, self.empty is boolean False.   crate a set containing of app_labels elements, substitute it for app_labels.
  from django.utils.encoding import smart_text into default name space.
  if d is an instance of real_datetime class,
  register.tag decorator,
  sum bottom and self.per_page, substitute the result for top.
  return the first element of the return value of the call to the self._det_image_dimensions method.
  assign values under the 'app_label' and 'migration_name' keys of the options dictionary to the app_label and migration_name, respectively.
  call the self.style.HTTP_NOT_MODIFIED with an argument msg, substitute it for msg.
  get the index of the first occurrence of tagname, substitute it for i.
  define the function _split_statements with an argument content.
  if key is contained in d,
  with the result renamed to fp, perform the following:   call the method fp.read, substitute the result for src_data.
  define the function normalize_newlines with an argument text.
  call the method get_accessor_name on the result, substitute all occurrences of '+' in the result with an empty string, return it.   define the method save_new with 3 arguments: self, form and commit set to boolean True.
  join return value of the function six.text_type called with an argument self.management_form and forms into a string,
  try,
  call the method self._archive_cls with an argument file, call the result with an argument file, substitute the result for self._archive.
  derive the class ModelChoiceIterator from object base class.
  append param to i-th element of result_args.
  substitute the result for token.   assign self.origin, source to token.source.
  from django.db import connection into default name space.
  from django.utils.timezone import utc and get_fixed_timezone into default name space.
  if html is true,
  candidate_pat formated with candidate_subs and re.UNICODE.   candidate_subs is dictionary created from elements in return value of the function urlquote called with argument v,
  return name.
  define the function _generator.
  and help set to 'Fixture labels.'.   call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',
  call the add_argument method on the parser object, with string 'migration_name', and help set to string 'Migration name to print the SQL for.' as arguments.
  if length of parts is greater than integer 1 and last element of parts is contained in self.compression_formats,
  call the force_bytes function with an argument settings.SECRET_KEY, substitute the result for key.
  substitute last element of bits for taglib.
  if django_po file path exists,
  return a string "<UTC>".
  return _wrapped_view.
  property decorator.
  join template_dirs elements into a string, separated by '|', use it as an argument for the call to the function force_bytes,
  from django.utils import timezone into default name space.
  while i is smaller than l,
  match regex time_re with value, substitute the result for match.
  substitute self.setting for context.autoescape.
  hex_format_string is a string "%%0%ix" formated with hlen multiplied with integer 2.
  call the method writer.as_string, write the result to file fh.
  call the method path.decode with an argument fs_encoding, return the result.
  substitute args for self.args.
  if offset is not None,
  if k equals a string 'fg',
  if ValidationError exception is caught,
  call the method form.save with an argument commit as commit, return the result.
  if func_name is false,
  compile the handle.read in mode 'exec' source is read from file pythonrc, execute the compiled script with imported_objects variables.
  return a class instance FilterNode, called with an arguments filter_expr and nodelist.
  if cleaned_line ends with ';' character,
  if self.cmd has an attribute 'missing_args_message' and next statement is not true: args is true or any arg doesnt start with '-' for arg in args,
  call the method self.indent with argument integer 1.
  both_before is a list containing 14 elements, all of them are instances of Tok class, created with 2 arguments, a string and a raw string.
  get the value under the key 'locale' of the options dictionary, substitute it for locale.
  alternatively, if six.PY3 is true check if message does not have an attribute 'message', if six.PY3 is false, check if message doesnt have an attribute 'code', perform the following,
  if self.count equals a integer 0 and self.allow_empty_first_page is false,
  third element of the result of the function sys.exc_info.   define the method readline with 3 arguments: self, unpacked list args and unpacked list kwargs.
  call the self.stdout.write method with string "    Processing %s.%s model\n" as argument, with all occurrences of '%s' replaced with,
  return obj.
  convert o to an string, return it.
  for every app_label in app_labels,
  if only_new is True,
  define the method _init_translation_catalog with an argument self.
  substitute the location for self.base_location.
  import module opera.
  substitute stream_or_string for stream.
  call the function get_language, substitute the result for self.old_language.
  substitute prefix for common_prefix.
  increment i by integer 1, substitute the result for i.
  convert elements of error into a list, substitute the first element for message.
  if verbosity is greater or equal to integer 2,
  if sublist_item is true,
  for every middleware_method in self._exception_middleware,
  BASE36_ALPHABET is a string '0123456789abcdefghijklmnopqrstuvwxyz'.
  return boolean True.
  if AttributeError exception is caught,
  call the method cls with 3 arguments: value under the 'filename' key of file_dict, value under the 'content' key of file_dict,
  otherwise substitute settings.USE_L10N for use_grouping.   if use_grouping is true substitute it for use_grouping, otherwise substitute force_grouping for use_grouping.
  return boolean False.
  for every line in return value of the method self.handle_inspection called with an argument options,
  call the self.get_backend_timeout with argument timeout, substitute it for the value under the key key of self._expire_info dictionary.
  update flat dictionary with d.
  static method,
  call the method __init__ from the base class of the class Truncator,
  add decimal_sep and dec_part, substitute the result for dec_part.
  import module re.
  call the method threading.RLock, substitute the result for self._lock.
  'in favor of "requires_system_checks".' and RemovedInDjango19Warning.   if has_old_option and has_new_option are both true,
  return boolean False.
  define the method __init__ with arguments self, name, sysid and pubid.
  if vale is None or an empty string,
  if not,
  if confirm is not equal to string 'yes' or string 'no',
  call the function import_module with an argument project_name.
  if not,
  only if app_configs is None ot model._meta.app_config is contained in app_configs, error is a list containing all the previous elements.   chain all errors elements into a list, return it.
  if number is greater than self.num_pages,
  raise an ValueError exception with an argument e.
  if ImportError, renamed to e, exception is caught,
  define the method merge with 2 arguments self and other.
  call the check function with argument app_config set to app_config, substitute the result for new_errors.
  for every root in settings.ALLOWED_INCLUDE_ROOTS,
  define the method getlist with 3 arguments: self, key and default set to None.
  if self.__stattag_text contains newline character,
  write shutdown_message to self.stdout file stream.
  call the method field.clean with an argument value, substitute the result for value.
  instantiate class Decimal with string '1.0' as argument, divide it by product of instance of Decimal class created with integer 10,
  substitute the result for value under the f.name key of data dictionary.   if not,
  skip this loop iteration,
  endless loop,
  increment self.active_readers by 1.
  call the function popen_wrapper with an argument args, assign the result to msgs, errors and status.
  context_extras is an empty dictionary.
  return iri.
  if any element of self.dicts is true, return boolean True, otherwise return boolean False.
  for every app_name and model_list in return value of manifest.items function,
  define the function add_library with 2 arguments: self and lib.
  call the method self.expression, substitute the result for retval.
  if os.path.exists function with argument name, evaluates to boolean True,
  with unpacked list value as an argument, return the pk field of the result.   if not,
  get the value under the name key of the data dictionary, return it, if the previous doesnt exists, return None.
  call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'table_name', nargs set to '*' character,
  self._files is an instance of class MultiValueDict.   define the method close with an argument self.
  get the identity of the self object, use it as a key to get the value of the memo dictionary, substitute result for it.
  call the function _is_shorthand_ip with an argument ip_str, if it evaluates to false,
  define the function call_command with 3 arguments: name, unpacked list args and unpacked dictionary options.
  substitute url_name for self.url_name.
  if self.connector equals conn_type,
  yield d.
  replace '%s' in the string 'handler%s' with view_type, use it as an name of the attribute to get from the self.urlconf_module,
  if value is an instance of datetime and settings.USE_TZ if use_tz is None else use_tz and call to the function is_naive,
  if self.match is None or call to the method self.match_re.search with an argument f, evaluated to true,
  call the method django.get_version append new line to it, write it to sys.stdout.
  substitute deprecation_warning for self.deprecation_warning.
  substitute len for _len.
  add ns_pattern and extra, substitute the result for ns_pattern.
  pyinotify.IN_MOVED_FROM, pyinotify.IN_MOVED_TO and pyinotify.IN_CREATE, store the result in mask.   for every path in return value of the call to the function gen_filenames with argument only_new set to boolean True,
  with unpacked list field_value as an argument, substitute the field pk of the result for obj_pk.   if not,
  if OSError, renamed to e, exception is caught,
  open filename file in write mode, with the file descriptor renamed to outfile, perform,
  call the method six.unichr with an argument c, return the result.
  self.plural is an lambda function with an argument n, which returns result of boolean expression n not equal to integer 1,
  substitute name for self.name.
  for every path in self.locale_paths,
  substitute deactivate for self.deactivate.
  call the method __init__ from the base class of the class MultipleHiddenInput, called with an argument attrs.
  call the method self._add_installed_apps_translations.
  define the method closed with self as the argument.
  substitute '%s' with ser_fmt, fixture_name and return value of the function humanize called with an argument fixture_dir.   call the method serializers.deserialize with 4 arguments: ser_fmt, fixture, using set to self.using,
  where '%s' is replaced with self.id.   define the method led with 3 arguments: self, left and parser.
  call the connection.creation.sql_for_pending_references method with refto, no_style() and pending_references as arguments,
  substitute s1 for s.
  call the s.serialize method with arguments queryset and unpacked dictionary options.
  raise an ValueError with an argument string "'%s.%s' has no field named '%s'.", where '%s' is replaced with,
  define the method is_silence with argument self.
  try,
  if lengths of val1 and val2 are not equal,
  substitute i for self.pointer.
  evaluate the boolean expression: locale is None and exclude is false and process_all is false,
   substitute whitelist for self.domain_whitelist.
  decorator function register.filter with an argument is_safe set to boolean True.
  if length of self._cache is greater or equal to self._max_entries,
  try,
  define the method save with 2 arguments: self and commit set to boolean True.
  define the method end_index with an argument self.
  if not,
  define the method validate with arguments self and value.
  default set to False, help containing string 'Show a list of all known migrations and which are applied' as arguments.   define the method handle with self instance of a class, list args, dictionary options as arguments.
  substitute filter_expression for self.filter_expression.
  raise an exception.
  call the method executor.loader.get_migration_by_prefix with arguments app_label, migration_name, substitute the result for migration.
  define the method addQuickElement with 4 arguments: self, name, contents set to None and attrs set to None.
  call the function fastcgi_help with an argument string "ERROR: Implementation must be one of prefork or thread.", return the result.
  self._post is an instance of QueryDict class, created with an empty string and mutable set to boolean True.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  derive the class NullBooleanField from the base class BooleanField class.
  from django.utils.translation import ugettext_lazy as _ and ungettext_lazy into default name space.
  define the method m with an argument self.
  value under the 'invalid_image' key of the self.error_messages dictionary and code set to a string 'invalid_image',   and third element of the return value of the function sys.exc_info.   if f has an attribute 'seek' and if f.seek is an callable object,
  substitute second element of bits for tag.
  called with an argument final_attrs, return the result.   property decorator,
  define the method handle_m2m_field with argument self, obj and field.
  define the method render with 2 arguments: self and context.
  call the function ugettext with '0 minutes' as argument, use the result as the argument for the call to the avoid_wrapping function, return the result.
  replace %s in string '    %s%s' with: line and character ',' if i is lesser than length of table_output decremented by one,
  if value is not contained in result,
  decorator function register.filter with an argument is_safe set to boolean False.
  import module shutil.
  define the method content with an argument self.
  define the method __str__ with an argument self.
  if any exception is caught,
  return None.
  is_usable is boolean True.
  call the method self.endElement with an argument name.
  call the function lazy_number with 5 arguments: ungettext, six.text_type, singular set to singular, plural set to plural,
  date_keys is a tuple with 2 arguments: strings 'updateddate' and 'pubdate'.
  define the method l with an argument self.
  increment Field.creation_counter by one.
  if response is None,
  get the value under the 'name' key of the disposition dictionary, strip it of whitespaces, substitute the result for field_name.
  from django.template.loader import BaseLoader into default name space.
  get the next element of the iterable pattern_iter, assign the result for ch2 and escaped, respectively.
  remove first 7 elements form template.
  request_repr is a string "unavailable".
  for dirname in dirs,
 define the function lazy with 2 arguments: func and unpacked list resultclasses.
  from django.forms.widgets import everything into default name space.
  compile regex from raw string '(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})$', substitute it for date_re.
  call the function six.reraise with 3 arguments: UnreadablePostError, UnreadablePostError instantiated with unpacked list e.args,
  _get_files is getter function for FILES attribute of this class.
  define the function make_naive with 2 arguments: value and timezone.
  call the method __init__ from the base class of the class InlineForeignKeyField, with 2 arguments unpacked list args,
  return decorator.
  if 'id' is contained in self.attrs,
  raise an NotImplementedError with an argument string 'Subclasses must implement this method.'.
  internal_use_only is a boolean False.
  break the loop execution.
  derive class ImageFile from the base class File.
  return message.
  define the function clear_url_caches.
  yield string 'from %s import models' % self.db_module as the result, where "%s" is replaced with result of the call to the function,
  if not,
  append ext to the end of it, substitute the resulting list for name.   substitute name for self._name.
  call the message_from_string function with an argument content, substitute the result for content.
  for i in self._ordering append to a list value under the first element of i key of the self.forms dictionary, return resulting list.
  return value.
  if message is not None,
  if not,
  return self._size.
  domains is a tuple with 2 elements: strings 'djangojs' and 'django'.
  if match is true,
  _assertRegex is a strnig "assertRegex".
  decorator function register.filter with an argument is_safe set to boolean True.
  define the method with reload with an argument self.
  remove the first occurrence of the filename value in the _error_files list.
  call the method qs.values_list with 2 arguments: string 'pk' and flat set to boolean True, put the results in a list,
  if ch is contained in string "iLmsu#",
  url is a property of the class, lambda function is getter attribute with an argument self and return value is the value under the 'Location' key of the self dictionary.
  substitute self.subject for value under the 'Subject' key of msg dictionary.
  raise an TypeError exception with an argument: result of the method illegal_formatting.group called with an argument,
  define the method __setitem__ with arguments self, name and val.
  multiply 10 to the power of 200, with 10 to the power of 200, negative, substitute the result for neg_inf.
  if not,
  if six.PY3 is true,
  define the function date_format with 3 arguments: value, format set to None and use_l10n set to None.
  return None.
  if self.input_type equals string 'hidden' and self has an attribute 'input_type', return boolean True, otherwise return boolean False.
  where '%s' is replaced with first element of bits.   call the method parser.compile_filter with second element of bits as an argument, substitute the result for filepath.
  raise an ValueError exception with an argument string "Base36 conversion input too large.".
  return a string "%s%02d%02d" formated with sign, floored result of the division of seconds by integer 3000,
  field_output is an list containing 2 elements: return value of the function qn called with an argument f.name,
  if OSError exception is caught,
  return data.
  substitute doc for func.__doc__.
  if TypeError exception is caught,
  sum absolute p with units an integer 1, substitute the result for prec.
  call the method field_node.getElementsByTagName with an argument string 'None', if it evaluates to true,
  set attr.name attribute of the _MovedItemst object to attr.
  cat for 'term'.   if value under the 'item_copyright' key of the item dictionary is not None,
  import module collections.
  return obj.
  return content.
  define the method T with an argument self.
  try,
  call the function datetime.date with 3 arguments: y, m and d all converted into a integers, substitute the result for date_value.
  get the value under the name key of the self.fields dictionary, substitute it for field.
  strip whitespaces from both sides of the value, substitute it for value.
  define the method add_arguments with 2 arguments self and parser.
   if m is true,
  call the method loader.detect_conflicts, substitute the result for conflicts.
  if self.object is not an instance of list type,
  relations is an empty dictionary.
  if not,
  self.new_objects is an empty list.
  call the method m.end, slice list rest from previous result as starting index to the end, substitute the result for rest.
  return boolean True.
  raise an EntitiesForbidden exception with arguments name, None, base, sysid, pubid and notation_name.
  subject is an string '%s: %s' formated with record.levelname and result of the method record.getMessage, respectively.
  call the function exec_ with an argument string """def reraise(tp, value, tb=None):    raise tp, value, tb""".
  return self._choices.
  assign the values to the callback, callback_args, callback_kwargs, respectively, from the resolver_match tuple.
  derive the class Command from the AppCommand base class.
  call the method handler.startElement with 2 arguments: string "item" and result of the method self.item_attributes with an argument item.
  derive the class SafeText from six.text_type and SafeData base classes.
  perform bitwise exclusive OR on 2 operands x and y, perform bitwise OR with 2 operands: previous result and result, substitute the result for result.
  call the function force_text with argument val, substitute it for val.
  if active has an attribute 'value',
  if language_code is not contained in self._namespace_dict,
  call the methof match.group with an argument "filter_name", substitute the result for filter_name.
  join app_dir and string 'sql' into a file path, use the result as an argument for the call to the function os.path.normpath,
  if value is contained in self.empty_values,
  substitute serialize for __bytes__.
  return _decorator.
  of the _DJANGO_DEPRECATED_LOCALES dictionary, RemovedInDjango19Warning and stacklevel set to integer 2.   call the function translation with an argument language, substitute the result for _active.value.
  substitute SafeBytes for SafeString.
  help is an empty string.
  from django.utils.encoding import force_st into default name space.
  define the method z with an argument self.
  substitute key for op.id.
  remove the first element from str_number.
  substitute self.html_name for name.
  call the method to_python with an argument value, from the base class of the IntegerField class, substitute the result for value.
  raise an TemplateSyntaxError exception with an argument string '"filter %s" is not permitted.  Use the "autoescape" tag instead.',
  if Exception exception is caught,
  import module opera.
  if tt.tm_isdst is greater than intger 0, return boolean True, otherwise return boolean False.
  self.file is a instance of a class TemporaryUploadedFile initialized with arguments: self.file_name, self.content_type, integer 0,
  from django.utils.encoding import force_text and force_str into default name space.
  cmp_fmt is None.
  error_msg is a string "Your TEMPLATE_DIRS setting is empty. Change it to point to at least one template directory.".
  get value under the BLOCK_CONTEXT_KEY key of context.render_context dictionary, substitute it for block_context.
  from django.utils import six into default name space.
  call the method operator.attrgetter with an argument _func_closure, substitute the result for get_method_closure.
  try,
  call the function activate with an argument self.language.
  join usage and self.help into a string, separated by 2 new line characters, return it.
  append rel_to to string 'ForeignKey(, append character "'" to it, substitute the result for field_type.
  call the method self._cache.disconnect_all.
  define the method load_template_source with 3 arguments: self, template_name and template_dirs set to None.
  if number is an integer and use_grouping is false and decimal_pos is false,
  parser._namedCycleNodes is an empty dictionary.
  raise an DTDForbidden exception with arguments name, sysid and pubid.
  call the method msg.attach with an argument attachment.
  if value equals self.empty_value or value is contained in self.empty_values,
  if StopIteration exception,
  if incomment is true,
  define the method __nonzero__ with argument self.
  if not,
  if '::' is not contained in ip_str and number of occurrences of ':' in ip_str is not equal to integer 7,
  call the function signed_value with an argument value, substitute the result for signed_value.
  define the method as_table with an argument self.
  and dictionary created by applying defaults mapping on the pattern.default_kwargs dictionary.   for every namespace and tuple containing: prefix and sub_pattern, in return value of the method pattern.namespace_dict.items,
  for every statements in sql_statements:
  zip elements of inner_result and inner_args into a list of tuples, for every i_item and i_args in the result,
  if number equals a integer 1 and self.allow_empty_first_page is true,
  if not,
  import module os.
  if _cached_modules equals to module_values,
  if Exception exception is caught,
  encoding.setter decorator,
  if data_set is not equal to initial_set, return boolean True, otherwise return boolean False.
  status_code is an integer 304.
  if result is not root,
  for every model in app_models,
  call the nethod self._isdst with an argument dt, if it evaluates to true,
  define the method __str__ with an argument self.
  define the function b with an argument s.
  input_type is a string 'password'.
  substitute FILE for TYPE.
  call the method code.interact with an argument local set to imported_objects.
  substitute parsed for self.parsed.
  if length of bits is not equalt to integer 2,
  default_validators is a list with an element validators.validate_email.
  perform the bitwise or operation on the next 6 operands pyinotify.IN_MODIFY pyinotify.IN_DELETE, pyinotify.IN_ATTRIB,
  for every x in argset,
  raise an TemplateSyntaxError exception with an argument string "'for' tag received an invalid argument: %s",
  value is None.
  define the function media with an argument request.
  define the method _iteritems with an argument self.
  called with an argument kw, only if v is not None, substitute the result for kw.   call the method datetime.time with an argument unpacked dictionary kw, return the result.
  if META_override is not None, or otherwise generated with the call to the function pformat with an argument request.META.   if Exception exception is caught,
  join results of format_html called with 2 arguments: format_string and tuple with an element args, into a string,
  substitute complain for append.
  substitute settings.LANGUAGES for the value under the 'LANGUAGES' key of the context_extras dictionary.
  return default.
  define the function _explode_shorthand_ip_string with an argument ip_str.
  return string '1'.
  substitute the result for args and kwargs, respectively.   call the function node_class with 3 arguments: takes_context, args and kwargs.
  append string "UNIQUE" to field_output.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  define the method __repr__ with argument self.
  substitute msg for body_msg.
  if AttributeError exception is caught,
  UnlockFileEx.argtypes is a list containing 5 elements: HANDLE, DWORD, DWORD, DWORD and LPOVERLAPPED.
  substitute producer for self._producer.
  if transfer_encoding equals string 'base64',
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  from django.utils.translation import TranslatorCommentWarning, trim_whitespace and LANGUAGE_SESSION_KEY into default name space.
  call the method self._stream.unget with an argument unused_char.
  from django.core.management.base import BaseCommand into default name space.
  define the method __init__ with arguments self, argument list args and dictionary of arguments kwargs.
  call the function self.coerce with an argument value, substitute it for value.
  define the method __init__ with 6 arguments: self, regex, urlconf_name, default_kwargs set to None, app_name set to None and namespace set to None.
  call the method sys.stderr.write with an argument string "fork #1 failed: (%d) %s\n", formated with e.errno and e.strerror.
  join top_dir and relative_dir into a file path, substitute it for target_dir.
  for every key in self.keyOrder,
  return boolean True.
  append tuple containing two entries: k and integer 1 to options, for every k in FASTCGI_OPTIONS.
  return last rollback elements of chunk.
  call the function get_git_changeset, store the result in git_changeset.
  define the method set with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
  return an empty dictionary.
  yield string "# This is an auto-generated Django model module." as the result.
  return initial_forms.
  if filter_func has an attribute "_decorated_function",
  from django.utils import six into default name space.
  outdict is an empty dictionary.
  contextlib.contextmanager decorator,
  and replace %r with self.obj, return the result.   define function python_2_unicode_compatible, with klass as an argument.
  substitute widgets for value under the 'widgets' key of attrs dictionary.
  try,
  try,
  call the Parser object with stream and self._boundary, for every item_type, meta_data and field_stream in return value,
  remove the elements from the 'name' and 'dictionary' keys of the options dictionary, substitute them for project_name and target, respectively.
  define the method create_token with 3 arguments: self, token_string and in_tag.
  create dictionary out of the unpacked dictionary options, using defaults.__dict__ as a mapping function, substitute the result for defaults.
  derive the class VerbatimNode from Node base class.
  define the method upload_handlers with arguments: self and upload_handlers.
  define the function from_current_timezone with an argument value.
  call the MigrationAutodetector function with arguments, return value of the call to the method executor.loader.project_state,
  if not,
  call the method self.importer with an argument used.
  if use_reloader is true,
  from django.apps import apps into default name space.
  append f.name to exclude.
  if ValueError exception is caught,
  join func.__module__ and func.__name__ into a string, separated by character '.', substitute it for self._func_path.
  for every app_config and model_list in app_list,
  substitute nodelist_loop for self.nodelist_loop.
  fields is an tuple containing instances of the class DateField, created with 3 arguments: input_formats set to input_date_formats,
  end_index is None.
  return the result.   derive the class HiddenInput from the Input base class.
  created with 2 arguments: required as boolean False and widget set to HiddenInput.   call the method __init__ from the base class of the class ManagementForm, called with 2 arguments: unpacked list args,
  call the self._delete method with argument fname.
  result of the function flatatt called with an argument final_attrs, return the result.   derive the class TextInput from the Input base class.
  if status is not equal to STATUS_OK,
  for every var in self._varlist.   if not,
  call the method self.max_expr.resolve with an argument context, substitute the result for max_value.
  reverse the order of colors elements,
  return boolean False.
  if close is True,
  if query_string is an instance of bytes,
  remove config dictionary element under 'disable_existing_loggers' key, if it exists substitute it for disable_existing, if not,
  call the function os.path.basename with argument name, substitute the result for name.
  call the function re.compile with 2 arguments: raw string '^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$',
  double the chunk size.
  reverse elements order of values.
  define the method _has_changed with arguments self, initial and data.
  locales is relative complement of set exclude in set locales.
  if site is contained in sites1,
  if HTMLParseError exception is caught,
  substitute base.__name__ for class_name.
  or if current_version is greater than (3,0), but smaller than (3,2,3), otherwise set use_workaround to boolean False.   substitute HTMLParseError from the module _html_parser for HTMLParseError.
  if not,
  if self._populated is false,
  import module datetime.
  derive the class IfEqualNode from Node base class.
  call the __init__ method of the base class of the class LocaleRegexURLResolver, with arguments:  None, urlconf_name, default_kwargs, app_name and namespace.
  define the method compile_filter_error with 3 arguments: self, token and e.
  define the method __init__ with 2 arguments: self and offset.
  from the base class of the class TypedChoiceField.   define the method _coerce with arguments self and value.
  use global variable _default.
  call the method self._update_errors with an argument e.
  for the call to the function upath, get the directory name of the resulting system path, join the result and string 'locale',   into a valid file path, substitute it for globalpath.   append settings.LOCALE_PATHS converted into a list to a list containing an element globalpath, return it.
  raise an exception parser.error_class with an argument string "Not expecting '%s' in this position in if tag.",
  'EmailField', 'FileField', 'ImageField', 'URLField', 'BooleanField', 'NullBooleanField', 'ChoiceField', 'MultipleChoiceField',   'ComboField', 'MultiValueField', 'FloatField', 'DecimalField', 'SplitDateTimeField', 'IPAddressField', 'GenericIPAddressField',   'FilePathField', 'SlugField', 'TypedChoiceField', 'TypedMultipleChoiceField'.   derive the class Field from the base class object.
  from django.core.management.base import CommandError into default name space.
  self.waiting_readers is integer 0.
  append name to self._changed_data list.
  if best_doublecolon_len is greater than integer 1,
  output_transaction is boolean True.
  import module os.
  replace '%s' in the string '%s %s' with response.status_code and response.reason_phrase, respectively, substitute it for status.
  with the argument view, store the result in the view.   return view
  kwargs_safe is a dictionary created for every k and v in result of the function six.iteritems called with an argument kwargs,
  if KeyError exception is caught,
  from django.template.base import Library, add_to_builtins, builtins, get_library, get_templatetags_modules, get_text_list,
  remove element under 'stream' key of kwargs dictionary, substitute the result for value under 'strm' key of kwargs dictionary.
  increment factor by one.
  for every finder in sys.meta_path,
  call the method sys.exc_info, substitute the result without the first element for e and tb.
  and unpacked dictionary kwargs, return the result.   return wrapper.
  from django.utils import six into default name space.
  derive the class Media from the object base class.
  if first element of e.args is not contained in not_found,
  derive the class RegexURLPattern with LocaleRegexProvider as base class.
  if not,
  split tmp at '/' character, substitute the last element of the result for filename.
  import module os.
  evaluate the method get_image_dimensions with self class instance and close set to close as the arguments, substitute the result for self._dimensions_cache.
  if self.allow_files is true and full_file is a file, or if self.allow_folders is true and full_file is an directory,
  decorator python_2_unicode_compatible.
  return yes.
  extend errors list with m for every m in e.error_list, only if m is not in errors.
  if self.verbosity is greater or equal than integer 1,
  if value under the 'microsecond' key of the kw dictionary is true,
  if not,
  substitute self.state for state.
  substitute value under 'unique_id' key of item dictionary for unique_id.
  from django.utils.encoding import force_str into default name space.
  substitute '%s' in string ' # %s' with line, write it to out file.
  define method add_arguments with class instance self and parser as the input arguments.
  call the function mark_for_escaping with an argument value, return the result.
  get the value under the key 'verbosity' of options dictionary, substitute it for verbosity.
  call the method d.as_tuple, substitute the result for tupl.
  import module warnings.
  call the function warnings.warn with 3 arguments: string '`MergeDict` is deprecated, use `dict.update()` instead.',
  substitute context.autoescape for old_setting.
  return arg.
  raise an TemplateSyntaxError exception with an argument string "'templatetag' statement takes one argument".
  base is an instance of Media class.
  if csrf_token equals string 'NOTPROVIDED',
  return the result.   call the function force_bytes with arguments value and self._charset, return the result.
  if exception ValueError or TypeError is raised,
  if self.instance.pk is not None,
  return boolean False.
  return inner.
  call the method self.get_queryset, substitute field pk under the result at the index index for pk_value.
  if OverflowError or ValueError exceptions are caught,
  call the method model_to_dict with 3 arguments: instance, opts.fields, opts.exclude and substitute the result for object_data.
  if new_conn_created is true,
  call the method field.rel.to._default_manager.db_manager with an argument db on the return value call the method  get_by_natural_key,
  define the method from_dict with argument cls and file_dict.
  if self.domain is not equal to string 'django' or string 'djangojs',
  derive class SingleZipReader for zipfile.ZipFile base class.
  __version__ is a string "1.6.1".
  for every value in initial call the function force_text with an argument value, add the results into a set, substitute the resulting set for initial_set.
  set cache to the value of the dictionary caches under the key settings.CACHE_MIDDLEWARE_ALIAS.
  and include_auto_created set to boolean True,   call the method connection.creation.sql_indexes_for_model with arguments model and style, extend output with the result.
  tt is an tuple with 9 elements: dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, result of the function dt.weekday,
  for every i and char in enumerated text,
  read data from buf, yield the result.
  if not,
  substitute the result for proxy.   if not,
  delete name attribute from self._wrapped object.
  append f.name to exclude.
  substitute attrs for self.attrs.
  where '%r' is replaced with options.   if option equals a string 'with',
  for every d in self.dicts,
  if child.nodeType equals to child.TEXT_NODE or child.nodeType equals to child.CDATA_SECTION_NODE,
  substitute label for app_label.
  call the method logging.getLogger, substitute the result for root.
  if f is an instance of ModelFiled, for every f in opts.virtual_fields, append f to a list, substitute the resulting list for sortable_virtual_fields.
  convert to k and v to strings for every k and v in return value of the response.item method, response_headers is a list containing all the above iteration elements.
  get translation_function attribute of the t object, call the result with 3 arguments: singular, plural and number, return the result.
  return string 'initial-%s' where '%s' is replaced with return value of the self.add_prefix method called with an argument field_name.
  call the method __init__ from the base class of the class Select, with an argument attrs.
  call the os.path.normpath with argument path, return the result.
  define the method display with an argument self.
  if value is true,
  if file_or_path has an attribute 'read',
  return an empty string.
  RemovedInDjango19Warning and stacklevel as integer 2.   try,
  return msg.
  define the method __init__ with 4 arguments: self, cyclevars, variable_name set to None and silent set to boolean False.
  from . import six into default name space.
  call the method pop from the base class of the class SortedDict, with 2 arguments k and unpacked list args,
  get value under the self.blocks dictionary under the name key, return the last element.
  define the method add_arguments with self class instance and parse as the arguments.
  'Nominates a database to print the SQL for. Defaults to the "default" database.' as the arguments.   define method handle_app_config with self class instance, app_config and dictionary options as arguments.
  in encoded, replace all the occurrences of unicode character "\\054" with ',' character and "\\073" with ';' characters.
  self.instance and unpacked dictionary kwargs.   if form._meta.fields is true,
  from importlib import import_module into default name space.
  call the method handler.addQuickElement with 2 arguments: string 'link' and value under the 'link' key of the item dictionary.
  if form._meta.widgets is true,
  define the method get_data with an argument self.
  substitute item_date for latest_date.
  if Exception exception is caught,
  call the method self.initial_form_count, return the result initial_forms.
  and unpacked dictionary kwargs.   call the __init__ method from the base class of the StreamingHttpResponse class, called with arguments: unpacked list args,
  call the function io.open with 3 arguments: potfile, string 'r' and encoding set to string 'utf-8' as arguments,
  call the middleware_method with request and e as the arguments, substitute the result for response.
  call the function quote with 2 arguments: result of the function force_str called with an argument url,
  "Use django.utils.timezone instead.", RemovedInDjango19Warning and stacklevel set to 2.   derive the class FixedOffset from the tzinfo base class.
  substitute inotify_code_changed for fn.
  if use_tls is None substitute settings.EMAIL_USE_TLS for self.username, if not substitute use_tls for self.use_tls.
  define the function _strip_once with an argument value.
  for every k and v in return value of the ret.items function,
  substitute val for self._encoding.
  _meth_self is a string "im_self".
  dest set to string 'load_initial_data', default=True and help as a string 'Tells Django not to load any initial data after database synchronization.'.   define the method handle with arguments self and unpacked dictionary options.
  extend comment_notes list with field_notes.
  substitute value under n key of dictionary d for d.
  if filename ends with extensions or filename is contained in extra_files,
  input_type is a string 'text'.
  call the method self.add_library with an argument lib.
  error_messages is an empty dictionary.   substitute error_message for value under the 'invalid' key of the error_messages dictionary.
  if data is an instance of datetime.datetime or datetime.time classes, and supports_microseconds field of self.field.widget is false,
  for every fixture_dir in fixture_dirs,
  call the function new_method_proxy with an argument operator.getitem, substitute the result for __getitem__.
  convert exclude elements to list, substitute it for construct_instance_exclude.
  if self.__dispatch is None.
  field_params is an instance of a class OrderedDict.
  help is a string "Prints the SQL statements for the named migration."
  substitute use_l10n for self.use_l10n.
  open writer.path file in write mode, with the file descriptor as fh, perform the following,
  call the method t.led with 2 arguments left and self.
  return self.
  append newline to plural_form_line, substitute the result for line.
  strip trailing '/' from the script_name string, remove first occurrence of '/' in path_info string, append second result to the first, separated with '/', assign the result to self.path.
  define the method __getstate__ with an argument self.
  define the function ssi with 2 arguments: parser and token.
  for every ch and escaped in input_iter,
  if 'incomplete' key of the f.error_messages doesnt exists, assign it the value under the 'incomplete' key of the self.error_messages dictionary.
  call the method context.update with an argument unpacked_vars.
  fork a child process, if the result equals integer 0,
  define the method pop with 2 arguments: self and idx set to negative integer 1.
  if not,
  and truncate set to string ' ...', return the result.   decorator function register.filter with an argument is_safe set to boolean True.
  encode is an lambda function with arguments k and v, return value is string '%s=%s', where '%s' is replaced with:
  define the function deconstructible with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  if self.argv, without the first element is contained in a tuple with 2 entries: a list containing a string '--help',
  call the method parser.parse with an argument tuple with 3 elements strings 'elif', 'else' and 'endif', substitute the result for nodelist.
  define the method content with an argument self.
  self.dicts is an list with element builtins.
  help is a string "Runs this project as a FastCGI application. Requires flup.".
  replace every occurrence of '\n' in p for '<br />',
  define the function templatize with 2 arguments: src and origin set to None.
 call the method os.chdir with an argument our_home_dir.
  substitute the resulting list for digits.   while length of digits is smaller than or equal to absolute value of exponent,
  for every f in self.instance._meta.fields,
  write a '[' to the self.stream file stream.
  substitute value under the 'verbosity' key of the options dictionary for verbosity.
  convert value, self.sep and return value of a method self.signature called with an argument value, concatenate them together, return the result.
  call the method self.autocomplete.
  define the function validate_integer with an argument value.
  define the method root_attributes with an argument self.
  if choice_label is an instance of tuple or list,
  from django.utils.encoding import force_bytes into default name space.
  define the function get_complete_version with in argument version, defaulting to None.
  and absolute value of p, substitute the result for exp.   try,
  if other is instance of EmailValidator and, self.domain_whitelist equals to other.domain_whitelist,
  finally perform,
  for every module in templatetags_modules,
  yield node as an return value of a generator.
  define the function decorator_from_middleware_with_args with an argument middleware_class.
  return s.
  if template starts with a string 'file://',
  from collections import OrderedDict into default name space.
  call the function curry with 2 arguments: _proxy_method and method set to six.text_type.encode, substitute the result for encode.
  substitute name for filter_func._filter_name.
  define the method pop with 3 arguments: self, k and unpacked list args.
  if not, substitute used_name for guessed_filename.   if not,
  call the method self.has_leading_dir with an argument namelist, substitute the result for leading.
  interactive set to boolean False, database set to db, reset_sequences set to boolean False, inhibit_post_migrate set to boolean True.   if self.verbosity is greater or equal to integer 1,
  append self.pointer to self.backout.
  substitute callback.func for callback.
  derive the class RssFeed from the SyndicationFeed base class.
  call the self._lib.Client with argument self._servers, substitute the result for self._client.
  return num_sent.
  return value.
  call the method self.open()
  call the function import_module with an argument path, substitute it for package.
  define the method __init__ with arguments self and regex.
  if opts is true,
  call the __init__ method of the base class of the class FilePathField, with arguments: choices set to an empty tuple,4
  if TypeError, renamed to te, exception is caught,
  data is an empty dictionary.
  assign the return value of the function fn to change.
  call the method httpd.set_app with an argument wsgi_handler.
  if KeyError, renamed to key, exception is caught,
  define the method convert with 2 arguments: self and value.
  derive the class TemplateIfParser from IfParser base class.
  new_args is an empty list.
  and value under the unique_for key of form.cleaned_data dictionary is not None,   if lookup equals a string 'date',
  call the method parser.add_argument with 6 arguments: string '--extension', string '-e', dest set to string 'extensions',
  from django.forms.widgets import TextInput, NumberInput, EmailInput, URLInput, HiddenInput, MultipleHiddenInput, ClearableFileInput,
  call logging.getLogger method with string 'django.request' as argument, store the result in logger.
  property decorator, to be called by property built-in function.
  substitute next for advance_iterator.
  sets the role attribute of the style object to the value of the call to the termcolors.make_style function with dictionary format as an argument.
  call the method token.split_contents, substitute the result for bits.
  define the method args_check with 3 arguments: name, func and provided.
  add obj.object.__class__ to self.models set.
  remove the entry under the 'stream' key of the self.json_kwargs dictionary.
  and obj.__class__.__name__, first element of obj._constructor_args and second element of obj._constructor_args.   klass.__new__ is a static method of the function __new__.
  import module pickle.
  delete attr.
  define the function cycle with 2 arguments: parser and token.
  for every obj in queryset,
  return a string '%s-%s-%s GMT', formated with: first 7 elements of rfcdate, elements of rfcdate from 8-th to the 11-th index,
  substitute sysid for self.sysid.
  define the method validate_host with 2 arguments: host and allowed_hosts.
  define the function format with 2 arguments self and formatstr.
  yield subnode.
  references_to_delete is an empty dictionary.
  if IndexError exception is caught,
  use_natural_foreign_keys set to use_natural_foreign_keys, use_natural_primary_keys set to use_natural_primary_keys,   and stream set to stream, if the stream is true, otherwise stream set to self.stdout.   finally perform,
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  call the function import_module with argument self.urlconf_name, substitute the result for self._urlconf_module.
  call the method get_language, substitute the result for language_code.
  call the function ugettext with an argument string "Please correct the duplicate values below.", return the result.
  call the function self.tag with 2 arguments: function_name and compile_func.
  call the function mark_safe with an arguments: for every n in nodelist results of the function force_text called with an argument n,  joined in a string, return the result.
  otherwise if content is not an instance of Message class,
  opts.fields is None.
  for every value in result of the method self.prepare_value called with an argument initial.   data_set is set created out of return values of the function force_text called with an argument value,
  convert self.file to a string and append '.c' string to it, substitute the result for thefile.
  return nothing.
  call the function force_text with an argument text, substitute the result for text.
  if value under the 'enclosure' key of the item dictionary is not None,
  derive the class Command from the BaseCommand base class.
  all the method command.create_parser with arguments: empty and name, substitute the result for parser.
  join the resulting sequence in a string with comma as separator, assign the string to cc.   substitute response dictionary value under the key 'Cache-Control' for cc.
  define the __init__ method with 3 arguments: self, unpacked list args and unpacked dictionary **kwargs.
  define the method __init__, with 3 arguments: self, stream_or_string and unpacked dictionary options.
  substitute file.mode for self.mode.
  if out has an 'isatty' argument and return value of the function out.isatty is true,
  substitute _make_key for make_key.
  define the method __new__ with 4 arguments: mcs, name, bases and attrs.
  raise an KeyError with an argument string 'Your dictionary lacks key \'%s\'. Please provide it, because it is required to '
  from django.template.base import Lexer, Parser, tag_re, NodeList, VariableNode and TemplateSyntaxError into default name space.
  if settings.DEBUG is true and value of the request.META dictionary under the 'REMOTE_ADDR' key is contained in settings.INTERNAL_IPS,
  _win is a tuple containing 1 initial boolean: True is sys.platform equals to string "win32", False otherwise.
  if self.verbosity is greater or equal to integer 1,
  message is a string 'make sure the name begins with a letter or underscore'.
  if primary_keys is true,
  if name equals a string 'content-disposition',
  property decorator,
  call the method _trans.gettext_noop with an argument message.
  define the function pluralize with 2 arguments value and arg set to character 's'.
  if neg is true,
  use global variable _default.
  call the method parser.delete_first_token.
  define the method invalid_block_tag with 4 arguments: self, token, command and parse_until as None.
  define the function to_bytes with arguments val and encoding.
  call the method self.next_token, substitute the result for token.
  if string '()' is contained in config,
  if not,
  and ignored as an empty tuple, convert the result into a tuple and substitute it for extensions.   extra_files is an empty list.
  define the function lru_cache with 2 arguments maxsize set to integer 100 and typed set to boolean False.
  update defaults dictionary with kwargs.
  try,
  call the function mark_safe with an argument, elements of bits joined into a string, return the result.
  substitute value under the 'suffix' key of dictionary d, substitute it for suffix.
  if reversed is True substitute difference of d and now for delta, if not substitute the difference of now and d for delta.
  append None to bits.
  return nothing.
  derive the class Debug from base class CheckMessage.
  and unpacked dictionary kwargs, substitute the result for form.   if self.save_as_new is true,
  if self.verbosity is greater or equal to integer 2.
  call the method parser.expression with an argument bp, substitute the result for self.first.
  decorator total_ordering,
  define the method render with 4 arguments: self, name, value and attrs set to None.
  call the method self.stdout.write with an argument string "Installing %s fixture '%s' from %s.",
  call the function include_is_allowed with an argument filepath, if it evaluates to false,
  define the function advance_iterator with an argument it.
  register is an instance of Library class.
  define the method __init__ with 3 arguments: self, producer and length set to None.
  raise an ContextPopException.
  call the function register_serializer with 3 arguments: format, value under the format key of the settings.SERIALIZATION_MODULES dictionary and serializers.
  if not,
  do nothing.
  with the name of the module callback is in and the view_name, respectively, use it as the argument for the ValueError exception raise.   if response has an attribute named 'render' and response.render is a callable function,
  from threading import local into default name space.
  perform bitwise OR with 2 operands: previous result and result, substitute the result for result.   if result is equal to integer 0, return boolean True, otherwise return boolean False.
  raise an exception self.error_class with an argument string ""Unused '%s' at end of if expression",
  if not,
  substitute settings.TIME_FORMAT for arg.
  call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
  from django.utils.encoding import force_text into default name space.
  substitute cache.get for cache_get.
  call the new_file method form the base class from the MemoryFileUploadHandler class with arguments: unpacked list args and unpacked list kwargs.
  for v in return value of the function match.groups, convert v into an integer and append i to a list,
  import module cgi.
  return None.
  call the function _explode_shorthand_ip_string with an argument ip_str, substitute the result for ip_str.
  if 'content_type' key doesnt exist in kwargs, set its value to 'application/json'.
  from django.utils.translation import ugettext and ungettext into default name space.
  return name, ser_fmt and cmp_fmt.
  call the resolver.resolve_error_handler with integer 500 as the argument, assign the resulting tuple elements to the callback,
  call the function get_ns_resolver.cache_clear.
  convert host to lowercase.
  if attrs is not None substitute it for self.attrs, or if not self.attrs is an empty dictionary.
  call the function from_current_timezone with an argument, return the result.
  call the connection.introspection.table_names with cursor as argument, store the result in tables.
  return valid.
  if not,
  for every v in value, return the list of results.   call the method prepare_value the base class of the class ModelMultipleChoiceField, with an argument value, return the result.
  do nothing.
  call the method self.configurator.convert with an argument value.
  define the method process_default with self class instance and event as arguments.
  if data is true, substitute it for self.files, otherwise self.files is an empty dictionary.
  substitute value for value under name key of msg dictionary.
  read data from buf, yield the result.
  slice root starting from the prefix_length index to the end, substitute it for path_rest.
  if callback is an callable object,
  tried is an empty list.
  result is an empty list, upto is integer 0.
  if self.field.label_suffix is not None, substitute self.field.label_suffix for label_suffix,
  call the function number_format with 2 arguments: value and use_l10 as use_l10n, return the result.
  serialize data to JSON format with cls set to encoder, substitute it for data.
  if nofollow is true nofollow_attr is a string ' rel="nofollow"', otherwise nofollow_attr is an empty string.
  call the method timezone.is_aware with an argument expires, if it evaluates to true,
  substitute save_as_new for self.save_as_new.
  if AttributeError exception is caught,
  call the BaseConverter function with BASE64_ALPHABET and sign set to '$' as arguments, store the result in base64.
  from __future__ import absolute_import into default name space.
  substitute the result for new_permission.   call the function os.chmod wiht arguments filename and new_permissions.
  call the method parser.add_library with an argument lib.
  call the function re.compile with an argument string '(%s.*?%s|%s.*?%s|%s.*?%s)', substitute all occurrences of '%s' with,
  _assertCountEqual is a strnig "assertCountEqual".
  substitute registry.register for register.
  return nothing.
  call the self.get method with key and version set to version as arguments, substitute the result for value.
  substitute empty string, word an empty string for lead, middle and trail, respectively.
  substitute jython_reloader for reloader.
  get the value under the 'ignore_patterns' key of the options dictionary, substitute it for ignore_patterns.
  substitute substitute TextInput for widget.
  get the value under self._pk_field.name key of form._meta.widgets dictionary, if it exists substitute it for widget, if not,
  define the function linenumbers with 2 arguments value and autoescape set to None.
  raise an TemplateSyntaxError exception with an argument string "No named cycles in template. '%s' is not defined",
  call the function token_kwargs with 3 arguments: remaining_bits, parser and support_legacy set to boolean True, substitute the result for extra_context.
  found is boolean False.
  remove the value under the 'using' key from the options dictionary, assign it to the db, if the entry doesnt exists,
  in string '%s=%s' replace '%s' with k and return value of the function strip_prefix with an argument printable representation of v,
  call the __init__ method from the base class of the HttpResponse class, with the arguments: unpacked list args and unpacked dictionary kwargs.
  import module sys.
  for every migration in merge_migrations.   try,
  from __future__ import unicode_literals into default name space.
  if empty_label is not None,
  if options is true,
  call the method apps.get_app_config with an argument app_label, for every app_label in app_labels, append the results to a list,
  extract the value under the key 'database' from the options dictionary, use the value for indexing connections list, substitute the result for connection.
  skip this loop execution.
  decorator function register.filter with an argument is_safe set to boolean False.
  with lock,
  if attrs is not None,
  define the method _resolve with an argument self.
  evaluate the method self._cache.incr with key and negative delta as arguments, return the result.
  for every potfile in potfiles,
  derive the class SerializationError from the Exception base class.
  value is an instance of ConvertingDict class, created with an argument value.
  define the decode method with self class instance and s as arguments.
  concatenate first site elements of s, syear and elements of s from the site incremented by integer 4 index, substitute the result for s.
  convert initial into boolean and substitute it for initial.
  substitute s without the first element for s.
  call the method node.getElementsByTagName with the argument string 'natural', substitute the result for keys.
  substitute first element of the result for param and value.   if param is not in params and varkw is None,
  substitute silent for self.silent.
  import module time.
  dependencies set to new_operations and replaces set to replaces.   call the function subclass with 2 arguments string "0001_squashed_%s", where '%s' is replaced with migration.name and app_label,
  if language_code is not contained in self._regex_dict,
  raise an AttributeError exception with an argument string "You cannot set the upload handlers after the upload has been processed.".
  raise an exception,
  output is an empty list.
  define the method loaddata with 2 arguments self and fixture_labels.
  substitute func for self.func.
  python_2_unicode_compatible decorator,
  call the function self.path with argument name, use the result as an argument for the call to the function os.path.getmtime,
  return an instance of ForNode class, created with 5 arguments: loopvars, sequence, is_reversed, nodelist_loop and nodelist_empty.
  substitute flo for self.flo.
  validate_comma_separated_integer_list is a instance of a RegexValidator class, created with 3 arguments: comma_separated_int_list_re,
  try,
  if ValueError exception is caught,
  from __future__ import unicode_literals into default name space.
  define the method __init__ with an argument self.
  if not,
  get value under key key of self dictionary, if it doesnt exists return default, substitute the result for value.
  define initialization method __init__ with argument self.
  return an instance of OrderedDict class, created with an argument fields.
  remove 'end' key from the kwargs dictionary, if it exists substitute it for end, if not end is None.
  raise an TemplateSyntaxError exception with an argument string "expected another tag, found end of string: %s",
  define the method handle_noargs with 2 arguments: self and unpacked dictionary options.
  if not,
  call the method base64.urlsafe_b64encode with an argument s, on the result call the strip function with '=' as the argument, return the result.
  define the method render with 2 arguments: self and context.
  substitute self.default_locale_path for locale_dir.
  call the method parser.delete_first_token.
  if end is not a '>' or '/>' character,
  return result.
  import module warnings.
  string created by concatenating context, CONTEXT_SEPARATOR and plural and number.   call the function ungettext with unpacked dictionary msgs_with_ctxt, substitute the result for result.
  substitute model._meta for opts.
  call the function re.compile with raw string '&(?!(\w+|#\d+);)', substitute the result for unencoded_ampersands_re.
  call the safe_join function with arguments self.location and name, substitute it for path.
  define the method __eq__ with an argument self.
  return self.name.
  if self.is_bound is true,
  define the function regroup with 2 arguments: parser and token.
  raise an TemplateDoesNotExist exception with an argument name.
  substitute queryset for self._queryset.
  convert to an integer first element of the value under the 'content-length' key of the meta_data dictionary, substitute it for content_length.
  take the first i elements of string p, strip the whitespaces from the both sides, convert it to lowercase and apply on it the method,
  import module datetime.
  for every app_name in app_names.
  TRAILING_PUNCTUATION is a list with 7 elements: '.', ',', ':', ';', '.)', '"' and '\''.
  and fk.rel.to is not contained in result of the call to the method parent_model._meta.get_parent_list.   raise an ValueError with an argument string "fk_name '%s' is not a ForeignKey to '%s.%'.", where '%s' is replaced with,
  pop_context is boolean False.
  call the function _ with an argument string 'a.m.', return the result.
  self.dict is an instance of OrderedDict class, created with arguments: tuples with 2 argument x and None, for every x in iterables,
  return None.
  if fp is None,
  define the method _get_queryset with an argument self.
  label set to return value of the function _ called with an string 'Order' and required as boolean False.   if self.can_delete is true,
  join elements of pieces into a string, return it.
  call the __bool__ method with argument self, on the return value of the type function with argument self, return the result.
  get the type of self object, call the __bool__ method on the result with an argument self, return the result.
  import module re.
  attrs is a dictionary with model for 'model'.
  substitute value for url.
  return an instance of LoaderOrigin class, created with 4 arguments: display_name, loader, name and dirs.
  call the method m.groups, substitute the first element of the result for idx.
  django.core.exceptions import ImproperlyConfigured, ValidationError, NON_FIELD_ERRORS and FieldError into default namespace.
  import module time.
  substitute value for value under the key key of safe_data dictionary.
  define the method read with self class instance and size set to None as arguments.
  raise an ValueError exception with an argument string 'Unable to set target handler %r: %s',
  get the unicode representation of result of the method match.group called with an integer 1, format with in a string "\\u%04x",
  otherwise add boolean False, for every candidate in the result perform following,   if candidate is false,
  and unpacked dictionary kwargs.   for every v in self.value call the function force_text with an argument v, add the result to a set,
  replace '%s' in string "%s; charset=%s" with settings.DEFAULT_CONTENT_TYPE and self._charset, substitute it for content_type.
  convert value under the 'HTTP_CONTENT_LENGTH' key of the META dictionary to an integer of base of value under the 'CONTENT_LENGTH' key of META dictionary, if the key doesnt exists use 0 as the base, substitute the result for content_length.
  join first element of django.__path__, string 'conf' and subdir into a valid file path, return it.
  sum m and class Media created with definition, return the result.
  from django.conf import settings into default namespace.
  if ValidationError, renamed to e, is caught,
  do nothing.
  from decimal import Decimal into default name space.
  if unpack_ipv4 is true,
  raise an ValueError exception with string "Key '%s' not found" as argument, substitute '%s' for key.
  find first index of occurrence of character '-' in language, substitute it for p.
  if in_tag is true and token_string starts with BLOCK_TAG_START.
  define the method listdir with arguments self and path.
  substitute return value of function no_style for style.
  call the method handler.receive_data_chunk with 2 arguments: chunk and i-th element of counters, substitute the result for chunk.
  return nothing.
  docs_version is a string 'dev'.
  assign the bits elements to tag, this_value_expr, max_value_expr and max_width, respectively.
  call the method re_escaped.sub with 2 arguments: raw string '\1' and piece, append the result to pieces.
  call the function reloader with wrapped_main_func, args and kwargs as arguments.
  for every func and unused in filter_expr.filters,
  call the method copy.copy, substitute the result for obj.
  try,
  if length of bits equals integer 4,
  call the method parser.compile_filter with an argument, third element of bits, substitute the result for val2.
  define the function random with an argument value.
  return patterns.
  break from the loop execution.
  raise an ValidationError exception with 2 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,
  otherwise if count is greater than integer 1,
  substitute value under the key key of the self.COOKIES dictionary, substitute it for cookie_value.
  if block_name is contained in parser.__loaded_blocks,
  define the method _has_expired with self and key as arguments.
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  call the self._lock.writer method, with the result perform the following,
  return new_class.
  call the method self.find_template_cache.clear.
  try,
  from django.utils.translation import get_language into default name space.
  value is an instance of ConvertingTuple class, created with an argument value.
  define the function include_is_allowed with an argument filepath.
  from django.apps import apps into default name space.
  substitute serialize_headers for __str__.
  initial set to None, error_class set to ErrorList, label_suffix set to None, empty_permitted set to boolean False.   if data is not None or files is not None, self.is_bound is boolean True, otherwise it is boolean False.
  if self equals to other return boolean False, otherwise return boolean True.
  call the method self.invalid_block_tag with 3 arguments: token, command and parse_until.
  return boolean True.
  split into two parts token.contents by None, substitute the parts for _ and rest, respectively.
  do nothing.
  signal is a string 'signals'
  for every i and line in enumerated iterable lines,
  write string "  the new migration will be used for new installs. Once you are sure" to self.stdout.
  call the function allow_lazy with 2 arguments: linebreaks, six.text_type, substitute the result for linebreaks.
  return an instance of SafeText, created with an argument t.
  decorator stringfilter,
  define function _generate_cache_key, with request, method, headerlist and key_prefix as arguments.
  string 'DECIMAL_SEPARATOR', lang and use_l10n set to use_l10n, decimal_pos, result of the function get_format called with 3 arguments:   string 'NUMBER_GROUPING', lang and use_l10n as use_l10n, result of the function get_format called with an argument:   string 'THOUSAND_SEPARATOR', lang and use_l10n as use_l10n and force_grouping as force_grouping, return the result.   define the function localize with 2 arguments value and use_l10n set to None.
  call the method self._populate.
  return an instance of a dummy class.
  try,
  call the function quote_plus with 2 arguments: result of the function force_str called with an argument url,
  if value is true,
  return result.
  create a instance of a class BadSerializerModule from the object base class, with elements Deserializer set to bad_serializer and Serializer set to bad_serializer.
  return self._upload_handlers.
  call the function get_default_timezone, substitute the result for self.timezone.
  return an empty string.
  and unpacked dictionary kwargs.   substitute max_length and min_length for self.max_length for self.min_length.
  RemovedInDjango19Warning and stacklevel set to integer 2.   if app_config.models_module is None,
  return the result.   define the method render_option with 4 arguments: self, selected_choices, option_value and option_label.
  decorator stringfilter,
  call the method self._reset_dicts with an argument dict_.
  call the self.path function with argument path, substitute it for path.
  if NotImplementedError exception is caught,
  call the method parser.add_argument with 2 arguments: string 'name' and help set to string 'Name of the application or project.'.
  skip this loop iteration.
  return res.
  write string "Cleaning up temporary files.\n" to self.stdout stream.
  define the method validate with arguments self and value.
  substitute self.parent_instance.pk for orig.
  use the result as an argument for the call to the self.stdout.write method.   if run_syncdb and executor.loader.unmigrated_apps exist,
  call the method self._close_files.
  if request has an attribute named 'urlconf',
  return an empty list.
  substitute self._parser for parser.
  call the function escapejs with an argument value, return the result.
  if field_type equals a string 'DecimalField',
  where '%s' is replaced with subject.   if i-th element of subject is '"' character or "'" character,
  call the method rlcompleter.Completer with an argument imported_objects, use the complete field of the result as an argument for the call to the method readline.set_completer.
  convert values into a list, substitute it for value.
  if field_type is a tuple,
  define the method handle_label with 3 arguments: self, label and unpacked dictionary options.
  get the value under the index key of the hextets dictionary, remove the leading '0' characters,
  declared_fields is an instance of OrderedDict class.
  if inplural is true,
  call the __init__ method from the base class of the SimpleUploadedFile class with 7 arguments: BytesIO(content), None, name,
  return __wrapper__.
  for every field_name and field_value in return value of the function six.iteritems called with value under the 'fields' key of dictionary d,
  try,
  with new_path and self.style.NOTICE, respectively, write it to self.stderr stream.   if self.paths_to_remove is true,
  extend collect list with settings.TEMPLATE_CONTEXT_PROCESSORS.
  call the function warnings.warn with 2 arguments: string "Need {0} values to unpack in for loop; got {1}. This will raise an
  call the method self.validate_key with argument key.
  self._files is an instance of class MultiValueDict.   return nothing.
  if not,
  call the method field.rel.to._default_manager.db_manager with an argument self.db, on the result call the method get_by_natural_key,
  evaluate the field.get_attname, use the result as the name of the obj attribute to get, substitute it for related_att.
  convert lang_string to lowercase, split by the result string accept_language_re, substitute the result for pieces.
  define the method __init__ with an argument self.
  call the function do_ntranslate with 3 arguments: singular, plural, number and string 'ngettext', return the result.
  _iterkeys is a string "iterkeys".
  substitute CheckboxFieldRenderer for renderer.
  call the function meta with 3 arguments: name, base and d.
  convert num to an integer, substitute the result for length.
  if id_ is true,
  otherwise if disable_existing is true,
  skip this loop execution.
  derive the class TemplateSyntaxError form the base class Exception.
  put cc into a list, assign it to self.cc.
  format truncate with a dictionary with an element: text for 'truncated_text', return the result.
  call the self.stdout.write method, with string "  Unapplying %s..." with '%s' replaced with migration and ending set to '', as arguments.
  if context is an instance of Context class.
  status_code is an integer 301.
  call the function reverse with 4 arguments: concatenated project_name, character '.' and view_name, args as args, kwargs as kwargs,
  call the method self.validate_name with 2 arguments name and app_or_project.
  as the arguments, substitute the result for response.   if Exception, renamed to e, exception is caught,
  decorator deconstructible,
  if not,
  define the method __init__ with 6 arguments: self, loopvars, sequence, is_reversed, nodelist_loop and nodelist_empty set to None.
  return an instance of metaclass class, created with 3 arguments: string 'temporary_class', None and an empty dictionary.
  if size is None or size is greater than self.remaining,
  dest set to string 'list_tags' and help set to string 'List available tags.'.   define method handle with arguments self, unapcked list app_labels and unpacked dictionary options.
  def _get_post method with self class instance as the argument.
  substitute value under the 'interactive' key of the options dictionary for interactive.
  return usage.
  call the method __init__ from the base class of the class CheckboxInput, with an argument attrs.
  raise an CommandError exception with an argument string "couldn't download URL %s to %s: %s", where '%s' is replaced with url,
  if settings.TEMPLATE_DEBUG is true,
  if not, shutdown_message is an empty string.   if sys.platform equals string win32', substitute string 'CTRL-BREAK' for quit_command, if not substitute string 'CONTROL-C' for quit_command.
  for every loader in self.loaders,
  call the method token.split_contents, substitute the result for bits.
  import module sys.
  if self.active_writers equals integer 0 and self.waiting_writers equals integer 0 and self.active_readers equals integer 0,
  call the function _trans.activate with an argument language, return the result.
  return a string '<%s token: "%s...">' with '%s', replace '%s' with token_name and 20 self.contents elements with every newline deleted.
  call the function get_standard_processors, append processors to the result, for every processor is the result,
  append 2 consecutive newlines to output.
  otherwise, length of options.args is lesser than integer 1,
  otherwis if char is contained in string 'Yy',
  define the method end_serialization with an argument self.
  define the method __init__ with 4 arguments: self, name, regex and next set to None.
  call the method other_dict.lists, for every key and value_list in result,
  define the method values with an argument self.
  error_msg is a string "Invalid template name in 'extends' tag: %r.", where '%s' is replaced with parent.
  call the method self.setFeature with 2 arguments: handler.feature_external_pes and boolean False.
  call the function force_text with an argument output, substitute the result for output.
  raise an EmptyPage exception with string 'That page number is less than 1' as an argument.
  substitute line for buffer_.
  self._num_pages and self._count are None.
  call the method parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and name,
  join statements in a string separated by newline, return the result.
  substitute context for block.context.
  get 'value' attribute of the _active object
  if sys.warnoptions is false,
  substitute type.__call__ for __call__.
  if not,
  substitute prefix for self.prefix.
  if self.cdata_tag is not None,
  call the method self.setlistdefault with an argument key, append value to the result.
  substitute subject for self.subject.
  sql_files is an empty list.
  if ValidationError, renamed to e, exception is caught,
  renderer is None.
  call the function smart_text with an argument obj, return the result.
  FASTCGI_OPTIONS is a dictionary containing 16 initial entries: 'fcgi' for 'protocol', None for 'host', None for 'port',
  call the method translation.activate with an argument saved_locale.
  if key_prefix is None,
  for m in merge_migrations append m.ancestry to a list, zip the resulting list into tuples of pairs, for every level in result,
  if string 'DJANGO_AUTO_COMPLETE' is not contained in os.environ,
  from django.utils.safestring import mark_safe into default name space.
  if ValueError exception is caught,
  convert byte to its integer representation, return all of the results for every byte in buf.
  otherwise if name is not None and compile_function is not None,
  try,
  for every handler in handlers,
  if can fail is true,
  for every app and names in result of the method conflicts.items, join names into a string, separated by ', ',
  define the method __init__ with 3 arguments: self, token_type and contents.
  compile the regex "^([a-z0-9.-]+|\[[a-f0-9]*:[a-f0-9:]+\])(:\d+)?$", substitute it for host_validation_re.
  substitute length of tokens for l.
  if self._callback is not None,
  if any w.needs_multipart_form for every w in self.widgets is true, return boolean True, if not return boolean False.
  if not,
  if value under the 'unique_id' key of the item dictionary is not None,
  substitute sys.platform for plat.
  append work_file to string '#: ', substitute it for old.
  from django.core.management.base import BaseCommand and CommandError into default name space.
  substitute arg converted into a integer for length.
  call the function bytes with an argument value, return the result.
  return host and an empty string.
  call the method os.path.basename with an argument fixture_name, substitute the result for fixture_name.
  call the method parser.parse with an argument tuple with an element string 'endautoescape', substitute the result for nodelist.
  raise an ContentNotRenderedError exception with an sring 'The response content must be rendered before it can be accessed.'.
  decorator stringfilter,
  use the result as an key to get the value of the form.data dictionary, assign it value None.   use return value of the self.fk.get_attname as the name of the attribute of form.instance object to set, set it to self.instance.pk.
  if not,
  from the connections list, substitute it for connection.   call the method connection.ops.start_transaction_sql, if it evaluates to true,
  if self.encoding exists substitute it for encoding, if not substitute settings.DEFAULT_CHARSET for encoding.
  evaluate the function debug.technical_500_response with request, evaluated value of function sys.exc_info as a list,
  define the method render with 2 arguments: self and context.
  if length of args is smaller than integer 2,
  define the method new with 2 arguments: self and values set to None.
  call the function StringIO with an argument stream_or_string, substitute the result for stream.
  format the string  '<p>%s</p>' with the result, for every p in paras, substitute list of results for paras.   if not,
  derive the class RadioSelect from the RendererMixin and Select base classes.
  from django.utils import six into default name space.
  define the method as_data with an argument self.
  derive the class Command from the BaseCommand class.
  define the method __init__ with arguments self, stream and boundary.
  derive the class Enclosure from the object base class.
  join return value of the function six.text_type called with an argument self.management_form and forms into a string,
  empty string for 'field', empty string for 'help_text' and html_class_attr for html_class_attr.   append last_row to output.
  define the method __exit__ with 4 arguments: self, exc_type, exc_value and traceback.
  Meta is an instance of class with name 'Meta', parent base class and fields attrs.
  call the function popen_wrapper with an argument args, assign the result to msgs, errors and status, respectively.
  substitute self.parent_instance.pk for value under the 'initial' key of the kwargs dictionary.
  prepend an empty string to hextets list.
  if num_loopvars is greater than integer 1, unpack is an boolean True, otherwise is an boolean False.
  if attrs is true, call the function flatatt with an argument attrs, substitute the result for attrs, if not attrs is an empty string.
  _supported is None.
  raise an RawPostDataException exception with an argument string "You cannot access body after reading from request's data stream".
  string 'unicode_escape', substitute the list of results for etags.   return etags.
  substitute fields for value under the 'fields' key of attrs dictionary.
  call the function re.compile with an argument raw string "(?:(\w+)=)?(.+)", substitute the result for kwarg_re.
  define the function find_command with 3 arguments: cmd, path set to None and pathext set to None.
  get attribute '_non_atomic_requests' from the view object, if the attribute doesnt exist return the empty set, substitute the result for non_atomic_requests.
  _format_cache is an empty dictionary.
  call the function factory with an argument unpacked dictionary kwargs, substitute the result for result.
  call the function six.reraise with 3 arguments: ImproperlyConfigured, ImproperlyConfigured(msg) and third element of return value of the function sys.exc_info.
  call the method os.setsid.
  increment visible_issue_count for length of issues.
  lookups is an instance of the MultiValueDict class.
  for every key in self.keyOrder,
  define the function serializer with 3 arguments: format, queryset and unpacked dictionary options.
  try,
  define lambda function that returns self.file.newlines field, use it as an argument for property function, put the result in newlines.
  if not, self.require_all_fields is boolean True.   call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs, from the base class of the class MultiValueField.
  join usage elements in a string separated by newline characters, return it.
  if base_url is None,
  if log is contained in child_loggers,
  call the function _generate_cache_key with request, request.method, an empty list and key_prefix as arguments, return the result.
  if key_prefix is None,
  bitwise shift integer 1 to the left by 31 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.
  if six.PY3 is true,
  call the function token.split_contents, substitute the result without the first element for bits.
  define the function normalize with an argument pattern.
  for every closable in self._closable_objects,
  from wsgiref import simple_server into default name space.
  define the method E with an argument self.
  raise an NotImplementedError with argument string 'subclasses of FileUploadHandler must provide a receive_data_chunk() method'.
  substitute file_name for t.
  return boolean False.
  from django.core.management.base import AppCommand into default name space.
  if extra_classes is not empty put its elements into a set, substitute it for extra_classes, if not extra_classes is an empty set.
  define the method handle_raw_input with arguments: self, input_data, META, content_length, boundary and encoding set to None.
  if not,
  for every k and v in the previous result, add a key into a dictionary: v converted to an integer for k,   substitute the resulting dictionary for kw.   call the method datetime.date with an argument unpacked dictionary kw, return the result.
  if value is contained in self.empty_values,
  "RobotFileParser", "robotparser", "urllib.robotparser".   for every attr in _urllib_robotparser_moved_attributes,
  raise an ValueError with string "This file is not accessible via a URL." as argument.
  raise an ValidationError with 3 arguments: dictionary self.error_messages value under the key 'invalid_pk_value',
  from django.core.mail.backends.console import EmailBackend as ConsoleEmailBackend into default name space.
  from functools import wraps into default name space.
  try,
  is_compressed is boolean True.
  raise an ValidationError exception with an argument errors.
  if exception http.Http404 as e is caught,
  call the function warnings.warn with 2 arguments: string "NoArgsCommand class is deprecated and will be removed in Django 2.0. "
  default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string,
  define the method content with 2 arguments: self and value.
  return integer 0.
  result of the function literals called with an argument string "/= /" and next as a string 'reg', to the both_before,   appended both_after to the previous result, for 'div' and appended list with an element instance of a class Tok,   created with 3 arguments: string "regex",   raw string '/([^*\\/[]|\\.|\[(   [^\]\\]|   \\.)*\])(   [^\\/[]|   \\.|   \[(   [^\]\\]|   \\.)*\])*/[a-zA-Z0-9]*',   and next as a string 'div', to the both_before, appended both_after to the previous result for 'div'.   define the method __init__ with an argument self.
  if value is true,
  from django.utils._os import upath into default name space.
  define the method upload_complete with argument self.
  get the value under the 'charset' key of content_params dictionary, use it to call the codec.lookup method.
  if self._pk_field equals self.fk,
  call the method self.file.close.
  if ImportError exception is caught,
  if field equals NON_FIELD_ERRORS,
  define the method __init__ with 5 arguments: self, attrs set to None, years set to None, months set to None and empty_label set to None.
  import module warnings.
  if stream_or_string is an instance of bytes,
  return commands.
  call the method self.non_field_errors, substitute the result for top_errors.
  define the method handle_template with 3 arguments: self, template and subdir.
  derive the class _OFFSET from the Structure base class.
  if not,
  convert new_name to a string and append it to string 'field', substitute the result for new_name.
  call the method self.get_template_sources with 2 arguments template_name and template_dirs, for every filepath in the result,
  if self is false,
  if data is None,
  increment stats dictionary value under the MISSES key by integer 1.
  if length of app_labels equals integer 0,
  and unpacked dictionary kwargs.   define the method subwidgets with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
  if code is not None,
  calculate length of provided and increment it by one, substitute the result for plen.
  if cursor is true,
  call to the field.to_python method, substitute the result for value.   substitute value for value under the field.name key of the data dictionary.
  c is an instance of the class SimpleCookie.
  tuple containing 2 elements: list with an element validate_ipv4_address and return value of the function _ with an argument string,   'Enter a valid IPv4 address.' for 'ipv4' and tuple containing 2 elements: list with an element validate_ipv6_address,   and return value of the function _ with an argument string 'Enter a valid IPv6 address.' for 'ipv6'.   define the function ip_address_validators with arguments protocol and unpack_ipv4.
  define the method render with 4 arguments: self, name, value and attrs set to None.
  call the function parser.compile_filter with an argument arg for every arg in args from first element to the end,
  define the function safe_join with 2 arguments base and unpacked dictionary paths.
  define the method y with an argument self.
  call the method shell.mainloop.
  delete the value under the key key of the self._expire_info dictionary.
  self.add_prefix called with an argument name, substitute the result for value.   try,
  self._post_render_callbacks is an empty list.
  substitute v for value under the k key of self dictionary.
  append iso_input to val.
  otherwise if self._delegate_text is true,
  call the function os.stat with an argument path, perform bitwise and on 2 operands st_mode field of the result and stat.S_IREAD,
  call the context.push method, with the result, perform,
  do nothing.
  from django.utils.encoding import force_bytes, force_str and force_text into default name space.
  call the method self.resolve_template with an argument self.template_name, substitute the result for template.
  try,
  for every key and value in parse_gsl with query_string is it exists or an empty string if not and keep_blank_values set to boolean True.
  output is an list with initial elements generated with call to the function pformat with an argument val, for every val in context.
  call the function cache_get with an argument key, substitute the result for link.
  intrans is boolean False.
  concatenate var_name, VARIABLE_ATTRIBUTE_SEPARATOR and fourth element of bits, use the result as an argument for the call the method,
  replace every occurrence of arg is value for an empty string, substitute the result for value.
  return Operator.
  call method self.serialize_headers, append bytes string '\r\n\r\n' to the result, append self.content to the result, return it.
  if autoescape is true,
  if not,
  call the method block_context.push with 2 arguments: self.name and push.
  if digest is None,
  define the method _isdst with 2 arguments self and dt.
  if extra_attrs is true,
  return an empty string.
  _version is a string "2.0".
  replace all '%s' in string '<%s %s (%s:%s) %s>' with self.__class__.__name__, urlconf_repr, self.app_name,
  if msgs is true,
  with an argument value evaluates to false, and if 'convert_to_local_time' attribute of value object doesnt exists,   or is it does is boolean True, should_convert is boolean True, otherwise is boolean False.   if should_convert is true, call the function localtime with an argument value and return the result, otherwise return value.
  return code.
  append block_content to a string 'end', substitute the result for self.verbatim.
  widget.is_localized is boolean True.
   file is an instance of BytesIO class created with an argument: value under the 'content' key of the data dictionary.
  define the method _has_changed with arguments self, data and initial.
  add model to models set.
  return guessed_path.
  if m is false,
  substitute obj for the value of the memo dictionary at the identity of the self object key.
  if ImportError exception is caught.
  define the function avoid_wrapping with an argument value.
  if new_method is false and old_method is true,
  from django.core.management.sql import sql_delete into default name space.
  if fp is an instance of file and data is an instance of unicode and fp.encoding is not None,
  call the method connection.introspection.django_table_names with an argument boolean true, substitute the result for tables.
  if value under the 'ENGINE' key of the connection.settings_dict dictionary equals a string 'django.db.backends.dummy',
  call the function convert_old_style_list with an argument sublist, substitute the result for item and old_style_list.
  define the method _get_name with argument self.
  get the value of the values dictionary under the value converted to lowercase key, substitute it for value, if the key doesnt exists,
  define the function do_if with 2 arguments: parser and token.
  use it as an argument for the call to the glob.iglob, for every candidate in result,   call the method os.path.basename with an argument candidate, is result is contained in targets,
  call the function force_str with an argument quoted_url, use the result as an argument for the call to the function unquote,
  substitute value for self._encoding.
  return value.
  substitute __name__ field of the result for function_name, in not, substitute func.__name__ for function_name.   define the function compile_func with 2 arguments: parser and token.
  join self.dirpath and self.file into a file path, substitute it for orig_file.
  if self.number is greater than integer 1, return boolean True, otherwise return boolean False.
  default_error_messages is an dictionary with an initial entry: result of the function _ called with an argument string,
  call the function _ with an argument string '%(datetime)s couldn\'t be interpreted in time zone %(current_timezone)s; it '
  call the self.style.HTTP_NOT_FOUND with an argument msg, substitute it for msg.
  define the method generic_tag_compiler with 9 arguments: parser, token, params, varargs, varkw, defaults, name, takes_context,
  define the method __init__ with 2 arguments: self and source.
  for every form in self.initial_forms,
  saved_instances is an empty list.
  define the method __contains__ with 2 arguments: self and item.
  if best_doublecolon_end equals length of hextets,
  if statue is not equal to STATUS_OK.
  derive the class MultiValueField from the base class Field class.
  try,
  call the method self.execute, with 2 arguments: unpacked list args and unpacked dictionary cmd_options.
  from django.utils.functional import allow_lazy into default name space.
  derive the class LocaleRegexProvider with object as base class.
  error is an instance of ValidationError created with an argument error.
  and only if self.match is None or return value of the method self.match_re.search called with an argument f is true.   append a tuple containing 2 elements: full_file and f to self.choices list.
  return the result.   decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
  if not,
  define the function supports_color, without arguments.
  best_doublecolon_start is an integer -1.
  if path_to_remove is file,
  _iteritems is a string "items".
  for every middleware_method in self._template_response_middleware,
  call the function os.path.realpath with an argument d, use the result as an argument for the call to the function os.path.abspath,
  call the function to_python with an argument pk, substitute the result for pk.
  call the method token.contents.split, substitute the result for bits.
  and use it as the name of the attribute to get from the self object,   call the result and append it to a list for every name in MEDIA_TYPES, join all the results into a string with newline separator,   use the result as an argument for the call to the function mark_safe, return the result.   define the method render_js with an argument self.
  do nothing.
  if not,
  if not,
  get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.
  if not,
  define the function emit_pre_migrate_signal with 4 arguments: create_models, verbosity, interactive and db.
  otherwise if total_forms is grater than self.max_num is grater or equal to integer 0,
  call the method parser.parse_known_args wiht an argument self.argv, without the first two elements, assign the result for options,
  remove the first element from the self.context.
  return value of the function re.escape called with an argument BLOCK_TAG_START,   return value of the function re.escape called with an argument BLOCK_TAG_END,   return value of the function re.escape called with an argument VARIABLE_TAG_START,   return value of the function re.escape called with an argument VARIABLE_TAG_END,   return value of the function re.escape called with an argument COMMENT_TAG_START,   and return value of the function re.escape called with an argument COMMENT_TAG_END, substitute the result for tag_re.   libraries is an empty dictionary.
  return all the results in a list.   decorator function register.filter with an argument is_safe set to boolean True.
  call the M.set method with the key, real_value, coded_value as the arguments.
  an instance of VerbatimNode class, return it.   register.tag decorator,
  res is an empty string.
  get the value under log key of root.manager.loggerDict dictionary, substitute it for logger.
  get the next element of the iterable pattern_iter, assign the result for ch.
  if ValueError exception is caught,
  compile a regex from raw string '^\[\s*(\w+)\s*\]\s*', substitute it for INDEX_PATTERN.
  define the function _get_model with an argument model_identifier.
  call the function allow_lazy with 2 arguments: remove_tags, six.text_type, substitute the result for remove_tags.
  call the function warnings.simplefilter with 2 arguments: string "default" and RemovedInNextVersionWarning.
  call the method logging._releaseLock.
  yield k.
  define the function check_all_models with app_configs defaulting to None and unpacked dictionary kwargs as arguments.
  call the function _generate_cache_key with request, method, headerlist, key_prefix as arguments, return the result.
  return the media field of the first element of self.forms.
  arg_vals is an empty list,
  derive the class DateTimeInput from the DateTimeBaseInput base class.
  import module operator.
  if not,
  convert s to integer of base 36, substitute it for value.
  substitute c_void_p for PVOID.
  if not,
  if not,
  widgets is a tuple with 2 elements: instance of DateInput class, created with 2 arguments: attrs as attrs and format as date_format,
  call the method list.__getitem__ with 2 arguments self and key, substitute the result for value.
  if attachment is an instance of MIMEBase,
  unpacked list args and unpacked dictionary kwargs.   define the method to_python with arguments self and value.
  if register_to is true,
  if value is not contained in result,
  call the function urlretrieve with arguments url and tempdir and filename joined into a file path, assign the result to the_path,  and info, respectively.
  define the function get_unbound_function with an argument unbound.
  _assertCountEqual is a strnig "assertItemsEqual".
  request is None.
  define the function get_tag_uri with 2 arguments: url and date.
  substitute i-th element of value for widget_value.
  define the function _bin_to_long with an argument x.
  define the method save_new_objects with 2 arguments: self and commit set to boolean True.
  decorator deconstructible,
  raise KeyError exception with an argument key.
  substitute _iterlists for lists.
   self._template_response_middleware is an empty list.
  if KeyError exception is caught,
  if field_type equals a string CharField' and fourth element of row is true,
  print a string "In the tar file %s the member %s is invalid: %s", where '%s' is substituted with: name, member.name and exc, respectively.
  get the value under the 'database' key of the options dictionary, use it as the key to get the value from the connections dictionary, substitute the result for connection.
  if exception OSError, renamed to e, is caught,
  call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for value.
  if value is an instance of datetime.datetime class,
  get 'default_error_messages' from the c object, if it doesnt exists return an empty dictionary,
  define the method _add_fallback with an argument self.
  if ValueError or TypeError are caught,
  raise an MultiPartParserError with an argument string 'Invalid Content-Type: %s', where '%s' is replaced with content_type.
  if filename ends with string '.mo',
  call the function importlib_find with 2 arguments: full_module_name and package_path, if the result is not None, return boolean True,
  call the getvalue method from the base class of the class PythonSerializer, return the result.
  for every exclude in excludes,
  get the name key of the data dictionary, substitute it for value.
  self.cookies is an instance of a class SimpleCookie.
  raise an TypeError exception with an argument string 'Level not an integer or a valid string: %r' formated with level.
  otherwise if action equals to string 'apply_success',
  call the method value.decode with an argument charset, substitute the result for value.
  if host exists substitute it for self.host, if not substitute settings.EMAIL_HOST for self.host.
  define the method __repr__ with an argument self.
  define the function with arguments self and filename.
  call the method self.error_class with an argument list with a element: result of the method self.get_form_error,
  self.resolver_match is None.
  if errors_on_separate_row and bf_errors are both true,
  It looks like this project was generated using Django 1.5 or earlier. You should ensure your tests are all running & behaving   as expected. See https://docs.djangoproject.com/en/dev/releases/1.6/#new-test-runner for more information.",   obj set to None and id set to a string '1_6.W001', put the result into a list and return it.   if not,
  for every field, initial and data in list of tuples tuple containing elements of self.fields, initial and data, respectively,
  string 'Ensure this value has at most %(limit_value)d characters (it has %(show_value)d).' and string 'limit_value', substitute the result for message.   code is a string 'max_length'
  if not,
  _wrapped is None.
  derive the class IfParser from the object base class.
  call the function get_current_timezone, use the result as an argument for the call to the function _get_timezone_name, return the result.
  define the method value with an argument self.
  derive the class Command from the base class BaseCommand.
  widget_value is None.
  param is None.
  call the method self.instance.full_clean with 2 arguments: exclude set to exclude and validate_unique set to boolean False.
  read chunk_size bytes from file and store it in data.
  return an empty list.
  if not,
  define the method __copy__ with an argument self.
  define the method __init__ with arguments self, unpacked list args and unpacked dictionary kwargs.
  from django.utils.encoding import force_text into default name space.
  call the method local, substitute the result for _active.
  call the function original_urlencode with 2 arguments: list with 2 elements: result of the function force_str with an argument k,
  if inplural is true,
  try,
  if self.initial_forms is false,
  derive the class ValidationError from the Exception base class.
  define lambda function that returns self.file.writelines field, use it as an argument for property function, put the result in writelines.
  and help='Raise on exception'.   call the method parser.add_option with 5 arguments: string '--no-color', action set to a string 'store_true',
  convert ip_str to lowercase, if it doesnt start with a string '0000:0000:0000:0000:0000:ffff:',
  raise a SerializerDoesNotExist exception with an argument format.
  if compress is true,
  define the function handle_m2m with an argument value,
  evaluate function has_bom with po_path as argument.
  set field cdata_tag for this class instance to None.
  alter_sql is an empty list.
  if renderer is true,
  define the method nud with 2 arguments: self and parser.
  'Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice',   and return value of the function _ called with an argument string 'Enter a list of values.' for 'invalid_list'.   define the method to_python with arguments self and value.
  for every item in qu append item.pk to a list, substitute resulting list for value under f.name key of the data dictionary.
  msg is a string ""The included urlconf '{name}' does not appear to have any patterns in it.
  and pending_references append sql to the string '-- ', put the results in a list, extend alter_sql with the result.   if alter_sql,
  call the method tuple.__new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs, substitute the result for self.
  define the method top with an argument self.
  modify value at the key 'Location' of the dictionary response by applying function request.build_absolute_uri on it.
  define the method create_variable_node with 2 arguments self and filter_expression.
  substitute value under the name key of the toks dictionary for tok.
  token is an instance of Token class, created with 2 arguments: TOKEN_VAR,
  derive the class CheckboxChoiceInput from the ChoiceInput base class.
  do nothing
  called with 3 arguments: data, files and name, substitute the result for upload.   if self.is_required is boolean false and call to the method value_from_datadict from the instance of CheckboxInput class,
  get 'WSGI_APPLICATION' attribute from the settings, substitute it for app_path.
  if f equals to string '__pycache__',
  if IndexError exception is caught,
  decorator python_2_unicode_compatible,
  define function dictvale, with an argument t.
  map elements from args through the function conditional_escape, substitute the result for args_safe.
  return major.
  find the ending position of the regular expression match of the object match, substitute the result for k.
  raise an exception.
  call the function format_html_join twice, first time with 3 elements: an empty string, string ' {0}="{1}"'
  for every name in sorted value under the app key of the commands_dict dictionary,
  get the value under the 'interactive' key of the options dictionary, substitute it for self.interactive.
  from __future__ import unicode_literals into default name space.
  and var_arg, respectively.   if constant_arg is true,
  substitute declared_fields for new_class.declared_fields.
  skip this iteration of he smallest enclosing loop.
  if node is an instance of Node,
  substitute '%s' in a string "    - %s\n" with return value of the operation.describe method, write the result to self.stdout.
  content_length is integer 0.
  from IPython.Shell import IPShell into default namespace.
  if self.fixture_count equals integer 0 and self.hide_empty is true,
  call the method qs.using with an argument form.instance._state.db, substitute the result for qs.
  call the method parser.add_argument with 3 arguments: string 'addrport', nargs='?' and help as a string 'Optional port number, or ipaddr:port'.
  from django.core.cache import caches to the default name space.
  substitute the result for offset.   if first element of tzinfo equals '-',
  take a tuple with 2 elements: boolean False and instance of Variable class, created with an argument constant_arg, append it to args.
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  derive the class DeserializationError from the Exception base class.
  otherwise if self.waiting_readers is not equal to integer 0,
  return settings.LANGUAGE_CODE.
  if timeout is greater than integer 2592000,
  if AttributeError exception is caught,
  mail.outbox is an empty list.
  raise an TemplateSyntaxError with an argument string "Invalid filter: '%s'", substitute '%s' with filter_name.
  if mw_instance has an attribute named 'process_request'.
  define the method _proxy_method with 3 arguments self, unpacked list args and unpacked dictionary kwargs.
  with it replace %r in the string "junk characters in start tag: %r",   call the method self.error with the resulting string as an argument.   if string end ends with string '/>',
  try,
  from django.core.mail.message import sanitize_address into default name space.
  if self.requires_system_checks is true and values under the 'skip_validation' and 'skip_checks' keys of the options dictionary are false,
  for every pk in value,
  get the value of dictionary cache under the key cache_key, if key is not available return None, substitute it for headerlist.
  try,
  define the function ngettext_lazy with 3 arguments: singular, plural and number set to None.
  return.
  define the function get_quantifier with 2 arguments ch and input_iter.
  if not,
  call the function msvcrt.get_osfhandle with return value of the _fd(f) function as argument, substitute the result for hfile.
  define the method tag_exists with self class instance and tag as arguments.
  fail_message is a string changed'.
  call the method self.configure_root with 2 arguments: root and boolean True.
  define the method serialize with 3 arguments: self, queryset and unpacked dictionary options.
  otherwise if value is an instance of decimal.Decimal, float or six.integer_types,
  get the value under the app_label key of the directory_created dictionary, if exists and it is false,
  from __future__ import unicode_literals into default name space.
  call the method parser.delete_first_token.
  substitute the resulting string for choices.   call the method self.create_select with 6 arguments: name, self.year_field, value, day_val, choices and self.day_none_value,
  return doy.
  replace tags for check.tags.
  substitute renderer for self.renderer.
  call the method to_python with an argument data from the base class of the class ImageField, substitute the result for f.
  if self.timezone is false,
  call the method new_name.find, with an argument string '__', if it evaluates to greater or equal than integer 0,
  define the method start_object with arguments self and obj.
  substitute flags for self.flags.
  replace '%s' in string "%s = %s  ###" with key and value under the key key of the user_setting dictionary, append it to the output.
  do nothing.
  define the method __init__ with 2 arguments: self and iterable set to None.
  append check to checks list, for every check in self.register_checks, if check has an attribute 'tags' and check.tags and tags set intersection is a non empty set.
  if result is not None,
  endless loop,
  if not,
  if initial is true, substitute it for self.initial, if not self.files is an empty dictionary.
  define validate_name with 3 arguments: self, name and app_or_project.
  try,
  define the function _lazy_proxy_unpickle with 4 arguments: func, args, kwargs and unpacked list resultclasses.
  import module sys.
  if slots is an instance of str,
  raise an ValueError exception with string "Key '%s' not found" as argument, substitute '%s' for key.
  from django.utils import six into default name space.
  raise an CommandError exception with an argument string "you must provide %s %s name", where '%s' is replaced with string 'an',
  substitute compressed for data.
  if buffer_ is true,
  from email.utils import formatdate,  getaddresses,  formataddr and parseaddr into default name space.
  substitute length for self._remaining.
  write content to new_file file.
  create an iterator out of x.
  self._post is an instance of QueryDict class created with an empty string as argument.
  try,
  return boolean False.
  define the function build_instance with 3 arguments: Model, data and db.
  if model has an 'natural_key' attribute,
  call the method new_context._reset_dicts values.
  return attachment.
  do nothing.
  s and max_age set to max_age, use it as an argument for the force_bytes function, substitute the result for base64d.   decompress is boolean False.
  join management_dir and string 'commands' into a file path name, substitute it for command_dir.
  call the method self._render with an argument context, return the result,
  try,
  define __del__ method with self as the argument.
  get the value under the self.using key of the connections dictionary, substitute it for connection.
  define the method reset with an argument self.
  called with string as an argument 'Error executing %s: %s', where '%s' is replaced by: first element of args and strerror, respective,   and third element of the result of the function sys.exc_info.   call the method p.communicate, assign the result to output and errors, respectively.
  call the method self.configurator.convert with an arugment value, substitute the result for result.
  substitute empty bytes string for self.buffer.
  for every log in existing,
  for every key in self,
  called with value under the 'pubdate' key of the item dictionary.   if value under the 'comments' key of the item dictionary is not None,
  from django.utils.translation import ugettext as _ into default name space.
  define the method validate with arguments self and value.
  otherwise if tzinfo is not None,
  mode is a string 'wb' is chunk is instance of the type bytes, otherwise mode is a string 'wt'.
  delete dictionary item 'private' from cc.
  call the method threading.Semaphore with an argument integer 0, substitute the result for self.can_write.
  or first element of var equals '_',   raise an TemplateSyntaxError exception with an argument string "Variables and attributes may not begin with underscores: '%s'",
  call the method handler.addQuickElement with 3 arguments: string 'title', an empty string and a dictionary with 3 entries:
  define the method as_text with an argument self.
  define the function render_to_string with 4 arguments: template_name, dictionary set to None, context_instance set to None and dirs set to None.
  raise an self.exception exception.
  from django.utils.deprecation import RemovedInDjango20Warning into default name space.
  if value under the 'subtitle' key of the self.feed dictionary is not None,
  call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'app_label[.ModelName]',
  for every k2 and v2 in v,
  if event equals a string "START_ELEMENT" and node.nodeName equals a string 'object',
  define the function phone2numeric with an argument phone.
  define the method clear with argument self.
  only if v.Serializer.internal_use_only is false, return the resulting list.   define the function get_deserializer with an argument format.
  read the whole file f, substitute the result for content.
  for every model in return value of the function router.get_migratable_models, called with arguments:
  define the method get_connection with arguments self and fail_silently set to boolean False.
  substitute settings.DATE_FORMAT for arg.
  return result.
  define the function _findall with 2 arguments text and substr.
  'determine whether string is singular or plural.', where '%s' is replaced with number.   if not,
  if extensions is false, substitute it for exts, otherwise exts is a list containing 2 elements: string 'html' and string 'txt'.
  substitute format_string for self.format_string.
  return a list with an element tuple with 2 elements: an empty string and an empty list.
  derive the class EmailBackend from the BaseEmailBackend base class.
  _js_escapes is a dictionary with 11 initial entries: '\\u005C' for integer representation of string '\\',
  where '%s' is replaced with top_dir.   call the function handle_extensions with 2 arguments: value under the 'extensions' key of the options dictionary,
  import module glob.
  define the function callable with an argument obj.
  substitute _html_parser.interesting_normal for self.interesting.
  decorator function wraps with an argument func.
  if ValidationError exception is caught,
  LIGHT_PALETTE is a string 'light'.
  do nothing.
  from django.forms.utils import flatatt,  ErrorDict and ErrorList into default name space.
  if self.cdata_tag is not None,
  if not self.extra_context is an empty dictionary.   remove kwargs dictionary entry under the 'isolated_context' key, if it exists substitute it for self.isolated_context,
  call the method lexer_class with an arguments template_string and origin, substitute the result for lexer.
  old_field_name is None.
  call the function get_template_from_string with 3 arguments: source, origin and template_name, substitute the result for template.
  self.namespace and self.regex.pattern, respectively. return it.   define the method _populate with an argument self.
  call the self.file.close method, return the result.
  increment doy by integer 1.
  if slots is not None,
  call the b64_encode function with an argument data, substitute the result for base64d.
  if not,
  if name is true, substitute it for function_name, if not get attribute '_decorated_function' from func object,
  pop the first element from plist, convert it to lowercase, call the method decode on it, with string 'ascii' as an argument,
  created with an argument widget set to HiddenInput.   value under the INITIAL_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,
  if ValueError or TypeError exceptions are caught,
  call the function os.path.basename with an arguments path, substitute the result for filename.
  define the method __ne__ with an argument self.
  define the function _is_shorthand_ip with an argument ip_str.
  define the function now.
  call the function validate_ipv46_address with an argument ip_address.
  return boolean True if tag is contained in self.tags_available method return value, return False otherwise.
  derive the class NumberAwareString from the resultclass base class.
  define the function find_template_loader with an argument loader.
  define the function _dec with an argument func.
  self._called_from_command_line is boolean True.
  call the method _illegal_formatting.search with an argument fmt, substitute the result for illegal_formatting.
  try,
  return self.empty_value.
  if match is true,
  trans_real._translations is an empty dictionary.
  return an empty string,
  self.file_permissions_mode is a tuple containing: file_permissions_mode if file_permissions_mode is not None,
  substitute first element of options for opt_label.
  ERROR is integer 40.
  try,
  call the method (hidden_widget.value_from_datadict with 3 arguments: self.data, self.files and initial_prefixed_name,
  get the integer representation of the first element of bs, return it.
  define the function last with an argument value.
  results is a tuple with 2 elements, 2 empty lists.
  and result of the function force_str called with an argument safe,   use the result as an argument for the call to the function force_text, return the result.   call the function allow_lazy with 2 arguments: urlquote_plus and six.text_type, substitute the result for urlquote_plus.
  call the function re.compile with an argument string "^\s*trans\s+((?:"[^"]*?")|(?:'[^']*?'))(\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?')))?\s*", substitute the result for inline_re.
  and include_auto_created set to boolean True,   call the method connection.creation.sql_destroy_indexes_for_model with arguments model and style, extend the output with the result.
  return an empty string.
  if self.default_locale_path directory doesnt exists,
  errors is an empty list.
  from __future__ import unicode_literals into default name space.
  call the function time_format with 2 arguments: value and arg, return the result.
  if second element of options is true,
  call the function runfastcgi with an argument args.
  substitute library for self._lib.
  if every input_val in special_floats,
  return None.
  locales is a difference between the locales and exclude sets.
  call the function force_text with arguments self and _regex, substitute the result for regex.
  call the method self.load_label with an argument fixture_label.
  must_be_first is boolean False.
  if model_list is None,
  call the method self.style.MIGRATE_HEADING with an argument string "Optimizing...", write it to self.stdout.
  try,
  created with 2 arguments: required as boolean False and widget set to HiddenInput.   value under the MAX_NUM_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,
  import module decimal.
  if formfield has an attribute 'queryset',
  define the function format_html with 3 arguments: format_string, unpacked list args and unpacked dictionary kwargs.
  define the method add_arguments with arguments self and parser.
  if t.token_type equals TOKEN_BLOCK,
  if not,
  call the self.stderr.write, with string "The po files under %s are in a seemingly not writable location. mo files will not be updated/created." as argument, with '%s' replaced by dirpath.
  substitute int for integer_types.
  default_error_messages is an dictionary containing entry: return value of the function _ called with an string 'This field is required.' for 'required'.
  if first nine elements of block_content is string 'verbatim' or 'verbatim ',
  if lang_code is not None,
  if exclude is not None,
  define the function _make_key with 9 arguments: args, kwds, typed, kwd_mark as a tuple with an element result of the function object,
  call the method value.as_tuple, assign the result to sign, digittuple and exponent, respectively.
  return nothing.
  if html is true,
  otherwise if form.has_changed method evaluates to true,
  get the value under the 'CONTENT_TYPE' key of environ dictionary, if the key doesnt exist get the empty string,
  from django.utils.functional import lazy into default name space.
  open the file named filepath in read mode, with file descriptor renamed to fp perform,
  return boolean True, otherwise return boolean False.   define private method __ne__ with self class instance and other as arguments.
  call the method cls.__promise__ with 3 arguments: resultclass, k and v, substitute the result for meth.
  if AttributeError exception is raised,
  substitute viewname for view.
  if ValidationError, substituted for e, exception is caught,
  substitute the result for value under the 'input' key of the substitutions dictionary.   if value is true and value has an attribute 'url',
  for every hextet in new_ip,
  sort result in reversed order by the key as lambda function with an argument k and reeturn value second element of k.
  call the function next with an argument cycle_iter, call the method resolve on the result with an argument context, substitute the result for value.
  property decorator,
  if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
  do nothing.
  if error_class is None,
  raise an InputStreamExhausted exception,
  do nothing.
  substitute self.literal for value.
  if ImportError exception is caught.
  define the function dec with an argument func,
  define the method render with 2 arguments self and context.
  if las equals integer 3,
  from datetime import datetime into default name space.
  define the method handle with 3 arguments: self, unpacked list test_labels and unpacked dictionary options.
  for every attr in _urllib_request_moved_attributes,
  import module traceback.
  call the function get_urlconf with an argument urlconf.
  try,
  define the method _format_value with 2 arguments: self and value.
  import module warnings.
  substitute chr for unichr.
  try,
  if value equals k2 or text_value equals return value of the function force_text called with argument k2,
  substitute first element of args for arg.
  substitute first header_end elements of chunk list for header.
  for every i and line in enumerated iterable table_output,
  import module logging.
  and boolean False, append the result to result.   return result.
  if ValueError exception is caught,
  get value under the 'level' key of the config dictioanry, if it exists substitute it for level, if not level is None.
  define the method __get__ with 3 arguments: self, obj and tp.
  yield key and value under the key key of self dictionary.
  append check.tags into a list for every check in self.registered_checks if check has 'tags' attribute, put the elements into a set and return it.
  if TypeError or VariableDoesNotExist exceptions are caught,
  raise a exception of CommandError class, with string "App '%s' does not have migrations" with '%s' replaced with app_label as the argument.
  append work_file to string '#: ', substitute it for old.
  define the method widget_attrs with arguments self and widget.
  if os.name equals string 'posix',
  priority is floating point number 1.0.
  if not,
  finally perform,
  mixed_subtype is a string 'mixed'.
  while ch is not equal to a string '}',
  ch is None.
  for every elt in list_ call the method bytes_to_text with 2 argument: elt and self.encoding, append the result into a list,
  add model to a set, substitute the result for known_models.   pending_references is an empty dictionary.
  from django.utils.encoding import force_text into default name space.
  from django.core.mail import get_connection into default name space.
  from django.utils.text import Truncator, wrap and phone2numeric into default name space.
  substitute the result for exc_value.   substitute exc for exc_value.__cause__.
  call the method cache.set, with cache_key, headerlist, cache_timeout as arguments.
  if quote_double_quotes is true,
  define the method __init__ with 4 arguments: self, content set to an empty list, unpacked list args and unpacked dictionary kwargs.
  self.translate is boolean True.
  from django.conf import settings into default name space.
  substitute HiddenInput for widget.
  for every i in sequence of integers from 0 to result of the method self.total_form_count, call the method self._construct_form,
  assign it to value under the string ".moves.urllib_robotparser" appended to __name__ key of the sys.modules dictionary,   and to value under the string ".moves.urllib.robotparser" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib from the types.ModuleType base class.
  bring integer 2 to the power of 10, multiply it by integer 64, substitute the result for DEFAULT_CHUNK_SIZE.
  decorator python_2_unicode_compatible,
  if self.first is true,
  define the method token_kwargs: bits, parser and support_legacy set to boolean False.
  if length of bits equals integer 3,
  if stream_or_string is not an instance of bytes or six.string_types,
  get attribute "urlpatterns" form the self.urlconf_module, substitute it for patterns, if the attribute doesnt exist,
  call the method self.compile_filter_error with 2 arguments: token and e, if it evaluates to false,
  return s.
  HttpResponse.content.setter property,
  define the method filter with 4 arguments: self, name set to None, filter_func set to None and unpacked dictionary flags.
  if six.PY2 is true and path is not an instance of six.text_type type,
  return _dec.
  raise an ValidationError with an argument errors.
  if kwds is true,
  while i is lesser than length of subject and i-th element of subject is not an empty space or tab character,
  if not,
  if exctype is not WindowsError or string 'Access is denied' is not contained in value converted into a string,
  if self.field.show_hidden_initial is true,
  substitute EmailInput for widget.
  if self.can_import_settings is true,
  return path an an empty string.
  call the function zlib.compress with an argument data, substitute the result for compressed.
  if self does not have an attribute named '_dimensions_cache'.
  define the function deactivate_all.
  call the method models.signals.pre_migrate.send with 5 arguments: sender set to app_config, app_config set to app_config,
  call the method self._find_boundary with 2 arguments: chunk and boolean if length of chunks is lesser than self._rollback,
  if dirname starts with character '.' or dirname equals a string '__pycache__',
  return self.DSTOFFSET.
  and self.absolute_max, return the result.   if not,
  define the method write with 3 arguments self, outfile and encoding.
  do nothing.
  substitute args, without the last element for args.
  get config dictionary element under 'root' key, if it exists substitute it for root, if not, root is None.
  skip this loop iteration.
  if self.verbosity is greater or equal than integer 1,
  substitute self.none_value for self.year_none_value.
  of the options dictionary and value under the 'port' key of the options dictionary converted into an integer.   if value under the 'socket' key of the options dictionary is true and values under the 'host' and 'port' keys of the options dictionary are false,
  if handlers is true,
  prepend '.' to the i-th element of the ext_list.
  call the method apps.setdefault with 2 arguments: pattern and an empty list, append to the resulting object pattern.namespace.
  call the method validate with an argument value from the base class of the DecimalField class.
  for key and value in result of the function six.iterlists called with an argument,
  call the method self._setup.
  for every app_config in return value of the method apps.get_app_configs, only if app_config.models_module is not None,   and app_config is not contained in excluded_apps.   if not,
  define the method __init__ with 3 arguments: self unpacked list args and unpacked dictionary kwargs.
  convert col_name to lowercase, substitute the result for new_name.
  substitute ValueError for error_class.
  if value is an instance of datetime.date,
  return tempdir.
  define the method __init__ with 8 arguments: self, file, field_name, name, content_type, size, charset and content_type_extra set to None.
  substitute cls for obj.__class__.
  SINGLE_BRACE_END is a string '}'.
  return s.
  if length of args is greater than integer 1,
  from django.utils.translation import trans_real as trans.
  if second element of data_list is contained in self.empty_values,
  if not,
  call the OVERLAPPED function, substitute the result for overlapped.
  derive class Command from CheckCommand base class.
  app_name and model._meta.object_name, respectively.   evaluate connection.creation.sql_create_model method with model, no_style() and seen_models as arguments,
  is greater than self.max_num, or if value under the TOTAL_FORM_COUNT key of the self.management_form.cleaned_data dictionary,   is grater than self.absolute_max,   raise an ValidationError with 2 arguments: return value of the function ungettext with 3 arguments:
  append field to problem_fields list for every model in apps.get_models with argument kwargs dictionary, only if app_configs is None,
  comment is an empty list.
  define the method as_table with an argument self.
  substitute self._request_middleware for request_middleware.
  if parent has an attribute 'render',
  substitute settings.DEFAULT_CHARSET for self._charset.
  if ignore_failures is true,
  from django.utils import six into default name space.
  define the method _cache with argument self.
  derive the class Page from the collections.Sequence base class.
  code set to an string 'invalid_choice' and dictionary params with an entry: choice for 'value'.   return new_value.
  substitute None for pickled.
  define the function _parse_date_fmt.
  substitute link for value under the NEXT key of the last dictionary, for value under the PREV key of the root dictionary,
  remove config dictionary element under '()' key, substitute it for c.
  if PY3 is true,
  define the method handle_fk_field with self, obj and field arguments.
  derive the class NullBooleanSelect from the Select base class.
  return left.
  evaluate self.stream.getvalue method, return the result.
  type set to int and help is a string 'Specifies the indent level to use when pretty-printing output.'.   call the method parser.add_argument with 5 arguments: string '--database', default set to string 'store', dest set to 'database',
  define the function floatformat with 2 arguments text and arg set to integer -1.
  if code is contained in _supported and call to the function check_for_language with an argument code evaluates to true,
  call the function to_locale with an argument lang, substitute the result for locale.
  define the method strptime with arguments self, value and format.
  return nothing.
  if error_messages is true and f.name is contained in error_messages,
  if _urlconfs has an attribute 'value',
  bring integer 2 to the power of 10, multiply it by 64, substitute the result for DEFAULT_CHUNK_SIZE.
  call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'fixture', nargs set to '+',
  raise an ContentNotRenderedError exception with an string 'The response content must be rendered before it can be iterated over.'.
  get the value under the 'HTTP_ACCEPT_LANGUAGE' key of the request.META dictionary, if it exists substitute it for accept,
  style is an instance of the dummy class.
  call the method warnings.warn with 2 arguments: string "FastCGI support has been deprecated and will be removed in Django 1.9.",
  sum punctuation and trail, substitute the result for trail.
  leave_locale_alone is boolean True.
  if self.data.hour is greater than integer 11,
  if not,
  call the re.compile function with self.regex and self.flags as arguments, substitute the result for self.regex.
  called with value under the 'QUERY_STRING' key of the self.META dictionary and append it to string '?',   append the result th the self.path converted into a string and return it,   if the value under the 'QUERY_STRING' key of the self.META dictionary is false, return self.path converted into a string.   def the method get_signed_cookie with 5 arguments: self, key, default set to RAISE_ERROR, salt as an empty string,
  define the method filter with 2 arguments: self and record.
  if o is an instance of datetime.datetime object.
  derive class SimpleCookie from the base class http_cookies.SimpleCookie.
  define the method _dec with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  if InputStreamExhausted exception is caught,
  if ValidationError, renamed to e, exception is caught,
  if not,
  call the method connections.all(), perform the following for every db in the result,
  define the method __init__ with 2 arguments: self and token.
  derive the class HTMLParser from the base class HTMLParser located in the module _html_parser.
  define the function add_metaclass with an argument metaclass.
  substitute io.BytesIO for BytesIO.
  derive the class Loader from the BaseLoader base class.
  "or the 'exclude' attribute is prohibited; form %s needs updating.", where '%s' is replaced with name.   if opts.fields equals ALL_FIELDS,
  get the value under the 'tags' key of the options dictionary, if it exists substitute it for tags, if not, tags is None.
  derive the class BaseMemcachedCacheMethods from RenameMethodsBase the base class.
  raise CommandError exception with "Cannot find a migration matching '%s' from app '%s'.",
  if other is an instance of Promise class,
  return an instance of a class RegexURLResolver created with arguments: raw string '^/' and urlconf.
  integer_types is a tuple with 2 elements int and long.
  if self._wrapped is empty,
  PATTERN is a string  "classdef< 'class' any+ ':'suite< any*funcdef< 'def' unifunc='__unicode__'parameters< '(' NAME ')' > any+ >any* > >".
  call the method self.paginator.validate_number with self.number decremented by 1 as argument, return the result.
  'Use SplitDateTimeField instead.', RemovedInDjango19Warning and stacklevel set to integer 2.   if length of value is not equal to integer 2,
  return None.
  substitute nodelist_true and nodelist_false for self.nodelist_true and self.nodelist_false, respectively.
  where '%s' is replaced by lookup_view.   try,
  default_list is an empty list.
  matches is boolean False.
  if arg is None
  where 'strdq' is replaced with '"[^"\\]*(?:\\.[^"\\]*)*"', 'strsq' is replaced with "'[^'\\]*(?:\\.[^'\\]*)*'",   'i18n_open' is replaced with return value of function re.escape called with an argument string '_(',   'i18n_close' is replaced with return value of function re.escape called with an argument string ')'.   remove all occurrences of newline character from constant_string.
  call the method tempfile.mkdtemp with 2 arguments: prefix set to prefix, suffix set to string '_extract', substitute the result for tempdir.
  raise an exception.
  define the function get_unbound_function with an argument unbound.
  read size number of bytes from self.stream stream, store the result in the result.
  format string ' _(%s) ', with fmatch, write it to out.
  decorator function register.filter with an argument is_safe set to boolean True.
  define the method get_queryset with an argument self.
  call the method handler.addQuickElement with 3 arguments: string 'dc:creator',
  new_result is an empty list.
  if location is None,
  field_type is a string 'TextField'.
  return the result of the method self._html_output, called with 5 arguments: normal_row to a string,
  call the method translation._info.copy, substitute the result for self._info.
  insert options.pythonpath at the beginning of sys.path.
  increment pos by one, substitute the result for last.
  define the function get_template_from_string with 3: source, origin set to None and name set to None.
  define the function compress_string with an argument s.
  with unpacked list field_value as an argument, substitute the result for obj.   get the field.rel.field_name from the obj, substitute it for obj_pk.
  internal_use_only is a boolean False.
  _response_middleware is an empty list.
  decorator stringfilter,
  if line is true,
  substitute formfield.limit_choices_to for limit_choices_to.
  if keys is true,
  define the method value with an argument self.
  define the method O with an argument self.
  call the method pretty_name with an argument name, substitute the result for self.label.
  from optparse import OptionParser into default name space.
  return self._callback.
  register.tag decorator,
  substitute body for self.body.
  raise an AttributeError exception.
  call the function allow_lazy with an argument strip_tags, substitute the result for strip_tags.
  if not,
  define the method tag with 3 arguments: self, name set to None and compile_function set to None.
  call the method pattern.resolve with an argument new_path, substitute the result for sub_match.
  call the method chunk.find with an argument bytes string '\r\n\r\n', substitute the result for header_end.
  under the 'handlers' key of self.config dictionary, substitute the result for value under 'target' key of config dictioanry.   if StandardError, renamed to e, exception is caught,
  call the method self._css.keys, sort the result and substitute it for media.
  where '%s' is replaced with name.   if defaults is not None,
  call the function get_supported_language_variant with 2 arguments: lang_code and strict set to strict, return the result.
  call the method self.handle_starttag, with tag and attrs as the arguments.
  call the function parse_header with an argument line, substitute the result for main_value_pair and params, respectively.
  call the method date.weekday, use the result as an key to obtain the value from the days dictionary, substitute it for dow.
  from gzip import GzipFile into default name space.
  mark_safe function, return the result.   call the function allow_lazy with 2 arguments: slugify and six.text_type, substitute the result slugify.
  call the method add_arguments from the base class of the class Command, with an argument parser.
  derive the class ManagementUtility from object base class.
  define the method setlist with 3 arguments: self, key and list_.
  verbosity set to verbosity, interactive set to interactive and using set to db.   call the method models.signals.post_syncdb.send with 6 arguments: sender set to app_config.models_module,
  from django.utils import six into default name space.
  return a tuple with 2 elements: resource and string 'egg:%s:%s', where '%s' is replaced with app_config.name and pkg_name, respective.
  if resource_string is not None,
  return func.
  attachment is an instance of a class MIMEBase, created with the arguments basetype and subtype.
  if self.verbosity is greater or equal to integer 2,
  match is None.
  call the method pending_references.setdefault with 2 arguments: refto and an empty list, extend the result with refs.
  fp is a instance of a class six.StringIO.
  if six.PY3 is true,
  define the method __copy__ with an argument self.
  call the function localize with 2 arguments: value and use_l10n=context.use_l10n, substitute the result for value.
  if self._request_middleware is None,
  substitute arg converted into an integer for length.
  return nodes.
  import StringIO.
  call the smart_text function with 3 arguments: field_value, value under the 'encoding' key of the options dictionary or,
  if name is None,
  from django.conf import settings object to the default name space.
  use the result and file_obj as arguments for the call to the method self._files.appendlist.   break the loop execution.
  return result.
  if options.settings is true,
  if self.settings_exception is not None,
  return result.
  define the method nud with 2 arguments: self and parser.
  where '%r' is replaced with subcommand and '%s' is replaced with self.prog_name.   call the function sys.exit with an argument integer 1.
  if dirname is true and dirname path doesnt exists,
  call the method termios.tcsetattr with fd, termios.TCSANOW and attr_list, as arguments.
  if data is true,
  call the self._lock.writer method, with the result perform the following,
  return _cached_filenames.
  call the method handler.addQuickElement with 2 arguments: string 'description' and value under the 'description' key of the self.feed dictionary.
  define the function get_language_info with an argument lang_code.
  call the method handler.addQuickElement with 2 arguments: string 'pubDate' and result of the function rfc2822_date,
  which has not been installed." with all the '%s' replaced by values of description, name and reference joined into a string delimited by '.', respectively,   obj set to receiver.__module__, hint set to None and id set to string 'signals.E001', append the result to errors.   return errors.
  call the method __init__ from the base class of the class PasswordInput, called with an argument attrs.
  sum trail and closing, substitute the result for lead.
  decorator function register.filter with an argument is_safe set to boolean False.
  call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'test_label', nargs set to string '*',
  msg_count is integer 0.
  if LookupError or ImportError, renamed to e, exceptions are caught,
  call the method m.end with an argument integer 0, substitute the result for pos.
  self.choices is an empty list.
  return an empty string.
  define the function ngettext with 3 arguments: singular, plural and number.
  call the method self.can_read.release.
  do nothing.
  substitute name for self.name.
  result of the call to the function _ with an argument string 'February' for 2,   result of the call to the function _ with an argument string 'March' for 3,   result of the call to the function _ with an argument string 'April' for 4,   result of the call to the function _ with an argument string 'May' for 5,   result of the call to the function _ with an argument string 'June' for 6,   result of the call to the function _ with an argument string 'July' for 7,   result of the call to the function _ with an argument string 'August' for 8,   result of the call to the function _ with an argument string 'September' for 9,   result of the call to the function _ with an argument string 'October' for 10,   result of the call to the function _ with an argument string 'November' for 11,   and result of the call to the function _ with an argument string 'December' for 12.   MONTHS_3 is an dictionary with 12 entries: result of the call to the function _ with an argument string 'jan' for 1,
  substitute value under the 'use_threading' key of the options dictionary for threading.
  try,
  if delta is smaller than integer 0,
  call the method self.can_write.acquire.
  called with an argument value and value.   register.tag decorator function with an argument 'if',
  define the method __setitem__ with 3 arguments: self, key and value.
  raise an AttributeError with an argument attr.
  call the method __new__ from the base class of the class DeclarativeFieldsMetaclass, with 4 arguments: mcs, name, bases and attrs.
  if not,
  return boolean True.
  parentloop is an empty dictionary.
  where '%s' is replaced with file_path.   create an object TranslatableFile with arguments: dirpath, filename and locale_dir, append it to all_files.
  _func_globals is a string "__globals__".
  if not,
  define the method load_template_source with 3 arguments: self, template_name, template_dirs set to None.
  substitute the resulting list for app_config.   if not,
  define the function add with 2 arguments value and arg.
  substitute value under the 'liveserver' key of the options dictionary for value under the 'DJANGO_LIVE_TEST_SERVER_ADDRESS' key of the os.environ dictionary.
  if attr is contained in flags,
  from django.core.files.base import File into default name space.
  open_tags is an empty list.
  substitute value under the name key of the lib.filters dictionary for value under the name key of the temp_lib.filters dictionary.
  raise an NotImplementedError exception with an argument string 'subclasses of BaseCommand must provide a handle() method'.
  if TYPE equals to RAW,
  substitute first element of app_list for ns.
  define the method to_python with arguments self and value.
  for every message is message,
  import module '.management' from the package app_config.name.
  get the value under the field key of the self.cleaned_data dictionary, if it exists substitute it for field_value,
  if self.instance.pk is None,
  bring integer 36 to the power of factor, substitute the result for j.
  if not,
  define the function construct_instance with 4 arguments: form, instance, fields set to None and exclude set to None.
  return default.
  replace '%s' in string 'django_%s_template_' with self.app_or_project, substitute it for prefix.
  dir set to None as the arguments.   call the method tmpfile.mkstemp with suffix set to suffix, prefix set to prefix and dir set to dir, store the result in the fd and name, respective.
  increment loaded_objects_in_fixture by one.
  return result.
  name set to self.file_name, content_type set to self.content_type, size set to file_size, charset set to self.charset,   and content_type_extra set to self.content_type_extra, return it.   define the function load_handler with arguments: path, unpacked list args and unpacked dictionary kwargs.
  derive the class override from the object base class.
  call the method self.check with 2 arguments app_configs set to app_configs, display_num_errors set to display_num_errors, return the result.
  substitute gettext for ugettext.
  substitute new_second_item with second_item.
  if six.PY3 is true,
  find the ending position of the regular expression match of the object match, substitute the result for j.
  call the method date.tzinfo.utcoffset with an argument date, substitute the result for offset.
  append data to self.children.
  decrement l by integer 1, multiply it with hlen, subtract the result from dklen, substitute the result for r.
  if not,
  call the function reset_translations.
  import module sys.
  call the function warnings.warn with 3 arguments:
  while escaped is true or ch is not equal to a string ']',
  from django.utils.six.moves.urllib.parse import urlsplit and urlunsplit into default name space.
  week_number is integer 1.
  if not,
  define the method render with 4 arguments: self, name, value and attrs set to None.
  invert the ordering of elements of int_part_gd, substitute it for int_part.
  substitute CheckboxInput for widget.
  append tuple with 2 elements: migration.app_label and migration.name to replaces.
  property decorator,
  execute regardless of the exception being raised,
  call the fastcgi_help function with an argument string "ERROR: Invalid option for daemonize parameter.", return it.
  do nothing.
  if it doesnt exists return value of the function capfirst with an argument self.fk.verbose_name for 'label'.   if self.fk.rel.field_name is not equal to self.fk.rel.to._meta.pk.name,
  call the Warning function with 4 arguments: string "MIDDLEWARE_CLASSES is not set.", hint tuple containing one string,
  raise an CommandError with an argument string "App '%s' does not have migrations (so squashmigrations on it makes no sense)",
  if MultiPartParserError exception is caught,
  skip this loop iteration,
  lbp is integer 0.
  if bytes is contained in resultclasses, cls._delegate_bytes is boolean True, otherwise it is boolean False.
  define the function _unpack_ipv4 with an argument ip_str.
  define the function method_decorator with an argument decorator.
  substitute greater element between integer 0 and end decremented by one for last.
  if self.verbosity is greater or equal to 3,
  call the connection.creation.sql_indexes_for_model with model and no_style() as arguments, substitute the result for index_squl.
  define the method handle_uncaught_exception with self class instance, request, resolver and exec_info as arguments.
  existing_headers is a set containing lowercase strings header for every header in vary_headers.
  return self._urlconf_module.
  return self._choices.
  called with an argument final_attrs and return value of the function force_text called with an argument value, return the result.   derive the class DateTimeBaseInput from the TextInput base class.
  from django.utils.functional import allow_lazy into default name space.
  return first element of t converted to lowercase and boolean True, as a tuple.
  plural is an empty list.
  substitute the first 255 elements of ext for ext.
  match regex datetime_re with value, substitute the result for match.
  try,
  define the method render with 4 arguments: self, name, value and attrs set to None.
  if i equals to integer 0 and
  call the method f.save_form_data with 2 arguments: instance and value under the f.name key of cleaned_data dictionary.
  define the method __init__ with 2 arguments: self and name.
  if UnicodeError exception is caught,
  return integer 1 and ch2.
  call the method tpl.format with an arguments self.sysid and self.pubid.
  define the method validate with arguments self and value.
  if errors is true,
  append string '_0' to id_.
  replace every occurrence of old for new in msgs, substitute the result for msgs.
  return new_class.
  if timezone has an attribute 'normalize',
  sum best_doublecolon_start and best_doublecolon_len, substitute the result for best_doublecolon_end,
  call the method self._iteritems, for every k and v in the result,
  while first element of s is equal to bytes string ';',
  if e.errno is not equal to errno.ENOENT,
  from django.utils import six into default name space.
  return resulting list.   define the method keys with an argument self.
  for every value in data call the function force_text with an argument value, add the results into a set, substitute the resulting set for data_set.
  define the method __init__ with 4 arguments: self, parser, unpacked list args and unpacked dictionary kwargs.
  "(%s) and 'can_import_settings' (%s) command options.", replace '%s' with self.leave_locale_alone and self.can_import_settings.   from django.utils import translation into default namespace.
  try,
  substitute obj._meta.concrete_model for concrete_model.
  call the method time.mktime with an argument tt, substitute the result for stamp.
  if pythonrc is not a file,
  derive the class FloatField from the base class IntegerField class.
  if command.use_argparse is true,
  define the function default with 2 arguments value and arg.
  If you see valid patterns in the file then the issue is probably caused by a circular import."   raise an ImproperlyConfigured exception with an argument: return value of the method msg.format, called with an argument name set to self.urlconf_name.
  return output.
  finally perform,
  define the method __str__ with an argument self.
  instantiate class Truncator, with an argument value, call the method chars on the result with an argument length, return the result.
  if value under the 'author_link' key of the self.feed dictionary is not None,
  define the function localtime with 2 arguments: value and timezone set to None.
  define the method decompress with 2 arguments: self and value.
  if NameError exception is caught,
  from django.utils import six into default name space.
  updates is an empty dictionary.
  if '.' is contained in last elements of hextets,
  import module random as random_module.
  raise an CommandError with argument: string "Can't resolve dependencies for %s in serialized app list.", where '%s' is replaced with:
  if self has an 'error_dict' attribute,
  write string "No conflicts detected to merge." to self.stdout stream.
  call the method execute form the base class of the class Command, with 2 arguments: unpacked list args and unpacked dictionary options.
  call the function add_to_builtins with an argument string 'django.template.loader_tags'.
  return value.
  from django.http import QueryDict into default namespace.
  if iri is not initialized,
  call the method get_language, substitute the result for language_code.
  from django.utils.encoding import force_str and force_text into default name space.
  _urllib_error_moved_attributes is a list with 3 elements: result of the call to the function MovedAttribute with 3 arguments:
  raise an TemplateSyntaxError exception with an argument string "'%s' received multiple values for keyword argument '%s'",
  define the method close with argument self.
  if not,
  call the method self._assert_mutable.
  if fname is contained in self._list_cache_files method return value,
  return nothing.
  append value under the key v of foreground dictionary to code_list.
  call the function timedelta with an argument seconds as negative time.timezone, subtract the result from the result of the call,
  from django.core.management.base import BaseCommand into default name space.
  try,
  for every line in chunk_buffer,
  define the function lazy_number with 4 arguments: func, resultclass, number set to None and unpacked dictionary kwargs.
  define the function partition with 2 arguments: predicate and values.
  substitute inverse_match for self.inverse_match.
  call the method date_value.strftime with an argument input_format, return the result.
  called with 2 arguments: request and response.   call the method response.add_post_render_callback with an argument callback.
  if self has an attribute '_coerce',
  pos is equal to integer 0.
  from django.core.exceptions import ImproperlyConfigured into default name space.
  if Resolver404 exception is caught,
  ch is None.
  for every k and v in return value of the method self.kwargs.items.   return resolved_args and resolved_kwargs.
  get the element with maximal value between initial_forms and self.min_num, add self.extra to it, substitute the result for total_forms.
  do nothing.
  evaluate the function bytes with the argument s, and return the result.
  get format_type attribute of the settings object, return it.
  __version__ is a string "0.1".
  if tag is contained in self.CDATA_CONTENT_ELEMENTS,
  call the function six.reraise with 3 arguments: class ValidationError, class ValidationError, created with 3 arguments:
  append '.' to name, substitute the result for prefixed.
  delete _prefixes.values.
  if app_config.models_module is None,
  import module copy.
  call the method self.fk.rel.to, substitute the result for self.instance.
  return an instance of a URLNode class, created with 4 arguments viewname, args, kwargs and asvar.
  join statements into a string, separated by newlines, return it.
  if r ends with string '+00:00',
  from django.core.mail.backends.base import BaseEmailBackend into default name space.
  unpacked dictionary kwargs.   call the method self._set_regex with an argument regex.
  substitute obj for value under the self.var_name key of the context dictionary.
  for every pattern in reversed list self.url_patterns,
  join into a path: path and string '%s.pot', where '%s' is replaced with self.domain converted into a string.
  return id_.
  call the self._list_cache_files method, substitute the result for filelist.
  input_type is a string 'email'.
  if settings.USE_X_FORWARDED_HOST is true and 'HTTP_X_FORWARDED_HOST' is contained in self.META.
  func is an instance of TemplateLoader class, created with unpacked list args.
  define the function render_value_in_context with 2 arguments: value and context.
  call the function template_localtime with 2 arguments: obj and context.use_tz, substitute the result for obj.
  call the method archive.extract with an argument to_path.
  append length of result to non_capturing_groups.
  define the function cache_info.
  call the datetime.datetime.utcfromtimestamp with timestamp converted to an integer as argument, substitute result for timestamp.
  fail_message is a string 'created'.
  define the method __multiple_chunks__ with arguments self and chunk_size defaulting to None.
  raise an TemplateSyntaxError exception with an argument string "'%s' cannot appear more than once in the same template",
  if self.body is true,
  return an string "<IfNode>".
  substitute content_type for self.content_type.
  cookiedict is an empty dictionary.
  define the function prefix with 2 arguments bp and func.
  get attribute 'pk' of the pk_value object, if it doesnt exists use pk_value, set to it self.fk.get_attname return value attribute,
  rise an KeyError exception with an argument key.
  call the method self.as_data, for every error in the result.
  from django.utils.six.moves import input into default name space.
  django.utils import translation into default namespace.
  return retval.
  for every taglib in bits without the first element,
  try,
  try,
  if TypeError or ValueError exceptions are caught,
  if length of parts is greater than integer 1.
  define the method send_messages with arguments self and email_messages.
  convert first 2 elements of django.VERSION into a strings, join them together, separated by a '.', substitute the result for docs_version.
  covert to lowercase language elements from (p+1)-th index to the end, append it to the previous result, return it.   if not,
  and pk.rel.parent_link is true and function pk_is_not_editable called with an argument pk.rel.to._meta.pk evaluates to true,   if function pk_is_not_editable called with an argument pk evaluates to true, or pk.name is not contained in form.fields,
  get the value under the value key of a dictionary with 6 entries: boolean True for '2', boolean True for boolean True,
  g is an instance of a class generator.Generator called with fp and mangle_from_ set to False.
  call the self.setup_environ method.
  define the function modelformset_factory with 18 arguments: model, form set to ModelForm, formfield_callback set to None,
  call the function import_string with backend if exists or settings.EMAIL_BACKEND if not, store the result into klass.
  from django.conf import settings into default name space.
  define the method new_file with arguments: self, unpacked list args and unpacked dictionary kwargs.
  substitute self for result.parent.
  from django.utils import autoreload into default name space.
  _iterkeys is a string "iterkeys".
  from django.core.exceptions import ValidationError and NON_FIELD_ERRORS into default name space.
  filesize_number_format with result of division of bytes by PB as an argument, substitute the result for value.   call the function avoid_wrapping with an argument value, return the result.
  if template_dir is directory,
  if OSError, renamed to e, is caught,
  try,
  define the method migration_progress_callback with self class instance, action, migration and fake set to boolean False as arguments.
  if not,
  substitute the value under the 'socket' key of options dictionary for value under the 'bindAddress' key of wsgi_opts dictionary.
  evaluates to true,   split middle into two parts from the right by '@' character, assign the resulting parts to local and domain.
  return context.
  if ValueError exception is caught,
  call the method self.get_full_path, append the result to string '//', substitute it for location.
  call the method stream.unget with an argument chunk.
  call the method dot_re.sub with 2 arguments: char and src, return the result.
  if value is None and attr is contained in declared_fields,
  if domain_part is not contained in self.domain_whitelist and method self.validate_domain_part with an argument domain_part evaluates to false,
  if obj is instance of models.signals.ModelSignal class,
  call the function six.reraise with 3 arguments: ImportError, instance of ImportError class created with an argument msg,
  close is boolean True.
  join elements of code_list in a string, separated by ';', format string '\x1b[%sm' with it, append text to the result if exists,
  substitute the result for value under 'mailhost' key of config dictionary.   otherwise if klass is subclass of logging.handlers.SysLogHandler class, and string 'address' is contained in config,
  skip this loop iteration.
  call the function
  return wrapper.
  derive the class DisallowedRedirect from the SuspiciousOperation base class.
  call the function os.unlink with an argument work_file.
  return cookiedict.
  derive the class MemoryFileUploadHandler from the FileUploadHandler base class.
  substitute s for self.s.
  if IndexError exception is caught,
  call the method resolver._reverse_with_prefix with 4 arguments: view, prefix, unpacked list args, unpacked dictionary kwargs,
  join self.dirpath and self.file in a string, substitute with it '%s' in string "<TranslatableFile: %s>", return the result.
  default_error_messages is a dictionary with 4 initial entries: return value of the function _ called with string as an argument,
  return val.
  and truncate, return the result.   return elements of words joined in a string, separated with whitespaces.
  if TemplateDoesNotExist exception is caught,
  substitute limit_choices_to for self.limit_choices_to.
  call the method MIMEText.__setitem__ with arguments self, name and val.
  for every k and v in return value of the method module.__dict__.items, only if result of the method omittable called with an argument k is false.   derive the class Command from the BaseCommand base class.
  return f.
  extend list inner_args with args.
  from django.utils.timezone import is_aware into default name space.
  changed is boolean False.
  call the function next_char with an argument iterator pattern, substitute the result for pattern_iter.
  if attribute 'winerror' of object e is not equal to integer 32 and if 'errno' attribute is not equal to integer 13,
  define the function slugify with an argument value.
  value under the BLOCK_CONTEXT_KEY key of context.render_context dictionary is BlockContext class instance.
  if not, sself.empty_value is an empty string.   call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs,
  _cached_modules is an empty set.
  for every i in range of integers from integer 0 to the length of pieces decremented by one, with step of integer 3,
  raise an CommandError with an argument string "errors happened while running msgmerge\n%s", where '%s' is replaced with errors.
  non_capturing_groups is an empty list.
  split t.contents by '|' symbol, substitute the result for parts,
  call the function get_template with an argument file_name, substitute the result for t.
  if size equals to integer zero.
  if value is false or character '@' is not contained in value,
  call the function fn with list of arguments args and dictionary of argument values kwargs.
  extend errors list with e.error_list.
  call the function check_errors with argument main_func, substitute the result for wrapped_main_func.
  return boolean False.
  request user input from the standard input, assign it o confirm, with the query string: "You have requested a flush of the database."
  self.filters is an empty dictionary.
  substitute value under the "_wrapped" key of the self.__dict__ dictionary.
  if constant is true,
  has_bz2 is boolean False.
  for every f in fields,
  if file_name is false,
  define the function sql_create with 3 arguments: app_config, style and connection.
  if column_name is contained in indexes,
  call the method value.replace with an arugment tzinfo set to None, return the result.
  initialize the object of a InMemoryUploadedFile class with arguments: file set to self.file, field_name set to self.field_name,
  substitute the result for i-th element of lines.   if not,
  if self.file_path is not an instance of six.string_types,
  substitute absolute seconds for seconds.
  if ImportError, renamed to exc, exception is caught,
  if use_workaround is boolean False,
  result of the method ProjectState.from_apps with an argument apps and result of the method InteractiveMigrationQuestioner,   called with 2 arguments specified_apps set to app_labels and dry_run set to self.dry_run.   if self.empty is true,
  define the method __setattr__ with 3 arguments: self, name and value.
  subtract _cached_modules from module_values, assign the result to new_modules.
  substitute tuple with 2 elements: bz2.BZ2File and string 'r' for value under the 'bz2' key of the self.compression_formats dictionary.
  import module errno.
  plural is an empty list.
  define the __call__method with arguments self, unpacked list args and unpacked dictionary kwargs.
  substitute old_attr for self.attr.
  self.namespaces is an empty list.
  call the function initial_value, substitute the result for initial_value.
  tuple with 2 elements: upto and start and boolean False, append the result to result.   substitute start for upto.
  call the method parser.add_argument with arguments: string 'args' and nargs set to '*'.
  derive the class BaseTemporalField from the base class Field class.
  define the method with reload with an argument self.
  define the function validate_ipv46_address with an argument value.
  call the function get_callable.cache_clear.
  define the function firstof with 2 arguments: parser and token.
  return boolean True, otherwise return boolean False.   property decorator.
  if not,
  divide hits by a floating point number self.per_page, convert its ceiling value to an integer and substitute it for self._num_pages.
  try,
  self._done is boolean True.
  from django.utils.six.moves import html_parser as _html_parse into default name space.
  append string "Field renamed because it contained more than one '_' in a row." to field_notes.
  where '%s' is replaced with last element of args.   as_form is boolean True
  join rendered_widgets into a string, return it.
  define the function set_urlconf with an argument urlconf_name.
  if val is an instance of tuple,
  if not,
  call the method logging.getLogger with an argument name, substitute the result for logger.
  raise an TemplateSyntaxError with an argument string "%r tag takes at least one argument: the name of the template to be included.",
  evaluate the function BytesIO with argument chunk, substitute it for chunk_buffer.
  define the function module_has_submodule with 2 arguments: package and module_name.
  define the method __getitem__ with arguments self and name.
  decorator stringfilter,
  call the function force_bytes with argument content, substitute it for content.
  if response.status_code is lesser than integer 200 and grater or equal than 100, or response.status_code equals to integer 204 or 304,
  if tried is true,
  decorator stringfilter,
  if field is an instance of InlineForeignKeyField class,
  call the method self.extend_nodelist with 3 arguments: nodelist, var_node and token.
  options_list is an empty tuple.
  define the method _get_count with an argument self.
  return boolean True.
  call the method parts.reverse.
  if auto_id is true and 'id' is not contained in attrs and 'id' is not contained in widget.attrs,
  call the method self.setlist with 2 arguments: key and default_list.
  call the method lookups.appendlist with 2 arguments: pattern.callback and a tuple containing 3 elements: bits, p_pattern,
  from .html_parser import HTMLParser and HTMLParseError into default name space.
  split lang_code by '-', substitute the first element of the result for generic_lang_code.
  if not,
  call the method handler.addQuickElement with 2 arguments: string 'description' and value under the 'description' key of item dictionary.
  extend all_locales list with the elements of locale_dirs list on which os.path.basename function was applied.
  call the method add_arguments from the base class of the class Command, with an argument parser.
  define the method __len__ with an argument self.
  call the method self.render, return the result.
  return the directory name two directories up from the __file__ path, join it with 'conf' and 'locale' into valid path, separated by '/', basedirs is a list containing 2 elements: previous result and string 'locale'.
  get the value under the name key of self.blocks dictionary, insert to it block at the beginning.
  call the function write with an argument sep.
  if not,
  endless loop,
  return boolean True.
  for statements is sql,
  try,
  call the method pop from the base class of the class QueryDict, with arguments key and unpacked list args, return the result.
  breaks from the smallest enclosing loop.
  otherwise if value under the "author_name" key of the item dictionary is true,
  from django.utils.html import escape into default name space.
  raise an exception.
  define the method _wrapper with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  if priority is true,
  call the function get_resolver with an argument urlconf, on the result call the method resolve with an argument path, return it.
  from django.utils.six.moves import input into default name space.
  required set to required, widget set to widget, label set to label, initial st to initial, help_text set to help_text,   unpacked list args, unpacked dictionary kwargs.   if self.required is true,
  if value under the 'verbosity' key of the options dictionary is greater than zero,
  from django.utils.encoding import force_text into default name space.
  call the function import_string with an argument loader, substitute the result for TemplateLoader.
  return value under the name key of the files dictionary, if it doesnt exists, return None.
  reminder of the division of floored result of division of seconds by 60, by integer 60.   define the method P with an argument self.
  derive the SimpleUploadedFile class from the InMemoryUploadedFile base class.
  if name is boolean False raise an assert error with message string "The name argument is not allowed to be empty.".
  call the method match.groupdict, substitute the result for kw.
  if not,
  reverse settings.LOCALE_PATHS element order, for every localedir in the result,
  return self._wrapped.__dict__.
  call the baseconv.base62.decode method with an argument timestamp, substitute the result for timestamp.
  requires_system_checks is boolean False.
  content_length is integer 0.
  call the function glob.glob with an argument: string '/*' appended to self.default_locale_path converted into a string,
  from functools import partial into default name space.
  define the function striptags with an argument value.
  called with an argument value, substitute the result for value under the 'initial' key of the substitutions dictionary.   if self.is_required is false,
  define the function parse_datetime with an argument value.
  otherwise if first element of second row of args equals a string '3',
  call the self.handle_app_config method with app_config and options as arguments, substitute the result for app_output.
  call the method self.check,
  from django.conf import settings into default name space.
  if widget is false,
  define the function memoize with 3 arguments: func, cache and num_args.
  if StandardError, renamed to e, exception is caught,
  if obj_list is None,
  decorator function register.filter with 3 arguments string "slice", is_safe set to boolean True and needs_autoescape set to True.
  call the method self.connection.sendmail with arguments: from_email, recipients and return value of the function message.as_bytes.
  if self.loaded_object_count is greater than zero,
  define the method eval with 2 arguments: self and context.
  called with arguments v and self.encoding, extend the output with the result.   join elements of the output into a string, separated with '&', return the result.
  call the method serializers.serialize with 6 arguments: format, result of the function get_objects, indent set to indent,
  call the function split_url with an argument value, substitute the result for url_fields.
  _CacheInfo is an instance of namedtuple class created with 2 arguments: string "CacheInfo" and a list with 4 elements: string 'hits',
  call the method lookups.appendlist with 2 arguments: pattern.name and a tuple containing 3 elements: bits, p_pattern,
  yield string 'day' as an return value of the generator.
  get the value under the 'id' key of the self.attrs dictionary, return it, if the key doesnt exists return an empty string.
  try,
  substitute serialize_headers for __bytes__.
  if s is instance of a class Promise,
  if invalid_var_format_string is true,
  call the command.execute method with arguments: unpacked list args and unpacked dictionary defaults, return the result.
  replace every occurrence of '</' in s with '<\\/'.
  try,
  input_type is a string 'hidden'.
  split first element of hextet into parts by ':', append them to new_ip.
  call the method self._isdst with an argument dt, if it evaluates to true,
  if extend is boolean True,
  return the value under the self.data.month key of the MONTHS_AP dictionary.
  replace this value with v.   call the function dictvalue with el as argument for every el in values of dictionary cc,
  substitute class_name for self.class_name.
  create the object WSGIServer with 2 arguments: get_internal_wsgi_application return value and unpacked dictionary wsgi_opts, call the method run on it.
  convert header to lowercase, use it as the key to get the value from the self._headers dictionary, return the second element of the result.
  derive the class Command from the base class BaseCommand.
  compile a regular expression pattern string '([a-zA-Z][-.a-zA-Z0-9:_]*)(?:\s|/(?!>))*' into a regular expression object and assign it to tagfind.
  call the method self.write with 2 arguments: s and encoding.
  replace '%s' in string "  Optimized from %s operations to %s operations." with lengths of operations and ew_operations, respectively,
  if not,
  otherwise if first element of message_context equals to character "'",
  append bytes to chunks.
  if not self.error_messages is None.   derive the class ModelFormMetaclass from the DeclarativeFieldsMetaclass base class.
  from django.utils.text import normalize_newlines and slugify as _slugify into default name space.
  define the method _setup with an argument self.
  if not,
  return boolean False.
  raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,
  substitute 3 successive elements starting from the i-th index of pieces for first, lang and priority, respectively.
  filename is a tuple containing 3 initial elements: string 'utf-8', and empty string and filename.
  yield buf as return value of the generator.
  if format is not contained in _serializers,
  for every punctuation in TRAILING_PUNCTUATION,
  if other is contained in self.children, return boolean True, otherwise return boolean False.
  if value is contained in self.empty_values,
  help is a tuple containing a string: 'Removes ALL DATA from the database, including data added during '
  call the method self.validate with an argument value.
  return message.
  or with an empty string if its not, append the resulting string to full_statement.   append string ');' to full_statement.
  call the method content.message, substitute the result for content.
  derive the class Signer from the object base class.
  call the get_complete_version function with version as argument, store the result in version.
  define the method _render with 2 arguments self and context.
  'SafeMIMEMultipart', 'DEFAULT_ATTACHMENT_MIME_TYPE', 'make_msgid', 'BadHeaderError', 'forbid_multi_line_headers',   'get_connection', 'send_mail', 'send_mass_mail', 'mail_admins' and 'mail_managers'.   define function get_connection with backend set to None, fail_silently set to boolean False and dictionary kwds as arguments.
  define the method run_from_argv with arguments self and argv.
  define the method write with 2 arguments: self and s.
  return nothing.
  call the method router.get_migratable_models with argument: app_config, connection.alias and include_auto_created set to True, substitute the result for app_models.
  if exists, if not use None as the second argument, return the result.   call the function MigrationExecutor with connection and self.migration_progress_callback as arguments, substitute the result fro executor.
  if id_for_label is true,
  call the method questioner.ask_merge with an argument app_label, if it evaluates to true,
  derive the class FieldError from the Exception base class.
  call the method self.get_date_error_message with an argument date_check, append the result to errors.
  for every ldir in dirs,
  substitute subject for self.subject.
  then the first element of the result of the function formats.get_format called with an argument self.format_key, return the result.   derive the class DateInput from the DateTimeBaseInput base class.
  return None.
  call the function datetime_safe.new_datetime with an argument date, on the result call the method strftime with an argument,
  write raw_data to self.file file.
  derive class FileProxyMixin from the base class object, making it a new-style class.
  if self.field.choice_cache is None,
  _version is a string "0.91".
  if self.use_natural_foreign_keys is true and field.rel.to has an attribute 'natural_key',
  if self.field.localize is true,
  convery value into a tuple, substitute it for value.
  append filename to _error_files.
  define the method _get_page_range with an argument self.
  if self.can_import_settings is false,
  call the method handler.addQuickElement with 2 arguments: string 'copyright' and value under the 'feed_copyright' key of the self.feed dictionary.
  substitute settings.TEMPLATE_STRING_IF_INVALID for current,
  binary or 'O_BINARY' attribute of the os object, or integer 0 if it doesnt exists.   call the os.open function with full_path, flags and octal number 0o666 as arguments, substitute the result for fd.
  if not,
  self.month_none_value is a tuple containing 2 elements: integer 0 and second element of empty_label.
  call the function urlsplit with an argument url, assign the result to scheme, netloc, path, query and fragment, respectively.
  call the function force_text with an argument val, if the result is not contained in pks,
  call the method parser.find_filter with an argument filter_name, substitute the result for filter_func.
  define the function walk_to_end with 2 arguments ch and input_iter.
  raise an TemplateSyntaxError exception with an argument string "Invalid syntax in widthratio tag. Expecting 'as' keyword".
  from django.utils import six into default name space.
  break from the loop execution
  if neg is true,
  convert whitespace character to unicode and substitute the result for space.
  return is boolean False.
  call the function force_text with an argument value, substitute the result for text_value.
  call the method compiled_parent._render with an argument context, return the result.
  define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
  define the method is_hidden with an argument self.
  try,
  if IndexError exception is caught,
  call the method self._stream.read with an argument integer 1, substitute the result for unused_char.
  raise an ImproperlyConfigured exception with argument string 'Could not write to directory: %s', replace '%s' with self.file_path.
  substitute name for self.name.
  define the method error with arguments self and message.
  substitute the result for last element of output.   if not,
  call the method get_runner with 2 arguments: settings and value under the 'testrunner' key of the options dictionary, substitute it for the TestRunner.
  define the method eval with 2 arguments: self and context.
  if six.PY2 is true,
  call the function warnings.warn with 2 arguments: string '"requires_model_validation" is deprecated '
  value under the self key of state_frame dictionary is None.
  convert x into a string for every x in list of version elements up to the parts index, join the previous into a string separated by '.', assign the result to major.
  import module inspect.
  if _localtime is None,
  replace '%s' in string "System check identified some issues:\n%s" with msg, substitute it for msg.
  substitute raw_data for data.
  from django.template.base import TemplateDoesNotExist into default name space.
  substitute before_import_registry for register_to._registry.
  convert if into a string append to it a string '_month', return the result.
  define private method __getattr__ with self class instance and attr as the arguments.
  value under the TOTAL_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,
  call the method __init__ from the base class of the class ContextDict, with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  c is an empty list.
  convert tagname to lowercase, substitute it for tagname.
  call the self.stdout.write method with string " (no migrations)" and self.style.MIGRATE_FAILURE as arguments.
  if event.path ends with string '.mo',
  substitute value for value under the self.variable_name key of the context dictionary.
  define the function decorator_from_middleware with an argument middleware_class.
  if return value of the function connection.introspection.table_name_converter called with an arugment: model._meta.db_table is contained in table_names
  if cc contains item 'max-age' and kwargs contains item 'max_age',
  if not,
  call the method __init__ from the base class of the class CharField, with arguments unpacked list args and unpacked dictionary kwargs.
  valid is boolean True.
  call the function type with 3 arguments: string 'WSGIServer', tuple containing 2 elements: socketserver.ThreadingMixIn and WSGIServer,
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  define the method _archive_cls with an argument file.
  to the negative length of the dir_suffix as the end index and append it to a list,   if p doesnt end with dir_suffix, append p to a list, substitute resulting list for norm_patterns.   all_files is an empty list.
  if self.regex is not an instance of a six.string_types type,
  and time.tzinfo, return the result.   define the method date with an argument self.
  define the method handle_field with argument self, obj and field.
  define the method __enter__ with an argument self.
  substitute value under the 'prefix' key of dictionary d, substitute it for prefix.
  get the value under the 'indent' key of self.options dictionary, if it is true,
  value under the app_config key of the app_list is None.
  for every app_name and mode_list in return value of manifest.items method,
  call the function make_key with 3 arguments: args, kwds and typed, substitute the result for key.
  all the method field.rel.to._meta.get_field with field.rel.field_name as argument, call the to_python method on the result with,
  separated by newline, use it as an argument for the call to the function mark_safe, return the result.   define the function formset_factory with 9 arguments: form, formset set to BaseFormSet, extra set to integer 1,
  call the function select_template with 2 arguments: template_name, dirs, substitute the result for t.
  raise an CommandError exception with an argument string 'Your Python does not support IPv6.'.
  from django.db.migrations.executor import MigrationExecutor into default name space.
  try,
  with return value of the function io.open with fname and string 'rb' as arguments, named as f,
  define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.
  yield node.
  for every reference and receivers in return value of the call of obj.unresolved_references.items method,
  output is an empty list.
  import module zipfile.
  define the method __init__ with 4 arguments: self, redirect_to, unpacked list args and unpacked dictionary kwargs.
  define the method __init__ with 3 arguments: self,unpacked list args and unpacked dictionary kwargs.
  derive the class DeclarativeFieldsMetaclass from the base class MediaDefiningClass.
  _iterkeys is a string "keys".
  match rest string with self.INDEX_PATTERN regex, substitute the result for m.
  define the method deleted_forms with an argument self.
  get the value under the key 'interactive' of options dictionary, substitute it for interactive.
  locale_dir is None.
  if fixture_name is an absolute file path,
  call the os.remove function with argument name.
  return self._num_pages.
  add j and integer 1, substitute the result for i.
  define the method items with an argument self.
  truncate first size number of elements of self.buffer.
  define the method __eq__ with arguments self and other.
  if next_item is true and next_item is an instance of list or tuple type,
  formated with t.contents, filemsg and t.lineno.   otherwise if t.token_type equals TOKEN_VAR,
  append options to output.
  call the method formats.get_format_lazy with an argument string 'DATE_INPUT_FORMATS', substitute the result for input_formats.
  from django.utils import six into default name space.
  if regex_match is false,
  substitute the limit_value for self.limit_value.
  call the method handler.addQuickElement with 2 arguments: string 'published' and result of the function rfc3339_date,
  if AttributeError exception is caught,
  call the method self.indent with argument integer 2.
  num is an integer 0.
  if errors is true,
  call the function _load_serializers.
  call the self.request_class method with environ as an argument, substitute the result for request.
  if sign is true,
  define the method to_python with arguments self and value.
  try,
  call the function http_cookies.SimpleCookie, on the return value call the value_encode method, with the argument character ';',
  call the function get_language, substitute the result for language_code.
  call the function re.compile with an argument string "([\u0080-\uffff])", substitute the result for ustring_re.
  if IOError, substituted to e, exception is caught,
  for every app in sorted return value of the commands_dict.keys function,
  call the method self.configure_logger with 3 arguments: name, value under name key of loggers dictionary and boolean True.
  define the function clean_ipv6_address with 3 arguments: ip_str, unpack_ipv4 set to boolean False and error_message,
  do nothing.
  substitute value for self.value.
  substitute deconstruct for klass.deconstruct.
  get the value under the 'no_startup' key of the options dictionary, if it evaluates to false,
  define the method __init__ with 2 arguments: self and language.
  derive the class CheckRegistry with object as base class.
  call the method self._post_clean.
  groupid is a string "t%d" formated with tok.id.
  from django.core.files.uploadedfile import TemporaryUploadedFile and InMemoryUploadedFile into default name space.
  self.lookups is None.
  if submod is true and return value of the function module_has_submodule called with 2 arguments: result of the function:
  call the function mark_safe with an argument word, substitute the result for i-th element of words.
  call the force_text function with an argument value, return the result.
  use the result as an argument for the call to the function force_text, return the result.   call the function allow_lazy with 2 arguments: urlunquote and six.text_type, substitute the result for urlunquote.
  return boolean True.
  if pickle.PickleError exception is caught,
  return the first element of self.client_address.
  define the method __prepare_class__ with an argument self.
  LOCK_EX, LOCK_SH and LOCK_NB are all equal to integer 0.
  if KeyError exception is caught.
  if self.file has an attribute 'name',
  define the method get_meta with arguments self and table_name.
  return nothing.
  call the function localize with 2 arguments: output and use_l10n set to context.use_l10n, substitute the result for output.
  if args in true,
  call the method self.args_check with 3 arguments: filter_name, filter_func and args.
  substitute i for self.pointer.
  call the function os.makedirs with argument directory.
  inner_result and inner_args are empty lists.
  substitute widget for self.widget.
  if first is true,
  decorator classmethod,
  call the method self.splitext with an argument guessed_filename, substitute the second element of the result for ext.
  derive the class ModelFormOptions from object base class.
  for every header in headerlist,
  if AttributeError exception is caught,
  dest as a string 'symlinks', default as boolean False and help as a string 'Follows symlinks to directories when examining '   'source code and templates for translation strings.'.   call the method parser.add_argument with 7 arguments: string '--ignore', string '-i', action as a string 'append',
  substituet node for value under the name key of the parser._namedCycleNodes dictionary.
  errors is an empty list.
  define the function deactivate.
  define the method to_python with arguments self and value.
  define compile_messages method with self class instance and locations as a arguments.
  try,
  define the method load with self class instance and rawdata as arguments.
  call the function local, substitute the result for _active.
  call the function token_kwargs with 3 arguments: remaining_bits, parser, support_legacy set to boolean False, substitute the result for value.
  if value is an instance of six.string_types and value converted to lowercase is not equal to strings 'false' or '0',
  boolean_attrs is an empty list.
  if the Exception exception is caught,
  slice the rawdata from i-th to the j-th element, replace with it '%r' in the string "bad end tag: %r", use it to call the method self.error.
  append self.choices to args.
  get the type of the self object, on the result call the __bool__ method with an argument self, return the result.
  CRITICAL is integer 50.
  import module sys.
  remove the 'stream' key from the options dictionary and substitute it for self.stream,
  substitute the self.DEFAULT_CHUNK_SIZE for chunk_size.
  define the method S with an argument self.
  call the function _checkLevel with an argument level, use the result as an argument for the call to the method logger.setLevel.
  if not,
  define the method errors with an argument self.
  return val.
  call the function get_mod_func with an argument mod_name, store the result in parentmod and submod, respectively.
  substitute char '0' for the value under the 'Content-Length' key of the response dictionary.
  if value is not equal to value or value equals return value of the call to Decimal with argument 'Inf',
  call the method middleware.process_request with an argument request, substitute the result for result.
  call the function _add_doc with 2 arguments: get_unbound_function and string """Get the function out of a possibly unbound function""".
  if last element of line is newline or carriage return character,
  import module copy.
  define the function remove_move with an argument name.
  where '%s' is replaced with request.__class__.__name__, path, return value of the function six.text_type called with an argument get,   return value of the function six.text_type called with an argument post, return value of the function six.text_type,   called with an argument cookies and return value of the function six.text_type called with an argument meta.   define the function bytes_to_text with 2 arguments s and encoding.
  where '%s' is replaced with token.contents.   call the method parser.compile_filter with an argument, in_index incremented by one, and used to index parser.compile_filter,
  if second element of sys.version_info is smaller than or equal to integer 1,
  dest set to string 'load_initial_data', default set to True,   help containing string 'Tells Django not to load any initial data after database synchronization.' as arguments.   call the method parser.add_argument with string '--database', action containing string 'store', dest set to string 'database',
  derive the class SuspiciousOperation from the Exception base class.
  if not,
  define the method __len__ with an argument self.
  substitute settings.CACHE_MIDDLEWARE_KEY_PREFIX for key_prefix.
  call the method self.read, substitute the result or self._body.
  substitute _urllib_robotparser_moved_attributes for Module_six_moves_urllib_robotparser._moved_attributes.
  call the function fcntl.flock with return value of the _fd(f) function and flags as arguments, substitute the result for ret.
  return the result of the call to the function chain, with an argument unpacked list, containing the result of the function,
  dest set to string 'use_threading', default set to boolean True and help set to 'Tells Django to NOT use threading.'.   call the method parser.add_argument with 5 arguments: string '--noreload', action set to string 'store_false',
  import module decimal.
  call the self.run method with unpacked dictionary options as an argument.
  join output into a string, separated by newline characters, use it as an argument for the call to the mark_safe, return the result.
  call the function urlquote with argument var for every var in vary_on, join the results into a string separated by ':', substitute it for key.
  stats is a list with 2 elements: 2 integers 0.
  append app_output to output.
  call the method self.func with an argument value.
  if tok.next is true,
  call the function warnings.warn with 3 arguments: string "django.utils.importlib will be removed in Django 1.9.",
  call the method self.g, return the result.
  if filename ends with string '.mo' return I18N_MODIFIED, otherwise return FILE_MODIFIED.
  call the function _checkLevel with an argument level, use the result as an argument for the call to the function handler.setLevel.
  call the function force_bytes with an argument salt, substitute the result for salt.
  from django.dispatch import receiver into default name space.
  call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, return the result.
  raise an ImproperlyConfigured exception wiht an argument string 'Command %s defines both "requires_model_validation" '
  from django.core.handlers.wsgi import WSGIHandler into default name space.
  if self.forms is true,
  decorator function register.filter with an argument is_safe set to boolean True.
  call the method self.fields.items, for every name and field in result,
  define the function get_current_timezone.
  if first element of sys.version_info equals integer 2, PY2 is boolean True, otherwise it is boolean False.
  try,
  split s into parts by '.', substitute the result for name.
  append list containing string '--no-wrap' to self.msguniq_options.
  if git_changeset is true,
  call the function fields_for_model with 9 arguments: opts.model, opts.fields, opts.exclude, opts.widgets, formfield_callback,
  value under the DELETION_FIELD_NAME key of the form.fields is an instance of BooleanField class, created with 2 arguments:
  while model_dependencies is true,
  raise a ValueError exception with an argument string "JSON can't represent timezone-aware times.".
  from django.template.base import TemplateDoesNotExist into default name space.
  if self.silent is true,
  otherwise if domains equals a string django' and, file_ext equals '.py' or file_ext is contained in command.extensions,
  from django.core.management.base import AppCommand into default name space.
  handler is an instance of SimplerXMLGenerator class, created with 2 arguments: outfile and encoding.
  call the method query.items, substitute the result for query.
  define the method __setitem__ with 3 arguments: self, key and value.
  from django.apps import apps into default name space.
  set result attribute name to value value.
  skip this loop iteration.
  define the method _handle_fk_field_node with arguments self, node and field.
  call the method self._lock, with the return value,
  slice migration.ancestry list from the last result as an starting index to the end, substitute the slice for migration.branch.   migration.merged_operations is an empty list.
   _assertRaisesRegex is a strnig "assertRaisesRegex".
  convert self into a string and return it.
  substitute dt for self.__dt.
  substitute result of the function urlparse with an argument ur1 for p1 and result of the function urlparse with an argument ur2 for p2.
  append mw_instance.process_view at the end of self._view_middleware.
  call the method MIMEText.__init__ with 4 arguments: self, text, subtype and None.
  call the method self._send with argument message, substitute the result for sent.
  update self dictionary with updates.
  if self.selected_fields is None or field.attname is contained in self.selected_fields
  do nothing.
  append a tuple containing 3 elements: filename, content, mimetype to self.attachments list.
  call the method urlresolvers.RegexURLResolver with raw literal string '^/' and urlconf as the arguments, substitute the result for resolver.
  if field_value is an instance of the str type,
  define the method _get_page with self class instance, unpacked list args and unpacked dictionary kwargs as arguments.
  help is a string "Starts a lightweight Web server for development.".
  define the method _has_changed with 3 arguments: self, initial and data.
  return last element of list_.
  if level is true,
  define the method _has_changed with arguments self, initial and data.
  define the function extract with 2 arguments path and to_path set to empty string.
  call the function touch_import with 3 arguments: string 'django.utils.encoding', string 'python_2_unicode_compatible' and decorated.
  if not,
  define the method __init__ with 6 arguments self, parent_widget, name, value, attrs and choices.
  if app_config.models_module is None,
  call the method result.setlist with the arguments: key and value.
  raise an RuntimeError exception with an argument string "The method to extend accepted command-line arguments by the "
  call the method self.open.
  for every lineno and line is enumerated result of the method content.splitlines, called with an argument boolean True,
  self.template_cache is an empty dictionary.
  derive the class RequireDebugTrue from logging.Filter base class.
  skipped is an empty list.
  call the method field.widget.value_from_datadict with 3 arguments: self.data, self.files and return value of the method,
  define the method __iter__ with an argument self.
  call the method t.nud with an argument self, substitute the result for left.
  call the method token.split_contents, substitute the result for bits.
  return an instance of IfEqualNode class, created with 5 arguments: val1, val2, nodelist_true, nodelist_false and negate.
  define the method tzname with 2 arguments: self and dt.
  call the function is_valid_ipv6_address with an argument value, if it evaluates to false,
  where '%s' is replaced with first element of bits.   otherwise if options equals 'only',
  password set to auth_password, fail_silently set to fail_silently as arguments, assign the result to connection.   call the EmailMessage function wit subject, message, sender, recipient and connection set to connection,
  skip this loop iteration.
  define the method negate with an argument self.
  for every model in app_models,
  value is an empty list.
  ns_resolver is class instance of a class RegexURLResolver, created with 2 arguments: ns_pattern and resolver.url_patterns.
  raise an ValueError exception with an argument string 'Unable to set formatter %r: %s' formated with formatter and e.
  call the function ugettext with an argument string "%s GB", substitute '%s' with the result of the call to the function,
  self._empty is boolean False.
  call the self.style.MIGRATE_HEADING method, with string "Operations to perform:" as an argument,
  for every model in model_list,
  return dictionary created out of tuple elements k and printable representation of v,
  append string 'max_digits and decimal_places have been guessed, as this database handles decimal fields as float' to field_notes.
  call the method token.split_contents, convert the result into a list and substitute it for bits.
  call the function os.getpid, substitute it for pid.
  cut the last 6 elemetns from r, append character 'Z' to it, substitute the result for r.
  call the function new_method_proxy with an argument operator.contains, substitute the result for __contains__.
  define the method __deepcopy__ with arguments self and memo.
  otherwise if ':' is not contained in middle and result of the function simple_email_re.match called with an argument middle,
  return template.
  define the method file_complete with arguments self and file_size.
  __all__ is a list with 15 elements: strings 'utc', 'get_fixed_timezone', 'get_default_timezone', 'get_default_timezone_name',
  call the method self._get_scheme, return the result.
  return value.
  define the function _checkLevel with an argument level.
  if not,
  do nothing.
  substitute the result for args.   call the function popen_wrapper with an argument args, assign the result to msgs, errors and status, respectively.
  raise an exception.
  call the function warnings.warn with 3 arguments: string "django.utils.unittest will be removed in Django 1.9.",
  call the method __init__ from the base class of the class RendererMixin, with 2 arguments: unpacked list args,
  do nothing.
  _templatetags_modules is an empty list.
  nodelist_true_output is None.
  substitute absolute value of the exponent for decimals.
  return nothing.
  substitute self.field.widget for widget.
  define the function convert_old_style_list with an argument list_.
  return result converted into an integer.   if not,
  ser_fmt is None.
  LOCK_SH is a integer 0.
  derive the class override from the object base class.
  if field PY2 of the module six is boolean True,
  processors is an empty list.
  raise a ValueError exception with an argument "The protocol '%s' is unknown. Supported: %s", replace '%s' with protocol,
  substitute bits without last two elements for bits.
  for every handler in handlers,
  skip this loop iteration,
  derive the class SimpleLazyObject from the LazyObject base class.
  call the method context.push, with the result perform,
  if name is contained in existing,
  from django.utils.translation import ugettext_lazy as _ and ugettext into default name space.
  opt_dict is an dictionary with 5 elements: '1' for 'bold', '4' for 'underscore', '5' for 'blink', '7' for 'reverse',
  if not,
  call the self.to_python method with an argument value, strip the result of the whitespaces from the sides, substitute the result for value.
  call the method operator.attrgetter with an argument _meth_self, substitute the result for get_method_self.
  if color_setting is True,
  define the function sql_flush with 4 arguments: style, connection, only_django set to boolean False,
  call the initialization method with argument params for the base class of the BaseMemcachedCache class.
  call iri_to_uri with return value of the request.build_absolute_uri method, us the result as the argument for the call to the
  return nothing.
  otherwise if ch equals a string ')',
  from __future__ import unicode_literals into default name space.
  call the json.dump function with 4 arguments: return value of the method self.get_dump_object called with an argument obj,  self.stream, cls set to DjangoJSONEncoder and unpacked dictionary self.json_kwargs.
  define the method to_python with arguments self and value.
  call the os.stat function with argument src, substitute the result for st.
  strings "Please submit %d or more forms.", "Please submit %d or more forms." and self.min_num,   where '%d' is replaced with self.min_num, and code as a string 'too_few_forms'.   call the method self.clean.
  if '.' is not contained in str_number,
  define the method execute with an argument self,
  convert fourth element of row to an integer, substitute it for value under the 'max_digits' key of the field_params.
  define the method reader_enters with an argument self.
  call the method setdefault from the base class of the class SortedDict, with 2 arguments key and default, return the result.
  call the method middleware.process_exception with 2 arguments: request and e, substitute the result for result.
  if not,
  call the self.style.HTTP_SERVER_ERROR with an argument msg, substitute it for msg.
  define the _setup method with argument self.
  call the method _format_modules_cache.setdefault with 2 arguments: lang and list created out of the results of the function,
  call the method payload.decode with 2 arguments: text and utf8_charset, substitute the result for self._payload.
  call the warnings.warn method with string '`request.REQUEST` is deprecated, use `request.GET` or `request.POST` instead.',
  if is_templatized is true,
  default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string,
  decorator function register.filter with an argument is_safe set to boolean False.
  do nothing.
  self.addr is an empty string.
  call the method logging.getLogger with an argument string 'py.warnings', substitute the result for logger.
  class method decorator,
  substitute i-th element of self.forms for form.
  from django.forms.extras.widgets import SelectDateWidget into default name space.
  add row_data to seen_data set.
  if chunk is empty,
  call the method parser.add_argument with arguments: string '--database', action set to string 'store', dest set to string 'database',
  import module os.
  return the instance of DefusedExpatParser class.
  self.connection is None.
  return nothing,
  call the method self.decompress with an argument value, substitute the result for value.
  append a tuple with elements key and value to current_fields.
  return directories and files.
  if app_path is None,
  define the function get_declared_fields with 3 arguments: bases, attrs and with_base_fields set to boolean True.
  substitute name for new.
  class static method,
  do nothing.
  if strict is false,
  define the function check_for_language with an argument lang_code.
  return nothing.
  if only_initial is false,
  call the method field.value_to_string with an argument obj, use the result as an argument for the call the method self.xml.characters.
  return an instance of DebugNode class.
  if data in self.empty_values is true,
  yield widget.
  if not,
  yield string 'year' as an return value of the generator.
  try,
  if not,
  if role is contained in value under the NOCOLOR_PALETTE key of the PALETTES dictionary and definition is true,
  settings.USE_I18N is boolean True.
  raise an CommandError exception with an argument string "Error: %s", with '%s' replaced by message.
  call the method time.mktime with an argument tt, substitute the result for stamp.
  otherwise if value is boolean False, string 'False' or string '0'
  directories, files are empty lists.
  define the method __getattr__ with 2 arguments: self and attr set to None.
  if ImportError exception is caught,
  raise the exception.
  return self._regex.
  define the method parse_name with arguments self and fixture_name.
  define method load_middleware with class instance self as the argument.
  for every field in return value of the function _parse_date_fmt,
  call the self.xml.endDocument method.
  convert locale to lowercase and return it.
  from django.forms.widgets import HiddenInput into default name space.
  append f.name to exclude.
  if not,
  separated by newline, use it as an argument for the call to the function mark_safe, return the result.   define the method as_p with an argument self.
  call the function format_html with 2 arguments: string '<input{0} />' and result of the function flatatt,
  requires_system_checks is boolean False.
  write a newline character into self.stream file stream.
  raise an TemplateSyntaxError exception with an argument string "%s requires %d arguments, %d provided",
  call the method self.stdout.write with string "  No migrations to apply." as an argument.
  otherwise if first element of second row of args equals a string '4',
  _supported is None.
  with self.mutex perform,
  format string '%02d' with the second element of the result, return it.   define the method U with an argument self.
  call the method Module_six_moves_urllib_request with an argument: string ".moves.urllib.request" appended to __name__,
  if the value under the 'test_flush' key of the options dictionary exists,
  get _iterlists attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,
  property decorator,
  call the function t.render with an argument context_instance, return the result.
  substitute value under the 'use_ipv6' key of the options dictionary for self.use_ipv6.
  from datetime import datetime into default name space.
  call the function force_text with an argument path, substitute the result for path.
  if header_end equals integer negative 1,
  return boolean False.
  define the function b64_hmac with arguments salt, value and key.
  return self._non_form_errors.
  call the method self.get_exception_response with request, resolver and integer 404 as the arguments, assign the result to response.
  if props is true,
  if not,
  define the function curry with 3 arguments: _curried_func, unpacked list args and unpacked dictionary kwargs.
  if 'require_all_fields' key of the kwargs dictionary exists remove it and substitute its value for self.require_all_fields,
  return self.s.
  substitute value under the key key of self._cache dictionary for pickled.
  instantiate class Truncator, with an argument value, call the method words on the result with 2 arguments length,
  if self.forms is true,
  define the function format with 2 arguments: value and format_string.
  substitute result for value under the id of self key of memo dictionary.
  call the method self.iteritems, return the list of results.
  call the method __get__ with 2 arguments: instance and owner, from the base class of the classonlymethod class, return the result.
  join full_statement into a string, separated by newlines, use it as an argument for the call to the method curs.execute.
  self.error_list is an empty list.
  return self.paginator.count.
  substitute self.widget if the widget is false, otherwise substitute widget for widget.
  allow_files set to boolean True, allow_folders set to boolean False, required set to boolean True, widget set to None,   label set to None, initial set to None, help_text set to an empty string, unpacked list args, unpacked dictionary kwargs.   substitute path, match and recursive for self.path, self.match and self.recursive.
  try,
  if count of occurrence of '::' in ip_str equals integer 1,
  counters is a list containing length of handlers number of zeros.
  call the method six.iteritems with an argument base.declared_fields, convert it to a list and append fields to it, substitute the result for fields.
  if not,
  call the make_msgid function, substitute it for value under the 'Message-ID' key of msg dictionary.
  derive the class QueryDict from the base class MultiValueDict.
  do nothing.
  decorator stringfilter,
  take elements of token_string from second to second last element and strip the whitespaces surrounding the result,
  define the method attach_file with arguments self, path and mimetype set to None.
  register.tag decorator,
  split dotted_path into two parts from the right at the '.' character, assign the result to module_path and class_name, respectively.
  define the method __init__ with 3 arguments: self, tup and hash set to hash.
  string '%Y-%m-%d', convert the result into a string and append it to ',', substitute the result for d.   format string 'tag:%s%s:%s/%s' with bits.hostname, d, bits.path and bits.fragment, return it.
  if loader is an instance of six.string_types,
  if s is an instance of an object six.memoryview.
  year_days is a list with 13 elements: None, integer 0, integer 31, integer 59, integer 90, integer 120, integer 151, integer 181,
  return string 'th'.
  return boolean True.
  call the function v with an argument value.
  if value is not an instance of list type,
  for every app_config in return value of the method apps.get_app_configs,
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  return the first element of bits and an empty string.
  if call to the method finder.find_module with 2 arguments: name and package_path evaluates to true,
  register.tag decorator,
  substitute message.message, message.code, message.params for message, code and params, respectively.
  substitute has_header for __contains__.
  return default,
  _format_cache is an empty dictionary.
  define the function get_public_serializer_formats.
  for every module_to_search in args,
  format string '\x1b[%sm' with RESET, return the result.
  if value under the 'method' key of the options dictionary equals to string 'perfork' or 'fork',
  do nothing.
  join elements of words into a string, return it.
  call the function exhaust with an argument stream.
  call the method self._add_fallback.
  for every app_name and namespace_list in pattern.app_dict.items method return value,
  if jan1_weekday is greater than integer 4,
  define the method make_view_atomic, with self class instance and view as the arguments.
  if key is contained in last element of self.dicts, return boolean True, otherwise return boolean False.
  raise an CommandError exception with an argument string "You can only use --pks option with one model".
  if not,
  call the method self.handle with 2 arguments unpacked list args and unpacked dictionary options, substitute the result for output.
  key, encoding and errors set to string 'replace', and return value of the function force_text with 3 arguments:   value, encoding and errors set to string 'replace'.   call the method mutable substitute for self._mutable.
  if not,
  if not,
  if i is equal to integer 0, value under the 'first' key of the loop_dict dictionary is boolean True, otherwise it is False.
  define lambda function that returns self.file.xreadlines field, use it as an argument for property function, put the result in xreadlines.
  call the function _generator, join the result into a string, return the result.
  if ignore is true and field_name is not contained in model_fields,
  define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
  and self.regex.flags equals to other.regex.flags and self.message equals to other.message and self.code equals to other.code,   and self.inverse_match equals to other.inverse_match, return the result.   define the method __ne__ with arguments self and other.
  if self.verbosity is greater or equal to integer 3,
  derive the class FixUnicode from the base class fixer_base.BaseFix.
  substitute the result for RFC1123_DATE.   call the function re.compile with an argument raw string '^\w{6,9}, %s-%s-%s %s GMT$' formated with __D, __M, __Y2 and __T,
  if item_type equals FIELD,
  from django.utils import six into default name space.
  and help is a string 'App label of the application to squash migrations for.'.   call the method parser.add_argument with 2 arguments: string 'migration_name',
  from django.conf import settings into default name space.
  try,
  define lambda function that returns self.file.encoding field, use it as an argument for property function, put the result in encoding.
  try,
  define the function modelform_factory with 10 arguments: model, form set to ModelForm, fields set to None, exclude set to None,
  call the method extend with refs as argument, on the result call the pending_references.setdefault method with refto and empty list as arguments.
  write string "No changes detected" to self.stdout stream.
  call the method self.xml.endElement with an argument string 'object'.
  if TypeError or ValueError exceptions are caught,
  for every d in self.dicts,
  if self.is_required is false,
  if StopIteration exception,
  value under the 'blank' key of the extra_params dictionary is boolean True.
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  and a result of the method __repr__ called from instance of base class of the MultiValueDict class.   define the method __getitem__ with 2 arguments: self and key.
  from yaml import SafeLoader, SafeDumper into default name space.
  contains_nontext is boolean False.
  split self._wrapped into words, substitute the result for words.
  define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
  increment num_sent by one.
  substitute result of the self.path function with argument name for full_path.
  if not,
  call the method self.render, return the result.
  if mem_args is contained in cache,
  derive class Command from the BaseCommand base class.
  call the method __init__ from the base class of the class RadioChoiceInput, with 2 arguments: unpacked list args,
  define the function _sanitize_ipv4_mapping with an argument ip_str.
  convert root.manager.loggerDict into a list, substitute it for existing.
  call the method __copy__ with an argument unpacked list self.dicts, return the result.
  do nothing.
  append string '</select>' to output.
  call the method router.get_migratable_models with arguments app_config, database and include_auto_created set to boolean True,
  call the function re.compile with an argument raw string "(?<!%)%(?!%)", substitute the result for one_percent_re.
  replace '%s' in sting '%s-%s' with self.prefix and index, return the result.
  define the method encoding with arguments self and value.
  from django.core.management.base import CommandError and BaseCommand into default name space.
  call the method checks.run_checks with 2 arguments: app_configs set to app_configs, tags set t tags, substitute the result for all_issues.
  result is an empty list.
  return boolean False.
  if cls is false,
  decrement self.number by one, multiply it by self.paginator.per_page, increment the result by one, return it.
  return a string '%02d' formated with the result of the function self.g.
  import module os.
  define the function parse_color_setting with an argument config_string.
  return an instance of FirstOfNode class, created with an argument, result of the method parser.compile_filter called with bit,
  if plen is lesser than difference of alen and dlen, or if plen is greater than alen,
  return an empty string.
  description is a string "The '%s' function" replaced by value of receiver.__name__.
  sign is a string '-'.
  write msg to self.stderr stream.
  if index is not an instance of six.integer_types or tuple type,
  define the function server_bind with an argument self.
  use the result as an key to get the value from the LUHN_ODD_LOOKUP dictionary, sum all the results and substitute the result for odds.   sum evens and odds, if the result is divisible by integer 10, return boolean True, if not return boolean False.
  append '-' to generic_lang_code, if supported_code starts with it,
  substitute gettext_noop for ugettext_noop.
  for every fixture_label in fixture_labels,
  if func is None,
  remove original_path directory.
  substitute fk for FormSet.fk.
  from django.utils import six into default name space.
  call the method test_runner_class.add_arguments with an argument parser.
  return first end elements of list chunk.
  do nothing.
  return self.cleaned_data.
  get is a string '<could not parse>'.
  if found is true,
  derive the class InlineForeignKeyField from the Field base class.
  get type of self, call it and substitute the result for result.
  return self.html_name.
  if not,
  call the function  six.iteritems with an argument blocks, for every name and block in result,
  update the self._catalog dictionary with other._catalog.
  if self._leftover is true,
  action set to 'append', default is a list containing string 'py' and help set to string:   'The file extension(s) to render (default: "py"). Separate multiple extensions with commas, or use -e multiple times.'.   call the method parser.add_argument with 6 arguments: string '--name', string '-n', dest set to string 'files',
  define the method create_nodelist with an argument self.
  raise an TemplateSyntaxError exception with an argument string "'%s' tag takes only one argument",
  substitute data for data_value if data is not None, otherwise data_value is an empty list.
  for every middleware_method in self._view_middleware,
  get 'editable' attribute from object f, if it doesnt exists or its true,
  return nothing.
  call the function os.walk with 3 arguments: root, topdown set to boolean True, followlinks set to self.symlinks,
  define the method __init__ with 2 arguments self and file.
  substitute smart_text for smart_unicode.
  call the method base64.b64decode with an argument chunk, substitute the result for chunk.
  yield string "# You'll have to do the following manually to clean this up:" as the result.
  break from the loop execution.
  define the method got with 3 arguments: self, key and otherwise set to None.
  " normal uploaded files. Check for malicious upload activity; if there is none, report this to the Django developers.".   derive the class ChunkIter from the six.Iterator base class.
  call the method self.as_hidden with an argument only_initial set to boolean True,
  call the subprocess.Popen function with, 'git log --pretty=format:%ct --quiet -1 HEAD', stdout set to subprocess.PIPE,
  and help is a string 'Specifies file to which the output is written.'.   define the method handle with arguments self, unpacked list app_labels and unpacked dictionary options.
  locations is an empty list.
  if match is false or call to the method match.group with an argument integer 1 evaluates to boolean false,
  call the method custom_sql_for_model with model, no_style() and connection as arguments, substitute the result for custom_sql.
  call the method token.split_contents, substitute results without the first element for bits.
  call the method urlparse with an argument url, substitute the result for bits.
  otherwise if autoescape is true,
  help is a string "Updates database schema. Manages both apps with migrations and those without.".
  return self._body.
  call the method timezone.get_current_timezone, substitute the result for current_timezone.
  if not,
  if not,
  define the function get_valid_filename with an argument s.
  if support_legacy is false,
  decorator function register.filter with an argument string "escapejs".
  concatenate opts.concrete_fields, opts.virtual_fields and opts.many_to_many, for every f in the result,
  define the method __enter__ with argument self.
  return a tuple wit 2 elements: _lazy_proxy_unpickle and tuple with 3 elements: func, self.__args, self.__kw and resultclasses.
  and memo, and result of the function copy.deepcopy called with 2 arguments: value and memo.   return result.
  call the method func.__get__ with 2 arguments: self and type of self object, call the result with 2 arguments:
  use the result as an argument for the call to the os.path.join function,   use the result and the norm_patterns as arguments for the call to the is_ignored function, if it evaluates to true,   remove dirname from the dirnames.
  and return value of the field.get_internal_type method for 'type'.   if field.name attribute of obj is not None,
  otherwise is template is six.string_types instance,
  get the value under the key 'exclude' of the options dictionary, convert it to an integer, substitute it for exclude.
  substitute MultipleHiddenInput for hidden_widget.
  for every key and value in data,
  if imatch is true,
  return value converted into a list.
  get 'value' attribute of the _active object, if it exists return it, if not, call the function get_default_timezone and return the result.
  substitute self.html_initial_id for value under the 'id' key of the attrs dictionary.
  call the method self.set_cookie with 5 arguments: key, max_age as integer 0, path as path, domain as domain,
  and code set to string 'required.   otherwise if self.required is false and value is false,
  if comment_lineno_cache equals cur_lineno.
  FILTER_ARGUMENT_SEPARATOR is a string ':'.
  append to a list elements of the iterator self, return the resulting list.
  call the method self.close.
  substitute self.var for obj.
  return an instance of CommentNode class.
  call the method s.render with 3 arguments: field string formated with name, val and local_attrs, substitute the result for select_html.
  substitute settings.ROOT_URLCONF for urlconf.
  bring integer 36 to the power of factor, if i is smaller than the result,
  return boolean False.
  call the force_text with an argument message, yield the result.
  if max_age is not None,
  call the function timedelta with an argument seconds set to negative _time.altzone, substitute the result for self.DSTOFFSET.
  and '8' for 'conceal'.   define the method colorize with 3 arguments: text set to an empty string, opts set to an empty tuple and unpacked dictionary kwargs.
  return the value under the INITIAL_FORM_COUNT key of the self.management_form.cleaned_data dictionary.
  from django.core.exceptions import MiddlewareNotUsed, PermissionDenied and SuspiciousOperation into default name space.
  call the method _construct_form from the base class of the class BaseInlineFormSet, with 2 arguments: i,
  substitute python_reloader for reloader.
  if self.inverse_match equals to return value of the self.regex.search method converted to boolean, called with argument force_text(value),
  try,
  if j equals to integer -1,
  if cc is not an six.string_types instance raise an error with message string '"cc" argument must be a list or tuple'.
  if AttributeError exception is caught,
  substitute first 12 elements of r for r.
  and form_class_attrs.   derive the class BaseModelFormSet from the BaseFormSet base class.
  substitute self for result.parent.
  "as an app name. Please try another name.", where '%r' is replaced with app_name.   call the method handle from the base class of Command class, with 4 arguments: string 'app', app_name, target and unpacked dictionary options.
   self.locale_paths is an empty list.
  from __future__ import unicode_literals into default name space.
  import module subprocess.
  _get_request is getter function for REQUEST attribute of this class.
  call the function warnings.warn with 3 arguments: msg, RemovedInDjango19Warning and stacklevel as integer 2.
  substitute key for result.key.
  separated by newline, substitute it for msgs.   if not,
  if StandardError, renamed to e, exception is caught,
  if not,
  define the method parse with an argument self.
  if self.max_value is not None,
  return string "[Didn't have permission to include file]".
  return qs.
  otherwise if t.token_type equals TOKEN_VAR,
  otherwise if vale is not an instance of ConvertingList and value is an instance of list type,
  substitute HiddenInput for hidden_widget.
  raise a SerializerDoesNotExist exception with an argument format.
  return boolean True.
  call the method self.filter_expression.resolve with an argument context, substitute the result for output.
  if not,
  for every field_node in return value of the method node.getElementsByTagName with an argument string 'field'.
  define the method content with self and value.
  reverse the order of elements of styles.
  raise an ValueError exception with an argument string 'Unknown level: %r' formated with level.
  from django.utils import iri_to_uri, force_bytes, force_text to the default name space.
  raise an CommandError exception, with an arguent: string "App '%s' has migrations. Only the sqlmigrate and sqlflush commands can be used when an app has migrations.", where '%s' is replaced for app_config.label.
  return boolean False.
  return an string "<IfEqualNode>".
  evaluate the logic expression, plat does not equals to string 'Pocket PC', and plat does not equals to string 'win32'
  raise an CommandError exception with an argument string "currently makemessages only supports domains 'django' and 'djangojs'".
  substitute field for self.field.
  define the method __init__ with 6 arguments: self, name, value, attrs, choice and index.
  call the function blankout with 2 arguments: p and 'F', write the result to out.
  try,
  join elements of output into a string, separated by newline characters, return it.
  otherwise if fourth element of version does not equals to 'final',
  if self object has an attribute '_client',
  call the function parser.compile_filter with an argument arg for every arg in args from the index 1 to the index -2,
  if item_date is true,
  if not,
  and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) or y.eval(context) is True, for 'or',   result of the function inflix called with 2 arguments, integer 7,   and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) and y.eval(context) is True for 'and',   result of the function prefix called with 2 arguments, integer 8,   and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is True for 'not',   result of the function inflix called with 2 arguments, integer 9,   and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is contained in y.eval(context) for 'in',   result of the function inflix called with 2 arguments, integer 9,   and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is not contained in y.eval(context),   for 'not in', result of the function inflix called with 2 arguments, integer 10,   and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) equals y.eval(context) for '=',   result of the function inflix called with 2 arguments, integer 10,   and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) equals y.eval(context) for '==',   result of the function inflix called with 2 arguments, integer 10,   and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) doesnt equals y.eval(context) for '!=',   result of the function inflix called with 2 arguments, integer 10 and,   lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) is greater than y.eval(context) for '>',   result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y,   returns boolean True if x.eval(context) is greater than or equal to y.eval(context) for '>=',   result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y,   returns boolean True if x.eval(context) is smaller than y.eval(context) for '<',   result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y,   returns boolean True if x.eval(context) is smaller than or equal to y.eval(context) for '<=',   call the function OPERATORS.items, for every key and op in result,
  return media.
  for every i in sequence of integers, from 0 to the result of the method self.total_form_count,
  return an instance of EscapeBytes, created with an argument s.
  substitute '%s' in a string "Merging %s" with app_label,
  return a list with 5 elements: strings 'parse', 'error', 'request', 'response' and 'robotparser'.
  define the method add_arguments with 2 arguments self and parser.
  if self._is_rendered is false.
  while remaining is not equal to integer 0,
  if six.PY2 is true,
  substitute the result for result.   try,
  try,
  if AppRegistryNotReady exception is caught,
  substitute index for self.index.
  decrement week_number by integer 1.
  call the function _ with an argument string 'Ensure this value is less than or equal to %(limit_value)s.', substitute the result for message.
  iterator is None.
  replace every occurrence of raw string '\\' in s with a raw string '\\\\', use the result and string "unicode_escape",
  if ImportError exception is caught,
  derive the class DefaultStorage from the LazyObject base class.
  call method self.stdout.write with statement as an argument.
  form is an instance of ManagementForm class, created with 3 arguments: auto_id as self.auto_id, prefix as self.prefix,
  define the method n with an argument self.
  call the method sql_flush with 5 arguments: self.style, connection, only_django set to boolean True,
  return integer 0.
  define the method get_fqdn with argument self.
  join into a file path: app_dir and string %s.%s.sql, where '%s' is replaced by opts.model_name and backend_name, respectively,
  call the method copy.deepcopy with an argument self.widgets, substitute the result for obj.widgets.
  split ip_str by '::', substitute it for hextet.
  define the method __init__ with an argument self.
  define the method load_template_source with 3 arguments: self, template_name, template_dirs set to None.
  for every shell in available_shells,
  define the method cache_key with 3 arguments: self, template_name and template_dirs.
  call the method self.add_truncation_text with 2 arguments: an empty string and truncate, substitute it for truncate_text.
  from django.db.migrations.state import ProjectState into default name space.
  if length of bits equals integer 2,
  and store it in the value of the dictionary response under the key 'ETag'.   return response
  builtins is an empty list.
  call the method style.NOTICE with an argument string "Note that only Django core commands are listed as settings are not properly configured (error: %s).", where '%s' is replaced by self.settings_exception, append the result to usage.
  call the function format_html with 4 arguments: string '<option value="{0}"{1}>{2}</option>', option_value, selected_html,
  otherwise if var is None,
  call the method match.group with 2 arguments: strings "var" and "constant", substitute the result for var and constant, respectively.
  as arguments for the call to the unicode function, return the result.  substitute unichr for unichr.
  if self._dir file path does not exists,
  derive the class Input from the Widget base class.
  define the function contains with 2 arguments source and inst.
  assign integer 2 to parts if third element of version equals to zero, otherwise assign it integer 3.
  otherwise ser_fmts is a list containing ser_fmt.   if self.verbosity is greater or equal to integer 2,
  call the function warnings.warn with 3 arguments: string "get_declared_fields is deprecated and will be removed in Django 1.9.",
  if self.verbosity is greater or equal to integer 2,
  call the method self.handle_label with 2 arguments: label and unpacked dictionary options, substitute the result for label_output.
  return it.   define the function iterlists with 2 arguments: d and unpacked dictionary  kw.
  needs_multipart_form is boolean True.
  call the method self._assert_mutable.
  define the method make_writeable with arguments self and filename.
  from __future__ import unicode_literals into default name space.
  substitute .error_class for self.error_class.
  call the method self.extend_nodelist with 3 arguments: nodelist, instance of TextNode class, created with an argument token.contents,
  if not,
  define the method __repr__ with an argument self.
  trym
  join trans_bit into a string separated with whitespaces, substitute the result for bit.
  call the function get_format_modules with an argument lang, for every module in the result,
  from django.conf import settings, global_settings into default name space.
  define the method __exit__ with 4 arguments: self, exc_type, exc_value and traceback.
  if middle ends with punctuation,
  join tempdir and guessed_filename into a file path, substitute it for guessed_path.
  append self.form.required_css_class to a whitespace character, append it to the value under the 'class' key of the attrs dictionary.
  import module types.
  call the self.compile_messages with locations as argument,
  import module copy.
  call the function getInnerText with argument k, on the result call the method strip, for every k in keys, append the results to field_value list.
  call the method RE_DATE.match with an argument value, substitute the result for match.
  if fixture_name is not equal to string 'initial_data' and fixture_files is false,
  if KeyError exception is caught,
  if widgets is true and f.name is contained in widgets,
  substitute space for end.
  if TemplateSyntaxError, renamed to e, exception is caught,
  if settings.DEBUG is true, return boolean False, otherwise return boolean True.
  define the function to_locale with an argument language.
  try,
  do nothing.
  try,
  call the method self.get_available_name with argument name, substitute the result for name.
  if DecimalException exception is caught,
  value is boolean False.
  write migration_string to file fh.
  return string 'st'.
  if last element of parts is contained in self.serialization_formats,
  if data is false,
  self.tokens is an empty dictionary.
  import module socket.
  for every ext in extensions,
  call the method Model._default_manager.db_manager with an argument db, on the result call the get_by_natural_key with,
  if t.token_type == TOKEN_TEXT:
  if length of unique_check equals integer 1,
  join elements of output into a string, separated by newline characters, use it as the argument for the call the function mark_safe,
  derive the class Truncator form the SimpleLazyObject class.
  if commands_only is true,
  skip this loop iteration,
  call the method self._clean_form.
  call the function _load_serializers.
  get the values under the 'app_label' and 'migration_name' keys of the options dictionary,
  call the method field.hidden_widget, substitute the result for field.hidden_widget.
  where '%s' is replaced with command and result of the function get_text_list called with an argument list,   with p converted into a string and surrounded with single quotes for every p in parse_until.   call the method self.error with 2 arguments: token and string "Invalid block tag: '%s'", where '%s' is replaced with command,
  call the method m.group with an argument string 'mon', convert the result to lowercase, use it as an argument for the call to the,
  if source is an instance of Group class,
  return string 'https' if value under the "HTTPS" key of the os.environ dictionary equals string 'on', if not return 'http'.
  if plan_node is contained in loader.applied_migrations,
  if s is an instance of an object bytes.
  if klass is not contained in cls.__dispatch,
  define the function iterkeys with 2 arguments: d and unpacked dictionary  kw.
  if kwds is true or typed is true, call the function make_key with 3 arguments: args, kwds and typed, substitute the result for key,
  define the method __getitem__ with 2 arguments: self and idx.
  substitute complain for pop.
  substitute args for self.__args.
  d is an instance of class Decimal, created with result of the function force_text,
  call the function force_text with an argument value, substitute the result for value under the 'value' key of the final_attrs.
  split value into two parts by decimal_separator, assign the result to value and decimals.
   if self.fail_silently is boolean True,
  if limit_choices_to is callable object,
  raise an ValueError exception with an argument string 'Unable to configure handler %r: %s' formated with name and e.
  escaped is boolean False.
  added to a tuple with an element sum of year an integer 28, substitute the result for s2.   call the function _findall with 2 arguments: s2 and sum of year and integer 28, converted into a string, substitute the result for sites2.
  if name converted to lower case equals to string 'subject',
  from django.core.exceptions import ValidationError into default name space.
  derive the class MaxValueValidator form the BaseValidator base class.
  define the method get with 3 arguments: self, key and default set to None.
  substitute _BROWSERS_DEPRECATED_LOCALES for _DJANGO_DEPRECATED_LOCALES.
  slice list unhandled_params from the beginning to the length of defaults last element,
  params is a dictionary with 2 initial entries: self.max_length for 'max' and length of file_name for 'length'.
  if att_name equals string 'id' and extra_params equals a dictionary with 1 entry: boolean True for 'primary_key',
  where '%s' is replaced with node.nodeName and attr.   define the function getInnerText with an argument node.
  try,
  ERRORS is a dictionary with 3 initial entries: string "You don't have permission to access that port." for errno.EACCES,
  call the function from_current_timezone with an argument result, return the result.
  get the value under the 'indent' key of the options dictionary, substitute the result for indent.
  found is boolean False.
  use the result as an key to get the value of the form.data dictionary, assign it value None.   call the method form.add_prefix with an argument self.fk.name,
  value under the index key of the hextets dictionary is a string '0'.
  call the method readline.parse_and_bind with an argument string "tab:complete".
  sys.stderr is an instance of NullDevice class.
  if not,
  substitute CheckboxChoiceInput for choice_input_class.
  from django.utils import lru_cache into default name space.
  convert self.domain into a string and append string '.po' to it, join basedir and result in file path, substitute it for pofile.
  requires_system_checks is boolean False.
  from django.utils.module_loading import import_string into default name space.
  call the function ugettext_lazy with an argument string 'Clear', substitute the result for clear_checkbox_label.
  call the the method __init__ from the base class of the class Context.
  from django.core.management.base import CommandError into default name space.
  call the method parser.parse with an argument tuple with an element string 'endfor', substitute the result for nodelist_empty.
  i is integer 0.
  delete the form.cleaned_data dictionary entry under the field key.
  try,
  return changeset.
  boolean True for 'True', boolean False for '3', boolean False for 'False' and boolean False for boolean False,   return it if the key exists, if not return None.   derive the class SelectMultiple from the Select base class.
  while bits is true,
  from django.utils.translation import ugettext_lazy as _ into default name space.
  from django.utils import six into default name space.
  define the method __repr__ with an argument self.
  logger.propagate is boolean True.
  return boolean True, otherwise return boolean False.   define the function is_naive with an argument value.
  try,
  call the function _load_serializers.
  if last element of pieces is true,
  define the method __init__ with an argument self.
  call the method __delitem__ from the base class of the QueryDict class, with an argument key.
  if retval is true,
  filemsg is an empty string.
  try,
  finally perform,
  update a dictionary with an entry v converted to an integer for k, for every k and v in result of the function six.iteritems,
  substitute request.urlconf for urlconf.
  import module warnings.
  if NameError exception is caught,
  substitute the result for context_match.   call the method context_match.group with an argument integer 1, substitute the result for message_context.
  from django.utils.datastructures import MultiValueDict into default name space.
  if cls._delegate_bytes and cls._delegate_text are both false, raise an error, with an argument string "Cannot call lazy() with both bytes and text return types.".
  get the unicode representation of the absolute path of base, substitute it for base_path.
  import module socket.
  call the method handler.endElement with an argument string 'author'.
  call the smart_text function with an argument token, return the result.
  from __future__ import unicode_literals into default name space.
  if ImportError exception is caught,
  if schemes is not None,
  call the method self.create_select with 6 arguments: name, self.month_field, value, month_val, choices and self.month_none_value,
  try,
  if self.to_field is true,
  call the function copy with an argument self, substitute the result for new_context.
  call the self.style.MIGRATE_HEADING method with string "Running migrations:" as an argument, use the result as an argument for the call to the self.stdout.write method.
  if third element from the end of the args equals string 'as',
  return the value under the language_code of the self._regex_dict dictionary.
  return first element of t converted to lowercase and second element of t, as a tuple.
  define the method process with 3 arguments: self, command and domain.
  call the addr.split method with character '@' and integer 1 as arguments, substitute the result for localpart and domain, respectively.
  call the method self.save_new with 2 arguments: form and commit as commit, append the result to self.new_objects.
  inner is an instance of NonCapture, created with elements of result from start index to the end.
  if pattern.app_name is true,
  raise an exception.
  _iteritems is a string "iteritems".
  evaluate the http.QueryDict method with raw_query_string and encoding set to self._encoding as arguments, return the result.
  return result.
  call the method stream.unget with list containing elements of chunk list from the header_end incremented by integer 4 as a start index to the end as argument.
  if get_git_changeset has an attribute 'cache',
  if valu is an instance of list type,
  define the method __init__ with 5 arguments: self, max_length set to None, min_length set to None, unpacked list args,
  get the value 'inhibit_post_migrate' key of the options dictionary, if it exists substitute it for inhibit_post_migrate, otherwise inhibit_post_migrate is boolean False.
  if not,
  return boolean False,
  substitute obj for self.object.
  define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
  from datetime import timedelta and tzinfo into default name space.
  call the function get_resolver with an argument urlconf, substitute the result for resolver.
  return boolean False.
  if field.rel is true, and field.rel is an instance of models.ManyToManyRel,
  inverse_match is boolean False.
  if else,
  default_error_messages is an dictionary with 2 entries: return value of the function _ called with an argument string,
  valid is boolean False.
  FILE_INPUT_CONTRADICTION is an instance of object class.
  convert value under the 'CONTENT_LENGTH' key of the environ dictionary to an integer, substitute it for content_length.
  if unused_char is false,
  call the method subcommand_cls.create_parser with 2 argument an empty string an first element of cwords, substitute it for parser.
  define the method add_arguments with 2 arguments self and parser.
  INITIAL_FORM_COUNT is a string 'INITIAL_FORMS'.
  if not,
  if ignore is true,
  define the method handle_file_complete with 3 arguments: self, old_field_name and counters.
  if '.' is contained in exclude,
  format the previous in a tuple, append the tuple to the response_headers.   call the start_response function with force_str(status) method return value and response_headers as arguments.
  call the method app.rpartition with an argument '.', substitute last element of the result for app.
  do nothing.
  flags is a integer 0.
  define the method __ne__ with 2 arguments: self and other.
  if not,
  if bcc is not an six.string_types instance raise an error with message string '"bcc" argument must be a list or tuple'.
  if self.can_order is true,
  define the method is_valid with an argument self.
  if content is not None raise an error.
  define function patch_cache_control, with response and dictionary set of arguments, kwargs, as arguments.
  call the self.user_regex.match method with an argument user_part, if it evaluates to false,
  call the method filter_re.finditer with an argument token, substitute the result for matches.
  for model in model_list,
  define the method add_arguments with 2 arguments self and parser.
  define the method __init__ with 5 arguments: self, regex, callback, default_args set to None and name set to None.
  call the method self.setFeature with 2 arguments: handler.feature_external_ges and boolean False.
  read one line from self file stream, substitute the result for buf.
  call the method handler.endElement with an argument string 'feed'.
  call the method form.add_prefix with an argument self._pk_field.name,
  self.__name is a string "%s%02d%02d", replace '%s' with sign, '%02d' is replaced with absolute value of offset divided by 60,
  for every name in MEDIA_TYPES,
  define the method __init__ with 4 arguments: self, url, length and mime_type.
  if file filename exists,
  define the method render with 5 arguments: self, name set to None, value set to None, attrs set to None and choices set to an empty tuple.
  all_date_checks is union of all_date_checks set and date_checks set.
  if Exception, renamed to e, exception is caught,
  call the method __new__ from the base class of the class SortedDict, with 3 arguments: cls, unpacked list args,
  append func to processors.
  return boolean upload.
  call the function sanitize_address with arguments addr and email_message.encoding, for every addr in return value of the function email_message.recipients, store the results in a recipients list.
  where '%s' is replaced with node.nodeName and attr.   try,
  import_library and libraries.   __all__  is a tuple containing 4 strings: 'Template', 'Context', 'RequestContext' and 'compile_string'.
  call the function reverse with 4 arguments: view_name, args as args, kwargs as kwargs and current_app as context.current_app,
  if name equals string "_wrapped",
  define the method id_for_label with arguments self, name, field, value, val, choices and none_value.
  locales is a list with an element locale.
  self._closable_objects is an empty list.
  increment mes_count by one.
  call the method match.groupdict, substitute the result for kwargs.
  from django.utils import six into default name space.
  call the method netloc.encode with an argument string 'idna', call the method decode on the result with an argument 'ascii',
  derive the class DTDForbidden from the DefusedXmlException base class.
  with an argument message for 'message', or if not message for 'message' and error.code for 'code' in error.code is true,   if not, an empty string for 'code'.   return errors.
  and param_dict, respectively.   evaluate the function callback with request and dictionary of parameters param_dict as the arguments, return the result.
  import threading module.
  and _, respectively.   if file_ is true,
  break from the loop execution.
  call the function normalize with an argument p_pattern, substitute the result for bits.
  if first element of g equals a string '"',
  from django.core.management.base import BaseCommand and CommandError into default name space.
  __Y2 is a raw string '(?P<year>\d{2})'.
  statements is an empty list.
  append value under the 'protocol' key of the options dictionary to the string 'server.', substitute it for flup_module.
  value under the 'required' key of the kwargs dictionary is boolean False.
  call the method field.clean with an argument field_value, append the result to clean_data.
  if sub_match is true,
  if e doesnt have an 'django_template_source' attribute,
  otherwise if basetype equals a string 'message' and subtype equals a string 'rfc822',
  derive the class MaxLengthValidator form the BaseValidator base class.
  increment i by one.
  call the function template_localtime with 2 arguments: output and use_tz set to context.use_tz, substitute the result for output.
  define the method render with 2 arguments: self and context.
  if TypeError exception is caught,
  substitute '%s' in a string "  Branch %s" with migration.name,
  if six.PY3 is true,
  if primary_keys is true,
  join root and f into a file, substitute it for f.
  if field_value is cotained in self.empty_values,
  define the method initial_form_count with an argument self.
  called with an argument item.   call the method self.add_item_elements with 2 arguments: handler and item.
  if first element of args is an instance of SafeData, and 'is_safe' attribute of dec._decorated_function object is true,
  if self doesnt have an '_deleted_form_indexes' attribute,
  if record.exc_info is true,
  if the result to the method call response.has_header, with string 'Cache-Control' as an argument is boolean False,
  replace '%s' in string '<%s list>' with __class__.__name__ field of first element of self.urlconf_name, substitute it for urlconf_repr.
  return tuple, consisting of first element of t converted to lowercase and True.
  define the method validate with arguments self and value.
  call the params.get function with string 'OPTIONS' and None as arguments, substitute the result for self._options.
  if data is None,
  call the method self.make_writeable with an argument new_path.
  call the function resolve with arguments path and urlconf.
  call the method handler.addQuickElement with 2 arguments: string 'updated' and result of the function rfc3339_date,
  shown is an empty set.
  match rest string with self.WORD_PATTERN regex, substitute the result for m.
  increment i by integer 1,
  call the function op, return the result.
  if conflicts is true,
  7 for 'jul', 8 for 'aug', 9 for 'sep', 10 for 'oct', 11 for 'nov' and 12 for 'dec'.   MONTHS_AP is an dictionary with 12 entries: result of the function pgettext_lazy with 2 arguments: 'abbrev. month' and 'Jan.' for 1,
  if self.can_delete is true,
  if default is true and RAISE_ERROR is false,
  get the value under the mem_args key of the cache dictionary, return it.
  raise an AttributeError with an argument string "no such move, %r", formated with a tuple with an element name.
  define the function check_errors with argument fn.
  call the function urlresolvers.set_urlconf with urlconf as the argument.
  call the method form._get_validation_exclusions, substitute the result for exclude.
  if not,
  define the method __repr__ with an argument self.
  if template is None,
  where '%s' is replaced with first element of bits.   call the method parser.compile_filter with second element of bits as an argument, substitute the result for viewname.
  base36 is an empty list.
  default set to DEFAULT_DB_ALIAS and help set to a string:   'Nominates a database onto which the cache tables will be installed. Defaults to the "default" database.'   define the method handle with arguments self, unpacked list tablenames and unpacked dictionary options.
  if the key doesnt exists substitute boolean False for self.use_natural_primary_keys.   call the method self.start_serialization
  call the function lazy_number with 6 arguments: npgettext, six.text_type, context set to context, singular set to singular,
  if self.size is greater than chunk_size, return boolean True, otherwise return boolean False.
  extend locations with tuple containing dirpath and f, for every f in filenames, only if it ends with string '.po'.
  call the method apps.get_app_configs, substitute the result for app_configs.
  update declared_fields dictionary with entry base.declared_fields.
  if 'media' is not contained in attrs,
  increment objects_in_fixture by one.
  substitute self._encoding for encoding.
  call the method context.push with an argument var set to output, with the result perform,
  substitute format for self.format if format is true, if not self.format is None.
  otherwise if t.contents equals a string 'comment',
  define the method __init__ with an argument self.
  string 'Select a valid choice. That choice is not one of the available choices.' for 'invalid_choice'.   define the method __init__ with 13 arguments: self, queryset, empty_label set to a string  "---------", cache_choices set to None,
  call the function os.environ.get with 2 arguments: string 'PATH' and an empty string, split the result at the os.pathsep, substitute the result for path.
  define the method resolve_variable with 2 arguments: path and context.
  return an empty string.
  from django.utils.translation import ugettext and ungettext_lazy into default name space.
  define the function time_format with 2 arguments: value and format_string.
  call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the item dictionary.
  substitute value for self.value.
  if NotImplementedError exception is caught,
  if the key doesnt exists substitute boolean False for self.ignore.   define the method _make_parser with an argument self.
  if TemplateSyntaxError, renamed to e, exception is caught,
  return None.
  if attrs is false, make attrs an empty dictionary.
  use the global variables _mtimes and _win in this function.
  call the method self.compile_function_error with 2 arguments token and e, if it evaluates to false,
  if self.use_natural_foreign_keys is true and field.rel.to has an attribute 'natural_key',
  open '/dev/null' file in read mode, substitute the result for si.
  return boolean True.
  for every message in email_messages:
  call the function warn_about_renamed_method with 2 arguments: class_name and unpacked list renamed_method, substitute the result for wrapper.
  if not,
  code set to an string 'invalid_choice' and dictionary params with an entry: value for 'value'.   return value.
  substitute the result for new_obj.   if not,
  messages is an empty dictionary.
  try,
  if not,
  call the function mark_for_escaping with an argument new_obj, substitute the result for obj.
  can_import_settings is boolean True.
  split settings.SETTINGS_MODULE by '.' character, substitute the first element of the result for project_name.
  is smaller than self.min_num,   raise an ValidationError with 2 arguments: return value of the function ungettext with 3 arguments:
  raise an TemplateSyntaxError exception with an argument string "Invalid arguments provided to assignment_tag".
  for every hook in sys.path_hooks,
  if not,
  call the method gettext_module.GNUTranslations.__init__ with an argument self.
  return templatetags_modules.
  max_num is integer 1.
  decorator function register.filter with an argument is_safe set to boolean True.
  import module sys.
  substitute self.fk.rel.field_name for value under the 'to_field' key of the kwargs dictionary.
  call the function self._resolve_lookup with an argument context, substitute the result for value.
  define the method clean with arguments self, data and initial set to None.
  if args in None of boolean False, substitute it for an empty dictionary.
  if fake is true,
  substitute buf_size for self.buf_size.
  define the function get_digit with 2 arguments value and arg.
  from django.core.management.base import BaseCommand and CommandError into default name space.
  e.args is a tuple containing string "Problem installing fixture '%s': %s", where '%s' is replaced with fixture_file, e.
  define the method is_multipart with an argument self.
  find the first subgroup of the matched string from the match object, convert it to lowercase, substitute it for tag and self.lasttag.
  if TypeError exception is caught,
  substitute element at self.pos index of self.tokens for retval.
  try,
  if not,
  call the self.path with argument name, use the result as an argument for the call to the os.path.getsize function, return the result.
  call the method parser.add_argument with an argument string '--settings'.
  define the method has_key with self class instance, key and version defaulting to None as arguments.
  call the MigrationExecutor with the connection as the argument, substitute it for executor.
  from django.utils.translation import get_language to the default name space.
  self._read_started is True.
  substitute new_value for value.
  input_attrs, append the result to inputs list.   join inputs elements into a string, separated with newline character, use it as an argument for the call to the function mark_safe,
  call the function _ with an argument string 'Ensure this value is greater than or equal to %(limit_value)s.', substitute the result for message.
  msg is a string "Invalid HTTP_HOST header: %r.", replace '%r' with host.
  default_error_messages is an dictionary with 2 entries: return value of the function _ called with an string 'Enter a valid date.',
  define the method handle with self class instance and dictionary pair of elements options as arguments.
  try,
  call the __init__ method from the base class of the class SimpleTemplateResponse, with 3 arguments: an empty string, content_type and status.
  from django.utils.translation import ugettext_lazy as _ and pgettext_lazy into default name space.
  method lru_cache.lru_cache with an argument maxsize set to None, as a decorator,
  break from the endless loop.
  lineno_comment_map is an dictionary.
  get the type of res, call the method mro on the result, for every t in the result,
  define the method decompress with 2 arguments: self and value.
  output_transaction is boolean True.
  from django.utils.safestring import SafeData and mark_safe into default name space.
  call the function forbid_multi_line_headers with 3 arguments: name, val and string 'ascii', substitute the result for name and val, respectively.
  if settings.SETTINGS_MODULE is true,
  append orig_file to string '#: ', substitute it for new.
  define function color_style, without input arguments.
  try,
  if _time.daylight is true,
  define the method render with 4 arguments: self, name, value and attrs set to None.
  try,
  for every match in the result,   substitute match.lastgroup for name.
  strings "URLError", "urllib2", "urllib.error", result of the call to the function MovedAttribute with 3 arguments:   strings "HTTPError", "urllib2", "urllib.error" and result of the call to the function MovedAttribute with 3 arguments:   strings "ContentTooShortError", "urllib", "urllib.error".   for every attr in _urllib_error_moved_attributes,
  decorator function register.filter with an argument is_safe set to boolean True.
  for every receiver, _ and _ in receivers,
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  self.callback is None.
  self.stderr is an instance of an OutputWrapper object, created with 2 arguments: value under the 'stderr' key of the options dictionary, if it doesnt exists use the sys.stderr instead, and self.style.ERROR.
  return integer 0.
  if cursor is true and return value of the function connection.introspection.table_name_converter called with an arugment:  model._meta.db_table is contained in table_names,
  if not,
  compile a regex from raw string '^\.\s*(\w+)\s*', substitute it for DOT_PATTERN.
  raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a created_time() method'.
  define the method __deepcopy__ with 2 arguments self and memo.
  if length of bits is smaller than integer 2 or second last element of bits is not equal to 'as',
  substitute id for self.id.
  if expanded_template is a directory,
  call the method wrap with 2 arguments, value and arg converted into a integer, return the result.
  if year is lesser than integer 70,
  skip this loop iteration.
  call the method parser.delete_first_token.
  needs_multipart_form is boolean False.
  derive the class HttpResponseRedirectBase from the HttpResponse base class.
  call the method self.validate_key with argument key.
  call the method self.nodelist.render with an argument context, substitute the result for result.
  call the method self.writer_enters.
  from __future__ import unicode_literals into default name space.
  with '%s' substituted for migration_name and app_label, respectively, as arguments.   if KeyError exception is caught,
  define the function make_template_fragment_key with fragment_name and vary_on defaulting to None as arguments.
  if StandardError, renamed to e, exception is caught,
  define the function csrf with an argument request.
  otherwise if self.verbosity is greater than integer 0,
  import module re.
  return an instance of a NowNode class, created with an argument format_string.
  define the function dummy with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  if length of empty_label is not equal to integer 3.
  get the value under the 'format' key of the options dictionary, substitute the result for format.
  substitute name for self.__name.
  define the function humanize with an argument dirname.
  use the remainder of the division of name by count as the argument for the call to the avoid_wrapping function, store the result in result.
  call the function pformat with an argument sys.modules, append the result for output.
  'get_current_timezone', 'get_current_timezone_name', 'activate', 'deactivate', 'override', 'localtime', 'now', 'is_aware',   'is_naive', 'make_aware' and 'make_naive'.   call the function timedelta with an argument integer 0, substitute the result for ZERO.
  code_list is an empty list.
  call the formataddr function with argument tuple containing 2 elements nm and addr.
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  define the method inclusion_tag with 5 arguments: self, file_name, context_class set to Context, takes_context set to boolean False,
  self._populated is boolean True.
  try,
  return an instance of CsrfTokenNode class.
  call the method self.build_potfiles, substitute the result for potfiles.
  derive the class TemplateCommand from the BaseCommand base class.
  self._raw_ipv6 is boolean True.
  define the function rfc3339_date with an argument date.
  self.stderr is an OutputWrapper object instance, created with value under the 'stderr' key of the options dictionary as an argument,
  define the mehod __lt__ with self and other.
  define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.
  call the function re.compile with 2 arguments, string '^%s/', where '%s' is replaced with language_code and re.UNICODE, substitute the result for regex_compiled.
  get the value under the if iso_input not in val key of the ISO_INPUT_FORMATS dictionary, if it doesnt exists return an empty tuple,
  call the method self.errors.as_data, for every error for value under the filed key of the returned dictionary,
  if self._dir file path does not exists,
  call the method self._assert_mutable.
  if httponly is true,
  define the method parse_endtag with self class instance and i as the arguments.
  property decorator,
  call the method keyword.iskeyword with an argument new_name, if it evaluates to true,
  call the method self.var1.resolve with 2 arguments: context and boolean True, substitute the result for val2.
  import module datetime.
  derive the class WSGIServer from simple_server.WSGIServer and object base classes.
  call the method Encoders.encode_base64 with an argument attachment.
  call the function no_style, substitute it for self.style.
  substitute new_attr for self.attr.
  substitute hlen for dklen.
  raise an ValueError exception with an argument string "Unable to convert %r" formated with value.
  if prefix is None,
  if 'locale' is a directory,
  convert self.file to string and append string '.py' to it, substitute the result for thefile.
  sublist is an string '\n%s<ul>\n%s\n%s</ul>\n%s', where every '%s' is replaced with indent, sublist, indent and indent, respectively.
  if dklen is false,
  do nothing.
  define the method evalu with 2 arguments self and context.
  call the method self.xml.endElement with an argument string 'field'.
  raise an NotImplementedError exception with an argument string 'subclasses of LabelCommand must provide a handle_label() method'.
  where '%s' is replaced with fixture_name, and RuntimeWarning.   decorator method lru_cache.lru_cache with an argument maxsize set to None.
  return select_html.
  if not,
  if min_length is not None,
  increment self.fixture_object_count by objects_in_fixture.
  called with string '__prefix__' as an argument and empty_permitted as boolean True, substitute the result for form.   call the method self.add_fields with arguments form and None.
  define the method tell with an argument self.
  from django.utils.safestring import mark_safe into default name space.
  raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a modified_time() method'.
  call the method self.clean with value as argument, substitute the result for cleaned.
  call the method self.field.bound_data with 2 arguments: self.data and value under the self.name key of the dictionary,
  call the function import_module with 2 arguments: string .management and app_config.name.
  set self.cdata_tag to None.
  substitute self.required for widget.is_required.
  append string '-_' to the BASE62_ALPHABET, substitute it for BASE64_ALPHABET.
  from django.utils.six import StringIO into default name space.
  append tuple containing 3 elements: candidate, fixture_dir and fixture_name to list fixture_files_in_dir.
  call the method self.expression.resolve with 2 arguments: context and boolean True, return the result.
  skip this loop iteration.
  ISO_8859_1 is a string 'iso-8859-1', UTF_8 is a string 'utf-8'.
  append list containing string '--no-wrap' to self.msgmerge_options
  raise CommandError with an argument string 'Unknown model: %s', where '%s' is replaced with app_label and model_label, respectively.
  define the method j with an argument self.
  initial is boolean False.
  do nothing.
  if not,
  do nothing.
  match string s with regex IDENTIFIER, substitute the result for m.
  default_validators is an empty list.
  append '(' to field_type.
  call the function conditional_escape with an argument contents, substitute the result for contents.
  try,
  append string ', ' to field_desc.
  return an instance of a NodeList class, created with arguments node, for every node in nodelist,
  _moved_attributes is an empty list.
  define the method a with an argument self.
  substitute i for value under the 'counter0' key of the loop_dict dictionary.
  sum day_of_year, result of the subtraction of weekday from integer 7 and subtraction of integer 1 from jan1_weekday.
  append truncate to text, return the result.
  conditions_nodelists is a list containing tuple with 2 elements condition and nodelist.
  call the function hook with an argument entry, substitute the result for finder.
  substitute number for self.number.
  if status is True,
  define the method usage with arguments self and subcommand.
  replace '%s' in string "Downloading %s\n", with display_url, write it to self.stdout stream.
  call the sql_flush function with self.style, connections under the key with the value of options dictionary under the 'database' key,
  define the method __init__ with 3 arguments: self, value and text.
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  call the method connection.introspection.get_field_type with 2 arguments: second element of row and row, substitute the result for field_type.
  define the method create_token with 4 arguments: self, token_string, source and in_tag.
  if ValueError exception is caught,
  derive the class HttpResponseBadRequest from the HttpResponse base class.
  if f.primary_key is true,
  derive the class TokenParser form the base class object.
  call the function lazy with 4 arguments: get_format, six.text_type, list and tuple, substitute the result for get_format_lazy.
  for every field, error_list in self.error_dict.items method return value,
  derive the class TranslatableFile from the object class.
  do nothing.
  call the function __current_timezone with an argument value, return the result.
  return result.
  define the method prepare_value with 2 arguments: self and value.
  define the method close with argument self.
  call the method value.ljust with an argument, arg converted into a integer, return the result.
  call the method inspect.getmro with an argument new_class, for every base in the result,
  substitute self.choices for self.widget.choices.
  substitute sup_cls.media for base.
  return saved_instances.
  if StandardError, renamed to e, exception is caught,
  decrement factor by one.
  if UnicodeDecodeError exception is caught,
  define the function fset with 3 arguments: instance, valse to None and name set to fset.__name__.
  slice chunk list to get the last rollback elements, if the new list is not empty,
  filter_raw_string is a raw string "^(?P<constant>%(constant)s)|^(?P<var>[%(var_chars)s]+|%(num)s)| (?:\s*%(filter_sep)s\s*
  if value under the 'errlog' key of options dictionary is true,
  define the method delete with arguments self and name.
  substitute nodelist for self.nodelist.
  define the method forms with an argument self.
  return string "(%s %r)", replace '%s' with self.if and '%r' with self.value.
  define the method resolve_context with 2 arguments: self and context.
  raise CommandError with an argument string 'Unknown serialization format: %s', where '%s' is replaced with format.
  if file self is not closed,
  skip this loop execution,
  substitute set of the results for self.value.   define the method is_checked with an argument self.
  return boolean False.
  _iterlists is a string "lists".
  define the method dst with 2 arguments self and dt.
  daemonize is boolean False.
  substitute 'n' for answer.
  call the method re_newlines.sub with 2 arguments: '\n' and text, return the result.
  return list_ and boolean False.
  define the method is_ajax with an argument self.
  substitute allow_empty_first_page for self.allow_empty_first_page.
  substitute message for self.message.
  string "%s already exists, overlaying a project or app into an existing directory won't replace conflicting files",   where '%s" is replaced with new_path.   open old_path file in 'rb' mode, with file descriptor renamed to template_file,
  call the method handler.new_file with 6 arguments: field_name, file_name, content_type, content_length, charset and  content_type_extra.
  derive the class BadSerializer from the object base class.
  call the function file_move_safe with content.temporary_file_path function result and full_path.
  if data is an instance of bytes,
  substitute the value under the 'outlog' key of options dictionary for value under the 'out_log' key of daemon_kwargs dictionary.
  from django.apps import apps into default name space.
  substitute string " " for space.
  define the method __repr__ with an argument self.
  append name to self._changed_data.
  get 'Meta' attribute from form object, if it exists substitute it for meta, if not meta is None.
  return boolean True.
  if value is true and method self.valid_value called with an argument value evaluates to false,
  if self.verbosity is greater or equal to integer 1,
  define the method __repr__ with an argument self.
  return data.
  call the method __new__ from the base class of the class MediaDefiningClass, called with 4 arguments: mcs, name, bases and attrs.
  try,
  define the function decorator with an argument klass.
  call the method strftime with an argument fmt, from the base class of the type of dt class.
  substitute name for handler.name.
  if unicode_value is an instance of six.text_type,
  import module glob.
  return boolean False.
  derive the class Command from the BaseCommand base class.
  set attr.name attribute of Module_six_moves_urllib_response object to attr.
  call the method field.clean with an argument value, substitute the result for value.
  define the method add_arguments with an argument self and parser.
  if not,
  define the method reader with an argument self.
  from django.utils._os import rmtree_errorhandle into default name space.
  from __future__ import unicode_literals into default name space.
  '<tr%(html_class_attr)s><th>%(label)s</th><td>%(errors)s%(field)s%(help_text)s</td></tr>', error_row set to a a string,   '<tr><td colspan="2">%s</td></tr>', row_ender set to a string '</td></tr>', help_text_html set to a string,   '<br /><span class="helptext">%s</span>' and errors_on_separate_row set to boolean False.   define the method as_ul with an argument self.
  optimizer is an instance of MigrationOptimizer class.
  for every pythonrc in tuple containing 2 elements: return value of the function os.environ.get called with a string "PYTHONSTARTUP",
  get translation_function attribute of the _default object, call the result with 3 arguments: singular, plural and number, return the result.
  create md5 hash from string response.content in hexadecimal format, surround the hash with double quotes,
  self._populated is boolean False.
  call the function warnings.warn with 3 arguments: string "django.utils.tzinfo will be removed in Django 1.9. "
  define the method _text_words with 3 arguments: self, length and truncate.
  derive the class TemplateDoesNotExist form the base class Exception.
  return iterator object based on the self.file collection object.
  for every line in sequence_sql,
  and ip_address_validator_map converted to a list, respectively.   call the re.compile function with an argument raw string '^[\d,]+$', substitute the result for comma_separated_int_list_re.
  substitute self.urlconf_name for self.urlconf_module.
  sub_match_dict is a dictionary created from self.default_kwargs dictionary using mapping function match.groupdict.
  if o is contained in opt_dict,
  if ImportError exception is caught,
  from django.core.serializers.json import DjangoJSONEncode into default name space.
  call the method s.decode with an argument string 'utf-8', substitute the result for s.
  raise an ViewDoesNotExist exception with an argument string "Could not import '%s.%s'. View is not callable.",
  try,
  call the method self._expire_info.clear.
  use the result as the argument for the call to the sql.extend method.   call the connection.creation.sql_for_pending_references method with refto, no_style() and pending_references as arguments,
  if value is an instance of six.string_types and value is not equal to ALL_FIELDS,
  call the method errors.extend with argument new_errors.
  return data.
  call the method self.empty_block_tag with an argument token.
  if url is false,
  EventHandler.modified_code is FILE_MODIFIED.
  objects_in_fixture is integer 0.
  call the function stat.S_IMODE with argument st.st_mode, substitute the result for mode.
  return a dictionary with an entry: self.ns for "xmlns".
  default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid date.' for 'invalid'.
  define the method _add_local_translations with an argument self.
  call the method self.validate_key with argument key.
  return boolean False.
  return string "<%s: %s>", formated with self.__class__.__name__ and self.
  open file old_file_name in read bytes mode, with file descriptor as f,
  define the function runfastcgi with 2 arguments: argset set to an empty list and unpacked dictionary kwargs.
  substitute DEFAULT_ATTACHMENT_MIME_TYPE for mimetype.
  append list containing string '--no-location' to self.msguniq_options.
  replace all occurrences of "'" with "\\'" in the previous result, return the result.   decorator function register.filter with an argument is_safe set to boolean True.
  if message is not None
  define the method entity_decl with arguments self, name, is_parameter_entity, value, base, sysid, pubid and notation_name.
  args is a empty tuple.
  if six.PY3 is true,
  and code set to an string 'required'.   for every val in value,
  call the function new_method_proxy with an argument unicode, substitute the result for __unicode__.
  define the method __nonzero__ with argument self.
  separated by newline, use it as an argument for the call to the function mark_safe, return the result.   define the method as_ul with an argument self.
  size, charset, content_type_extra.   substitute field_name for self.field_name.
  raise an exception.
  if not,
  import module decimal.
  if args is true,
  call the function force_text with an argument url, return the result.
  if self has an 'error_dict' attribute,
  covert to lowercase language element at (p+1)-th index, append it to the previous result,   covert to lowercase language elements from (p+2)-th index to the end, append it to the previous result, return it.   convert fist p elements of language to lowercase, append '_' to it,
  if p is greater or equal to integer 0,
  digits is a string "0123456789abcdefghijklmnopqrstuvwxyz".
  call the function _trans.check_for_language with an argument lang_code, return the result.
  substitute minimal element of the resulting list for self._chunk_size.   substitute META for self._meta.
  for name in attributes of models_signals object,
  if threading is true,
  for every root, dirs and files in subdirectory tree starting from the base dir template_dir,
  insert '.' to digits at negative exponent index.
  define the function __init__ with 11 arguments: self, required set to boolean True, widget set to None, label set to None,
  substitute auto_id for self.auto_id.
  from django.core.management.base import AppCommand into default name space.
  substitute EscapeText for EscapeString.
  open filename file in write mode, with the file descriptor renamed to outfile, perform,
  call the self.domain_regex.match method with an argument domain_part, if it evaluates to true,
  call the mail.send method with fail_silently=fail_silently as argument.
  from django.utils.functional import LazyObject into default name space.
  call the function check_for_language with an argument lang, if it evaluates to false,
  return an string "<%s: %r>", where '%s' is replaced with self.__class__.__name__ and self.var, respectively.
  for every w in self.widgets, if all elements w.is_hidden are true, return boolean True, otherwise return boolean False.
  delete frame.
  define the function dictsortreversed with 2 arguments value and arg.
  substitute loader.graph for graph.
  if value under the 'liveserver' key of the options dictionary is not None,
  join self.namespaces into a string separated with character ':', substitute it for self.namespace.
  return property object with _media as getter function.
  substitute the result for ipv4_re.   validate_ipv4_address is a instance of a RegexValidator class, created with 3 arguments: ipv4_re,
  define the method add_item_elements with 3 arguments: self, handler and item.
  substitute settings.TEMPLATE_STRING_IF_INVALID for current.
  define the method render with 2 arguments self and context.
  if field.rel is true and field.rel is an instance of models.ManyToManyRel,
  derive the class Iterator from the base class object.
  define the method get with 3 arguments: self, key and otherwise set to None.
  join statements into a string, separated by newlines, return it.
  compare is a lambda function with arguments self, a and b, return value is boolean true if a is greater than b, otherwise is false.
  import module sys.
  if field.rel.through._meta.auto_created is true,
  substitute the result for timezone.   divide timezone by integer 60, substitute the quotient of the division for hour and reminder for minute.
  convert tag to lowercase if it is not equal to self.cdata_tag,
  substitute the result for s.   if not,
  call the function flatten_result with an argument result, unpack the resulting list and zip it in the list of tuples, return the result.
  call the method stream_or_string.decode with an argument string 'utf-8', substitute the result for stream_or_string.
  get the value under the key key of the self.cookies dictionary, substitute max-age for 'max-age' key of the returned dictionary.
  return None.
  raise an ValueError exception with an argument string ''Unable to configure root logger: %s' formated with e.
  evaluate the function bytes with the argument s, and return the result.
  if not,
  if self.data.hour is greater than inreger 12,
  break the loop execution.
  define the method _cache with self class instance as an argument.
  substitute '%s' in a string "  %s:\n" with return value of the self.style.MIGRATE_LABEL method called with argument writer.filename,
  define the method validate_unique with an argument self.
  return value.
  if not,
  call the function form.save_m2m.
  subtract length of dec_part from decimal_pos, multiply the number of character '0' by the result,
  return value.
  define the method open with argument self.
  call the method handler.addQuickElement with 2 arguments: string 'link' and value under the 'link' key of the self.feed dictionary.
  if AttributeError exception is caught,
  raise an ValueError exception with argument string "EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive, so only set one of those settings to True.".
  if mime_encode is true,
  substitute the last element of parts for parts.
  derive class LimitedStream from the object base class, making it a new-style class.
  remove config dictionary entry under 'format' key, substitute it for value under 'fmt' key of config dictionary.
  from __future__ import unicode_literals into default name space.
  from django.db.models import ForeignKey.
  for every node in self.nodelist_loop,
  append self.msgattrib_options to a list containing string 'msgattrib', append to it a list containing string '-o', pofile and pofile,
  increment key by kwd_mark.
  define the method is_hidden with an argument self.
  define the method write with 2 arguments: self and val.
  define the method __newobj__ with 2 arguments cls and unpacked list args.
  if match evaluates to False throw an exception with the string message 'unexpected call to parse_starttag()'.
  from django.utils import formats and six into default name space.
  result of the m.group method called with an argument integer 0 converted into lowercase and t, return the result.   decorator function register.filter with an argument is_safe set to boolean True.
  for every func in self.response_fixes,
  return value of the function smart_text with return value of the method value._get_pk_val as an argument for 'pk'.   for every relobj in iterator generated from the field.name attribute of the obj object.
  define the function fix with an argument match.
  otherwise if self.name exists and self.name file path exists,
  if url is true,
  try,
  append field.widget.media to media, substitute the result for media.
  default is boolean False, and help is a string "Don't colorize the command output.".   if self.args is true,
  derive the class TextNode form the base class Node.
  for every middleware_method in self._response_middleware,
  for 'errors', return value of the function force_text with an argument label for 'label', return value of the function six.text_type,   with an argument bf, for 'field', help_text for help_text, html_class_attr for 'html_class_attr' and bf.html_name for 'field_name'.    if top_errors is true,
  dest set to string 'verbosity', default set to string '1', type set to string 'choice', choices is a list containing elements: '0', '1', '2', '3', and help as a string 'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output'.   call the method parser.add_option with 2 arguments: string '--settings' and help as a string 'The Python path to a settings module, e.g. "myproject.settings.main". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.'.
  import module hashlib.
  substitute app_name for self.app_name.
  return data.
  call the function validate_ipv4_address with an argument hextet.
  call the function sql_destroy_indexes with 3 arguments: app_config, self.style and connection, substitute the result for statements.
  for every w in widgets, call the function w and append the result to a list, if w is an instance of type class,
  for every path in paths,
  if self.verbosity is greater or equal to integer 1.
  for every d in last element of self.dicts,
  if Resolver404, renamed to e, exception is caught,
  call the function unescape_string_literal with an argument var, use it as an argument for the call to the function mark_safe,
  from django.core.management.sql import sql_destroy_indexes into default name space.
  get the value under the 'incomplete' key of the field.error_messages dictionary, append it to errors.
  while '<' is contained in value and '>' is contained in value,
  raise an TemplateDoesNotExist exception with an argument template_name.
  if ValueError, TypeError or ValidationError exception is caught,
  define the method __call__ with arguments self and value.
  if not,
  call the method tempfile.NamedTemporaryFile with arguments: suffix set to string '.upload' and dir set to settings.FILE_UPLOAD_TEMP_DIR.
  define the __init__ method with arguments: self, text, subtype and charset.
  import module sys.
  return value of the call to the function _ with an argument string 'Enter only digits separated by commas.' and string 'invalid'.   decorator deconstructible,
  otherwise if char is contained in string 'dj',
  substitute root for oldroot.
  for every plan_node in return value of the graph.forwards_plan method called with node as argument.
  define the method __init__ with arguments: self, fields set to an empty tuple, unpacked list args and unpacked dictionary kwargs.
  _meth_self is a string "__self__".
  return an empty string,
  call the function import_library with an argument module, append the result to builtins.
  call the function get_format with an argument string 'DATE_INPUT_FORMATS', substitute the first element of the result for input_format.
  define the function mark_for_escaping with an argument s.
  and third element of result of the function sys.exc_info.   call the function import_module with an argument module_path, substitute the result for module.
  if 'coerce' key of the kwargs dictionary exists remove it and substitute its value for self.coerce,
  for every name in handlers,
  define the method __deepcopy__ with arguments self and memo.
  call the method self.callback with an argument record, if the result evaluates to true,
  from collections import OrderedDict into default name space.
  return msg_count.
  if result is not None,
  call the method constant_re.match with first element of parts as an argument, substitute the result for cmatch.
  define the method __init__ with 5 arguments: self, var, name, nodelist and extra_context set to None.
  call the function load_command_class with arguments app_name and subcommand, substitute the result for klass.
  use the result as an argument for the call to the mark_safe function, return the result.   call the function allow_lazy with 2 arguments: escapejs, six.text_type, substitute the result for escapejs.
  use it as an argument for the call to the function force_text, return the result.   define the method as_text with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.
  otherwise if value is an instance of datetime.datetime,
  msg is a string "The use of the language code '%s' is deprecated. Please use the '%s' translation instead.".
  call the method field.rel.to._meta.pk.to_python with an argument value, use the result as an argument for the call to the,
  if now equals to boolean True and now is not an instance of datetime.datetime,
  return boolean True.
  call the method self.xml.endElement with an argument string "django-objects".
  formfield_callback as formfield_callback, widgets as widgets, localized_fields as localized_fields, labels as labels,   help_texts as help_texts and error_messages as error_messages, substitute the result for form.   call the function formset_factory with 10 arguments: form, formset, extra as extra, min_num as min_num, max_num as max_num,
  if s is not an instance of the object six.string_types,
  return None.
  return obj.
  return nodelist_true_output, if true, if not call the method self.nodelist_true.render with an argument context and return the result.
  from django.utils.html import strip_spaces_between_tags.
  define the method read with arguments self and size set to None.
  help is a string "Squashes an existing set of migrations (from first until specified) into a single new one.".
  try,
  call the method data.getlist with an argument name, return the result.
  if old_attr is None,
  substitute variables for self.vars.
  call the method __init__ form the base class of the Command class.
  import module warnings.
  split token.contents into separate words, substitute the first element of the result for command.
  call the method obj.save with an argument using set to self.using.
  call the function warnings.warn with 2 arguments: string "django.utils.tzinfo.LocalTimezone will be removed in Django 1.9. "
  if bf_errors is true,
  call the method self._start_relational_field with the argument field.
  append f.name to exclude.
  from django.conf import settings into default name space.
  convert timeout into an integer, return it.
  from django.db import connections and DEFAULT_DB_ALIAS into default namespace.
  increment the lineno by the count of the newlines in self.__starttag_text.
  if response is None,
  convert initial and data into boolean, if they are not equal return boolean True, if they are return boolean False.
  self.children is an list with 2 elements: obj and data.
  substitute the result for filter_re.   derive the class FilterExpression form the base class object.
  if length of bits is lesser than integer 2,
  call the method signing.get_cookie_signer with an argument salt set to sum of key and salt, call the method unsign on the result,
  call the method deactivate.
  if language is not contained in _translations,
  _localtime is an instance of LocalTimezone class.
  while i is lesser than length of subject and i-th element of subject is an empty space or tab character.
  substitute field.rel.to with rel_model.
  call the as_bytes method on the return value of the message.message method append to it '\n' character, use it as the argument for the call to the self.stream.write method.
  define the method get_dump_object with arguments self and obj.
  do nothing.
  define the method exit_command with an argument self.
  if value is true,
  define the method flatten with an argument self.
  call the method field_node.getAttribute with an argument string 'name', substitute the result for field_name.
  datetime.date and datetime.time.   define the function is_protected_type with obj as the only argument.
  from django.utils.module_loading import import_string into default name space.
  from django.db import connections and transaction into default name space.
  call the function re.compile with raw string '(<a [^>]*?)target=[^\s>]+', substitute the result for link_target_attribute_re.
  if ':' is not contained in ip_str.
  call the value.natural_key method, substitute the result for natural.
  got_request_exception is a instance of a Signal class, created with an argument providing_args as the list containing string 'request'.
  append decimals to parts.
  if self_closing is true or tagname is contained in html4_singlets,
  call the function copy with an argument self.render_context, substitute the result for duplicate.render_context.
  do nothing.
  add bits to a tuple, return it.
  if is_templatized is true,
  call the method re.match with 2 arguments: naiveip_re and value under the 'addrport' key of the options dictionary, substitute the result for m.
  if illegal_formatting is true,
  define the method nud with 2 arguments self and parser.
  define the method __bool__ with an argument self.
  return an empty string.
  if not,
  sys.stdout is an instance of NullDevice class.
  raise an NotImplementedError exception with an argument string 'subclasses of Origin must provide a reload() method'.
  call the function update_wrapper with 2 arguments: _wrapper and func.
  if ValueError exception is caught,
  substitute content_type_extra for self.content_type_extra.
  substitute '%s' in the string '\n%s:\n%s\n', with group_name and formatted, substitute the result for msg.
  call the method clean with an argument value from the base class of the class TypedChoiceField, substitute the result for value.
  decorator method register.tag with an argument 'include',
  define function smart_bytes with s, encoding set to string 'utf-8', strings_only set to False and errors set to string 'strict', as arguments.
  substitute self.max_value for the value under the 'max' key of the attrs dictionary.
  self.resolver_match is None.
  define the method __init__ with 4 arguments: self, takes_context, args and kwargs.
  call the method self.main_help_text append new line to it, write it to sys.stdout.
  define the method write_message with arguments self and message.
  return an empty dictionary.
  if escaped is true,
  import module json.
  if changes is true,
  with value result of the conditional_escape function called with an argument v for key k.   call the method format_string.format with 2 arguments: unpacked list args_safe and unpacked dictionary kwargs_safe,
  get the id of the self object, use it as a key to obtain the value from the memo dictionary, substitute self with it.
  call the function apps.get_app_configs, for every app_config in result,
  call the method field.widget.value_from_datadict with 3 arguments: self.data, self.files, prefixed_name, substitute the result for data_value.
  append list with 2 strings: '_request' and '_current_app' to SimpleTemplateResponse.rendering_attrs, substitute the result for rendering_attrs.
  import module sys.
  if token.contents equals string 'else',
  call the function warnings.warn with 3 arguments: string "SortedDict is deprecated and will be removed in Django 1.9.",
  substitute package.__path__ for package_path.
  define the function sort_dependencies with an argument app_list.
  if url_info.netloc is false or url_info.netloc equals host, and if url_info.scheme is false or url_info.scheme equals,
  define the method apply_response_fixes with self class instance, request and response as the arguments.
  for every name in filters,
  substitute last element of output for last_row.
  define the method render with 2 arguments: self and context.
  call the function runfastcgi with an argument all the elements, except the first from the sys.argv list.
  calculate negative length of s, by modulus integer 4, use the result as the number of '=' characters to be stored in pad.
  use the result as an argument for the call to the function mark_safe, return the result.   if p equals integer 0,
  from django.utils.encoding import force_text into default name space.
  substitute first element of item for k.
  delete the value under the key key of self._cache dictionary.
  from threading import Lock into default name space.
  get the value under the 'incomplete' key of the field.error_messages dictionary, if it is not contained in errors,
  syear is a string "%04d" formated with dt.year.
  __author__ is a string "Benjamin Peterson <benjamin@python.org>".
  try,
  define the method changed_data with an argument self.
  substitute third element of renamed_method for deprecation_warning.
  if not,
  return rv.
  call the method self.add_prefix with an argument fieldname, substitute it for prefix.
  increment self.active_readers by t.
  call the method block_context.add_blocks with an argument self.block.
  call the function escape with an argument p, replace every occurrence of '\n' in the result for '<br />',
  if cache_choices is not None,
  questioner is an instance of a InteractiveMigrationQuestioner class, created with an argument: defaults set to dictionary with entry:
  return field_type, field_params and field_notes.
  if return value of the self.is_secure method is true and server_port is not equal to string '443',
  if locales is true,
  otherwise if first element of g equals a string "'",
  from django.utils import six into default name space.
  from django.conf import settings into default name space.
  if to_lower is true,
  remove the first element of context.
  do nothing.
  if not,
  try,
  compatibility is a string 'compatibility'.
  call the method timezone.localize with 2 arguments: value and is_dst as None, return the result.
  call the function time.strftime with 2 arguments: fmt and and timetuple without the first element,
  call the method self._mark_post_parse_error.
  substitute empty bytes string for self.buffer.
  yield and empty string as the result.
  define the method __delitem__ with 2 arguments: self and key.
  append the result to the result of the method, self.as_widget, return the resulting string.   call the method self.as_widget, return the result.
  regex is an property object of this class, with _get_regex getter and _set_regex setter function.
  if exit_code is not equal to integer 3.
  return settings.TEMPLATE_STRING_IF_INVALID.
  try,
  from django.core.mail.utils import DNS_NAME into default name space.
  from django.core.management.sql import sql_flush into default name space.
  call the function force_text with 2 arguments: src and settings.FILE_CHARSET.
  if sys.platform starts with string 'java',
  define the method has_key with 2 arguments: self and key.
  define the function __init__ with 3 arguments: self, token and parser.
  call the method self.check with arguments: app_configs set to app_configs, tags set to tags, display_num_errors set to boolean True.
  from django.conf import settings into default name space.
  from django.utils.encoding import python_2_unicode_compatible into default name space.
  from django.conf import settings.
  if the tuple result equals to tuple containing character ';' and string '"\\073"', respectively,   assign _cookie_encodes_correctly the boolean True value, otherwise assign it False.   assign return value of the call to the http_cookies.SimpleCookie function to _tc.
  return s.
  self._container is an list.
  yield value under key key of self dictionary.
  define the method _iteritems with an argument self.
  delete logging._handlerList list.
  _func_closure is a string "__closure__".
  return an instance of a SsiNode class, created with 2 arguments: filepath and parsed.
  if self.use_ipv6 substitute string '::1' for self.addr, if not substitute '127.0.0.1' for self.addr.
  model._meta.app_label, model._meta.object_name, parent_model._meta.app_label, parent_model._meta.object_name, respectively.   return fk.
  replace '%s' in string "%s = %s" with key and value under the key key of the user_setting dictionary, append it to the output.
  call the method dict.__getitem__ with 2 arguments self and key, substitute the result for value.
  skip this loop iteration.
  call the method __init__ from the base class of the class Textarea, with an argument default_attrs.
  join statements into a string, separated by newlines, return it.
  if chunk_size is false,
  domains is a tuple with element string 'django'.
  if name is callable object,
  call the function warnings.warn with an argument string "``--natural`` is deprecated; use ``--natural-foreign`` instead.",
  call the function six.iteritems with an argument: instance of base class of the MultiValueDict class, return the result.
  if cache is None,
  return an empty list.
  return result.
  raise an CommandError exception with an argument string "couldn't handle %s template %s.", replace '%s' with self.app_or_project and template.
  substitute first length elements of words for words.
  if has_old_option is true,
  substitute the result for value under the 'isPermaLink' key of the guid_attrs dictionary.   call the method handler.addQuickElement with 3 arguments: string 'guid', value under the 'unique_id' key of the item dictionary,
  if name is false,
  if second element of url_fields is false,
  define the method recipients with argument self.
  if bytes is false,
  raise an CommandError exception with an argument string "%r is not a valid port number.", where '%r' is repaced with self.port.
  of if sample starts with codecs.BOM_UTF16_LE or sample starts with codecs.BOM_UTF16_BE, return the evaluated boolean expression.   define the function is_writable with path as argument,
  substitute file_or_path for file.
  call the method loader.get_template with an argument template, return the result.
  call the method self.get_unique_error_message with an argument unique_check, append the result to errors.
  call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs,
  args is an empty string.
  if context_instance is false,
  self._post_parse_error is boolean False.
  apps is an empty dictionary.
  call the method validators.MinValueValidator with min_value converted into an integer, append the result to list self.validators.
  substitute complain for __imul__.
  call the method clean with an argument value from the base class of the class ComboField.
  derive the class ImmutableList from the tuple base class.
  if extra_context is true, substitute it for self.extra_context, if not self.extra_context is an empty dictionary.
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  from django.apps import apps into default name space.
  and version set to result of the method self.get_version.   call the method parser.add_option with 8 arguments: string '-v', string '--verbosity', action set to string 'store',
  define the method next_page_number with an argument self.
  if not,
  otherwise if value is an instance of datetime.datetime,
  if not, self.empty_value is an empty list.   call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs,
  convert orphans into an integer and substitute it for self.orphans.
  exit the program with failures converted to boolean as a message.
  call the method six.iteritems with an argument kwarg, convert the result into a list,
  append a tuple with 2 arguments: filter_func and args to filters.
  LOCK_EX is a hexadecimal 2.
  call the method base.__dict__.items, for every attr and value in the result,
  substitute length of prefixed for pflen.
  4 for 'h', 4 for 'i', 4 for 'j', 5 for 'k', 5 for 'l', 5 for 'm', 6 for 'n', 6 for 'o', 6 for 'p', 7 for 'q', 7 for 'r', 7 for 'r',   7 for 's', 7 for 't', 8 for 't', 8 for 'u', 8 for 'v', 9 for 'w', 9 for 'x', 9 for 'y' and 9 for 'z'.   for every c in phone converted to lowercase, join the value under the c key of the char2number dictionary into a string, return it.
  return integer 0.
  try,
  derive the LabelCommand class from the BaseCommand base class.
  define the function get_standard_processors.
  define the method urlconf_module with an argument self.
  WARNING is integer 30.
  try,
  substitute _iteritems for items.
  define the function rmtree_errorhandler with 3 arguments func, path and exc_info.
  from django.apps import apps into default name space.
  substitute factory for value under '()' key of config dictionary.
  call the method self.can_read.release.
  self.form.initial, if it exists, or self.field.initial if not, substitute the result for data.   call the method self.field.prepare_value with an argument data, return the result.
  return boolean True.
  and with safe set to bytes string "/#%[]=:;$&()+,!?*@'~", return the result.   define function filepath_to_uri with path as the argument.
  if match is true,
  from django.core.management.color import color_style into default name space.
  raise an TemplateEncodingError exception with an argument "Templates can only be constructed from unicode or UTF-8 strings.".
  call the method msg.attach with an argument body_msg.
  return an empty string,
  get the value under the 'error_messages' key of the kwargs dictionary, update errors dictionary with it.
  raise an ValueError with an argument string "Invalid header: %r", where '%s' is replaced with line.
  do nothing.
  for every name in loggers,
  if kwargs is true,
  define the function lower with an argument value.
  for every ip in tuple containing 3 elements: self._ipython, self._ipython_pre_100 and self._ipython_pre_011,
  if self.save_as_new is true,
  if self._cull_frequency equals to integer 0.
  extend the self.error_list list with message.error_list.
  substitute environ for self.environ.
  substitute the result for origin.   try,
  call the function six.itervalues with an argument kwargs, convert the result to a list and append it to a list containing args,
  define the method hidden_fields with an argument self.
  define the function title with an argument value.
  define the function first with an argument value.
  DEFAULT_MAX_NUM is an integer 1000.
  import module datetime.
  do nothing.
  for every field in concrete_model._meta.local_fields,
  format a string "(?P<%s>%s)" with groupid and tok.regex, append it to the parts.
  define the function safe with an argument value.
  define the method url_patterns with an argument self.
  for every location in format_locations,
  if name equals string "_wrapped",
  if s is an instance of six.text_type or Promise,
  from __future__ import unicode_literals into default name space.
  from django.db.migrations.autodetector import MigrationAutodetector into default name space.
  fp is a instance of a class six.BytesIO.
  if name is not contained in data,
  if call to the function response.has_header with string 'Vary' as an argument returns True,
  call the function io.open with 3 arguments: work_file, string 'w' and encoding set to settings.FILE_CHARSET as arguments,
  and trimmed, write the result to out.   for every part in singular,
  perform the previous for every combo in result of the function product called with 3 arguments: databases, ser_fmts and cmp_fmts,   substitute the result for suffixes.   join fixture_name and suffix into a string, separated by '.' for every suffix in suffixes, put the results in set, substitute it for targets.
  bcc, connection, attachments, headers and cc.   if alternatives exists substitute it for self.alternatives, if not self.alternatives is an empty list.
  try,
  substitute new_mod for self.mod.
  use the result as an argument for the call to the function strip_spaces_between_tags, return the result.   derive the class TemplateTagNode from Node base class.
  define the method H with an argument self.
  divide x by length of to_digits, convert floor value of the result to an integer, substitute it for x.
  if index_sql is not empty,
  call the function timeuntil with 2 arguments value and arg, return the result.
  call the function calendar.isleap with an argument self.data.year, if it evaluates to true,
  and unpacked dictionary kwargs.   if safe is true and data is not an instance of dict type.
  derive the TemporaryUploadedFile class from the UploadedFile base class.
  if exp is None or exp is greater than the return value of the call to the function time.time,
  define the method __init__ with 4 arguments: self, context, unpacked list args and unpacked dictionary kwargs.
  substitute self.none_value for self.day_none_value.
  content_subtype is a string 'plain'.
  if match is true,
  return nothing.
  otherwise if template_tuple is None,
  call the method self._callback_strs.add with an argument pattern._callback_str.
  try,
  return boolean False.
  for every f in filters,
  if not,
  if KeyError or AttributeError, renamed to exc, exceptions are caught,
  raise an TemplateSyntaxError exception with an argument string "Searching for value. Unexpected end of string in column %d: %s",
  help is an string "Creates the tables needed to use the SQL cache backend.".
  if tzinfo equals a string 'Z',
  substitute settings.SECRET_KEY for secret.
  for every sql in sql_list,
  call the method self.add_filters with 2 arguments: result and filters.
  from django.utils.safestring import mark_safe and SafeData into default name space.
  dest as a string 'interactive', default set to boolean True,   and help as a string 'Tells Django to NOT prompt the user for input of any kind.'.   define the method handle with 3 arguments: self, unpacked list app_labels and unpacked dictionary options.
  remove self.value_converters dictionary element under prefix key, if it exists substitute it for converter, if not, converter is None.
  if potfile fie exists,
  call the method parser.compile_filter with an argument string "var|%s", where '%s' is replaced with rest, substitute the result for filter_expr.
  substitute length for self._length.
  substitute bits without the first element for remaining_bits.
  define the method add_filters with 3 arguments: self, filterer and filters.
  from __future__ import unicode_literals into default name space.
  define the funtion get_internal_wsgi_application.
  if not,
  return self.STDOFFSET.
  if ImportError exception is caught,
  if not,
  remove file tmp_path.
  fks_to_parent is a list containing f, for every f in opts.fields if f.name equals fk_name.
  call the function six.StringIO with an argument stream_or_string, substitute the result for self.stream.
  from lib2to3.pgen2 import token into default name space.
  sublist is an empty string.
  if path is None,
  in "%s in %s" substitute '%s' with names string and app, respective, join all the previous pairs into a string separated by ';',   substitute it for name_str.   raise CommandError exception, with "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'",
  call the method numberformat.format with 6 arguments: value, result of the function get_format called with 3 arguments:
  if config dictionary value under 'version' key is not equal to integer 1,
  define the function parse_http_date with an argument date.
  substitute link_prev for value under the PREV key of the link_next dictionary.
  call the function get_commands, call the method keys on the result, substitute sorted result for usage.
  otherwise if value under the key 'all' of the options dictionary is true,
  while i is lesser than length of subject and i-th element of subject is an empty space or tab character,
  substitute the result for final_attrs.   call the method self.is_checked, if it evaluates to true,
  return a string '%06d' formated with self.data.microsecond.
  from __future__ import unicode_literals into default name space.
  from django.utils._os import safe_join into default name space.
  for every item in self.items,
  substitute cls.__text_cast for cls.__text_cast.
  substitute the value under the fieldname key of the self.fields dictionary for field.
  define the method delete with self class instance, key and version defaulting to None as arguments.
  default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a database to introspect. Defaults to using the "default" database.'.   define the method handle with 2 arguments: self and unpacked dictionary options.
  if out_log is true,
  define the method has_key with 2 arguments: self and key.
  yield line.
  call the method self.value.resolve with 2 arguments context and ignore_failures set to boolean True, return the result.
  filter out the results for which function os.path.isdir returns false, substitute the result for locale_dirs.   map the locale_dirs elements with mapping function os.path.basename, substitute the result for all_locales.
  call the method logging.Formatter with 2 arguments: fmt and dfmt, substitute the result for result.
  append i_args to args, append new_args with the result.
  calculate reminder of division of x by length to_digits, substitute it for digit.
  if not,
  call the method queryset.filter with an argument unpacked dictionary containing self.instance for self.fk.name, substitute the result for qs.
  call the function debug.technical_404_response with request and e as arguments, assign the result to response.
  return an instance of Media class, created with definition as an argument.
  increment self.loaded_object_count by loaded_objects_in_fixture.
  define the function import_module with 3 arguments: name and package set to None.
  substitute last for value under the PREV key of the link dictionary.
  self.META is an empty dictionary.
  if self has an attribute '_object_dict',
  result_args is a list containing an empty list.
  return iterable self.keyOrder.
  if message is an instance of ValidationError class,
  get the value under the 'database' key of the options dictionary, if it doesnt exists use the DEFAULT_DB_ALIAS to address an element
  for every arg in the result,   if arg is an instance of Promise class,
  from decimal import Decimal and DecimalException into default name space.
  if imoportError exception is caught,
  return boolean True, otherwise return boolean False.   define the function make_aware with 2 arguments: value and timezone.
  formated with 3 elements: class_name, old_method_name and new_method_name, deprecation_warning and integer 2.   set new_method_name attribute of the base object to old_method.
  append '-' to digits.
  raise an TemplateSyntaxError exception with an argument string "widthratio final argument must be a number".
  skip this loop iteration.
  define the function templatetag with 2 arguments: parser and token.
  option is a string '--testrunner='.
  append idstring to the '.' character, substitute it for idstring.
  if tok starts with "'",
  call the function sself.__cast with an argument self, divide the result with rhs and return the reminder of the division.
  if path starts with string 'http://' or string 'https://' or with string '/',
  substitute DictConfigurator for dictConfigClass.
  append a tuple with 2 elements: condition and nodelist to conditions_nodelists.
  _supported is an instance of OrderedDict class, created with an argument settings.LANGUAGES.
  if string "'format'" is not contained in e converted into a string,
  call the method handler.addQuickElement with 3 arguments: string 'category', an empty string and a dictionary with an entry:
  from subprocess import PIPE and Popen into default name space.
  substitute last four elements of base for base.
  call the function format_html with 2 arguments: string '<optgroup label="{0}">' and return value of the function force_text,
  return value.
  define the method __init__ with 3 arguments: self, attrs set to None and choices set to an empty tuple.
  try,
  return string '0'.
  call the method activate with an argument self.timezone.
  convert x into a string and append it to a list, substitute the resulting list for out.   join elements of out into a string, separated with whitespaces, append ')' to it, append the result to '(', return it.
  call the function construct_instance with 4 arguments: self, self.instance, opts.fields and construct_instance_exclude,
  get the value under the 'charset' key of the content_type_extra dictionary, substitute it for charset.
  return msgid.
  and self.code equals to other.code, return boolean True, otherwise return boolean False.   decorator deconstructible,
  derive the class Select from the Widget base class.
  decorator classmethod,
  if ImportError exception is caught,
  instantiate RelatedObject class with 3 arguments: cls.fk.rel.to, cls.model and cls.fk,
  if value is false,
  substitute '%s' with return value of the function get_text_list called with 2 arguments:self.extensions converted into a list and string 'and'.   self.invoked_for_django is boolean False.
  get the value under the 'HTTP_X_REQUESTED_WITH' key of the self.META dictionary, if it equals string 'XMLHttpRequest',
  call the function file_move_safe with tmp_path, fname, allow_overwrite set to boolean True as arguments.
  raise an exception.
  make a system symbolic link between original_path and symlink_path.
  if self.verbosity is greater or equal to integer 1.
  define the method subwidgets with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
  try,
  if not,
  import module re.
  return a string "<%s: %s>" formated with self.__class__.__name__,
  call the function six.reraise with 3 arguments: UnreadablePostError, UnreadablePostError instantiated with unpacked list e.args,
  otherwise if vale is not an instance of ConvertingTuple and value is an instance of tuple type,
  do nothing.
  call the handle function with dictionary pair of elements options from the base class of the class Command.
  if attrs is None,
  get the 'do_not_call_in_templates' attribute of current object, if it exists and is true,
  skip this loop iteration,
  get the value from the options dictionary under the key 'load_initial_data', substitute it for self.load_initial_data.
  defaults set to defaults, name set to function_name, takes_context set to takes_context and node_class set to InclusionNode,   substitute the result for compile_func.   substitute func.__doc__ for compile_func.__doc__.
  do nothing.
  if min_num is None,
  substitute save_m2m for self.save_m2m.
  call the method self._archive.extractfile with an argument member, substitute the result for extracted.
  if value is an instance of datetime.time,
  for every j in range of integers from 0 to iterations converted to an integer,
  if self.file has an attribute 'size',
  call the method self.__prepare_class__.
  import module stat.
  call the function force_text with arguments value and strings_only set to boolean True, substitute the result for unicode_value.
  ingeter 0 and integer 0.   call the method _time.mktime with an argument tt, substitute the result for stamp.
  test_runner is an instance of TestRunner class, called with an argument unpacked dictionary options.
  derive the class OVERLAPPED from the Structure base class.
  otherwise if ch equals a string '(',
  if bytes_read is greater than rollback,
  define the function parse_cookie with cookie as the argument.
  define the method exists with arguments self and name.
  substitute self.old_timezone for _active.value.
  if converter is true,
  substitute form.cleaned_data for cleaned_data.
  self.config is an instance of ConvertingDict, called with an argument config.
  if not,
  from django.utils.timezone import get_default_timezone, is_aware and is_naive into default name space.
  call the methof model_dependencies.reverse.
  call the method self._initialize_handlers,
  and trimmed and result of the function join_tokens called with 2 arguments: plural and trimmed, write the result to out.   for every part in singular,
  result is an empty list.
  if call to the method self._css.get with an argument medium evaluates to false,
  and encoding, substitute the result for result.   if result is not None,
  from django.core.management.utils import find_command and popen_wrapper into default name space.
  for app_config in return value of the method apps.get_app_configs,
  define the function spaceless with 2 arguments: parser and token.
  from django.core.files import temp as tempfile into default name space.
  define the method _proxy_method with 3 arguments self, unpacked list args and unpacked dictionary kwargs.
  call the method add_fields from the base class of the class BaseInlineFormSet, with 2 arguments: form and index.
  if prefix is true, substitute it for self.prefix, otherwise call the method self.get_default_prefix,
  otherwise if cahr equals a string '\\',
  if settings.TEMPLATE_DEBUG is true,
  call the method self._update_errors with an argument e.
  from django.utils.encoding import force_str and force_text into default name space.
  append ch to quant.
  if self.lookups is not None,
  if leading is true,
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  return value of the function os.path.basename called with first element of sys.argv as an argument, and second element of sys.argv.   from django.conf import settings into default namespace.
  call the method connection.introspection.table_names with an argument cursor, substitute the result for table_names.
  return the result.   define the function pgettext with 2 arguments: context and message.
  yield string 'month' as an return value of the generator.
  call the function re.sub with 3 arguments: raw string "\\.|.", escape_quotes and tok without the first and last element,
  return msg.
  raise an CommandError exception with an argument string "Command doesn't accept any arguments".
  buffer_types is a tuple with 2 elements bytearray and memoryview.
  call the method formats.get_format_lazy with an argument string 'DATETIME_INPUT_FORMATS', substitute the result for input_formats.
  if with_base_fields is true,
  if mw_instance has an attribute named 'process_response'.
  import module os.
  from django.utils.six.moves import map into default name space.
  define the method render with 2 arguments: self and context.
  return an string '0'.
  call the parser.add_argument method with the string '--database', default set to DEFAULT_DB_ALIAS and help containig string,
  raise an NotImplementedError exception with argument string 'subclasses of Storage must provide an exists() method'.
  define the method pop with an argument self.
  call the function force_text with an argument top_errors, format error_row with it, insert it at the beginning of output.
  if it doesnt exists return otherwise.   define the method __getitem__ with 2 arguments: self and key.
  and substitute the return value for value under the key 'Expires' of dictionary response.   call the function patch_cache_control, with response and max_age set to cache_timeout as arguments.
  if opts.model is None.
  append 'Z' to time_str, return the result.
  join top_dir, relative_dir and return value of the function filename.replace called with 2 arguments: base_name and name,
  if value is false, return it, if it is true convert first element of value to uppercase letter, return the value.
  if KeyError exception is caught,
  define the method is_rendered with an argument self.
  derive the class Command from the AppCommand base class.
  return nothing.
  define the method update_error_dict with arguments self and error_dict.
  call the method self._deleted_form_indexes.append with an argument i.
  return self.empty_value.
  substitute self._leftover for output.
  call the self.close method.
  if c doesnt have an attribute '__call__' and types has an 'ClassType' attribute and type of c is not equal to types.ClassType,
  call the method parser.compile_filter with an argument value, substitute the result for value under the key key of kwargs dictionary.
  return first element of the list containing elements of error.
  kwargs is an empty dictionary.
  return an empty string,
  and a list containing a string '-h',   call the method self.main_help_text, append new line to it, write it to sys.stdout.
  if values under "author_name" and "author_email" keys of the item dictionary are both true,
  call the method self.add_error with 2 arguments None and e.
  regex is an empty string.
  cal the method self.startElement with 2 arguments: name and attrs.
  from django.apps import apps into default name space.
  call the method activate with an argument self.old_language.
  substitute render_value for self.render_value.
  call the function force_bytes with an argument secret, substitute the result for secret.
  from django.conf.locale import LANG_INFO.
  function logging.getLogger, assign the result to the security_logger.   evaluate the function force_text with e as an argument, extra is an dictionary with two pair of elements,
  raise an TemplateSyntaxError exception with an argument string "%r takes two arguments",
  define the method complain with 3 arguments: self, unpacked dictionary wargs and unpacked dictionary kwargs.
  call the method termios.tcgetattr with argument fd, substitute the result for attr_list.
  if OSError or IOError exceptions were raised,
  return value.
  help is a tuple containing a string "Runs the command-line client for specified database, or the default database if none is provided.".
  append attr.name to attrs for every attr in self._moved_attributes.
  define the method get with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
  substitute bits, without the first two elements, substitute the result for remaining_bits.
  call the method threading.Semaphore with an argument integer 0, substitute the result for self.can_read.
  if self._changed_data is None,
  if self.use_argparse is true,
  loader is instance of MigrationLoader initialized with connection as an argument.
  return boolean True.
  dictionary keys converted into sets,   skip this loop iteration,
  if ipv4_unpacked is true,
  if AttributeError exception is caught,
  remove dirname from the dirnames.
  if OSError, renamed to e, is caught,
  call the function date.strftime with an argument string '%s, %%d %s %%Y %%H:%%M:%%S ' formated with dow and month,
  call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'app_label', nargs set to character'*',
  if latest_date is true, return it, if not, call the method datetime.datetime.now and return the result.
  call the method self.file.write with argument raw_data.
  if ns_pattern is true,
  settings.SITE_ID.
  substitute tuple containing 2 elements: sum of p_pattern and prefix, and sub_pattern for value under the namespace key of the namespace dictionary.
  if value is false,
  replace '%s' in string "Cache table '%s' created." with tablename, write it to self.stdout.
  property decorator,
  return a string 'Raw content'.
  register is an instance of Library class.
  call the function dict with an argument tuple with 2 elements: o.pk and o, for every o in result of the method self.get_queryset,
  call the function date with 2 arguments: result of the call to the function datetime.now with an argument tz set to tzinfo,
  substitute obj.tzinfo for self.timezone.
  call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
  if AttributeError exception is caught,
  define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.
  append new line to line, write it to self.stdout stream.
  remove config dictionary element under 'name' key, if it exists substitute it for name, if not, name is an empty string.
  call the method kwarg_re.match with an argument first element of bits, substitute the result for match.
  if not,
  define initialization method __init__ with self instance of the class as an argument.
  return a string '%02d' formated with the result of the function self.G.
  if character '=' is contained in x,
  matches is boolean True,
  try,
  substitute complain for insert.
  call the function deactivate_all.
  for every alternative in self.alternatives,
  substitute model._meta for opts.
  from django.utils.encoding import force_text and python_2_unicode_compatible into default name space.
  from importlib import find_loader as importlib_find.
  return value.
  and return value of the function copy.deepcopy called with 2 arguments: value and memo.   return result.
  return data.
  return self.
  _func_code is a string "__code__".
  yaml import CSafeDumper as SafeDumper into default name space.
  import module time.
  substitute source for e.django_template_source.
  import module os.
  if _supported is None,
  decorator function register.filter with 2 arguments expects_localtime set to boolean True and is_safe set to boolean False.
  raise a CommandError exception with an argument:
  call the method self.var.resolve with an argument context, substitute it for obj.
  return version
  prefix set to None, current_app set to None.   if urlconf is None,
  python_2_unicode_compatible decorator,
  if ch is true,
  define the method __init__ with arguments self, flo and chunk_size set to integer 64 multiplied by integer 1024.
  if the UnicodeEncodeError exception is caught,
  with self.mutex perform,
  from django.utils.encoding import smart_text into default name space.
  return initial.
  unpacked list field_value as an argument, substitute the result for value.   substitute value for value under the field.attname key of the data dictionary.
  define the method render with 4 arguments: self, attrs set to None, date_format set to None and time_format set to None.
  if loader is an instance of tuple or list,
  every occurrence of '<' with '&lt;', every occurrence of '>' with '&gt;', every occurrence of '"' with '&quot;',   and every occurrence of "'" with '&#39;', call the function mark_safe with the previous result as an argument, return the result.   call the function allow_lazy with 2 arguments: escape, six.text_type, substitute the result for escape.
  close the process with an argument 1.
  use the result as an argument for the call to the function force_text, return the result.   call the function allow_lazy with 2 arguments: urlunquote_plus and six.text_type, substitute the result for urlunquote_plus.
  use the result as an argument for the call to the function binascii.unhexlify, return the result.   if hashlib had an instance "pbkdf2_hmac",
  if name is true, substitute it for function_name, if not get '_decorated_function' attribute from func object, if it exists,
  import stat.
  string 'Ensure this value has at least %(limit_value)d characters (it has %(show_value)d).' and string 'limit_value', substitute the result for message.   code is a string 'min_length'
  self.stream is None.
  call the function quote with 2 arguments: url and safe as bytes string '!*\'();:@&=+$,/?#[]~', substitute the result for url.
  call the function allow_lazy with 2 arguments: javascript_quote and six.text_type, substitute the result for javascript_quote.
  call the method self.set_cdata_mode with tag as the argument.
  if not,
  call the method self.make_bytes with an argument content, append it to self._container.
  if not,
  if elt is an instance of Choice or NonCapture classes,
  substitute value under the cache_key key of the _format_cache dictionary for cached.
  define the method __exit__ with arguments: self, exc_type, exc_value and traceback.
  from datetime import date as real_date and datetime as real_datetime into default name space.
  if translators_comment_start is not None and lineno is greater than or equal to translators_comment_start,
  append string " Got this from the '%s' variable." to error_msg, where '%s is replaced with self.parent_name.token.
  define the method render with an argument self.
  from importlib import import_module into default name space.
  if settings.configured is false,
  call the method self.build_attrs with 2 arguments: attrs and name set to name, substitute the result for final_attrs.
  define the method_mark_post_parse_error with an argument self.
  call the file.__enter__ method on self.
  if self.no_obsolete is true,
  break the loop execution.
  if LookupError exception is caught,
  if NameError exception is caught,
  raise an TemplateSyntaxError exception with an argument string "'%s' received too many positional arguments",
  import module io.
  prepend string '_' to i converted to an string, append the result to the value under the 'id' key of the attrs_plus.
  if value is not contained in result,
  substitute args for self.args.
  usage is a list containing 4 entries: an empty string, string "Type '%s help <subcommand>' for help on a specific subcommand.",
  if value under the 'setting' key of the kwargs dictionary is equal to string 'LANGUAGES' or strnig 'LANGUAGE_CODE',
  from io import BytesIO into default name space.
  call the method self.write_migration_files with an argument changes.
  escaper is an identity lambda function.
  call the method __init__ from the base class of the class DebugLexer, with 2 arguments: template_string and origin.
  can_order as can_order, can_delete as can_delete, validate_min as validate_min, validate_max as validate_max,   substitute the result for form.   substitute model for FormSet.model.
  define the method __new__ with 4 arguments: cls, name, bases and attrs.
  call the function all_locale_paths, for every path is the result,
  property decorator,
  define the method emit_post_migrate with arguments verbosity, interactive and database.
  join root and f in path, substitute the result for f.
  if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
  dest set to string 'interactive', default set to boolean True and help as 'Tells Django to NOT prompt the user for input of any kind.'   call the method parser.add_argument with 5 arguments: string '--no-initial-data', action set to string 'store_false',
  substitute the tuple containing 2 elements p_pattern and pattern for value under the pattern.namespace key of the namespaces dictionary.
  from __future__ import unicode_literals into default name space.
  call the method self.registered_checks.append with argument check.
  if self.close_called is False,
  import threading.
  finally perform,
  define the method _set_queryset with 2 arguments: self and queryset.
  increment weight by integer 2.
  if status is not None.
  do nothing.
  substitute self._pk_field.name for name.
  output is an empty list.
  import module os.
  return filter_func.
  where '%s' is replaced with tag and TemplateTagNode.mapping converted into a list.   return an instance of a TemplateTagNode class, created with an argument tag.
  substitute '%s' in a string "\nCreated new merge migration %s" with writer path, write it to self.stdout.
  raise an TemplateSyntaxError exception with an argument string "next-to-last argument to 'regroup' tag must be 'as'".
  kwargs is an empty dictionary.
  try,
  from threading import RLock.
  return otherwise.
  for every attr in self.child_nodelists,
  return value.
  call the method self.__class__ with an argument list, with elements: tuples with 2 elements: k and hard copy of list v,
  call the function force_str with an argument value, substitute the result for value.
  and help set to a string 'Tells Django to use specified test runner class instead of the one specified by the TEST_RUNNER setting.'.   call the method parser.add_argument with 5 arguments: string '--liveserver', action set to string 'store', dest set to 'liveserver',
  from django.db import DEFAULT_DB_ALIAS into default name space.
  result is an integer 0.
  raise an TypeError exception with an argument string 'In order to allow non-dict objects to be serialized set the safe parameter to False'.
  call the function six.unichr with value under the text key of the html_entities.name2codepoint dictionary, return the result.
  call the method self.prepare_value with an argument initial_value, use it as the argument for the call to the function force_text,
  substitute record.exc_info for exc_info.
  return new_value.
  try,
  substitute value under the f.name key of the error_messages dictionary for value under the 'error_messages' key of kwargs dictionary.
  if errors is true,
  define the function Deserializer with arguments object_list and unpacked dictionary options.
  try,
  evaluate the function force_bytes, with the arguments s, encoding, strings_only and errors, return the result.
  call the method handler.endElement with an argument string 'author'.
  open writer.path file in write mode, with file descriptor as fh, perform the following,
  and sorted return value of the items of the attrs dictionary, and second time with 3 arguments: an empty string, string ' {0}',   and sorted list of boolean_attrs elements, concatenate the results and return the resulting list.   python_2_unicode_compatible decorator,
  derive the class ManagementForm from the Form base class.
  call the method self.stdout.write with an argument: string "%(started_at)s\nDjango version %(version)s, using settings %(settings)r\n"
  if AttributeError exception is caught,
  define the function parse_accept_lang_header with an argument lang_string.
  update object_data dictionary with initial.
  return None.
  get 'localized_fields' attribute from the options object, if it exists substitute it for self.localized_fields,
  if not,
  call the function func with 2 arguments: unpacked list resolved_args and unpacked dictionary resolved_kwargs, return it.
  and initial as a dictionary with 4 entries: result of self.total_form_count method for TOTAL_FORM_COUNT,   result of self.initial_form_count method for INITIAL_FORM_COUNT, self.min_num for MIN_NUM_FORM_COUNT and self.max_num for MAX_NUM_FORM_COUNT.   return form.
  define the method add_item with 17 arguments: self, title, link, description, author_email set to None, author_name set to None,
  if length of app_labels is equal to integer 1,
  raise an exception.
  if self.verbosity is greater or equal to integer 2,
  return boolean False.
  get the value under the old_method_name key of the base.__dict__ dictionary, substitute it for old_method.
  try,
  from django.template import Template and Context into default name space.
  define the method end_object with arguments self and obj.
  return nothing.
  biggest_number is maximum numbers element.
  split ip_str into parts by ':', if '.' is contained in the last element of the result,
  if model._meta.proxy is false and return value of the function router.allow_migrate called with arguments using and model is true,
  substitute boundary for self._boundary.
  substitute old_attr for new_attr.
  from django.core.cache import caches into default name space.
  if settings.TEMPLATE_DEBUG is true and origin is None,
  derive the class Command from the BaseCommand class.
  define the method build_attrs with 3 arguments: self, extra_attrs set to None and unpacked dictionary kwargs.
  return split.
  for every f in files,
  if _serializers is false,
  if value is contained in self.empty_values,
  if name is true, substitute it for function_name, if not get '_decorated_function' attribute from func object, if it exists,
  as_form is boolean False.
  substitute elements of middle from the beginning to the negative length of closing, for middle.
  get the value under the name key of the self.initial dictionary, if it exists substitute it for initial,
  if ImportError exception is caught,
  call the method self.build_attrs with 3 arguments: attrs, type as self.input_type, name as name, substitute the result for final_attrs.
  call the function get_internal_wsgi_application, return the result.
  get the absolute path of the __file__, repo_dir is name of the directory two leveles above it.
  if not,
  reason_phrase is None.
  raise an TemplateSyntaxError exception with an argument string "Searching for value. Unexpected end of string in column %d: %s",
  do nothing.
  call the method kwarg_re.match with an argument first element of bits, substitute the result for match.
  and third element of the return value of the function sys.exc_info.   if inhibit_post_migrate is false,
  where '%s' is replace by regex and return value of the function six.text_type with an argument e.   substitute the compiled_regex for value under the language_code key of the self._regex_dict dictionary.
  field_desc is a string '%s = %s%s', where '%s' is replaced with: att_name, an empty string if '.' is contained in field_type,
  return None.
  and '%(error)s' is replaced with return value of the force_text function called with an argument e,   extend the top_errors with the result.   call the function six.text_type with an argument bf, append the result to hidden_fields.
  import module codecs.
  for every f in opts.local_fields that has an 'post_create_sql' attribute, append f to a list, substitute the resulting list for post_sql_fields.
  if ImportError exception is caught,
  if not,
  substitute namespaces for the value under language_code key of the self._namespace_dict dictionary.
  substitute the result for queryset.   if primary_keys is true,
  call the _expire_info.setdefault method with name and empty dictionary as arguments, substitute the result for self_expire_info.
  try,
  define the method __bytes_cast with an argument self.
  substitute package.__name__ for package_name.
  substitute value for self.value.
  define the function has_bom with fn as argument.
  define the method clear with an argument self.
  if key is not contained in self,
  from django.utils._os import upath into default name space.
  if not,
  try,
  call the method gettext_module.NullTranslations, substitute the result for _active.value.
  call the function force_text with an argument ttl, substitute the result for ttl.
  derive the class FileUploadHandler from the object base class.
  pid is integer 1.
  write current_chunk to file fd.
  color_names is a tuple with 8 elements: strings 'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan' and 'white'.
  get the attribute 'extend' of the cls object, if it exists substitute it for extend, if not extend is boolean True.
  return boolean False.
  get _itervalues attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,
  derive class _LazyDescr from the object base class.
  get return value of the field.get_attname function attribute of the obj object, substitute it for value.
  call the method __setitem__ from the base class of the class MultiValueDict, with 2 arguments key and list containing element value.
  explicitly is prohibited."   call the function modelform_factory with 10 arguments: model, form as form, fields as fields, exclude as exclude,
  join statements into a string, separated by white spaces, append it to statements.
  return it.   if PY3 is true,
  builtins is an dictionary with 3 initial entries: boolean True for 'True', boolean False for 'False' and None for 'None'.
  if match is true and call to the method match.group with an argument integer 1 evaluates to true, kwarg_format is boolean True,
  try,
  if not,
  substitute fields for self.fields.
  call the function smart_text with argument key_value, use the result as an argument for the call to the self.xml.characters method.
  TOKEN_COMMENT is integer 3.
  substitute index for doublecolon_start.
  return self._changed_data.
  call the self._lock.reader method, with the result perform the following,
  derive the class ExtendsNode from the Node base class.
  where '%s' is replaced with taglib and e.   return an instance of a LoadNode class.
  define the method add_arguments with 2 arguments: self and parser.
  compile regex from raw string '(?P<hour>\d{1,2}):(?P<minute>\d{1,2})(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?',
  namespaces is an empty dictionary.
  try,
  if fields is not None and f.name is not contained in fields,
  call the method self._close_files.
  substitute message.error_dict for message.
  if Exception exception is caught,
  yield value under key key of self dictionary.
  substitute object for Iterator.
  from django.utils import six into default name space.
  return an empty string,
  substitute '%s' in string '<%s: %s>' with self.__class__.__name__ and self, if exists, or string 'None' if it doesnt, return it.
  define the function slugify with an argument value.
  indexes is an empty dictionary.
  from django.utils.six.moves import _thread as thread into default name space.
  call the method self.add_handlers with 2 arguments: logger and handlers.
  tpl is an string "DTDForbidden(name='{}', system_id={!r}, public_id={!r})".
  if package is false,
  from django.core.management import call_command into default name space.
  append app_dir to dirs list.
  substitute self.pointer for i.
  'alternate' for 'rel' and value under the 'link' key of self.feed dictionary for 'href'.   if value under the 'feed_url' key of the self.feed dictionary is not None,
  return the printable representation of the self object converted to a dictionary.
  if arg is None
  factor is integer 0.
  if not,
  use the result as an argument for the call to the method final_output.extend.   add model to known_models set.
  define the method det_valid_name with arguments self and name.
  define the function flatten_result with an argument source.
  import readline.
  if encoding equals to string 'utf-8'.
  prefix the base64d with a '.' character.
  call the method self.clear_checkbox_name with an argument name, substitute the result for checkbox_name.
  raise an ValueError exception with an argument string "Unsupported version: %s" formated with value under 'version' key of config dictionary.
  yield one element of line iterable.
  call the method self.get_connection with argument fail_silently, on the result call the method send_messages with one argument: list containing self, return the result.
  self._stream is a class instance of a LimitedStream class, initialized with self.environ dictionary value under the 'wsgi.input' key,
  raise an TypeError exception with an argument string "Variable must be a string or number, got %s", replace '%s' with type of var.
  raise an TemplateSyntaxError exception with an argument string "Second (optional) argument to %s tag must be 'parsed'",
  strip value of the first and last element.
  for every condition and nodelist in self.conditions_nodelists,
  call the method self.resolve with an argument value, return the result.
  define the function pprint with an argument value.
  take two characters from the i-th element of rawdata, if they are not equal to the string '</',
  output_transaction is boolean True.
  get maximal element from roots and substitute it for root.
  message, settings.SERVER_EMAIL, list of second elements of a for every a in settings.Managers and connection set to connection,   as arguments, assign the result to mail.   if html_message is true,
  substitute current_app for self._current_app.
  if endpos is lesser than zero,
  call the method tf.format with an argument format_string, return the result.
  save_as_new set to boolean False, prefix set to None, queryset set to None and unpacked dictionary kwargs.   if instance is None,
  call the function sys.getfilesystemencoding, if it evaluates to true, substitute the result for fs_encoding,
  define the method to_python with arguments self and data.
  define the function load_command_class with arguments: app_name and name.
  define the method __init__ with 4 arguments: self, name, content and content_type defaulting to a string 'text/plain'.
  return a string '%02d' formated with self.data.minute.
  import module datetime.
  call the function self.create_var with an argument token, return the result.
  if extra_attrs is true,
  if i is greater than or equal to the result of the method self.initial_form_count,
  do nothing.
  if Exception exception is caught.
  convert string header to uppercase and replace all occurrences of '-' with '_', substitute it for header.
  define the method render with 4 arguments: self, name, value and attrs set to None.
  allow_multiple_selected is boolean True.
  call the method self.template_cache.clear.
  define the method _get_scheme with an argument self.
  call the method re.search with 2 arguments: raw string '^[_a-zA-Z]' and name, if it evaluates to false,
  define the method get_host with an argument self.
  call the DefaultStorage method, substitute the result for default_storage.
  if first element of sys.version_info equals integer 3, PY3 is boolean True, otherwise it is boolean False.
  raise an TemplateSyntaxError exception with an argument error_msg.
  raise a ValidationError exception with arguments self.message and code set to self.code.
  define the method get_unique_error_message with 2 arguments: self and unique_check.
  return a string '%s...' formated with elements of x up to the index equal to the maximum value between integer 0 and 3 subtracted from limit.
  define private method __eq__ with self class instance and other as arguments.
  otherwise if value is an instance of datetime.time,
  call the function find_template_loader with an argument loader_name, substitute the result for loader.
  import module tarfile.
  get the value under the 'database' key of the options dictionary, use it as the key to get the value from the connections dictionary, substitute the result for connection.
  leave_locale_alone is boolean True
  for every i and line in enumerated iterable lines,
  call the method self._get_context_stack_frame with an argument context, substitute the result for state_frame.
  call the method parser.parse with an argument tuple with an element end_tag, substitute the result for nodelist_false.
  open the file named filepath in read mode, with file descriptor renamed to fp perform,
  call the six.reraise function with 3 arguments: DeserializationError, DeserializationError called with an argument e,
  call the method self._coerce with an argument data, substitute the result for data.
  do nothing.
  define the function escape_quotes with an argument m.
  return None.
  try,
  define the method combine with 3 arguments: cls, date and time.
  if use_func is true,
  define the function media_property with an argument cls.
  yield and empty string as the result.
  raise an TemplateDoesNotExist exception with an argument, elements of not_found joined into a string, separated with ', '
  from django.core.mail.utils import DNS_NAME into default name space.
  define the function b64_decode with an argument s.
  from django.db.utils import DatabaseError into default name space.
  return a string "<DeserializedObject: %s.%s(pk=%s)>", where '%s' are replaced with self.object._meta.app_label,
  return self.empty_form.media.
  for every ext in pathext,
  if only_initial is false,
  if not,
  return result.
  append '=' to opt_label.
  if not,
  substitute the settings.MEDIA_ROOT for location.
  return number.
  new_ip is an empty list,
  substitute MultipleHiddenInput for hidden_widget.
  define the method __init__ with arguments self and connection_reset defaulting to boolean False.
  "because you haven't properly specified the ENGINE setting for the database.\n see: https://docs.djangoproject.com/en/dev/ref/settings/#databases".   call the method app_config.get_models with an argument include_auto_created set to boolean True, substitute it for app_models.
  define the function get_callable with arguments lookup_view and can_fail set to boolean False.
  call the method self.__dict__.copy, substitute the result for state.
  substitute the fitst element of the result for prefix_norm and prefix_args, respectively.   for every possibility, pattern and defaults in possibilities,
  for every c in reversed order of self.__class__.__mro__,
  for every model in app_models,
  decorator decorator.
  define the method load_template_source with 3 arguments: self, template_name, template_dirs set to None.
  msg is a tuple containing one initial entry: a string "WSGI application '%(app_path)s' could not be loaded; Error importing module: '%(exception)s'", where '%(app_path)s' is replaced by app_path and '%(exception)s' is replaced by e.
  substitute RAW for TYPE.
  for every k and v in items of dictionary kwargs, respectively,
  define the method page with self class instance and number as arguments.
  call the serializer function, call the dumps method on the result with an argument obj, substitute result for data.
  increment current_len by integer 1,
  if KeyError exception is caught,
  define the method __init__ with 5 arguments: self, name, value, attrs and choices.
  from datetime import datetime into default name space.
  call the __init__ method from the base class of the WSGIRequestHandler class, with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  define the method __init__ with 2 arguments: self and text.
  if not,
  substitute '%s' with title in the string " [X] %s", write it to the standard output.
  call the method resource.decode with an argument settings.FILE_CHARSET, substitute the result for resource.
  define the method dict with an argument self.
  substitute fail_silently for self.fail_silently.
  try,
  from django.utils.safestring import mark_safe into default name space.
  define the function b64_encode with an argument s.
  decorator function register.filter with an argument is_safe set to boolean False.
  and unpacked dictionary kwargs.   call the function iri_to_uri with an argument redirect_to, substitute the result for the value under the 'Location' key of the self dictionary.
  for every replacement in the resulting set,   replace every occurrence of replacement in value for an empty string, substitute the result for value.
  define the method id_for_label with arguments self and id.
  raise an ValueError with an argument string 'empty_label list/tuple must have 3 elements.'.
  call the method transaction.atomic with an argument using set to self.using, with the result,
  call the function force_text with an argument formatstr, use the result as an argument for the call to the method,
  substitute the result for sequence_sql.   if sequence_sql is true,
  call the method handler.endElement with 2 arguments: string 'author' and an empty dictionary.
  once split at the '.' value under the 'ENGINE' key of the connection.settings_dict dictionary, substitute last element of the result for backend_name.
  all the method field.rel.to._meta.get_field with field.rel.field_name as argument, call the to_python method on the result with,
  substitute params for self.params.
  num_sent is an integer 0.
  call the method imatch.group with an argument integer 1, if it evaluates to true,
  substitute '%r' with name and compile_function.   define the method tag_function with 2 argument: self and func.
  convert settings.LOCALE_PATHS into a list and extend list self.locale_paths with it.
  call the method self.renderer with 4 arguments: name, value, final_attrs and choices, return the result.
  call the method self._get_validation_exclusions, substitute the result for exclude.
  "to %s because it doesn't define __str__().", replace %s with string value of klass.__name__.   substitute __str__ filed of klass for __unicode__ field of klass.
  remove values under the keys 'name' and 'directory' of the options dictionary and substitute it for app_name and target, respectively.
  call the method self._archive.close.
  define the method unget with arguments self and bytes.
  define the method setdefault with 3 arguments: self, key and default set to None.
  call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the item dictionary.
  try,
  if url_name exists substitute it for view_path, if not substitute .self._func_path for view_path.
  define the private method __init__, with self instance of this class, obj and list of arbitrary length *args as arguments.
  for every uclass, unique_check in all_unique_checks,
  if ImportError exception is caught,
  join the current working directory and name into a file path, substitute it for top_dir.
  call the mw_class function, store the result in the mw_instance.
  otherwise if value is an instance of datetime.date,
  call the function allow_lazy with an argument words, substitute the result for words.
  return the result.   otherwise if value is an instance of decimal.Decimal, float or six.integer_types,
  from django.utils.dates import MONTHS, MONTHS_3, MONTHS_ALT, MONTHS_AP, WEEKDAYS and WEEKDAYS_ABBR into default name space.
  define the method __reduce_ex__ with 2 arguments self and proto.
  for every obj in value call the function mark_safe with an argument result of the function force_text called with an argument obj,
  raise an InvalidTemplateLibrary exception with an argument string "Unsupported arguments to Library.tag: (%r, %r)",
  if m is None,
  for every sql_file in sql_files,
  call the function current, substitute the result for current.
  translation._catalog is an empty dictionary.
  for every bit in bits,
  from django.utils.formats import get_format into default name space.
  decrement number by one, multiply it with self.per_page, substitute the result for bottom.
  self._done is boolean False.
  define function dictitem with s as an argument.
  define the method upload_handlers with an argument self.
  if not,
  called with an argument string 'Unknown', tuple with 2 elements: string '2' and return value of the function ugettext_lazy,   called with an argument string 'Yes' and tuple with 2 elements: string '3' and return value of the function ugettext_lazy,   called with an argument string 'No'.   call the method __init__ from the base class of the class NullBooleanSelect, with arguments attrs and choices.
  define the method non_form_errors with an argument self.
  call the function re.compile with 2 arguments: raw string '<.*?>|((?:\w[-\w]*|&.*?;)+)' and bitwise OR performed with 2 operands,
  try,
  get _iterkeys attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,
  append self.pointer to self.backout.
  for every item in sorted_items,
  return integer 0.
  DEBUG is integer 10.
  from django.utils import six into default name space.
  append j to sites.
  if s is an instance of six.text_type or Promise,
  if UnicodeEncodeError exception is caught,
  comment_notes is an empty list.
  if e.errno is not equal to errno.EEXIST,
  self.registered_checks is an empty list.
  get the value under the self.name key of the self.form.initial dictionary, if it exists, substitute it for data,
  call the method token.split_contents, substitute the result for bits.
  define the method __init__ with 2 arguments: self and unpacked list dicts.
  define _get_files method with self class instance as the argument.
  if p is greater or equal to integer 0,
  define the method __iter__ with an argument self.
  call the function timedelta with an argument seconds as negative time.altzone, return the result.
  decrement self.position by length of bytes.
  if fourth element of version does not equals to string 'alpha' or 'beta' or 'rc' or 'final', raise an exception.
  otherwise if maxsize is None,
  call the method __init__ from the base class of the TemporaryUploadedFile class with arguments: file, name, content_type, size, charset and content_type_extra.
  wsgi_opts is a dictionary with 4 initial entries: value under the key 'maxspare' of options dictionary converted to an integer,
  sum lead and opening, substitute the result for lead.
  if self.obj is None,
  if self.verbosity is greater than integer 1,
  call the method self.get_json_data with an argument escape_html,
  raise an ValidationError exception with an argument errors,
  define function patch_vary_headers, with response and newheaders as arguments.
  define the method handle_entityref with 2 arguments self and name.
  write the string "  Installing custom SQL...\n" to the standard output.
  default set to boolean False, help as a string "Just show what migrations would be made; don't actually write them.".   call the method parser.add_argument with 5 arguments: string '--merge', action as a string 'store_true', dest as a string 'merge',
  call the sys.exc_info function, assign the result to et, ev and tb, respectively.
  delete first element of bits.
  get the value under the 'id' key of the attrs dictionary, substitute the return value field of the self object for id_.
  raise an StopIteration exception.
  increment i by integer 1, substitute the result for i.
  remove the first element from context.render_context.
  if name is true,
  append '_' to string created from first p elements of languages converted to lowercase,
  define the function ungettext with 3 arguments: singular, plural and number.
  raise an AttributeError with an argument string "This QueryDict instance is immutable".
  append value to the '-', substitute it for value.
  define the method file_complete with arguments: self and file_size.
  call the function force_text with an argument value, call the method translate on the result, with an argument _js_escapes,
  call the method parser.next_token, substitute the result for token.
  strip t.contents from the left side of whitespaces, if the result starts with TRANSLATOR_COMMENT_MARK,
  return boolean True.
  only if form_class is not None, and if form_class has an attribute '_meta' and form_class._meta.fields is not None,
  call the method resultclass.mro, reverse the order of elements, for every type_ in the result.
  if not,
  derive the class EmailMessage from the object base class.
  if attribute '_client' of the self object is None,
  call the method tzinfo.__init__ with an argument self.
  subtract timestamp from the return value of the function time.time, substitute the result for age.
  call the function format_html with 2 arguments: string "<input type='hidden' name='csrfmiddlewaretoken' value='{0}' />",
  from django.utils.six.moves.urllib.parse import urlsplit and urlunsplit into default name space.
  and app_config.label is contained in app_labels, create a tuple containing app_config.label and return value of the method   router.get_migratable_models called with app_config, connection.alias and include_auto_created set to True, append the tuple to the list all_models.   define the method model_installed with model as an argument.
  otherwise if _locs_ is None,
  if old_attr is None,
  call the method self._handle_m2m_field_node with an argument field_node and field, substitute the result for value under the field.name key of m2m_data dictionary.
  substitute self.field.widget for widget.
  call the function _get_model with an argument value under the 'model' key of the d dictionary, substitute the result for Model.
  call the import_string with app_path as an argument, return the result.
  return context.render_context.
  property decorator,
  format string normal_row with an dictionary containing 5 entries: an empty string for 'errors', empty string for 'label',
  call the function get_commands, convert the result to a list, append string 'help' to it, substitute it for subcommands.
  define the method __init__ with 3 arguments: self, template_string and origin.
  write a new line to the self.stream file stream.
  if ',' is contained in second element of args,
  convert object self to a dictionary, return it.
  define the function urlunquote with an argument quoted_url.
  call the function six.text_type with s as an argument, substitute the result for s.
  define the method strptime with arguments self, value and format.
  define the method __dir__ with an argument self.
  self.filters is an empty dictionary.
  try,
  import module base64.
  call the function quote with the result and with the safe set to bytes string "/~!*()'", return the function result.   define the function get_system_encoding without the input arguments.
  register.tag decorator,
  format string '<a href="%s"%s>%s</a>' with lead, middle and trail, use it as an argument for the call to the function mark_safe,
  import module django.
  try,
  call the function func with an argument unpacked list args, substitute the result for result.
  if AttributeError exception is caught.
  if extracted is true,
  define the method handle_fk_field with argument self, obj and field.
  expires is None.
  write string "  No optimizations possible." to self.stdout stream.
  for f in sorted list of the files in the self.path directory,
  html4_singlets is a tuple with 9 elements: strings 'br', 'col', 'link', 'base', 'img', 'param', 'area', 'hr' and 'input'.
  TRANSLATOR_COMMENT_MARK is a string 'Translators'.
  convert the result into a string and substitute it for value.   if not,
  return input_val.
  derive the class AdminEmailHandler from logging.Handler base class.
  return the value under the language_code key of the self._namespace_dict dictionary.
  help is a string, containing "Returns a list of the SQL statements required to return all tables in the database to the state they were in just after they were installed.".
  define the method __setstate__ with 2 arguments: self and obj_dict.
  define the function Deserializer with 2 arguments: stream_or_string and unpacked dictionary options.
  append '/' to tmp, substitute it for display_url.
  substitute chr for int2byte.
  call to the resolver.resolve method with request.path_info as an argument.
  otherwise if dirname equals string 'locale',
  define the method __init__ with 2 arguments self and var.
  inner_text is an empty list.
  remove entry at the key key of the attrs dictionary.
  break from the loop execution.
  append self.msgmerge_options to a list containing string 'msgmerge', append to it a list containing pofile and potfile, substitute the result for args.
  call the method __deepcopy__ with an argument memo, from the base class of the class MultiValueField, substitute the result for result.
  substitute the result for value under 'address' key of config dictionary.   substitute klass for factory.
  define the function check_model_signals with app_config defaulting to None and unpacked dictionary kwargs as arguments,
  call the function email_message.message, substitute the result for message.
  request_finished is a instance of a Signal class.
  define the function is_library_missing with an argument name.
  substitute object_list for self.object_list.
  call the self.xml.addQuickElement method with 2 arguments: string 'object' and attr dictionary containing 1 entry:
  import module copy.
  substitute boolean False for cache_choices.
  raise an exception,
  call the function os.umask with an argument umask.
  if self.fail_silently is boolean False,
  substitute '%s' in a string "Migrations for '%s':" with app_label, append newline to it,
  call the method value.astimezone with an argument timezone, substitute the result for value.
  if value is None,
  self.settings_exception is None.
  define the method __init__ with 8 arguments: self, data set to None, files set to None, instance set to None,
  for every app_config in result of the method apps.get_app_configs, append the resulting list to templatetags_modules_candidates.   for every templatetag_module in templatetags_modules_candidates,
  define the function indexbytes with 2 arguments buf and i.
  and unpacked dictionary kwargs, return the result.   define the function assertRaisesRegex with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  from django.utils import six into default name space.
  if decimal_pos is not None
  call the method form.add_initial_prefix with an argument self.auto_id, substitute the result for self.html_initial_id.
  from django.apps import apps into default name space.
  return self._errors.
  if is_relation is true,
  call the method operator.attrgetter with an argument _func_defaults, substitute the result for get_method_defaults.
  if lang_code is contained in _supported and lang_code is not None and result of the function check_for_language,
  _empty_value is an empty string.
  return result.
  parsed is boolean True.
  call the function settings.is_overridden with argument string 'MANAGERS', if it evaluates to boolean True,
  if opts.fields is None and opts.exclude is None,
  self.lineno is None.
  third element of the result of the function sys.exc_info.   self._stream is an instance of BytesIO class created with an argument self._body.
  if not,
  if list_ is not an instance of tuple or list types and length of list_ is not equal to integer 2,
  call the addr.encode method with string 'ascii' as an argument.
  if ValueError exception is caught,
  import gettext module.
  join elements of c into a string, return it.
  import module sys.
  substitute complain for sort.
  call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for default_translation.
  define the method __getitem__ with 2 arguments: self and key.
  if field.serialize is true,
  define the function get_language_bidi.
  yield one element of data iterable.
  if model is contained in excluded_models,
  __all__ is a tuple containing strings: 'UploadedFile', 'TemporaryUploadedFile', 'InMemoryUploadedFile' and 'SimpleUploadedFile'.
  define the method add_arguments with arguments self and parser.
  return chunk.
  derive the class Widget from the base class in the return value of the six.with_metaclass called with an argument MediaDefiningClass.
  define the function get_cache_key, with request key_prefix set to None, method set to 'GET' and cache set to None as arguments.
  raise an CommandError exception with an argument string "errors happened while running msguniq\n%s", where '%s' is replaced with errors.
  define the method __init__ with an argument self.
  call the function t.render with an argument context_instance, return the result.
  with the result,   call the method connection.cursor, with the result as cursor,
  return boolean False.
  return data.
  from django.core.servers.basehttp import run and get_internal_wsgi_application into default name space.
   from IPython.frontend.terminal.ipapp import TerminalIPythonApp into default namespace.
  if las equals integer 1,
  call the method self.limit_choices_to, return the result,
  remover the entry under the 'type' key of the attrs dictionary, substitute it for self.input_type, if the key doesnt exists,
  call the method self.nodelist_false.render with an arguments context, return the result.
  invalid_apps is an empty list.
  define the method id_for_label with an argument self.
  self._deleted_form_indexes is an empty list.
  perform bitwise exclusive OR on 2 operands integer representation of x and integer representation of y,
  call the method self.event_stream.expandNode with an argument node.
  widget.input_type is a string 'hidden'.
  if current_len equals truncate_len,
  extend list inner_result with res.
  if value has an 'close' attribute,
  deps is an empty list.
  create lambda identity function which returns x for input parameter x, return the function.
  raise an ImportError exception.
  define the method __init__ with an argument self.
  substitute takes_context for self.takes_context.
  wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " OK" as a argument.
  result of the function iri_to_uri called with an argument link for 'link',   result of the function to_unicode called with an argument description for 'description',   result of the function to_unicode called with an argument language for 'language',   result of the function to_unicode called with an author_email description for 'author_email',   result of the function to_unicode called with an argument author_name for 'author_name',   result of the function iri_to_uri called with an argument author_link for 'author_link',   result of the function to_unicode called with an argument subtitle for 'subtitle',   if true, categories is value for 'categories' key, if not, empty tuple is value for 'categories' key,   result of the function iri_to_uri called with an argument feed_url for 'feed_url',   result of the function to_unicode called with an argument feed_copyright for 'feed_copyright',   if true, feed_guid is value for 'id' key, if not, lik is value for 'id' key and ttl for 'ttl'.   update self.feed dictionary with kwargs.
  append child.data to the inner_text list.
  output is an empty list.
  terminal_char is an string ')'.
  if lang is None,
  call the method self.represent_scalar with 2 arguments: string 'tag:yaml.org,2002:str' and data converted into a string, return the result.
  get the value under the 'keep_pot' key of the options dictionary, substitute it for self.keep_pot.
  raise an CommandError with an argument string "Problem installing fixture '%s': %s is not a known serialization format.",
  if initial is None,
  try,
  call the method apps.get_model with an argument model_identifier, return the result.
  derive the class HttpResponseBase from the six.Iterator base class.
  derive the class EntitiesForbidden from the DefusedXmlException base class.
  define the method __eq__ with self and other arguments:
  call the datastructures.MergeDict with self.POST and self.GET as arguments, assign the result to self._request.
  if sep is an instance of unicode,
  call the translation.get_language_bidi function, substitute the result for the value under the 'LANGUAGE_BIDI' key of the context_extras dictionary.
  get the first space decremented with integer 1 elements from string line, append newline character to it, and yield the result.
  call the function _ with an argument string 'p.m.', return the result.
  return path.
  if cache_timeout is None,
  po_path is a string containing joined directory path from dirpath and f.
  nodelist.contains_nontext is boolean True.
  substitute i-th element of self.forms for form.
  if obj_pk is not None,
  tuple with 2 arguments: gzip.GzipFile and string 'rb' for 'gz', tuple with 2 arguments: SingleZipReader and string 'r' for 'gzip'.   if has_bz2 is true,
  if self._is_rendered is false,
  value under the self.var_name key of the context dictionary is an list with dictionary elements with 2 entries:
  derive the class Tok from the object base class.
  call the method self.coerce with an argument choice, append the result to new_value.
  if connection exists dont modify it, if not call get_connection function with username set to auth_user, password set to auth_password, fail_silently set to fail_silently as arguments, assign it to connection.
  call the __init__ method from the base class of the class TemplateResponse, with 4 arguments: template, context, content_type, status.
  call the style.NOTICE method with an argument string "[%s]", where '%s' is replaced with app, append the result to usage.
  call the method __init__ from the base class of the Deserializer class with arguments stream_or_string and unpacked dictionary options.
  call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for key.
  define the method resolve with 3 arguments: self, context and ignore_failures set to boolean False.
  if renamed is boolean False,
  call the function warnings.warn with 3 arguments: string "cache_choices has been deprecated and will be removed in Django 1.9.",
  from django.conf import settings into default name space.
  do nothing.
  raise an TemplateSyntaxError exception with an argument "'%s' received unexpected keyword argument '%s'",
  define the method _create_attachments with arguments self and msg.
  call the method self.queryset.filter with an argument, unpacked dictionary with an entry: pk for key.
  self.content_type_extra is None.
  call the cursor.close method.
  position the file pointer at the beginning of self file.
  if use_natural_keys is true,
  call the method context.new with an argument values, use it as an argument for the call to the method template.render, return the result.
  substitute _itervalues for itervalues.
  otherwise if formfield_callback is not callable object,
  substitute attr for the obtained value.   delete attr.
  raise an exception.
  define the function mark_safe with an argument s.
  var_obj is an instance of Variable class, created with an argument var.
  try,
  return obj_pk.
  define the function get_language_from_path with an argument path.
  if check_path is true,
  define the function make_middleware_decorator with an argument middleware_class.
  substitute self.data for value under the 'data' key of the defaults dictionary.
  out is an instance of StringIO class, created with an empty string as an argument.
  for every regex in tuple with 3 elements: RFC1123_DATE, RFC850_DATE and ASCTIME_DATE,
  import module os.
  derive the class InvalidPage from the Exception base class.
  substitute conn_type for self.connector.
  get the value under the 'id' key of the self.attrs dictionary, substitute it for id_ if the key exists, if not id_ is None.
  for every path in data,
  define the method __init__ with 7 arguments: self, data set to None, files set to None, auto_id set to an string 'id_%s',
  define the function save_instance with 7 arguments: form, instance, fields set to None, fail_message as string 'saved',
  if the boolean return vale of the call to the function is_protected_type(s) and string_onlys are boolean True,
  try,
  if exception PermissionDenied is caught,
  open writer.path file in write mode, with the file descriptor as fh, perform,
  if commit is true,
  call the method token.split_contents, substitute the result for args.
  if value is boolean True,
  if not,
  decorator stringfilter,
  define the method __init__ with arguments self, content and name defaulting to None.
  if not,
  if UnicodeEncodeError exception is caught,
  truncate last 9 elements of filename and append it string ".py".
  import module sys.
  call the function locks.lock with fd and locks.LOCK_EX as arguments.
  do nothing.
  import module sys.
  from django.utils import six into default name space.
  define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  return self.
  call the method self.widget_attrs with an argument widget, substitute the result for extra_attrs.
  call the method self.get_parent with an argument context, substitute the result for compiled_parent.
  return boolean False.
  substitute it for value of dictionary response under the key 'Vary'.   define function has_vary_header, with response and header_query as arguments.
  if app_label is not contained in executor.loader.migrated_apps,
  call the LockFileEx function with 5 arguments: hfile, integer 0, integer 0, hexadecimal value FFFF0000, return value of the byref function called with argument overlapped, substitute the result for ret.
  return result.
  from django.utils.encoding import force_text into default name space.
  default is a an empty list and help is a string '(use multiple --exclude to exclude multiple apps/models).'.   call the method parser.add_argument with 6 arguments: string '-n', string '--natural', action is string 'store_true', dest is string 'use_natural_keys',
  if self.activated is boolean False,
  if ending is true and msg doesnt end with ending,
  return value.
  all_unique_checks is union of all_unique_checks set and unique_checks set.
  for every c in reversed order of candidate, convert c into an integer, sum all the results and substitute the result for evens.
  delete attr.
  substitute handler for value under name key of handlers dictionary.
  if not,
  return html.
  if self._cull_frequency equals to integer 0.
  call the method self.copy, return the result.
  use fourth element of version as a key to get the value from mapping dictionary, append to it fourth element of version converted to string, substitute it for sub.
  substitute msg for body_msg.
  dest as a string 'use_default_ignore_patterns', default set to boolean True,   and help as a string "Don't ignore the common glob-style patterns 'CVS', '.*', '*~' and '*.pyc'.".   call the method parser.add_argument with 5 arguments: string '--no-wrap', action as a string 'store_true', dest as a string 'no_wrap',
  call the method self.template.resolve with an argument context, substitute the result for template.
  define the function unlock with argument f.
  if ValueError exception is caught.
  write a string "Resetting sequences\n" to self.stdout stream.
  substitute callback for self._callback_str.
  if default is true and RAISE_ERROR is false,
  clean is a lambda function with self and x as arguments, return value is length of x.
  append character '/' to the base_url.
  if initial is not None,
  substitute module.WSGIServer for WSGIServer.
  if self._errors is None,
  import module time.
  for every char in result of the self.add_truncation_text, called with 2 arguments: an empty string and truncate.
  if not,
  if value under the 'description' key of the item dictionary is not None,
  raise an TemplateSyntaxError exception with an argument string "Invalid templatetag argument: '%s'. Must be one of: %s",
  call the method Field.__init__ with 8 arguments: self, required, widget, label, initial, help_text, unpacked list args,
  choices is a tuple with 3 elements: tuple with 2 elements: string '1' and return value of the function ugettext_lazy,
  substitute second element of elt for param.
  if element of targets in first row and second column is None,
  call the function getargspec with an argument func, substitute the result for params, varargs, varkw and defaults, respectively.
  call the function unicodedata.normalize with 2 arguments: string 'NFC' and self._wrapped, substitute the result for text.
  call the method node.clone, substitute the result for klass.
  if format is not contained in _serializers,
  call the method datetime_safe.new_date with an argument date_value, substitute the result for date_value.
  substitute the result for parsed.   if parsed.scheme is true and parsed.scheme is not contained in self.allowed_schemes,
  substitute return value of the method obj._get_pk_val for obj_pk.
  import module re.
  subtract decimals from digits, substitute the result for whole_digits.
  append ext to guessed_filename.
  if num_entries is lesser than self._max_entries,
  call the method loader.get_migration with arguments node_app and node_name, extend the migration.merged_operations with the operations field of the result.
  if pickled is not None.
  if ImportError, renamed to e, exception is caught,
  call the method datetime.utcnow, on the result call the method replace with an argument tzinfo set to utc, return the result.
  for every migration in migrations_to_squash,
  divide 10 to the power of 400 by 10 to the power of 400, substitute the result for nan.
  compile a regex from raw string '^\d+$', substitute it for DIGIT_PATTERN.
  call the function is_aware with an argument value, if it evaluates to true,
  do nothing.
  return lookup_view.
  if 'class' is contained in attrs,
  'may be ambiguous or it may not exist.', substitute the result for message.   params is an dictionary containing 2 initial entries: value for 'datetime' and current_timezone for 'current_timezone'.
  define the method __iter__ with an argument self.
  and '3' for '3', substitute it for value.   if KeyError exception is caught,
  return six.text_type(s).encode(encoding, errors).
  call the method node.render with an argument context, append the result to the nodelist.
  if timezone is None,
  for every i and k in enumerated values of self._cache, if i is divisible by self._cull_frequency, append k to doomed list.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  if count2 does not equals to integer 0,
  from django.utils.timezone import template_localtime into default name space.
  call the function allow_lazy with 2 arguments: urlize, six.text_type, substitute the result for urlize.
  if OSError, renamed to err, is caught,
  call the method _trans.gettext_noop with an argument message.
  join localpart and domain in a string separated by '@' character, substitute it for addr.
  define the function patch_response_headers, with response and cache_timeout with None as default value, as arguments.
  call the function hashlib.pbkdf2_hmac with 5 arguments: field name of the result of the function digest, password, salt,
  substitute months for self.months.
  if self._varlist is true,
  define the method tzname with 2 arguments self and dt.
  substitute length of chunk for chunk_length.
  define the method __delitem__ with 2 arguments: self and header.
  concatenate package_name, string '.' and module_name, substitute it for full_module_name.
  call the function _load_serializers.
  try,
  raise an CommandError exception with an argument string 'You appear not to have the %r program installed or on your path.',
  delete entry under item key of self.dict dictionary.
  substitute WindowsError for WindowsError.
  call the method error.items, for every field and error_list in the result,
  property decorator,
  from itertools import dropwhile into default name space.
  decorator stringfilter,
  date_data is a tuple with an entry: attribute lookup from the value under the unique_for key of the form.cleaned_data dictionary.
  call the method self._read_limited, store the return value into chunk.
  call the method widget_attrs with an argument widget, from the base class of the class IntegerField, substitute it for attrs.
  try,
  define lambda function that returns self.file.read field, use it as an argument for property function, put the result in read.
  derive the class TypedMultipleChoiceField from the base class MultipleChoiceField class.
  from __future__ import unicode_literals into default name space.
  requires_system_checks is boolean False.
  in the string "<%s: level=%r, msg=%r, hint=%r, obj=%r, id=%r>", replace '%s' with the name of the type of this class instance,
  second element of l for every l in return value of the self._files.lists   call the method f.close.
  append string "Field renamed because it wasn't a valid Python identifier." to field_notes.
  from lib2to3.fixer_util import find_indentation, Name, syms and touch_import into default name space.
  return errors.
  define the method parse_file_upload with 3 arguments: self, META and post_data.
  if sys.platform equals to string "win32",
  child_nodelists is an tuple with 2 elements: strings 'nodelist_loop' and 'nodelist_empty'.
  derive the class SimpleTemplateResponse from the HttpResponse base class.
  call the os.makedirs with argument self.file_path.
  second 2 elements of seventh element of hextets converted into hexadecimal number,   first 2 elements of eight element of hextets converted into hexadecimal number,   second 2 elements of eight element of hextets converted into hexadecimal number.   join first 5 elements of hextets into a string, separated by ':', substitute the result for result.
  if words is true, substitute re_words for regex, if not substitute re_chars for regex.
  from django.conf import settings into default name space.
  substitute base for m.
  raise an exception,
  from django.utils.translation import ugettext_lazy,  ugettext as _ and pgettext into default name space.
  call the function iri_to_uri with an argument location, return the result.
  substitute encoding for self.encoding.
  otherwise if '\\' is contained in path,
  help is a string 'Prints the SQL statements for resetting sequences for the given app name(s).'.
  define the method f with an argument self.
  call the method update_watch.
  file_field_list is an empty list.
  if length of version does not equals to integer 5, raise an exception.
  call the function ugettext with an argument string "%s PB", substitute '%s' with the result of the call to the function,
  try,
  call the method _entity_re.sub with 2 arguments: _replace_entity and text, return the result.
  default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a specific database to load fixtures into. Defaults to the "default" database.'   call the method parser.add_argument with 5 arguments: string '--app', action as a string 'store', dest as a string 'app_label',
  self.backout is an empty list.
  substitute namespace for self.namespace.
  "That port is already in use." for errno.EADDRINUSE and "That IP address can't be assigned-to." for errno.EADDRNOTAVAIL.   try,
  call the function formatdate with an argument epoch_seconds, substitute the result for rfcdate.
  get _assertRegex attribute of the self object, call the result with 2 arguments: unpacked list args,
  yield key and value under key key of self dictionary.
  convert value to uppercase, return the result.
  if pytz is true, substitute pytz.utc for utc, otherwise substitute result of the function UTC for utc.
  call the function next_space_index with 2 arguments subject and i, substitute the result for i.
  LUHN_ODD_LOOKUP is a tuple with 10 elements: integers 0, 2, 4, 6, 8, 1, 3, 5, 7 and 9.
  if middleware has an attribute 'process_response',
  import module warnings.
  assign the result to the value under the string ".moves.urllib_request" appended to __name__ key of the sys.modules dictionary,   and to the value under the string ".moves.urllib.request" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_response from the _LazyModule base class.
  define the method i with an argument self.
  substitute default for value under the key key of self dictionary.
  if ImportError exception is caught,
  self.path is an empty string.
  raise an AttributeError exception with an argument string: "'%s' object has no attribute 'cleaned_data'",
  for every loader in template_source_loaders,
  define the method temporary_file_path with argument self.
  if six.PY2 is true,
  if self._upload_handlers is false,
  from __future__ import unicode_literals into default name space.
  do nothing.
  import module re.
  use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.   for every migration in merge_migrations,
  call the method self.write_items with an argument handler.
  define the method get_available_name with arguments self and name.
  from django.db.migrations import Migration into default name space.
  if self.verbosity is greater than integer 0,
  if lib is false,
  derive class TemporaryFile from the base class FileProxyMixin.
  define the method __init__ with 3 arguments: self, widgets and attrs set to None.
  call the method struct.pack with 2 arguments: bytes string '>I' and i, append the result to salt, substitute the result or u.
 call the function re.compile with an argument raw string "^\s*plural$", substitute the result for plural_re.
  if self.empty_permitted is true and call to the method self.has_changed evaluates to false,
  substitute timeout for self.timeout.
  from django.utils.encoding import python_2_unicode_compatible and force_st into default name space.
  do nothing.
  get the value under the new_method_name key of the base.__dict__ dictionary, substitute it for new_method.
  return boolean False.
  converted to an integer.   call the method self._init_translation_catalog.
  from django.conf import settings into default name space.
  from django.core import signing into default name space.
  remove element under '_data' key of obj_dict dictionary, if it exists substitute it for data, if not data is an empty list.
  if eather of settings.USE_I18N or settings.USE_L10N is True, set is_accept_language_redundant to True.
  call the method json.__version__.split with an argument '.', if the result is respectively greater than list containing strings '2', '1' and '3',
  call the method match.end, substitute the result for upto.
  from __future__ import unicode_literals into default name space.
  field_value is None.
  raise an exception.
  substitute the resulting list for none_model_fields.   missing_fields is difference between set containing none_model_fields and set containing result of the method,
  substitute result for value under the mem_args key of the cache dictionary.
  get frag attribute from found object, substitute it for found.
  raise an MultiValueDictKeyError exception with printable representation of key.
  from django.utils.formats import localize into default name space.
  try,
  if Exception exception is caught,
  call the method token.split_contents, substitute the result for bits.
  if fields is true and f.name is not contained in fields,
  with the result renamed to fp, perform the following:   write msgs to fp.
  extend final_output with alter_sql.
  if locales in not empty,
  if not,
  derive the class LocalTimezone from the ReferenceLocalTimezone base class.
  define the method start_serialization with an argument self.
  substitute base for self.base.
  if self._wrapped is empty,
  raise SuspiciousMultipartForm exception with an argument string, "The multipart parser got stuck, which shouldn't happen with"
  from django.forms.fields import Field and ChoiceField into default name space.
  strings "Please submit %d or fewer forms.", "Please submit %d or fewer forms." and self.max_num,   where '%d' is replaced with self.max_num, and code as a string 'too_many_forms'.   if self.validate_min is true, and length of self.deleted_forms subtracted from the return value of the method self.total_form_count,
  call the function walk_to_end with 2 arguments: ch and pattern_iter.
  _urllib_parse_moved_attributes is a list with 16 elemetns, all of them are the results of the call to the function MovedAttribute with different 3 string arguments.
  skip this loop iteration.
  append mw_instance.process_request at the end of request_middleware.
  tags is a list containing results of the function re.escape with an argument tag, for every tag in tags split into words.
  write 79 '-' characters into self.stream file stream.
  define the method save_existing with 4 arguments: self, form, instance and commit set to boolean True.
  replace every occurrence of string 'charset=CHARSET' for string  'charset=UTF-8' in msgs, substitute the result for msgs.
  if self.verbosity is greater or equal to integer 2,
  define the method __getitem__ with 2 arguments: self and header.
  return i.
  define the method configure_handler with 2 arguments: self and config.
  if not,
  if replaces filed of graph.nodes element at the plan_node index is true,
  if not,
  call the function smart_split with an argument self.contents, substitute the result converted to an iterable for bits.
  call the function EmailMultiAlternatives with settings.EMAIL_SUBJECT_PREFIX and subject converted to strings and concatenated,
  call the self.initial_form_count method, return the sublist of self.forms from the beginning to the previous result as the end index.
  if mimetype is None, raise an error.
  if the 'fake' key doesnt exists set fake to boolean False, as arguments.   call the method emit_post_migrate_signal with created_models, self.verbosity, self.interactive and connection.alias as arguments.
  final_output is an empty list.
  for every c in candidate without the last element and in reversed order, convert c into an integer,
  with an argument self.data.year decremented by 1, evaluates to true,   week_number is integer 53.
  get value under the 'handlers' key of the config dictioanry, if it exists substitute it for handlers, if not handlers is None.
  call the method _time.localtime with an argument stamp, substitute the result for tt.
  from django.utils.encoding import force_bytes,  force_text and iri_to_uri into default name space.
  yield self.
  substitute self.addr without the first and last element for self.addr.
  raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a url() method'.
  for every basedir in basedirs,
  from django.core.serializers.base import DeserializationError into default name space.
  get config dictionary element under 'handlers' key, if it exists substitute it for handlers, if not, handlers is EMPTY_DICT.
  create a list out of basedir elements for which function os.path.isdir returns true, apply the os.path.abspath function on every element, and put the results in a list, basedir is set of previous list elements.
  define lambda function that returns self.file.softspace field, use it as an argument for property function, put the result in softspace.
  call the method parser.parse_args with argv, without the first 2 elements, substitute the result for options.
  substitute template for self.template.
  convert the result to a lowercase string, substitute it for step.   if not,
  raise an CommandError exception with an argument message.
  define the method to_python with arguments self and value.
  for every __ in range of integers from 0 up to sep subtracted from fill_to,
  if not,
  self.blocks is a dictionary with elements: n for n.name, for every n in return value of the method nodelist.get_nodes_by_type,
  define the method __init__ with 4 arguments: self, object_list, number, and paginator.
  call the function timedelta with an argument seconds as negative time.timezone, return the result.
  decorator cached_property,
  help is a string "Prints the CREATE TABLE, custom SQL and CREATE INDEX SQL statements for the given model module name(s).".
  return an empty string.
  define the method __init__ with 6 arguments: self, dict_ set to None, autoescape set to True, current_app set to None,
  return nothing.
  return dec.
  call the method self.as_table, return the result.
  call the method Field.validate with 2 arguments: self and value, return the result.
  import module datetime.
  define the method validate with arguments self and value.
  if length of bits is lesser than integer 3 or second element of bits is not equal to string 'as',
  do nothing.
  self._changed_data is an empty list.
  convert self.object_list to a list.
  if AttributeError exception is caught,
  call the function hmac.compare_digest with 2 arguments: result of the function force_bytes called with an argument val1,
  otherwise if ch equals a string ')',
  set accessor_name of the self.object to object_list.
  help is an string 'Installs the named fixture(s) in the database.'.
  if http_cookies.CookieError exception is raised,
  define the function wordwrap with 2 arguments value and arg.
  if index is lesser than integer 0,
  if result is not None,
  raise an StopIteration.
  substitute error.error_dict for error.
  if self.verbosity is greater or equals to integer 2.
  define the method _itervalues with an argument self.
  if ValueError exception is caught,
  if app_config.models_module is None or app_config is contained in excluded_apps
  format_key is a string 'DATE_INPUT_FORMATS'.
   if i is greater or equal to the result of the method self.initial_form_count and self.initial_extra is true,
  call the method copy.copy with an argument self, return the result.
  __all__ is an list containing a string 'File'.
  if self.verbosity is greater than integer 0,
  call the function _check_boolean_field_default_value with dictionary kwargs as argument, use the result as an argument for the call to the function errors.extend.
  if m and n are not None,
  import module warnings.
  if elt is an instance of NonCapture class,
  call the method self.setlistdefault with an argument key, append value to the result.
  remove the 'use_natural_primary_keys' key from the options dictionary and substitute it for self.use_natural_foreign_keys,
  for p in self.ignore_patterns if p ends with dir_suffix take sliced list p from the start,
  define the function modelform_defines_fields with an argument form_class.
  for every refto and refs in return value of the method references.items,
  assign the result for year_val, month_val and day_val, respectively.   html is an empty dictionary.
  if InvalidTemplateLibrary, renamed to e, exception is caught,
  append t.contents to comment.
  call the function mark_safe with an argument new_obj, substitute the result for obj.
  define the next_space_index with 2 arguments: subject and i.
  try,
  if not,
  default_attrs is an dictionary with 2 initial entries: string '40' for 'cols' and string '10' for 'rows'.
  author_name set to None, author_link set to None, subtitle set to None, categories set to None, feed_url set to None,   feed_copyright set to None, feed_guid set to None, ttl set to None and unpacked dictionary kwargs.   to_unicode is an lambda function with an argument s, result is the result of the function force_text,
  call the _tc.load method with the 'foo:bar=1' converted to string as an argument.
  return dec.
  define the method __str__ with argument self.
  substitute first element of s for quote.
  call the function func with 3 arguments: obj, autoescape set to context.autoescape and unpacked list arg_vals,
  DEFAULT_LOGGING is a dictionary with 5 initial entries: 1 for 'version', False for 'disable_existing_loggers',
  decorator stringfilter,
  for every k and v in self.choices,
  call the function get_language, substitute the result for lang.
  call the method parser.next_token, substitute the result for token.
  from django.utils.six.moves import cPickle as pickle into default name space.
  pytz is None.
  shell is an instance of IPShell class, created with an argument argv as an empty list.
  raise an ValueError exception with an argument string 'Unable to add filter %r: %s' formated with f and e.
  from django.utils import six into default name space.
  call the method UnicodeDecodeError.__str__, with self as the argument, substitute the result for original.
  called with with an argument lambda function which returns result of the force_text function called with an argument text.   define the method add_truncation_text with 3 arguments: self, text and truncate set to None.
  substitute tempfile.gettempdir for gettempdir.
  if self.username and self.password are true,
  call the form.is_valid method, if it evaluates to false,
  if StopUpload, renamed to e, exception is caught,
  import module mimetypes.
  return self.__offset.
  from django.apps import apps into default name space.
  self.timezone is None.
  yield string "from __future__ import unicode_literals" as the result.
  return an empty string.
  from django.test.utils import get_runner into default name space.
  choices is an property property object of this class, with _get_choices getter and ChoiceField._set_choices setter functions.
  if ch equals string '+',
  help is a string "Runs over the entire source tree of the current directory and "
  raise an TemplateSyntaxError exception with an argument string "Malformed arguments to url tag".
  called with an argument value, return the result.   call the function allow_lazy with 2 arguments: strip_entities, six.text_type, substitute the result for strip_entities.
  with all occurrences of '%s' replaced with app_name and model._meta.object_name and e, respectively.   if self.show_traceback is true,
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  parts is an empty list.
  for i in self._deleted_form_indexes append i-th element of self.forms into a list, return the resulting list.
  define the method with self class instance and parser as arguments.
  content is an empty string.
  if not,
  return sites.
  if not,
  nodelist_false is an instance of NodeList.
  return an empty string.
  if other is not equal to list containing elements of self, return boolean True, otherwise return boolean False.
  call the function validate_ipv4_address with an argument value.
  substitute stream for self.stream.
  while i is lesser than length of subject and i-th element of subject is an empty space or tab character.
  from django.utils import six into default name space.
  if not,
  if not,
  break from the loop execution.
  perform the following:   call the method fp.read, substitute the result for src_data.
  return an instance of a ResolverMatch class, crated with arguments self.callback, args, kwargs and self.name.
  define the method _handle_object with arguments self and node.
  return length of value,
  call the method self.get_available_name with argument name, substitute it for name.
   if self.initial is true and 'initial' key is not contained in kwargs,
  strip of the whitespaces first element of transfer_encoding, substitute the result for transfer_encoding.
  concatenate name and string '_id', return it.
  where '%s' are replaced with name and param.   otherwise if param is contained in kwargs,
  substitute first element of level for common_ancestor.
  current_app as context.current_app, substitute the result for url.   if NoReverseMatch exception is caught,
  if app_names is not empty,
  e is an instance of TemplateSyntaxError class, created with an argument msg.
  define the method __init__ with 5 arguments: self, location set to None, base_url set to None, file_permissions_mode set to None,
  decorator stringfilter,
  call the function timedelta with an argument integer 0, return the result.
  substitute element at the bit index of current for current.
  from django.db import router and DEFAULT_DB_ALIAS into default name space.
  call the function getargspec with an argument func, substitute the result for params, varargs, varkw and defaults.
  from django.utils.safestring import SafeData and EscapeData into default name space.
  for every error in self.error_list,
  substitute instance._meta for opts.
  return nodelist.
  call the method from_current_timezone with an argument result, return the result.
  increment self.active_writers by integer 1,
  define the method __init__ with 4 arguments: self, data, func and prefix.
  do nothing.
  substitute context for self.context.
  raise an exception.
  define send_mail funtion with subject, message, from_email, recipient_list, fail_silently set to boolean False,
  if call to the method finder.find_module with an argument name evaluates to true,
  import module importlib.
  call the function force_str with an argument format_type, substitute the result for format_type.
  raise an exception.
  if not,
  instantiate Variable class, with an argument constant, call the resolve method with an empty dictionary as an argument, substitute the result for var_obj.
  if not,
  if ValidationError renamed to e, exception is caught,
  call the method self.render_node with 2 arguments: node and context, substitute the result for bit.
  use global variable _supported.
  _urllib_response_moved_attributes is a list with 4 elements: result of the function MovedAttribute, called with 3 arguments:
  self.__class__.__module__ and self.__class__.__name__, respectively, substitute the result for self.salt.   define the method signature with arguments self and value.
  line is an empty string.
  append key to self.keyOrder dictionary.
  return line.
  convert language to lowercase, return it.
  yield an instance of SubWidget class created with 5 arguments: self, name, value, attrs and choices.
  call the method clean with an argument value from the base class of the class TypedMultipleChoiceField, substitute the result for value.
  call the method m.end, slice list rest from previous result as starting index to the end, substitute the result for rest.
  convert value into an string, convert the result into an integer and substitute it for value.
  if not,
  if pofile path exists,
  use the result as an argument for the call to the mark_safe function, return the result.   if InvalidOperation exception is caught,
  for every tok in rules,
  can_import_settings is boolean False.
  get self.to_field attribute of self.parent_instance, substitute it for orig.
  substitute lineno for translators_comment_start.
  if not,
  for every check in checks,
  with an argument i, for 'prefix' and self.error_class for 'error_class'.   if self.is_bound is true,
  define the method __init__ with an argument self.
  return the result.   decorator function register.filter with an argument is_safe set to boolean True.
  if pk is an instance of OneToOneField or ForeignKey classes,
  derive the class IntegerField from the base class Field class.
  call the method zipfile.ZipFile with an argument self, substitute the result for self._archive.
  register.tag decorator,
  substitute pubid for self.pubid.
  substitute value.year, value.month and value.day for year_val, month_val and day_val, respectively.
  if self.is_reversed is true,
  substitute '%s' in a string "    - %s\n" with return value of the operation.describe method, write the result to self.stdout.
  weekday, increment the result by integer 1 and substitute it for jan1_weekday.   call the method self.data.weekday, increment the result by integer 1, substitute the result for weekday.
  while the result of the method new_name.find, called with an argument string '__' is greater or equals integer 0,
  write a newline into a self.stream file stream.
  code set to string 'max_decimal_places' and params set to a dictionary with an entry: self.decimal_places for 'max'.    if self.max_digits is not None and self.decimal_places is not None and whole_digits is grater than the difference of,
  call the function mark_safe with an argument message, return the result.
  for every template_dir in template_dirs,
  define the method __init__ with 2 arguments: self and key_to_list_mapping set to an empty tuple.
  define the method __init__ with 7 arguments: self, data set to None, files set to None, auto_id set to string 'id_%s',
  substitute buffer for memoryview.
  call the parent class of Command class add_arguments method and parser as the arguments.
  call the function make_origin with 4 arguments: display_name, self.load_template_source, template_name and template_dirs,
  if KeyError exception is caught,
  define the function gettext with an argument message.
  return an empty string,
  encoding is None.
  if name is not None,
  if Exception, renamed to e, exception is caught,
  get func_name attribute from the mod object, substitute it for view_func.
  call the function render_value_in_context with 2 arguments: value and context, return the result.
  if self.__language equals settings.LANGUAGE_CODE or self.__language equals a string "en-us",
  derive the class MinLengthValidator form the BaseValidator base class.
  try,
  define the function get_format with 3 arguments: format_type, lang set to None and use_l10n set to None.
  define the function new_datetime with an argument d.
  if self.max_digits is not None and digits is grater than self.max_digits,
  skip this loop iteration.
  append line to bytes string ';', use it as an argument for the call to the function _parse_header_params, substitute the result for plist.
  append i-th element of existing to child_loggers.
  define the function addslashes with an argument value.
  self.COOKIES is an empty dictionary.
  from django.utils.http import urlquote into default name space.
  derive the class EmptyPage from the InvalidPage base class.
  form the tuple from the attrname converted to lowercase and attrvalue, append it to the end of attrs.
  call the function os.chmod with arguments full_path and self.file_permissions_mode.
  replace '%s' in string "copying plural forms: %s\n" with plural_form_line, write it to self.stdout.
  if space equals integer 0,
  define the function catalog.
  evaluate the self.get_fqdn method, return the result.
  define the function int2byte with an argument i.
  define the method render with 2 arguments: self and context.
  try,
  call the method response.add_post_render_callback with _set_response_etag as argument.
  call the function time.sleep with an argument integer 1.
  get the value under the key key of the self.cookies dictionary, substitute boolean True for 'secure' key of the returned dictionary.
  if domain equals a string 'djangojs' and file_ext is contained in command.extensions,
  join return value of the function six.text_type called with an argument self.management_form and forms into a string,
  if data is true,
  compile regex from the raw string '(\d{4})-(\d\d?)-(\d\d?)$', substitute it for RE_DATE.
  join all the results into a string separated by newlines, append the result to output.   join elements of output into a string, separated by newline characters, return the result.
  define the method _cull with argument self.
  if TypeError and AttributeError exceptions are caught,
  define the method bound_data with arguments self, data and initial.
  call the method writer.as_string, write the result to fh file.
  return an empty string.
  define the method __getstate__ with an argument self.
  call the method self.emit_post_migrate with arguments verbosity, interactive and database.
  try,
  call the method popitem from the base class of the class SortedDict, substitute the result for result.
  define the method __init__ with 2 arguments: self and attrs set to None.
  from django.core.management.color import color_style and no_style into default name space.
  define the function delete_many with self, keys and version set to None as arguments.
  if StandardError, renamed to e, exception is caught,
  if not,
  define the method _get_num_pages with an argument self.
  substitute the result for self.event_stream.   remove the 'using' key from the options dictionary, substitute the return value for self.db, if the key doesnt exists substitute
  get the value under the self.using key of the connections dictionary, call the method close on it.
  raise an BadSignature exception with an argument string 'Signature "%s" does not match', where '%s' is replaced by sig.
  decorator function register.filter with an argument is_safe set to boolean True.
  define the function parts.
  substitute '%s' with first element of bits and block_name, respectively.   append block_name to parser.__loaded_blocks.
  raise a SerializerDoesNotExist exception with an argument format.
  convert first element of answer to lowercase and substitute it for answer.
  call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for key.
  increment start by length of toktext.
  call the function _helper with an argument value, use it as an argument for the call to the function mark_safe, return the result.
  call the method connection.check_constraints with an arguments table_names set to table_names.
  call the method media_property with an argument new_class, substitute the result for new_class.media.
  return value.
  import module warnings.
  call the method self.tag with 2 arguments name and func, return the result.
  and digestmod set to hashlib.sha1, return the result.   define the function constant_time_compare with 2 arguments: length set to integer 12,
  convert elements of choices into a list, substitute it for self.choices.
  self.pointer is integer 0.
  raise an exception.
  raise an ValueError exception with an argument string 'No handler found with name %r' formated with name.
  define the method ext_convert with 2 arguments: self and value.
  if value under the key 'ATOMIC_REQUESTS of db.settings_dic dictionary is True and db.alias is not present in the non_atomic_requests,
  instantiate class ChunkIter with 2 arguments: self._input_data and self._chunk_size, use it to instantiate LazyStream class,
  use the result as an argument for the call to the function datetime.fromtimestamp, return the result.   define the method modified_time with arguments self and name.
  if initial_value is not equal to data_value, return boolean True, otherwise return boolean False.
  get config dictionary element under 'loggers' key, if it exists substitute it for loggers, if not, loggers is EMPTY_DICT.
  strings "addbase", "urllib" and "urllib.response", result of the function MovedAttribute, called with 3 arguments:   strings "addclosehook", "urllib", "urllib.response", result of the function MovedAttribute, called with 3 arguments:   strings "addinfo", "urllib", "urllib.response" and result of the function MovedAttribute, called with 3 arguments:   strings "addinfourl", "urllib", "urllib.response".   for every attr in _urllib_response_moved_attributes,
  if node.must_be_first is true and nodelist is true,
  call the function smart_urlquote with an argument middle, substitute the result for url.
  raise an CommandError exception with an argument string 'You must set settings.ALLOWED_HOSTS if DEBUG is False.'.
  derive the class HttpResponseServerError from the HttpResponse base class.
  derive class _MovedItems from the _LazyModule base class.
  if self.id exists, convert self.id to a string, surround it with round brackets, substitute id for it, otherwise id is an empty string.
  define the function new_method_proxy with an argument func.
  call the os.rename function with arguments old_file_name and new_file_name.
  call the method m.group with an argument string 'sec', convert the result into a string, substitute it for sec.
  derive the class StreamingHttpResponse from the HttpResponseBase base class.
  get dictionary self items, convert the result into a dictionary, convert the result into a string and return it.
  substitute the result for final_attrs dictionary value under the 'value' key.   call the function format_html with 2 arguments: string '<input{0} />',
  substitute lookup_view for original_lookup,
  substitute smart_text for smart_str.
  import module sys.
  if bcc is true,
  if only_django,
  in the resulting string replace all occurrences of ' ' with '_' and append it to the end of cache_key.   return cache_key.
  get field.name from the obj, substitute it for related.
  finally perform,
  doublecolon_len is an integer 0.
  from django.core.management.base import BaseCommand and CommandError into default name space.
  default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid time.' for 'invalid'.
  if args in None of boolean False, substitute it for an empty list.
  derive the class URLField from the base class CharField class.
  try,
  remove item from self dictionary.
  call the method self.get_resolved_arguments with an argument context, substitute the result for resolved_args and resolved_kwargs.
  if is_templatized is true,
  bits is an empty list.
  and settings.SECRET_KEY, call on it method encode with an argument string 'utf-8',   use the result as an argument for the call to the method hashlib.sha256, call the method digest on the result,   use the result as an argument for the call to the function random.seed.   call the function random.choice with an argument allowed_chars, for every i in range of integers from 0 to lengths,
  call the os.path.getsize function with argument self.file.name, return the result.
  substitute the result for migration.ancestry.   append migration to merge_migrations.
  if not append w to the list, substitute the resulting list for self.widgets.   call the method __init__ from the base class of the class MultiWidget, with an argument attrs.
  import re module.
  if not self.pk_field is boolean False.   remove element from kwargs dictionary under the key 'to_field', substitute it for self.to_field if it exists,
  call the method text.find with 2 arguments: substr and i, substitute the result for j.
  if PY3 is true,
  from django.db import connections, router, transaction and DEFAULT_DB_ALIAS into default name space.
  and 3 additional pairs of dictionaries for string.   define the function configure_logging with 2 arguments: logging_config and logging_settings.
  from django.core.management.base import BaseCommand and CommandError into default name space.
  if level is not contained in logging._levelNames,
  register.tag decorator,
  calculate length of chunk modulo integer 4, substitute the result for over_bytes.
  convert six.PY3 to an integer, substitute it for buffering.
  call the method parser.delete_first_token.
  if cls is false,
  _trans is an instance of Trans class.
  define the method reverse_dict with an argument self.
  raise a NotImplementedError with an argument string 'subclasses of Serializer must provide a start_object() method'.
  raise an ValueError with an argument string "'%s.%s' has more than one ForeignKey to '%s.%s'.", where '%s' is replaced with,
  update self.tags dictionary with lib.tags.
  lang is None.
  substitute self.__class__.__doc__ for self.__doc__.
  name appended to string '_', as the name of the attribute to get from self object, or if the previous doesnt exist, None.   append name to 'add_' use it as the name of the attribute to get from combined object , call the result with an argument:
  substitute SafeText for SafeString.
  if _cookie_allows_colon_in_names is False,
  Template, TextNode, Token, TokenParser, Variable, VariableNode, constant_string and filter_raw_string.   from django.template.base import compile_string, resolve_variable, unescape_string_literal and generic_tag_compiler.
  call the method self.dicts.pop, return the result.
  if f.rel and f.rel.to are not contained in to_delete,
  import module time as _time.
  from django.utils.six.moves import http_cookies into default name space.
  import module time.
  return self.cleaned_data.
  multiply offset by integer -1.
  return self.
  if value.tzinfo is not None and call to the method value.tzinfo.utcoffset called with an argument value evaluates to not None,
  try,
  return an empty list.
  call the function get_format with an argument string 'DATE_INPUT_FORMATS', substitute the first element of the result for input_format.
  substitute greater element between integer 0 and end decremented by one for last.
  call the function _import_module with an argument self.mod, substitute the result for module.
  if self.field.cache_choices is true,
  replace '%s' in string '%s.management.commands.%s' with app_name and name, respectively, use it as an result for the call to the
  self.cc is an empty list.
  define the method __str__ with an argument self.
  if pot_path file path exists,
  call the function escape with an argument value, substitute it for value.
  if it is not equal to stat.S_IREAD,   raise an exception.
  otherwise if safe_input is true,
  substitute the result for qs.   pks is a set containing results of the call to the function force_text with an argument, key attribute of the o object,
  increment msg_count by one.
  return the result.   if type of s equals bytes,
  from django.utils.encoding import force_text and iri_to_uri into default name space.
  child_nodelists is a tuple with 2 initial elements: strings 'nodelist_true' and 'nodelist_false'.
  find the last index of newline occurrence in self.__starttag_text, subtract it from total length of self.__starttag_text,
  raise an CommandError exception with an argument string "Django doesn't know which syntax to use for your SQL statements,\n"
  from django.utils.six.moves.urllib.parse import quote into default name space.
  if attrs is false, make it an empty dictionary.
  call the method formats.time_format with 2 arguments: value and arg, return the result.
  otherwise if self._meta.exclude is true and field is not contained in self._meta.exclude,
  from django.utils.functional import cached_property into default name space.
  substitute '%s' with self._dir converted to a string.   define the method key_to_file with self class instance, key and version defaulting to None as arguments.
  define the method is_multipart with an argument self.
  return filename and display_url.
  python_2_unicode_compatible decorator,
  call the function format_html with 2 arguments: string ' for="{0}"' and self.id_for_label, substitute the result for label_for.
  divide num_entries by self._cull_frequency, convert the result to an integer, call the random.sample function with filelist and previous result as arguments, substitute the result for filelist.
  created with 4 arguments: qs, initial as pk_value, required as boolean False and widget as widget.   call the method add_fields from the base class of the class BaseModelFormSet, with 2 arguments: form and index.
  call the method self._existing_object with an argument pk, substitute the result for value under the 'instance' key of kwargs.
  append string "Field renamed because of name conflict." to field_notes.
  char2number is an dictionary, with 26 elements: 2 for 'a', 2 for 'b', 2 for 'c', 3 for 'd', 3 for 'e', 3 for 'f', 4 for 'g',
  return boolean False.
  define the method delete with arguments self and name.
  _get_post is a getter function and _set_post is a setter function for POST attribute of this class.
  from django.core.files.utils import FileProxyMixin into default name space.
  call the method validators.MaxLengthValidator with max_length converted into an integer, append the result to list self.validators.
  call the method self.field.widget.subwidgets with 3 arguments: self.html_name, return value of the method self.value and attrs,
  call the function re.compile with 2 arguments: raw string '<%s(/?>|(\s+[^>]*>))' formated with tags_re and re.U,
  if self.required is false,
  for every key in self,
  return an instance of EscapeBytes, created with an argument, reuslt of the call to the function bytes with an argument s.
  call the method bmatch.group with an argument integer 1, if it evaluates to true,
  if not,
  do nothing.
  for every message in messages,
  substitute complain for remove.
  subtract result of the method self.initial_form_count from i, use the result as an index to get the element from self.initial_extra,
  return value.
  instantiate class BoundaryIter with 2 arguments: self._stream and self._boundary, use it to instantiate LazyStream class, return it.
  return self._fname.
  if fift element of bits is not equal to a string 'as',
  is_usable is boolean True.
  from django.utils.http import cookie_date into default name space.
  call the method self.attrs.copy, substitute the result for obj.attrs.
  if value equals self.empty_value or value is contained in self.empty_values,
  append list containing view_path to self.namespaces list, join all the elements into a string separated by character ':',
  return an dictionary containing 1 entry: request for 'request'.
  derive class X from the object base class.
  return None.
  call the function func with request and response as arguments, assign the result to response.
  return FILE_INPUT_CONTRADICTION.
  call the function new_method_proxy with an argument operator.delitem, substitute the result for __delitem__.
  define the method __str__ with argument self.
  increment self.waiting_readers by 1.
  for every node in self.nodelist,
  define the method _save with arguments self, name and content.
  if _active has an attribute "value",
  derive class BaseCOnverter from object base class.
  if six.PY3 is true,
  if other is an instance of self.__class__ and, self.limit_value equals to other.limit_value, and self.message equals to other.message,
  append rel_to to string 'ForeignKey(, substitute the result for field_type.
  call the method self.render_option with 3 arguments: selected_choices, option_value and option_label, append the result to output.
  try,
  from __future__ import unicode_literals into default name space.
  from __future__ import unicode_literals into default name space.
  return an empty string.
  call method request.build_absolute_uri, use the result as an argument for function call of iri_to_uri,
  raise an TemplateSyntaxError exception with an argument string "widthratio takes at least three arguments".
  if first element of cwords equals a string 'runfcgi',
  for every field in model._meta.many_to_many,
  call the function bf.label_tag with an argument label, if the result is true substitute it for label, otherwise label is an empty string.
  if parent is false,
  from inspect import getargspec and getcallargs into default name space.
  call the function get_urlconf with an argument urlconf.
  decorator function register.filter with 2 arguments string "timeuntil" and is_safe set to boolean False.
  decorator stringfilter,
  if self.invoked_for_django is false,
  from django.utils import six into default name space.
  append command.xgettext_options to list containing 15 elements: string 'xgettext', string '-d', domain, string '--language=Python',
  library set to pylibmc and value_not_found_exception set to pylibmc.NotFound.   decorator cached_property,
  if text is an empty string and length of opts equals integer 1 and first element of opts equals string 'reset',
  define the function dictsort with 2 arguments value and arg.
  or settings.FILE_UPLOAD_PERMISSIONS if it is.   self.directory_permissions_mode is a tuple containing: directory_permissions_mode if directory_permissions_mode is not None,
  return instance of _HashedSeq class, created with an argument key.
  substitute fist and second element of exc_info for exctype and value, respectively.
  attachment is an instance of a class SafeMIMEText, created with arguments: content, subtype and encoding.
  call the method six.text_type with 3 arguments: s, encoding and string 'replace'.
  if OSError exception is caught,
  define the function gen_filenames with an argument only_new defaulting to boolean False.
  join tmpdir and sting 'symlink' into a file path name, substitute it for symlink_path.
  return string "<Block Node: %s. Contents: %r>", where '%s' is replaced with self.name and '%r' with self.nodelist.
  substitute so and se for sys.stdout and sys.stderr.
  if number is an instance of int type.
  if timeout equals to DEFAULT_TIMEOUT,
  call the function warnings.warn with 3 arguments:
  new_second_item is an empty list.
  get 'exclude' attribute from the options object, if it exists substitute it for self.exclude, if not self.exclude is None.
  call the method self.parent_name.resolve with an argument context.
  call the method self.error_class with an argument e.error_list, substitute the result for self._non_form_errors.
  self._request_middleware is None.
  evaluates to true,   call the function select_template with an argument file_name, substitute the result for t.
  return result of the f.fileno method if f has an 'fileno' attribute, otherwise return f.
  strip whitespaces from both sides of the value, return the result.
  if self.verbosity is greater than integer 1,
  kwargs is an empty dictionary,
  call the method simple_url_re.match with an argument middle, if it evaluates to true,
  if IndexError exception is caught,
  if key is contained in dict_,
  define the method copy with an argument self.
  if AttributeError exception is caught,
  if sys.version_info is greater than or equal to a tuple with 3 elements: integers 2, 7 and 2, respectively,
  if not,
  if self has an 'requires_system_checks' attribute, has_new_option is boolean True, otherwise it is boolean False.
  call the function __proxy__ with 2 arguments: args and kw, return the result.
  if both cursor and close_connection are true,
  for every item in self.items,
  call the method obj.natural_key, substitute the result for natural_key.
  call the self.seek method with argument integer 0.
  define the method _format_value with 2 arguments: self and value.
  substitute new_method_name for new_method_name.
  call the self._create_message method with argument msg, substitute it for msg.
  define the function get_bytes_from_wsgi with environ, key and default as arguments.
  substitute self.registered_checks for checks.
  call the function new_method_proxy with an argument len, substitute the result for __len__.
  unpacked list args and unpacked dictionary kw, return the result.   raise an TypeError exception with an argument sting "Lazy object returned unexpected type.".
  skip this loop iteration.
  help is a string "Prints the DROP TABLE SQL statements for the given app name(s).".
  call the method self.tag_function with an argument name, return the result.
  define the method __init__ with 3 arguments: self, filter_expr and nodelist).
  if labels is true and f.name is contained in labels,
  append filepath to tried.
  substitute args for self.args.
  format_key is a string 'TIME_INPUT_FORMATS'.
  if data is not None,
  call the method apps.get_app_config with an argument exclude, substitute the result for app_config.
  value is an empty list.
  separated by result of the function _ called with an argument string ', ', for every i in list_ without last element,   result of the function force_text called with an argument last_word, result of the function force_text called with an argument:   last element of list_.   call the function allow_lazy with 2 arguments: get_text_list and six.text_type, substitute the result for get_text_list.
  if not,
  from django.db.migrations.loader import AmbiguityError into default name space.
  define the method total_form_count with an argument self.
  define the method __new__ with 4 arguments: mcs, name, bases and attrs.
  if self.app_label is true and app_config.label is not equal to self.app_label,
  raise CommandError with an argument string 'Unknown app in excludes: %s', where '%s' is replaced with exclude.
  if cached is not None,
  raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a size() method'.
  call the function yaml.dump with 4 arguments: self.objects, self.stream, Dumper=DjangoSafeDumper and unpacked dictionary self.options.
  define method _get_width with self class instance as the argument.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  if base.DeserializationError exception is caught,
  if KeyError exception is caught,
  call the method __init__ with an argument UNKNOWN_SOURCE, from the base class of the class StringOrigin.
  return duplicate
  skip this loop iteration,
  get format_type attribute of module object, substitute the result for val.
  return self._count.
  convert the value under the 'daemonize' key of options dictionary to lowercase, if it equals to string 'false', 'no' or 'f',
  if TemplateLoader has an attribute 'load_template_source',
  if issues is true,
  substitute link for link_prev, link_next, key and result, respectively.
  update fields dictionary with new_class.declared_fields.
  return boolean True.
  from django.core.management.templates import TemplateCommand into default name space.
  args is an empty list.
  if termios is true,
  try,
  convert value into an integer.
  call the self.style.HTTP_INFO with an argument msg, substitute it for msg.
  input_type is a string 'url'.
  substitute SelectMultiple for widget.
  define private method __call__ with self class instance, environ and start_response as the arguments.
  if values is None,
  define the method has_leading_dir with 2 arguments self and paths.
  call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries:
  otherwise, get the 'alters_data' attribute of current object, if it exists and is true,
  substitute length of s for end.
  call the method cls.__dict__.copy substitute the result for orig_vars.
  __caches is an empty dictionary.
  substitute DateInput for widget.
  define the method _iteritems with an argument self.
  from django.conf import settings into default name space.
  if token.token_type equals integer 0,
  convert self.dict into boolean, return the result.
  "test management command has changed in Django 1.8. Please create an add_arguments class method to achieve this."   if test_runner_class has an attribute 'add_arguments',
  call the function validate_ipv6_address with an argument value.
  full_statement is a list containing: string "CREATE TABLE %s (", where %s is replaced by result of the function qn called with an argument tablename.
  append a tuple containing 2 elements: model and deps to model_dependencies.
  for every character in name,
  substitute result for value under key key of self dictionary.
  break from the smallest enclosing loop execution.
  for every medium in extend,
  return integer 0.
  call the result.rsplit method with arguments self.sep and integer 1, substitute the result for value and timestamp, respectively.
  if data is an instance of MultiValueDict or MergeDict,
  if value is false or value is not an instance of list or tuple types,
  substitute BytesIO for stream_class.
  define the function ifequal with 2 arguments: parser and token.
  if AttributeError exception is caught,
  define the method start_index with an argument self.
  call the method self.get_field_type with 3 arguments connection, table_name and row, assign the result to field_type, field_params,
  return boolean True.
  from django.utils.text import unescape_entities into default name space.
  _empty_value is an empty list.
  if any resulting element is true, return boolean True, otherwise return boolean False.   convert os.sep into a string and append '*' to it, substitute the result for dir_suffix.
  define the function byte2int with an argument bs.
  otherwise assign string 'ascii' to encoding.   call the method lookup with the encoding as the argument.
  call the method transaction.get_autocommit with an argument self.using, if it evaluates to true,
  substitute code_changed for fn.
  call the function _trans.get_language_from_request with 2 arguments: request and check_path, return the result.
  return an instance of a class WithNode, created with 4 arguments: None, None, nodelist and extra_context as extra_context.
  if attachments exists substitute it for self.attachments, if not attachments is an empty list.
  from django.utils.six import StringIO into default name space.
  and code set to string 'invalid'.   decorator deconstructible,
  define the method __init__ with 3 arguments: self, attrs set to None and render_value set to boolean False.
  if fields is not None,
  substitute self.__class__ for obj.__class__.
  define the method items with an argument self.
  or if it is false, but has_old_option is true use self.requires_model_validation, if they are both false use boolean True as an argument.   property decorator,
  if not,
  if not,
  append to options a tuple containing 2 entries: result of the method s_opt.get_opt_string and s_opt.nargs,
  substitute DebugLexer and DebugParser for lexer_class and parser_class.
  call the function get_language, substitute the result for lang.
  substitute this list for additional_headers.   join all of the elements of vary_headers and additional_headers in a string delimited by a comma,
  call the function six.text_type with an argument number, substitute the result for str_number.
  define the method nodelist with an argument self.
  join to_path and name into a file path, substitute the result for filename.
  call the method self.xml.endElement with an argument string 'natural'
  from django.core.serializers.python import Deserializer as PythonDeserializer into default name space.
  if value is an instance of str type,
  define the method render with 2 arguments: self and context.
  if not,
  derive the class ChoiceField from the base class Field class.
  call the self.compare method with arguments cleaned and self.limit_value, if it evaluates to true,
  call the function Charset.Charset with argument string 'utf-8', substitute the result for utf8_charset.
  return a list containing return values of the function to_py called with an argument val, for every val in value.
  derive the class SerializerDoesNotExist from the KeyError base class.
  write errors to self.stdout.
  call the method base.DeserializedObject with arguments obj and m2m_data, return the result.
  call the method widget.id_for_label with an argument id_, substitute the result for id_for_label.
  trans_bit is a list with an element bit.
  attribute of the self object for name converted into a string.   raise an KeyError with an argument string 'Unknown media type "%s"', where '%s' is replaced with name.
  while ch is not equal to terminal_char,
  substitute _iteritems for items.
  from django.core.serializers.base import SerializerDoesNotExist into default name space.
  call the function get_supported_language_variant with an argument accept_lang, return the result.
  substitute result for self dictionary under key key.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  substitute the result for connection.   get the value under the 'table_name_filter' key of the options dictionary, substitute it for table_name_filter.
  if LookupError exception is caught,
  define the method clear with argument self.
  sort elements formatted, join them in the list separated with newline character, substitute the result for formatted.
  derive the class URLNode from Node base class.
  call the method self.create_token with 2 arguments bit and in_tag, append the result to result.
  define the function find_template with 2: template_name and dirs set to None.
  if key is contained in dict_,
  field.attname of the data dictionary.   if not,
  otherwise if second element of args equals a string '404',
  call the function get_templatetags_modules, substitute the result for templatetags_modules.
  if ImportError exception is caught,
  if _cookie_encodes_correctly is boolean False,
  call the method self.parse_name with an argument fixture_label, substitute the result for fixture_name, ser_fmt, cmp_fmt, respective.
  return a tuple with 3 elements: if path is true, path, in not, a string '%s.%s' formated with obj.__class__.__module__,
  call the function force_bytes with arguments k and self.encoding, substitute the result for k.
  call the add_arguments method from the base class of the class Command with parser as an argument.
  if not, isolated_context is boolean False.   get the value under the 'width' key of the options dictionary, if it exists, substitute it for namemap, if not namemap is an empty dictionary.
  call the method __init__ from the base class of the class DateTimeBaseInput, with an argument attrs.
  substitute integer 0 for cache_timeout.
  raise an TemplateSyntaxError exception with an argument string 'The %r option was specified more than once.',
  if data has an 'temporary_file_path' attribute,
  call the method handler.addQuickElement with 2 arguments: string "category" and cat.
  define the function print_ with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  define the method __init__ with 2 arguments: self and lexer.
  do nothing.
  raise CommandError exception with "App '%s' does not have migrations (you cannot selectively sync unmigrated apps)",
  try,
  and format, return the result.   derive the class RegexField from the base class CharField class.
  get value under the 'register_to' key of the kwargs dictionary, substitute it for register_to.
  if ValueError or self.queryset.model.DoesNotExist exception is caught,
  define the private method __str__, with self instance of this class as the only argument.
  call the method node.render with an argument context, return the result.
  define the method __getitem__ with arguments self and name.
  try,
  decorator function register.filter with an argument is_safe set to boolean True.
  substitute pattern.regex.pattern for parent_pat.
  if fname doesnt start with self._dir and fname file path doesnt exists,
  if filter_name is contained in self.filters,
  substitute label_suffix for self.label_suffix.
  call the method states.items, for every state and rules in the result,
  if roots is false,
  substitute elements of middle from the beginning to the negative length of punctuation, for middle.
  join elements of self.cc into a string separated by ', ', substitute the result for value under the 'Cc' key of msg dictionary.
  otherwise if value is boolean False,
  for every dict_ in self.dicts,
  append template_dir to app_template_dirs.
  parser is an instance of CommandParser class, created with 3 arguments, None, usage as a string "%(prog)s subcommand [options] [args]" and add_help set to boolean False.
  get the value under the 'all' key of the options dictionary, substitute it for process_all.
  for every elt in source,
  call the method __init__ from the base class of the class BaseModelFormSet, with an argument unpacked dictionary defaults.
  if value is an instance of SafeData, safe is boolean True, otherwise it is boolean False.
  url_markup_template is a string '<a href="{0}">{1}</a>'.
  msg is a string "%(model)s.Meta.%(opt)s cannot be a string. Did you mean to type: ('%(value)s',)?", where '%(model)s' is replaced,
  otherwise if name starts with a string 'string',
  library set to memcache and value_not_found_exception set to ValueError.   property decorator,
  return an empty string.
  define the method __init__ with 3 arguments: self, attrs set to None and check_test set to None.
  call the method dictConfigClass with an argument config, call the method configure on the result.
  split host from the right side into 2 parts at the ':', substitute the result for bits.
  try,
  if not,
  get the id of the self object, use it as a key to obtain the value from the memo dictionary, substitute self with it.
  where '%s' is replaced with final_path and base_path.   return final_path.
  if decimals is greater than digits,
  if elt is an instance of Group class,
  substitute var_name for self.var_name.
  try,
  decrement nesting by one.
  define the method attach_alternative with arguments self, content and mimetype.
  if ImportError, IndentationError, NameError, SyntaxError, TypeError or AttributeErrorexception is caught,
  define the method tokenize with an argument self.
  get the type of form object, return an instance of resulting class created with 3 arguments: class_name, tuple with an element form,
  from django.utils.text import get_text_list into default name space.
  define the method start_serialization with an argument self.
  if url_info.netloc is false and url_info.scheme is true,
  substitute self.rawdata for rawdata.
  compile a regex from raw string '^(?P<prefix>[a-z]+)://(?P<suffix>.*)$', substitute it for CONVERT_PATTERN.
  __all__ is a tuple containing strings 'BaseFormSet', 'formset_factory' and 'all_valid'.
  if request.method equals to string 'HEAD',
  substitute user_function for wrapper.__wrapped__.
  RemovedInDjango19Warning, stacklevel set to integer 2.   for field_name every obj in list created from the elements of the return value of the function six.iteritems with an argument attrs.
  call the method self.nodelist.render with an argument new_context, return the result.
  call the method self._reverse_with_prefix with 4 arguments: lookup_view, an empty string, unpacked list args and unpacked dictionary kwargs.
  call the method field.rel.to._default_manager.db_manager with db as argument, call the get_by_natural_key method on the result with,
  bytes_read is integer 0.
  define the function all_locale_paths.
  call the __init__ method with unpacked list args and unpacked dictionary kwargs from the base class of the GenericIPAddressField class.
  call the method self.stdout.write with an argument string "Loading '%s' fixtures...", where '%s' is replaced with fixture_name.
  if lib is true,
  define the method __init__ with 2 arguments: self and tokens.
  with one entry 'status_code' is integer 400, as arguments.   call the http.HttpResponseBadRequest function, assign the result to the response.
  return self.data.year.
  do nothing.
  if name is contained in lib.tags,
  pad the rest of the field with bytes string '=', use the result as an argument for the call to the method base64.urlsafe_b64decode,   return the result.   if LookupError or BinasciiError, renamed to e, exceptions are caught.
  from django.core.management.sql import sql_create into default name space.
  if command is contained in parse_until,
  from django.utils import six into default name space.
  for every dirpath, dirnames and locale_filenames in directory tree starting at the basedir directory.
  define the method __init__ with 3 arguments: self, initlist set to None and error_class set to None.
  derive the class Deserializer from the six.Iterator base class.
  call the connection.cursor method, substitute it for cursor.
  call the method self.style.MIGRATE_HEADING with an argument string "Will squash the following migrations:",
  break from the loop execution.
  define the method common_logger_config with 4 arguments: self, logger, config and incremental set to boolean False.
  import module time.
  define the method save with 2 arguments: self and commit set to boolean True.
  from django.conf import settings into default name space.
  self._unget_history is an empty list.
  model._meta.app_label, model._meta.object_name, parent_model._meta.app_label, parent_model._meta.object_name, respectively.   if not,
  comment is an empty list.
  if row_data is contained in seen_data,
  call the method apps.get_model with an argument model_identifier.
  define the method get_renderer with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
  define the function do_include with 2 arguments parser and token.
  append string '_directory' to app_or_project, substitute it for base_directory.
  compile regex from a string '(?<!\\)([aAbBcdDeEfFgGhHiIjlLmMnNoOPrsStTUuwWyYzZ])', substitute it for re_formatchars.
  skip this loop execution.
  raise an TypeError exception with an argument string "sep must be None or a string".
  convert second item to an iterable,
  from django.core.management.base import BaseCommand into default name space.
  from django.conf import settings into default name space.
  call the method self.has_header with string 'Content-Encoding' as an argument, if it evaluates to true,
  call the method self.model._default_manager.get_queryset with an argument qs.
  do nothing.
  return r.
  if comment_lineno_cache is not None,
  derive the class DateFormat from the base class TimeFormat.
  raise an exception.
  raise an InvalidTemplateLibrary exception with an argument string "Template library %s not found, tried %s",
  otherwise if vale is an instance of value,
  return an empty list.
  return an string "Error in formatting: %s", replace '%s' with result of the function force_text,
  raise an exception.
  with '%s' substituted for app_label, as arguments.   for every key in return vale of the method executor.loader.graph.leaf_nodes, check if the first element of key equals to app_label,
  if LookupError exception is caught,
  derive the class MinValueValidator form the BaseValidator base class.
  commands is an dictionary containing elements: string 'django.core' for every name in the function find_commands return value, called with first element of __path__ as an argument.
  if self.connection is false,
  instantiate a class Group with 2 arguments: string "%%(%s)s" formated with param, and param, append it to result.
  call the method text.splitlines with an argument boolean True, for every line in the result,
  substitute the return value of the smart_text function with an argument obj_pk for the value under the 'pk' key of the attrs dictionary.
  instantiate Lexer class with 2 argumets src and origin, call the method tokenize from it, for every t in the result,
  if field is not None,
  define the method content with an argument self.
  substitute the result for value under the self.target_var key of the context dictionary.   return an empty string.
  raise an ValueError with an argument string "MultiValueDict.update() takes either a MultiValueDict or dictionary".
  derive the class StopFutureHandlers from the UploadFileException base class.
  for every f and e in list of tuples of self dictionary key, pair entries.   define the method as_json with 2 argumens self and escape_html set to boolean False.
  if e.errno is not equal to errno.EEXIST,
  import module tempfile.
  replace every occurrence of raw string '\\' in the result with string '\\', return the result.   call the function allow_lazy with an argument unescape_string_literal, substitute the result for unescape_string_literal.
  call the function getInnerText with an argument node, call the strip method on the result, substitute the result for field_value.
  substitute connection.introspection.table_name_converter for converter.
  define the method get_json_data with 2 arguments self and escape_html set to boolean False.
   for every domain in domains,
  for every key and value in list created out of the elements of the result of the call to the method attrs.items,
  raise an NotImplementedError with an argument string 'subclasses of Widget must provide a render() method'.
  if third element of bits is not equal to a string 'by',
  call the method self.fields.values, for every field in result,
  substitute arg converted into an integer for length.
  call the function color_style, substitute the result for self.style.
  yield ch and boolean False.
  define the method _ipython with an argument self.
  if not,
  define the function inotify_code_changed.
  define the method __init__ with 2 arguments: self and filter_expression.
  do nothing.
  call the self.handle_noargs method with with unpacked dictionary options as argument, return the result.
  if day_of_year is smaller than or equalt to jan1_weekday subtracted from integer 8 and jan1_weekday is greater than integer 4,
  HttpResponseNotModified, HttpResponseBadRequest, HttpResponseForbidden, HttpResponseNotFound, HttpResponseNotAllowed, HttpResponseGone,   HttpResponseServerError, Http404, BadHeaderError, JsonResponse into default name space.   from django.http.utils import fix_location_header and conditional_content_removal into default name space.
  if token.contents is false,
  call the function get_connection with argument fail_silently set to fail_silently, substitute it for self.connection.
  if original_lookup and lookup_view are not callable objects,
  for every path in collect,
  raise an exception parser.error_class with an argument string "Unexpected end of expression in if tag.".
  define the function unescape_string_literal with an argument s.
  import module glob.
  call the function _load_serializers.
  return self._dimensions_cache.
  substitute fcntl.LOCK_EX for LOCK_EX.
  if can_fail is true,
  define the function reset_cache with an argument unpacked dictionary kwargs.
  widget is an instance of HiddenInput class.   if not,
  and self.ns for "xmlns".   if not,
  if not,
  substitute Select for widget.
  substitute self.field.widget for widget.
  substitute '%s' in string 'id_%s' with name, return it.
  do nothing.
  get 'getvalue' attribute of the self.stream object, if it exists and is callable,
  define the method nud with 2 arguments: self and parser.
  call the method stream.unget with an argument chunk.
  call the method self._create_mime_attachment with the arguments content and mimetype, substitute the result for attachment.
  otherwise if cls._delegate_bytes is true,
  derive the class Error from base class CheckMessage.
  append f to file_field_list.
  raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to string 'required'.
  derive the class SafeBytes from bytes and SafeData base classes.
  from django.utils import timezone into default name space.
  call the method filename.encode with an argument string 'ascii'
  remove config dictionary element under 'level' key, if it exists substitute it for level, if not, level is None.
  define method add_arguments with self class instance and parser as arguments.
  call the function find_command with an argument program, if it evaluates to None,
  decorator function register.filter with an argument is_safe set to boolean True.
  call the self.make_bytes method with an argument chunk, for every chunk in value join the result to a bytes string,
  define the method _create_message with arguments self and msg.
  field_type is a string 'NullBooleanField('
  call the method handler.addQuickElement with 2 arguments: string 'language' and value under the 'language' key of the self.feed dictionary.
  MAX_NUM_FORM_COUNT is a string 'MAX_NUM_FORMS'.
  call the method parser.add_option with 3 arguments: string '--traceback', action set to a string 'store_true',
  if options is true,
  import bz2.
  call the object d with arguments stream_or_string and unpacked dictionary options, return the result.
  and warning as a string "You cannot alter upload handlers after the upload has been processed.".   parser is an instance of MultiPartParser class, created with 4 arguments: META, post_data, self.upload_handlers and self.encoding.
  replace every occurrence of '\n' in subject with '\\n' and replace every occurrence of '\r' in subject with '\\r',
  plist is an empty list.
  call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
  for every pattern in self.url_patterns,
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  substitute first element of base64d for base64d.
  call the function new_method_proxy with an argument bool, substitute the result for __bool__.
  if exp is not None and exp is lesser than return value of the function time.time,
  call the function smart_text with an argument value, strip the result of whitespaces from both ends and substitute it for value.
  import module functools.
  append a tuple with 2 entries lang and priority to result.
  result of the call to the function _ with an argument string 'Tuesday' for 1,   result of the call to the function _ with an argument string 'Wednesday' for 2,   result of the call to the function _ with an argument string 'Thursday' for 3,   result of the call to the function _ with an argument string 'Friday' for 4,   result of the call to the function _ with an argument string 'Saturday' for 5,   and result of the call to the function _ with an argument string 'Sunday' for 6.   WEEKDAYS_ABBR is an dictionary with 7 entries: result of the call to the function _ with an argument string 'Mon' for 0,
  set field interesting for this class instance to interesting_cdata from module _html_parser.
  default_error_messages is an dictionary with 3 entries: return value of the function _ called with an argument,
  files and string created with concatenation of: name, string '_' and i converted into a string, return the results in a list.   define the method format_output with 2 arguments: self and rendered_widgets.
  substitute the result for the value under the NON_FIELD_ERRORS key of form._errors dictionary.   delete entry from form.cleaned_data dictionary under the field key.
  append the result to the '\n' string, write it to self.stdout.   finally perform,
  append tuple with 2 elements: command and token.source, append the result to self.command_stack.
  if settings.USE_TZ is true and value is not None and call to the function timezone.is_aware with an argument value, evaluates to true,
  derive the class ZipArchive from the BaseArchive base class.
  if value is not None,
  return boolean False.
  if template doesnt have a 'render' attribute,
  define the method __str__ with an argument self.
  substitute the result for value under the 'microsecond' key of the kw dictionary.   update a dictionary with an entry v converted to an integer for k, for every k and v in result of the function six.iteritems,
  define the method __init__ with 3 arguments: self, offset set to None, name set to None.
  if o.microsecond is true,
  define the function date with 2 arguments value and arg set to None.
  substitute pattern.regex.pattern for p_pattern.
  and 'Comment' for TOKEN_COMMENT.   FILTER_SEPARATOR is a string '|'.
  property decorator,
  define the method render with 2 arguments: self and context.
  from django.apps import apps into default name space.
  return the_path.
  if field is not contained in self.errors,
  raise an base.DeserializationError exception with an argument string "<%s> node has invalid model identifier: '%s'",
  called with an argument decorator.   if decorator has an attribute 'process_view',
  substitute io.StringIO for StringIO.
  return obj.
  substitute value under level key of logging._levelNames dictionary for rv.
  yield string "#   * Rearrange models' order" as the result.
  if exclude is true and f.name is contained in exclude,
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  define the method __init__ with 7 arguments: self, request, template, context set to None, content_type set to None,
  if other_dict doesnt have an '__getitem__' attribute,
  slice language from (p+1)-th index to the end, calculate the length of the obtained segment, if it is greater than integer 2,
  call the method self.fields.items, for every name and field in the result,
  is_localized is boolean False.
  self._post_parse_error is boolen False.
  help is a string 'Discover and run tests in the specified modules or the current directory.'.
  call the function urlunsplit with a tuple containing 5 elements: scheme, netloc, path, query and fragment, as an argument, substitute the result for url.
  upload_handlers.setter decorator.
  call the method self._text_chars with 4 arguments: length, truncate, text and truncate_len, return the result.
  default as boolean False and help as a string "Don't break long message lines into several lines.".   call the method parser.add_argument with 5 arguments: string '--no-location', action set to string 'store_true',
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  raise an exception.
  if not,
  raise an exception parser.error_class with an argument string "Not expecting '%s' as infix operator in if tag.",
  from the base class of the SimpleCookie class call the method load with rawdata as argument.
  property decorator,
  if not,
  self.pos is integer 0.
  define the method copy with an argument self.
  decorator function register.filter with 2 arguments string "phone2numeric" and is_safe set to boolean True.
  call the method warnings.warn with 2 arguments: string "The syncdb command will be removed in Django 1.9" and RemovedInDjango19Warning.
  call the function time.strftime with 2 arguments: fmt and and timetuple without the first element,
  if values under the 'socket', 'host' and 'port' keys of the options dictionary are false,
  call the parse_args method with arguments args and namespace, from the base class of the CommandParser class.
  substitute max_value and min_value for self.max_value and self.min_value.
  if value is None,
  call the function ugettext_lazy with an argument string 'Change', substitute the result for input_text.
  previous result and filepath.   if IOError exception is caught,
  set attr.name attribute of Module_six_moves_urllib_robotparser object to attr.
  if ValueError, OverflowError or InvalidOperation exceptions are caught,
  remove entry under 'initial' key of the kwargs dictionary, substitute it for self.initial_extra if it exists,
  return an instance of SafeText, created with an argument data.
  from django.utils import six into default name space.
  derive the class Node from object base class.
  if self.required is true,
  position file self.file pointer at the pos position.
  define the function widthratio with 2 arguments: parser and token.
  call the get_bytes_from_wsgi function with environ, string 'SCRIPT_NAME' and empty strings as arguments, substitute the result for script_name.
  format settings.TEMPLATE_STRING_IF_INVALID with self.var, return the result.
  if i incremented by 1 is lesser than length of chunks,
  return self._files.
  define the function is_valid_path with arguments path and urlconf set to None.
  for every f in fields,
  define the function phone2numeric_filter with an argument value.
  value is None.
  divide self.data.day by 10, substitute reminder of the result for last.
  from django.utils import six into default name space.
  derive the class ContentFile from File base class.
  raise an IOError exception with string "Destination file %s exists and allow_overwrite is False" as argument, where '%s' is replaced by new_file_name.
  _default is None.
  get the value under value key of a dictionary with 4 entries: '2' for boolean True, '3' for boolean False, '2' for '2',
  if Exception, renamed to e, exception is caught,
  if index is negative inter 3, if is_reversed, substitute it for in_index, if not, in_index is negative integer 2.
  if not,
  model._meta.app_label, model._meta.object_name, fk_name, respectively.   if not,
  define the function get_git_changeset.
  define get_script_name function with environ as an argument.
  assign script_name to the value under the 'SCRIP_NAME' key of the self.META dictionary.
  return an empty list.
  if second last element of django.VERSION is not equal to a string 'final',
  define the method _add_installed_apps_translations with an argument self.
  call the method self.add_arguments with an argument parser.
  from django.utils.six.moves import xrange into default name space.
  return nothing.
  define the method writer with an argument self.
  call the function timesince with an argument value, return the result.
  if self.selected_fields is None or field.attname is contained in self.selected_fields,
  derive the UploadedFile class from the File base class.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  call the function _ with an argument string 'midnight', return the result.
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  get the value under the library_name key of the libraries dictionary, if it exists, substitute it for lib, if not, lib is None.
  substitute target_var for self.target_var.
  call the function datetime.datetime with 3 arguments: value.year, value.month and value.day, substitute the result for result.
  i is integer 365.
  append app_name to the invalid_apps.
  define the method __contains__ with 2 arguments: self and other.
  if not, substitute func.__name__ for name.   call the method self.filter with 3 arguments: name, func and unpacked dictionary flags.
  from django.conf import settings into default name space.
  if _default is None
  call the BaseConverter function with BASE56_ALPHABET as argument, store the result in base56.
  self.activated is boolean True.
  define lambda function with self class instance as the argument, lambda function body encapsulates the call to the method,
  try,
  if value is not equal to an empty string,
  do nothing.
  try,
  defaults is an dictionary with 3 initial entries: self.auto_id for 'auto_id', result of the call to the method self.add_prefix,
  request_middleware is an empty list.
  call the method type.__new__ with 4 arguments: cls, name, empty tuple and d, return the result.
  define the method __init__ with 15 elements: self, title, link, description, language set to None, author_email set to None,
  call the sio.read method, substitute the result for self.buffer.
  args is an empty tuple.
  default_validators is a list with an element, return value of the validators.URLValidator method.
  call the method self.__cast, if the result equals other, return boolean True, otherwise return boolean False.
  if value is false and self.required is true,
  define the method split_contents with an argument self.
  call the function func with 2 arguments: unpacked list resolved_args and unpacked dictionary resolved_kwargs, substitute the result for _dict.
  if six.PY3 is true,
  define the method _post_clean with an argument self.
  substitute all_locales for locales.
  if not,
  curr is an empty string.
  return name converted to a string and val.
  if value is an instance of bytes class,
  get attribute 'error_dict' from the self object.
  call the function templatize with 2 arguments: src_data and sliced orig_file, without first 2 elements, substitute the result for content.
  join missing_fields into a string separated by string ', ', use it and opts.model.__name__ to format message, substitute the result for message.
  call the method self.z, substitute the result for day_of_year.
  if unhandled_params is true,
  define the method has_changed with an argument self.
  substitute '%s' in string '<%s %s %s>' with self.__class__.__name__, self.name and self.regex.pattern, respectively,
  raise a ValidationError exception with 2 arguments: return value of the function _ with an string argument 'Enter a valid integer.',
  define the function csrf_token with 2 arguments: parser and token.
  return self.find_template_cache dictionary value under the key key.
  define the method __wrapper__ with 3 arguments: self, unpacked list args and unpacked dictionary kw.
  try,
  define the method __next__ with an argument self.
  if boundary is false or return value of the method cgi.valid_boundary called with an argument boundary evaluates to false,
  is self.data has an attribute 'tzinfo' and self.data.tzinfo is true,
  define the method _construct_form with 3 arguments: self, i and unpacked dictionary kwargs.
  call the method self._add_local_translations.
  try,
  define the method __new__ with 5 arguments: cls, fget set to None, fset set to None, fdel set to None and doc set to None.
  from django.conf import settings into default name space.
  join the results into a string, return it.   if hmac has an attribute "compare_digest",
  msg is an empty string.
  return dec.
  from django.apps import apps into default name space.
  if zlib.error as e exception is raised,
  declare that we use global variables cached_modules and _cached_filenames in this function.
  define the method __init__ with 3 arguments: self, attrs set to None and format is None.
  sum year and off, substitute the result for year.
  call the method app.start.
  for every node in self.nodelist_loop,
  try,
  return flat.
  call the function copy.deepcopy with 2 arguments: self.children and memodict, substitute the result for obj.children.
  define the method send_messages with arguments self and messages.
  derive the class Command from the BaseCommand base class.
  called with an argument value under the 'updateddate' key of the item dictionary.   if value under the 'author_name' key of the item dictionary is not None,
  if serializers.SerializerDoesNotExist exception is caught,
  resolved_args is an list with elements, return value of the method var.resolve with an argument context, for every var in self.args.
  from django.utils import six into default name space.
  call the method message.message, substitute the result for msg.
  raise an ValueError exception with an argument string "Base36 input too large".
  import module collections.
  open err_log flie in append mode with buffering size of input buffer, substitute the result for se.
  raise an ValidationError with 2 arguments: dictionary self.error_messages value under the key 'list',
  try,
  substitute key for result.key.
  return self.hashvalue.
  substitute the result for self._object_dict.   return the value under the pk key of self._object_dict dictionary.
  increment num_args by one.
  define the method items with an argument self.
  from django.utils.encoding import force_str, force_text and iri_to_uri into default name space.
  call the function make_middleware_decorator with an argument middleware_class, return the result.
  return self.__offset.
  otherwise if name equals a string 'id'.
  if not,
  yield field and ValidationError object converted to an list, created with an argument errors.
  call the method parser.add_argument with 5 arguments: string '--tag', string '-t', action set to string 'append',
  try,
  call the method attrs.copy, substitute the result for self.attrs.
  instantiate class Module_six_moves_urllib_response with an argument, string ".moves.urllib.response" appended to __name__,
  FILTER_ARGUMENT_SEPARATOR, FILTER_SEPARATOR, SINGLE_BRACE_END, SINGLE_BRACE_START, TOKEN_BLOCK, TOKEN_COMMENT, TOKEN_TEXT, TOKEN_VAR,   TRANSLATOR_COMMENT_MARK, UNKNOWN_SOURCE, VARIABLE_ATTRIBUTE_SEPARATOR, VARIABLE_TAG_END, VARIABLE_TAG_START, filter_re and tag_re.   from django.template.base import ContextPopException, InvalidTemplateLibrary, TemplateDoesNotExist, TemplateEncodingError,
  if not,
  disable_existing is boolean True.   call the method logging._handler.clear.
  infos, 'INFOS'   for every issues and group_name in sorted_issues,
  __all__ is an tuple with 3 elements: strings 'MultiPartParser', 'MultiPartParserError' and 'InputStreamExhausted'.
  return an string '<ExtendsNode: extends %s>', where '%s' is replaced with self.parent_name.token.
  substitute value under the subcommand key of the commands dictionary for app_name.
  if signal has an attribute 'SIGTTOU',
  append self._regex_validator to self.validators.
  call the import_string function with an argument settings.SIGNING_BACKEND, substitute the result for Signer.
  call the middleware_method with the request as an argument, substitute the result for response.
  month_field is a string '%s_month'.
  call the method connection.introspection.table_names, substitute the result for tables.
  if push is not None,
  call the method self.stdout.write with an argument string 'examining files with the extensions: %s\n',
  if PY3 is true,
  call the method formfield.queryset.complex_filter with an argument limit_choices_to, substitute the result for formfield.queryset.
  call the function restart_with_reloader, substitute the return value for exit_code.
  substitute i-th element of self.forms for form.
  from PIL module import ImageFile as PillowImageFile.
  opts and unpacked dictionary kwargs.   NOCOLOR_PALETTE is a string 'nocolor'.
  get the directory name of filename, substitute the result for dirname.
  return string 'https'.
  return an instance of SafeText, created with an argument s converted into a string.
  convert value to an floating point number if it is not equal to integer 1,
  raise an CommandError exception with an argument "Database inspection isn't supported for the currently selected database backend.".
  define the method compress with arguments self and data_list.
  otherwise if pluralmatch is true,
  called with an argument value under the 'pubdate' key of the item dictionary.   if value under the 'updateddate' key of the item dictionary is not None,
  import module copy.
  in string '-W%s' replace '%s' with o for every o in sys.warnoptions, put the result into a list, append the list to a list containing sys.executable, append sys.argv to the end of the resulting list, substitute the result for args.
  call the function datetime.datetime with 3 arguments, d.year, d.month and d.day, substitute the result for d.
  return an empty string.
  return WSGIHandler object.
  is length of list_ equals integer 0,
  substitute asvar for self.asvar.
  define the method copy with an argument self.
  if the key doesnt exists use sys.stderr as an argument.   if not,
  append potfile to potfiles.
  get 'help_texts' attribute from the options object, if it exists substitute it for self.help_texts, if not self.help_texts is None.
  if AttributeError exception is caught,
  derive the class RegroupNode from Node base class.
  if not,
  if num_repl is greater than integer 0,
  substitute callable for callable.
  string '<script type="text/javascript" src="{0}"></script>' and absolute file path of the path, for every path is self._js.   define the method render_css with an argument self.
  derive the class lazy_property from the property base class.
  skip this loop iteration,
  call the function six.text_type with an argument self.data.year, return the result without the first 2 elements.
  try,
  define the method id_for_label with an argument self.
  self.years is list containing 10 successive integers from this_year.
  define the method __str__ with an argument self.
  if p.image is not empty,
  derive the class LoadNode from Node base class.
  if it exists or None if not and convert_apps set to app_labels, if it exists or None if not, substitute the result for changes.   if changes is false and self.verbosity is greater than, or equal to iteger 1,
   _mutable is boolean True.
  join elements of output into a string, separated with newlines, return the result.
  description is a string "An instance of the '%s' class" with '%s' replaced by value of receiver.__class__.__name__.
  from django.forms.utils import from_current_timezone and to_current_timezone into default name space.
  return lookup_view
  define the method get_block with 2 arguments self and name.
  define the method get with 3 arguments: self, key and default set to None.
  substitute ngettext for ungettext.
  third element of url_fields is an empty string.
  otherwise if self.verbosity is greater than integer 0,
  call the method parser.add_option with an argument opt.
  define the method __nonzero__ with an argument self.
  import module os.
  if _cookie_encodes_correctly and _cookie_allows_colon_in_names are boolean True,
  call the function logging_config_func with an argument logging_settings.
  default set to DEFAULT_DB_ALIAS and help set to string 'Nominates a database onto which to open a shell. Defaults to the "default" database.'.   define the method handle with arguments self and unpacked dictionary options.
  try,
  obj is an instance of Node class, created with 2 arguments: connector set to self.connector and negated set to self.negated.
  if dt is None, is_dst is boolean False, otherwise call the method _isdst with an argument dt, substitute the result for is_dst.
  return value.
  get the value under the 'exclude' key of the options dictionary, substitute the result for exclude.
  if TypeError exception is caught,
  substitute base for self.base.
  define the method _prepare_data with 2 arguments: self and data.
  define the function lock with arguments f and flags.
  define the method _has_changed with 3 arguments: self, initial and data.
  call the function timedelta with an argument integer 0, return the result.
  append first element of e.args to not_found list.
  format the string  '<p>%s</p>' with the result, for every p in paras, substitute list of results for paras.   join elements of paras into a string separated with '\n\n', return the result.
  call the function io.open with orig_file and encoding set to settings.FILE_CHARSET, with the result renamed to fp,
  if field is not equal to NON_FIELD_ERRORS and field is not contained in self.fields,
  call the method self.check_test with an argument value, if it evaluates to true,
  options dictionary, if the key doesnt exists use settings.DEFAULT_CHARSET instead.   call the self.xml.startDocument method.
  call the method _construct_form from the base class of the class BaseModelFormSet, with 2 arguments: i and unpacked dictionary kwargs.
  call the method self.var2.resolve with 2 arguments: context and boolean True, substitute the result for val2.
  from django.http import Http404 into default name space.
  convert field into a string and concatenate it to a string '* ', append the result to output.
  call the method sys.stderr.close.
  get the value under the part key of the PALETTES dictionary, update with it palette dictionary.
  define the function wordcount with an argument value.
  return boolean True.
  self.charset is None.
  define the method _construct_form with 3 arguments: self, i and unpacked dictionary kwargs.
  from django.utils.encoding import force_str and force_text into default name space.
  item is a dictionary with 15 initial entries: result of the function to_unicode called with an argument title for 'title',
  define the method _load_post_and_files with an argument self.
  pathext is an list containing an empty string.
  if in_index-th element of bits equals to string 'in',
  define the function remove_tags with 2 arguments: html and tags.
  call the method node.getAttribute with an argument attr, substitute the result for model_identifier.
  import module re.
  call the method self.error with an argument self.cmd.missing_args_message.
  try,
  define the method __init__ with 5 arguments: self, template, context set to None, content_type set to None and status set to None.
  for every key and value in return value of the parse_qsl with 3 arguments: query_string is it exists or an empty string if not,
  call the method copy.copy with an argument self, substitute the result for result.
  raise the exception ValueError, with string as argument, "@python_2_unicode_compatible cannot be applied",
  if pattern.namespace is true,
  call the method connection.introspection.get_relations with 2 arguments cursor, table_name and substitute the result for relations.
  if 'fields' attribute of meta is None, or if it doesnt exists if fields is None and if 'exclude' attribute of meta is None,
  if length of bits is not equal to integer 6,
  call the method handler.addQuickElement with 3 arguments: string 'atom:link', None and dictionary with 2 entries: 'self' for 'rel',
  otherwise call the function sys.getdefaultencoding and substitute its result for fs_encoding.   if six.PY3 is true or os.name equals a string 'nt',
  return expanded_template.
  define the method __repr__ with an argument self.
  derive the class DateField from the base class BaseTemporalField class.
  call the method result.setlist with 2 arguments: return value of the function copy.deepcopy called with 2 arguments: key and memo,
  if not,
  return self.
  delete attr.
  if use_grouping is true and grouping is greater than integer 0, use_grouping is boolean True, otherwise it is boolean False.
  TemplateSyntaxError and VariableDoesNotExist.   from django.template.base import Context, FilterExpression, Lexer, Node, NodeList, Parser, RequestContext, Origin, StringOrigin,
  multiply offset.days, integer 24 and integer 60, sum the result with floored result of division of offset.seconds,
  if arg starts with options,
  is_usable is boolean True.
  import module datetime.
  if code is not None
  call the method lexer.lex with an arguments js, for every name and tok in the result,
  call the function lazy with 2 arguments: func and unpacked list resultclasses, call the result with 2 arguments: unpacked list args,
  define the method __init__ with arguments self, stream and boundary.
  if the key doesnt exists call the six.String function and substitute the result for self.stream.   remove the 'fields' key from the options dictionary and substitute it for self.selected_fields,
  and unpacked dictionary kwargs.   define the function allow_lazy with 2 arguments: func and unpacked list resultclasses.
  return the printable representation of the self object converted to a list.
  call the self.stdout.write method with string 'processing file %s in %s\n' as argument, replacing all the occurrences of '%s' with f and dirpath, respectively.
  convert col_name to lowercase, on the result call the method find with an argument string '__', if the result is greater of equal to integer 0,
  define the method __getattr__ with arguments self and name.
  return value.
  model is None.
  from __future__ import unicode_literals into default name space.
  break the loop execution.
  append model to app_list_value.
  try,
  for every lookup and arg in args,
  define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  filesize_number_format with result of division of bytes by GB as an argument, substitute the result for value.   otherwise if bytes is smaller than PB,
  call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for _default.
  return supported_code.
  try,
  call the method self.handle_fk_field with arguments obj and field.
  if not,
  property decorator,
  derive the class BaseEmailBackend from the object base class.
  multiply self.number and self.paginator.per_page, return the result.
  code is a string 'max_value'
  finally perform,
  get the value under the self.status_code key of the REASON_PHRASES dictionary, if it exists substitute it for the self.reason_phrase,
  if rest is not False, None is considered False,
  break from the smallest enclosing loop.
  call the method self.error_class with an argument list with one element, return value of the method self.get_form_error,
  request_started is a instance of a Signal class.
  substitute WSGIServer for httpd_cls.
  define the method __call__ with arguments self and value.
  if not,
  CheckboxInput, Select, NullBooleanSelect, SelectMultiple, DateInput, DateTimeInput, TimeInput, SplitDateTimeWidget,   SplitHiddenDateTimeWidget and FILE_INPUT_CONTRADICTION.   from django.utils import formats into default name space.
  and help set to a string 'Optional table names. Otherwise, settings.CACHES is used to find cache tables.' .   call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',
  define the initialization function with self class instance, digits and sign defaulting to '-' as arguments.
  try,
  do nothing.
  get the value under the 'localize' key of the kwargs dictionary, substitute it for localize, if the key doesnt exists, substitute the result for localize.
  from django.http.response import HttpResponse, StreamingHttpResponse, HttpResponseRedirect, HttpResponsePermanentRedirect,
  define the method __ne__ with 2 arguments: self and other.
  define the method __iter__ with argument self.
  get the value under the BLOCK_CONTEXT_KEY key of the context.render_context dictionary, substitute it for block_context.
  decimal_places set to None, unpacked list args and unpacked dictionary kwargs.   substitute max_digits and decimal_places for self.max_digits and self.decimal_places.
  call the function getcallargs with an argument current,
  call parser.add_argument method with 'args', metavar set to string 'fixture', nargs set to string '*' and help set to string 'Path(s) to fixtures to load before running the server.'.
  return id_.
  inner_html is a string '<li>{choice_value}{sub_widgets}</li>'.
  substitute var_obj for self.var.
  define the method _truncate_html with 6 arguments: self, length, truncate, text, truncate_len and words.
  if changed is false,
  define the function do_filter with 2 arguments: parser and token.
  count occurrences of '\n' in t.contents, add the result to t.lineno, substitute the result for cur_lineno.
  call the method translation._catalog.copy, substitute the result for self._catalog.
  define the method write with 2 arguments: self and value.
  return boolean True.
  define the method full_clean with an argument self.
  call the __init__ method of the base class of the EmailBackend class with arguments: unpacked list args and unpacked dictionary kwargs.
  from importlib import import_module into default name space.
  if autoescape is true,
  define the method add_arguments with 2 arguments self and parser.
  where '%s' is replaced with result of the function humanize, called with an argument fixture_dir.   fixture_files_in_dir is an empty list.
  substitute self.DEFAULT_CHUNK_SIZE for chunk_size.
  use length of result as an argument for the call to the function six.text_type, substitute the result for width.   if autoescape is false, if value is an instance of SafeData,
  return boolean False.
  from django.forms.fields import IntegerField and BooleanField into default name space.
  substitute loopvars and sequence for self.loopvars and self.sequence, respectively.
  return kwargs.
  evaluate the method s.decode with string 'utf-8' and errors as the arguments,
  define ensure_echo_on function.
  return list with 2 elements: first_item and second_item, and old_style_list.
  sum sign, int_part and dec_part, return the result.
  if response is None,
  if not,
  raise an KeyError with an argument "Unknown language code %s.", where '%s' is replaced with lang_code.
  raise an CommandError with an argument string "errors happened while running msgattrib\n%s", where '%s' is replaced with errors.
  call the function http_date with no arguments, and substitute its return value
  substitute it for value under the 'pk' key of data dictionary.   return data.
  call the method parser.add_argument with 5 arguments: string '--all', action set to string 'store_true', dest set to string 'all',
  try,
  with all '%s' strings replaced with migration_name and app_label, respectively, as an argument.   if KeyError exception is raised,
  if not,
  call the method form.add_initial_prefix with an argument name, substitute the result for self.html_initial_name.
  return boolean False.
  root is an empty list.
  created_models is a set.
  derive the class TranslatorCommentWarning from the SyntaxWarning base class.
  define the method read with an argument self.
  call the method __init__ with an argument lexer, from the base class of the class DebugParser.
  value under 'localize' key of kwargs dictionary is boolean True.
  call the import_string with arguments path, call the return function with arguments: unpacked list args and unpacked dictionary kwargs, return the result.
  if fist and second element of sys.version_info equals to integer 3 and 2, respectively,
  for every site in sites,
  define the function wrap with 2 arguments text and width.
  from django.conf import settings into default name space.
  target_app_labels_only is boolean False.
  define the method _is_expired with self and f as arguments.
  if s is an instance of bytes or Promise and s._delegate_bytes is true,
  substitute the value under the 'app_label' key of options dictionary for app_label.
  if middleware has an attribute 'process_view',
  widget is an instance of HiddenInput class
  define the function _check_middleware_classes with app_config set to None and kwargs dictionary as arguments.
  call the function user_function with 2 arguments unpacked list args and unpacked dictionary kwds, substitute the result for result.
  try,
  if value under the 'author_link' key of the item dictionary is not None,
  define the method _isdst with 2 arguments: self and dt.
  call the method block_context.pop with an argument self.name, assign the result to push and block.
  define the function locale with an argument locale.
  if six.PY2 is true,
  if self.warning is an instance of Exception class,
  substitute result for cache dictionary value under the key key.
  define the method __call__ with 3 arguments: self, template_name and template_dirs set to None.
  if field is contained in self.errors return boolean True, if not, return boolean False.
  call the function re.sub with 3 arguments: string "([a-z])'([A-Z])", lambda function with an argument m and return value,
  if meta is None,
  break from the loop execution.
  from django.forms.utils import ErrorList into default name space.
  call the method self.open, substitute the result for the new_conn_created.
  call the function os.path.dirname with an argument django.__file__, join the result into a path,
  substitute complain for __setslice__.
  if the result is true or self.domain is not None,   raise an CommandError exception with an argument string "Type '%s help %s' for usage information.", where '%s' are replaced by:
  self._current is None.
  pk_value is None.
  call the method widget_attrs with an argument widget, from the base class of the FloatField class, substitute the result for attrs.
  substitute i for p.
  if last element of host equals character ']',
  try,
  if self has an attribute '_choices',
  define the method to_python with 2 arguments: self and value.
  call the method connection.cursor, substitute the result for cursor.
  if not,
  substitute SelectMultiple for widget.
  replace '%s' in string "processing locale %s\n" with locale, write it to self.stdout.
  substitute localized_fields for value under the 'localized_fields' key of attrs dictionary.
  from django.forms.formsets import everything into default name space.
  for every d in reversed list self.dicts,
  define the method render with 2 arguments: self and context.
  evaluate the method six.text_type(s), on the result call the method encode with encoding as an argument, return the result.
  import module sys.
  break from the loop execution,
  call the method is_multipart on the first element of self.forms, return it.
  link is a list with 4 elements: last, root, key and result.
  define the method content with 2 arguments: self and value.
  from django.db.migrations.loader import AmbiguityError into default name space.
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  substitute instance._meta for opts.
  return week_number.
  try,
  call the method self.xml.addQuickElement with an argument string 'None'.
  define the __init__ method with arguments: self, unpacked list args and unpacked dictionary kwargs.
  for every result and params in possibility,
  define the method send with arguments self and fail_silently set to boolean False.
  call the function warnings.warn with 3 arguments: string "django.utils.dictconfig will be removed in Django 1.9.",
  if BLOCK_CONTEXT_KEY is contained in render_context and call to the method get_block with an argument self.name from the object,
  call the function get_format with an argument string 'DECIMAL_SEPARATOR', substitute the result for decimal_separator.
  integer 212, integer 243, integer 273, integer 304 and integer 334.   define the method b with an argument self.
  decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
  if not,
  from django.conf import settings into default name space.
  if name is callable object,
  call the function warnings.warn with 2 arguments: string "Custom SQL location '<app_label>/models/sql' is deprecated, use '<app_label>/sql' instead." and RemovedInDjango19Warning.
  content is a File object instance created with content argument.
  get the type of the exc object, substitute it for exc_type.
  define the method set_many with self, data, timeout set to DEFAULT_TIMEOUT and version set to None as arguments.
  define the function get_resolver with an argument urlconf.
  if rhs is an instance of dict type and number is true,
  call the method self.format with an argument string '0', substitute the result for name.
  if value is false or for every v in value every v is contained in self.empty_values,
  raise an ValueError exception wit an argument string "Not a string literal: %r", where "%r" is replaced with s.
  from django.utils.crypto import constant_time_compare and salted_hmac into default name space.
  append string 'AutoField?' to comment_notes.
  define the method __exit__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  return result.
  convert to integer value of dictionary cc under the key 'max-age',
  increment s_len by integer 1,
  define the function check_1_7_compatibility with argument kwargs dictionary.
  substitute warning for self.warning.
  substitute settings.TEMPLATE_DIRS for template_dirs.
  try,
  define the method _clean_form with an argument self.
  open the output file in writing mode if output is true, assign the file descriptor to stream, otherwise stream is None.
  define the function jython_reloader with main_func, args and kwargs as arguments.
  do nothing.
  increment bytes_read by length of bytes.
  call the function force_text with an argument v, for every v in selected_choices, add results to a set,
  if call to the settings.is_overridden with string 'TEST_RUNNER' evaluates to boolean False.
  return value.
  try,
  call the method formats.sanitize_separators with an argument value, substitute the result for value.
  substitute self._regex for regex.
  from logging import NullHandler.
  return endpos.
  try,
  substitute '%s' in TEMPLATE_FRAGMENT_KEY_TEMPLATE string with fragment_name and args.hexdigest(), respectively, return the result.
  if want_unicode is true,
  if not,
  return nothing.
  self._producer is an empty list.
  from django.utils.translation import ugettext as _ into default name space.
  help is an string "Prints the DROP INDEX SQL statements for the given model module name(s).".
  return nothing.
  derive the class RadioChoiceInput from the ChoiceInput base class.
  convert config_string to lowercase and split it by ';' character, substitute the result for parts.
  derive the class Formatter from object base class.
  call the method validate with an argument value from the base class of the class ChoiceField.
  from pprint import pformat into default name space.
  slice the filename from the previous result as start index to the end, strip it of white spaces from both ends,   if the result is not an empty string and filename is not an empty string, return boolean True, otherwise return boolean False.   define the method _close_files with an argument self.
  derive the class Loader from the BaseLoader base class.
  split value by newline characters, substitute the result for lines.
  substitute '%r' in string ' gettext(%r) ' with  result of the function join_tokens, called with 2 arguments: singular,
  obj._constructor_args is a tuple with 2 elements: args and kwargs.
  return next element of the iterable it.
  multiply offset.days, integer 24 and integer 60, sum the result with floored result of dividing offset.seconds by integer 60,
  define the function fdel with 2 arguments: instance and name set to fdel.__name__.
  call the function six.text_type with an argument number, use the result as an argument for the call to the function mark_safe,
  if bytes is smaller than KB,
  for every _ and nodelist in self.conditions_nodelists,
  if response.streaming is True,
  call the method cache.set with cache_key, an empty list and cache_timeout as arguments.
  if not,
  if self.data is false,
  return a string '<%s: %r>', format it with __name__ field of the self class and repr_attr.
  call the method loader.select_template with an argument template, return the result.
  define the method transform with 3 arguments: self, node and results.
  call the method self._setup.
  define the method render with 2 arguments: self and context.
  internal_use_only is boolean False.
  decorator stringfilter,
  if length of bits is smaller than integer 1,
  derive the class metaclass form the meta base class.
  return tuple, consisting of first element of t converted to lowercase and second element of t.
  call the function cache_get with 2 arguments: key and root, substitute the result for result.
  return a tuple with an element self.__dt.
  get the value under the LANGUAGE_SESSION_KEY key of the request.session dictionary, substitute it for lang_code.
  get is a tuple containing elements generated by the call to the function pformat with an argument POST_override,
  if KeyError exception is caught,
  cache_choices, required, widget, label, initial, help_text, unpacked list args and unpacked dictionary kwargs.   define the method to_python with 2 arguments: self and value.
  substitute basestring for string_types.
  if level is not None,
  add self.form.required_css_class to extra_classes set.
  derive the class RenameMethodsBase from type base class.
  if 'coerce' key of the kwargs dictionary exists remove it and substitute its value for self.coerce,
  increment i by integer 1.
  call the function warnings.warn with 2 arguments: string "OptionParser usage for Django management commands "
  data is an empty dictionary.
  add to a list result of the method uploadhandler.load_handler called with arguments handler and self,   substitute resulting list for self._upload_handlers.   property decorator,
  substitute Paginator for QuerySetPaginator.
  ignore is a lambda function with pattern as an argument, return value is the return value of the function fnmatch.fnmatchcase,
  import module warnings.
  define the method render with 2 arguments: self and context.
  for every c in lineno_comment_map dictionary value under the comment_lineno_cache key,
  sublist_item is None.
  if TypeError or ValueError exceptions are caught,
  filename and e.   split the_path at the '/' character, substitute last element of the result for used_name.
  define the method size with arguments self and name.
  define the method send_messages with arguments self and email_messages.
  substitute environ for self.META.
  substitute url for value under the self.asvar key of context dictionary.
  join bytes and self._leftover into a bytes string, substitute it for self._leftover.
  increment self.buffer by chunk.
  define the function pgettext with 2 arguments: context and message.
  if stream_or_string is instance of bytes type,
  otherwise if self.nodelist_false is true,
  call the method self.handle_startendtag with tag and attrs as the arguments.
  yield emitting as result of the generator.
  call the method self.validate_name with arguments project_name and string "project".
  if value is an instance of bool.
  derive the class PermissionDenied from the Exception base class.
  concatenate string 'templates/' and template_name, substitute the result for pkg_name.
  call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
  join printable representation of d into a string separated with ', ', for every d in self.dicts, substitute the result for dictreprs.
  try,
  python_2_unicode_compatible decorator,
  call the method parser.parse with an argument tuple with an element string 'else' and end_tag, substitute the result for nodelist_true.
  if not,
   substitute value under the PREV key of the root dictionary for last.
  raise a exception of ComandError class with string "More than one migration matches '%s' in app '%s'. Please be more specific.",
  call the method handler.endElement with an argument string 'item'.
  define the method is_hidden with an argument self.
  call the method data.items, for every k and v in the result,
  self.FILES is an instance of MultiValueDict class.
  get name attribute from the instance object, call it and return the result.
  if query is an instance of MultiValueDict class,
  call the method self.nodelist.render with an argument context, return the result.
  call the method autodetector.changes with 3 arguments: graph set to loader.graph, trim_to_apps set to app_labels,
  if self.can_delete is true and call to the method self._should_delete_form with an argument form, evaluates to true,
  if seventh element of row is true,
  if six.PY3 is boolean True,
  substitute template_dirs for self.template_dirs.
  substitute '%s' in string '%s-%s-%s' with y,m and d, return the result.
  from django.utils.functional import cached_property into default name space.
  call the method compile_func with 2 arguments self and token, substitute the result for compiled_result.
  if instance.pk is None,
  increment piece by firs element of elt.
  if length of args is not equal to integer 2,
  instantiate class Truncator, with an argument value, call the method chars on the result with 2 arguments length,
  if ImportError, renamed to e, exception is caught,
  define the function exec with 3 arguments: _code_, _globs_ set to None and _locs_ set to None.
  add model to created_models set.
  call the function force_text with first element of list_ as an argument, return the result.
  from django.db.migrations.optimizer import MigrationOptimizer into default name space.
  if return value of the method UserModel._default_manager.exists is false and value under the 'interactive' key of the options dictionary is true,
  call the method self.stdout.write with an argument string "Checking %s for fixtures...",
  if obj.pk is None, and Model has an 'natural_key' attribute, and Model._default_manager has and 'get_by_natural_key',
  if settings.USE_I18N is true,
  "%r is not a valid date" formated with date and third element of the result of the function sys.exc_info.   define the function parse_http_date_safe an argument date.
  from django.utils.encoding import force_text and filepath_to_uri into default name space.
  call the method self.source_error with 2 arguments: token.source and msg, return the result.
  try,
  join app_config.path and string 'management' into a file path, substitute it for path.
  with field_value as an argument, return the result.   define the method _handle_m2m_field_node with arguments self, node and field.
  sort current_fields elements with key being a lambda function with argument x and return value creation_counter filed of first element of x.
  skip this loop iteration.
  derive the class EmailInput from the TextInput base class.
  with all occurrences of '%s' replaced with app_name and model._meta.object_name and e, respectively.   finally perform,
  substitute tokens for self.tokens.
  decorator function register.filter with 2 arguments string "escape" and is_safe set to boolean True.
  define the method __init__ with 4 arguments: self, form, field and name.
  call the method node.getElementsByTagName with an argument string 'None', if it evaluates to true,
  call the function flatten_result with an argument item, assign the result to res and args, respectively.
  define the function save_m2m.
  if StandardError, renamed to e, exception is caught,
  delete self._get.
  if sign is contained in self.digits,
  if IndexError exception is caught,
  derive the OutputWrapper class from the object base class.
  with the result renamed to fp, perform the following:   call the method fp.write with an argument msgs.
  substitute __import__ for importer.
  call the self.convert method with s, self.decimal, self.decimal_digits and self.sign as arguments, assign the result to the neg and value, respectively.
  if data is not None or FILE_INPUT_CONTRADICTION,
  from django.utils.encoding import force_text into default name space.
  raise an DisallowedHost exception with an argument msg.
  if parse_until is true,
  call the method self._archive.close.
  define the method add_arguments with self and parser as arguments.
  otherwise if value is an instance of datetime.date,
  get '_filter_name' attribute of the func object, if it exists, substitute it for filter_name, if not, filter_name is None.
  use global variable _default.
  define the method get_template_source with 3 arguments: self, template_name, template_dirs set to None.
  call the function iri_to_uri with an argument url, substitute the result for self.url.
  raise an AttributeError with an argument string "%s could not be imported ", formated with self.name.
  define the function conditional_content_removal with request and response as the arguments.
  if not,
  call the method next with an argument bits, substitute the result for bit.
  try,
  call the self.style.HTTP_BAD_REQUEST with an argument msg, substitute it for msg.
  zbuf is an instance of BytesIO class.
  unpacked dictionary daemon_kwargs.   if value under the 'pidfile' of options dictionary exists,
  append name to string 'add_' use it as the name of the attribute to get from object self, call the result as an function,
  break from the smallest enclosing loop execution.
  define the function get_ns_resolver with arguments ns_pattern and resolver.
  if six.PY3 is true,
  split value into words, return the length of the result.
  and string 'ascii' and call the function to_bytes with 2 arguments: value and string 'latin-1',   join the previous 2 results into a string, separated by ': ', append it to a list, substitute the resulting list for headers.   join headers into a string, separated by string '\r\n'.
  return an instance of NodeList class.
  increment weight by integer 2.
  define the function import_library with an argument taglib_module.
  call the function bytes with an argument self, divide the result with rhs and return the reminder of the division.
  if self._content_length equals integer 0,
  unique_check is a list with elements field, for every field in unique_check if field is not equal to self.fk.name.
  call the function six.reraise with 3 arguments: ImproperlyConfigured, instance of ImproperlyConfigured class created with msg,
  define the method __getinitargs__ with an argument self.
  for every attr in self.rendering_attrs,
  define the method get with 3 arguments: self, header and alternate set to None.
  if self has an attribute '_body',
  define method __init__ with self class instance, mode string 'w+b', bufsize set to integer -1, suffix and prefix set to empty strig,
  try,
  call the method self._lock, with the result,
  for every i in range of integers from 0 to length of result, not included,
  from django.core.management.templates import TemplateCommand into default name space.
  call the executor.loader.get_migration_by_prefix with app_label and migration_name with arguments, substitute the result fr migration.
  EndToken is an instance of EndToken class.
  from django.utils.ipv6 import is_valid_ipv6_address into default name space.
  try,
  if mail doesnt have an 'outbox' attribute,
  if key exists, substitute it for self.key, if not substitute settings.SECRET_KEY for key.
  if self.verbosity is greater than integer 0,
  try,
  raise an self.error with 2 arguments: None and string "Unclosed tags: %s ",
  if port exists substitute it for self.host, if not substitute settings.EMAIL_PORT for self.port.
  from django.core.urlresolvers import reverse, NoReverseMatch.
  derive the class Template form the base class object.
  add integer 1 to it, substitute the result for space.   if space equals integer 0,
  guid_attrs is an empty dictionary.
  compile regular expression based on the string '\s*,\s*' and assign the result to cc_delim_re.
  requires_system_checks is boolean False.
  call the method os.umask with an argument umask.
  if key is not contanied in self,
  key is a list with elements of list key from length of self.prefixes index to the end,
  yield choice.
  if key starts with self.prefix.
  if whitelist is not None
  raise an TemplateSyntaxError exception with an argument string "second argument to 'regroup' tag must be 'by'".
  if name equals a string 'regex',
  value under the 'unique' key of the extra_params dictionary is boolean True,
  call the function mark_safe with an argument arg, append it to arg_vals.
  call the handle_filed method of the base class of the Serializer class, with arguments obj and field.
  join lineno_comment_map dictionary value under the comment_lineno_cache key into a string, separated with ' | ',
  if not, substitute self.auto_id for id_.   call the method widget.id_for_label with an argument id_, return the result.
  call the function pickle.dumps with value and pickle.HIGHEST_PROTOCOL as the arguments, substitute the result for pickled.
  skip this loop iteration,
  substitute nonlocal_root for a tuple with an element root.
  call the function normalize_newlines with an argument value, substitute the result for value.
  convert arg to an integer, substitute it for p.
  define the method build_absolute_uri with an arguments self and location set to None.
  return filenames.
  return an empty string,
  define the function compare_ordering_key with an argument k.
  set the file pointer at the beginning of the self.file file.
  get the value under formatter key of dictionary under 'formatters' key of self.config dictionary, substitute the result for formatter.
  if not,
  if field.rel.to._default_manager has an attribute 'get_by_natural_key',
  return self._post and self._files.
  label is an empty string.
  define the method load_template with 3 arguments: self, template_name and template_dirs set to None.
  help is a string, "Prints the custom table modifying SQL statements for the given app name(s).".
  return nothing.
  substitute RemovedInDjango19Warning for RemovedInNextVersionWarning.
  call the function add_to_builtins with an argument string 'django.template.defaulttags'.
  in the previous result for with string '\n', substitute the result for eol_message.   get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.
  from itertools import chain into default name space.
  if data is not an instance of basestring,
  if index is not None,
  return value under the 'wsgi.url_scheme' key of self.environ dictionary.
  define the function get_wsgi_application.
  and app_or_project if app_or_project equals to string 'app', if not, it is replaced with 'a' and app_or_project.   call the method re.search with 2 arguments: raw string '^[_a-zA-Z]\w*$' and name, if it evaluates to false,
  for every dict_ in self.dicts,
  define the method __repr__ with an argument self.
  if self.is_bound is true and self.errors is false, return boolean True, otherwise return boolean False.
  derive the class MultipleHiddenInput from the HiddenInput base class.
  call the key.lower method for every key in self.extra_headers, join the results into a header_names.
  raise an ViewDoesNotExist exception with an argument string "Could not import '%s'. View does not exist in module %s.",
  and format, call the method date on the result, return the result.   derive the class TimeField from the base class BaseTemporalField class.
  substitute title for sublist_item.
  call the method __init__ from the base class of the class CheckboxChoiceInput, with 2 arguments: unpacked list args,
  delete the value under key key of self._expire_info.
  string 'A secure pseudo-random number generator is not available on your system. Falling back to Mersenne Twister.'.   using_sysrandom is boolean False.
  import fcntl.
  from django.db import connections,  DEFAULT_DB_ALIAS and migrations into default name space.
  if settings.DEBUG_PROPAGATE_EXCEPTIONS is True,
  self.error_class called with an argument error_class set to string 'nonfield'.   define the method _raw_value with 2 arguments: self and fieldname.
  define the method I with an argument self.
  subtract year from integer 2000, divide the result by integer 28, floor the result, multiply it with 28 and increment by year,
  from django.core.management.utils import handle_extensions into default name space.
  in the string '%s. You passed in %r (%s)' replace every %s with original and type of the object self.obj as strings, respectively,
  if field_desc doesnt end with '(',
  zfile is an instance of GzipFile class, created with 3 arguments: mode set to string 'wb', compresslevel set to integer 6,
  return result.
  try,
  if six.PY3 is true,
  join comment elements into a string, substitute it for content.
  append data to self.children.
  hard copy list self.dicts to duplicate.dicts.
  call the method self._get_to_python with an argument pk_field, substitute the result for to_python.
  format_html_join, called with 3 arguments: empty string, string '<li>{0}{1}</li>', tuple containing tuples with 2 elements:   k and result of the function force_text with an argument v, for every k and v in items of the dictionary self, return the result.   define the method as_text with an argument self.
  call the method logger.addHandler with an argument handler.
  remove kwargs dictionary element under the 'method' key, substitute it for method.
  define the function do_for with 2 arguments: parser and token.
  append self.msguniq_options to a list containing a string 'msguniq', append list containing potfile to the result, substitute it for args.
  call the x.split method with arguments: character '=' and integer 1, store the result in k and v, respectively.
  doublecolon_start is integer -1.
  define the method management_form with an argument self.
  self._unget_history is an empty list.
  if self has an '_get' attribute,
  call the method template_file.read, substitute it for content.
  if app_config.path is true,
  return default.
  from logging import _checkLevel.
  return kwargs.
  return a tuple with 3 elements: TYPE, outdict and stream.
  call the function convert_old_style_list with an argument value, substitute the result for value and converted, respectively.
  call the method formfield_callback with 2 arguments: f and unpacked dictionary kwargs, substitute the result for formfield.
  html_class_attr is an empty string.
  define the method handle with 2 arguments: self and unpacked dictionary options.
  increment self.position by length of output.
  compile regex from a string '\\(.)', substitute it for re_escaped.
  format_key is a string 'DATETIME_INPUT_FORMATS'.
  define the method chunks with arguments self ad chunk_size set to None.
  return value.
  special_floats is an list with 3 elements, pos_inf, neg_inf and nan, all converted to strings.
  do nothing.
  try,
  requires_system_checks is boolean False.
  substitute '%s' from string "<%s: %s (%s)>" with self.__class__.__name__, self.name and self.content_type, respectively, use it as an argument for the call to the function force_str, return the result.
  substitute value under the key key of self dictionary for val.
  if pattern equals '*' or pattern starts with '.' or pattern equals host, and only if:
  break from the loop execution.
  substitute definition for value under the role key of palette dictionary.
  define the function sql_custom with 3 arguments: app_config, style and connection.
  if value under the index key of the hextets dictionary equals to string '0',
  call the method base.build_instance with arguments Model, data and self.db, substitute the result for obj.
  import module django.core.checks.compatibility.django_1_7_0.
  f _serializers is false,
  from django.template.debug import DebugLexer and DebugParser.
  'Database state will be brought to the state after that migration.' as arguments.   call the method parser.add_argument with string '--noinput', action containing string 'store_false', dest set to string 'interactive',
  convert processors into a tuple and substitute it for processors.
  derive the class FileField from the base class Field class.
  from django.utils.functional import Promise into default name space.
  convert key and default to strings, get the value under the key string key of the environ dictionary, if it does not exists use the,
  define the method __init__ with argument self, server and params.
  if self.connection is None,
  define the method __html__ with an argument self.
  call the method m.groups, use the first element of the result as key for obtaining value from self.config dictionary,
  use the app_config, style and connection as arguments for the call to the sql_create, sql_custom and sql_indexes functions,  append the results respectively, return the result.
  return errors.
  return value.
  get the value under the key 'only' of the options dictionary, if it exists substitute the result for isolated_context,
  self.fed is an empty list.
  call the method self.queryset.none, return the result.
  and e.level is lesser than checks.WARNING and result of the method e.is_silenced in false.   append e to warnings list for every e in all_issues, if checks.WARNING is lesser than or equal to e.level,
  s is an instance of MLStripper class.
  define the method _get_choices with an argument self.
  convert ip_str to lowercase, if it doesnt start with a string '0000:0000:0000:0000:0000:ffff:',
  convert d into a integer, subtract d from it, substitute the result for m.
  excluded_apps is an empty set.
  if value under the 'outlog' key of options dictionary is true,
  define the method _get_media with an argument self.
  if not,
  register.tag decorator,
  do nothing.
  call the method router.get_migratable_models with arguments app_config and connection.alias.
  if self.setting is true,
  for every node in compiled_parent.nodelist,
  substitute offset.seconds for offset.
  assign the result to the sql and references, respectively.   add model to seen_models set.
  call the method self.choice with an argument obj, yield the result.
  if 'fields' attribute of Meta object is None and 'exclude' attribute of Meta object is None,
  if bits is false,
  if not,
  do nothing,
  if value is contained in self.empty_values,
  call the method serializers.get_public_serializer_formats, substitute the result for self.serialization_formats.
  substitute self.choices for self.widgetchoices.
  m2m_value is an lambda function with value as an argument, return value is the result of the method value.natural_key.
  decorator register with argument Tags.compatibility.
  call the method connection.ops.sequence_reset_sql with 2 arguments self.style and models, substitute the result for statements.
  substitute key for result.key.
  substitute first element of fks_to_parent for fk.
  substitute TemplateDoesNotExist for self.find_template_cache dictionary value under the key key.
  inplural is boolean False.
  substitute '%d' with self.loaded_object_count, self.fixture_object_count and self.fixture_count.   define the method load_label with self and fixture_label as arguments.
  call the __init__ method from the base class of the WSGIServer class, with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  substitute elements of s from the end index to end for s.
  basedirs is a list containing tuple with strings, 'conf/locale' and 'locale'.
  define the function do_extends with 2 arguments parser and token.
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  try,
  for every p in parts without the first element,
  call the function safe_join with 2 arguments template_dir and template_name, yield the result.
  from django.core.serializers.python import Deserializer as PythonDeserializer into default name space.
  call the function six.iteritems with an argument kwargs, for every k and v in the result,
  call the method form.save_m2m.
  define the method errors with an argument self.
  skip this loop iteration.
  self.regexes is an empty dictionary.
  if integers 3 and 2 in a tuple are smaller than the sys.version_info and sys.version_info is smaller than integers 3,4 and 4 in a tuple, respectively,
  fill_to is an integer 7.
  define the function localize_input with 2 arguments value and default set to None.
  if value is not an instance of list or tuple types,
  for every x in sequence of integers from 0 to 7.   background is a dictionary created with elements: x appended to a string '4' for value under the key x of color_names dictionary,
  self.to is an empty list.
  raise an SignatureExpired exception with an argument string 'Signature age %s > %s seconds', where '%s' is replaced by age and max_age, respectively.
  for every d in deps, if d is not contained in models and d is contained in model_list add boolean True to a tuple,
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  substitute the result for result.   call the function _long_to_bin with 2 arguments: result and hex_format_string, return the result.
  define the method write_items with 2 arguments: self and handler.
  call the BaseConverter function with BASE2_ALPHABET as argument, store the result in base2.
  call the method widget_attrs with an argument widget, from the base class of the DecimalField class, substitute the result for attrs.
  call the method self.fields.items, for every name and field in result,
  if self.output_transaction is true,
  wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " FAKED" as a argument.
  states is a dictionary with 2 arguments: appended list with an element instance of a class Tok, created with 3 arguments: "punct",
  try,
  get the value from the options dictionary under the key 'traceback', substitute it for self.show_traceback.
  define the method __len__ with an argument self.
  close the file object.
  if sys.platform starts with string 'java',
  find first index of whitespace occurrence in line, add integer 1 to it, substitute the result for space.
  call the function timedelta with an argument seconds set to negative _time.timezone, substitute the result for self.STDOFFSET.
  call the method self.tzname with an argument dt, substitute the result for self._tzname.
  where '%s' is replaced with taglib_module.   templatetags_modules is an empty list.
  call the method settings.configure with an argument USE_I18N set to boolean True.
  derive the class Critical from base class CheckMessage.
  if the key doesnt exists substitute boolean False for self.use_natural_keys.   if self.use_natural_keys is true,
  convert number into an integer and substitute it for number
  define the method to_python with arguments self and value.
  call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 4 entries:
  return statements.
  current_fields is an empty list.
  substitute media.__dict__ for media_attrs.
  define the method __init__ with 10 arguments: self, subject set to an empty string, body set to an empty string,
  if not,
  increment nesting by one.
  call the method datetime.datetime.strptime with 2 arguments: return value of the function force_str called with an argument value,
  delete Trans.
  break the execution of the smallest enclosing loop.
  append block to the value under the name key of self.blocks dictionary.
  call the function lazy with 2 arguments: gettext and str, substitute gettext_lazy.
  call the function force_str with an argument signature, return the result.
  define the function get_serializer_formats.
  derive the class InclusionNode form the base class TagHelperNode.
  call the method self.as_ul, return the result.
  from django.core.management.base import BaseCommand and CommandError into default name space.
  derive the class BaseFormSet from the object base class.
  call the method render from the base class of the class FileInput, called with 3 arguments: name, None and attrs as attrs.
  substitute exception for self.exception.
  if label_suffix is not None substitute label_suffix for self.label_suffix,
  call the add_argument method on parser object, use string '--database', default set to DEFAULT_DB_ALIAS and help set to string,
  make a directory named original_path.
  for every s in strings, call the function force_text with an argument s, join the results in a string, return the result.
  call the method self.configure_root with an argument root.
  from collections import OrderedDict into default name space.
  if app_output is true,
  return string 'StopUpload: Consume request data, then halt.'.
  for every f in files,
  return settings.DEBUG.
  take subject elements from p-th to i-th index, substitute it for s.
   with self.mutex perform,
  call the method self._stream.read with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  output_transaction is boolean True.
  raise an TemplateSyntaxError exception with an argument string "'%s' is not a valid tag library: %s",
  value is an empty string.
  encode is an lambda function with 2 arguments k and v, return value is the result of the function urlencode, called with an argument:
  import module time.
  if new is None,
  raise self.warning.
  call the method match.groupdict, substitute the result for kw.
  define the method dumps with arguments self and obj.
  call the function _trans.deactivate, return the result.
  convert max_value into an floating point number, substitute it for max_value.
  if not,
  widget.is_localized is boolean True.
  import module types.
  for every code in tuple with 2 elements: lang_code and generic_lang_code,
  define the method prepare_value with 2 arguments: self and value.
  option_value is an empty string.
  definition is an empty dictionary,
  return self.id.
  callback is an lambda function with an argument response and with return value result of the method middleware.process_response,
  self.deleted_objects is an empty list.
  if obj is an instance of datetime.datetime,
  substitute space for sep.
  message_context is None.
  define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
  from __future__ import unicode_literals into default name space.
  replace every occurrence of '\t' in s with '\\t'.
  answer is None.
  if data is true,
  call the function urlsplit with an argument location, substitute the result for bits.
  register.tag decorator,
  if TypeError or VariableDoesNotExist exceptions are caught,
  last element of result is an instance of Choice class, created with an argument list with 2 elements: None and last element of result.
  substitute value under the name key for bf.
  call the method self.can_read.acquire.
  call the method self.xml.endElement with an argument string 'field'
  if the key doesnt exists use sys.stdout as an argument.   if value under the 'no_color' key of the options dictionary.
  convert priority into a floating point integer, substitute it for priority.
  call the method self.find_template with 2 argumetns: template_name and template_dirs, assign the result to template, origin, respectively.
  call the method self.run_validators with an argument out.
  self._namespace_dict is an empty dictionary.
  if IndexError exception is caught,
  for every path_to_remove in self.paths_to_remove,
  define the method error with 3 arguments: self, token and msg.
  call the function force_bytes with an argument salt, substitute the result for salt.
  if initial_forms is grater than self.max_num is grater or equal to integer 0,
  return boolean False.
  if not,
  break the loop execution.
  get_format called with an argument string 'TIME_INPUT_FORMATS', substitute the result for format.   call the method value.strftime with an argument format, return the result.
  import module cgi.
  join base an unpacked list paths into a string, get the absolute path in unicode representation of the result, substitute the result for final_path.
  status_code is an integer 405.
  for every x in self.fields call the method x.__deepcopy__ with an argument memo, put the result into a tuple, substitute it for result.fields.
  call the method command.stdout.write with an argument errors.
  increment self.waiting_writers by integer 1,
  if not,
  for every i in sequence of integers, from 0 to the result of the method self.total_form_count,
  otherwise if value is not an instance of list ot tuple type,
  if app_list_value is not None,
  raise an TemplateSyntaxError exception with an argument string "Only 'silent' flag is allowed after cycle's name, not '%s'.",
  if not,
  return wrapped.
  for every i in sequence of integers, from 0 to the result of the method self.total_form_count,
  get the value under the key 'DJANGO_COLORS' of os.environ dictionary, if key doesnt exists return empty string, assign the result to DJANGO_COLORS.
  do nothing.
  substitute _iterkeys for keys.
  if stream_or_string is an instance of six.string_types type.
  replace all the occurrences of '__' with '_' in new_name.
  call the method self._create_mime_attachment with unpacked list alternative as an argument, use the result as an argument for the call to the msg.attach method.
  call the method get_supported_language_variant.cache_clear.
  endless loop,
  from django.core.management.sql import check_for_migrations into default name space.
  substitute cls.__bytes_cast for cls.__str__.
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  call the method self.configure_custom with an argument config, substitute the result for result.
  try,
  return value under the key key of d dictionary.
  for every i and handler in enumerated iterator self._upload_handlers,
  return kwargs.
  call the function conditional_escape with an argument arg, call the method join on the result with an argument value,
  define the method add_arguments with self and parser as arguments.
  try,
  try,
  define the function ngettext with 3 arguments: singular, plural and number.
  substitute schemes for self.schemes.
  do nothing.
  return input_val.
  call the threading.local method, assign the result to trans_real._active.
  if HTMLParseError or UnboundLocalError exceptions are caught,
  return singular_suffix.
  from django.utils.translation import ugettext_lazy into default name space.
  if call to the function contains with 2 arguments: last element of result and Group, evaluates to true,
  derive the class ErrorList from the UserList and list base classes.
  dest as a string 'no_obsolete', default as boolean False and help as a string "Remove obsolete message strings.".   call the method parser.add_argument with 5 arguments: string '--keep-pot', action as a string 'store_true',
  call the method self.loaddata with an argument fixture_labels.
  call the timestamp.strftime with string '%Y%m%d%H%M%S' as an argument, substitute the result for changeset.
  define the method lex with 2 arguments self and text.
  and e.level is lesser than checks.WARNING and result of the method e.is_silenced in false.   append e to errors list for every e in all_issues, if checks.ERROR is lesser than or equal to e.level,
  call the method time.localtime with an argument stamp, substitute the result for tt.
  from django.core import checks into default name space.
  call the method MONTHS.index with 6 arguments: year, month, day, hour, min and sec, substitute the result for result.
  return self._cached_loaders.
  from django.template.loader import BaseLoader into default name space.
  from django.utils.module_loading import import_string into default name space.
  errors is an empty list.
  derive the class Library form the base class object.
  define the method filter with 2 arguments: self and record.
  data is an empty list.
  call the function escape with an argument text, return the result.
  from django.template.loader import BaseLoader into default name space.
  call the method self._setup.
  if safe_input is true,
  define the method __init__ with 3 arguments: self, template_string and origin.
  covert to string value under the 'unique_id_is_permalink' key of the item dictionary, convert it to lowercase,
  for every opening and closing in WRAPPING_PUNCTUATION,
  substitute opts for value under the 'opts' key of definition dictionary.
  raise an ValidationError with 2 arguments: value under the 'empty' key of the self.error_messages dictionary and code set to 'empty'.
  define the method configure_custom with 2 arguments: self and config.
  if StopIteration exception,
  if max_num is None,
  streaming is boolean False.
  call the function self._new_gnu_trans with an argument localedir, substitute the result for translation.
  if e doesnt have an 'django_template_source' attribute,
  yield node.
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  otherwise if length of app_labels is greater than integer 1,
  return j.
  from django.conf import settings into default name space.
  derive the class RequireDebugFalse from logging.Filter base class.
  call the method handler.addQuickElement with 2 arguments: string 'comments' and value under the 'comments' key of the item dictionary.
  if six.PY2 is true,
  otherwise if auto_id is true,
  return an dictionary containing 1 entry: settings.MEDIA_URL for 'MEDIA_URL'.
  define the method resolve_context with 2 arguments: self and context.
  otherwise if name is not None and compile_function is None,
  from django.utils.encoding import force_text into default name space.
  return value under the key key of dictionary in last element of self.dicts.
  import module warnings.
  if m is true,
  if leading is true,
  self._cached_loaders is an empty list.
  if path_info is empty,
  sort the result and substitute it for options.   for every option in options,
  delete the _serializers dictionary entry at the format key.
  value under f.name key of the dta dictionary is an empty list.
  from django.utils.encoding import smart_text and is_protected_type into default name space.
  call the __init__ method from the base class of the class ValidationError with arguments message, code and params.
  otherwise if field_type equals a string 'IntegerField(' and connection.features.can_introspect_autofield is false,
  if 'date' is not in header_names,
  from django.conf import settings into default name space.
  with the result,   evaluate method connection.cursor, with return value as curs,
  property getter decorator,
  call the method text.__html__, return the result.
  initial is an empty list.
  append node to nodelist.
  call the method _trans.ungettext with 3 arguments singular, plural and number.
  if self._num_pages is None,
  increment length of boundary by integer 6, substitute the result for self._rollback.
  decorator function lru_cache.lru_cache with an argument maxsize set to integer 1000.
  define the method __init__ with 7 arguments: self, request, dict_ set to None, processors set to None, current_app set to None,
  if not,
  decorator function register.filter with an argument is_safe set to boolean False.
  derive the class DictConfigurator from the BaseConfigurator base class.
  import rlcompleter.
  call the method self.flo.read with an argument self.chunk_size, substitute the result for data.
  call the method apps.get_app_config with an argument app_lable, for every app_label in app_labels, append the results to app_configs list.
  define the method __iter__ with an argument self.
  breaks from the smallest enclosing loop execution.
  register.tag decorator,
  remove first element of text.
  append it to the string "  Target specific migration: ", use it as the argument for the call to the self.style.MIGRATE_LABEL method,   call the self.stdout.write method with previous return value as an argument.   if run_syncdb and executor.loader.unmigrated_apps is true,
  append a tuple with 2 elements: f and f with first occurrence of the path replaced with an empty string, to self.choices.
  return boolean False.
  from django.core.files.base import File into default name space.
  for every f in opts.fields,
  add set to DEFAULT_DB_ALIAS and help is 'Nominates a specific database to dump fixtures from. Defaults to the "default" database.'.   call the method parser.add_argument with 6 arguments: string '-e', string '--exclude', dest set to 'exclude', action set to 'append',
  subclass is a instance of a class named Migration, derived from the base class Migration, with 1 field:
  return self.objects.
  skip this loop iteration.
  remove entry under 'render' key of the kwargs dictionary and substitute it for renderer, if the key doesnt exists, renderer is None.
  call the method settings._setup.
  return the value under the language_code key of the self._app_dict dictionary.
  call the method g.flatten with arguments self and unixfrom set to unixfrom.
  substitute the result for self.literal.   if ValueError exception is caught,
  call the function local, substitute the result for _prefixes.
  call the method parser.add_option with 3 arguments: string '--traceback', action set to a string 'store_true',
  substitute _itervalues for itervalues.
  from django.utils import six and lru_cache into default name space.
  if first element of str_number equals a string '-'.
  with 3 arguments: data, files and return value of the function self.clear_checkbox_name called with an argument name,   evaluates to true,   if upload is true,
  from django.core.management.base import AppCommand into default name space.
  all_locales is an empty string.
  from copy import copy into default name space.
  call the method handler.endElement with an argument string 'channel'.
  if striped x by '.' character is not contained in ignored, for every x in ext_list put x into a set, return the resulting set.
  if value is None,
  if not,
  derive the class AppRegistryNotReady from the Exception base class.
  or if it doesnt exists if exclude is None.   raise an ImproperlyConfigured with an argument string "Calling modelformset_factory without defining 'fields' or 'exclude',
  if IOErro, renamed to e, exception is caught,
  from importlib import import_module.
  define the function sql_destroy_indexes with 3 arguments: app_config, style and connection.
  substitute app_template_dirs for template_dirs.
  define the method render with 2 arguments self and context.
  subtract integer 12 from self.data.hour, return the result.
  from django.utils import six into default name space.
  define the method inner_run with 3 arguments: self, unpacked list args and unpacked dictionary options.
  try,
  if self is not contained in context.render_context,
  substitute bytes for binary_type.
  msgid is a string '<%s.%s.%s%s@%s>', replace '%s' with utcdate, pid, randint, idstring and idhost, respectively.
  call the function get_template_from_string with 3 arguments: template, origin and template_name, substitute the result for template.
  call the function get_commands, substitute the value under the name key of the return value, for app_name.
  call the method __init__ from the base class of EmailBackend class, with arguments: unpacked list args and unpacked dictionary kwargs.
  call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw,
  def initialization method __init__ with self class instance, stream, limit and buf_size set to integer value of the product 64*1024*1024.
  elt is an list with an element elt.
  delete entry under the oldkey key of the cache dictionary.
  if settings.MANAGERS does not exist,
  use_func is boolean False.
  define the function truncatewords_html with 2 arguments value and arg.
  return an instance of SafeBytes, created with an argument s.
  MONTHS is a list with 12 elements: strings 'jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', and 'dec'.
  define the method __repr__ with an argument self.
  for every field in unique_check, if field is contained in form.cleaned_data.   create a generator that for every d in row_data, if d has an '_get_pk_val' attribute,
  define the method __copy__ with an argument self.
  append string '.moves' to __name__, use it as an argument to instantiate _MovedItems class, assign it to moves,
  substitute the '%s' in the string "The view %s.%s didn't return an HttpResponse object. It returned None instead.",
  decorator lru_cache.lru_cache with an argument maxsize set to None.
  for every cat in value under the 'categories' key of the self.feed dictionary.
  return self.connection.
  for every arg in args,
  define the method add_arguments with 2 arguments: self and parser.
  if escaped is true,
  derive the class HTMLParser from the base class HTMLParser located in the module _html_parser.
  subject is an string '%s (%s IP): %s', formated with record.levelname, string 'internal' if value under the 'REMOTE_ADDR' key,
  substitute _iteritems for iteritems.
  endless loop,
  output is an empty list.
  call the function self.path with argument name, use the result as an argument for the call to the function os.path.getctime,
  substitute error.message for message.
  define the method __call__ with arguments self and value.
  if LookupError exception is caught,
  define the function request with an argument request.
  self.cleaned_data is an empty dictionary.
  tpl is an string "EntitiesForbidden(name='{}', system_id={!r}, public_id={!r})".
  remove the first element from self.command_stack, assign the result to command and source, respectively.
  call the method parser.delete_first_token.
  try,
  return result.
  define the method __init__ with arguments self, name, value, base, sysid, pubid and notation_name.
  call the function forbid_multi_line_headers with 3 arguments: name, val and self.encoding, substitute the result for name and val, respectively.
  from django.utils import six into default name space.
  substitute it for localedir.   use_null_fallback is boolean True.
  if not,
  from django.utils.translation import ugettext_lazy as _ into default name space.
  raise an ValueError exception with an argument string 'Unable to configure filter %r: %s' formated with name and e.
  decrement self.active_readers by integer 1,
  call the method self.remove_potfiles.
  derive the class LazyObject from the object base class.
  import module zlib.
  if msg is true,
  substitute registry.run_checks for run_checks.
  if self.cmd._called_from_command_line is true,
  call the function get_mod_func with an argument lookup_view, store the result in mod_name and func_name, respectively.
  if not,
  for every e in errors convert e into a string and append it to a string '  * ',
  if CommandError exception is caught,
  if not,
  get the absolute file path of the expanded_template, substitute it for absolute_path.
  if not,
  otherwise if action equals to string "unapply_success".
  import msvcrt.
  substitute kwargs for self.kwargs.
  from __future__ import unicode_literals into default name space.
  call the function get_tag_uri with 2 arguments: values under 'link' and 'pubdate' keys of item dictionary, substitute the result for unique_id.
  slice the rawdata string from the k-th to the endpos-th index, remove the whitespaces from the start and the end of the string, substitute it for end.
  if self.errors is true and self.form has an attribute 'error_css_class',
  substitute text_kwargs for candidate_subs.
  loader is an instance of MigrationLoader class, created with an argument connection.
  for every model in not_installed_models,
  from __future__ import unicode_literals into default name space.
  return unbound.
  raise an MultiPartParserError with an argument string 'Invalid boundary in multipart: %s' is replaced with boundary.
  if arg is smaller than integer 1,
  format string '%+03d:%02d' with hour and minute, append it to time_str, return the result.
  if s is an instance of an object Promise.
  get the value under the ext key of the extension_map dictionary, substitute it for cls.
  initial is an empty list.
  import module os.
  return value.
  substitute c for factory.
  and integer 60, substitute the result for timezone.   divide timezone by integer 60, substitute the quotient of the division for hour and reminder for minute.
  sub_ul_renderer is an instance of ChoiceFieldRenderer class, created with 4 arguments: name as self.name, value as self.value,
  substitute member.name for name.
  define the method end_serialization with an argument self.
  if pop_context is true,
  try,
  try,
  call strip s of the surrounding whitespaces, substitute every occurrence of the whitespace in the trim_whitespace_re with previous result, return the result.
  call the method self.handle_uncaught_exception with request, resolver and return value of the function sys.exec_info as the arguments.
  return the list, containing 4 elements: an empty string, string "    class Meta:", string "        managed = False",
  strip message_context of '"' characters from both ends, substitute the result for message_context.
  define the function write_pot_file with 2 arguments potfile and msgs.
  try,
  import module sys.
  call the function pickle.dumps with argument value, use the result and integer -1 as arguments for the call to the function zlib.compress, use the result as an argument for the call to the f.write method.
  call the getvalue method of the base class of the PythonSerializer class, return the result.
  if value under the 'microsecond' key of the kw dictionary is true,
  if value under the 'debug' key of options dictionary is not None, substitute it for value under the 'debug' key of wsgi_opts dictionary.
  substitute first element of loader for loader and loader without the first element for args.
  do nothing.
  if six.text_type is contained in resultclasses, cls._delegate_text is boolean True, otherwise it is boolean False.
  substitute nonlocal_root for tuple root.
  if indent is true,
  define the method __init__ with 2 arguments: self and timezone.
  return ret.
  raise an CommandError exception with an argument string 'Unknown model in excludes: %s', where '%s' is replaced with exclude.
  derive the class BadSignature from the Exception base class.
  if setting has an "SERIALIZATION_MODULES" attribute,
  check if lowercase header_query exists is existing_headers, return the boolean result.
  define the function u with an argument s.
  call the function smart_text with argument key_value, use the result as an argument for the call to the self.xml.characters method.
  if id_ is true id_attr set to return value of the function format_html, if not id_attr set to an empty string,   content set to result of the function mark_safe with an argument: string created by joining elements of outputs, with '\n' separator,   return the result.   derive the class RadioFieldRenderer from the ChoiceFieldRenderer base class.
  warning is a string 'ImmutableList object is immutable.'.
  raise an ImproperlyConfigured exception with argument string '"%s" is not a valid regular expression: %s',
  if not,
  substitute _iterkeys for __iter__.
  raise an StopIteration exception,
  if not,
  from django.template.loader import get_template into default name space.
  if ext is true,
  for every bit in bits,
  if self._validate_unique is true,
  return nothing.
  if locale is not false or None, substitute it for locales, otherwise substitute all_locales for locales.
  for every widget in self.widgets:,
  append value to the self.sign, return the result.
  and elements of parse_until joined into a string, separated by string ', '.   raise an self.source_error exception with 2 arguments: source and msg.
  derive the class Serializer from the PythonSerializer base class.
  try,
  call the method self._create_attachments with argument msg, return the result.
  from django.utils.timesince import timesince and timeuntil into default name space.
  if not,
  name appended to string '_', as the name of the attribute to get from other object, or if the previous doesnt exist, None.   return combined.
  output_transaction is boolean False.
  if s is an instance of bytes or Promise and s._delegate_bytes is true,
  if not,
  substitute field_name for old_field_name.
  _meth_func is a string "__func__".
  define the method __iter__ with an argument self.
  call the method __init__ from the base class of the class SortedDict.
  call the method value.serializable_value with an argument self.to_field_name, return the result.
  call the method os.unlink with an argument pot_path.
  replace '%s' in string 'ignoring file %s in %s\n' with filename and dirpath, write it to self.stdout.
  bad_app_labels is an empty set.
  derive the class BaseInlineFormSet from the BaseModelFormSet base class.
  if self.id is contained in settings.SILENCED_SYSTEM_CHECKS return boolean True, False otherwise.
  raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.
  define the function next_char with an argument input_iter.
  remove 3 elements from r starting at the index 23.
  call the method datetime_safe.new_datetime with an argument date, substitute the result for date.
  derive the class CommandError from the base class Exception.
  for every form in self.forms append form to a list, if function form.is_valid evaluates to true,
  substitute hashlib.sha256 for digest.
  define the method send_messages with arguments self and email_messages.
  if plan is not true,
  return self._size.
  get the value under the 'database' key of the options dictionary, use it as the key to get the value from the connections dictionary, substitute the result for connection.
  derive the CommandParser class from the ArgumentParser base class.
  try,
  if bits is true and kwarg_format is false,
  from django.utils.itercompat import is_iterable into default name space.
  call the function t.render with an argument context, return the result.
  define the method c with an argument self.
  call the method formats.sanitize_separators with an argument value, substitute the result for value.
  return FormSet.
  derive the class RawPostDataException from the base class Exception.
  call the method tpl.format with an arguments self.name, self.sysid and self.pubid.
  call the method self.data.tzinfo.tzname with an argument self.data, if it is true, return it, otherwise return an empty string.
  call the emit_pre_migrate_signal with create_models, self.verbosity, self.interactive. connection.alias as arguments.
  call the sio.readline method with size as an argument, substitute the result for line.
  property decorator,
  num is an integer 0.
  insert mw_instance.process_response at the beginning of self._response_middleware.
  if six.PY2 is boolean True,
  derive the class BaseLoader from the object base class.
  raise an TemplateSyntaxError exception with an argument string "'autoescape' argument should be 'on' or 'off'".
  FIELD is a field".
  call the function sql_indexes with app_config, self.style and connection as arguments, store the result in statements.
  from io import BytesIO into default name space.
  if not,
  self.verbatim is boolean False.
  dest set to string 'verbosity', default set to string '1', type set to int, choices is a list, containing integers: 0, 1, 2 and 3,   call the method parser.add_option with 2 arguments: string '--settings' and help as a string 'The Python path to a settings module,  e.g. "myproject.settings.main". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.'
  derive the class SafeMIMEMessage from the MIMEMixin and MIMEMessage base class.
  define the method close with argument self.
  from __future__ import absolute_import into default name space.
  format key is an empty string.
  define the method has_previous with an argument self.
  call the method check_for_language.cache_clear.
  return nothing.
  derive class MovedAttribute from the _LazyDescr base class.
  join elements of hextets into a string, separated with ':', substitute it for result.
  if not,
  join elements of tags into a string, separated with '|', format string '(%s)' with it, substitute the result for tags_re.
  'Enter a number.' for 'invalid'.   define the method to_python with arguments self and value.
  raise an TemplateSyntaxError exception with an argument string "Named cycle '%s' does not exist", where '%s' is replaced with name.
  replace all the '%s' occurrences with migration_name and app_label, respectively.   target is a list containing tuple with two elements app_label and migration.name.
  if app_label is not contained in executor.loader.migrated_apps,
  try,
  _standard_context_processors is None.
  ORDERING_FIELD_NAME is a string 'ORDER'.
  call the method parser.compile_filter with an argument bit, append the result to args.
  define the method utcoffset with 2 arguments self and dt.
  append string ".moves.urllib_robotparser" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for robotparser.
  call the method references_to_delete.setdefault with arguments: r.rel.to and an empty list, append to the result tuple with 2 entries: model and f.
  mapped with a function k, for every k and v in return value of the method candidate_subs.items.   format candidate_pat with candidate_subs, return the result.
  define the function reverse with 6 arguments: viewname, urlconf set to None, args set to None, kwargs set to None,
  append list containing string '--no-wrap' to self.xgettext_options.
  context is an instance of a class Context, created with 2 arguments: dictionary created by apllying options to unpacked dictionary containing 3 entries:
  call the function force_text with an argument field.help_text, format help_text_html with it, substitute the result for help_text.
  define the function npath with an argument path.
  if settings.DEBUG is true,
  import module unicodedata.
  raw string '(?:<br clear="all">|<i><\/i>|<b><\/b>|<em><\/em>|<strong><\/strong>|<\/?smallcaps>|<\/?uppercase>)' and re.IGNORECASE,   substitute the result for html_gunk_re.   call the function re.compile with 2 arguments: raw string '((?:<p>(?:%s).*?[a-zA-Z].*?</p>\s*)+)',
  try,
  if parse_until is None,
  call the method Model._meta.get_all_field_names, substitute the result for model_fields.
  raise an BadSignature exception with an argument string 'No "%s" found in value', where '%s' is replaced by self.sep.
  define the function parse_boundary_stream with arguments stream and max_header_size.
  result is None.
  define the method __init__ with 4 arguments: self, result of the function streaming_content=(), unpacked list args,
  define the function wrapped with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  define the method auto_id with an argument self.
  if not,
  remove first element from self.command_stack.
  if e doesnt have an 'django_template_source' attribute,
  define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwds.
  from django.utils.xmlutils import SimplerXMLGenerator into default name space.
  if self.file_path file path exists and it is not a directory,
  call the method self.copy_plural_forms with arguments: msgs and locale, substitute it for msgs.
  define the method find_potfiles with an arguments self and root.
  if media is true,
  define the function iri_to_uri with iri as an argument.
  get _assertCountEqual attribute of the self object, call the result with 2 arguments: unpacked list args,
  set the file pointer at the beginning of the self.file file.
  call the method self.configure_handler with an argument value under name key of handlers dictionary, substitute the result for handler.
  if not,
  if value under the 'DJANGO_SETTINGS_MODULE' key of os.environ dictionary exists.
  append val to self.vals.
  call the method self.can_write.release.
  call the function getargspec with an argument func, substitute the result for params, varargs, varkw and defaults.
  join self._container elements into a string, return it.
  define the method create_nodelist with an argument self.
  call the method connection.introspection.get_relations with 2 arguments cursor, table_name and substitute the result for indexes.
  do nothing.
  return boolean True.
  raise an TemplateDoesNotExist exception with an argument string "No template names provided".
  call the method bytes_to_text with 2 arguments: value and self.encoding, substitute the result for value.
  define the function constant_time_compare with 2 arguments: val1 and val2.
  define the method __eq__ with arguments self and other.
  if AttributeError exception is caught,
  derive the class Command from the BaseCommand base class.
  append string 'Field name made lowercase.' to field_notes.
  if i is true,
  substitute self.form.required_css_class for the value under the 'class' key of the attrs dictionary.
  or boolean False if not, substitute the result for boundary.   if boundary is true,
  derive the class MultipleChoiceField from the base class ChoiceField class.
  value under the ORDERING_FIELD_NAME key of the form.fields is an instance of IntegerField class, created with 3 arguments:
  call the function call_command with string 'flush', verbosity set to greater element, self.verbosity decremented by 1 or integer 0,
  if using_sysrandom is false,
  try,
  join dirpath and filename into path, use it as an argument for the call to the function os.path.normpath, substitute it for file_path.
  substitute the result for context_match.   call the method context_match.group with an argument integer 1, substitute the result for message_context.
  substitute DEFAULT_MAX_NUM for max_num,
  string '--keyword=gettext_noop', string '--keyword=gettext_lazy', string '--keyword=ngettext_lazy:1,2',   string '--keyword=pgettext:1c,2', string '--keyword=npgettext:1c,2,3' and string '--output=-', substitute it for args.   append work_file to args.
  substitute '%s' in 'Not Found: %s' with request.path, extra is an dictionary with two pairs of elements 'status_code' with value 404,
  get the bit attribute of current object, substitute it for current.
  call the function thread.start_new_thread with main_func, args and kwargs as arguments.
  append list containing pattern to tried.
  if self.value equals self.choice_value, return boolean True, if not, return boolean False.
  derive the class CheckboxSelectMultiple from the RendererMixin and SelectMultiple base classes.
  call the method self.add_fallback with an argument default_translation.
  return lookup_view
  pop the value under the 'file_path' key of kwargs dictionary, substitute it for self.file_path.
  if KeyError exception is caught,
  delete entry under the attr key of the attrs dictionary.
  define the method compress with arguments self and data_list.
  if second element of t is boolean True,
  if context.autoescape is true and output is not an instance of SafeData class or output is an instance of EscapeData class,
  assign the result to the value under the string ".moves.urllib_parse" appended to __name__ key of the sys.modules dictionary,   and to the value under the string ".moves.urllib.parse" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_error from the _LazyModule base class.
  derive the class HttpResponseNotAllowed from the HttpResponse base class.
  if self.verbosity is greater or equal to integer 1,
  call the function ugettext with an argument string "Please correct the duplicate data for %(field)s.",
  substitute type for class_types.
  define the function timesince with d, now defaulting to None, reversed defaulting to False as arguments.
  call the executor.loader.get_migration_by_prefix with app_label and migration_name, substitute the result for migration.
  define the method previous_page_number with an argument self.
  parts is an empty list.
  call the method self._archive.read with an argument name, substitute the result for data.
  if invalid_var_format_string is None,
  evaluate the function force_str with key as the argument, substitute it for key.
  try,
  define the method has_changed with an argument self.
  call the method self.validate_unique.
  derive the class Command from the base class AppCommand.
  import module copy.
  call the method baseconv.base62.encode with result of the time.time function converted to an integer, as an argument, return the result.
  if fields is not None and f.name is not contained in fields,
  if ImportError exception is caught,
  write it to self.stdout.   substitute Command for BaseRunserverCommand.
  append newline character to msg.
  if six.PY2 is true and value is greater than sys.maxint,
  self.stdout is an instance of OutputWrapper class created with an argument: value under the 'stdout' key of the options dictionary,
  substitute value under the the 'forloop' key of the context dictionary for parentloop.
  if current is an instance of BaseContext and bit attribute of type of current is true,
  for every entry in os.listdir function return value called with the argument path,
  reverse order of elements of self.keyOrder, return the result.
  call the add_argument method on the parser object, with string 'app_label', and help set to string 'App label of the application containing the migration.' as arguments.
  from django.core.mail import get_connection into default name space.
  property decorator.
  append string 'Form' to model.__name__, substitute the result for class_name.
  substitute the result for value.   if not,
  ba_serializer is a instance of BadSerializer class, created with an argument exc.
  for every basedir in basedirs,
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  raise an exception,
  define the method to_python with arguments self and value.
  join self.dirpath and thefile in a string, substitute the result for work_file.
  if literal_match is true,
  define the method __init__ with 4 arguments: self, attrs set to None, date_format set to None and time_format set to None.
  if field.show_hidden_initial is false,
  define the method pk_is_not_editable with an argument pk.
  if string '()' is contained in config,
  call the method self.validate_number with an argument number, substitute it for number.
  dest as a string 'ignore_patterns', default as an empty list, metavar as a string 'PATTERN',   and help as a string 'Ignore files or directories matching this glob-style pattern. Use multiple times to ignore more.'.   call the method parser.add_argument with 5 arguments: string '--no-default-ignore', action as a string 'store_false',
  import module re.
  property decorator,
  call the force_str function with an argument value, substitute the result for value.
  define the method simple_tag with 4 arguments: self, func and None, takes_context and None and name set to None.
  call the method validate with an argument value from the base class of the class TypedMultipleChoiceField.
  if cache is an instance of BaseDatabaseCache,
  call the method self.write_items with an argument handler.
  singular is an empty list.
  from django.utils.module_loading import import_string into default name space.
  if self.initial is true, substitute the length of self.initial for initial_forms, if not, initial_forms is integer 0.
  if other is an instance of Promise,
  define the method created_time with arguments self and name.
  with an argument curr, sort the result and join it in a list separated with blank spaces, print it to the standard output.   otherwise if first element of cwords is contanied in subcommands and is not equal to string 'help',
  define the function _curried with 2 arguments: unpacked list moreargs and unpacked dictionary morekwargs.
  call the function base.DeserializedObject with obj and m2m_data as arguments, yield the result as the generator return value.
  replace '%s' with type of the obj object.   call the method self.indent with argument integer 1.
  call the private dict.__setitem__ method with self class instance, key and M as arguments.
  self.file_name is None.
  raise an AttributeError with an argument attr.
  call the function ungettext with 3 arguments: singular, plural and number, return the result.
  if response.streaming is boolean False,
  derive the class Context from the BaseContext base class.
  try,
  from django.utils._os import safe_join and abspathu into default name space.
  if msg is true,
  use the result as an argument for the call to the b64_encode function, return the result.   define the function get_cookie_signer with an argument salt set to string 'django.core.signing.get_cookie_signer'.
  substitute '%s' in string '%s-%s-%s' with y, m and d, return the result.
  _moved_attributes is a list with 55 initial elements, 13 of them are the results of the call to the function MovedAttribute,
  define the function clear_script_prefix.
  if OSError exception was raised,
  return an instance of _CacheInfo class, created with 4 arguments: value under the HITS key of the stats dictionary,
  none_value is a tuple containing 2 elements: integer 0 and string '---'.
  if call to the function module_has_submodule with 2 arguments: app_config.module and module_to_search evaluates to true,
  if field is contained in self.errors,
  define the function mail_managers with subject, message, fails_silently set to boolean False, connection set to None,
  define the method as_string with arguments self and unixfrom set to boolean False.
  replace the result for tz_name.   call the method tz_name.encode with the arguments 'ascii' and 'ignore', call the method decode on the result with 'ascii' as argument,
  invalid_var_format_string is None.
  return boolean False.
  set old_method_name attribute of the base object to the result of the function wrapper called with an argument old_method.
  call the method field.rel.to._default_manager.db_manager with an argument self.db, on the result call the method get_by_natural_key,
  append other_dict to self.dicts.
  directory_created is an empty dictionary.
  call the function getargspec with an argument func, substitute the result for args, varargs, varkw and defaults, respectively.
  if confirm equals string 'yes',
  return from the function
  try,
  help is a string "Runs a Python interactive interpreter. Tries to use IPython or bpython, if one of them is available.".
  replace '%s' in the string '</\s*%s\s*>' with the result of the function call tag.lower(),
  from django.utils.deprecation import RenameMethodsBase and RemovedInDjango19Warning into default name space.
  from threading import local into default name space.
  call the self._read_limiter with length of self.buffer subtracted from size as argument, store the result into chunk.
   return self.position.
  otherwise substitute return value of the function _ called with an argument ':' for self.label_suffix.   substitute empty_permitted for self.empty_permitted.
  derive the class ArchiveException from the Exception base class.
  unpacked list field_value as an argument, substitute the result for value of under the field.attname key of the data dictionary.   if not,
  substitute it for time_re.   compile regex from raw string '(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})[T ](?P<hour>\d{1,2}):(?P<minute>\d{1,2})'
  from __future__ import unicode_literals into default name space.
  if new_name is contained in used_column_names,
  call the method self.save_existing with 3 arguments: form, obj and commit as commit, append the result to saved_instances.
  if other equals list containing elements of self, return boolean True, otherwise return boolean False.
  call the method self.get_queryset, return the length of the result.
  call the method self.split_leading_dir with an argument name, substitute the first element of result for name.
  third element of the return value of the function sys.exc_info.   define the class DjangoJSONEncoder from the json.JSONEncoder base class.
  define the method as_textarea with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.
  if failures is true,
  call the method autoreload.main with 3 arguments: self.inner_run, None and options.
  try,
  close the process with an argument 0.
  and directory_permissions_mode set to None.   if location is None,
  substitute form.cleaned_data for cleaned_data.
  call the function ugettext with an argument string "%s KB", substitute '%s' with the result of the call to the function,
  dest set to string 'domain' and help as a string 'The domain of the message files (default: "django").'.   call the method parser.add_argument with 6 arguments: string '--all', string '-a', action as a string'store_true',
  if self.file has an attribute 'tell' and an attribute 'seek',
  if end is not None,
  return self.file.
  decorator method register.tag with an argument 'extends',
  call the method self.stream.flush.
  'status code' with integer value of 400 and 'request' with value request, respectively use the previous to call the function security_logger.error.   if settings.DEBUG is True,
  if KeyError exception is caught,
  define the method multiple_chunks with arguments self and hunk_size set to None.
  if cls._delegate_text is true,
  call the method base64.urlsafe_b64encode with an argument s, strip the result of the bytes string '\n=' from the right, return it.
  get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.
  instantiate class Truncator, with an argument value, call the method words on the result with 3 arguments length,
  call the method token.split_contents, substitute the result for bits.
  try,
  call the method loader.get_migration with arguments app_label and migration_name, substitute the result for migration.
  use the result as the argument for the call to the sql.extend method.   if self.verbosity is greater or equal than integer 1 and sql is true,
  get the 'silent_variable_failure' attribute of e object, if it exists and is true,
  import module re.
  move integer 1 left for 20 bits, substitute the result for MB.
  called with an argument w, and sub_widgets as an empty string, append the result to output.   call the function format_html with 3 arguments: self.outer_html,
  if not,
  define the method path with arguments self and name.
  from django.utils.itercompat import is_iterable into default name space.
  iterator is an instance of ChunkIter class, created with arguments: stream_or_iterable and integer 16384.
  convert value and arg to integers, if value is divisible by arg, return True, otherwise return boolean False.
  if field.rel.to._default_manager has an atttribute 'get_by_natural_key',
  field_notes is an empty list.
  substitute it for value under the string ".moves.urllib" appended to __name__ key of the sys.modules dictionary.   define the function add_move with an argument move.
  try,
  call the itertools.count function with argument integer 1, substitute the result for count.
  derive the class ErrorDict from the dict base class.
  return size.
  append tempdir to self.self.paths_to_remove.
  call the function _explode_shorthand_ip_string with an argument ip_str, substitute the result for ip_str.
  close fd file.
  instantiate the TimestampSigner object with arguments key and salt set to salt, call its method sign with an argument base64, return it.
  define the function autoescape with 2 arguments: parser and token.
  call the function re.compile with 2 arguments: string '^([a-z])[:|]' and re.I, substitute the result for _url_drive_re.
  append list with element inner to list containing first start elements of result, substitute it for result.
  derive the class MultiPartParser from the object base class.
  call the method timezone.tzname with an argument None, return the result.
  ipv4_address is a string "%d.%d.%d.%d" formated with first 2 elements of seventh element of hextets converted into hexadecimal number,
  define the method autocomplete with an argument self.
  if settings.USE_THOUSAND_SEPARATOR is true,
  result of the m.group method called with an argument integer 0 converted into lowercase and result of the method value.title,   substitute the result for t.   call the function re.sub with 3 arguments: string "\d([A-Z])", lambda function with an argument m and return value,
  if first element of the second row of args equals a string '2',
  decorator deconstructible,
  define the function time with 2 arguments value and arg set to None.
  substitute new for self.mod.
  import module os.
  default as an empty list and help as an string 'Locales to exclude. Default is none. Can be used multiple times.'.   define the handle method with self class instance and dictionary **options as arguments.
  if localized_fields equals ALL_FIELDS, or if localized_fields is true and f.name is contained in localized_fields,
  append a tuple with 2 elements: f and f with first occurrence of the path replaced with an empty string, to self.choices.
  dest is 'use_base_manager', default is boolean False and help is a string '(use multiple --exclude to exclude multiple apps/models).'.   call the method parser.add_argument with 3 arguments: string '--pks', dest set to string 'primary_keys',
  queryset is an property object of this class, with _get_queryset getter and _set_queryset setter functions.
  define the method extract with 2 arguments self and to_path.
  if origin is true,
  if value under the 'feed_url' key of the self.feed dictionary is not None,
  call the method router.allow_migrate with 2 arguments: database and cache.cache_model_class, if it evaluates to false,
  substitute '%s' in 'django.security.%s' with the name of the type of the class object e, use it as the argument for the call to the,
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  define the function join with 3 arguments: value, arg and autoescape set to None.
  define the method __bool__ with argument self.
  import module django.core.checks.compatibility.django_1_6_0.
  call the method default with an argument o from the base class of the class DjangoJSONEncoder, return the result.
  if resource_string is not None, is_usable is boolean True, otherwise is_usable is boolean False.
  split header string at string '\r\n', for every line in result,
  call the self.initial_form_count method, return the sublist of self.forms, using previous result as start index to the end.
  from django.forms.widgets import SelectMultiple, HiddenInput, MultipleHiddenInput into default namespace.
  from django.utils.encoding import force_bytes into default name space.
  call the method utility.execute.
  call the self.get_response with request as the argument, substitute the result for response.
  and form is not contained in forms_to_delete, substitute the resulting list for valid_forms.   for every form in valid_forms,
  if TypeError exception is caught,
  VARIABLE_ATTRIBUTE_SEPARATOR is a string '.'.
  call the function re.compile with an argument raw string "^\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?'))\s*", substitute the result for context_re.
  return an instance of Context class, created with an argument context.
  into a file path, substitute it for new_path.   if new_path file path exists,
  set old_method_name attribute of the base object to the result of the function wrapper called with an argument new_method.
  from django.utils.six.moves import html_entities into default name space.
  append rel_model to deps.
  from django.forms.utils import flatatt and to_current_timezone into default name space.
  from importlib import import_module into default name space.
  raise an ImportError exception with an argument string "No IPython".
  skip this loop iteration,
  call the function termcolors.parse_color_setting with DJANGO_COLORS as an argument, assign the result to color_settings.
  get frag attribute from found object, substitute it for found.
  python_2_unicode_compatible decorator,
  html set to boolean True and truncate set to string ' ...', return the result.   decorator function register.filter with an argument is_safe set to boolean False.
  otherwise if second element of args equals a string '304',
  convert result of the method self.__iter__ into a list, return element at the idx index.
  define the method __init__ with 4 arguments: self, children set to None, connector set to None and negated set to boolean False.
  questioner is an instance of a InteractiveMigrationQuestioner class.
  return an instance of a class ResolverMatch created with 6 arguments: sub_match.func, sub_match.args, sub_match_dict,
  derive the class CheckboxInput from the Widget base class.
  define the method stringfilter with an argument func.
  return value.
  substitute v for value under the k-th element of m key of _ dictionary.
  if not,
  self.path_info is an empty string.
  '(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?(?P<tzinfo>Z|[+-]\d{2}(?::?\d{2})?)?$', substitute it for datetime_re.   define the function parse_date with an argument value.
  do nothing.
  if source is an instance of NonCapture class,
  define the function linebreaksbr with 2 arguments value and autoescape set to None.
  call the method re.sub with 3 arguments: raw string '&(?:\w+|#\d+);', empty string and result of the function force_text,
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  define the method __delitem__ with 3 arguments: self and key.
  call the function urlquote with 2 arguments value and unpacked dictionary kwargs, return the result.
  for every key in return value of the method c.keys call,
  for every filename in files,
  derive the class Warning from base class CheckMessage.
  append an empty string to list hextets.
  define the method __init__ with arguments: self class instance and argv set to None.
  if value is boolean True, string 'True' or string '1',
  substitute '%s' in string "UnicodeDecodeError: skipped file %s in %s" with f.file and f.dirpath, write it to self.stdout.
  call the method zfile.close.
  and name set to None.   define the function dec with an argument func.
  call the function getInnerText with argument k, on the result call the method strip, for every k in keys, append the results to field_value list.
  loader is an instance of MigrationLoader class, created with 2 arguments: None and ignore_no_migrations set to boolean True.
  define the function activate with an argument language.
  pop value under the 'ipv6' key of the kwargs dictionary, if it is true,
  define the method configure_formatter with 2 arguments: self and config.
  remove config dictionary element under 'formatter' key, if it exists substitute it for formatter, if not, formatter is None.
  substitute the resulting set for selected_choices.   output is an empty list.
  define __enter__ method with self as the argument.
  dest as a string 'keep_pot', default as boolean False and help as a string "Keep .pot file after making messages. Useful when debugging."   define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.
  for every i and row in enumerated result of the method connection.introspection.get_table_description called with arguments: cursor and table_name,
  derive the class MultiValueDict from the dict base class.
  substitute fg for value under the 'fg' key of definition dictionary.
  get the value under the 'content-transfer-encoding' key of the disposition meta_data, substitute it for transfer_encoding.
  if var is false or whitespaces are contained in var,
  for every app in app_labels.   call the method autodetector.arrange_for_graph with 2 arguments: changes, loader.graph, substitute the result for changes.
  define the method get_version with an arguments self.
  define the method incr with self, key, delta defaulting to integer 1 and version defaulting to None as arguments.
  create_models is an empty list.
  if Exception, renamed to e, exception is caught,
  call the method self.add_error with 2 arguments name and e.
  return base.
  if AttributeError exception is caught,
  call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with an entry:
  get the value under the 'id' key of the widget.attrs dictionary, if the key exists substitute it for id_,
  substitute variable_name for self.variable_name.
  get '_decorated_function' attribute from the func object, substitute it for _dec._decorated_function, if it doesnt exist,
  call the method unlink on self with self.name as the argument.
  return self.token.
  if not,
  if old_style_list is true,
  COMMENT_TAG_END is a string '#}'.
  __all__ is a list of strings, 'SimpleCookie', 'parse_cookie', 'HttpRequest', 'QueryDict', 'RawPostDataException',
  append opts.virtual_fields to opts.many_to_many, for every f in the result,
  call the method MIMEMultipart.__init__ with 5 arguments: self, _subtype, boundary, _subparts and unpacked dictionary _params.
  return integer 0 and ch2.
  call the method m.group with an argument string 'value', use the result as an argument for the call to the force_str,
  skip this loop iteration.
  if settings.TEMPLATE_DEBUG is true,
  return self.
  from django.utils.module_loading import import_string into default name space.
  from __future__ import unicode_literals into default name space.
  from django.core.management.color import no_style into default name space.
  RemovedInDjango19Warning and stacklevel as integer 2.   try,
  from __future__ import unicode_literals into default name space.
  raise an CommandError exception with an argument string "You can only use --pks option with one model".
  define the function sanitize_separators with an argument value.
  call the method sys.stdout.close.
  from django.utils import six into default name space.
  if self.asvar is None,
  define the function get_objects.
  for every f in fields,
  raise an TypeError exception with an argument sting "can't delete _wrapped.".
  if self.selected_fields is None or last three elements of field.attname are contained in self.selected_fields:
  call the method instance.save.
  if sep is not None,
  call the method _trans.pgettext with 2 arguments context and message.
  substitute third and first element of bits for key and value, respectively.
  substitute self.none_value for self.month_none_value.
  from django.utils.text import smart_split, unescape_string_literal and get_text_list into default namespace.
  define the method __init__ with 3 arguments self, states and first.
  put loaders elements in a tuple, substitute it for template_source_loaders.
  if not, self.reason_phrase is a string 'UNKNOWN STATUS CODE'.   substitute content_type for value under the 'Content-Type' key of the self dictionary.
  vary_on is an empty tuple.
  call the method self.nodelist.render with an argument context, substitute the result for output.
  raise an TemplateSyntaxError exception with an argument string "Could not parse some characters: %s|%s|%s",
  decrement self.remaining by length of result.
