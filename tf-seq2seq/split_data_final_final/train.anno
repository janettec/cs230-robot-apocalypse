  if data_set is not equal to initial_set, return boolean True, otherwise return boolean False.
  call the method domain_part.encode with an argument string 'idna', on the return value call the decode method with string 'ascii' as argument, substitute the result for domain_part.
  call the method block_context.pop with an argument self.name, assign the result to push and block.
  define the method read with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  import module sys.
  substitute length of self.object_list for self._count.
 _format_modules_cache is an empty dictionary.
  use the result as an argument for the call to the mark_safe function, return the result.   if InvalidOperation exception is caught,
  from django.dispatch import Signal into default name space.
  derive the class ClearableFileInput from the FileInput base class.
  join the list of statements into a string separated by new lines, return it.
  join app_config.path and 'locale' into a valid directory path, separated by '/', append it to basedirs.
  define the function _explode_shorthand_ip_string with an argument ip_str.
  return an instance of CsrfTokenNode class.
  if Exception exception is caught,
  return string 'rd'.
  get the value under the 'list' key of options dictionary, if key doesnt exist return False, if the return value is True,
  otherwise if ch equals a string ')',
  call the __call__ method from the base class of the class URLValidator, with an argument value.
  import module warnings.
  substitute set of the results for self.value.   define the method is_checked with an argument self.
  return value converted into a list.
  with field_value as an argument, substitute the result for obj_pk.   return obj_pk.
  substitute cyclevars for self.cyclevars.
  if not,
  if use_reloader is true,
  if extra_attrs is true,
  data is an empty dictionary.
  append k into a list for every k and v in return value of the six.iteritems function with an argument _serializers,
  substitutions dictionary.   call the function mark_safe with an argument template, formated with substitutions, return the result.
  if other equals list containing elements of self, return boolean True, otherwise return boolean False.
  append old_app_dir to app_dirs.
  call the function restart_with_reloader, substitute the return value for exit_code.
  raise an OverflowError exception with an argument string 'dklen too big'.
  return value of the call to the function _ with an argument string 'Enter a valid IPv4 address.' and string 'invalid'.   define the function validate_ipv6_address with an argument value.
  raise an TemplateDoesNotExist exception with an argument template_name.
  define the function get_unbound_function with an argument unbound.
  call the method self.add_filters with 2 arguments: result and filters.
  derive the class SelectDateWidget for the Widget base class.
  if line is true,
  from django.utils.deprecation import RemovedInDjango20Warning into default name space.
  if django_po file path exists,
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  get the value under the 'shutdown_message' key of the options dictionary, if it exists substitute it for shutdown_message,
  return j.
  if not,
  substitute locale_dir for self.locale_dir.
  kwargs is an empty dictionary,
  define the function addslashes with an argument value.
  call the method self.to_python with an argument value, substitute it for value.
  call the method field_node.getAttribute with an argument string 'name', substitute the result for field_name.
  for every name in bits from the start index 1 to the end index negative 2,
  substitute first, second and second elements of bits for yes, no, maybe, respectively.
  call the method self._clean_fields.
  define the method display with an argument self.
  do nothing.
  try,
  substitute self.file for thefile.
  return boolean True, otherwise return boolean False.   property decorator.
  fixture_name and result of the function humanize called with an argument fixture_dir.   extend fixture_files list with fixture_files_in_dir.
  substitute length of list_ for list_length.
  try,
  from importlib import import_module into default name space.
  define the method load_template with 3 arguments: self, template_name, template_dirs set to None.
  return string '0'.
  substitute warning for self.warning.
  get _assertRegex attribute of the self object, call the result with 2 arguments: unpacked list args,
  call the function codecs.open with 3 arguments: sql_file, string 'r' and  encoding set to settings.FILE_CHARSET, with the result renamed to fp,
  from django.utils import six into default name space.
  for every i in sequence of integers, from 0 to the result of the method self.total_form_count,
  modes is an empty list.
  if val is an instance of bytes, return val, otherwise return result of the method val.encode called with an argument encoding.
  if first and second elements of value are contained in self.empty_values,
  if not,
  append first 49 elements of self._unget_history to list containing num_bytes, substitute the result for self._unget_history.
  if KeyError exception is caught,
  get value under the 'propagate' key of the config dictioanry, if it exists substitute it for propagate, if not propagate is None.
  if the value under the 'test_flush' key of the options dictionary exists,
  if not,
  define the method clean with arguments self and value.
  return output.
  date_data is a tuple with an entry: attribute lookup from the value under the unique_for key of the form.cleaned_data dictionary.
  call the function getargspec with an argument func, substitute the result for params, varargs, varkw and defaults.
  from logging import NullHandler.
  from __future__ import unicode_literals into default name space.
  if not,
  if contents is not None,
  call the function mark_safe with an argument word, substitute the result for i-th element of words.
  for every pythonrc in tuple containing 2 elements: return value of the function os.environ.get called with a string "PYTHONSTARTUP",
  substitute self for data.
  silent is boolean False.
  return result.
  call the function chain with arguments self.choices and choices, for every option_value and option_label in the result,
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  if lang_code is not None,
  if i is greater or equal to integer 0,
  assign StringIO.StringIO to StringIO and BytesIO.
  call the __add__ method with an arguments rhs from the base class of the class SafeText, substitute the result for t.
  call the method resolver._reverse_with_prefix with 4 arguments: view, prefix, unpacked list args, unpacked dictionary kwargs,
  get attribute real_name from the trans object, return it.
  otherwise if length of bits equals integer 6,
  register.tag decorator function with an argument 'filter',
  if token.contents equals string 'else',
  do nothing.
  i is integer 365.
  get value under the config_string key of the PALETTES dictionary, call the copy method on the result and substitute it for palette.
  call the function copy with an argument base class of the class BaseContext, substitute the result for duplicate.
  define the method _get_media with an argument self.
  return self._encoding.
  substitute input_data for self._input_data.
  if six.PY3 is true,
  create list out of last_row elements from the start to the last length of row_ender element, append str_hidden and row_ender to it,
  otherwise if self.waiting_readers is not equal to integer 0,
  __dispatch is None.
  call the method self.next_token, substitute the result for self.current_token.
  return boolean upload.
  for every match in the result,   substitute match.lastgroup for name.
  remove first and last character from the attrvalue, substitute it for attrvalue.
  append tempdir to self.self.paths_to_remove.
  if self.waiting_writers is not equal to integer 0,
  field.attname of the data dictionary.   if not,
  from django.utils import timezone into default name space.
  if data has an 'temporary_file_path' attribute,
  try,
  call the method logging.getLogger with an argument name, substitute the result for logger.
  as arguments for the call to the unicode function, return the result.  substitute unichr for unichr.
  raise ValueError exception with string 'Sign character found in converter base digits.' as an argument.
  substitute i-th element of value for widget_value.
  return an empty list.
  derive the class DateFormat from the base class TimeFormat.
  define the function parse_http_date with an argument date.
  if ValidationError exception is caught,
  call the method struct.pack with 2 arguments: bytes string '>I' and i, append the result to salt, substitute the result or u.
  default_error_messages is an dictionary with 5 initial entries: return value of the function _ called with an argument string,
  substitute self.__offset.seconds for offset.
  and help set to a string 'Tells Django to use specified test runner class instead of the one specified by the TEST_RUNNER setting.'.   call the method parser.add_argument with 5 arguments: string '--liveserver', action set to string 'store', dest set to 'liveserver',
  if nodelist is an instance of NodeList and node is not an instance of TextNode class.
  if s is an instance of the subclass Exception,
  with '%s' substituted for migration_name and app_label, respectively, as arguments.   if KeyError exception is caught,
  call the method self._get_validation_exclusions, substitute the result for exclude.
  from django.core.management.base import BaseCommand and CommandError into default name space.
  value under the BLOCK_CONTEXT_KEY key of context.render_context dictionary is BlockContext class instance.
  call the method self.style.NOTICE with string "  Run 'manage.py makemigrations' to make new migrations, and then re-run 'manage.py migrate' to apply them." as an argument, use the result as an argument for the call to the self.stdout.write method.
  call the function mark_safe with an argument value, return the result.
  call the method request_finished.connect with argument update_watch.
  self.FILES is an instance of MultiValueDict class.
  if level is not contained in logging._levelNames,
  append data to self.children.
  define the method _get_page_range with an argument self.
  dirs is an empty dictionary.
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  define the function become_daemon with 4 argument: our_home_dir set to '.', out_log set to None, err_log set to None,
  found is boolean False.
  and code set to an string 'required'.   for every val in value,
  try,
  call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for _default.
  executor is an instance of the class MigrationExecutor created with an argument: value under the DEFAULT_DB_ALIAS key of the connections dictionary.
  for every taglib in bits without the first element,
  if not,
  get the value under the field key of the self.cleaned_data dictionary, if it exists substitute it for field_value,
  call the method m.group with an argument string 'year', convert the result into a string, substitute it for year.
  call the getvalue method from the base class of the class PythonSerializer, return the result.
  convert filename to lowercase, use the result as an argument for the call to the function os.path.splitext,
  return nothing.
  call the method activate with an argument self.timezone.
  self._read_started is boolean True.
  define the function truncatechars_html with 2 arguments value and arg.
  from django.template.base import TemplateDoesNotExist into default name space.
  append string '.' to result.
  _dec.__name__ is a string 'method_decorator(%s)' formated with decorator.__class__.__name__.
  do nothing.
  opt_dict is an dictionary with 5 elements: '1' for 'bold', '4' for 'underscore', '5' for 'blink', '7' for 'reverse',
  define the method copy_plural_forms with arguments self, msgs and locale.
  call the function do_ntranslate with 3 arguments: singular, plural, number and string 'ngettext', return the result.
  raise an ValidationError with 3 arguments: dictionary self.error_messages value under the key 'invalid_pk_value',
  if key is contained in dict_,
  define the method M with an argument self.
  value under the 'declared_fields' key of the attrs dictionary is an instance of OrderedDict class, created with an argument current_fields.
  if not,
  try,
  skip this loop iteration.
  call the method self.__text_cast, return the result.
  decorator function register.filter with an argument is_safe set to boolean True.
  if not,
  define the method has_leading_dir with 2 arguments self and paths.
  call the method f.value_from_object with an argument instance, substitute the result for qs.
  headerlist is an empty list.
  call the function _load_serializers.
  import module time as _time.
  do nothing.
  from django.utils.xmlutils import SimplerXMLGenerator into default name space.
  call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for _default.
  if not,
  substitute first element of fks_to_parent for fk.
  call the json.dump function with 4 arguments: return value of the method self.get_dump_object called with an argument obj,  self.stream, cls set to DjangoJSONEncoder and unpacked dictionary self.json_kwargs.
  call the function force_text with an argument bf.label, use the result as an argument for the call to the function conditional_escape, substitute the result label.
  if last element of pieces is true,
  define the method strptime with arguments self, value and format.
  args_check is a static method.
  call the method time.mktime with an argument tt, substitute the result for stamp.
  from django.utils.module_loading import import_string into default name space.
  if self.require_all_fields is true,
  return self.
  if value under the 'description' key of the item dictionary is not None,
  original_lookup, RemovedInDjango20Warning and stacklevel set to integer 3.   call the method self.reverse_dict.getlist with an argument lookup_view, substitute the result for possibilities.
  and trimmed, write the result to out.   for every part in singular,
  define the method values with an argument self.
  from __future__ import unicode_literals into default name space.
  call the function digest twice, substitute the results for inner, outer, respectively.
  call the method Model._meta.get_all_field_names, substitute the result for model_fields.
  call the function smart_text with an argument value, return the result.
  if literal_match is true,
  if number equals a integer 1 and self.allow_empty_first_page is true,
  derive the class RequireDebugTrue from logging.Filter base class.
  and help set to string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.   define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
  from django.utils.translation import trans_real as trans.
  append value to self.dicts list.
  define the function all_locale_paths.
  return boolean False.
  return s.
  output is an empty list.
  define the function ugettext with an argument message.
  call the method lexer_class with an arguments template_string and origin, substitute the result for lexer.
  call the method loader.select_template with an argument template, return the result.
  return s.
  define the function force_escape with an argument value.
  define the method regex with an argument self.
  define the __init__ method with 3 arguments: self, unpacked list args and unpacked dictionary **kwargs.
  taglib_module is an string '%s.%s', where '%s' is replaced to module and library_name.
  derive the class BadSerializer from the object base class.
  otherwise if domains equals a string django' and, file_ext equals '.py' or file_ext is contained in command.extensions,
  call the method handler.addQuickElement with 2 arguments: string 'ttl' and value under the 'ttl' key of the item dictionary.
  self.filters is an empty dictionary.
  if data is instance of Node and data.negated is false, and if data.connector equals conn_type or length of data equals integer 1,
  for every s in strings, call the function force_text with an argument s, join the results in a string, return the result.
  substitute gettext_noop for ugettext_noop.
  bits is an empty list.
  substitute all_locales for locales.
  return changeset.
  raise an TypeError exception with an argument string "If the flags are set, regex must be a regular expression string.".
  call the function warnings.warn with 2 arguments: string "``use_natural_keys`` is deprecated; use ``use_natural_foreign_keys`` instead." and RemovedInDjango19Warning.
  call the function re.compile with raw string '&(?!(\w+|#\d+);)', substitute the result for unencoded_ampersands_re.
  derive the class LocalTimezone from the ReferenceLocalTimezone base class.
  get the values under the 'app_label' and 'migration_name' keys of the options dictionary,
  call the function check_for_migrations with an arguments app_config, connection.
  from django.utils.six.moves.urllib.parse import parse_qsl,  urlencode,  quote,  urljoin and urlsplit into default name space.
  where '%(field)s' is replaced with return value of the get_text_list function called with 2 arguments:   unique_check and return value of the function six.text_type called with return value of the function _ with an argument string 'and',   return the result.   define the method get_date_error_message with 2 arguments: self and date_check.
  if not,
  if root is true,
  ctx is an hashlib object, for calculating hash function with md5 algorithm.
  define the function validate_integer with an argument value.
  try,
  return res.
  raise a NotImplementedError with an argument string 'subclasses of Serializer must provide a start_object() method'.
  results is a tuple with 2 elements, 2 empty lists.
  set self.cdata_tag to None.
  if TypeError or ValueError exceptions are caught,
  call the function mark_for_escaping with an argument new_obj, substitute the result for obj.
  if value is true,
  raise an TemplateSyntaxError exception with an argument string "'%s' tag takes only one argument",
  if 'id' is contained in self.attrs,
  derive the class ChoiceField from the base class Field class.
  from django.forms.fields import everything into default name space.
  kwargs is an empty dictionary.
  call the function parser.compile_filter with an argument arg for every arg in args from first element to the end,
  message is an string "%s\n\nRequest repr(): %s"  formated with the result of the metod self.format with an argument record,
  return a tuple with 2 elements: integer 0 and second element of k.
  define function dictitem with s as an argument.
  self._container is an list.
  define the method as_data with an argument self.
  if not,
  append truncate to text, return the result.
  append node to nodelist.
  if autoescape is true and value is not an instance of SafeData, autoescape is boolean True, otherwise it is boolean False.
  call the method copy.deepcopy with 2 arguments: self._wrapped and memo, return the result.
  call the function smart_split with an argument self.contents, substitute the result converted to an iterable for bits.
  bring integer 36 to the power of factor, if i is smaller than the result,
  if index_sql is not empty,
  substitute kw for self.__kw.
  self.path is an empty string.
  params is a dictionary with 2 initial entries: self.max_length for 'max' and length of file_name for 'length'.
  import module base64.
  called with arguments v and self.encoding, extend the output with the result.   join elements of the output into a string, separated with '&', return the result.
  call the method self.create_token with 3 arguments: self.template_string list elements from upto index to start index,
  define the method __repr__ with an argument self.
  append a tuple with 2 elements: None and nodelist to conditions_nodelists.
  substitute the resulting list for list_.   call the method setlist from the base class of the QueryDict class, with arguments key and list_.
  if value is true,
  _upload_handlers is an empty list.
  import module sys.
  split dotted_path into two parts from the right at the '.' character, assign the result to module_path and class_name, respectively.
  if length of x is equal to integer 0,
  define the method add_root_elements with 2 arguments: self and handler.
  for every node_app and node_name in migration.branch,
  otherwise if ns is not contained in app_list,
  define the function get_language.
  raise an ValueError exception wit an argument string "Not a string literal: %r", where "%r" is replaced with s.
  call the function allow_lazy with 2 arguments: urlize, six.text_type, substitute the result for urlize.
  return boolean False.
  string 'The inline foreign key did not match the parent instance primary key.' for 'invalid_choice'.   define the method __init__ with 4 arguments: self, parent_instance, unpacked list args and unpacked dictionary kwargs.
  unpack dictionary kwargs, map it through self.attrs and convert to dictionary, substitute the result for attrs.
  substitute RadioFieldRenderer for renderer.
  FILE_INPUT_CONTRADICTION is an instance of object class.
  cc is an empty dictionary.
  return retval.
  from django.apps import apps into default name space.
  raise an TemplateSyntaxError exception with an argument string "'%s' received multiple values for keyword argument '%s'",
  if model is contained in created_models,
  set self.name attribute of the obj object to result.
  self._post is an instance of QueryDict created with arguments: self.body and encoding set to self._encoding,
  call the function decorator with 2 arugments: unpacked list args and unpacked dictionary kwargs, return the result.
  define validate_name with 3 arguments: self, name and app_or_project.
  append the result to old_app_dirs.   if file path old_app_dir exists,
  get the value under the '__slots__' key of the orig_vars dictionary, substitute it for slots.
  cmp_fmt is None.
  raise an exception.
  for every f in files,
  substitute the result for sequence.   call the method parser.parse with an argument tuple with 2 elements strings 'empty' and 'endfor', substitute the result for nodelist_loop.
  decorator function register.filter with an argument is_safe set to boolean True.
  call the function get_template with an argument file_name, substitute the result for t.
  do nothing.
  if TypeError or ValueError exceptions are caught,
  decrement t by integer 1,
  call the function os.umask with an argument umask.
  call the function os.unlink with an argument work_file.
  define the method id_for_label with an argument self.
  if KeyError exception is caught,
  pk_value is None.
  raise an NotImplementedError exception with an argument string 'may be implemented in a future release'.
  call the method node.getAttribute with an argument string 'pk', use the result as the argument for the call to the method,  Model._meta.pk.to_python with, substitute the result for value under the Model._meta.pk.attname key of the data dictionary.
  substitute second element of elt for param.
  define the method l with an argument self.
  domains is a tuple with 2 elements: strings 'djangojs' and 'django'.
  call the function mark_safe with an argument word, substitute the result for i-th element of words.
  derive class Command from the base class BaseCommand.
  define the function make_middleware_decorator with an argument middleware_class.
  substitute self._pk_field.name for name.
  call the method template_localtime with 2 arguments: value and use_tz=context.use_tz, substitute the result for value.
  return an empty dictionary.
  return value,
  if value is an instance of datetime.datetime,
  define the method urlencode with 3 arguments: self and safe set to None.
  define the method __init__ with 5 arguments: self, display_name, loader, name and dirs.
  otherwise if field is contained in the result of the call to the method self._errors.keys,
  serialize set to boolean False, substitute the return value for db_name.   call the method call_command with 3 arguments, string 'loaddata', unpacked list fixture_labels and unpacked dictionary containing 1 element: verbosity for 'verbosity'.
  from lib2to3.pgen2 import token into default name space.
  output is an empty list.
  use the result as an argument for the call to the function iri_to_uri, return the result.   call the function lazy with arguments reverse and str, substitute the results for reverse_lazy.
  if digest is false,
  try,
  if safe_input is true,
  define the method __init__ with 3 arguments: self, setting and nodelist.
  define the method __setitem__ with 3 arguments: self, key and value.
  substitute sysid for self.sysid.
  get the value under ch key of the ESCAPE_MAPPINGS dictionary, if it exists substitute it for representative, if not substitute ch for representative.
  define the method __iter__ with an argument self.
  if InputStreamExhausted exception is caught,
  call the method middleware.process_exception with 2 arguments: request and e, substitute the result for result.
  define the method __init__ with 2 arguments: self and obj.
  if fields is not None and f.name is not contained in fields,
  read file fp, call the method decode on the result with an argument settings.FILE_CHARSET, return tuple containing 2 elements,
  call the method self._should_delete_form with an argument, if it evaluates to true,
  substitute args for self.args.
  remove entry under 'render' key of the kwargs dictionary and substitute it for renderer, if the key doesnt exists, renderer is None.
  define the method widget_attrs with arguments self and widget.
  format key is an empty string.
  call the method field.rel.to._default_manager.db_manager with an argument self.db, on the result call the method get_by_natural_key,
  tried is an empty list.
  get is a string '<could not parse>'.
  substitute empty for self._wrapped.
  return the result of the call to the function chain, with an argument unpacked list, containing the result of the function,
  return an instance of a class RegexURLResolver created with arguments: raw string '^/' and urlconf.
  return wrapped.
  if value is not contained in result,
  status_code is an integer 404.
   _mutable is boolean True.
  return an instance of a class RegexURLResolver created with arguments: raw string '^/' and a list containing an element ns_resolver.
  call the function _helper with an argument value, use it as an argument for the call to the function mark_safe, return the result.
  join statements into a string, separated by newlines, return it.
  if other is an instance of BaseContext class,
  define function dictvale, with an argument t.
  if first element of text is contained in 'xX'.
  call the method cls.__new__ with 2 arguments: cls and unpacked list args.
  if f is an instance of ManyToManyField,
  call the method add_fields from the base class of the class BaseInlineFormSet, with 2 arguments: form and index.
  otherwise if value is boolean False, string 'False' or string '0'
  if fields is true and f.name is not contained in fields,
  get opt attribute of the opts object, substitute it for value.
  call the method HTMLParser.__init__ with 2 arguments: self and strict set to boolean False.
  call the method one_percent_re.sub with 2 arguments: string '%%' and t.contents, substitute the result for contents.
  ba_serializer is a instance of BadSerializer class, created with an argument exc.
  from django.utils import six into default name space.
  result of the function force_text called with an argument title, and with sublist, append the string to output.   increment i by 1.
  import module copy.
  unpacked list args and unpacked dictionary kw, return the result.   raise an TypeError exception with an argument sting "Lazy object returned unexpected type.".
  return the value under the language_code key of the self._regex_dict dictionary.
  substitute it for d.   while rest is true,
  _standard_context_processors is None.
  filemsg is a string 'file %s, ', where '%s' is replaced with origin.
  move integer 1 left for 20 bits, substitute the result for MB.
  return an empty string.
  define the method __init__ with arguments self, unpacked list args and unpacked dictionary kwargs.
  if autoescape is true,
  if boundary is an instance of six.text_type class,
  convert elements of self into a list, return the its printable representation.
  import module os.
  if ImportError, renamed to e, exception is caught,
  call the field.to_python method with field_value, substitute the result for field.name key of the data dictionary.
  call the method field.value_to_string with an argument obj, use the result as an argument for the call the method self.xml.characters.
  define the method handle_charref with 2 arguments self and name.
  lineno_comment_map is an dictionary.
  otherwise if name is not None and compile_function is not None,
  substitute the result for last element of output.   if not,
  result is an empty list.
  if id_ is true,
  if field equals NON_FIELD_ERRORS,
  import module warnings.
   if t.token_type equals TOKEN_BLOCK,
  self.vals is an empty list.
  raise an TemplateSyntaxError exception with an argument string "'%s' received some positional argument(s) after some keyword argument(s)", where '%s' is replaced with name.
  call the method logging.StreamHandler, substitute the result for handler.
  call the function curry with 2 arguments: _proxy_method and method set to bytes.decode, substitute the result for decode.
  with '%s' substituted for app_label, as arguments.   for every key in return vale of the method executor.loader.graph.leaf_nodes, check if the first element of key equals to app_label,
  call the method os.dup2 with 2 arguments: result of the method se.fileno and result of the method sys.stderr.fileno.
  if self.data is false,
  call the function new_method_proxy with an argument bool, substitute the result for __bool__.
  define the method __init__ with 2 arguments self and var.
  divide since by seconds, store the floored result in count.
  call parse.add_argument method, with string '--database', default set to DEFAULT_DB_ALIAS,
  if not,
  if version is None,
  while start is lesser than end.
  call the method copy.deepcopy with arguments self.widget and memo, substitute the result for result.widget.
  format, if its true, otherwise string 'DATE_FORMAT' and use_l10n as use_l10n, return the result.   define the function time_format with 3 arguments: value, format set to None and use_l10n set to None.
  return result.
  convert if into a string append to it a string '_month', return the result.
  substitute field for self.field.
  if max_length is not None,
  USE_INOTIFY is boolean False.
  and unpacked dictionary kwargs, return the result.   property decorator,
  for every i and field in enumerated iterable self.fields,
  VARIABLE_TAG_START is a string '{{'.
  call the method df.format with an argument format_string, return the result.
  if Exception, renamed to e, exception is caught,
  _assertRaisesRegex is a strnig "assertRaisesRegexp".
  if six.PY3 is true,
  define the function do_for with 2 arguments: parser and token.
  get 'editable' attribute from object f, if it doesnt exists or its true,
  define the method __next__ with an argument self.
  call the method arg.resolve with an argument context, append the result to arg_vals.
  substitute loader.graph for graph.
  return _wrapper.
  call the function find_template_loader with an argument loader, append the result to cached_loaders.
  if first and second element of sys.version_info are both equal to integer 3,
  join trans_bit into a string separated with whitespaces, substitute the result for bit.
  substitute version_info from module sys for surrent_version.
  substitute empty string, word an empty string for lead, middle and trail, respectively.
  call the method parser.add_argument with 3 arguments: string 'directory', nargs set to '?' and help set to string 'Name of the application or project.'.
  return s.
  substitute NullBooleanSelect for widget.
  if ValidationError exception is caught,
  if target_dir path doesnt exists,
  call the method fp.write with an argument string '%d\n", with '%d' replaced by os.getpid function return value.
  substitute it for time_re.   compile regex from raw string '(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})[T ](?P<hour>\d{1,2}):(?P<minute>\d{1,2})'
  derive the class ImageField from the base class FileField class.
  append list containing view_path to self.namespaces list, join all the elements into a string separated by character ':',
  substitute DEFAULT_DB_ALIAS for db.   remove the value under the 'ignorenonexistent' key from the options dictionary, assign it to the ignore, if the entry doesnt exists,
  get the next element of iterable self, substitute it for chunk.
  substitute _itervalues for values.
  docs_version is a string 'dev'.
  split part by '=' character, substitute the result for role and instructions, respectively.
  if the boolean return vale of the call to the function is_protected_type(s) and string_onlys are boolean True,
  derive the class StreamingBuffer from the object base class.
  define the method __init__ with 4 arguments: self, query_string is None, mutable is boolean False and encoding set to None.
  calculate reminder of division of x by length to_digits, substitute it for digit.
  for every ext in pathext,
  convert self.index into a string and append it to '_' string, substitute it for value under the 'id' key of self.attrs dictionary.
  derive the class LazyObject from the object base class.
  substitute item_date for latest_date.
  and code set to a string 'invalid_choice'.   return self.parent_instance.
  return a tuple with 2 elements: result of the method self.field.prepare_value called with an argument obj,
  for every match in matches,
  substitute '%s' in string 'id_%s' with name, return it.
  import module datetime.
  try,
  otherwise if disable_existing is true,
  return boolean False.
  call the function ip.
  return out.
  set result attribute name to value value.
  substitute complain for __delslice__.
  instantiate base class of the class ModelMultipleChoiceField, substitute filed to_python of the  result for to_py.
  return s.
  try,
  return boolean False.
  call the method self.check_for_whole_start_tag with i as an argument, substitute result for the endpos.
  call the method Module_six_moves_urllib_request with an argument: string ".moves.urllib.error" appended to __name__,
  PALETTES is a dictionary containing 3 elements, a dictionary with 18 pairs of dictionary value and string keys for NOCOLOR_PALETTE,
  for every pk in value,
  in not,
  raise a NotImplementedError with an argument string
  if name is contained in lib.tags,
  call the method self.nodelist.render with an argument new_context, return the result.
  call the method self.style.MIGRATE_HEADING with an argument string "Will squash the following migrations:",
  define the function deactivate_all.
  instantiate class BoundaryIter with 2 arguments: self._stream and self._boundary, use it to instantiate LazyStream class, return it.
  obj is None,
  for every path in self.locale_paths,
  define the function get_public_serializer_formats.
  for every _ and nodelist in self.conditions_nodelists,
  add data to seen_data set.
  if bits is true and kwarg_format is false,
  return nothing.
  if not,
  _func_code is a string "func_code".
  use the result as an argument for the call to the function force_text, return the result.   call the function allow_lazy with 2 arguments: urlunquote and six.text_type, substitute the result for urlunquote.
  return an empty string,
  call the function warnings.warn with 2 arguments: string "Custom SQL location '<app_label>/models/sql' is deprecated, use '<app_label>/sql' instead." and RemovedInDjango19Warning.
  define the function ngettext with 3 arguments: singular, plural and number.
  call the method datetime.datetime.strptime with 2 arguments: result of the function force_str called with an argument value,
  substitute first element of the result for param and value.   if param is not in params and varkw is None,
  try,
  params is an empty list,
  if not,
  raise an base.DeserializationError exception with an argument string "Invalid model identifier: '%s'", where '%s' is replaced with model_identifier.
  raise an ValidationError with 2 arguments: value under the 'max_length' key of the self.error_messages dictionary and code set to 'max_length'.
  call the method self.data.isoformat, return the result.
  derive the class PageNotAnInteger from the InvalidPage base class.
  decorator method register.tag with an argument 'block',
  attrs is a empty list.
  compile self.match regular expression, substitute it for self.match_re.
  and convert it to lowercase, substitute the result for value.   call the function re.sub with 3 arguments: string '[-\s]+', string '-' and value, use the result as an argument for the call to the,
  if best_doublecolon_len is greater than integer 1,
  define the method a with an argument self.
  decorator function register.filter with 2 arguments string "timesince" and is_safe set to boolean False.
  append iso_input to val.
  if call to the function contains with 2 arguments: last element of result and Group, evaluates to true,
  fk_name, parent_model._meta.app_label and parent_model._meta.object_name, respectively.   otherwise if length of fks_to_parent is zero,
  if middle ends with closing and count of occurrence of closing in middle equals count of occurrence of opening in middle incremented by one,
  otherwise if cls._delegate_bytes is true,
  called with an argument item.   call the method self.add_item_elements with 2 arguments: handler and item.
  substitute self.input_type for self.input_type.   call the method __init__ from the base class of the class TextInput, called with an argument attrs.
  substitute prefix for self.prefix.
  return value under the key key of dictionary in last element of self.dicts.
  get frag attribute from found object, substitute it for found.
  substitute OPERATORS dictionary element under token key for op.
  substitute sysid for self.sysid.
  subtract third element of tupl from length of second element of tupl, substitute the result for units.
  call the method next with an argument bits, substitute the result for bit.
  get the value under the 'database' key of the options dictionary, use it as the key to get the value from the connections dictionary, substitute the result for connection.
  if not,
  define the method __deepcopy__ with arguments self and memo.
  iter_format_modules called with 2 arguments: lang and settings.FORMAT_MODULE_PATH, substitute the result for modules.   if reverse is true,
  define the function is_safe_url with 2 arguments url and host set to None.
  if lang_code is not contained in _supported and replacement is contained in _supported,
  raise an CommandError exception with an argument string '"%s" is not a valid IPv6 address.' where '%s' is replaced with self.addr.
  from django.utils import dateformat, numberformat and datetime_safe into default name space.
  substitute last element of colors for value under the 'bg' key of definition dictionary.
  return boolean False.
  call the method connection.cursor, substitute the result for cursor.
  return func.
  call the function ugettext with an argument msg_with_ctxt, substitute the result for result.
  if language_code is not containsed in self._app_dict
  define function _i18n_cache_key_suffix, with request and cache_key as arguments.
  param is None.
  from __future__ import absolute_ into default name space.
  substitute self for result.parent.
  call the method self._setup.
  try,
  kwargs is an dictionary, populated for every k and v in result of the method self.kwargs.items with:
  sum of the result of the function time.time and max_age, substitute it for 'expires' key of the previously returned dictionary.   if path is not None,
  and _, respectively.   if file_ is true,
  for every f in return value of the return value of the method chain.from_iterable called with argument:
  for every refto and refs in return value of the method references.items,
  if self.is_required is false,
  call the function os.walk with 3 arguments: root, topdown set to boolean True, followlinks set to self.symlinks,
  substitute first element of s for quote.
  called with an argument final_attrs and return value of the function force_text called with an argument value, return the result.   derive the class DateTimeBaseInput from the TextInput base class.
  can_import_settings is boolean False.
  for every path in self.locale_paths,
  call the self.initial_form_count method, return the sublist of self.forms, using previous result as start index to the end.
  from django.utils import archive into default name space.
  define the method utcoffset with 2 arguments self and dt.
  perform bitwise OR with 2 operands: previous result and result, substitute the result for result.   if result is equal to integer 0, return boolean True, otherwise return boolean False.
  call the method self.build_attrs with 2 arguments: attrs and name set to name, substitute the result for final_attrs.
  self._handler_class is None.
  compile a regex from raw string '^\s*(\w+)\s*', substitute it for WORD_PATTERN.
  if not self.error_messages is None.   derive the class ModelFormMetaclass from the DeclarativeFieldsMetaclass base class.
  call the method parser.expression with an argument bp, substitute the result for self.first.
  return value of the value._get_pk_val method and strings_only set to boolean True.   call the function m2m_value with the argument related, for every related in itterator object generated from the attribute field.name,
  define the method render with 2 arguments: self and context.
  call the function ugettext with 3 arguments, string "%(size)d byte", string "%(size)d bytes" and bytes,
  result is None.
  " normal uploaded files. Check for malicious upload activity; if there is none, report this to the Django developers.".   derive the class ChunkIter from the six.Iterator base class.
  call the method self.tag with 2 arguments name and func, return the result.
  import module sys.
  substitute the result for token.   assign self.origin, source to token.source.
  if node is not an instance of TextNode,
  try,
  strfunc is an instance of a class Name, created with 2 arguments: string "__str__" and prefix as unifunc.prefix.
  if 'step' attribute of attrs dictionary does not exists, set it to to string 'any'.
  if f.name is contained in cleaned_data,
  statement is an empty list.
  created with 2 arguments: required as boolean False and widget set to HiddenInput.   value under the MAX_NUM_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,
  try,
  if self.verbosity is greater than integer 0,
  if not,
  decorator stringfilter,
  item is a dictionary with 15 initial entries: result of the function to_unicode called with an argument title for 'title',
  if id_ is true id_attr set to return value of the function format_html, if not id_attr set to an empty string,   content set to result of the function mark_safe with an argument: string created by joining elements of outputs, with '\n' separator,   return the result.   derive the class RadioFieldRenderer from the ChoiceFieldRenderer base class.
  call the function allow_lazy with 2 arguments: unescape_entities and six.text_type, substitute the result for unescape_entities.
  append tuple with 2 elements: i and value under the ORDERING_FIELD_NAME key of form.cleaned_data dictionary to self._ordering.
  call the function re.compile with an argument raw string '^\w{3}, %s %s %s %s GMT$' formated with __D, __M, __Y and __T,
  define the method __delitem__ with 2 arguments: self and key.
  for every lineno and line is enumerated result of the method content.splitlines, called with an argument boolean True,
  substitute EscapeText for EscapeUnicode.
  call the method Field.validate with 2 arguments: self and value, return the result.
  define the method render with 2 arguments: self and context.
  raise an CommandError exception with an argument string "errors happened while running xgettext on %s\n%s",
  append callback to self._post_render_callbacks list.
  substitute the value under the 'SERVER_NAME' key of the self.META dictionary, substitute it for host.
  and result of the function force_str called with an argument safe,   use the result as an argument for the call to the function force_text, return the result.   call the function allow_lazy with 2 arguments: urlquote_plus and six.text_type, substitute the result for urlquote_plus.
  substitute pubid for self.pubid.
  level is an integer 0.
  compile regex from raw string '(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})$', substitute it for date_re.
  define the method save_new_objects with 2 arguments: self and commit set to boolean True.
  if value is None,
  if value equals self.empty_value or value is contained in self.empty_values,
  append template_dir to app_template_dirs.
  substitute model._meta for opts.
  if self.match is None or call to the method self.match_re.search with an argument f, evaluated to true,
  msg is a string 'Module "%s" does not define a "%s" attribute/class' formated with dotted_path and class_name, respectively.
  if not self.extra_context is an empty dictionary.   remove kwargs dictionary entry under the 'isolated_context' key, if it exists substitute it for self.isolated_context,
  where '%r' is replaced with options.   if option equals a string 'with',
  define the method __getstate__ with an argument self.
  skip this loop iteration.
  from django.core.exceptions import SuspiciousMultipartF into default name space.
  call the function localize with 2 arguments: output and use_l10n set to context.use_l10n, substitute the result for output.
  convert d into a integer, subtract d from it, substitute the result for m.
  return boolean False.
  and number set to number, return the result.   define the function npgettext_lazy with 4 arguments: context, singular, plural and number set to None.
  if not,
  if not,
  call the method get_runner with 2 arguments: settings and value under the 'testrunner' key of the options dictionary, substitute it for the TestRunner.
  return an string "<IfEqualNode>".
  return an instance of SafeText, created with an argument t.
  call the method self.field.widget.subwidgets with 3 arguments: self.html_name, return value of the method self.value and attrs,
  return self.DSTDIFF.
  return self._queryset.
  call the method value.decode with an argument charset, substitute the result for value.
  property decorator,
  if autoescape is true,
  define handle_field method with self, obj and field arguments.
  if else,
  m2m_convert is an lambda function with an argument n, return value is the return value of the method field.rel.to._meta.pk.to_python,
  label set to None, initial set to None, help_text set to an empty string, unpacked list args and unpacked dictionary kwargs.   call the __init__ method of the base class of the class ChoiceField, called with 7 arguments: required set to required,
  from django.utils.html import escape into default name space.
  substitute value under the field key of the self.fields dictionary for form_field.
  define the method __repr__ with an argument self.
  if first is true,
  define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
  define the method render with 2 arguments self and context.
  replace '%(size)d with bytes, substitute the result for value.   otherwise if bytes is smaller than MB,
  join self.dirpath and self.file into a file path, substitute it for orig_file.
   is exception is caught,
  call the method rlcompleter.Completer with an argument imported_objects, use the complete field of the result as an argument for the call to the method readline.set_completer.
  define the method writeString with 2 arguments self and encoding.
  with unpacked list value as an argument, return the pk field of the result.   if not,
  if bits is false,
  from django.utils.datastructures import MultiValueDict and MergeDict into default name space.
  if token.contents doesn not equals a string 'endif', raise an AssertionError exception,
  split extra_classes into words, by whitespaces, substitute the result for extra_classes.
  call the method self.__cast, if the result equals other, return boolean True, otherwise return boolean False.
  separated by newline, use it as an argument for the call to the function mark_safe, return the result.   define the method as_p with an argument self.
  streaming is boolean False.
  append site to sites.
  define the method get_unique_error_message with 2 arguments: self and unique_check.
  otherwise if query has an attribute 'items',
  append bit to split.
  convert value, self.sep and return value of the function timestamp, concatenate them, substitute the result for value.
  if value is an instance of datetime.time,
  write string "No conflicts detected to merge." to self.stdout stream.
  call the method value.encode with an argument charset, substitute the result for value.
  if i is greater than or equal to the result of the method self.initial_form_count,
  questioner is an instance of a InteractiveMigrationQuestioner class.
  return self.__name.
  if TypeError exception is caught,
  return s.
  return the value under the language_code key of the self._reverse_dict dictionary.
  use it as an argument for the call to the function os.path.normpath, substitute the result for django_dir.   if self.domain equals a string 'djangojs',
  substitute value for value.   return value converted into a boolean.
  substitute sys.stdin for fd.
  join rendered_widgets into a string, return it.
  compile regex from a string '\\(.)', substitute it for re_escaped.
  instantiate class ContextDict with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, return it.
  if not,
  define the method upload_handlers with an argument self.
  return result.
  sublist is an string '\n%s<ul>\n%s\n%s</ul>\n%s', where every '%s' is replaced with indent, sublist, indent and indent, respectively.
  get value under the 'filters' key of the config dictioanry, if it exists substitute it for filters, if not filters is None.
  error_msg is a string "Invalid template name in 'extends' tag: %r.", where '%s' is replaced with parent.
  derive the class NowNode from Node base class.
  if PY3 field of module six is boolean True,
  and help set to string 'Nominates a database to synchronize. Defaults to the "default" database.'.   define the method handle with 2 arguments: self and unpacked dictionary options.
  otherwise, if first and the last character of attrvalue are '\' charter  or first and last character of attrvalue are '"' character,
  define the method __init__ with 7 arguments: self, request, template, context set to None, content_type set to None,
  find first index of occurrence of character '-' in language, substitute it for p.
  call the method field_stream.read, substitute the result for raw_data.
  define the method __init__ with 4 arguments: self, target, expression and var_name.
  help is a string "Updates database schema. Manages both apps with migrations and those without.".
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  substitute value under the "_wrapped" key of the self.__dict__ dictionary.
  dest as a string 'symlinks', default as boolean False and help as a string 'Follows symlinks to directories when examining '   'source code and templates for translation strings.'.   call the method parser.add_argument with 7 arguments: string '--ignore', string '-i', action as a string 'append',
  call the function calendar.isleap with an argument self.data.year, if it evaluates to true,
  if self.is_bound is false,
  define the function get_language_from_request with 2 arguments: request and check_path set to boolean False.
  from django.utils.ipv6 import is_valid_ipv6_address into default name space.
  _urllib_response_moved_attributes is a list with 4 elements: result of the function MovedAttribute, called with 3 arguments:
  import module shutil.
  for every ch in input_iter,
  get the value under the key key of the self.cookies dictionary, substitute boolean True for 'secure' key of the returned dictionary.
  substitute result for self dictionary under key key.
  call the function re.compile with an argument raw string '(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))', substitute the result for re_camel_case.
  "RobotFileParser", "robotparser", "urllib.robotparser".   for every attr in _urllib_robotparser_moved_attributes,
  from django.db.migrations.loader import AmbiguityError into default name space.
  if app_labels is false,
  call the method __deepcopy__ from the base class of the class MultiWidget, with an argument memo, substitute the result for obj.
  do nothing.
  and construct as boolean False, return the result.   save.alters_data is boolean True.
  call the method self._callback_strs.update with an argument pattern._callback_strs.
  if ValidationError, renamed to e, is caught,
  define the method __enter__ with an argument self.
  use the result as an key to get the value from the LUHN_ODD_LOOKUP dictionary, sum all the results and substitute the result for odds.   sum evens and odds, if the result is divisible by integer 10, return boolean True, if not return boolean False.
  append self.data.day to the value under the self.data.month key of the self.year_days dictionary, substitute the result for doy.
  if _cached_filenames is empty and settings.USE_I18N is True,
  return final_output.
  for every basedir in basedirs,
  define the function cut with 2 arguments value and arg.
  if node is an instance of Node,
  call the method self.nodelist_empty.render with an argument context, return the result.
  replace '%s' in string "processing locale %s\n" with locale, write it to self.stdout.
  call the method self.set_cookie with 5 arguments: key, max_age as integer 0, path as path, domain as domain,
  substitute to_field_name for self.to_field_name
  call the function StringIO with an argument stream_or_string, substitute the result for stream.
  call the function bf.label_tag with an argument label, if the result is true substitute it for label, otherwise label is an empty string.
  allow_multiple_selected is boolean False.
  call the function do_ntranslate with 3 arguments: singular, plural, number and string 'ngettext', return the result.
  if not,
  call the method stream.read with an argument max_header_size, substitute the result for chunk.
  return boolean True.
  derive the class QueryDict from the base class MultiValueDict.
  for every item in qu append item.pk to a list, substitute resulting list for value under f.name key of the data dictionary.
  call the method self._close_files.
  derive the class SimpleTemplateResponse from the HttpResponse base class.
  return result.
  substitute self.current_token for t.
  call the method time.mktime with an argument tt, substitute the result for stamp.
  if string 'noreset' is not contained in opts,
  substitute varlist for self.varlist.
  append first element of e.args to not_found list.
  return saved_instances.
  evaluate the function get_system_encoding(), substitute the return vale for DEFAULT_LOCALE_ENCODING.
  if i is greater than length of subject,
  join into a file path: app_dir and string %s.%s.sql, where '%s' is replaced by opts.model_name and backend_name, respectively,
  value under the self.var_name key of the context dictionary is an empty list.
  _BROWSERS_DEPRECATED_LOCALES is an dictionary with 2 initial entries: 'zh-hans' for 'zh-cn' and 'zh-hant' for 'zh-tw'.
  sum absolute p with units an integer 1, substitute the result for prec.
  if _urlconfs has an attribute 'value',
  if var is false or whitespaces are contained in var,
  call the method self.create_select with 6 arguments: name, self.year_field, value, year_val, choices and self.year_none_value,
  insert tagname at the beginning of open_tags.
  call the BaseConverter function with BASE56_ALPHABET as argument, store the result in base56.
  for every obj in value call the function mark_safe with an argument result of the function force_text called with an argument obj,
  re.U and re.S, substitute the result for re_words.   call the function re.compile with 2 arguments: raw string '<.*?>|(.)' and bitwise OR performed with 2 operands,
  call the method self.add_filters with 2 arguments: logger and filters.
  expires as a string 'Thu, 01-Jan-1970 00:00:00 GMT', return the result.   define the method make_bytes with 2 arguments: self and value.
  define the method _resolve with an argument self.
  code is a string 'invalid'.
  call the method s.get_data, return the result.
  increment i by integer 1.
  from __future__ import unicode_literals into default name space.
  if UnicodeError, renamed to e, exception is caught,
  property decorator,
  define the method __get__ with 3 arguments: self, obj and tp.
  call the function get_default_timezone, substitute the result for self.timezone.
  if not,
  evaluate the function timesince with d, now and reversed set to boolean true as arguments, return the result.
  call the method get_language, substitute the result for language_code.
  from django.core.management.base import BaseCommand and CommandError into default name space.
  call the method s.feed with an argument value.
  if name is true, substitute it for function_name, if not get attribute '_decorated_function' from func object,
  call the method self.xml.startElement with an argument string 'natural'.
  from django.utils.xmlutils import SimplerXMLGenerator into default name space.
  raise a NotImplementedError with an argument string 'subclasses of Deserializer must provide a __next__() method'.
  substitute base for self.base.
  return yes.
  _format_cache is an empty dictionary.
  return ip_str.
  call the function token_kwargs with 3 arguments: remaining_bits, parser, support_legacy set to boolean False, substitute the result for value.
  define the function dummy with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  call the force_text function with an argument value, return the result.
  multiply offset.days with 86400, add offset.seconds to the result, return the result.
  substitute _iteritems for iteritems.
  call the function sys.exit with argument exit_code.
  define the function unordered_list with 2 arguments value and autoescape set to None.
  define the method __call__ with 2 arguments: self and f.
  call the method self.data.weekday, increment the result by an integer 1, divide it with integer 7, return the reminder of the division.
  define the function humanize with an argument dirname.
  remove entry under 'initial' key of the kwargs dictionary, substitute it for self.initial_extra if it exists,
  trans_bit is a list with an element bit.
  otherwise call the function sys.getdefaultencoding and substitute its result for fs_encoding.   if six.PY3 is true or os.name equals a string 'nt',
  substitute first header_end elements of chunk list for header.
  mark_safe function, return the result.   call the function allow_lazy with 2 arguments: slugify and six.text_type, substitute the result slugify.
  substitute max_expr for self.max_expr.
  if AttributeError exception is caught,
  for every k and v in self.choices,
  if dklen is false,
  join base an unpacked list paths into a string, get the absolute path in unicode representation of the result, substitute the result for final_path.
  trans_real._translations is an empty dictionary.
  call the method form.save, with an argument commit set to boolean False, substitute the result for obj.
  if support_legacy is false,
  if template_name is an instance of list or tuple types,
  return a list with an element tuple with 2 elements: an empty string and an empty list.
  define the function _parse_date_fmt.
  define the method visible_fields with an argument self.
  called with 2 arguments: s and string_only as boolean True.   if categories is true,
  format_html called with 3 arguments: string '<link href="{0}" type="text/css" media="{1}" rel="stylesheet" />',   return value of the function self.absolute_path called with an argument path and medium,   for every medium in media and for every path in value under the medium key of the self._css dictionary.   define the method absolute_path with 3 arguments self, path and prefix set to None.
  substitute schemes for self.schemes.
  ModelFormMetaclass and BaseModelForm.   do nothing.
  compile the regex "^([a-z0-9.-]+|\[[a-f0-9]*:[a-f0-9:]+\])(:\d+)?$", substitute it for host_validation_re.
  call the method self.get_resolved_arguments with context as an argument, substitute the result for resolved_args and resolved_kwargs.
  call the handle function with dictionary pair of elements options from the base class of the class Command.
  fill_to is an integer 7.
  for every template_name in template_name_list,
  otherwise if length of fks_to_parent is zero,
  call the method __init__ from the base class of the class SortedDict.
  get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.
  get the name key of the data dictionary, substitute it for value.
  from django.utils import six into default name space.
  return out.
  string "%s already exists, overlaying a project or app into an existing directory won't replace conflicting files",   where '%s" is replaced with new_path.   open old_path file in 'rb' mode, with file descriptor renamed to template_file,
  define the function curry with 3 arguments: _curried_func, unpacked list args and unpacked dictionary kwargs.
  substitute localized_fields for value under the 'localized_fields' key of attrs dictionary.
  substitute self.rawdata for rawdata.
  return value.
  define the method __str__ with an argument self.
  write the string "  Installing custom SQL...\n" to the standard output.
  if parent is false,
  if not,
  return string 'https' if value under the "HTTPS" key of the os.environ dictionary equals string 'on', if not return 'http'.
  call the method regex_match.group with an argument integer 1, substitute the result for lang_code.
  tt is a tuple with 9 elements: dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, result of the method dt.weekday,
  call the initialization method _html_parser.HTMLParser.__init__(self) for the base class.
  return an raw string '\"'.
  compare_to is None.
  substitute parsed for self.parsed.
  define the method ext_convert with 2 arguments: self and value.
  if pattern has an attribute '_callback_str',
  import module os.
  cls.__dispatch is an empty dictionary.
  define the method items with an argument self.
  call the function time.sleep with argument integer 1.
  get the value under log key of root.manager.loggerDict dictionary, substitute it for logger.
  define the function assertCountEqual with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  and help set to string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.   define the handle_app_config with 3 arguments self, app_config and unpacked dictionary options.
  if not,
  substitute number for value under the 'number' key of the kwargs dictionary.
  call the method signals.request_finished.send with an argument sender set to self._handler_class.
  call the __init__ method from the base class of the JsonResponse class, called with arguments: content set to data,
  for every tok in rules,
  return nothing.
  substitute the result of the function data.temporary_file_path for file.
  raise an TemplateSyntaxError exception with an argument "Could not find variable at start of %s.", replace '%s' with token.
  if func is None,
  raise an MultiPartParserError with an argument string "Invalid content length: %r", where '%r' is replaced with content_length.
  from itertools import groupby and cycle as itertools_cycle into default name space.
  call the sign method from the base class of the TimestampSigner class with an argument value, return the result
  substitute it for self.view_name.   define the method __getitem__ with arguments self and index.
  try,
  define the function save_m2m.
  self._validate_unique is boolean True.
  call the method sys.stdin.close.
  if o.microsecond is true,
  if request._post_parse_error is true,
  define the function make_naive with 2 arguments: value and timezone.
  define the method validate with arguments self and value.
  if node is not an instance of ExtendsNode,
  call the function force_text with an argument v, for every v in args, put the results in a text_args list.
  return __wrapper__.
  return current.
  for dirname in dirs,
  states is a dictionary with 2 arguments: appended list with an element instance of a class Tok, created with 3 arguments: "punct",
  try,
  and third element of the function sys.exc_info result.   return attr.
  regex is an property object of this class, with _get_regex getter and _set_regex setter function.
  for every locale in locales,
  for every index in range of integers from 0 to length of hextets, not included,
  call the method self.port.isdigit, if it evaluates to false,
  if self.number equals to self.paginator.num_pages,
  return self.msg formatted with a tuple, with elements generated from return value of the function force_text with 2 arguments:
  self.feed is an dictionary with 13 initial entries, result of the function to_unicode called with an argument title for 'title',
  define the method handle_template with 3 arguments: self, template and subdir.
  crate a file named init_path.
  substitute first element of fks_to_parent for fk.
  return None.
  BASE36_ALPHABET is a string '0123456789abcdefghijklmnopqrstuvwxyz'.
  append i_args to args, append new_args with the result.
  join app_config.path and string 'templates' into file path, substitute it for template_dir.
  convert text to an integer, substitute it for c.
  call the method connection.introspection.table_names, substitute the result for tables.
  raise an ValueError exception with an argument string 'Unable to convert %r at %r' formated with value and rest.
  from django.conf import settings into default name space.
  return val and encoded as a tuple.
  return replacement.
  return fixture_files.
  default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid time.' for 'invalid'.
  and var_arg, respectively.   if constant_arg is true,
  call the method self._assert_mutable.
  for every node in self.nodelist_loop,
  if settings.TEMPLATE_DEBUG is true,
  call the method bad_app_labels with an argument app_label,
  and absolute value of p, substitute the result for exp.   try,
  call the method self._coerce with an argument value, return the result.
  and database set to value under the 'database' key of the options dictionary.   break the loop execution.
  substitute exception for self.exception.
  msg is a string "[%s] %s\n", where '%s' are replaced with return value of the method self.log_date_time_string and formated args.
  where '%s' is replaced with tag and TemplateTagNode.mapping converted into a list.   return an instance of a TemplateTagNode class, created with an argument tag.
  if '%s' is contained in settings.TEMPLATE_STRING_IF_INVALID, invalid_var_format_string is boolean True, otherwise it is False.
  if not,
  return boolean False.
  compiled_parent.nodelist.get_nodes_by_type, called with an argument BlockNode.   call the method block_context.add_blocks with an argument blocks.
  where '%s' is replaced with parse_until elements joined into a string, separated with ', '.   define the method compile_filter_error with 3 arguments: self, token and e.
  get 'exclude' attribute from the options object, if it exists substitute it for self.exclude, if not self.exclude is None.
  from django.core import mail into default name space.
  return the value under the 'CONTENT_TYPE' of the META dictionary, if it doesnt exist return an empty string,   substitute the result for content_type.   if content_type doesnt start with string 'multipart/',
  substitute args, without the last element for args.
  substitute model._meta for opts.
  from django.conf import urls into default name space,
  if text is an empty string and length of opts equals integer 1 and first element of opts equals string 'reset',
  use the result and file_obj as arguments for the call to the method self._files.appendlist.   break the loop execution.
  substitute it for value under the 'initial' key of kwargs dictionary.   if IndexError exception is caught,
  define the method __init__ with 4 arguments: self, attrs set to None, date_format set to None and time_format set to None.
  call the BaseConverter function with BASE16_ALPHABET as argument, store the result in base16.
  if timezone has an attribute 'normalize',
  define the method add_handlers with 3 arguments: self, logger and handlers.
  define the method url_patterns with an argument self.
  return an instance of BoundField class, created with arguments self, field and name.
  define the function _is_shorthand_ip with an argument ip_str.
  substitute settings.CACHE_MIDDLEWARE_KEY_PREFIX for key_prefix.
  raise a exception of CommandError class, with string "Cannot find a migration matching '%s' from app '%s'. Is it in INSTALLED_APPS?",
  call the data.decode method with a string 'latin-1' as an argument, use the result as an argument for the call to the json.load function, return the result.
  if match is true and call to the method match.group with an argument integer 1 evaluates to true, kwarg_format is boolean True,
  from django.utils import six into default name space.
  loader is an instance of MigrationLoader class, created with 2 arguments: None and ignore_no_migrations set to boolean True.
  call the method self.extend_nodelist with 3 arguments: nodelist, compiled_result and token.
  call the connection.cursor method, substitute the result for cursor.
  create the Singer class with 2 arguments: key appended to string 'django.http.cookies' and salt set to salt, return it.
  do nothing.
  if self.verbosity is greater or equals integer 2 and fixture_files_in_dir is false,
  TOKEN_VAR is integer 1
  return boolean False.
  get 'fields' attribute from the options object, if it exists substitute it for self.fields, if not self.fields is None.
  return value.
  if use_func is true,
  and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than other or self is equal to other,   tuple with 2 elements: string '__le__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is lesser than other or self is equal to other,   tuple with 2 elements: string '__ge__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than other, for '__lt__',   list with 3 tuples: tuple with 2 elements: string '__ge__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than or equal to other,   or self is equal to other, tuple with 2 elements: string '__lt__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is lesser than or equal to other,   or self is not equal to other, tuple with 2 elements: string '__gt__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than or equal to other, for '__le__',   list with 3 tuples: tuple with 2 elements: string '__lt__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than other or self is equal to other,   tuple with 2 elements: string '__ge__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is greater than other or self is equal to other,   tuple with 2 elements: string '__le__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than other, for '__gt__',   and list with 3 tuples: tuple with 2 elements: string '__le__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is not greater than or is not equal to other,   or self is equal to other, tuple with 2 elements: string '__gt__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is greater than or not equal to other,   or self is not equal to other, tuple with 2 elements: string '__lt__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than or equal to other, for '__ge__',   convert cls to a dictionary, convert the result into a set and convert convert into a set, roots is a set of differences of the two previous sets.
  and result of the function force_str called with an argument safe,   use the result as an argument for the call to the function force_text, return the result.   call the function allow_lazy with 2 arguments: urlquote and six.text_type, substitute the result for urlquote.
  call the function templatize with 2 arguments: src_data and sliced orig_file, without first 2 elements, substitute the result for content.
  return an instance of a class WidthRatioNode, created with 4 arguments: result of the method parser.compile_filter,
  if m is false and p is lesser than integer 0,
  delete entry under the attr key of the attrs dictionary.
  call the function call_command with 6 arguments, string 'runserver', addrport as the value under the 'addrport' key of options dictionary,
  join elements of output into a string, separated with newline character,
  call the method self.add_root_elements with an argument handler.
  convert settings.FIXTURE_DIRS to a list, extend dirs by it.
  substitute self.addr without the first and last element for self.addr.
  try,
  call the function new_method_proxy with an argument operator.contains, substitute the result for __contains__.
  define the method as_json with 2 arguments self and escape_html set to boolean False.
  return an empty string.
  for every k in config, only if result of the function valid_ident called with an argument k evaluates to true.   try,
  call the method self.fields.items, for every name and field in result,
  call the function get_supported_language_variant with 2 arguments: lang_code and strict set to strict, return the result.
  priority is floating point number 1.0.
  where '%s' is replaced with app_label.   try,
  substitute value under the name key of the lib.filters dictionary for value under the name key of the temp_lib.filters dictionary.
  if not,
  define the method appendlist with 3 arguments: self, key and value.
  and app_config.label is contained in app_labels, create a tuple containing app_config.label and return value of the method   router.get_migratable_models called with app_config, connection.alias and include_auto_created set to True, append the tuple to the list all_models.   define the method model_installed with model as an argument.
  join the results into a string, return it.   if hmac has an attribute "compare_digest",
  from __future__ import unicode_literals into default name space.
  if app_label is not contained in executor.loader.migrated_apps,
  decorator function wraps with an argument func.
  if sub_tried is not None,
  define the method __init__ with 2 arguments: self and format_string.
  if not,
  do nothing.
  call the function render_value_in_context with 2 arguments: value and context, return the result.
  import module glob.
  convert result of the method self.__iter__ into a list, return element at the idx index.
  call the method self.parse_file_upload with arguments self.META and data, assign the result to self._post and self._files.
  define the method get_queryset with an argument self.
  otherwise if result of the call to the function _len with an argument cache is greater than or equal to maxsize,
  derive the class EmailInput from the TextInput base class.
  import module calendar.
  with an argument escape_html for f, for every f and e in list of tuples of self dictionary key, pair entries, return the result.   define the method as_ul with an argument self.
  blocks is a dictionary with elements: n for n.name, for every n in return value of the method,
  get translation_function attribute of the object _default, call the result with an argument eol_message, substitute the result for result.
  define the method __init__ with 4 arguments: self, name, regex and next set to None.
  get the value under the name key of the data dictionary, return it, if the previous doesnt exists, return None.
  derive the class Atom1Feed from the SyndicationFeed base class.
  substitute formfield.limit_choices_to for limit_choices_to.
  call the function six.reraise with 3 arguments: UnreadablePostError, UnreadablePostError instantiated with unpacked list e.args,
  do nothing.
  if VariableDoesNotExist exception is caught,
  call the function re.compile with 2 arguments:
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  for every i in range of integers from 0 to length of result, not included,
  try,
  return value.
  call the method zipfile.ZipFile with an argument self, substitute the result for self._archive.
  from django.utils.module_loading import import_string into default name space.
  return get_git_changeset.cache.
  if index is not None,
  if self.data and self.files are both False,
  define the method __init__ with 6 arguments: self, regex set to None, message set to None, code set to None,
  call the method self.unclosed_block_tag with an argument list with an element endtag.
  call the function force_bytes with an argument secret, substitute the result for secret.
  'App label of an application to synchronize the state.' as arguments.   call the method parser.add_argument with string 'migration_name', nargs set to charcter '?', help containing string,
  value under the TOTAL_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,
  return value.
  from django.utils.six.moves.urllib.parse import urlparse into default name space.
  get the value under the 'id' key of the self.field.widget.attrs dictionary, if the key exists substitute it for id_,
  derive the class Enclosure from the object base class.
  call the method dot_re.sub with 2 arguments: char and src, return the result.
  substitute url for value under the self.asvar key of context dictionary.
  append to list, a tuple with 2 elements: f and value under the f key of field_dict dictionary, use the resulting list as an argument,   for the creation of the instance of OrderedDict class, substitute it for field_dict.   return field_dict.
  call the method self._archive.list.
  where '%s' is replaced with bit and '%r' is replaced with current.   if current is callable object,
  raise an NotImplementedError with an argument string 'subclasses of BaseLoader must provide a load_template_source() method'.
  define the method _ipython with an argument self.
  if StopIteration exception,
  join printable representation of d into a string separated with ', ', for every d in self.dicts, substitute the result for dictreprs.
  define the method __iter__ with an argument self.
  if field_value is cotained in self.empty_values,
  from django.utils import six into default name space.
  define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwds.
  match regex datetime_re with value, substitute the result for match.
  call the self.indent method with integer 0 as an argument.
  define the method choice with 2 arguments: self and obj.
  return string "[Didn't have permission to include file]".
  raise an exception,
  derive the class DictConfigurator from the BaseConfigurator base class.
  call the method prepare_value from the base class of the class ModelMultipleChoiceField, with an argument v,
  define the function is_iterable with an argument x.
  substitute self for value.configurator.
  define the method render_node with 3 arguments: self, node and context.
  call the method parser.parse with an argument tuple with 3 elements: strings 'elif', 'else' and 'endif', substitute the result for nodelist.
  remove key element from self.keyOrder dictionary.
  call the serializer function, call the dumps method on the result with an argument obj, substitute result for data.
  if not,
  for every i and handler in enumerated iterator self._upload_handlers,
  define the method handle_fk_field with arguments self, obj and field.
  if squash is false,
  from django.db import DEFAULT_DB_ALIAS into default name space.
  call the method self._prepare_data with an argument data, substitute the result for data.
  call the method self._archive.read with an argument name, substitute the result for data.
  compile a regular expression pattern string '([a-zA-Z][-.a-zA-Z0-9:_]*)(?:\s|/(?!>))*' into a regular expression object and assign it to tagfind.
  define the function print_ with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  call the method token.contents.split, substitute the result for bits.
  if template_name_list is false,
  intrans is boolean True.
  if now is false,
  call the function warnings.warn with 2 arguments string "IPAddressField has been deprecated. Use GenericIPAddressField instead.",
  call the function getargspec with an argument func, substitute the result for params, varargs, varkw and defaults.
  if self.verbosity is greater or equal to integer 2,
  call the handle method of the base class of the Command class, with 4 arguments: string 'project', project_name, target,
  substitute boundary for self.boundary.
  call the method pulldom.parse with arguments: self.stream and return value of the method self._make_parser,
  if KeyError exception is caught,
  try,
  substitute value for value under the options key of options dictionary.
  raise an RuntimeError exception with an argument string "The method to extend accepted command-line arguments by the "
  where '%s' is replaced with token.contents.   call the method re.split with 2 arguments: raw string ' *, *' and elements of bits from 1 index to in_index index,
  call the function self.filepath.resolve with an argument context, substitute the result for filepath.
  cursor is None.
  call the function ugettext_lazy with an argument string 'Clear', substitute the result for clear_checkbox_label.
  doctring
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  convert tagname to lowercase, substitute it for tagname.
  if refto is contained in known_models,
  return an empty string.
  substitute the result for trimmed.   middle is a string '<a href="%s"%s>%s</a>' formated with url, nofollow_attr and trimmed.
  raise an ValueError exception with an argument string "make_aware expects a naive datetime, got %s", where '%s' is replaced with value.
   and field _state.adding of value under the name key of self.cleaned_data dictionary is true,   append name to construct_instance_exclude list.
  register.tag decorator,
  for key and value in result of the function six.iterlists called with an argument,
  call the method self._post_clean.
  substitute link for value under the NEXT key of the last dictionary, for value under the PREV key of the root dictionary,
  create a directory self.default_locale_path.
  if end_index is None and s_len is greater than truncate_len,
  substitute value under the 'verbosity' key of the options dictionary for self.verbosity.
  and RemovedInDjango19Warning.   call the __init__ method with unpacked list args and unpacked dictionary kwargs from the base class of the IPAddressField class.
  return data.
  if self.var is an instance of Variable class,
  property decorator,
  define the function conditional_escape with an argument text.
  if shutdown_message is true,
  define the function fields_for_model with 9 arguments: model, fields set to None, exclude set to None, widgets set to None,
  import module os.
  derive the class RegroupNode from Node base class.
  try,
  convert value to uppercase, return the result.
  try,
  where '%s' is replaced with self.__class__.__name__.   define the method flush with an argument self.
  define the method create_variable_node with 2 arguments: self and contents.
  substitute args for key.
  get the value under the 'database' key of options dictionary, use it as a index to get connections list element, store it in connection.
  if date is not None,
  if fk is not an instance of ForeignKey class, or fk.rel.to is not equal to parent_model,
  derive the class MultiWidget from the Widget base class.
  property decorator,
  for every dict_ in self.dicts,
  try,
  substitute form.cleaned_data for cleaned_data.
  if regex_match is false,
  call the function patch_response with response and cache_timeout decremented by integer 1 as arguments.
  extend collect list with settings.TEMPLATE_CONTEXT_PROCESSORS.
  if _serializers is false,
  try,
  call the function ugettext with an argument string "Please correct the duplicate data for %(field_name)s which must be unique for,
  call the method self.xml.addQuickElement with an argument string 'None'.
  call the function os.path.abspath with an argument dirpath, if it starts with return value of the method os.path.dirname,
  counters is a list containing length of handlers number of zeros.
  call the function to_python with an argument pk, substitute the result for pk.
  if KeyError exception is caught,
  d is an empty string.
  add elements from new_modules set to _cached_modules set.
  call the function force_text with an argument value, substitute the result for text_value.
  for every h in handlers,
  call the method shell.mainloop.
  from io import BytesIO into default name space.
  if app_config.models_module is None,
  nodelist.contains_nontext is boolean True.
  while i is smaller than l,
  substitute integer 0 for cache_timeout.
  call the method handler.startElement with 2 arguments: string "channel" and result of the method self.root_attributes.
  return media.
  substitute item for value under the first element of self.loopvars key of the context dictionary.
  call the function force_text with an argument path, substitute the result for path.
  derive the class DebugLexer from the Lexer base class.
  substitute value under level key of logging._levelNames dictionary for rv.
  if url is true,
  of the options dictionary and value under the 'port' key of the options dictionary converted into an integer.   if value under the 'socket' key of the options dictionary is true and values under the 'host' and 'port' keys of the options dictionary are false,
  define the function activate with an argument timezone.
  substitute value under the number key of the rhs dictionary for number_value.
  for every attr in tuple with 3 arguments: strings 'expects_localtime', 'is_safe' and 'needs_autoescape',
  return FormSet.
  define the function catalog.
  derive class MovedAttribute from the _LazyDescr base class.
  if dt.year is greater than or equal to integer 1900,
  if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
  get the value under the 'name' key of the disposition dictionary, strip it of whitespaces, substitute the result for field_name.
  call the function render_value_in_context with 2 arguments: value and context, return the result.
  derive the class BoundaryIter from the six.Iterator base class.
  if IOError exception is caught,
  for every x in sequence of integers from 0 to 7.   background is a dictionary created with elements: x appended to a string '4' for value under the key x of color_names dictionary,
  call the method self.configurator.convert with an argument value.
  import module hashlib.
  substitute the result for name.   call the function __import__ with an argument name.
  call the function timezone.get_current_timezone, substitute the result for current_timezone.
  decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
  if self._leftover is true,
  if help_texts is not None,
  return self.text.
  if self.scheme equals to string 'https', return boolean True, otherwise return boolean False.
  call the method get_supported_language_variant.cache_clear.
  remove the first element from result.
  if fields is true,
  return ip_str.
  call the method date.tzinfo.utcoffset with an argument date, substitute the result for offset.
  define the method render with 2 arguments: self and context.
  append name to exclude.
  string 'A secure pseudo-random number generator is not available on your system. Falling back to Mersenne Twister.'.   using_sysrandom is boolean False.
  raise an TypeError exception with an argument string "Non-integer base36 conversion input.".
  call the method parse from the instance of TemplateIfParser class, created with 2 arguments parser and bits, substitute the result for condition.
  year_days is a list with 13 elements: None, integer 0, integer 31, integer 59, integer 90, integer 120, integer 151, integer 181,
  if first element of message_context equals to character '"',
  define the method __bool__ with an argument self.
  call the method self.namelist, if the length of the result is not integer 1,
  from django.utils.http import cookie_date into default name space.
  value under the cache_key key of the _format_cache dictionary is None.
  string "resolve_variable() is deprecated. Use django.template. Variable(path).resolve(context) instead", RemovedInDjango20Warning,   and stacklevel set to integer 2.   call the method resolve with an argument context, from the instance of Variable class, created with an argument path.
  return decorator.
  and unpacked dictionary kwargs.   substitute streaming_content for self.streaming_content.
   if middleware has an attribute 'process_exception',
  endless loop,
  return the length of self.content.
  define the method _add_installed_apps_translations with an argument self.
  reverse elements order of values.
  substitute the result for migration.ancestry.   append migration to merge_migrations.
  call the method __new__ from the base class of the class MediaDefiningClass, called with 4 arguments: mcs, name, bases and attrs.
  try,
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  substitute allow_files and allow_folders for self.allow_files and self.allow_folders.
  call the method self.as_table, return the result.
  if first element of text equals '#',
  append tuple containing 3 elements: candidate, fixture_dir and fixture_name to list fixture_files_in_dir.
  get the directory name of filename, substitute the result for dirname.
  convert whitespace character to unicode and substitute the result for space.
  self.invoked_for_django is boolean True.
  except ImportError.
  call the method dict with 4: self.attrs, type as self.input_type, name as self.name, value as self.choice_value,
  if not,
  call the method termios.tcgetattr with argument fd, substitute the result for attr_list.
  self._ordering is an empty list.
  convert header to lowercase, use it as the key to get the value from the self._headers dictionary, return the second element of the result.
  do nothing.
  context.autoescape for 'autoescape', context.autoescape for 'current_app', context.use_l10n for 'use_l10n',   and context.use_tz for 'use_tz', substitute the result for new_context.   call the function context.get with 2 argument 'csrf_token' and None, substitute the result for csrf_token.
  do nothing.
  if number is lesser than integer 1,
  define the method create_var with 2 arguments: self and value.
  and code set to string 'required.   otherwise if self.required is false and value is false,
  self.command_stack is an empty list.
  call the method parser.parse with an argument tuple with an element string 'endverbatim', substitute the result for nodelist.
  substitute it for candidate_subs.   if not,
  substitute tagtype for self.tagtype.
  define the method list with 3 arguments: self and unpacked list args and unpacked dictionary kwargs.
  if StandardError, renamed to e, exception is caught,
  if not,
  define the method render with 2 arguments: self and context.
  define the method as_tuple with 2 arguments: self and value.
  close the process with an argument 1.
  call the self.stdout.write method with string "    Processing %s.%s model\n" as argument, with all occurrences of '%s' replaced with,
  len_item is integer 1.
  load_template_source.is_usable is boolean True.
  call the method token_string.find with an argument TRANSLATOR_COMMENT_MARK, if it evaluates to true,
  define the method get_template_source with 3 arguments: self, template_name, template_dirs set to None.
  replace '%s' in string ', HTTP response headers must be in %s format' for charset, append it to e.reason.
  join self.dirpath and self.file into a file path, return it.
  yield value under key key of self dictionary.
  replace every occurrence of newline character in value with string '<br />', use it as an argument for the call to the mark_safe,
  define the method __init__ with 4 arguments: self, content_type set to None, status set to None, reason set to None.
  call the function call_command with 3 arguments: string "createsuperuser", interactive is boolean True,
  define the method render with an argument self.
  dest set to string 'use_reloader', default set to boolean True and help is a string 'Tells Django to NOT use the auto-reloader.'.   def get_handler with 3 arguments: self, unpacked list args and unpacked dictionary options.
  define the method __init__ with 4 arguments: self, nodelist, parent_name and template_dirs set to None.
  call the method translation._catalog.copy, substitute the result for self._catalog.
  call the function _bin_to_long with an argument u perform bitwise exclusive OR with 2 operands, previous result an result,
  call the method self.has_key with an argument key, return the result.
  and return value of the function copy.deepcopy called with 2 arguments: value and memo.   return result.
  if six.PY2 is true, _BASE64_DECODE_ERROR is TypeError, if not, _BASE64_DECODE_ERROR is binascii.Error.
  call the the method __init__ from the base class of the class Context.
  if domain_part is not contained in self.domain_whitelist and method self.validate_domain_part with an argument domain_part evaluates to false,
  substitute tok for value under the groupid key of the self.toks dictionary.
  return a string "<WithNode>"
  if tried is true,
  return self.field.widget.is_hidden,
  del self._post
  TemplateSyntaxError and VariableDoesNotExist.   from django.template.base import Context, FilterExpression, Lexer, Node, NodeList, Parser, RequestContext, Origin, StringOrigin,
  from __future__ import absolute_import into default name space.
  if fg is contained in color_names,
  contextlib.contextmanager decorator,
  do nothing.
  if app_name is not contained in loader.migrated_apps,
  if character is not equal to a string '.',
  import module sys.
  define the function dec with an argument func,
  return None.
  take a tuple with 2 elements: boolean False and instance of Variable class, created with an argument constant_arg, append it to args.
  import module opera.
  substitute element at self.pos index of self.tokens for retval.
  substitute '%s' in a string "  Branch %s" with migration.name,
  substitute fist and second element of exc_info for exctype and value, respectively.
  otherwise if sep is not an instance of string type,
  if file path sql_file exists,
  call the method tpl.format with an arguments self.sysid and self.pubid.
  return value under key key of dict_ dictionary.
  take elements of token_string from second to second last element and strip the whitespaces surrounding the result,
  add model to created_models set.
  update default_attrs dictionary with attrs entry.
  call the method query_string.decode, substitute the result for query_string.
  call the method template.render with an argument context, return the result.
  call the method self.get_template_sources with 2 arguments template_name and template_dirs, for every filepath in the result,
  call the method media_property with an argument new_class, substitute the result for new_class.media.
  append loader to loaders.
  if exclude is true and f.name is contained in exclude,
  parsed is boolean True.
  call the method node.getAttribute with an argument attr, substitute the result for model_identifier.
  instantiate a class Group with 2 arguments: string "%%(%s)s" formated with param, and None, append it to result.
  call the method self.__copy__, return the result.
  call the method self._find_boundary with 2 arguments: chunk and boolean if length of chunks is lesser than self._rollback,
  self._closable_objects is an empty list.
  if ImportError, AttributeError, renamed to e, exceptions are caught,
  content.setter decorator,
  define the method __init__ with 2 arguments: self and name.
  get the value under the 'dry_run' key of the options dictionary, if the key exists substitute it for self.dry_run,
  substitute self.parent_instance.pk for value under the 'initial' key of the kwargs dictionary.
  define the method translate_token with 2 arguments: self and token.
  call the method timezone.normalize with an argument value, substitute the result for value.
  from django.core.management.base import AppCommand into default name space.
  if not,
  divide value by max_value, multiply the result with max_width, substitute it for ratio.
  value under the 'link' key of item dictionary for 'href' and "alternate" for "rel".   if value under the 'pubdate' key of the item dictionary is not None,
  convert base to lowercase, if it ends with string '.tar',
  form the tuple from the attrname converted to lowercase and attrvalue, append it to the end of attrs.
  run_syncdb is boolean True.
  from django.utils.translation import trans_null as trans.
  label_for is an empty string.
  define the method tag with an argument self.
  substitute parent_name for self.parent_name.
  import module cgi.
  decrement remaining by length of emitting.
  call the method self.can_read.acquire.
  if self.render_value is false,
  call the method context_instance.push with an argument dictionary, with the result perform,
  call the pyinotify.WatchManager method, assign the result to wm.
  call the method result.setlist with the arguments: key and value.
  define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.
  if message is not None
  define the method __getitem__ with 2 arguments: self and key.
  convert_charrefs set to convert_charrefs and dictionary **kwargs as the arguments.   if not,
  if _cookie_encodes_correctly is boolean False,
  if namespaces is true,
  if PY3 is true,
  call the function form.save_m2m.
  call the function force_text with 3 arguments: file_name, encoding and errors set to string 'replace',
  if ValidationError, renamed to e, exception is caught,
  call the method parser.add_argument with 3 arguments: string 'args', nargs set to argparse.REMAINDER and help as a string 'Various KEY=val options.'
  define the method _existing_object with 2 arguments: self and pk.
  call the function force_text with an argument value, substitute the result for value.
  if first element of data_list is contained in self.empty_values,
  for every path in data,
  __all__ is a list containing a string "runfastcgi".
  call the function split_domain_port with an argument host, assign the result to domain and port, respectively.
  inner is an instance of NonCapture, created with elements of result from start index to the end.
  do nothing.
  SINGLE_BRACE_START is a string '{'.
  get the value under the BLOCK_CONTEXT_KEY key of the context.render_context dictionary, substitute it for block_context.
  derive the class lazy_property from the property base class.
  cal the method operator.attrgetter with an argument string "__class__", use the result as an argument for the call to the function,
  append '_' to string created from first p elements of languages converted to lowercase,
  get the value under the 'id' key of the self.attrs dictionary, substitute it for id_ if the key exists, if not id_ is None.
  derive the class ConvertingDict from dict base class.
  return kwargs.
  define the method render with an argument self.
  split second element of hextet into parts by ':', append them to new_ip.
  if other is an instance of Promise class,
  define the method render with 2 arguments: self and context.
  call the function warnings.warn with an argument string "Your TEMPLATE_LOADERS setting includes %r, but your Python installation
  FILTER_ARGUMENT_SEPARATOR is a string ':'.
  if KeyError, renamed to key, exception is caught,
  call the method self.__class__ with an argument list, with elements: tuples with 2 elements: k and hard copy of list v,
  return data.
  call the method self.setFeature with 2 arguments: handler.feature_external_pes and boolean False.
  call the function _generate_cache_key with request, request.method, headerlist, key_prefix as arguments, return the result.
  res is an empty string.
  derive the class OrderedSet from the object base class.
  otherwise if t.contents equals a string 'comment',
  define the method validate with arguments self and value.
  join results of format_html called with 2 arguments: format_string and tuple with an element args, into a string,
  for every handler in handlers,
  and convert it again to the dictionary, if attrs is false, leave it alone, substitute the result for attrs.   if self.field.required is true and self.form has an attribute 'required_css_class',
  substitute func for self.func.
  define the method __len__ with an argument self.
  statements is an empty list.
  return an instance of LoaderOrigin class, created with 4 arguments: display_name, loader, name and dirs.
  substitute i for p.
  for every o in opts,
  for every c in self.children.   define the method __repr__ with an argument self.
  call the function ugettext with '0 minutes' as argument, use the result as the argument for the call to the avoid_wrapping function, return the result.
  for every app in app_labels.   call the method autodetector.arrange_for_graph with 2 arguments: changes, loader.graph, substitute the result for changes.
  return expanded_template.
  if as_ is not equal to string 'as',
  substitute self.data for value under the 'data' key of the defaults dictionary.
  substitute boolean False for ignore.   for every d in object_list,
  substitute self.field.widget for widget.
  if length of bits is lesser than integer 2,
  tuple with 3 elements: strings '%H:%M:%S', '%H:%M:%S.%f' and '%H:%M' for 'TIME_INPUT_FORMATS',   tuple with 4 elements: strings '%Y-%m-%d %H:%M:%S', '%Y-%m-%d %H:%M:%S.%f', '%Y-%m-%d %H:%M' and '%Y-%m-%d' for 'DATETIME_INPUT_FORMATS'.   define the function reset_format_cache.
  define the method __init__ with 4 arguments: self, url, length and mime_type.
  requires_system_checks is boolean False.
  call the method logger.removeHandler with an argument h.
  get the value of dictionary cache under the key cache_key, if key is not available return None, substitute it for headerlist.
  decorator deconstructible,
  call the method self.run_validators with an argument out.
  define the method __exit__ with 4 arguments: self, exc_type, exc_value and traceback.
  get value under the self.blocks dictionary under the name key, return the last element.
  define the method _get_validation_exclusions with an argument self.
  return context.
  define the method __call__ with arguments self and value.
  from django.core.exceptions import AppRegistryNotReady into default name space.
  call the method value.rjust with an argument, arg converted into a integer, return the result.
  call the dict function with 2 arguments: final_attrs and id set to string '%s_%s', where '%s' is replaced with id_ and i,
  define the method z with an argument self.
  format_locations is an empty list.
  call the self.style.HTTP_SUCCESS with an argument msg, substitute it for msg.
  get self.to_field attribute of self.parent_instance object, substitute it for value under the 'initial' key of the kwargs dictionary.
  do nothing.
  call the function datetime with an argument unpacked list kw, return the result.
  call the method __init__ from the base class of the class ContextDict, with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  if self.field.cache_choices is true,
  define the method start_object with argument self and obj.
  call the method states.items, for every state and rules in the result,
  define the method update_watch with sender defaulting to None and dictionary pair of elements kwargs.
  if fake is true,
  return lookup_view
  try,
  call the __init__ method from the base class of the HttpResponse class, with the arguments: unpacked list args and unpacked dictionary kwargs.
  define the method has_header with 2 arguments: self and header.
  if NameError exception is caught,
  call the method model_to_dict with 3 arguments: instance, opts.fields, opts.exclude and substitute the result for object_data.
  convert data into boolean and substitute it for data.
  substitute i for self.pointer.
  call the method handler.addQuickElement with 2 arguments: string 'link' and value under the 'link' key of the item dictionary.
  substitute int for integer_types.
  to the function timedelta called with an argument seconds as negative time.altzone, return the result.   if not,
  try,
  if set is empty return string '(none)' instead, append the previous to the string " Apply all migrations: ",   use the previous string as the argument for the call to the method self.style.MIGRATE_LABEL,   use the result as an argument for the call to the method self.stdout.write.   if not,
  otherwise substitute return value of the function _ called with an argument ':' for self.label_suffix.   substitute empty_permitted for self.empty_permitted.
  call the method dict.__getitem__ with 2 arguments self and key, substitute the result for value.
  try,
  substitute token.source for node.source.
  call the function popen_wrapper with an argument args, assign the result to msgs, errors and status.
  value is boolean True.
  from django.apps import apps into default name space.
  define the method __init__ with 4 arguments: self, result of the function streaming_content=(), unpacked list args,
  if not,
  return nothing.
  return value.pk.
  chars is a string 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'.
  if message is true,
  from django.utils.encoding import python_2_unicode_compatible into default name space.
  define the method end_serialization with an argument self.
  if not,
  call the method context.update with an argument unpacked_vars.
  define the method __init__ with 7 arguments: self, request, dict_ set to None, processors set to None, current_app set to None,
  from django.utils import six into default name space.
  template_with_initial is a string '%(initial_text)s: %(initial)s %(clear_template)s<br />%(input_text)s: %(input)s'.
  add model to a set, substitute the result for known_models.   pending_references is an empty dictionary.
  call the method field_stream.read, substitute the result for data.
  define the method __new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs.
  derive the class RegexValidator form the object base class.
  define the method next_token with an argument self.
  define the function sql_flush with 4 arguments: style, connection, only_django set to boolean False,
  substitute next for self.next.
  with arguments al and mn, for every al, mn in executor.loader.graph.forwards_plan method return value called with 2 arguments:   migration.app_label, migration.name, only if al equals migration.app_label.   if self.verbosity is greater than integer 0 or self.interactive is true,
  substitute value for value under the self.variable_name key of the context dictionary.
  s is an instance of MLStripper class.
  classmethod decorator,
  floor the division of i by j, use it an an index to get the element of the digits list, append the result for base36.
  if not,
  for every item in self.items,
  if not,
  method lru_cache.lru_cache with an argument maxsize set to None, as a decorator,
  from django.utils import six into default name space.
  from django.utils import six into default name space.
  if token.contents is false,
  if self is not contained in state_frame,
  try,
  round up radio, convert it to an integer and the convert it to a string and substitute the result for result.
  return Operator.
  return an empty string.
  return new_class.
  call the method chunk.find with an argument bytes string '\r\n\r\n', substitute the result for header_end.
  define the method __bool__ with an argument self.
  call the method parser.next_token, substitute the result for token.
  return an instance of SafeBytes, created with an argument data.
  with the result renamed to fp, perform the following:   read data from file fp, use the result as an argument for the call to the function plural_forms_re.search, substitute it for m.
  call the function warnings.warn with 3 arguments: string "cache_choices has been deprecated and will be removed in Django 1.9.",
  if plan is not true,
  return an instance of a NowNode class, created with an argument format_string.
  if kwargs is None,
  call the method dict.__setitem__ with 3 arguments: result, result of the function copy.deepcopy, called with 2 arguments: key,
  return an empty string.
  call the self.compare method with arguments cleaned and self.limit_value, if it evaluates to true,
  increment self.waiting_writers by integer 1,
  do nothing.
  define the method to_python with arguments self and data.
 return self._encoding.
  define the method __str__ with an argument self.
  call the function time.sleep with an argument integer 1.
  filesize_number_format with result of division of bytes by TB as an argument, substitute the result for value.   if not,
  if self.localize is true,
  substitute (i+1)-th element of list_ for next_item.
  return a string '%s...' formated with elements of x up to the index equal to the maximum value between integer 0 and 3 subtracted from limit.
  return self.find_template_cache dictionary value under the key key.
  call the function get_language, substitute the result for self.old_language.
  return result.
  substitute kwargs for self.kwargs.
  formated with 3 elements: self.class_name, self.old_method_name and self.new_method_name, self.deprecation_warning and integer 2.   call the function f with a arguments: unpacked list args and unpacked dictionary kwargs, return the result.
  substitute length and mime_type for self.length and self.mime_type.
  new_value is an empty list.
  if not self.localized_fields is None.   get 'labels' attribute from the options object, if it exists substitute it for self.labels, if not self.labels is None.
  return f.
  supported is boolean False.
  call the method self.nodelist_false.render with an arguments context, return the result.
  call the function six.unichr with value under the text key of the html_entities.name2codepoint dictionary, return the result.
  return nothing.
  join top_dir and relative_dir into a file path, substitute it for target_dir.
  out is an instance of StringIO class, created with an empty string as an argument.
  substitute doublecolon_len for best_doublecolon_len.
  substitute factory for value under '()' key of config dictionary.
  substitute first end elements of s for f.
  if every filter_name in strings 'escape' or 'safe',
  substitute new_mod for self.mod.
  if length of bits is not equal to integer 2,
  define the method full_clean with an argument self.
  help set to a string 'The file extension(s) to examine (default: "html,txt", or "js" '   'if the domain is "djangojs"). Separate multiple extensions with commas, or use -e multiple times.' and action as a string 'append'.   call the method parser.add_argument with 6 arguments: string '--symlinks', string '-s', action as a string 'store_true',
  call the method self._start_relational_field with an argument field.
  if not,
  call the method _parse_header with an argument line, assign the result to name and tuple with 2 elements: value and params, respectively.
  otherwise if self.use_ipv6 is true and _fqdn is false,
  if ch is true,
  call the function warnings.warn with 3 arguments: string "The django.forms.util module has been renamed. "
  from django.forms.formsets import everything into default name space.
  if value equals k or text_value equals return value of the function force_text called with argument k,
  if sublist_item is true,
  substitute key for result.key.
  get the 'do_not_call_in_templates' attribute of current object, if it exists and is true,
  call the method form._get_validation_exclusions, substitute the result for exclude.
  add plan_node to the shown set.
  if location is None,
  if lookup_view is contained in self._callback_strs,
  from django.utils.functional import lazy into default name space.
  define the method end_index with an argument self.
  if NotImplementedError exception is caught,
  call the function op, return the result.
  and self.choice_label, return the result.   define the method is_checked with an argument self.
  define the method tag with an argument self.
  warn_msg is a string "The translator-targeted comment '%s' (%sline %d) was ignored, because it wasn't the last item on the line.",
  if prefix is None,
  substitute old_setting for context.autoescape.
  substitute name for self.name.
  substitute title for sublist_item.
  call the function template_localtime with 2 arguments: obj and context.use_tz, substitute the result for obj.
  substitute HTMLParser from the module _html_parser for HTMLParser.
  set attr.name attribute of Module_six_moves_urllib_robotparser object to attr.
  define the method N with an argument self.
  derive the class SimpleLazyObject from the LazyObject base class.
  third element of the result of the function sys.exc_info.   define the method __init__ with an argument self.
  logger.disabled is boolean True.
  define the method __init__ with 6 arguments: self, loopvars, sequence, is_reversed, nodelist_loop and nodelist_empty set to None.
  try,
  return form.
  if key is contained in d,
  find the ending position of the regular expression match of the object match, substitute the result for k.
  call the method tuple.__getitem__ with 2 arguments: self and key, substitute the result for value.
  call the method re_camel_case.sub with 2 arguments: raw string ' \1' and value, strip the result of whitespaces from both ends,
  if check_path is true,
  call the method handler.addQuickElement with 2 arguments: string 'author' and value under the 'author_email' key of the item dictionary.
  python_2_unicode_compatible decorator,
  call the method response.add_post_render_callback with _set_response_etag as argument.
  fks_to_parent is a list containing f, for every f in opts.fields if f.name equals fk_name.
  _PROTECTED_TYPES is a tuple containing next elements, six.integer_types, type of None, type of float, Decimal, detetime.datetime,
  try,
  if AttributeError exception is caught,
  if length bits is smaller than intger 4,
  define method value_encode with self class instance and val as arguments.
  called with 2 arguments: value rounded to 1 decimal point and integer 1.   move integer 1 left for 10 bits, substitute the result for KB.
  from django.core.mail import get_connection into default name space.
  value is an instance of ConvertingDict class, created with an argument value.
  substitute value under name key of logging._handlers dictionary for handler.
  get the value under the 'database' key of the options dictionary,
  if length of bits is not equalt to integer 2,
  m2m_value is a lambda function with an argument value, return value is the result of the function smart_text called with arguments:
  do nothing.
  fill_to is an integer 8.
  define the method sync_apps with self class instance, connection and app_labels as arguments.
  filter out the results for which function os.path.isdir returns false, substitute the result for locale_dirs.   map the locale_dirs elements with mapping function os.path.basename, substitute the result for all_locales.
  call the method connection.ops.sequence_reset_sql with 2 arguments self.style and models, substitute the result for statements.
  for every w in self.widgets,
  define the method __init__ with 3 arguments: self, widgets and attrs set to None.
  if ValidationError renamed to e, exception is caught,
  if not, self.dry_run is boolean False.   get the value under the 'merge' key of the options dictionary, if the key exists substitute it for self.merge,
  self.blocks is a dictionary with elements: n for n.name, for every n in return value of the method nodelist.get_nodes_by_type,
  derive the class TokenParser form the base class object.
  in the string "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_name=%s, namespaces=%s)", replace all the occurrences of:
  assign the bits elements to tag, this_value_expr, max_value_expr, max_width, as_ and asvar.
  and pattern.default_args.   substitute lookups for the value under language_code key of the self._reverse_dict dictionary.
  define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.
  call the function ensure_echo_on.
  if not,
  call the function format_html_join twice, first time with 3 elements: an empty string, string ' {0}="{1}"'
  import module locale.
  from django.template import Template and Context into default name space.
  for every statements in sql_statements:
  if s is an instance of bytes or Promise and s._delegate_bytes is true,
  assign the result to the value under the string ".moves.urllib_request" appended to __name__ key of the sys.modules dictionary,   and to the value under the string ".moves.urllib.request" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_response from the _LazyModule base class.
  call the __call__ method from the base class of the URLValidator class, with an argument url.
  call the method regex.match with an argument date, substitute the result for m.
  '(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?(?P<tzinfo>Z|[+-]\d{2}(?::?\d{2})?)?$', substitute it for datetime_re.   define the function parse_date with an argument value.
  where '%s' is replaced with file_path.   create an object TranslatableFile with arguments: dirpath, filename and locale_dir, append it to all_files.
  raise an ContentNotRenderedError exception with an sring 'The response content must be rendered before it can be accessed.'.
  define the function strftime with 2 arguments dt and fmt.
  if labels is true and f.name is contained in labels,
  if config dictionary value under 'version' key is not equal to integer 1,
  derive the class IncludeNode from the Node base class.
  call the method setlistdefault from the base class of the class QueryDict, with arguments key and default_list, return the result.
  raise an ImportError exception.
  define the method __init__ with 3 arguments: self, include_html set to boolean False and email_backend set to None.
  if not,
  define the function get_default_timezone.
  if KeyError exception is caught,
  increment length of template_dir by one and substitute it for prefix_length.
  if kwds is true,
  if self._delegate_bytes and six.PY2 are both true,
  import module tempfile.
  if six.PY3 is true,
  call the self.style.HTTP_NOT_MODIFIED with an argument msg, substitute it for msg.
  define the function get_default_timezone_name.
  call the function var.find with an argument: '_' appended to VARIABLE_ATTRIBUTE_SEPARATOR, if the result is greater than integer -1,
  define the function media_property with an argument cls.
  tuple with 2 elements: '[' and ']', tuple with 2 elements: '&lt' and '&gt', tuple with 2 elements: '"' and '"',   and tuple with 2 elements: '\'' and '\''.   DOTS is a list with 6 elements: strings '&middot;', '*', '\u2022', '&#149;', '&bull;' and '&#8226;'.
  derive the class ChoiceFieldRenderer from the object base class.
  evaluate the method s.getvalue, return the result.
  choices is a tuple with 3 elements: tuple with 2 elements: string '1' and return value of the function ugettext_lazy,
  msgattrib_options is an list with elements: string '--no-obsolete'.
  evaluate self.stream.getvalue method, return the result.
  substitute viewname for view.
  to_delete is an empty set.
  if ch is not equal to string '<' or string '=',
  import module decimal.
  convert value into an integer.
  substitute module for the value under the format key of the _serializers dictionary.
  from django.core.management.base import BaseCommand into default name space.
  return attrs.
  if ImportError exception is caught.
  called with an argument value, return the result.   call the function allow_lazy with 2 arguments: strip_entities, six.text_type, substitute the result for strip_entities.
  where '%s' is replaced with value under the 'addrport' key of the options dictionary.   call the method m.groups, assign the result to self.addr, _ipv4, _ipv6, _fqdn and self.port, respectively.
  if error.code equals code,
  substitute initial_forms for total_forms.
  substitute new for self.mod.
  and format, call the method date on the result, return the result.   derive the class TimeField from the base class BaseTemporalField class.
  try,
  define the function get_complete_version with in argument version, defaulting to None.
  try,
  call the function _explode_shorthand_ip_string with an argument ip_str, substitute the result for ip_str.
  call the method self.add_root_elements with an argument handler.
  substitute self._regex for regex.
  raise an NotImplementedError exception with an argument string 'subclasses of BaseArchive must provide a list() method'.
  call the method middleware.process_template_response with 2 arguments: request and response, substitute the result for response.
  if opts.managed is true,
  if old_attr is None,
  call the function pformat with an argument value, return the result.
  if striped x by '.' character is not contained in ignored, for every x in ext_list put x into a set, return the resulting set.
  define the method __call__ with arguments self and value.
  call the method LocaleRegexProvider.__init__ with arguments self and regex.
  substitute self._parser for parser.
  try,
  skip this loop iteration.
  return boolean False.
  define the method utcoffset with 2 arguments self and dt.
  substitute self.form.required_css_class for the value under the 'class' key of the attrs dictionary.
  call the method connection.introspection.table_names, substitute the result for tables.
  call the function check_for_migrations with arguments app_config and connection.
  from django.utils import six into default name space.
  return is boolean True.
  substitute self.waiting_readers for t.
  define the function reset_translation.
  define the method to_language with an argument self.
  from django.http.multipartparser import MultiPartParser and MultiPartParserError into default name space.
  "project name in the current directory or optionally in the given directory.".   missing_args_message is a string "You must provide a project name.".
  convert processors into a tuple and substitute it for processors.
  if nor,
  call the __init__ method with unpacked list args and unpacked dictionary kwargs from the base class of the GenericIPAddressField class.
  meta is a string '<could not parse>'.
  if length of bits is smaller than integer 2 or second last element of bits is not equal to 'as',
  instantiate class ChunkIter with 2 arguments: self._input_data and self._chunk_size, use it to instantiate LazyStream class,
  define the method reload with an argument self.
  substitute widgets for value under the 'widgets' key of attrs dictionary.
  define the function gettext with an argument message.
  define the method _new_gnu_trans with 3 arguments: self, localedir and use_null_fallback set to boolean True.
  where '%s' is replaced with library_name and elements of tried_modules joined into a string, separated by ','.   return lib.
  if function form.has_changed evaluates to false,
  increment s_len by integer 1,
  return an instance of EscapeBytes, created with an argument, reuslt of the call to the function bytes with an argument s.
  class method decorator,
  call the method add_arguments from the base class of the class Command, with an argument parser.
  call method sort on the headerlist.
  _func_globals is a string "func_globals".
  value is an instance of ConvertingList class, created with an argument value.
  call the function is_ignored, with arguments: file_path and self.ignore_patterns, if it evaluates to true,
  substitute widget for self.widget.
  call the self.run method with unpacked dictionary options as an argument.
  and call to the method form.has_changed evaluates to false,   skip this loop iteration,
  call the method timezone.make_naive with arguments: expires, timezone.utc, substitute the result for expires.
  if self.validate_max is true, and length of self.deleted_forms subtracted from the return value of the method self.total_form_count,
  substitute object_list for self.object_list.
  get the next element of the iterable pattern_iter, assign the result for ch2 and escaped, respectively.
  "django.core.serializers.python" for "python", "django.core.serializers.json" for "json",   and "django.core.serializers.pyyaml" for "yaml".   _serializers is an empty dictionary.
  call the method self.errors.as_data, for every error for value under the filed key of the returned dictionary,
  self._files is an instance of MultiValueDict class.
  self.changed_objects is an empty list.
  substitute value for self.value.
  if field.help_text is true, substitute field.help_text for self.help_text, if not self.help_text is an empty string.
  if not,
  _version is a string "0.91".
  try,
  child_nodelists is an tuple with 2 elements: strings 'nodelist_loop' and 'nodelist_empty'.
  remove first 2 and last 2 elements from var.
  from django.conf import settings into default name space.
  import module tempfile.
  call the method self.data.replace with 2 arguments: month as integer 1 and day as integer 1, on the result call the method,
  from __future__ import absolute_import into default name space.
  from django.utils.encoding import force_st into default name space.
  append f.name to exclude.
  delete entry under the oldkey key of the cache dictionary.
  if item is contained in self.dict, return boolean True, otherwise return boolean False.
  return path an an empty string.
  if not,
  if eather one of settings.USE_I18N or settings.USE_L10N is True,
  if model is not contained in app_models for every model in return value of the connection.introspection.installed_models function return value,
  raise an SignatureExpired exception with an argument string 'Signature age %s > %s seconds', where '%s' is replaced by age and max_age, respectively.
  call the function get_resolver with an argument urlconf, on the result call the method resolve with an argument path, return it.
  sum results of method self.save_existing_objects called with an argument commit and of method self.save_new_objects,
  from xml.sax import handler into default name space.
  define the __init__ method with 7 arguments: self, func, args, kwargs, url_name set to None, app_name set to None and namespaces set to None.
  substitute SafeText for SafeUnicode.
  if transfer_encoding equals a string 'base64',
  call the method shutil.copyfileobj with 2 arguments: extracted and outfile.
  call the method self.options.update with dictionary as an argument, containing 1 element: boolean False for 'use_decimal'.
  and result of the method self.field.label_from_instance, called with an argument obj.   derive the class ModelChoiceField from the ChoiceField base class.
  self._post is an instance of QueryDict created with arguments: an empty string and encoding set to self._encoding,
  try,
  derive the class TemplateLiteral from Literal base class.
  from django.utils.six.moves import reduce into default name space.
  if StandardError, renamed to e, exception is caught,
  call the method Image.open with an argument file, on the result call the verify method
  remove first two elements from bits.
  call the function formats.localize_input with 2 arguments: value and self.format if true, if not,
  define the method emit with 2 arguments: self and record.
  define the method fixture_dirs with an argument self.
  call the function safe_join with 2 arguments template_dir and template_name, yield the result.
  derive the class EmailValidator form the object base class.
  call the function self.compress with empty list as an argument, return the result.
  raise CommandError exception with "Cannot find a migration matching '%s' from app '%s'.",
  raise an BadHeaderError exception with an argument string "Header values can't contain newlines (got %r)", where '%r' is replaced with value.
  get the value under f key of dictionary under 'filters' key of self.config dictionary,
  if extra_attrs is true,
  from django.core.management.base import AppCommand into default name space.
  call the method self.__class__ with 3 arguments: an empty string, mutable is boolean True, encoding is self.encoding, substitute the result for result.
  otherwise assign string 'ascii' to encoding.   call the method lookup with the encoding as the argument.
  append app_name to the invalid_apps.
  if ImportError exception is caught,
  return an instance of TemplateSyntaxError class with an argument msg.
  if end is not None,
  define the method prepare_value with 2 arguments: self and value.
  return self.tag_function.
  try,
  while i is lesser than num_existing and first pflen elements of i-th element of existing equals prefixed,
  call the method field.rel.to._default_manager.db_manager with an argument db on the return value call the method  get_by_natural_key,
  derive the class BooleanField from the base class Field class.
  if value is None,
  import module os.
  register.tag decorator,
  call the method self.tag with 2 arguments: function_name and compile_func.
  from django.core.serializers import base into default name space.
  from django.forms.widgets import Media,  MediaDefiningClass,  TextInput and Textarea into default name space.
  if fd is greater or equal to integer 0.
  extend final_output with alter_sql.
  join elements of self.vals into a bytes string, substitute the result for ret.
  return parent.
  if self.required is true and value is false,
  call the function force_text with an argument url, return the result.
  if recursive is true,
  call the cursor.close method.
  substitute parent_widget for self.parent_widget.
  define the method O with an argument self.
  string '%s' with self._func_path, self.args, self.kwargs, self.url_name, self.app_name and self.namespaces, respectively.   derive the class Resolver404 with Http404 as base class.
  call the method httpd.serve_forever.
  define the method compile_function_error with 3 arguments: self, token and e.
  if var starts with '_(' and var ends with ')',
   from IPython.frontend.terminal.ipapp import TerminalIPythonApp into default namespace.
  from django.conf import settings into default name space.
  flat is an empty dictionary,
  new_second_item is an empty list.
  get 'exec' attribute from the moves.builtins object, substitute it for exec_.
  import module types.
  input_type is None.
  define the function _get_model with an argument model_identifier.
  call the method call_command with string 'loaddata', string 'initial_data', verbosity set to self.verbosity,
  concatenate CheckCommand.help to string 'Deprecated. Use "check" command instead. ', substitute it for help.
  call the self.stdout.write method, with string "  Unapplying %s..." with '%s' replaced with migration and ending set to '', as arguments.
  substitute SplitDateTimeWidget for widget.
  call the method _trans.pgettext with 2 arguments context and message.
  define the method setlist with 3 arguments: self, key and list_.
  substitute __name__ field of the result for function_name, in not, substitute func.__name__ for function_name.   call the function partial with 8 arguments: generic_tag_compiler, params set to params, varargs set to varargs, varkw set to varkw,
  if auto_id is true and 'id' is not contained in attrs and 'id' is not contained in widget.attrs,
  if m is None,
  if m is not None,
  if self.form.is_bound is false,
  if package doesnt have an 'rindex' attribute,
  get "_decorated_function" attribute from func, return func if the attribute doesnt exists,
  define the method __init__ with 2 arguments: self and tokens.
  try,
  try,
  return self.
  call the method render from the base class of the class PasswordInput, called with 3 arguments: name, value and attrs,
  append child.data to the inner_text list.
  updates is an empty dictionary.
  call the fastcgi_help function with an argument string "Invalid combination of host, port, socket.", return it.
  return an empty string.
  call the method get_language, substitute the result for language_code.
  if instance is not None,
  call the method cursor.execute with sql as argument.
  define the funtion _generate_cache_header_key with key_prefix and request as arguments.
  append bit to trans_bit.
  substitute v for value under the k key of self dictionary.
  define the method encoding with arguments self and value.
  yield a tuple with 2 elements: an empty string and self.field.empty_label.
  replace '%s' in a string "Created new squashed migration %s" with writer.path, use it as an argument for the call to the method,
  call the method self.getlist with an argument key, return the result.
  call the method self.nodelist_true.render with an argument context, return the result.
  if p2.scheme, p2.hostname and p2.port equals p1.scheme, p1.hostname and p1.port, respectively, return boolean True, otherwise return boolean False.
  cut the last 6 elemetns from r, append character 'Z' to it, substitute the result for r.
  define the function find_filter with 2 arguments: self and filter_name.
  from django.utils.six.moves import _thread as thread into default name space.
  import module decimal.
  if token.token_type equals TOKEN_BLOCK and token.contents equals endtag,
  call the method context.push, with the result perform,
  if args in true,
  define the function do_if with 2 arguments: parser and token.
  return fext.
  if only_django,
  return self.data.year.
  call the function get_library with an argument taglib, substitute the result for lib.
  call the method prepare_value from the base class of the class ModelChoiceField, with an argument value, return the result.
  add to a list result of the method uploadhandler.load_handler called with arguments handler and self,   substitute resulting list for self._upload_handlers.   property decorator,
  call the function get_language, substitute the result for language_code.
  return data.
  define the method clean with an argument self.
  from django.utils.encoding import smart_text and force_text into default name space.
  with an argument message for 'message', or if not message for 'message' and error.code for 'code' in error.code is true,   if not, an empty string for 'code'.   return errors.
  return boolean False.
  define the function get_template_from_string with 3: source, origin set to None and name set to None.
  define the function ssi with 2 arguments: parser and token.
  call the method os.path.abspath with an argument dirpath, join the result and dirname into a file path, inset it at the beggining of self.locale_paths.
  join self.dirpath and self.file in a string, substitute with it '%s' in string "<TranslatableFile: %s>", return the result.
  define the method render with 4 arguments: self, name, value and attrs set to None.
  plural set to plural and number set to number, return the result.   define the function activate with an argument language.
  substitute _iterlists for lists.
  call the method gettext_module.find with 3 arguments: string 'django', path and list with an element: result of the function,
  derive the class Parser from the base class object.
  return boolean False.
  call the method warnings.warn with string '"validate" has been deprecated in favor of "check".' and RemovedInDjango19Warning as arguments.
  substitute NumberInput for widget.
  if elt is an instance of Group class,
  if settings.TEMPLATE_STRING_IF_INVALID is true,
  from django.utils import six into default name space.
  if not,
  and dictionary of arbitrary length **kwargs as arguments.   call the initialization method for the base class, _html_parser.HTMLParser.__init__ with self,
  if length of self.dicts is equal to an integer 1,
  define the function ifchanged with 2 arguments: parser and token.
  call the method language_code_re.search with an argument lang_code, if it evaluates to false,
  and self.code equals to other.code, return boolean True, otherwise return boolean False.   decorator deconstructible,
  substitute pattern.regex.pattern for parent_pat.
  input_type is a string 'email'.
  define the method r with an argument self.
  try,
  from django.db.migrations.autodetector import MigrationAutodetector into default name space.
  if not,
  for every lineno and line is enumerated result of the method content.splitlines, called with an argument boolean True,
  if IndexError exception is caught,
  if KeyboardInterrupt exception is caught,
  color_names is a tuple with 8 elements: strings 'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan' and 'white'.
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  call the function sself.__cast with an argument self, divide the result with rhs and return the reminder of the division.
  stderr set to subprocess.PIPE, shell set to boolean True, cwd set to repo_dir and universal_newlines set to boolean True,   as arguments, substitute the result for git_log.   evaluate the method git_log.communicate, substitute first element of the result for timestamp.
  call the function re.compile with an argument string "([\u0080-\uffff])", substitute the result for ustring_re.
  derive the class PasswordInput from the TextInput base class.
  return nothing.
  find position of '-' in the index of the language, substitute the result for p.
  substitute result for value under the mem_args key of the cache dictionary.
  decrement factor by one.
  append '.' to frag, append the result to used.
  call the function re.compile with an argument raw string "^\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?'))\s*", substitute the result for context_re.
  from django.db.models.fields import Field as ModelField.
  call the method self._headers.values, return the result,
  "Use django.utils.timezone instead.", RemovedInDjango19Warning and stacklevel set to 2.   derive the class FixedOffset from the tzinfo base class.
  join func.__class__.__module__ and func.__class__.__name__ into a string, separated by character '.', substitute it for self._func_path.
  while i is smaller than list_length,
  try,
  define the method dst with 2 arguments self and dt.
  define the function get_major_version with an argument version defaulting to None.
  if ValueError or TypeError exceptions are caught,
  if i is greater than or equal to the result of the method self.initial_form_count,
  return a tuple with 3 elements: TYPE, outdict and stream.
  raise an TemplateDoesNotExist exception with an argument name.
  from django.db import models and DEFAULT_DB_ALIAS into default name space.
  make target_dir directory,
  dklen is None.
  with name_str, use it as an argument to throw an CommandError exception.   if self.merge is true and conflicts is false,
  if not,
  substitute record.request for request.
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  call the method token.split_contents, substitute the result for bits.
  call the urlsplit with an argument url, convert the result into a list and return it.
  use the global variable _serializers.
  if file path absolute_path exists,
  convert self.file to string and append string '.py' to it, substitute the result for thefile.
  from itertools import dropwhile into default name space.
  return self.
  call the method self.get_handler with 2 arguments unpacked list args and unpacked dictionary options, substitute the result for handler.
  if neg is true,
  define the method _render with 2 arguments self and context.
  call the method parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and name,
  substitute self for result.parent.
  define the method tzname with 2 arguments: self and dt.
  call the function do_translate with 2 arguments: message and string 'gettext', return the result.
  increment i by integer 1,
  instantiate class Module_six_moves_urllib with an argument, string ".moves.urllib" appended to __name__,
  from django.utils.safestring import mark_safe into default name space.
  open writer.path file in write mode, with the file descriptor as fh, perform,
  if path_to_remove is file,
  call the method self.build_potfiles, substitute the result for potfiles.
  call the method __init__ with an argument initlist from the base class of the class ErrorList.
  append string '_directory' to app_or_project, substitute it for base_directory.
  for every d in last element of self.dicts,
  return an string '0'.
  if label_suffix is not None substitute label_suffix for self.label_suffix,
  define the method check_migrations with an argument self.
  if refto is contained in seen_models,
  define the method read with an argument self.
  decorator stringfilter,
  match rest string with self.DOT_PATTERN regex, substitute the result for m.
  if not,
  yield the result.   if ImportError exception is caught,
  define the method start_serialization with an argument self.
  FIELD is a field".
  if data is true, substitute it for data, otherwise data is an empty list.
  self._validate_unique is boolean False.
  if len_values is smaller than integer 1,
  do nothing.
  return an empty string,
  if fist and second element of sys.version_info equals to integer 3 and 2, respectively,
  derive the class ExtendsError from the Exception base class.
  request is None.
  substitute integers 0, 1, 2 and 3 for PREV, NEXT, KEY and RESULT, respectivley.
  define the method create_token with 3 arguments: self, token_string and in_tag.
  if values has an attribute '__len__',
  if ValueError exception is caught,
  raise a NotImplementedError with an argument string
  instantiate QueryDict class with 2 arguments: an empty string and encoding set to self._encoding, instantiate a class MultiValueDict, return them.
  if character ':' is not contained in template,
  substitute '%s' in string '<%s %s %s>' with self.__class__.__name__, self.name and self.regex.pattern, respectively,
  doublecolon_len is integer 0.
  for every node in self.nodelist,
  import dummy_threading as threading.
  define the method __init__ with 3 arguments: self, template_string and origin.
  substitute DateInput for widget.
  return wrapper.
  call the method self.add_error with 2 arguments: None and errors.
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  if six.PY2 is true and path is not an instance of six.text_type type,
  call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries:
  remove last 2 elements from bits.
  return an instance of a SpacelessNode class, created with an argument nodelist.
  internal_use_only is a boolean False.
  if strict is false,
  replace every occurrence of raw string '\\' in s with a raw string '\\\\', use the result and string "unicode_escape",
  return default.
  if header equals a string 'ACCEPT_LANGUAGE' and is_accept_language_redundant is boolean True,
  acceptable_endblocks is a tuple with 2 elements: string 'endblock' and 'endblock %s', where '%s' replaced with block_name.
  if self.data.minute equals integer 0 and self.data.hour equals integer 12,
  from django.core.management.base import BaseCommand into default name space.
  call the method handler.startElement with 2 arguments: string 'feed' and result of the method self.root_attributes.
  return WRAPPER_ASSIGNMENTS.
  append an empty string to list hextets.
  unpacked dictionary kwargs.   call the method self._set_regex with an argument regex.
  substitute value under the 'use_reloader' key of the options dictionary for use_reloader.
  return s.
  call the function _trans.get_language_bidi, return the result.
  inputs is an empty list.
  call the method __deepcopy__ with an argument memo, from the base class of the class MultiValueField, substitute the result for result.
  all_unique_checks is an empty set.
  return dec.
  from django.utils.html import escape into default name space.
  import module unicodedata.
  call the function lazy with 2 arguments: lambda function with unpacked dictionary kwargs as an argument and return value an instance of NumberAwareString class and NumberAwareString, call the result with an argument unpacked dictionary kwargs, substitute the result for proxy.
  if not,
  call the method loader.get_migration with arguments node_app and node_name, extend the migration.merged_operations with the operations field of the result.
  define the function safeseq with an argument value.
  multiply delta.days with an integer 86400 add to the result delta.seconds, if the result is greater than integer 0,
  prepend string '_' to i converted to an string, append the result to the value under the 'id' key of the attrs_plus.
  derive the class Formatter from object base class.
  call the function check_for_migrations with an arguments app_config and connection.
  define the method __init__ with 5 arguments: self, max_length set to None, min_length set to None, unpacked list args,
  define the function _bin_to_long with an argument x.
  derive the class ReferenceLocalTimezone from the tzinfo base class.
  if self.asvar is true,
  substitute Rss201rev2Feed for DefaultFeed.
  convert the result into a string and substitute it for value.   if not,
  increment level by one.
  from django.db.migrations import Migration into default name space.
  if not,
  self._cached_loaders is an empty list.
  define the method evalu with 2 arguments self and context.
  define the method __repr__ with an argument self.
  if field.rel.through._meta.auto_created is true,
  otherwise if first element of second row of args equals a string '1',
  define the funtion get_internal_wsgi_application.
  substitute model._meta for opts.
  define the method token_kwargs: bits, parser and support_legacy set to boolean False.
  and result of the function escape called with an argument line, substitute the result for i-th element of lines.   call the method mark_safe with lines joined into a string, separated by newlines as argument, return the result.
  if settings.USE_TZ is true and value is not None and call to the function timezone.is_naive with an argument value, evaluates to true,
  use the result as an argument for function call of force_bytes, use the result as an argument for calling the method hashlib.md5,   put the result in url.   substitute the '%s' in string 'views.decorators.cache.cache_header.%s.%s' with key_prefix and result of the function call,
  define the method list with an argument self.
  left justify value under the 'microsecond' key of the kw dictionary, in the field of width 6, fill the rest with '0',
  if status is not equal to STATUS_OK,
  define the function strip_tags with an argument value.
  format string '%02d' with the second element of the result, return it.   define the method U with an argument self.
  return result.
  code set to string 'max_whole_digits' and params set to a dictionary with an entry: difference of the self.max_digits and self.decimal_places, for 'max'.    return value.
  use global variables _format_cache and _format_modules_cache.
  translation._info is an empty dictionary.
  get config dictionary element under 'loggers' key, if it exists substitute it for loggers, if not, loggers is EMPTY_DICT.
  do nothing.
  call the function mark_safe with an argument output.
  where '%s' is replaced with name.   if name is not contained in parser._namedCycleNodes,
  define the method __exit__ with 4 arguments: self, exc_type, exc_value and traceback.
  call the method connection.creation.sql_for_pending_references with 3 arguments: refo, style and pending_references,
  define the function modelform_defines_fields with an argument form_class.
  locales is a list with an element locale.
  call the method handler.addQuickElement with 2 arguments: string 'link' and value under the 'link' key of the self.feed dictionary.
  if self.data.hour is greater than integer 11,
  define the function add_to_builtins with an argument module.
  format self.day_field string with name, use it as the key for the data dictionary, substitute the result for d.
  define the method __init__ with 4 arguments: self, cyclevars, variable_name set to None and silent set to boolean False.
  if not,
  if count of occurrence of ':' in ip_str is greater than integer 7,
  derive the class DateField from the base class BaseTemporalField class.
  return an empty string.
  raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,
  from io import BytesIO into default name space.
  define the method non_form_errors with an argument self.
  return integer 1.
  call the method form.add_prefix with an argument self._pk_field.name,
  if _ipv6 is true,
  substitute self.is_localized for widget.is_localized.
  if any element of self.dicts is true, return boolean True, otherwise return boolean False.
  get the value under the 'interactive' key of the options dictionary, substitute it for self.interactive.
  substitute index for self.index.
  break loop execution.
  call the method self.fields.items, for every name and field in the result,
  if match is true,
  from django.utils.translation import ugettext_lazy,  ugettext as _ and pgettext into default name space.
  insert '.' to digits at negative exponent index.
  register.tag decorator,
  if dirname is true, return dirname converted to a string and surounded by single quotes, if not return string 'absolute path'.
  decrement self.active_readers by integer 1,
  define the method __init__ with 5 arguments: self, attrs set to None, years set to None, months set to None and empty_label set to None.
  if TypeError exception is caught,
  define the method to_python with arguments self and data.
  for every format in BUILTIN_SERIALIZERS,
  substitute nodelist for self.nodelist.
  call function force_bytes with value as argument, use the result to as the result for the call to the methgod ctx.update.
  do nothing.
  define the method __init__ with arguments self, name, value, base, sysid, pubid and notation_name.
  _urllib_parse_moved_attributes is a list with 16 elemetns, all of them are the results of the call to the function MovedAttribute with different 3 string arguments.
  define the method has_changed with arguments self, initial and data.
  skip this loop iteration.
  define the method deleted_forms with an argument self.
  call the method self.clear_cdata_mode.
  call the method template.render with an argument context, substitute it for content.
  if arg is None
  get the integer representation of the i-th element of buf, return it.
  format string '%+03d:%02d' with hour and minute, append it to time_str, return the result.
  define the method id_for_label with 2 arguments: self and id_.
  for every shell in available_shells,
  substitute obj.tzinfo for self.timezone.
  if s is an instance of an object bytes.
  if e.errno equals errno.EEXIST,
  call the method parser.parse with an argument tuple with an element string 'endifchanged', substitute the result for nodelist_false.
  for every refto and refs in return value of references.items method.
  replace every occurrence of '\n' in s with '\\n'.
  try,
  if f equals to string '__pycache__',
  name is a string "_%d" formated with num_args.
  derive the class RenameMethodsBase from type base class.
  create directories from the elements in filename.
  call the function conditional_escape with an argument contents, substitute the result for contents.
  seen_data is an empty set.
  if tzinfo equals a string 'Z',
  raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,
  try,
  call the function unicodedata.normalize with 2 arguments: string 'NFC' and self._wrapped, substitute the result for text.
  substitute i for p.
  convert bytes to floating point number, substitute it for bytes.
  from django.core.management.base import BaseCommand into default name space.
  if not,
  return result and result_args.
  if name is callable object,
  raise an AttributeError with an argument attr.
  define the method stringfilter with an argument func.
  days is a tuple with 7 elements: strings 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' and 'Sun'.
  zfile is an instance of GzipFile class, created with 3 arguments: mode set to string 'wb', compresslevel set to integer 6,
  define the method render with 2 arguments: self and context.
  call the function smart_text with argument key_value, use the result as an argument for the call to the self.xml.characters method.
  replace every occurrence of '\\' in url with '/'.
  self._css is an empty dictionary.
  call the import_string with app_path as an argument, return the result.
  call the method self.find_template with 2 argumetns: template_name and template_dirs, assign the result to template, origin, respectively.
  convert x into a string and append it to a list, substitute the resulting list for out.   join elements of out into a string, separated with whitespaces, append ')' to it, append the result to '(', return it.
  otherwise if field is contained in self.fields,
  return attrs.
  derive the class TranslatorCommentWarning from the SyntaxWarning base class.
  call the method DjangoSafeDumper.add_representer with arguments decimal.Decimal and DjangoSafeDumper.represent_decimal.
  substitute the result for ipv4_re.   validate_ipv4_address is a instance of a RegexValidator class, created with 3 arguments: ipv4_re,
  substitute '%s' in a string "    - %s\n" with return value of the operation.describe method, write the result to self.stdout.
  call the method __init__ from the base class of the class MultipleHiddenInput, called with an argument attrs.
  tpl is an string "ExternalReferenceForbidden(system_id='{}', public_id={})".
  ERRORS is a dictionary with 3 initial entries: string "You don't have permission to access that port." for errno.EACCES,
  MAX_NUM_FORM_COUNT is a string 'MAX_NUM_FORMS'.
  yield key and value under key key of self dictionary.
  substitute key for result.key.
  delete _prefixes.values.
  substitute the result for final_attrs.   call the method widget.render with 3 arguments: string created by concatenation from: name, string '_' and i, widget_value,
  call the function next_space_index with 2 arguments: subject and i, substitute the result for i.
  use global variable templatetags_modules.
  if option is contained in options,
  call the function _resolve_name with 3 arguments: name list elements from the level index to the end, package and level,
  raise an TypeError exception with an argument string 'Level not an integer or a valid string: %r' formated with level.
  default set to DEFAULT_DB_ALIAS, help containing string 'Nominates a database to synchronize. Defaults to the "default" database.' as arguments.   call the method parser.add_argument with string '--fake', action containing string 'store_true', dest set to string 'fake',
  replace every occurrence of '"' in s with '&quot;'.
  call the method self.validate with an argument display_num_errors set to boolean True.
  return nothing.
  call the method self.get_resolved_arguments with an argument context, substitute the result for resolved_args and resolved_kwargs.
  substitute _BROWSERS_DEPRECATED_LOCALES for _DJANGO_DEPRECATED_LOCALES.
  and third element of result of the function sys.exc_info.   define the function import_by_path with 2 arguments dotted_path and error_prefix set to an empty string..
  clean is a lambda function with self and x as arguments, return value is length of x.
  string 'Ensure this value has at least %(limit_value)d characters (it has %(show_value)d).' and string 'limit_value', substitute the result for message.   code is a string 'min_length'
  import module datetime.
  convert self.file to a string and append '.c' string to it, substitute the result for thefile.
  derive the class CheckboxSelectMultiple from the RendererMixin and SelectMultiple base classes.
  substitute it for data.   if data is contained in seen_data,
  for every k and v in return value of the function defaults.items,
  raise KeyError exception with an argument key.
  define the function wrapper with an argument unpacked list args.
  call the function datetime.datetime with 3 arguments, d.year, d.month and d.day, substitute the result for d.
  get attribute 'pk' of the pk_value object, if it doesnt exists use pk_value, set to it self.fk.get_attname return value attribute,
  define the function serializer with 3 arguments: format, queryset and unpacked dictionary options.
  call the method handler.addQuickElement with 2 arguments: string 'link' and value under the 'link' key of the item dictionary.
  key for 'grouper' and val converted into a list for 'list', for every key and val in result of the function groupby,   called with 2 arguments: obj_list and lambda function with an argument obj and return value as a result of the function,   self.resolve_expression called with 2 arguments obj and context.   return an empty string,
  for every file in value under the 'files' key of the options dictionary.
  if self.to_field_name is true,
  derive the class Node form the base class object.
  for every template_dir in template_dirs,
  raise an ValueError exception with an argument string "dictionary doesn't specify a version".
  from django.utils import six into default name space.
  return an string "<For Node: for %s in %s, tail_len: %d%s>", substitute '%s' with elements of self.loopvars joined into a string,
  if name is not contained in data,
  try,
  return self.
  call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the item dictionary.
  call the method bytes_to_text with 2 arguments: value and self.encoding, substitute the result for value.
  call the function force_text with 3 arguments: field_name, encoding and errors as a string 'replace', substitute the result for field_name.
  call the method data.getlist with an argument name, return the result.
  call the method self._post.appendlist with 2 arguments: field_name and result of the function force_text called with 3 arguments:
  for every node in compiled_parent.nodelist,
  from django.core.management.sql import custom_sql_for_model, emit_post_migrate_signal and emit_pre_migrate_signal into default name space.
  endless loop,
  print a string "In the tar file %s the member %s is invalid: %s", where '%s' is substituted with: name, member.name and exc, respectively.
  get the value under value key of a dictionary with 4 entries: '2' for boolean True, '3' for boolean False, '2' for '2',
  try,
  replace '%s' in string '</%s>' with tag, append the result to out.
  do nothing.
  with all occurrences of '%s' replaced with app_name and model._meta.object_name, respectively.   try,
  tok is a string '"REGEX"',
  substitute opname for opfunc.__name__.
  define the function javascript_quote with 2 arguments: s and quote_double_quotes set to boolean False.
  as_form is boolean False.
  call the function six.iteritems with an argument kwargs, for every k and v in the result,
  inverse_match set to None and flags set to None.   if regex is not None,
  raise an exception,
  if value.tzinfo is None and call to the method value.tzinfo.utcoffset called with an argument value evaluates to None,
  if not,
  multiply delta.days, integer 24, integer 60 and integer 60 add delta.seconds to it, substitute the result for since.
  from django.utils import six into default name space.
  where '%s' is replaced with first element of bits.   substitute second element for bits for block_name.
  if use_workaround is boolean False,
  for every x in upload_handlers if x.chunk_size is true, append x.chunk_size to a list, substitute the result for possible_sizes.
  return integer 12.
  substitute type for class_types.
  append self.pointer to self.backout.
  substitute memoryview for memoryview.
  asvar is None.
  if ValueError or self.queryset.model.DoesNotExist exception is caught,
  call the method timezone.is_aware with an argument expires, if it evaluates to true,
  for every k2 and v2 in v,
  call the method self.render_option with 3 arguments: selected_choices, option_value and option_label, append the result to output.
  if not,
  call the method self.value.resolve with 2 arguments context and ignore_failures set to boolean True, return the result.
  if regex is an instance of six.string_types class,
  substitute ev.filename for filename.
  split ip_str into parts by ':', for every x in the result, calculate length of x, if any is smaller than integer 4,
  call the sys.exc_info function, assign the result to et, ev and tb, respectively.
  return s.
  if truncate_text is true,
  call the function to_language with an argument language, substitute it for self.__to_language.
  call the method self.is_url with an argument template, if it evaluates to true,
  if mem_args is contained in cache,
  if filename ends with string '.mo' return I18N_MODIFIED, otherwise return FILE_MODIFIED.
  get the value under the 'error_messages' key of the kwargs dictionary, if it exists substitute it for error_messages, if not,
  substitute content for self.content.
  call the method constant_re.findall with an argument t.contents, for every fmatch in the result,
  if cache_timeout equals to None,
  if not,
  if it doesnt exists return otherwise.   define the method __getitem__ with 2 arguments: self and key.
  from django.utils.text import Truncator, wrap and phone2numeric into default name space.
  substitute current_app for ns.
  define the method merge with 2 arguments self and other.
  if HTMLParseError or UnboundLocalError exceptions are caught,
  from __future__ import unicode_literals into default name space.
  raise an TemplateSyntaxError exception "'%s' is decorated with takes_context=True so it must have a first argument of 'context'",
  if LookupError exception is caught,
  call the method self._assert_mutable.
  if values under "author_name" and "author_email" keys of the item dictionary are both true,
  filemsg is a string 'file %s, ', where '%s' is replaced with origin.
  for model in return value of the method router.get_migratable_models with arguments app_config, connection.alias,
  call the function ugettext with string 'yes,no,maybe' as an argument, substitute the result for arg.
  skip this loop iteration.
  substitute nodelist_true and nodelist_false for self.nodelist_true and self.nodelist_false, respectively.
  if value is not an instance of bytes or six.text_type classes,
  return nothing.
  define the method get with 3 arguments: self, header and alternate set to None.
  "because you haven't properly specified the ENGINE setting for the database.\n see: https://docs.djangoproject.com/en/dev/ref/settings/#databases".   call the method app_config.get_models with an argument include_auto_created set to boolean True, substitute it for app_models.
  call the method self.xml.startElement with 2 arguments: string 'field' and dictionary containing 3 entries: field.name for 'name',
  get the value under the 'indent' key of the options dictionary, multiply it with level, create a string containing number of  whitespaces equal to the previous result, append it to the string containing newline character, use the result as the argument for  the call to the self.xml.ignorableWhitespace method.
  append 2 consecutive newlines to output.
  if print_ is None,
  otherwise substitute self.form.label_suffix for label_suffix.   if label_suffix and contents are both true and last element of contents is not contained in the result of the function _,
  import module sta.
  from django.template import loader,  Context and RequestContext into default name space.
  get the value under the name key of the self.initial dictionary, if it exists substitute it for initial_value,
  if not,
  if not,
  define the function wordcount with an argument value.
  substitute filter_func for value under the name key of self.filters dictionary.
  define the method unclosed_block_tag with 2 arguments: self and parse_until.
  derive the class DebugVariableNode from the VariableNode base class.
  import module warnings.
  call the method self.configurator.convert with an argument value, substitute the result for result.
  define the method __setattr__ with 3 arguments: self, name and value.
  resolved_kwargs is dictionary with elements: return value of the method v.resolve called with an argument context, for k,
  __M is a raw string '(?P<mon>\w{3})'.
  if locale is not false or None, substitute it for locales, otherwise substitute all_locales for locales.
  substitute self.default_locale_path for locale_dir.
  if not,
  from django.utils.datastructures import MultiValueDict into default name space.
  call the method value.date, return the result.
  if not,
  call the method self.as_table, return the result.
  for every app_config in return value of the method apps.get_app_configs if app_config.models_module is not None,
  errors is an empty list.
  input_type is a string 'radio'.
  perform bitwise exclusive OR on 2 operands x and y, perform bitwise OR with 2 operands: previous result and result, substitute the result for result.
  is_usable is boolean True.
  substitute kwargs for self.kwargs.
  call the function getInnerText with argument k, on the result call the method strip, for every k in keys, append the results to field_value list.
  requires_system_checks is boolean False.
   from django.utils import translation into default namespace.
  from os import path into default name space.
  define the function cleanup_url with an argument url.
  define the method validate_domain_part with arguments self and domain_part.
  remove config dictionary element under '()' key, substitute it for c.
  try,
  increment key by item.
  call the function re.compile with an argument raw string '\S', substitute it for dot_re.
  return an empty list.
  call the function localize with 2 arguments: value and use_l10n=context.use_l10n, substitute the result for value.
  if key_prefix is None,
  define the function urlsafe_base64_encode with an argument s.
  if locale_dir is false,
  define the method __init__ with 3 arguments: self, tup and hash set to hash.
  convert value into an string, convert the result into an integer and substitute it for value.
  call the method cache.clear.
  join all the results into a string separated by newlines, append the result to output.   join elements of output into a string, separated by newline characters, return the result.
  try,
  call the method apps.get_app_configs, for app_config in the result,
  if self is false,
  if url is false,
  call the method self.prepare_value with an argument initial_value, use it as the argument for the call to the function force_text,
  if name starts with an string '.',
  if value is not contained in result,
  append a tuple with 2 elements: f.name and formfield to field_list.
  if prefix is false,
  sys.stderr is an instance of NullDevice class.
  if las equals integer 1,
  settings.DEFAULT_CHARSET if the key doesnt exists and strings_only set to boolean True.   call the Model._meta.get_field method with an argument field_name, substitute the result for field.
  try,
  call the method six.unichr with an argument c, return the result.
  call the method self.source_error with 2 arguments: token.source and msg, return the result.
  append name to self._changed_data.
  define the method label_tag with 4 arguments: self, contents set to None, attrs set to None and label_suffix set to None.
  from django.utils.safestring import SafeData and EscapeData into default name space.
  if not,
  raise an ValidationError exception with 2 arguments: error_message and code as a string 'invalid'.
  call the function parse_http_date with an argument date, return the result.
  do nothing.
  return a class instance FilterNode, called with an arguments filter_expr and nodelist.
  week_number is None.
  define the method render_node with 3 arguments: self, node and context.
  if escaped is true,
  nodelist is an empty list.
  substitute _urllib_parse_moved_attributes for Module_six_moves_urllib_parse._moved_attributes.
  get the value under the format key of the _serializers dictionary, return the Deserializer filed of the result.
  parentloop is an empty dictionary.
  if kwargs is true,
  substitute use_l10n for self.use_l10n.
  call the method __init__ from the base class of the class SimpleTemplateResponse, return the result.
  call the method self.get_queryset, substitute field pk under the result at the index index for pk_value.
  from django.utils.itercompat import is_iterable into default name space.
  define the method to_python with arguments self and value.
  join elements of lines into a string, separated by newline characters, substitute it for msgs.
  return self.
  opts is a tuple created out of elements s, for every s in styles is s is in the keys of the opt_dict dictionary.
  call the function import_string with an argument dotted_path, substitute the result for attr.
  call the method n.getAttribute with string 'pk' as argument, use the result as an argument for the call to the field.rel.to._meta.pk.to_python method, substitute the result for obj_pk.
  self.paths_to_remove is an empty list.
  call the method sys.stderr.close.
  define the method __deepcopy__ with arguments self and memo.
  derive the class DebugNode from Node base class.
  substitute the value under the ns key of the resolver.namespace_dict dictionary for extra and resolver, respectively.
  string: "\nYou have unapplied migrations; your app may not work properly until they are applied.", write it to self.stdout.   call the method self.style.NOTICE with an argument string "Run 'python manage.py migrate' to apply them.\n",
  try,
  get _assertRaisesRegex attribute of the self object, call the result with 2 arguments: unpacked list args,
  if language_code is not contained in self._regex_dict,
  define the method _isdst with 2 arguments self and dt.
  raise an KeyError with an argument string 'Your dictionary lacks key \'%s\'. Please provide it, because it is required to '
  if incremental is true,
  define the function decorator with an argument klass.
  define the function slugify with an argument value.
  call the method other.__cast, substitute the result for other.
  instantiate class Module_six_moves_urllib_response with an argument, string ".moves.urllib.response" appended to __name__,
  call the method os.umask with an argument umask.
  for every model in not_installed_models,
  convert value, self.sep and return value of a method self.signature called with an argument value, concatenate them together, return the result.
  if formatter is true,
  define the method f with an argument self.
  for every digit in number coverted to a string,
  self.lineno is None.
  call the method self.choice with an argument obj, yield the result.
  called with value under the 'QUERY_STRING' key of the self.META dictionary and append it to string '?',   append the result th the self.path converted into a string and return it,   if the value under the 'QUERY_STRING' key of the self.META dictionary is false, return self.path converted into a string.   def the method get_signed_cookie with 5 arguments: self, key, default set to RAISE_ERROR, salt as an empty string,
  try,
  if not,
  call the method logging.Handler.__init__ with an argument self.
  call the function _load_serializers.
  get the value under the app_label key of the directory_created dictionary, if exists and it is false,
  if self.use_ipv6 substitute string '::1' for self.addr, if not substitute '127.0.0.1' for self.addr.
  call the method self.__deepcopy__ with an empty dictionary as an argument.
  call the method self.clean, substitute the result for cleaned_data.
  define the method bound_data with arguments self, data and initial.
  define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  substitute self.rendered_content for self.content.
  define the function get_format_modules with 2 arguments: lang set to None and reverse set to boolean False.
  if path starts with string 'http://' or string 'https://' or with string '/',
  call the method self._assert_mutable.
  define the method is_secure with an argument self.
  join tmpdir and sting 'symlink' into a file path name, substitute it for symlink_path.
  try,
  remove entry at the key key of the attrs dictionary.
  try,
  if self._read_started is true and self doesnt have an '_body' attribute.
  define the function safe with an argument value.
  from django.forms.widgets import SelectMultiple, HiddenInput, MultipleHiddenInput into default namespace.
  import module os.
  derive the class DebugParser from the Parser base class.
  do nothing.
  from django.utils.datastructures import MultiValueDict and ImmutableList into default name space.
  import module signal.
  from django.utils.six.moves.urllib.parse import urlsplit and urlunsplit into default name space.
  substitute the result for klass.   if klass is a subclass of logging.handlers.MemoryHandler base class and string 'target' is contained in config,
  if value under the 'unique_id' key of the item dictionary is not None,
  call the method pop from the base class of the class QueryDict, with arguments key and unpacked list args, return the result.
  skip this loop iteration,
  try,
  return self.limit_choices_to.
  return s.
  self.day_none_value is a tuple containing 2 elements: integer 0 and third element of empty_label.
  call the method _ExpatParser.reset with an argumen sefl.
  from django.utils.formats import localize into default name space.
  from django.template.defaultfilters import date into default name space.
  substitute template for self.template_name.
  define the method __str__ with an argument self.
  convert role to uppercase.
  import module copy.
  define the method __init__ with an argument self.
  substitute length of text for end.
  substitute source for self.source.
  for every node in nodelist,
  substitute cleaned_data for self.cleaned_data.
  call the method custom_sql_for_model with model, no_style() and connection as arguments, substitute the result for custom_sql.
  for every hextet in new_ip,
  call the method self.xml.endElement with an argument string 'natural'
  if not,
  substitute HiddenInput for widget.
  where '%s' is replaced with first element of bits.   return an instance of ExtendsNode with 2 arguments nodelist and parent_name.
  if escaped is true,
  define the method __setitem__ with 3 arguments: self, header and value.
  return nothing.
  if self.timezone is false,
  return an instance of SafeBytes, created with an argument data.
  break from the loop execution.
  append the result at the end of string '.', append it all at the end of string cache_key.   if settings.USE_TZ is True,
  join return value of the function six.text_type called with an argument self.management_form and forms into a string,
  call the method validate with an argument value from the base class of the class TypedMultipleChoiceField.
  if log is contained in child_loggers,
  call the method line.lstrip, if the result starts with TRANSLATOR_COMMENT_MARK,
  call the method self.configure_filter with an argument value under name key of filters dictionary,
  call the method f.seek with an argument integer 0.
  remove the entry under the 'fields' key of the self.json_kwargs dictionary.
  from django.db.migrations.executor import MigrationExecutor into default name space.
  if template is an instance of list or tuple types,
  return self.
  return FormSet.
  call the function os.path.dirname with an argument django.__file__, join the result into a path,
  define the method __lt__ with 2 arguments: self and other.
  from django.views.debug import ExceptionReporter and get_exception_reporter_filter into default name space.
  if length of s is greater than integer 13,
  return message.
  import module re.
  substitute cached_loaders for self._cached_loaders.
  derive the class Token form the base class object.
  self.attrs is an empty dictionary.
  if related_att is not None,
  dest set to string 'load_initial_data', default set to boolean True,   and help as a string 'Tells Django not to load any initial data after database synchronization.'   call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
  get the value under the 'csrf_token' key of the context dictionary, if it exists substitute the result for csrf_token,
  call the function bytes with an argument value, return the result.
  substitute '%s' in string '%s-%s' with self.prefix and field_name and return it, if self.prefix is true, if not return field_name.
  define the method extra_forms with an argument self.
  try,
  if not,
  if attrs is true, call the function flatatt with an argument attrs, substitute the result for attrs, if not attrs is an empty string.
  call the self.setup_environ method.
  define the function gen_filenames with an argument only_new defaulting to boolean False.
  call the method comment_re.sub with an arguments: raw string '\1' and line, strip the whitespaces surrounding the result, return it.
  define the method compile_string with 2 arguments: template_string and origin.
  default_validators is a list with an element, return value of the validators.URLValidator method.
  if self.max_value is not None,
  compile regular expression based on the string '\s*,\s*' and assign the result to cc_delim_re.
  if invalid_var_format_string is true,
  try,
  define the method __init__ with arguments: self and options set to None.
  from django.conf import settings into default name space.
  conditions_nodelists is a list containing tuple with 2 elements condition and nodelist.
  for every path in collect,
  default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string,
  call the method self.common_logger_config with 3 arguments: logger, config and incremental.
  append resolved_args to a list containing context element, substitute it for resolved_args.
  raise an TemplateSyntaxError exception with an argument string "'firstof' statement requires at least one argument".
  if c doesnt have an attribute '__call__' and types has an 'ClassType' attribute and type of c is not equal to types.ClassType,
  origin is an instance of StringOrigin class created with an argument template_string.
  if not,
  call the function re.compile with 2 arguments: string '^([a-z]):' and re.I, substitute the result for _drive_re.
  response.content is bytes empty string.
  try,
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  if not,
  for every field in return value of the function _parse_date_fmt,
  return an empty string.
  raise an ValueError with an argument string "'%s.%s' has no ForeignKey to '%s.%s'.", where '%s' is replaced with,
  if cnt is true and remained of dividing cnt with grouping is zero,
  define the method ugettext with an argument message.
  ignore is a lambda function with pattern as an argument, return value is the return value of the function fnmatch.fnmatchcase,
  'get_language_from_request', 'get_language_info', 'get_language_bidi', 'check_for_language', 'to_locale', 'templatize',   'string_concat', 'gettext', 'gettext_lazy', 'gettext_noop', 'ugettext', 'ugettext_lazy', 'ugettext_noop', 'ngettext', 'ngettext_lazy',   'ungettext', 'ungettext_lazy', 'pgettext', 'pgettext_lazy', 'npgettext', 'npgettext_lazy' and 'LANGUAGE_SESSION_KEY'.   LANGUAGE_SESSION_KEY is an string '_language'.
  set move.name attribute of the _MovedItems to move.
  call the function to_locale with an argument language, substitute it for self.__locale.
  derive the class Parser form the base class object.
  from django.db import connections,  router,  transaction and DEFAULT_DB_ALIAS into default name space.
  decrement date.month by integer 1, use the result as an key to obtain the value from the months dictionary, substitute it for month.
  decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
  substitute variable_name for self.variable_name.
  define the method __init__ with 2 arguments: self and offset.
  from django.utils.six.moves.urllib.parse import quote, quote_plus, unquote, unquote_plus, urlparse, urlencode as original_urlencode.
  where '%s' is replaced with last element of args.   as_form is boolean True
  for every model in app_models,
  call the method self.xml.startElement with arguments string 'natural' and an empty dictionary.
  call the function iri_to_uri with an argument value, use the result as an argument for the call to the force_text function,
  convert it to a string and substitute it for value under the 'cookies' key of the state dictionary.   return state.
  value under the self key of state_frame dictionary is None.
  self._container is a list containing element value.
  if max_age is not None,
  where '%d' is replaced with name, dlen subtracted from alen, and plen.   return boolean True.
  for every bit in elements of bits without the first element, call the method parser.compile_filter, with an argument bit,
  call the method lexer.lex with an arguments js, for every name and tok in the result,
  if not,
  result of the m.group method called with an argument integer 0 converted into lowercase and t, return the result.   decorator function register.filter with an argument is_safe set to boolean True.
  if settings.USE_I18N is true,
  derive the class AssignmentNode form the base class TagHelperNode.
  import module time.
  substitute stream_or_string for stream.
  derive the class Rss201rev2Feed from the RssFeed base class.
  define the method __iter__ with an argument self.
  define the method new with 2 arguments: self and values set to None.
  if value.__traceback__ is not tb,
  define the method __init__ with 2 arguments: self and name.
  substitute key for value under the KEY key of the oldroot dictionary.
  if e doesnt have an 'django_template_source' attribute,
  delete first element of bits.
  and string 'ascii' and call the function to_bytes with 2 arguments: value and string 'latin-1',   join the previous 2 results into a string, separated by ': ', append it to a list, substitute the resulting list for headers.   join headers into a string, separated by string '\r\n'.
  call the method __setitem__ from the base class of the QueryDict class, with arguments key and value.
  skip this loop iteration.
  if first nine elements of block_content is string 'verbatim' or 'verbatim ',
  if exception ValueError or TypeError is raised,
  strip whitespaces from both sides of the value, return the result.
  get the value from META dictionary, under the 'HTTP_CONTENT_TYPE' key, if the key doesnt exist,
  call the method to_python with an argument data from the base class of the class URLField, substitute the result for value.
  substitute var1 and var2 for self.var1 and self.var2, respectively.
  get the attribute '__name__' from the getattr, if it exists substitute it for m, if not, m is None.
  call the method self.iteritems, return list of results.
  define the function to_locale with an argument language.
  import module warnings.
  define the method __init__ with 5 arguments: self, regex, callback, default_args set to None and name set to None.
  for every x in sequence of integers from 0 to 7.   RESET is a string '0'.
  convert host to lowercase.
  write errors to self.stdout.
  append self.form.required_css_class to a whitespace character, append it to the value under the 'class' key of the attrs dictionary.
  try,
  if prefix is false, and self doesnt have '_callback_str' attribute,
  call the method self.configure_custom with an argument config, substitute the result for result.
  try,
  substitute new_second_item with second_item.
  skip this loop iteration.
  define the function validate_ipv46_address with an argument value.
  if las equals integer 3,
  from pprint import pformat.
  if self.allow_files is true,
   if initial equals a string 'False',
  get the value under the name key of the self dictionary, yield it as the return value of the generator.
  for every c in reversed order of candidate, convert c into an integer, sum all the results and substitute the result for evens.
  and pattern.default_args.   if pattern.name is not None,
  substitute elements of tuple boundary to end and next, respectively.
  define the method changed_data with an argument self.
  for every obj in PythonDeserializer called with arguments objects and unpacked dictionary options,
  call the executor.migration_plan method with targets as the argument, substitute the result for plan.
  call the function re.compile with an argument raw string '(?:W/)?"((?:\\.|[^"])*)"', substitute the result for ETAG_MATCH.
  if six.PY3 is true,
  if not,
  call the function to_current_timezone with an argument value, substitute the result for value.
  return property object with _media as getter function.
  if now equals to boolean True and now is not an instance of datetime.datetime,
  if not, self.coerce is an identity lambda function with an argument val.   if 'empty_value' key of the kwargs dictionary exists remove it and substitute its value for self.empty_value,
  if exception of the class Exception, as e, is caught,
  i is integer 0.
  call the function next with an argument cycle_iter, call the method resolve on the result with an argument context, substitute the result for value.
  substitute the result for s.   if not,
  from django.core.management.base import BaseCommand into default name space.
  from django.forms.widgets import everything into default name space.
  if widgets is true and f.name is contained in widgets,
  return value.
  append f.name to ignored list.
  if value is contained in self.empty_values,
  self.id_for_label is true,
  import module base64.
  if number equals integer 1,
  return output.
  return input_val.
  call the method _isdst with an argument dt from the base class of the class LocalTimezone, return the result.
  substitute value under the name key of the toks dictionary for tok.
  assign bits elements to yes, no and maybe, respectively.
  return value.
  substitute the result for value under 'mailhost' key of config dictionary.   otherwise if klass is subclass of logging.handlers.SysLogHandler class, and string 'address' is contained in config,
  return nodelist.
  call the function get_template with 2 arguments template_name and dirs, return the result.
  from django.utils._os import rmtree_errorhandle into default name space.
  call the function import_string with an argument loader, substitute the result for TemplateLoader.
  media is a property object of the current class, with _get_media as getter function.
  call the method handler.addQuickElement with 3 arguments: string 'category', an empty string and a dictionary with an entry:
  call the method re.compile with an argument raw string "&(#?[xX]?(?:[0-9a-fA-F]+|\w{1,8}));", substitute the result for _entity_re.
  substitute elements of s from the end index to end for s.
  format string '&%s;' with name, append it to self.fed.
  data is an empty dictionary.
  candidate_pat formated with candidate_subs and re.UNICODE.   candidate_subs is dictionary created from elements in return value of the function urlquote called with argument v,
  if value is an instance of six.string_types and value is not equal to ALL_FIELDS,
  call the method self.add_truncation_text with 2 arguments: elements of words joined in a string, separated with whitespaces,
  define the method __repr__ with an argument self.
  DEFAULT_DB_ALIAS for self.db.   remove the 'ignorenonexistent' key from the options dictionary, substitute the return value for self.db,
  slice the path list from the result of the match.end method as the start index to the end, substitute it for new_path.
  append string '%%(%s)s' to singular, where '%s' is replaced with t.contents.
  increment self.waiting_readers by 1.
  substitute empty_label for self.empty_label.
  import module os.
  substitute length of prefixed for pflen.
  'self' for 'rel' and value under the 'feed_url' key of self.feed dictionary for 'href'.   call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self.feed dictionary.
  if ValueError or TypeError exceptions are caught,
  return None.
  substitute string 'checked' for value under the 'checked' key of final_attrs dictionary.
  if not,
  field url of the value under the 'enclosure' key of the item dictionary for 'url',   field length of the value under the 'enclosure' key of the item dictionary for 'length',   and field mime_type of the value under the 'enclosure' key of the item dictionary for 'type'.   for every cat in value under the 'categories' key of the item dictionary,
  DELETION_FIELD_NAME is a string 'DELETE'.
  raise an ValidationError with 2 arguments: value under the 'invalid_date' key of the self.error_messages dictionary and code set to string 'invalid_date'.
  use the result as an argument for the call to the function mark_safe, return the result.   decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
  define the method __init__ with 13 arguments: self, path, match set to None, recursive set to boolean False,
  call the method clean with an argument value from the base class of the EmailField class.
  call the method self.__class__ with an argument list, with 2 elements: key and result of the function copy.deepcopy,
  raise an TemplateSyntaxError exception with an argument string "Named cycle '%s' does not exist", where '%s' is replaced with name.
  skip this loop iteration.
  call the function iri_to_uri with an argument location, return the result.
  define the method get_default_prefix with an argument cls.
  substitute result of the function urlparse with an argument ur1 for p1 and result of the function urlparse with an argument ur2 for p2.
  decorator classmethod,
  define the method cfg_convert with 2 arguments: self and value.
  for every node in self.nodelist_loop,
  for every tag in open_tags,
  from django.utils import six into default name space.
  __all__ is a tuple of strings: 'Media', 'MediaDefiningClass', 'Widget', 'TextInput', 'EmailInput', 'URLInput', 'NumberInput',
  got_request_exception is a instance of a Signal class, created with an argument providing_args as the list containing string 'request'.
  call the method RE_DATE.match with an argument value, substitute the result for match.
  call the method deactivate.
  join inner_text elements into a string.
  call the function force_str with an argument value, substitute the result for value.
  call the function template_localtime with 2 arguments: output and use_tz set to context.use_tz, substitute the result for output.
  call the method self._add_installed_apps_translations.
  call the function update_wrapper with 3 arguments: _dec, decorator and assigned as result of the function available_attrs,
  define the function decorator_from_middleware with an argument middleware_class.
  call the method __init__ from the base class of the class DebugLexer, with 2 arguments: template_string and origin.
  break the loop execution.
  if errors is true,
  define the method __contains__ with 2 arguments: self and item.
  return self.source.
  return nodelist_true_output, if true, if not call the method self.nodelist_true.render with an argument context and return the result.
  define the method _update_unget_history with arguments self and num_bytes.
  return a tuple with 2 elements: resource and string 'egg:%s:%s', where '%s' is replaced with app_config.name and pkg_name, respective.
  force_bytes function, use the result as the argument for the call to the hashlib.mdb function, store the result in url.   substitute the '%s' in string 'views.decorators.cache.cache_page.%s.%s.%s.%s' with key_prefix, method,
  return result.
  "pulls out all strings marked for translation. It creates (or updates) a message "   "file in the conf/locale (in the django tree) or locale (for projects and "   "applications) directory.\n\nYou must run this command with one of either the "   "--locale, --exclude or --all options.".    requires_system_checks is boolean False.
  import code.
  join self.dirpath and thefile in a string, substitute the result for work_file.
  call the method self.as_widget with 3 arguments: instance of a class Textarea, attrs and unpacked dictionary kwargs, return the result.
  break from the loop execution.
  for every name in self.fields,
  return boolean False.
  value is an empty list.
  define the method language with an argument self.
  decorator function register.filter with an argument is_safe set to boolean True.
  if Exception, renamed to e, exception is caught,
  if value is not None,
  if c doesnt have an attribute '__call__', and types has an attribute 'ClassType', and type of c is not equal to types.ClassType,
  call the method self.create_token with 2 arguments bit and in_tag, append the result to result.
  do nothing.
  define the method __init__ with 2 arguments: self and key_to_list_mapping set to an empty tuple.
  call the function errors.error_dict.items, for every field and messages in the result,
  if six.PY2 is true and path is not an instance of byes type,
  for every replacement in the resulting set,   replace every occurrence of replacement in value for an empty string, substitute the result for value.
  substitute the tuple containing 2 elements p_pattern and pattern for value under the pattern.namespace key of the namespaces dictionary.
  call the function getargspec with an argument func, substitute the result for args, varargs, varkw and defaults, respectively.
  substitute doublecolon_start for best_doublecolon_start.
  try,
  call the method loader.detect_conflicts, substitute the result for conflicts.
  substitute params for self.params.
  daemonize is boolean False.
  append opts.virtual_fields to opts.many_to_many, for every f in the result,
  from django.utils.encoding import force_text and DEFAULT_LOCALE_ENCODING into default name space.
  raise an exception.
  call the method parser.compile_filter with an argument second element for bits, substitute the result for parent_name.
  call the method self._get_scheme, return the result.
  concatenate name and string '_id', return it.
  define the method __init__ with 2 arguments self and dt.
  define the method copy with an argument self.
  call the function hook with an argument entry, substitute the result for finder.
  if second element of sys.version_info is smaller than or equal to integer 1,
  append value to the self._closable_objects list.
  define the method add_initial_prefix with 2 arguments: self and field_name.
  import re module.
  append string '_0' to id_.
  append value to self._closable_objects list.
  call the function deactivate_all.
  convert initial and data into boolean, if they are not equal return boolean True, if they are return boolean False.
  and re.VERBOSE, substitute the result for smart_split_re.   define the function smart_split with an argument text.
  import module sys.
  import module re.
  if not,
  if default is true and RAISE_ERROR is false,
  choices is an property object of this class where _get_choices is a getter and _set_choices is a setter function.
  call the method self.render, return the result.
  substitute has_header for __contains__.
  define the function verbatim with 2 arguments: parser and token.
  for every format in self.input_formats,
  call the method value.rsplit with arguments character '@' and integer 1, assign the result to user_part and domain_part, respectively.
  assign the settings.SECURE_PROXY_SSL_HEADER to header and value, respectively.
  append value under the key v of background dictionary to code_list.
  if settings.USE_X_FORWARDED_HOST is true and 'HTTP_X_FORWARDED_HOST' is contained in self.META.
  define the method render with 2 arguments: self and context.
  call the function self.format_subject with an argument subject, substitute the result for subject.
  format truncate with a dictionary with an element: text for 'truncated_text', return the result.
  if AttributeError exception is caught,
  increment year by integer 1900.
  if not self._mutable,
  from pprint import pformat into default name space.
  if not,
  define the method __init__ with 4 arguments: self, form, field and name.
  call the method os.chdir with an argument our_home_dir.
  or if it doesnt exists if exclude is None.   raise an ImproperlyConfigured with an argument string "Calling modelformset_factory without defining 'fields' or 'exclude',
  if match is true,
  import module sys.
  call the method self._populate.
  property decorator,
  derive the class LoadNode from Node base class.
  __all__ is an list containing strings: 'activate', 'deactivate', 'override', 'deactivate_all', 'get_language',
  from django.core.management.utils import handle_extensions into default name space.
  add j and integer 1, substitute the result for i.
  if not,
  if not,
  define the method eval with 2 arguments self and context.
  call the method handler.startElement with 2 arguments: string "item" and result of the method self.item_attributes with an argument item.
  where '%s' is replaced with name.   args is an empty list.
  if PY3 is true,
  define the method timestamp with an argument self.
  declared_fields is an instance of OrderedDict class.
  yield emitting as result of the generator.
  substitute CheckboxInput for widget.
  call the method date.weekday, use the result as an key to obtain the value from the days dictionary, substitute it for dow.
  call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, substitute the result for res.
  and self.format_string, return the result.   derive the class SpacelessNode from Node base class.
  import module re.
  break the loop execution.
  define the method __init__ with 4 arguments: self, parser, unpacked list args and unpacked dictionary kwargs.
  substitute the result for data.   if AttributeError exception is caught,
  if ImportError exception is caught,
  get maximal element from roots and substitute it for root.
  remove all the elements from space index of line.
  define the function deactivate.
  return exit_code.
  for every loader in self._loaders,
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  convert bit to an integer and use it as index to obtain an element for list current, substitute it for current.
  substitute i-th element of tokens for token.
  call the function os.path.expanduser with an argument pythonrc, substitute the result for pythonrc.
  define the function sql_custom with 3 arguments: app_config, style and connection.
  call the function get_language_from_path with an argument request.path_info, substitute it for lang_code.
  get the type of self object, call the __bool__ method on the result with an argument self, return the result.
  to the negative length of the dir_suffix as the end index and append it to a list,   if p doesnt end with dir_suffix, append p to a list, substitute resulting list for norm_patterns.   all_files is an empty list.
  if field is not None,
  and unpacked dictionary kwargs.   call the function force_text with an argument self.value, substitute the result for self.value.
  call the function new_method_proxy with an argument getattr, substitute the result for __getattr__.
  if not,
  define the method is_ajax with an argument self.
  self._done is boolean True.
  get the next element of the self._producer iterable, substitute it for output.
  call the method d.quantize with 3 arguments: exp, ROUND_HALF_UP and instance of Context class created with prec as prec,
  return result.
  define the function build_instance with 3 arguments: Model, data and db.
  call the method gettext_module.NullTranslations, substitute the result for _active.value.
  called with an argument decorator.   if decorator has an attribute 'process_view',
  property decorator,
  decrement l by integer 1, multiply it with hlen, subtract the result from dklen, substitute the result for r.
  decorator stringfilter,
  call the method self._isdst with an argument dt, use it as an key to get the value from the _time.tzname dictionary, return it.
  raise a ValidationError exception with arguments self.message and code set to self.code.
  compile the handle.read in mode 'exec' source is read from file pythonrc, execute the compiled script with imported_objects variables.
  define the method __repr__ with an argument self.
  is_templatized is boolean True.
  call the function _ with an argument string 'midnight', return the result.
  return dec.
  substitute the result for context_match.   call the method context_match.group with an argument integer 1, substitute the result for message_context.
  break from the loop execution.
  if e doesnt have an 'django_template_source' attribute,
  call the function lazy with 2 arguments: func and resultclass, call the result with an argument, unpacked dictionary kwargs,
  from django.utils import six into default name space.
  formated with 3 elements: class_name, old_method_name and new_method_name, deprecation_warning and integer 2.   set new_method_name attribute of the base object to old_method.
  return first end elements of list chunk.
  register.tag decorator,
  if old_field_name is true,
  define the method splitext with arguments self and the_path.
  raise an AttributeError exception with an argument string "You cannot set the upload handlers after the upload has been processed.".
  if sum of the top and self.orphans is greater or equal to self.count,
  remover the entry under the 'type' key of the attrs dictionary, substitute it for self.input_type, if the key doesnt exists,
  separated by result of the function _ called with an argument string ', ', for every i in list_ without last element,   result of the function force_text called with an argument last_word, result of the function force_text called with an argument:   last element of list_.   call the function allow_lazy with 2 arguments: get_text_list and six.text_type, substitute the result for get_text_list.
  do nothing.
  substitute prefix for self.prefix.
  get the value under the 'no_startup' key of the options dictionary, if it evaluates to false,
  if schemes is not None,
  raise an TemplateSyntaxError exception with an argument string "'ssi' tag takes one argument: the path to the file to be included".
  if self.__stattag_text contains newline character,
  call the function force_text with an argument bit, append the result to bits.
  if value is false or value is not an instance of list or tuple types,
  try,
  if name equals string "_wrapped",
  call the method now.decode with an argument string 'utf-8', substitute the result for now.
  call the function io.open with orig_file and encoding set to settings.FILE_CHARSET, with the result renamed to fp,
  derive the class FixUnicode from the base class fixer_base.BaseFix.
  var_obj is an instance of Variable class, created with an argument var.
  if args in None of boolean False, substitute it for an empty dictionary.
  substitute key for result.key.
  if Exception exception is caught.
  if ValueError exception is caught,
  html4_singlets is a tuple with 9 elements: strings 'br', 'col', 'link', 'base', 'img', 'param', 'area', 'hr' and 'input'.
  define the method handle with self class instance and dictionary pair of elements options as arguments.
  return code.
  call the function format_html with an argument empty string, return the result.
  "Use django.utils.timezone.get_default_timezone instead." and RemovedInDjango19Warning.   call the method tzinfo.__init__ with an argument self.
  split t.contents by '|' symbol, substitute the result for parts,
  convert value into boolean and substitute it for value.
  define the method rendered_content with an argument self.
  define the method strftime with 2 arguments: self and fmt.
  call the function _import_module with an argument self.mod, return the result.
  substitute SplitHiddenDateTimeWidget for hidden_widget.
  call the function self._resolve_lookup with an argument context, substitute the result for value.
  and number set to number, return the result.   define the function ungettext_lazy with 3 arguments: singular, plural and number set to None.
  define the method clean with an argument self.
  root is a list with elements: root, root, None and None.
  if PY3 is true,
  return self._choices.
  from django.utils import six into default name space.
  for every field, initial and data in list of tuples tuple containing elements of self.fields, initial and data, respectively,
  convert self into a string and return it.
  raise an exception.
  constant_string is a raw string "(?:%(i18n_open)s%(strdq)s%(i18n_close)s|%(i18n_open)s%(strsq)s%(i18n_close)s|%(strdq)s|%(strsq)s)",
  define the method __nonzero__ with an argument self.
  assign the result to the value under the string ".moves.urllib_parse" appended to __name__ key of the sys.modules dictionary,   and to the value under the string ".moves.urllib.parse" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_error from the _LazyModule base class.
  call the method parser.parse with an argument tuple with an element string 'endfor', substitute the result for nodelist_empty.
  call the method archive.extract with arguments: filename and tempdir.
  return None.
  substitute value under the 'liveserver' key of the options dictionary for value under the 'DJANGO_LIVE_TEST_SERVER_ADDRESS' key of the os.environ dictionary.
  for every form in self call the form.as_table method, join the results in a string, separated by an empty string.
  help is a string, "Prints the custom table modifying SQL statements for the given app name(s).".
  zip self.loopvars and item is a list to tuples, convert the result to an dictionary, substitute it for unpacked_vars.
  if self.is_bound is true,
  raise an ValueError exception with an argument e.
  code set to an string 'invalid_choice' and dictionary params with an entry: value for 'value'.   define the method valid_value with arguments self and value.
  define the method clean with 2 arguments: self and value.
  try,
  replace '%s' in string 'django_%s_template_' with self.app_or_project.
  d is an instance of Decimal class created with an argument input_val.
  join app_dir and string 'sql' into a file path, use the result as an argument for the call to the function os.path.normpath,
  return kwargs.
  derive the class SortedDict from the dict base class.
  if not_installed_models is true,
  call the function ugettext_lazy with an argument value, return the result.
  define the method __next__ with an argument self.
  create a list out of open_tags elements form (i+1)-th index to the end, substitute it for open_tags.
  define the method configure_logger with 4 arguments: self, name, config, incremental set to boolean False.
  call the method match.group with 2 arguments: strings "var" and "constant", substitute the result for var and constant, respectively.
  get the value under the 'id' key of the self.attrs dictionary, return it, if the key doesnt exists return an empty string.
  define the method render with 2 arguments: self and context.
  substitute nonlocal_root for tuple root.
  join statements into a string, separated by newlines, return it.
  self.namespace and self.regex.pattern, respectively. return it.   define the method _populate with an argument self.
  resolved_path is an empty list.
  import module datetime.
  if not,
  substitute module for the value under the format key of the serializers dictionary.
  get the value under the 'HTTP_X_FORWARDED_HOST' key of the self.META dictionary, substitute the result for host.
  from django.utils.formats import get_format into default name space.
  sum value and arg, return the result.
  call the function _ with an argument string 'PM', return the result.
  join elements of base36 into a string, return it.
  if event equals a string "START_ELEMENT" and node.nodeName equals a string 'object',
  if eather of settings.USE_I18N or settings.USE_L10N is True, set is_accept_language_redundant to True.
  if PY3 is true,
  for every widget in self.widgets:,
  call the function _ with an argument string 'a.m.', return the result.
  define the method __init__ with 15 elements: self, title, link, description, language set to None, author_email set to None,
  return WSGIHandler object.
  if ValueError exception is caught,
  call the function get_template with an argument parent, return the result.
  call the method get_accessor_name on the result, substitute all occurrences of '+' in the result with an empty string, return it.   define the method save_new with 3 arguments: self, form and commit set to boolean True.
  if query_string is an instance of bytes,
  for every attr in self.child_nodelists,
  otherwise if value is not an instance of list ot tuple type,
  return func.
  substitute filter_expr and nodelist for self.filter_expr and self.nodelist, respectively.
  if commit is false,
  decorator function receiver with an argument setting_changed,
  call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
  define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwds.
  decorator stringfilter,
  substitute model._meta for opts.
  get the value under the e.errno key of the ERRORS dictionary, substitute it for error_text.
  define the function wrapped with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  raise an exception parser.error_class with an argument string "Not expecting '%s' as infix operator in if tag.",
  try,
  call the function iter with an argument patterns.
  substitute return value of the method obj._get_pk_val for obj_pk.
  substitute the result for the value under the NON_FIELD_ERRORS key of form._errors dictionary.   delete entry from form.cleaned_data dictionary under the field key.
  self.render_context is a instance of RenderContext class.
  if the key doesnt exists substitute None for self.selected_fields.   remove the 'use_natural_keys' key from the options dictionary and substitute it for self.use_natural_keys,
  call the method self.attrs.copy, substitute the result for obj.attrs.
  define the method render with 2 arguments: self and context.
  if value under the name key of the sys.modules dictionary is not None, return boolean True, otherwise return boolean False.
  replace '%s' in string "Running pre-migrate handlers for application %s" with app_config.label, print it to the standard output.
  substitute first element of level for common_ancestor.
  replace all occurrences of "'" with "\\'" in the previous result, return the result.   decorator function register.filter with an argument is_safe set to boolean True.
  if decimal_pos is not None,
  raise an CommandError exception with an argument string "currently makemessages only supports domains 'django' and 'djangojs'".
  define the method scheme with an argument self.
  EventHandler.modified_code is FILE_MODIFIED.
  return value.
  call the function force_bytes with an argument key_salt, substitute the result for key_salt.
  raise an ImproperlyConfigured exception with argument string '"%s" is not a valid regular expression: %s',
  define the method __repr__ with an argument self.
  from django.utils.encoding import force_bytes, force_str and force_text into default name space.
  define the method __init__ with 3 arguments: self, template_string and origin.
  for every lib in builtins,
  for every model in app_models,
  result is an integer 0.
  call the method handler.addQuickElement with 2 arguments: string 'uri' and value under the 'author_link' key of the self.feed dictionary.
  call the method o.isoformat substitute the result for r.
  if app_config.models_module is None,
  if sub_match is true,
  call the method self.fields.items, for every name and field in return value,
  import module posixpath.
  for every i in self.years append tuple containing i and i elements into a list, substitute the resulting string for choices.
  derive the class override from the object base class.
  strip message_context of '"' characters from both ends, substitute the result for message_context.
  call the function contains with 2 arguments: elt and inst, if it evaluates to true,
  substitute method for value under the funcname key of the dictionary under the klass key of the cls.__dispatch dictionary.
  append a tuple with 2 elements: f and f with first occurrence of the path replaced with an empty string, to self.choices.
  if o.microsecond is true,
  set use_workaround to boolean True if current_version tuple elements are smaller than the tuple (2,7,3), respectively,
  and unpacked dictionary kwargs.   define the method subwidgets with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
  return result.
  must_be_first is boolean False.
  default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string,
  join elements of hextets into a string, separated with ':', substitute it for result.
  import module json.
  raise an NotImplementedError with an argument string 'Subclasses must define this method.'.
  char2number is an dictionary, with 26 elements: 2 for 'a', 2 for 'b', 2 for 'c', 3 for 'd', 3 for 'e', 3 for 'f', 4 for 'g',
  derive the class MultiValueField from the base class Field class.
  raise an TemplateSyntaxError exception with an argument string "Searching for value. Unexpected end of string in column %d: %s",
  define the method add_post_render_callback with 2 arguments: self and callback.
  call the methof match.group with an argument "filter_name", substitute the result for filter_name.
  for every key and value in return value of the parse_qsl with 3 arguments: query_string is it exists or an empty string if not,
  call the method match.span, substitute the result for start an end, respectively.
  and help is a string 'Migrations will be squashed until and including this migration.'.   call the method parser.add_argument with 5 arguments: string '--no-optimize', action as a string 'store_true',
  if want_unicode is false,
  add self.form.error_css_class to extra_classes set.
  define the method _proxy_method with 3 arguments self, unpacked list args and unpacked dictionary kwargs.
  decorator stringfilter,
  if format is not contained in _serializers,
  for every ip in tuple containing 3 elements: self._ipython, self._ipython_pre_100 and self._ipython_pre_011,
  from django.apps import apps into default name space.
  if potfile fie exists,
  call the function force_text with an argument output, substitute the result for output.
  substitute value for self.value.
  self.deleted_objects is an empty list.
  and result of the function humanize called with an argument fixture_dir.   if length of fixture_files_in_dir is greater than 1,
  if value under the 'socket' key of the options dictionary is false and values under the 'host' and 'port' keys of the options dictionary are true,
  append f to file_field_list.
  for every name in namelist,
  value under the item key of self.dict dictionary is None.
  return result.
  "%r is not a valid date" formated with date and third element of the result of the function sys.exc_info.   define the function parse_http_date_safe an argument date.
  define the method __init__ with 3 arguments: self, filter_expr and nodelist).
  define the method utcoffset with 2 arguments self and dt.
  if not,
  if KeyError exception is caught,
  if not,
  if dt is None, is_dst is boolean False, otherwise call the method _isdst with an argument dt, substitute the result for is_dst.
  if ValueError exception is caught,
  define the method resolve with an argument self.
  raise an Exception exception with an argument string "This %s instance is not writable",
  if with_base_fields is true,
  defaults set to defaults, name set to function_name, takes_context set to takes_context and node_class set to InclusionNode,   substitute the result for compile_func.   substitute func.__doc__ for compile_func.__doc__.
  convert second item to an iterable,
  try,
  if not,
  break from the loop execution,
  substitute module.WSGIServer for WSGIServer.
  if KeyError exception is caught,
  call the method self.nodelist.render with an argument context, return the result.
  import module copy.
  return first element of t converted to lowercase and second element of t, as a tuple.
  stderr set to PIPE, close_fds set to boolean True is os.name is not equal to 'nt', universal_newlines set to boolean True.   if OSError, renamed to e, exception is caught,
  and code set to string 'list.   substitute self.to_field_name, if true, for key, or if not, substitute string 'pk' for key.
  from django.db import connection into default name space.
  if escaped is true,
  define the method load_template_source with 3 arguments: self, template_name, template_dirs set to None.
  call the method add_arguments from the base class of the Command class, with an argument parser.
  call the method content.decode with an argument string 'utf-8', substitute it for content.
  define the method next_page_number with an argument self.
  skip this loop iteration.
  convert text without first element to hexadecimal integer, substitute it for c.
  substitute paginator for self.paginator.
  do nothing.
  and connection as the result of the method self.connection.   define the connection with an argument self.
  get the value under the template_name key of the self.cache_key dictionary, if it exists, substitute it for key,
  self.choice_cache is None.
  return length of self.items.
  substitute arg converted into an integer for length.
  call the function flatten_result with an argument item, assign the result to res and args, respectively.
  from django.core.management.sql import sql_all into default name space.
  if url ends with '/' character,
  otherwise if i is smaller than list_length decremented by one,
  requires_system_checks is boolean False.
  define the method as_table with an argument self.
  if OSError, renamed to e, exception is caught,
  for every form_errors in self.errors sum length of return value of the method self.non_form_errors and length of form_errors, return the result.
  define the method __getstate__ with an argument self.
  define the method _post_clean with an argument self.
  called with an argument kw, only if v is not None, substitute the result for kw.   substitute tzinfo for value under the 'tzinfo' key of the kw dictionary.
  import_module called with an argument parentmod and submod, evaluates to false.   raise an ViewDoesNotExist exception with an argument string "Could not import '%s'. Parent module %s does not exist.",
  define the method render with 4 arguments: self, name, value and attrs set to None.
  from django.core.management.base import AppCommand into default name space.
  derive the class CheckboxInput from the Widget base class.
  for every regex in tuple with 3 elements: RFC1123_DATE, RFC850_DATE and ASCTIME_DATE,
  return FASTCGI_HELP.
  if s is an instance of an object six.memoryview.
  return None.
  substitute context for self.context.
  call the method qs.order_by with argument self.model._meta.pk.name, substitute the result for qs.
  if PY3 is true,
  call the method extracted.close.
  TRANSLATOR_COMMENT_MARK is a string 'Translators'.
  inplural is boolean True.
  call the method password.translate with an argument hmac.trans_5C, update outer dictionary with the result.
  self._num_pages is a integer 0.
  substitute so and se for sys.stdout and sys.stderr.
  convert max_value into an floating point number, substitute it for max_value.
  call the method re_escaped.sub with 2 arguments: raw string '\1' and piece, append the result to pieces.
  update attrs dictionary with extra_attrs entry.
  return an empty string.
  return self.objects.
  call the method parser.next_token, substitute the result for token.
  call the function number_format with an argument value, return the result.
  define the function reset_cache with an argument unpacked dictionary kwargs.
  define the function localize_input with 2 arguments value and default set to None.
  call the method formats.number_format with 2 arguments, d converted to a integer and then to string, and integer 0,
  for every renamed_method in cls.renamed_methods,
  substitute label_suffix for self.label_suffix.
  and truncate set to string ' ...', return the result.   decorator function register.filter with an argument is_safe set to boolean True.
  if six.PY3 is true,
  raise an InvalidTemplateLibrary exception with an argument string "Template library %s does not have a variable named 'register'",
  call the method parser.parse with an argument tuple with an element string 'endif', substitute the result for nodelist.
  strip url of surrounding '/' characters, substitute it for tmp.
  append list containing string '--no-location' to self.msgattrib_options.
  return number.
  and help as a string 'Specify the app label(s) to create migrations for.'.   call the method parser.add_argument with 5 arguments: string '--dry-run', action as a string 'store_true', dest as string 'dry_run',
  raise an TemplateSyntaxError exception with an argument string "%r received an invalid token: %r", where '%r' is replaced with,
  split ip_str by ':', substitute the result for hextets.
  return result.
  if locales is true,
  get attr attribute of self object, if it exists substitute it for nodelist, if not nodelist is None.
  want_unicode is boolean True.
  for every e in self, append convert e to an string and append it to string '* ',
  define the method load with self class instance and rawdata as arguments.
  if not,
  python_2_unicode_compatible decorator,
  if AttributeError exception is caught,
  return a tuple with 3 elements: copyreg._reconstructor, tuple with 3 elements: self.__class__, object and None,
  self.tags is an empty dictionary.
  from django.utils import six into default name space.
  join func.__module__ and func.__name__ into a string, separated by character '.', substitute it for self._func_path.
  append header to the string 'HTTP_', append the result to the list headerlist.
  substitute self for result.parent.
  call the function datetime.datetime with 3 arguments, now.year, now.month and now.day, substitute the result for now.
  define the method content with an argument self.
  return self.forms element at the index index.
  otherwise html_message is None.   call the method mail.mail_admins with 5 arguments: subject, message, fail_silently as boolean True, tml_message as html_message,
  define the method loaders with an argument self.
  call the method self.get_full_path, append the result to string '//', substitute it for location.
  remove file path_to_remove,
  if value is not an instance of list type,
  call the function force_text, with the function get_current_timezone_name and errors set to string 'ignore' as arguments,
  substitute include_html for self.include_html.
  substitute self.model._meta.pk for pk_field.
  substitute first element of loader for loader and loader without the first element for args.
  from django.utils.crypto import get_random_string into default name space.
  extend the value under the field key of the self._errors dictionary with error_list.
  try,
  return an instance of IncludeNode class, created with 3 arguments: return value of the method parser.compile_filter,
  put elements of validators.EMPTY_VALUES to a list, substitute the result for empty_values.
  substitute data.name for file_name.
  if not,
  formated with c, filemsg and comment_lineno_cache.   call the function warnings.warn with 2 arguments: warn_msg and TranslatorCommentWarning.
  raise an TemplateEncodingError exception with an argument "Templates can only be constructed from unicode or UTF-8 strings.".
  self.literal is None,
  get the value under the 'locale' key of the options dictionary, substitute it for locale.
  return result.
  write item to zfile stream.
  define the mehod __lt__ with self and other.
  call the function runfastcgi with an argument all the elements, except the first from the sys.argv list.
  convert ip_str to lowercase, if it doesnt start with a string '0000:0000:0000:0000:0000:ffff:',
  use the global variables _mtimes and _win in this function.
  if self.is_bound is true,
  if six.PY2 is true,
  increment Tok.num with an integer 1.
  do nothing.
  format_key is a string 'DATE_INPUT_FORMATS'.
  define the method setlist with 3 arguments: self, key and list_.
  define the method __init__ with an argument self.
  from django.utils.safestring import SafeData and mark_safe into default name space.
  return settings.LANGUAGE_CODE.
  call the function parser.compile_filter with an argument arg for every arg in args from the index 1 to the index -2,
  if not,
  if self.negate is true and val1 is not equal to val2, or if, self.negate is false and val1 equals val2,
  define the method __setstate__ with 2 arguments: self and obj_dict.
  try,
  from django.utils import six into default name space.
  append a tuple with 2 elements: condition and nodelist to conditions_nodelists.
  define the method configure_filter with 2 arguments: self and config.
  value under the klass key of the cls.__dispatch dictionary is an empty dictionary.
  try,
  if name is not contained in logging._handlers,
  if template_dirs is false,
  substitute cache_clear for wrapper.cache_clear.
  define the method extract with 2 arguments: self and to_path set to an empty string.
  call the __add__ method with an arguments rhs from the base class of the class SafeBytes, substitute the result for t.
  subtract day_of_year from i, if the result is smaller than the result of subtraction of weekday from integer 4,
  _translations dictionary value, under the language key is an instance of DjangoTranslation class, created with an argument language.
  property decorator,
  call the self.style.HTTP_BAD_REQUEST with an argument msg, substitute it for msg.
  call the method path.encode with an argument fs_encoding, return the result.
  divide negative dklen with hlen, substitute floored result for l.
  from __future__ import absolute_import into default name space.
  form._meta.fields is a list created out of form._meta.fields elements.
  call the method validate with an argument value, from the base class of the FloatField class.
  if value is None and attr is contained in declared_fields,
  app set to app_config.models_module, create_models set to create_models, verbosity set to verbosity, interactive set to interactive,   and db set to db.   define the function emit_post_migrate_signal with 4 arguments: created_models, verbosity, interactive and db.
  from lib2to3.fixer_util import find_indentation, Name, syms and touch_import into default name space.
  from django.core.management.templates import TemplateCommand into default name space.
  compile a regex from raw string '^(?P<prefix>[a-z]+)://(?P<suffix>.*)$', substitute it for CONVERT_PATTERN.
  increment stats dictionary value under the MISSES key by integer 1.
  call the method base64.urlsafe_b64encode with an argument s, strip the result of the bytes string '\n=' from the right, return it.
  call the method self.remove_potfiles.
  call the function __import__ with an argument name.
  define the function reloader_thread.
  substitute _globs_ with an argument _locs_.
  get the value from the options dictionary under the key 'load_initial_data', substitute it for self.load_initial_data.
  call the method self.total_form_count, for every i in sequence of integers, from 0 to the previous result,
  call the function curry with 2 arguments: _proxy_method and method set to six.text_type.encode, substitute the result for encode.
  return boolean True.
  from importlib.util import find_spec as importlib_find.
  call the function type with 3 arguments: string 'WSGIServer', tuple containing 2 elements: socketserver.ThreadingMixIn and WSGIServer,
  if the key doesnt exists substitute boolean False for self.use_natural_primary_keys.   call the method self.start_serialization
  if encoding is false.
  for every entry in package_path,
  return nothing.
  return an empty string.
  define the function fix with an argument match.
  call the method unhandled_params.remove with an argument param.
  for every finder in sys.meta_path,
  call the method bytes_to_text with an arguments key and self.encoding, substitute the result for key.
  for the call to the function upath, get the directory name of the resulting system path, join the result and string 'locale',   into a valid file path, substitute it for globalpath.   append settings.LOCALE_PATHS converted into a list to a list containing an element globalpath, return it.
  with the result renamed to fp, perform the following:   read file fp and substitute the result for msgs.
  otherwise if intrans is true,
  convert first element of values into a integer, return the result and ch.
  from __future__ import unicode_literals into default name space.
  call the method validators.RegexValidator with an argument regex set to regex, substitute it for self._regex_validator.
  unpack dictionary final_attrs, map the values through force_text function with an argument v and convert it to a dictionary, again,
  return translation.
  if call to the method self._css.get with an argument medium evaluates to false,
  '<li%(html_class_attr)s>%(errors)s%(label)s %(field)s%(help_text)s</li>', error_row set to a a string '<li>%s</li>',   row_ender set to a string '</li>', help_text_html set to a string, ' <span class="helptext">%s</span>',   and errors_on_separate_row set to boolean False.   define the method as_p with an argument self.
  where '%s' is replaced with name and taglib.   call the method parser.add_library with an argument temp_lib.
  for every slots_var in slots,
  and name set to None.   define the function dec with an argument func.
  if timezone has an attribute 'localize',
  execute code statement """exec _code_ in _globs_, _locs_""".
  default_validators is a list with an element validators.validate_email.
  decorator stringfilter,
  call the function mark_safe with an argument data, return the result.
  return boolean False.
  instantiate a class Group with 2 arguments: string "%%(%s)s" formated with param, and param, append it to result.
  from django.conf import settings into default name space.
  call the function io.open with 3 arguments: work_file, string 'w' and encoding set to string 'utf-8' as arguments,
  substitute qs for self._queryset.
  increment stats dictionary value under the MISSES key by integer 1.
  substitute self.fk.rel.field_name for value under the 'to_field' key of the kwargs dictionary.
  return self.empty_form.media.
  from django.db.migrations.state import ProjectState into default name space.
  parser._namedCycleNodes is an empty dictionary.
  if view_function is not a callable function,
  from django.apps import apps into default name space.
  define the method __init__ with 4 arguments: self, key set to None, sep set to ':' and salt set to None.
  break the loop execution.
  assign the return value of the function fn to change.
  call the method self.stdout.write with string "  No migrations to apply." as an argument.
  while i is lesser than length of subject and i-th element of subject is not an empty space or tab character,
  substitute the result for formatters dictionary value under name key.   if StandardError, renamed to e, exception is caught,
  call the method simple_url_re.match with an argument middle, if it evaluates to true,
  define the method to_python with arguments self and value.
  if not,
  define the function loads with 5 arguments: s, key set to None, salt set to string 'django.core.signing',
  substitute value under the unique_for key of form.cleaned_data dictionary for date.
  extract the value under the key 'database' from the options dictionary, use the value for indexing connections list, substitute the result for connection.
  where '%s' is replaced with self.__class__.__name__.   derive the class HttpResponse from the HttpResponseBase base class.
  derive the class Command from the base class BaseCommand.
  call the self.style.HTTP_REDIRECT with an argument msg, substitute it for msg.
  for every part in parts,
  call the method re.match with 2 arguments: naiveip_re and value under the 'addrport' key of the options dictionary, substitute the result for m.
  RUN_RELOADER is boolean True.
  return tuple containing 3 elements: RAW, an empty dictionary and stream.
  return id_.
  self.GET is an instance of QueryDict class created with an argument mutable set to boolean True.
  from __future__ import unicode_literals into default name space.
  self.message_context is None.
  import module sys.
  raise an TemplateSyntaxError exception with an argument string "second argument to 'regroup' tag must be 'by'".
  if priority is false,
  call the method self.get_json_data with an argument escape_html,
  from django.utils import six into default name space.
  define the method __iter__ with an argument self.
  use its __file__ field as an argument for the call to the function upath, substitute the result for settingsfile.   call the function os.path.dirname with an argument settingsfile, join the result an string 'locale' into a file path,
  define the function _get_timezone_name with an argument timezone.
  return result.
  compile the regex "^https?://" with an argument re.I, substitute it for absolute_http_url_re.
  if parent has an attribute 'render',
  get the value under the 'ignore_patterns' key of the options dictionary, substitute it for ignore_patterns.
  if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
  try,
  return boolean True.
  substitute self.literal for value.
  define the method render with 4 arguments: self, name, value and attrs set to None.
  raise SuspiciousMultipartForm exception with an argument string, "The multipart parser got stuck, which shouldn't happen with"
  if not,
  append line to bytes string ';', use it as an argument for the call to the function _parse_header_params, substitute the result for plist.
  call the method self.get_unique_error_message with an argument unique_check, append the result to errors.
  call the function _add_doc with 2 arguments: get_unbound_function and string """Get the function out of a possibly unbound function""".
  get the identity of the self object, use it as a key to get the value of the memo dictionary, substitute result for it.
  from django.utils import six into default name space.
  for every item in sorted_items,
  if self.silent is true,
  call the function format_html with 3 arguments: self.url_markup_template, value.url and return value of the function force_text,
  return value of method url.hexdigest(), return value of method ctx.hexdigest, respectively, substitute it for cache_key.   call the function _i18n_cache_key_suffix with request and cache_key as arguments, return the result.
  terminal_char is an string '>'.
  if ValueError exception is caught.
  raise an ValueError exception with an argument string 'Not a valid Python identifier: %r' formated with s.
  increment i by one.
  plist is an empty list.
  define the method __init__ with an argument self.
  define the method to_python with arguments self and value.
  derive the class IfNode from Node base class.
  from django.utils.encoding import smart_text into default name space.
  define the method get_data with an argument self.
  self._current is None.
  import module sys.
  call the method test_runner.run_tests with an argument test_labels, substitute it for failures.
  try,
  substitute '%r' in string ' npgettext(%r, %r, %r,count) ' with message_context, result of the function join_tokens,
  if not,
  call the function ugettext with an argument string "Please correct the duplicate data for %(field)s.",
  convert per_page into an integer and substitute it for self.per_page.
  call the method apps.get_model with an argument model_identifier, return the result.
  do nothing.
  call the method __init__ from the base class of the class Textarea, with an argument default_attrs.
  from datetime import timedelta and tzinfo into default name space.
  of the obj object, append the results in a list, substitute it for value under the field.name key of the self._current dictionary.   define the method getvalue with an argument self.
  call the method logging.Formatter with 2 arguments: fmt and dfmt, substitute the result for result.
  define the method __getitem__ with 2 arguments: self and key.
  from __future__ import unicode_literals into default name space.
  split ip_str into parts by ':', if '.' is contained in the last element of the result,
  define the method j with an argument self.
  buf is an instance of StreamingBuffer class.
  join tempdir and guessed_filename into a file path, substitute it for guessed_path.
  call the function signed_value with an argument value, substitute the result for signed_value.
  with it replace %r in the string "junk characters in start tag: %r",   call the method self.error with the resulting string as an argument.   if string end ends with string '/>',
  if length of args is not equal to the sum of the lengths of params and prefix_args,
  define the method body with an argument self.
  split ip_str by ':', if last element of the result is not equal to hextet.
  substitute value under the NON_FIELD_ERRORS key of opts.error_messages dictionary for error_messages.
  define the function become_daemon with 4 arguments: our_home_dir set to '.', out_log set to a string '/dev/null',
  define the method tzname with 2 arguments self and dt.
  if settings.TIME_ZONE is an instance of six.string_types and pytz is not None,
  define the method reader_enters with an argument self.
  while field.rel is not None,
  separated by newline, use it as an argument for the call to the function mark_safe, return the result.   define the method as_ul with an argument self.
  define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  convert pattern to lowercase, substitute it for pattern.
  raise an ValueError exception with an argument string "Base36 input too large".
  if s is an instance of an object Promise.
  call the method self.setlist with 2 arguments: k and v.
  call the method parser.next_token, substitute the result for endblock.
  if ImportError exception is caught,
  if bytes is false,
  set filter_func objec attr attribute to value.
  call the method block_context.push with 2 arguments: self.name and push.
  raise an ValueError exception with an argument string "Base36 conversion input too large.".
  call the function local, substitute the result for _active.
  message is a string 'make sure the name begins with a letter or underscore'.
  for every app_name and model_list in return value of manifest.items function,
  substitute value under the f.name key of the error_messages dictionary for value under the 'error_messages' key of kwargs dictionary.
  if return value of the code_changed function is true,
  raise an ValueError exception with an argument string ''Unable to configure root logger: %s' formated with e.
  return a list containing return values of the function to_py called with an argument val, for every val in value.
  derive the class BlockNode from the Node base class.
  do nothing.
  if e.connection_reset is false,
  if length of args is greater than 4.
  from decimal import Decimal and DecimalException into default name space.
  call the method self.can_read.release.
  call the method logging._acquireLock.
  derive the EventHandler class from the base class pyinotify.ProcessEvent.
  call the method __init__ from the base class of the class Select, with an argument attrs.
  target_app_labels_only is boolean False.
  define the function wrapper with list args, and dictionary pair of values kwargs as arguments.
  define the function exec with 3 arguments: _code_, _globs_ set to None and _locs_ set to None.
  define the method inner_run with 3 arguments: self, unpacked list args and unpacked dictionary options.
  if key_prefix is None,
  define the method __str__ with an argument self.
  property decorator,
  derive the class InlineForeignKeyField from the Field base class.
  derive the class ErrorDict from the dict base class.
  define the function __wrapper__ with 2 arguments: unpacked list args and unpacked dictionary kw.
  from django.utils.translation import ugettext_lazy and pgettext_lazy into default name space.
  define the function find_template_loader with an argument loader.
  if Exception exception is caught,
  if not,
  define the function do_ifequal with 2 arguments: parser, token and negate.
  raise an ImproperlyConfigured exception with an argument string "Error importing template source loader %s - can't pass arguments to
  substitute http_cookies.Morsel for Morsel.
  substitute func for _dec._decorated_function.   call the function wraps with an argument func, call the result with an argument _dec, return the result.
  call the function parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and function_name,
  if not,
  if not,
  return a string '%06d' formated with self.data.microsecond.
  define the method __repr__ with an argument self.
  join statements into a string, separated by newlines, return it.
  compile a regex from raw string '^\[\s*(\w+)\s*\]\s*', substitute it for INDEX_PATTERN.
  yield line.
  if not, self.require_all_fields is boolean True.   call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs, from the base class of the class MultiValueField.
  from django.utils.translation import ugettext_lazy as _ into default name space.
  call the function func with unpacked dictionary kwargs as an argument, substitute the result for translated.
  for every item in sequence,
  raise an ImproperlyConfigured exception with an argument string 'The SECURE_PROXY_SSL_HEADER setting must be a tuple containing two values.'.
  from django.forms.forms import everything into default name space.
  define the method auto_id with an argument self.
  called with an argument value under the 'updateddate' key of the item dictionary.   if value under the 'author_name' key of the item dictionary is not None,
  call the function importlib.import_module with an argument serializer_module, substitute it for module.
  define function learn_cache_key with request, response, cache_timeout set to None, key_prefix set to None, cache set to None as arguments.
  derive the class Context from the BaseContext base class.
  if not,
  slice the rawdata from i-th to the j-th element, replace with it '%r' in the string "bad end tag: %r", use it to call the method self.error.
  numbers is a list containing return value of the MigrationAutodetector.parse_number method called with an argument migration.name,
  call the method middleware.process_response with 2 arguments: request and response, return the result.
  call the function iri_to_uri with an argument url, substitute the result for self.url.
  return left.
  if sys.platform starts with a string 'java',
  return boolean False.
  call the function timedelta with an argument integer 0, return the result.
  define the method __enter__ with an argument self.
  if context.autoescape is true and output is not an instance of SafeData class or output is an instance of EscapeData class,
  dest as a string 'keep_pot', default as boolean False and help as a string "Keep .pot file after making messages. Useful when debugging."   define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.
  data is an empty list.
  self.plural is an lambda function with an argument n, which returns result of boolean expression n not equal to integer 1,
  define the function iterbytes with an argument buf.
  required set to required, widget set to widget, label set to label, initial st to initial, help_text set to help_text,   unpacked list args, unpacked dictionary kwargs.   if self.required is true,
  try,
  from __future__ import unicode_literals into default name space.
  substitute offset for self.__offset.
  extend self.children list with data.children.
  call the method form.save with an argument commit as commit, return the result.
  call method self.stdout.write with statement as an argument.
  replace '%s' in the string "<BaseConverter: base%s (%s)>" with length of self.digits and self.digits, respectively, return the string.
  define the function prepend_token with 2 arguments: self and token.
  self.find_template_cache is an empty dictionary.
  extension_map is a dictioanry with 6 initial elntries: TarArchive for '.tar', TarArchive for '.tar.bz2', TarArchive for '.tar.gz',
  append the result to sql_files.   join into a file path: app_dir and string %s.%s.sql, where '%s' is replaced by opts.model_name, append the result to sql_files.
  msg is a string "The use of the language code '%s' is deprecated. Please use the '%s' translation instead.".
  return value.
  call the method posixpath.splitext with an argument the_path.
  return node.
  call the method sys.exc_info, substitute the result without the first element for e and tb.
  with '%s' substituted for app_label, as arguments.   if migration_name equals to string 'zero',
  define the function dec with an argument func,
  return statements.
  if request.method equals to string 'HEAD',
  if words is not empty and length is smaller than or equal to integer 0,
  that occupies minimum 4 places within a string, and app_label, substitute the result for new_migration.   writer is instance of MigrationWriter class, created with new_migration argument.
  if verbosity is greater or equal to integer 2,
  vary_headers is an empty list.
  if self.localize is true,
  substitute self.regexes for regexes.
  for every elt in source,
  add string '%s.templatetags' to a list, where '%s' is replaced with app_config.name,
  call the function _load_serializers.
  call the method self.filter_expression.resolve with an argument context, substitute the result for output.
  replace every occurrence of whitespaces in the previous result for '_', substitute the result for s.   call the function re.sub with 3 arguments: raw string '(?u)[^-\w.]', an empty string and s, return the result.
  if limit_choices_to is callable object,
  if filters is true,
  option is a string '--testrunner='.
  if not,
  reverse settings.LOCALE_PATHS element order, for every localedir in the result,
  MIN_NUM_FORM_COUNT is a string 'MIN_NUM_FORMS'.
  call the function urlsplit with an argument url, assign the result to scheme, netloc, path, query and fragment, respectively.
  define the method is_hidden with an argument self.
  try,
  substitute context for current.
  define the method render with 4 arguments: self, name, value and attrs set to None.
  and with safe set to bytes string "/#%[]=:;$&()+,!?*@'~", return the result.   define function filepath_to_uri with path as the argument.
  called with an argument kw, only if v is not None, substitute the result for kw.   call the method datetime.time with an argument unpacked dictionary kw, return the result.
  delete frame.
  update self.__dict__ dictionary with obj_dict.
  for every k and v in return value of the method self.kwargs.items.   return resolved_args and resolved_kwargs.
  for every handler in handlers,
  from django.utils.six.moves import zip into default name space.
  try,
  do nothing.
  substitute _itervalues for values.
  call the function constant_time_compare with 2 arguments: sig and return value of the self.signature method with an argument value,  if it evaluates to true,
  data is an instance of BytesIO class, created with an argument: self._body.
  for every v in value, return the list of results.   call the method prepare_value the base class of the class ModelMultipleChoiceField, with an argument value, return the result.
  define the method id_for_label with arguments self and id.
  substitute params without the first element for params.
  define the method chars with 4 arguments: self, num, truncate set to None, html set to boolean False.
  otherwise if func is callable object,
  call strip s of the surrounding whitespaces, substitute every occurrence of the whitespace in the trim_whitespace_re with previous result, return the result.
  return path.
  is_usable is boolean False.
  where '%s' is replaced with self.id.   define the method led with 3 arguments: self, left and parser.
  values is an dictionary with entries: return value of the method var.resolve with an argument context for name,
  substitute CheckboxChoiceInput for choice_input_class.
  format settings.TEMPLATE_STRING_IF_INVALID with self.var, return the result.
  join migrations_directory and string "__init__.py" into a file path, substitute it for init_path.
  finally perform,
  pos is equal to integer 0.
  try,
  get the next element of the iterable pattern_iter, assign the result for ch.
  import module '.management' from the package app_config.name.
  if call to the method self.is_valid, evaluates to false or self.can_delete is boolean false,
  return decorating_function.
  ch is None.
  derive the class ResolverMatch with object as base class.
  return first and second element of result.
  if lang_code is true,
  substitute force_bytes for force_str.
  remove last element for quant.
  if d is an instance of real_datetime class,
  call the function empty_form with 3 arguments: auto_id as self.auto_id, prefix set to the return value of the self.add_prefix method,
  call the method self.setlistdefault with an argument key, extend the result with value_list.
  self.lookups is None.
  try,
  if 'coerce' key of the kwargs dictionary exists remove it and substitute its value for self.coerce,
  decorator function wraps with an argument func.
  raise an ValueError with an argument string "MultiValueDict.update() takes either a MultiValueDict or dictionary".
  for every app_name and mode_list in return value of manifest.items method,
  return path.
  return message.
  for every d in reversed list self.dicts,
  parts is an empty list.
  call the re.compile function with an argument raw string '^[-a-zA-Z0-9_]+$', substitute the result for slug_re.
  from django.template.base import TemplateDoesNotExist into default name space.
  self.addr is an empty string.
  define the function get_declared_fields with 3 arguments: bases, attrs and with_base_fields set to boolean True.
  do nothing.
  define the initialization function with self class instance, digits and sign defaulting to '-' as arguments.
  call the function quote with 2 arguments: result of the function force_str called with an argument url,
  skip this loop iteration.
  define the method clean with arguments self and value.
  call the method parts.reverse.
  from django.template.base import ALLOWED_VARIABLE_CHARS, BLOCK_TAG_END, BLOCK_TAG_START, COMMENT_TAG_END, COMMENT_TAG_START,
  if ':' is not contained in ip_str.
  do nothing.
  call the function force_text with first element of choice as an argument, substitute the result for self.choice_value.
  from django.utils.translation import templatize into default namespace.
  remove config dictionary element under 'level' key, if it exists substitute it for level, if not, level is None.
  call the function include_is_allowed with an argument filepath, if it evaluates to false,
  derive the class TranslatableFile from the object class.
  substitute old_attr for new_attr.
  call the function smart_text with an argument auto_id, format the result with self.html_name, return it.
  forms_valid is True.
  outer_html is a string '<ul{id_attr}>{content}</ul>'.
  if value is an instance of six.text_type class,
  get the type of the exc object, substitute it for exc_type.
  return nothing.
  define the method cleaned_data with an argument self.
  define the method __iter__ with an argument self.
  allow_multiple_selected is boolean True.
  call the function func with 3 arguments: context, self.first and self.second, return the result.
  call the function force_str with an argument: default if it is true, or if not, first element of the result of the function,
  substitute value under the "unifunc" key of the results dictionary for unifunc.
  if name is None,
  return boolean False.
  if extra_classes has an attribute 'split',
  otherwise if level converted into a string equals level,
  return ip_str.
  derive the class Signer from the object base class.
  call the method Field.__init__ with 8 arguments: self, required, widget, label, initial, help_text, unpacked list args,
  decorator stringfilter,
  if cmd ends with ext,
  if common_ancestor is None,
  for every app_label in app_labels,
  raise an TemplateSyntaxError exception with an argument string "'%s' tag with name '%s' appears more than once",
  call the method node.getElementsByTagName with the argument string 'natural', substitute the result for keys.
  raise an exception.
  return a tuple with an element self.__dt.
  call the function thread.start_new_thread with main_func and args as arguments.
  if klass is not contained in cls.__dispatch,
  call the add_arguments method from the base class of the class Command with parser as an argument.
  get config dictionary element under 'handlers' key, if it exists substitute it for handlers, if not, handlers is EMPTY_DICT.
  define the method _get_choices with an argument self.
  get _itervalues attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,
  from the base class of the class SimpleCookie call the value_encode method with val as the argument, store the result in the val and encoded, respectively.
  if InputStreamExhausted exception is caught,
  from decimal import Decimal, InvalidOperation, Context and ROUND_HALF_UP into default name space.
  define the method __init__ with 3 arguments: self, value and text.
  remove the first element of value under the name key of self.blocks dictionary, return it.
  substitute queryset for self._queryset.
  if not,
  concatenate string 'templates/' and template_name, substitute the result for pkg_name.
  if day_of_year is smaller than or equalt to jan1_weekday subtracted from integer 8 and jan1_weekday is greater than integer 4,
  from importlib import import_module into default name space.
  OPERATORS is an dictionary with 12 initial entries: result of the function inflix called with 2 arguments, integer 6,
  if html is true,
  call the method self.stdout.write with an argument string "Checking %s for fixtures...",
  if unhandled_params is true,
  decorator function register.filter with an argument is_safe set to boolean False.
  if initial is not None,
  raise an TypeError exception with an argument string "end must be None or a string".
  called with an argument text converted into a floating point number.   if ValueError, InvalidOperation, TypeError or UnicodeEncodeError exceptions are caught,
  define the function linebreaks_filter with 2 arguments value and autoescape set to None.
  derive the class Select from the Widget base class.
  get the value from the options dictionary under the key 'test_database', or False if the key dont exists, substitute it for self.test_database.
  covert to string value under the 'unique_id_is_permalink' key of the item dictionary, convert it to lowercase,
  call the function sys.exit with argument integer 3.
  call the method __init__ from the base class of the EntitiesForbidden class.
  append string ".moves.urllib_error" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for error.
  from django.template.base import Lexer, Parser, tag_re, NodeList, VariableNode and TemplateSyntaxError into default name space.
  if message_context is true,
  if filename path doesnt exists,
  call the self.style.MIGRATE_HEADING with string "Synchronizing apps without migrations:" as an argument,
  and encoding, substitute the result for result.   if result is not None,
  define the method end_serialization with an argument self.
  substitute negated for self.negated.
  replace this value with v.   call the function dictvalue with el as argument for every el in values of dictionary cc,
  call the method sys.stderr.write with an argument string "  as a FastCGI application, you will need to get flup from\n".
  return None.
  create a list of tuples out of 2 lists: appended params list to prefix_args and text_args, covert the result into a dictionary,
  attrs is a dictionary containing 1 entry: return value of the smart_text function with argument obj._meta for 'model'.
  define the method enter_command with 3 arguments: self, command and token.
  call the method self.error with 2 arguments: token and string "Empty variable tag", return the result.
  call the method parser.compile_filter with an argument, third element of bits, substitute the result for val2.
  if pk.editable is true, or pk.auto_created is true or pk is an instance of AutoField class, or if pk.rel is true,
  return last element of value.
  call the method nodelist.get_nodes_by_type with an argument ExtendsNode, if it evaluates to true,
  import_library and libraries.   __all__  is a tuple containing 4 strings: 'Template', 'Context', 'RequestContext' and 'compile_string'.
  use global variable _default.
  if s is an instance of six.text_type or Promise,
  return endpos.
  if cursor is true,
  otherwis if char is contained in string 'Yy',
  call the method self.common_logger_config with 3 arguments: root, config and incremental.
  if k is contained in seen,
  break the loop execution.
  define the function _strip_once with an argument value.
  get is a tuple containing elements generated by the call to the function pformat with an argument COOKIES_override,
  substitute i-th element of self.forms for form.
  if ValueError exception is caught,
  call the function pgettext with an argument 'String to return when truncating text', '%(truncated_text)s...', substitute the result for truncate.
  where '%r' is replaced with first element of bits.   options is an empty dictionary.
  call the method self.inner_run with 2 arguments: None and unpacked dictionary options.
  import module json.
  raise an TemplateSyntaxError exception with an argument string "Second (optional) argument to %s tag must be 'parsed'",
  if not,
  if i is not an instance of six.integer_types class,
  from django.utils.functional import lazy into default name space.
  import module tarfile.
  get config dictionary element under 'root' key, if it exists substitute it for root, if not, root is None.
  return template_name.
  from email.header import Header into default name space.
  _encoding is None.
  if not,
  return an instance of CommentNode class.
  convert six.PY3 to an integer, substitute it for buffering.
  substitute i-th element of self.initial for value under the 'initial' key of the defaults dictionary.
  substitute hlen for dklen.
  return version
  bits is an empty list.
  increment i-th element of counters by chunk_length.
  define the function pbkdf2 with 5 arguments: password, salt, iterations, dklen set to integer 0 and digest set to None.
  substitute this list for additional_headers.   join all of the elements of vary_headers and additional_headers in a string delimited by a comma,
  call the function is_valid_ipv6_address with an argument value, if it evaluates to false,
  if pos is greater than or equal to last,
  define the method __repr__ with an argument self.
  if is_templatized is true,
  raise an NotImplementedError exception with an argument string 'subclasses of BaseArchive must provide an extract() method'.
  define the function module_has_submodule with 2 arguments: package and module_name.
  skip this loop iteration.
  for every key in self.keyOrder,
  substitute compare_to for value under the state_frame dictionary under the self key.
  if bf_errors is true,
  call the method self.queryset.get with an argument, unpacked dictionary with an element: value for key, substitute the result for value.
  call the MigrationAutodetector function with arguments, return value of the call to the method executor.loader.project_state,
  substitute value under 'warning' key of kwargs dictionary for warning.
  if self.data.hour equals integer 0,
  substitute fields for value under the 'fields' key of attrs dictionary.
  if values under the 'socket', 'host' and 'port' keys of the options dictionary are false,
  if label_suffix is None,
  call the method self.__class__ with an argument self, return the result.
  self._raw_ipv6 is boolean False.
  if error_messages is true and f.name is contained in error_messages,
  call the method self.get_resolved_arguments with an argument context, substitute the result for resolved_args and resolved_kwargs.
  call the function force_bytes with an argument password, substitute the result for password.
  append filepath to tried.
  call the method __init__ from the base class of the Deserializer class with arguments stream_or_string and unpacked dictionary options.
  substitute utc for tzinfo.
  field_list is an empty list.
  define the method ordered_forms with an argument self.
  if self.__dispatch is None.
  extra for 'extra', can_delete for 'can_delete', can_order for 'can_order', fields for 'fields', exclude for 'exclude',   min_num for 'min_num', max_num for 'max_num', widgets for 'widgets', validate_min for 'validate_min',   validate_max for 'validate_max', localized_fields for 'localized_fields', labels for 'labels', help_texts for 'help_texts',   and error_messages for 'error_messages'.   call the function modelformset_factory with 2 arguments: model and unpacked dictionary kwargs, substitute the result for FormSet.
  substitute value under the the 'forloop' key of the context dictionary for parentloop.
  skip this loop iteration.
  if self.verbosity is greater or equal to integer 2,
  previous result and filepath.   if IOError exception is caught,
  call the function import_module with an argument path, substitute it for package.
  if level is true,
  boolean True for 'ask_merge'.   for every app_label and migration_names in result of the method conflicts.items,
  delete self.name attribute from the obj.__class__ object.
  substitute the resulting list for digits.   while length of digits is smaller than or equal to absolute value of exponent,
  convert candidate to a string.
  define the function _sanitize_ipv4_mapping with an argument ip_str.
  answer is None.
  raise an exception value.
  call the method wrap with 2 arguments, value and arg converted into a integer, return the result.
  deactivate and deactivate_all are lambda functions returning None.
  for every h in elements of logger.handlers list,
  otherwise if self.verbosity is greater than integer 0,
  call the function force_str with an argument signature, return the result.
  if id_for_label is true,
  decorator function lru_cache.lru_cache with an argument maxsize set to integer 1000.
  from django.forms.utils import ErrorList into default name space.
  call the connection.introspection.table_names with tables as argument, store the result in seen_models.
  define the method get with 3 arguments: self, key and default set to None.
  append '/' to tmp, substitute it for display_url.
  import module datetime.
  from lib2to3 import fixer_base into default name space.
  and unpacked dictionary kwargs.   instance.keyOrder is an empty list.
  if value is false or for every v in value every v is contained in self.empty_values,
  return boolean False.
  call the method initial_form_count from the base class of the class BaseModelFormSet, return the result.
  get is a tuple containing elements generated by the call to the function pformat with an argument META_override,
  from django.conf import settings into default name space.
  call the method __new__ with 4 arguments: cls, name, bases and attrs, from the base class of the class RenameMethodsBase.
  call the subprocess.Popen function with, 'git log --pretty=format:%ct --quiet -1 HEAD', stdout set to subprocess.PIPE,
  if http_cookies.CookieError exception is caught,
  define the method __get__ with 3 arguments: self, instance and owner.
  find index of the occurrence of string ':_(' in p, if its greater or equal to integer 0,
  use global variable _default.
  from django.utils import six into default name space.
  derive the class LocaleRegexProvider with object as base class.
  sum m and value under the medium key of the base dictionary, substitute it for m.
  return None.
  define the function _dec with an argument func.
  substitute first decimal_pos elements of dec_part for dec_part.
  encoding.setter decorator,
  substitute token.source for e.django_template_source.
  otherwise if name equals a string 'id'.
  third element of url_fields is an empty string.
  result of the function iri_to_uri called with an argument link for 'link',   result of the function to_unicode called with an argument description for 'description',   result of the function to_unicode called with an argument author_email for 'author_email',   result of the function to_unicode called with an argument author_name for 'author_name',   result of the function iri_to_uri called with an author_link link for 'author_link', pubdate for 'pubdate',   updateddate for 'updateddate', result of the function to_unicode called with an comments author_name for 'comments',   result of the function to_unicode called with an argument unique_id) for 'unique_id)',   unique_id_is_permalink for 'unique_id_is_permalink', enclosure for 'enclosure',    if true, categories is value for 'categories' key, if not, empty tuple is value for 'categories' key,   result of the function to_unicode called with an argument item_copyright for 'item_copyright', ttl for 'ttl'.   update dictionary item with an argument kwargs.
  i is the reminder of the division of i by j.
  dest set to string 'domain' and help as a string 'The domain of the message files (default: "django").'.   call the method parser.add_argument with 6 arguments: string '--all', string '-a', action as a string'store_true',
  called with 2 arguments: singular and trimmed and result of the function join_tokens called with 2 arguments: plural and trimmed,   write the result to out.   if not,
  call the method self._coerce with an argument value, return the result.
  substitute callable for callable.
  substitute func for self.func.
  call the method self.indent with argument integer 1.
  evaluates to true,   call the function select_template with an argument file_name, substitute the result for t.
  call the method __init__ from the base class of the class PasswordInput, called with an argument attrs.
  from django.db.migrations.writer import MigrationWriter into default name space.
  from django.utils.six.moves.urllib.parse import urlsplit and urlunsplit into default name space.
  join chunks into bytes string, substitute it for chunk.
  from django.core.exceptions import ValidationError into default name space.
  decorator stringfilter,
  and elements of token_string from second to second last element wiht the whitespaces striped from the both sides.   otherwise if token_string starts with BLOCK_TAG_START,
  define the method streaming_content with 2 arguments: self and value.
  for every node in self,
  substitute settings.CACHE_MIDDLEWARE_KEY_PREFIX for key_prefix.
  if self.use_natural_foreign_keys is true and field.rel.to has an attribute 'natural_key',
  call the method copy.copy with an argument register_to._registry, substitute the result for before_import_registry.
  call the method n.getElementsByTagName with string 'natural' as argument, substitute result for keys.
  define the method _get_choices with an argument self.
  validTemplateLibrary, BLOCK_TAG_START, BLOCK_TAG_END, VARIABLE_TAG_START, VARIABLE_TAG_END, SINGLE_BRACE_START, SINGLE_BRACE_END,   COMMENT_TAG_START, COMMENT_TAG_END, VARIABLE_ATTRIBUTE_SEPARATOR, get_library, token_kwargs, kwarg_re and render_value_in_context.   from django.template.smartif import IfParser and Literal into default name space.
  raise NotImplementedError exception with an argument string 'Subclasses must implement this method.'.
  call the method connection.ops.prepare_sql_script with 2 arguments: return value of the function fp.read,
  return boolean False.
  if commit is true,
  call the function get_template_from_string with 3 arguments: source, origin and template_name, substitute the result for template.
  define the function capfirst with an argument value.
  for every bit in bits,
  raise an TemplateSyntaxError exception with an argument string "Malformed arguments to url tag".
  use global variable template_source_loaders.
  substitute first element of app_list for ns.
  close the process with an argument 0.
  if hidden_fields is true,
   substitute value under the PREV key of the root dictionary for last.
  substitute member.name for name.
  call the method list.__getitem__ with 2 arguments self and key, substitute the result for value.
  append a tuple with 2 elements: f and f with first occurrence of the path replaced with an empty string, to self.choices.
  from django.utils.timezone import is_aware into default name space.
  call the method queryset.filter with an argument unpacked dictionary containing self.instance for self.fk.name, substitute the result for qs.
  derive the class WSGIRequestHandler from simple_server.WSGIRequestHandler and object base classes.
  define the method popitem with an argument self.
  define the method nud with 2 arguments: self and parser.
  call the method parser.next_token, substitute the result for token.
  define the method render with 4 arguments: self, name, value and attrs set to None.
  define the method get with 3 arguments: self, key and default set to None.
  _iteritems is a string "iteritems".
  message, code as a string 'ambiguous_timezone' and params as params,   and third element of the return value of the function sys.exc_info.   return value.
  if self.count equals a integer 0 and self.allow_empty_first_page is false,
  for every uclass, unique_check in all_unique_checks,
  return tempdir.
  call the method self.fields.values, for every field in result,
  join elements of extra_classes into a string separated by whitespaces, return it.
 call the function re.compile with an argument raw string "^\s*plural$", substitute the result for plural_re.
  convert the value under the 'SERVER_NAME' key of the self.META dictionary to a string, substitute result for server_port.
  substitute settings.TEMPLATE_STRING_IF_INVALID for current.
  in the previous result for with string '\n', substitute the result for eol_message.   get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.
  import module re.
  substitute complain for __imul__.
  try,
  if t is not None,
  if not,
  from IPython.Shell import IPShell into default namespace.
  open the file named filepath in read mode, with file descriptor renamed to fp perform,
  derive the class URLField from the base class CharField class.
  if pattern.namespace is true,
  kwargs is a dictionary with an entry: attribute 'label' of the object under the name key of the form.fields dictionary for 'label',
  define the method __init__ with 5 arguments: self, protocol set to string 'both', unpack_ipv4 set to boolean False,
  call the function force_bytes with arguments k and self.encoding, substitute the result for k.
  call the method _trans.ngettext with 3 arguments singular, plural and number.
  import module sys.
  if code is None,
  substitute options for self.options.
  from django.utils import six into default name space.
  append self to context.dicts.
  if length of tzinfo is greater than integer 3, convert elements of tzinfo from indexes 1 to 3 to an integer,
  return self.data.month.
  remove elements under the 'path' key of the kwargs dictionary, if it exists substitute it for path, if not path is None.
  if TypeError or ValueError exceptions are caught,
  substitute the result for offset.   if not,
  set value under the 'bindAddress' key of wsgi_opts to None.
  if token.contents equals string 'empty',
  define the function ljust with 2 arguments value and arg.
  if line ends with a new line character substitute width incremented by integer 1 for max_width, if not substitute width for max_width.
  serializers is an empty dictionary.
  if not,
  call the function safe_join with 2 arguments template_dir and template_name, yield the result.
  define the function to_current_timezone with an argument value.
  output_transaction is boolean True.
  define the function floatformat with 2 arguments text and arg set to integer -1.
  if "__call__" is contained in klass.__dict__ for any klass in __mro__ field of the obj class, return boolean True, otherwise return False.
  if six.text_type is contained in resultclasses, cls._delegate_text is boolean True, otherwise it is boolean False.
  call the method check_for_language.cache_clear.
  call the function force_bytes with an argument salt, substitute the result for salt.
  try,
  call the function get_resolver with an argument urlconf, substitute the result for resolver.
  f.required is boolean False.
  if ValueError exception is caught,
  if self._callback is not None,
  if url_info.netloc is false or url_info.netloc equals host, and if url_info.scheme is false or url_info.scheme equals,
  substitute gettext for ugettext.
  return boolean True.
  from django.utils.encoding import force_unicode.
  from django.core.validators import EMPTY_VALUES into default name space.
  return ret.
  for every item in self.items,
  evaluate the function smart_text with an argument value, return the result.
  otherwise if ch is contained in string "*?+{",
  register.tag decorator,
  if TypeError exception is caught,
  if Exception exception is caught,
  if not,
  status_code is an integer 200.
  raise an CommandError with an argument string "More than one migration matches '%s' in app '%s'. Please be more specific.",
  return a string '%02d' formated with self.data.month.
  define the method reverse_dict with an argument self.
  set accessor_name of the self.object to object_list.
  substitute field.queryset for self.queryset.
  call the function lazy with 2 arguments: _string_concat and six.text_type, substitute the result for string_concat.
  if opts is true,
  try,
  substitute regex for self._regex.
  from django.http import QueryDict into default namespace.
  raise an CommandError with an argument string "%r is not a valid %s name. Please %s.", were '%r' is replaced with name,
  call the method mimetypes.guess_extension with an argument content_type, substitute result for ext.
  do nothing.
  substitute DictConfigurator for dictConfigClass.
  append form to self.saved_forms.
  call the function add_arguments with parser as an argument, from the base class of the Command class.
  yield value under key key of self dictionary.
  derive the class datetime from the real_datetime base class.
  call the django.setup method.
  substitute self.widget if the widget is false, otherwise substitute widget for widget.
  define the method serialize_headers with an argument self.
  from django.http.response import HttpResponse, StreamingHttpResponse, HttpResponseRedirect, HttpResponsePermanentRedirect,
  from django.utils import six into default name space.
  convert num to an integer, substitute the result for length.
  from django.conf import settings object to the default name space.
  default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid URL.' for 'invalid'.
  if latest_date is true, return it, if not, call the method datetime.datetime.now and return the result.
  substitute regex for self._regex.
  otherwise, if pattern has an '_callback' attribute.
  import module warnings.
  substitute pos for end_text_pos.
  if widgets is not None,
  for every root, dirs and files in subdirectory tree starting from the base dir template_dir,
  return self.
  if self.verbosity is integer 1,
  substitute show_hidden_initial for self.show_hidden_initial.
  call the function conditional_escape with an argument checkbox_name,
  define function add_never_cache_headers, with response as an argument.
  and time.tzinfo, return the result.   define the method date with an argument self.
  substitute _templatetags_modules for templatetags_modules.
  substitute parts, without the first element, for path.
  return sys.modules dictionary value under the name key.
  'Use SplitDateTimeField instead.', RemovedInDjango19Warning and stacklevel set to integer 2.   if length of value is not equal to integer 2,
  return nothing.
  intrans is boolean False.
  from django.core.serializers.base import DeserializationError into default name space.
  if field is contained in self.cleaned_data,
  if AttributeError exception is caught,
  call the function six.text_type with an argument self, divide the result with rhs and return the reminder of the division.
  call the method self._setup.
  define the function clear_script_prefix.
  from django.template.base import Node, NodeList, Template, Context, Library, TemplateSyntaxError, VariableDoesNotExist,
  update fields dictionary with new_class.declared_fields.
  define the method __str__ with an argument self.
  get the value under the 'indent' key of self.options dictionary, if it is true,
  call the method os.unlink with an argument pot_path.
  if PY3 is true,
  if content_length is lesser than integer 0,
  if not,
  call the method copy.deepcopy with 2 arguments: self._wrapped and memo, return the result.
  if TypeError or VariableDoesNotExist exceptions are caught,
  substitute _iterkeys for keys.
  raise an ValueError with an argument string "Non-reversible reg-exp portion: '(?%s'" formated with ch.
  raise an AttributeError exception with an argument string: "'%s' object has no attribute 'cleaned_data'",
  if self._read_started is true,
  and '%s' is replaced with app_or_project and message, respectively.   define the method download with arguments self and url.
  if lengths of value and arg are equal, return boolean True, otherwise return boolean False.
  if not,
  substitute attrs for self.attrs.
  if serializers is None,
  handler is an instance of SimplerXMLGenerator class, created with 2 arguments: outfile and encoding.
  subtract result of the method self.initial_form_count from i, use the result as an index to get the element from self.initial_extra,
  call the function os.path.realpath with an argument d, use the result as an argument for the call to the function os.path.abspath,
  substitute self._stream for stream.
  lbp is an integer 0.
  define the function new_datetime with an argument d.
  define the method _get_count with an argument self.
  try,
  if IndexError exception is caught,
  if AttributeError exception is caught,
  call the method self.next_token, substitute the result for self.current_token.
  if invalid_apps in not empty,
  string joined from invalided_apps list and separated with string ', '.   if not,
  define the function compare_ordering_key with an argument k.
  if remaining is None,
  substitute value under the attr key of flags dictionary for value.
  if opname is not contained in roots,
  substitute nodelist for self.nodelist.
  call the method parse from the instance of TemplateIfParser class, created with 2 arguments parser and bits, substitute the result for condition.
  substitute the result for value under the 'microsecond' key of the kw dictionary.   remove entry under the 'tzinfo' key of the kw dictionary, substitute it for tzinfo.
  call the method time_str.decode with an argument string 'utf-8', substitute the result for time_str.
  split arg by ':', for every x in result,
  call the json.dumps function with 2 arguments: obj and separators set to tuple containing ',' and ':' characters,
  if not,
  define the method _reverse_with_prefix with arguments self, lookup_view, _prefix, unpacked list args and unpacked dictionary kwargs.
  if logging_settings is true,
  define the method __init__ with 6 arguments: self, name, old_mod, new_mod, old_attr set to None, new_attr set to None.
  for every k and v in items of dictionary kwargs, respectively,
  substitute elements of middle from the beginning to the negative length of closing, for middle.
  convert value to an floating point number if it is not equal to integer 1,
  call the method json.dumps with a dictionary generate with an expression as an argument, return value of the function e.get_json_data,
  get the value under the 'no_wrap' key of the options dictionary, if it is true,
  substitute state for self.state.
  call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for _default.
  call the method self.tzname with an argument dt, substitute the result for self._tzname.
  raise an TemplateSyntaxError with an argument string 'Unknown argument for %r tag: %r.', where '%r' is replaced with first element of bits and options.
  if ignore_failures is true,
  substitute the result for value.   substitute value for the value under the name key of the self.cleaned_data dictionary.
  increment nesting by one.
  call the function warnings.warn with 3 arguments:
  args is an empty list.
  if self.selected_fields is None or field.attname is contained in self.selected_fields,
  substitute self._empty_value for value.
  raise an TypeError with an argument string "The argument `field` must be `None` when the `error`argument contains errors for multiple fields.".
  raise an KeyError with an argument string "Unknown language code %s and %s.", where '%s' is replaced with lang_code,
  do nothing.
  if text has an '__html__' attribute,
  substitute file_name for t.
  call the method command.stdout.write with an argument errors.
  return result.
  return None.
  sort elements of kwds, substitute the result for sorted_items.
  renderer is None.
  raise a exception of ComandError class with string "More than one migration matches '%s' in app '%s'. Please be more specific.",
  define the function unescape_string_literal with an argument s.
  call the method result.utctimetuple, use the result as an argument for the call to the method calendar.timegm, return the result.
  for every site in sites,
  derive the class MinValueValidator form the BaseValidator base class.
  call the function ugettext_lazy with an argument string 'Change', substitute the result for input_text.
  from django.utils import six and lru_cache into default name space.
  if ValidationError exception is caught,
  return boolean True.
  RemovedInDjango19Warning and stacklevel set to integer 2.   if not,
  use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.   for every migration in app_migrations,
  get the value under the key 'only' of the options dictionary, if it exists substitute the result for isolated_context,
  if widget is an instance of the NumberInput,
  if ValueError exception is caught.
  substitute it for localedir.   use_null_fallback is boolean True.
  substitute first 12 elements of r for r.
  try,
  output is an empty string.
  if rest is not False, None is considered False,
  substitute message for self.message.
  if length of bits is greater than integer 2,
  call the function force_bytes with an argument password, substitute the result for password.
  if ImportError, IndentationError, NameError, SyntaxError, TypeError or AttributeErrorexception is caught,
  raise an ContentNotRenderedError exception with an argument string 'The response content must be rendered before it can be pickled.'.
  join elements of tags into a string, separated with '|', format string '(%s)' with it, substitute the result for tags_re.
  derive the class HttpResponseNotModified from the HttpResponse base class.
  call the method stream.unget with an argument chunk.
  decimal_places set to None, unpacked list args and unpacked dictionary kwargs.   substitute max_digits and decimal_places for self.max_digits and self.decimal_places.
  if key is contained in dict_,
  substitute path_override for path if path_override is not None, otherwise substitute request.path for path
  shell is an instance of IPShell class, created with an argument argv as an empty list.
  append param to i-th element of result_args.
  if VariableDoesNotExist exception is caught,
  call the method other.__cast, substitute the result for other.
  call the method warnings.warn with an argument string "No fixture named '%s' found." where '%s' is replaced with fixture_name.
  if not,
  increment current_len by integer 1,
  if KeyError exception is caught,
  try,
  invert self.negated.
  if fake is true,
  call the method self.iteritems, return the list of results.
  if widget is an instance of type class,
  return the media field of the first element of self.forms.
  call the method self.stdout.write with an argument: string "%(started_at)s\nDjango version %(version)s, using settings %(settings)r\n"
  call the function self._new_gnu_trans with an argument localedir, substitute the result for translation.
  if scheme is not contained in self.schemes,
  if template_dirs is true,
  default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string,
  raise an exception PageNotAnInteger with string 'That page number is not an integer' as an argument.
  return boolean False.
  return major.
  substitute iter for iterbytes.
  from __future__ import unicode_literals into default name space.
  for every pos and elt in enumerated iterable source,
  yield node.
  if data is true, substitute list created from elements of data, substitute it for self.keyOrder, otherwise self.keyOrder is an empty list.
  call the __init__ method from the base class of the WSGIRequestHandler class, with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  extend replaces list with migration.replaces,
  call the method self._get_validation_exclusions, substitute the result for exclude.
  if six.PY2,
  define the method inner with 2 arguments: self and unpacked list args.
  int_part_gd is an empty string.
  define the method __init__ with 7 arguments: self, data set to None, files set to None, auto_id set to string 'id_%s',
  if other_dict doesnt have an '__getitem__' attribute,
  return nothing.
  define the method __wrapper__ with 3 arguments: self, unpacked list args and unpacked dictionary kw.
  from django.apps import apps into default name space.
  update defaults dictionary with kwargs.
  if result is not None,
  substitute pubid for self.pubid.
  if stream_or_string is instance of bytes type,
  and returns x striped of the surrounding whitespaces, extend the extra_files with the mapped list.   if self.verbosity is greater or equal to integer 2,
  if template doesnt have a 'render' attribute,
  if value under the 'author_link' key of the item dictionary is not None,
  if the value under the 'bindAddress' key of the wsgi_opts dictionary is not None, set daemonize to boolean True, if not, set it to boolean False.
  dependencies set to a list of tuples with 2 elements: app_label and migration.name for every migration in merge_migrations.   call the method subsclass with 2 arguments: string "%04i_merge", replace '%04i' with biggest_number incremented by one,
  and elements of rfcdate from 12-th to the 25-th index.   define the function http_date with an argument epoch_seconds set to None.
  return found.
  call the method clean with an argument value from the base class of the class ComboField.
  derive the class NonCapture from list base class.
  try,
  update self.tags dictionary with lib.tags.
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  joining string '%r: %r' formated with k and v into a string, separated with ', ', use it to format a string '{%s}', return it.   define the method clear with an argument self.
  call the function get_quantifier with 2 arguments: ch and pattern_iter, substitute the result for count and ch, respectively.
  call the method self.getvalue, return the result.
  if self has an attribute '_body',
  call the method formats.get_format_lazy with an argument string 'DATE_INPUT_FORMATS', substitute the result for input_formats.
  call the method self.expression, substitute the result for retval.
  call the method check_for_migrations with arguments: app_config and connection.
  use global variable invalid_var_format_string.
  call the method self._archive.close.
  call the method Module_six_moves_urllib_request with an argument: string ".moves.urllib_parse" appended to __name__,
  validate_slug is a instance of a RegexValidator class, created with 3 arguments: slug_re, return value of the call to the function,
  call the function from_current_timezone with an argument result, return the result.
  for x in a list containing 3 elements: self.id, self.first and self.second, if x is not None,
  close zfile stream.
  substitute _iterkeys for iterkeys.
  call the method m.group with an argument string 'mon', convert the result to lowercase, use it as an argument for the call to the,
  if chunks is false,
  substitute the result for block_content.   if self.verbatim is true and block_content equals self.verbatim,
  call the method logging.getLogger, substitute the result for root.
  define the method _iterkeys with an argument self.
  substitute boundary for self._boundary.
  return string 'th'.
  raise an LookupError with an argument lang_code.
  import module time.
  if m is true,
  try,
  call the method references_to_delete.setdefault with arguments: r.rel.to and an empty list, append to the result tuple with 2 entries: model and f.
  self._num_pages and self._count are None.
  call the function import_string with an argument path, substitute the result for func.
  derive class SimpleCookie from the base class http_cookies.SimpleCookie.
  call the function middleware_class with 2 arguments: unpacked list m_args and unpacked dictionary m_kwargs,
  for every attr in _urllib_parse_moved_attributes,
  from __future__ import unicode_literals into default name space.
  substitute callable for callable.
  if CONTEXT_SEPARATOR is contained in result,
  if self.domain equals to string 'djangojs',
  call the function escape with an argument word, substitute the result for i-th element of words.
  define the method __getitem__ with 2 arguments: self and name.
  return None.
  define the function ungettext with 3 arguments: singular, plural and number.
  remove the first element from str_number.
  raise an ValueError with an argument string "'%s' has no field named '%s'.", with '%s' replaced with self.__class__.__name__ and field, respectively.
  define the function import_module with 3 arguments: name and package set to None.
  call the method match.group with 2 arguments: strings "constant_arg" and "var_arg", substitute the result for constant_arg,
  define the function get_language_from_path with 2 arguments: path and strict set to boolean False.
  return self.__name.
  from collections import namedtuple.
  decimal_digits is a string '0123456789'.
  define the function parse_header with an argument line.
  if constant is true,
  try,
  call the function timesince with an argument value, return the result.
  return None.
  return an empty string.
  if args in None of boolean False, substitute it for an empty list.
  get the value under the key 'database' of the options dictionary, substitute it for db.
  if self._delegate_bytes is true,
  code is a string 'invalid'
  define the method __init__ with 4 arguments: self, template, unpacked list args and unpacked dictionary kwargs.
  if filepath starts with root,
  call the function activate with an argument self.language.
  define the method __enter__ with an argument self.
  return data.
  if NotImplementedError exception,
  if pattern equals '*' or pattern starts with '.' or pattern equals host, and only if:
  raise a TypeError exception,
  if not,
  temp_lib is an instance of Library class.
  define the method media with an argument self.
  substitute the result for i-th element of words.   if not,
  if not,
  if self.verbosity is greater or equal to integer 2.
  lock is an instance of RLock class.
  start is an integer 0.
  call the method callback.rindex with an argument character '.', substitute the result for dot.
  if self.is_bound is false,
  extend collect list with _builtin_context_processors.
  call the function is_aware with an argument date, if it evaluates to true,
  define the method __getitem__ with 2 arguments: self and idx.
  call the method token.split_contents, substitute the result for bits.
  while rbp is smaller than self.current_token.lbp,
  join the current working directory and name into a file path, substitute it for top_dir.
  return statements.
  define the method extract with 2 arguments self and to_path.
  if filter_func has an attribute "_decorated_function",
  decrement self.position by length of bytes.
  use the result as the argument for the call to the sql.extend method.   call the connection.creation.sql_for_pending_references method with refto, no_style() and pending_references as arguments,
  define the method run_from_argv with arguments self and argv.
  sum the result of the method s.get_data and s.rawdata, return the result.
  substitute base.__name__ for class_name.
  return integer 0.
  return an instance of SafeBytes, created with an argument t.
  raise an Exception exception with an argument string "This %s instance cannot tell its position",
  define the method __init__ with 5 arguments: self, template, context set to None, content_type set to None and status set to None.
  return an instance of metaclass class, created with 3 arguments: string 'temporary_class', None and an empty dictionary.
  call the function reverse with 4 arguments: view_name, args as args, kwargs as kwargs and current_app as context.current_app,
  raise an AttributeError with an argument string "%s could not be imported ", formated with self.name.
  instantiate class Decimal with string '1.0' as argument, divide it by product of instance of Decimal class created with integer 10,
  define the method add_filters with 3 arguments: self, filterer and filters.
  for every name in MEDIA_TYPES,
  singular is an empty list.
  derive the class LocalTimezone from the tzinfo base class.
  substitute memoryview for memoryview.
  for every obj in return value of the PythonDeserializer created with 2 arguments: return value of the function yaml.load,
  call the function getInnerText with an argument child, use the result as an argument for the call to the method inner_text.extend.
  substitute help_texts for value under the 'help_texts' key of attrs dictionary.
  raise an ValueError exception with an argument string 'Unable to configure filter %r: %s' formated with name and e.
  if ext doesnt start with '.' character,
  define the function indexbytes with 2 arguments buf and i.
  call the method m.groups, use the first element of the result as key for obtaining value from d dictionary,
  join self.namespaces into a string separated with character ':', substitute it for self.namespace.
  define the method get with 3 arguments: self, key and otherwise set to None.
  if value in self.empty_values,
  name is an empty list.
  get the value under the key key of the self.cookies dictionary, substitute expires for 'expires' key of the returned dictionary.
  import module cgi.
  define the function format_html with 3 arguments: format_string, unpacked list args and unpacked dictionary kwargs.
  cc is a dictionary populated with items by calling function _to_tuple with el as an argument,
  return a tuple with 3 elements: if path is true, path, in not, a string '%s.%s' formated with obj.__class__.__module__,
  use global variable _localtime.
  try,
  substitute kwargs for self.kwargs.
  if digest is None,
  define the method build_absolute_uri with an arguments self and location set to None.
  call the function os.stat with an argument filename, substitute the result for st.
  added to a tuple with an element sum of year an integer 28, substitute the result for s2.   call the function _findall with 2 arguments: s2 and sum of year and integer 28, converted into a string, substitute the result for sites2.
  if not,
  derive the class Widget from the base class in the return value of the six.with_metaclass called with an argument MediaDefiningClass.
  if string '()' is contained in config,
  if the result to the method call response.has_header, with string 'Cache-Control' as an argument is boolean False,
  from django.core.management.sql import sql_destroy_indexes into default name space.
  try,
  where '%s' is replaced with subject.   substitute i for p.
  call the function get_standard_processors, append processors to the result, for every processor is the result,
  call the function getargspec with an argument func, substitute the result for params, varargs, varkw and defaults, respectively.
  if not,
  otherwise if pluralmatch is true,
  msg is a string "Could not decode base64 data: %r", where '%r' is replace with e.
  from django.utils._os import safe_join into default name space.
  return self.__offset.
  call the function _get_foreign_key with 3 arguments: parent_model, model and fk_name=fk_name, substitute the result for fk.
  return tuple, consisting of first element of t converted to lowercase and second element of t.
  if GeneratorExit exception is caught,
  from django.utils.functional import allow_lazy into default name space.
  derive the class SyndicationFeed from the object base class.
  if process_all is true,
  call the function is_aware with an argument date, if it evaluates to true,
  define the method __init__ with 4 arguments: self, data set to None, files set to None, auto_id is an string 'id_%s', prefix is None,
  _format_modules_cache is an empty dictionary.
  if obj is an instance of Field, append to a list a tuple with 2 elements: field_name,   and poped value under the field_name key of the attrs dictionary, substitute the resulting list for fields.   sort fields elements with key being a lambda function with argument x and return value creation_counter filed of first element of x.
  find the first, second and third subgroup of the m regular expression match, assign the result to the attrname, rest and attrvalue, respectively.
  if not,
  if not,
  for every sql_file in sql_files,
  call the method path.normpath with an argument expanded_template, substitute it for expanded_template.
  call the method self.filter_function with arguments name and unpacked dictionary flags, return the result.
  return f.
  raise an ValueError exception with an argument string 'must define at least one ordering operation: < > <= >='.
  if i is greater than or equal to length of subject.
  get attr attribute from the _module object, substitute it for value.
  if replaces filed of graph.nodes element at the plan_node index is true,
  substitute self.model._default_manager for queryset.
  if arg is None,
  property decorator,
  if OverflowError or ValueError exceptions are caught,
  if not,
  try,
  define the method __new__ with 4 arguments: cls, name, bases and attrs.
  if middleware has an attribute 'process_request',
  call self.stdout.write method with app_name and self.style.MIGRATE_LABEL as arguments.
  and unpacked dictionary kwargs, return the result.   call the function MovedModule with 2 arguments: strings "_dummy_thread" and "dummy_thread",
  call the function split_url with an argument value, substitute the result for url_fields.
  self.max_digits and self.decimal_places,   raise an ValidationError with 3 arguments: value under the 'max_whole_digits' key of the self.error_messages dictionary,
  called with an argument this_value_expr, result of the method parser.compile_filter called with an argument max_value_expr,   return value of the method parser.compile_filter called with an argument max_width and asvar as asvar.   register.tag decorator function with an argument 'with',
  if Exception exception is caught.
  substitute link_prev for value under the PREV key of the link_next dictionary.
  subtract length of hextet from 4, create a string with previous result number of character '0', append hextet to it,
  otherwise if second element of args equals a string '404',
  ip_address_validator_map is a dictionary containing 3 initial entries: tuple containing 2 elements: list with an element,  validate_ipv46_address and return value of the function _ with an argument string 'Enter a valid IPv4 or IPv6 address.' for 'both',
  return self.__offset.
  from django.utils.timesince import timesince and timeuntil into default name space.
  help is a string "Deprecated - use 'migrate' instead.".
  if not,
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  if not,
  call the method self.target.resolve with 2 arguments: context and boolean True, substitute it for obj_list.
  args is an empty list.
  split p into two parts at the first ':', use the second element of the result to format string ' _(%s) ', write it to out.
  convert self.literal into an integer, substitute it for self.literal.
  return value under the key key of d dictionary.
  derive the class Iterator from the base class object.
  output is an empty list.
  if TypeError exception is caught,
  call the method signing.get_cookie_signer with an argument salt set to sum of key and salt, call the method unsign on the result,
  categories is a list containing the results of the function to_unicode, called with an argument c, for every c in categories.
  if obj_pk is not None,
  where '%d' is replaced with i and '%s' is replaced with subject.   increment i by integer 1,
  define the method add_prefix with 2 arguments: self and field_name.
  tpl is an string "DTDForbidden(name='{}', system_id={!r}, public_id={!r})".
  if app_config.models_module is None,
  derive the class Command from the BaseCommand class.
  raise an ValidationError with an argument errors.
  call the method stream_or_string.decode with string 'utf-8' as argument, substitute the result for stream_or_string.
  use the result as an argument for the call to the method final_output.extend.   add model to known_models set.
  derive the class MaxLengthValidator form the BaseValidator base class.
  substitute third element of renamed_method for deprecation_warning.
  return translated.
  join tokens elements into a string, substitute it for message.
  substitute newline character for newline.
  created with 4 arguments: qs, initial as pk_value, required as boolean False and widget as widget.   call the method add_fields from the base class of the class BaseModelFormSet, with 2 arguments: form and index.
  derive the class MultiValueDictKeyError from the KeyError base class.
  call the function construct_instance with 4 arguments form, instance, fields, exclude and substitute the result for instance.
  substitute third element of url_fields for second element of url_fields.
  call the function lazy with 2 arguments: func and unpacked list resultclasses, call the result with 2 arguments: unpacked list args,
  if NameError exception is caught,
  substitute callback for self.callback.
  if settings.USE_TZ is true and value is not None and call to the function timezone.is_aware with an argument value, evaluates to true,
  substitute template_dirs for self.template_dirs.
  call the function lazy_number with 5 arguments: ungettext, six.text_type, singular set to singular, plural set to plural,
  define the method getlist with 3 arguments: self, key and default set to None.
  append to a list elements of the iterator self, return the resulting list.
  call the method token.split_contents, substitute the result for bits.
  if i is true,
  for every app and names in key, value tuple pairs of conflicts dictionary join names into a string separated by commas,
  otherwise if value is an instance of datetime.datetime,
  call the method self._reverse_with_prefix with 4 arguments: lookup_view, an empty string, unpacked list args and unpacked dictionary kwargs.
  return a dictionary with 2 entries: value under the 'language' key of the self.feed dictionary for "xml:lang",
  define the function get_language_info with an argument lang_code.
  substitute stream for self._stream.
  append the results into a list, substitute it for value.   node is an instance CycleNode class, created with  values,name and silent set to silent.
  call the method field._has_changed with 2 arguments: initial_value and data_value, if it evaluates to true,
  raise an TemplateSyntaxError exception with an argument "Searching for value. Expected another value but found end of string: %s",
  is_usable is boolean True.
  call the method operator.attrgetter with an argument _func_code, substitute the result for get_method_code.
  if not,
  tuple containing 2 elements: list with an element validate_ipv4_address and return value of the function _ with an argument string,   'Enter a valid IPv4 address.' for 'ipv4' and tuple containing 2 elements: list with an element validate_ipv6_address,   and return value of the function _ with an argument string 'Enter a valid IPv6 address.' for 'ipv6'.   define the function ip_address_validators with arguments protocol and unpack_ipv4.
  call the function yaml.dump with 4 arguments: self.objects, self.stream, Dumper=DjangoSafeDumper and unpacked dictionary self.options.
  derive class SingleZipReader for zipfile.ZipFile base class.
  define the method _set_regex with arguments self and regex.
  options dictionary, if the key doesnt exists use settings.DEFAULT_CHARSET instead.   call the self.xml.startDocument method.
  return a list with 5 elements: strings 'parse', 'error', 'request', 'response' and 'robotparser'.
  and substitute the return value for value under the key 'Expires' of dictionary response.   call the function patch_cache_control, with response and max_age set to cache_timeout as arguments.
  raise an CommandError exception with an argument string "errors happened while running msguniq\n%s", where '%s' is replaced with errors.
  widget.input_type is a string 'hidden'.
  call the function self.to_python with an argument data, substitute the result for data.
  call the method pretty_name with an argument name, substitute the result for self.label.
  _supported is an instance of OrderedDict class, created with an argument settings.LANGUAGES.
  return obj_pk.
  _default is None.
  self._read_started is True.
  define the method bpython with an argument self.
  define the function new_date with an argument d.
  if settings.USE_THOUSAND_SEPARATOR is true,
  call the field.rel.to._meta.get_field method with an field.rel.field_name argument, on the result call the method to_python,
  call the function _curried_func with 2 arguments: list moreargs appended to args and unpacked,
  call the method pyinotify.Notifier with wm and EventHandler() as arguments, assign the result to notifier.
  import module datetime.
  raise an CommandError exception with an argument string "Destination directory '%s' does not exist, please create it first.",
  prefix set to None, current_app set to None.   if urlconf is None,
  from django.utils.translation import ugettext as _ into default name space.
  cookies is a string '<could not parse>'.
  call the method self.xml.endElement with an argument string 'field'
  define the method __str__ with an argument self.
  end_text_pos is equal to integer 0.
  call the method obj.save.
  multiply 10 to the power of 200, with 10 to the power of 200, negative, substitute the result for neg_inf.
  return no.
  import module datetime.
  from __future__ import unicode_literals into default name space.
  call the encode method on the result with string 'latin-1' as an argument, return the result.   define the method loads with arguments self and data.
  substitute length of digittuple for digits.
  base is an instance of Media class.
  sum punctuation and trail, substitute the result for trail.
  raise an KeyError with an argument "Unknown language code %s.", where '%s' is replaced with lang_code.
  if args is true,
  if stream_or_string is an instance of bytes,
  define the method _get_num_pages with an argument self.
  raise an TemplateSyntaxError exception with an argument string "Invalid arguments provided to simple_tag".
  from django.core.serializers import base into default name space.
  call the function warnings.warn with 3 arguments: string "django.utils.dictconfig will be removed in Django 1.9.",
  call the method formats.sanitize_separators with an argument value, substitute the result for value.
  get 'getvalue' attribute of the self.stream object, if it exists and is callable,
  truncate last 9 elements of filename and append it string ".py".
  raise an TemplateDoesNotExist exception with an argument template_name.
  define the method __contains__ with an argument self.
  derive the class TarArchive from the BaseArchive base class.
  if not,
  for every model in app_models,
  skip this loop iteration.
  __all__ is a tuple containing strings 'BaseFormSet', 'formset_factory' and 'all_valid'.
  try,
  if field.rel is true, and field.rel is an instance of models.ManyToManyRel,
  or path is not contained in the value under the medium key of self._css dictionary.   call the method self._css.setdefault with 2 arguments medium and an empty string, append path to the result.
  substitute settings.CACHE_MIDDLEWARE_SECONDS for cache_timeout.
  delete logging._handlerList list.
  call the method copy.deepcopy with an argument self.widgets, substitute the result for obj.widgets.
  from django.utils import six into default name space.
  if f.rel and f.rel.to are not contained in to_delete,
  derive the class Serializer from the PythonSerializer base class.
  value is an instance of ConvertingTuple class, created with an argument value.
  call the function warnings.warn with 2 arguments: string "django.utils.tzinfo.LocalTimezone will be removed in Django 1.9. "
  format_key is a string 'DATETIME_INPUT_FORMATS'.
  derive the class FilterNode from Node base class.
  if inplural is true,
  try,
  define the function compress_string with an argument s.
  call the method to_python with an argument value, from the base class of the IntegerField class, substitute the result for value.
  if file_obj is true,
  return None.
  call the method regex.search with 2 arguments: text and pos.
  called with an argument error, for every error in bf.errors, substitute the result for bf_errors.   if bf.is_hidden is true,
  try,
  DEFAULT_LOGGING is a dictionary with 5 initial entries: 1 for 'version', False for 'disable_existing_loggers',
  define the function parse_etags with an argument etag_str.
  if NameError exception is caught,
  define the method validate with arguments self and value.
  substitute language for self.language.
  if TypeError, ValueError or UnicodeDecodeError exceptions are caught,
  if self._wrapped is empty,
  if not,
  parts is an empty list.
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  call the method input with an argument msg and store the result in confirm.
  return the string.   define the function make_style with 2 arguments: opts set to an empty tuple and unpacked dictionary kwargs.
  raise an AttributeError exception with an argument string "You cannot set content to a 304 (Not Modified) response".
  call the method create_token from the base class of the class DebugLexer, with 2 arguments: template_string and in_tag,
  define the method __init__ with 4 arguments: self, data, func and prefix.
  get the value under the 'content-type' key of the info dictionary, substitute it for content_type.
  define the method add_error with 3 arguments: self, field and errors.
  define the method get_json_data with 2 arguments self and escape_html set to boolean False.
  define the method validate with arguments self and value.
  call the method setdefault from the base class of the class SortedDict, with 2 arguments key and default, return the result.
  call the method self.as_widget with 3 arguments: instance of a class TextInput, attrs and unpacked dictionary kwargs, return the result.
  define the method content with self and value.
  define the function avoid_wrapping with an argument value.
  if Exception exception is caught,
  join p and cmd into a file path, substitute it for f.
  if AttributeError exception is caught,
  derive the class LoaderOrigin from the Origin base class.
  and memo, and result of the function copy.deepcopy called with 2 arguments: value and memo.   return result.
  call the function check_for_migrations with arguments app_config and connection.
  define the method initial_form_count with an argument self.
  raise an exception,
  if COOKIES_override is not None, or otherwise generated with the call to the function pformat with an argument request.COOKIES.   if Exception exception is caught,
  derive the class RegexURLPattern with LocaleRegexProvider as base class.
  from django.apps import apps into default name space.
  import module sys.
  initial is boolean False.
  concatenate first site elements of s, syear and elements of s from the site incremented by integer 4 index, substitute the result for s.
  call the connection.creation.sql_indexes_for_model with model and no_style() as arguments, substitute the result for index_squl.
  errors is an empty list.
  define the method create_nodelist with an argument self.
  get '_filter_name' attribute of the func object, if it exists, substitute it for filter_name, if not, filter_name is None.
  return boolean True, otherwise return boolean False.   define the function make_aware with 2 arguments: value and timezone.
  for every field in concrete_model._meta.local_fields,
  define the method _initialize_handlers with an argument self.
  schemes is a list containing 4 initial elements: 'http', 'https', 'ftp' and 'ftps'.
  if ttl is not None,
  multiply seconds by count, subtract it from since, divide the result by seconds2, store the floored result in count2.
  raise an CommandError exception with an argument string "you must provide %s %s name", where '%s' is replaced with string 'an',
  call the method self.g, return the result.
  call the method self.unclosed_block_tag with an argument parse_until.
  from django.utils.six.moves.urllib.parse import quote, unquote, urlsplit and urlunsplit into default name space.
  call the method self.configure_root with 2 arguments: root and boolean True.
  call the function cls with 8 arguments: date.year, date.month, date.day, time.hour, time.minute, time.second, time.microsecond,
  append ')' to third element of bit, substitute it for sentinal.
  raise CommandError exception with "App '%s' does not have migrations (you cannot selectively sync unmigrated apps)",
  import warnings.
  append x converted to an integer to bits.
  call the method os.path.dirname with an argument potfile, join the result, locale and string 'LC_MESSAGES' into a file path,
  return nothing.
  get the value under the 'HTTP_ACCEPT_LANGUAGE' key of the request.META dictionary, if it exists substitute it for accept,
  asvar is None.
  derive the class UnrecognizedArchiveFormat from the ArchiveException base class.
  call the method self.nodelist.render with an argument context, return the result.
  use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.   call the method writer.as_string, append newline to the result, write it to self.stdout.
  call the method self.add_error with 2 arguments None and e.
  if request has an attribute 'session',
  call the function run with 5 arguments: self.addr, self.port converted to an integer, handler, ipv6 set to self.use_ipv6,  and threading set to threading.
  define the method read with arguments self and size set to None.
  if chunk is None,
  sys.stdout is an instance of NullDevice class.
  call self.errors.
  reverse order of elements of self.keyOrder, return the result.
  raise an TemplateSyntaxError exception with an argument string '"filter %s" is not permitted.  Use the "autoescape" tag instead.',
  call the method handler.addQuickElement with 3 arguments: string 'summary', value under the 'description' key of item dictionary,
  from django.utils.text import normalize_newlines into default name space.
  call the function re.compile with raw string '(<a [^>]*?)target=[^\s>]+', substitute the result for link_target_attribute_re.
  return an instance of Literal class, created with an argumen value.
  call the method self.empty_variable with an argument token,
  do nothing.
  if self.verbosity is greater or equals to integer 2.
  xgettext_options is an list with elements: strings '--from-code=UTF-8' and '--add-comments=Translators'.
  remove first element from name, substitute the result for used.
  if not accept is an empty string.   call the function parse_accept_lang_header with an argument accept, for every accept_lang and unused in the result,
  define the method widget_attrs with arguments self and widget.
  assign the result to the sql and references, respectively.   add model to seen_models set.
  if name is true, substitute it for self.name, otherwise substitute func.__name__ for self.name.
  return self.
  substitute list_ for first_item and second_item, respectively.
  call the function timedelta with an argument minutes set to offset, substitute the result for self.__offset.
  wsgi_opts is a dictionary with 4 initial entries: value under the key 'maxspare' of options dictionary converted to an integer,
  define the method get_host with an argument self.
  define the method render with 4 arguments: self, attrs set to None, date_format set to None and time_format set to None.
  if t.token_type equals TOKEN_BLOCK and t.contents equals 'endcomment',
  instantiate class Truncator, with an argument value, call the method chars on the result with an argument length, return the result.
  if not,
  return self._cached_loaders.
  substitute first element of renamed_method for old_method_name.
  if name is true,
  substitute value under the PREV key of the root dictionary for last.
  if AttributeError exception is caught,
  substitute lineno for translators_comment_start.
  raise an TemplateSyntaxError exception with an argument string "'%s' cannot appear more than once in the same template",
  and result of bitwise OR performed on 2 operands: re.MULTILINE and re.VERBOSE,   substitute the result for value under the state key of the self.regexes dictionary.   substitute first for self.state.
  append self.pointer to self.backout.
  call the function six.iteritems with an argument: instance of base class of the MultiValueDict class, return the result.
  if value is contained in self.empty_values,
  call the function get_current_timezone, substitute the result for timezone.
  bad_app_labels is an empty set.
  for every code in tuple with 2 elements: lang_code and generic_lang_code,
  define the method add_arguments with self class instance and parse as the arguments.
  return valid.
  derive the class SubWidget from the object base class.
  raise an ViewDoesNotExist exception with an argument string "Could not import '%s'. View does not exist in module %s.",
  define the method __init__ with arguments self, name, sysid and pubid.
  substitute input_formats for self.input_formats.
  for m in merge_migrations append m.ancestry to a list, zip the resulting list into tuples of pairs, for every level in result,
  if item is contained in the list of the elements of self, return boolean True, otherwise return boolean False.
  substitute args for self.args.
  call the function http_date with no arguments, and substitute its return value
  and unpacked dictionary kwargs.   define the function allow_lazy with 2 arguments: func and unpacked list resultclasses.
  return obj.
  if PY3 filed of six is boolean True,
  under the BLOCK_CONTEXT_KEY key of render_context dictionary dictionary evaluates to be not equal to None,   call the method self.render with an argument self.context, use it as an argument for the call to the mark_safe function, return the result.
  Template, TextNode, Token, TokenParser, Variable, VariableNode, constant_string and filter_raw_string.   from django.template.base import compile_string, resolve_variable, unescape_string_literal and generic_tag_compiler.
  if not,
  derive the class FileInput from the Input base class.
  if it doesnt exists return value of the function capfirst with an argument self.fk.verbose_name for 'label'.   if self.fk.rel.field_name is not equal to self.fk.rel.to._meta.pk.name,
  call the function factory with an argument unpacked dictionary kwargs, substitute the result for result.
  derive the class Loader from the BaseLoader base class.
  return the result.   derive the class HiddenInput from the Input base class.
  if self.timezone is true, call the method self.timezone.tzname with an argument self.data, substitute the result for name,
  raise an TemplateSyntaxError exception with an argument string "Invalid templatetag argument: '%s'. Must be one of: %s",
  return integer 0 and ch2.
  call the form.is_valid method, if it evaluates to false,
  if 'locale' is a directory,
  match rest string with self.WORD_PATTERN regex, substitute the result for m.
  from importlib import find_loader as importlib_find.
  if reversed is True substitute difference of d and now for delta, if not substitute the difference of now and d for delta.
  lines is an empty list.
  substitute self.required for widget.is_required.
  otherwise, if field.rel is true and field.rel is an instance of models.ManyToOneRel,
  call the method self.characters with an argument contents.
  convert data to string, substitute it for data.
  call the method notifier.check_events with argument timeout set to None.
  otherwise if call the method simple_url_2_re.match with an argument middle evaluates to true,
  raise an TypeError with an argument s.
  define the function render_to_string with 4 arguments: template_name, dictionary set to None, context_instance set to None and dirs set to None.
  where '%r' is replaced with first element of bits.   if remaining_bits is true,
  convert tag to lowercase, use it as the argument for the call to the method self.handle_endtag.
  filesize_number_format with result of division of bytes by GB as an argument, substitute the result for value.   otherwise if bytes is smaller than PB,
  call the method bytes_to_text with 2 arguments: default and self.encoding, substitute the result for default.
  define the function get_ns_resolver with arguments ns_pattern and resolver.
  append value under the key v of foreground dictionary to code_list.
  derive class Command from CheckCommand base class.
  call the method datetime_safe.new_date with an argument value, substitute the result for value.
  if count of occurrence of '::' in ip_str equals integer 1,
  call the function force_text with an argument text, substitute the result for text.
  return value.
  call the method obj.natural_key, substitute the result for natural_key.
  value under f.name key of the dta dictionary is an empty list.
  substitute second element of bits for tag.
  substitute f.name for field.
  define the function _string_concat with an argument unpacked list strings.
  sum lead and opening, substitute the result for lead.
  find first index of occurrence of character '-' in locale, substitute it for p.
  formated with string created by joining elements of result of the function re.escape with an argument x, with separator '|',   for every x in DOTS, and re.DOTALL, substitute the result for hard_coded_bullets_re.   call the function re.compile with raw string '(?:<p>(?:&nbsp;|\s|<br \/>)*?</p>\s*)+\Z', substitute the result for trailing_empty_content_re.
  define the method __len__ with an argument self.
  do nothing.
  get 'error_messages' attribute from the options object, if it exists substitute it for self.error_messages,
  if lib is false,
  define the method negate with an argument self.
  get the absolute path of the __file__, repo_dir is name of the directory two leveles above it.
  call the method self._setupfunc, substitute the result for self._wrapped.
  potfiles is an empty list.
   return self.position.
  if self.verbosity is greater or equal to integer 1,
  substitute DEFAULT_PORT for self.port.
  subtract timestamp from the return value of the function time.time, substitute the result for age.
  elt is an list with an element elt.
  if template_source_loaders is None,
  substitute object for Iterator.
  call the method handler.endElement with 2 arguments: string 'author' and an empty dictionary.
  if data is true, substitute it for self.files, otherwise self.files is an empty dictionary.
  substitute settings.TEMPLATE_STRING_IF_INVALID with obj.
  from django.core.serializers.json import DjangoJSONEncode into default name space.
  get the unicode representation of result of the method match.group called with an integer 1, format with in a string "\\u%04x",
  substitute name for self.name.
  call the function unescape_string_literal with an argument var, use it as an argument for the call to the function mark_safe,
  define the method __iter__ with an argument self.
  re.U and re.S, substitute the result for re_chars.   call the function re.compile with an argument raw string '\r\n|\r', substitute the result for re_newlines.
  msg is an string "Unclosed tag '%s'. Looking for one of: %s ", where '%s' is replaced with command,
  and return value of the field.get_internal_type method for 'type'.   if field.name attribute of obj is not None,
  get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.
  sum day_of_year, result of the subtraction of weekday from integer 7 and subtraction of integer 1 from jan1_weekday.
  raise an ValueError exception with an argument string 'Unable to configure handler %r: %s' formated with name and e.
  call the method related.natural_key, substitute the result for related.
  format the string  '<p>%s</p>' with the result, for every p in paras, substitute list of results for paras.   if not,
  return nodes.
  define the method __getitem__ with an argument self.
  if ImportError, renamed to e, exception is caught,
  call the function _slugify with an argument value, return the result.
  return ZERO.
  from django.conf import settings into default name space.
  call the function http_cookies.SimpleCookie, on the return value call the value_encode method, with the argument character ';',
  call the method logging._releaseLock.
  substitute parser for self.template_parser.
  append string " The domain name provided is not valid according to RFC 1034/1035." to msg.
  call the method filter_re.finditer with an argument token, substitute the result for matches.
  if self.method is not equal to string 'POST',
  _translations is an empty dictionary.
  call the method token.split_contents, substitute the result for args.
  endless loop,
  if not,
  call the function logging_config_func with an argument logging_settings.
  define the function striptags with an argument value.
  raise an TemplateSyntaxError exception with an argument string "%r takes two arguments",
  zip val1 and va2 into list of tuples, for every x and y in the result,
  if localized_fields equals ALL_FIELDS, or if localized_fields is true and f.name is contained in localized_fields,
  define the function escape_filter with an argument value.
  if text ends with truncate,
  define the method prepare_value with arguments self and value.
  call the function get_urlconf with an argument urlconf.
  if key starts with self.prefix.
  call the function _ with an argument string '(Hidden field %(name)s) %(error)s', where '%(name)s' is replaced with name,
  define the function gettext_noop with an argument message.
  if fields is not None and f.name is not contained in fields,
  get the value under the 'addrport' key of the options dictionary, if it is false,
  if value under the 'indend' key of the options dictionary exists and is not None,
  substitute '%s' in string '%s-%s-%s' with y, m and d, return the result.
  define the method __str__ with an argument self.
  must be 'as'", where '%s' is replaced with function_name.   substitute last element of bits for target_var.
  for every node in return value of the graph.leaf_nodes method called with the app_name argument,
  define the function timesince with d, now defaulting to None, reversed defaulting to False as arguments.
  substitute serialize_headers for __str__.
  define the method __getattr__ with 2 arguments: self and real_name.
  call the method self.style.NOTICE with an argument:
  result is a list containing an empty string.
  get the value under the index key of the hextets dictionary, remove the leading '0' characters,
  define the method tokenize with an argument self.
  format string ' gettext(%r) ' with g, write it to out.
  default set to boolean True and help set to string 'Tells Django to NOT prompt the user for input of any kind.'.   call the parser.add_argument with string '--addrport', default set to an empty string and help as string 'Port number or ipaddr:port to run the server on.'.
  _cookie_allows_colon_in_names is boolean False.
  otherwise if vale is an instance of value,
  concatenate string '%0', width and string "d. %s", format the previous string with i incremented by 1,
  call the method handler.endElement with an argument string 'author'.
  _moved_attributes is a list with 55 initial elements, 13 of them are the results of the call to the function MovedAttribute,
  to_locale called with an argument lang_code, if the result is not None,   return boolean True.
  call the method content.encode with an argument string 'utf-8', substitute it for content.
  if self._done is true,
  if first element of args is an instance of SafeData, and 'is_safe' attribute of dec._decorated_function object is true,
  from django.core.servers.fastcgi import runfastcgi into default namespace.
  from django.utils.timezone import is_aware and utc into default name space.
  if new is None,
  otherwise if _locs_ is None,
  decrement number by one, multiply it with self.per_page, substitute the result for bottom.
  while answer is false or answer is not contained in string "yn", perform the following,
  from django.conf import settings into default name space.
  call the method self._mark_post_parse_error.
  call the method handler.addQuickElement with 2 arguments: string 'rights' and value under the 'feed_copyright' key of the self.feed dictionary.
  nodelist_empty is None.
  disable_existing is boolean True.   call the method logging._handler.clear.
  convert elements of defaultdict to list, substitute it for self.blocks.
  define the method parse with an argument self.
  _ with an argument string "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.",   and string 'invalid'.   call the re.compile function with an argument raw string '^(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}$',
  if data is an instance of MultiValueDict or MergeDict,
  if want_unicode is true,
  yield key.
  get the value under the 'filename' key of the params dictionary, if it is true,
  call the method context.new with an argument values, use it as an argument for the call to the method template.render, return the result.
  if propagate is not None,
  try,
  for every supported_code in _supported,
  new_args is an empty list.
  if new_value equals value,
  if param is contained in unhandled_params,
  expires is None.
  if name equals a string 'regex',
  if AmbiguityError exception is caught,
  derive the class RawPostDataException from the base class Exception.
  'Enter a number.' for 'invalid'.   define the method to_python with arguments self and value.
  from django.conf import settings into default name space.
  call the method self.data.utctimetuple, use the result as an argument for the call to the function calendar.timegm,
  from __future__ import unicode_literals into default name space.
  return value of the function smart_text with return value of the method value._get_pk_val as an argument for 'pk'.   for every relobj in iterator generated from the field.name attribute of the obj object.
  replace hextets list from the best_doublecolon_start index to best_doublecolon_end index with an empty string.
  append list containing string '--no-location' to self.msgmerge_options.
  if can_fail is true,
  if key is contained in last element of self.dicts, return boolean True, otherwise return boolean False.
  from django.utils import six into default name space.
  return host.
  tried is an empty list.
  substitute form.instance for obj.
  do nothing.
  if leading is true,
  define the method __copy__ with an argument self.
  targets is a list containing tuple with two elements, app_label and None.
  return self.
  increment bytes_read by length of bytes.
  m2m_data is an empty dictionary.
  define method add_arguments with class instance self and parser as the input arguments.
  return value.
  opts and unpacked dictionary kwargs.   NOCOLOR_PALETTE is a string 'nocolor'.
  self._populated is boolean False.
  do nothing.
  call the method Model._default_manager.db_manager with an argument db, on the result call the get_by_natural_key with,
  call the method self._handle_object with an argument node, return the result.
  substitute SafeText for SafeString.
  substitute name for old_attr.
  do nothing.
  if not,
  define the function get_library with an argument library_name.
  define the function time_format with 2 arguments: value and format_string.
  get the value under the library_name key of the libraries dictionary, if it exists, substitute it for lib, if not, lib is None.
  try,
  define the method __init__ with 2 arguments self and file.
  if self.selected_fields is None or last three elements of field.attname are contained in self.selected_fields:
  call the self.style.MIGRATE_HEADING method with string "Running migrations:" as an argument, use the result as an argument for the call to the self.stdout.write method.
  split ip_str by '::', substitute it for hextet.
  if ImportError exception is caught,
  convert value under the 'HTTP_CONTENT_LENGTH' key of the META dictionary to an integer of base of value under the 'CONTENT_LENGTH' key of META dictionary, if the key doesnt exists use 0 as the base, substitute the result for content_length.
  if length of list_ equals integer 1,
  join output into a string, separated by newline characters, use it as an argument for the call to the mark_safe, return the result.
  call the baseconv.base62.decode method with an argument timestamp, substitute the result for timestamp.
  if encoding equals to string 'utf-8'.
  form_class_attrs is a dictionary with 2 entries: Meta for 'Meta' and formfield_callback for 'formfield_callback'.
  append string '.moves' to __name__, use it as an argument to instantiate _MovedItems class, assign it to moves,
  if self.verbosity is greater or equal to integer 1,
  if not,
  define the method write with 3 arguments self, outfile and encoding.
  value is None.
  from django.core.management import call_command into default name space.
  from django.template.loader import get_template, select_template.
  try,
  substitute negate for self.negate.
  define the method with reload with an argument self.
  substitute filter_expression for self.filter_expression.
  if relative_dir is true,
  return a list with an element etag_str.
  property decorator.
  raise an exception CommandError, with argument string "%r conflicts with the name of an existing Python module and cannot be used as a project name. Please try another name.", where '%r' is replaced with project_name.
  if not,
  substitute origin for self.origin.
  raise an ValueError exception with an argument string 'Unable to configure logger %r: %s' formated with name and e.
  from django.core.exceptions import ValidationError and NON_FIELD_ERRORS into default name space.
  open pythonrc, with the file handle renamed to handle perform the following,
  if arg is an instance of unicode,
  define the function b with an argument s.
  call the function language_code_prefix_re.match with an argument path, substitute it for regex_match.
  and re.VERBOSE, substitute the result for accept_language_re.   call the function re.compile with 2 arguments: raw string '^[a-z]{1,8}(?:-[a-z0-9]{1,8})*$' and re.IGNORECASE,
  if not,
  substitute fields for self.fields.
  join return value of the function six.text_type called with an argument self.management_form and forms into a string,
  element of data at the index last equals to carriage return bytes character.
  skip this loop iteration,
  if stream_or_string is not an instance of bytes or six.string_types,
  get dictionary self items, convert the result into a dictionary, convert the result into a string and return it.
  if self.regex is not an instance of a six.string_types type,
  call the method self._should_delete_form with an argument form, if it evaluates to true,
  iterator is an instance of ChunkIter class, created with arguments: stream_or_iterable and integer 16384.
  if self.use_natural_foreign_keys is true and field.rel.to has an attribute 'natural_key',
  call the executor.migrate method with, targets, plan and fake set to the value under the 'fake' key of options dictionary,
  define the method __init__ with 2 arguments: self and variables.
  if value is true,
  define the method data with an argument self.
  for every member in members,
  call the clean method wiht value argument from the base class of the SlugField class, return the result.
  call the function re.compile with 2 arguments: raw string "((?:[^\s'"]*(?:(?:"(?:[^"\\]|\\.)*" | '(?:[^'\\]|\\.)*')[^\s'"]*)+) | \+)",
  call iri_to_uri with return value of the request.build_absolute_uri method, us the result as the argument for the call to the
  if labels is not None,
  append options to output.
  if not self.to_field is None.   if self.parent_instance is not None,
  try,
  if cursor is true and return value of the function connection.introspection.table_name_converter called with an arugment:  model._meta.db_table is contained in table_names,
  call the method self._assert_mutable.
  substitute deprecation_warning for self.deprecation_warning.
  substitute io.StringIO for StringIO.
  call the method self.configurator.convert with an argument value, substitute the result for result.
  from django.utils import six into default name space.
  call the method parser.find_filter with an argument filter_name, substitute the result for filter_func.
  call the method kwarg_re.match with an argument first element of bits, substitute the result for match.
  return _translations dictionary value, under the language key.
  return a dictionary with an entry: self.ns for "xmlns".
  self._post is an instance of QueryDict class, created with an empty string and mutable set to boolean True.
  call the function dateformat.format with 2 arguments: value and result of the function get_format called with 2 arguments:
  from __future__ import unicode_literals into default name space.
  call the function shutil.move with arguments the_path and guessed_path.
  define the method __add__ with arguments self and other.
  define the method serialize_headers with an argument self.
  remove the elements from the 'name' and 'dictionary' keys of the options dictionary, substitute them for project_name and target, respectively.
  FILTER_ARGUMENT_SEPARATOR, FILTER_SEPARATOR, SINGLE_BRACE_END, SINGLE_BRACE_START, TOKEN_BLOCK, TOKEN_COMMENT, TOKEN_TEXT, TOKEN_VAR,   TRANSLATOR_COMMENT_MARK, UNKNOWN_SOURCE, VARIABLE_ATTRIBUTE_SEPARATOR, VARIABLE_TAG_END, VARIABLE_TAG_START, filter_re and tag_re.   from django.template.base import ContextPopException, InvalidTemplateLibrary, TemplateDoesNotExist, TemplateEncodingError,
  define the function now with 2 arguments: parser and token.
  call the threading.local method, assign the result to trans_real._active.
  concatenate path and string '.%s', append the result to format_module_path.
  if not self.isolated_context is boolean False.   call the method __init__ from the base class of the class IncludeNode, called with 2 arguments: unpacked dictionary args,
  self._is_rendered is boolean False.
  define the function find_command with 3 arguments: cmd, path set to None and pathext set to None.
  substitute arg converted into a integer for length.
  if self.paginator.count equals a integer 0,
  __author__ is a string "Benjamin Peterson <benjamin@python.org>".
  write a new line to the self.stream file stream.
  parent is a tuple with 1 element, object.
  substitute cls.__text_cast for cls.__text_cast.
  append a tuple with 2 elements: obj and form.changed_data to self.changed_objects.
  if settings.DEBUG is true, return boolean False, otherwise return boolean True.
  update attrs dictionary with entry: self.max_length converted into a string for 'maxlength'.
  import module warnings.
  skip this loop iteration,
  if value is an instance of datetime.date,
  if self.locale_paths is true,
  call the initialization method UnicodeDecodeError.__init__, with self instance of this class and *args as arguments.
  call the method wm.add_watch with path and mask as arguments.
  from importlib import import_module into default name space.
  do nothing.
  if not,
  define the method render with 2 arguments: self and context.
  raise an TemplateSyntaxError with an argument string "%r tag takes at least one argument: the name of the template to be included.",
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  call the method s.getvalue, return the result.
  dest as a string 'ignore_patterns', default as an empty list, metavar as a string 'PATTERN',   and help as a string 'Ignore files or directories matching this glob-style pattern. Use multiple times to ignore more.'.   call the method parser.add_argument with 5 arguments: string '--no-default-ignore', action as a string 'store_false',
  derive the class InclusionNode form the base class TagHelperNode.
  return plural.
  define the function advance_iterator with an argument it.
  call the method base.DeserializedObject with arguments obj and m2m_data, return the result.
  call the method token.contents.split, substitute the result for args.
  if third element of bits equals a string 'parsed',
  if trim is true,
  define the function make_decorator with 2 arguments: unpacked list m_args and unpacked dictionary m_kwargs.
  otherwise if ':' is not contained in middle and result of the function simple_email_re.match called with an argument middle,
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  if sys.platform equals to string "win32",
  define the function iter_format_modules with 2 arguments: lang and format_module_path set to None.
  split string s once, with '=' as delimiter, substitute the result for t.
  define the method h with an argument self.
  call the function get_fixed_timezone with an argument offset, substitute the result for tzinfo.
  derive the class EscapeBytes from bytes and EscapeData base classes.
  RemovedInDjango19Warning and stacklevel set to integer 2.   define the function _resolve_name with 3 arguments: name, package and level.
  throw an exception with string "unexpected call to parse_endtag" as the message.   search anywhere in the rawdata string starting from the (i+1)-th element for the _html_parser.endendeag, replace the result for match.
  call the method m.group with an argument integer 0, substitute the result for s.
  INITIAL_FORM_COUNT is a string 'INITIAL_FORMS'.
  sort current_fields elements with key being a lambda function with argument x and return value creation_counter filed of first element of x.
  where '%s' is replaced with result of the method self.current_token.display.   return retval.
  if html is true,
  call the method parser.add_argument with 4 arguments: string '--plain', action set to string 'store_true', dest as a string 'plain',
  match the rawdata from the position i+1, with tagfind pattern, assign the result to the match.
  while '<' is contained in value and '>' is contained in value,
  call the method selected_choices.remove with an argument option_value.
  substitute self.context.render_context for render_context.
  directory_created is an empty dictionary.
  substitute the result for block_re.   call the function re.compile with an argument raw string "^\s*endblocktrans$", substitute the result for endblock_re.
  call the function starttag_re.sub with 2 arguments: an empty string and html, substitute the result for html.
  define the function restart_with_reloader.
  call the method base64.b64decode with an argument chunk, substitute the result for chunk.
  call the method __init__ from the base class of the class RadioChoiceInput, with 2 arguments: unpacked list args,
  call the function inner.copy, substitute the result for dig1, call the function outer.copy, substitute the result for dig2.
  call the method readline.parse_and_bind with an argument string "tab:complete".
  append item to self.items.
  define the method __hash__ with an argument self.
  split arg by ',', substitute the result for bits.
  raise an ValueError exception with an argument string "%r is not in a valid HTTP date format" formated with date.
  derive the class RenderContext from the BaseContext base class.
  put loaders elements in a tuple, substitute it for template_source_loaders.
  decorator function register.filter with an argument is_safe set to boolean True.
  call the s.serialize method with arguments queryset and unpacked dictionary options.
  define the function is_ignored with arguments path and ignore_patterns.
  call the function force_text with an argument base, substitute the result for base.
  from __future__ import unicode_literals into default name space.
  integer 0, appended to a string "strftime of dates before 1900 does not handle".   substitute dt.year for year.
  convery value into a tuple, substitute it for value.
  import module django.
  perform the following:   call the method fp.read, substitute the result for src_data.
  call the method __delitem__ from the base class of the class SortedDict, with an argument key.
  call the self.start_object with an argument obj.
  define the function parse_color_setting with an argument config_string.
  substitute the result for offset_mins, otherwise offset_mins is integer 0.   convert elements of tzinfo from indexes 1 to 3 to an integer, multiply it by integer 60 and increment it by offset_mins,
  return an instance of Template class, created with 2 arguments: source, origin and name, return the result.
  from django.core.management.base import CommandError into default name space.
  import module re.
  _empty_value is an empty string.
  if LookupError exception is caught,
  factor is integer 0.
  otherwise if second element of args equals a string '304',
  append error_class converted into a string to string 'errorlist ', substitute the result for self.error_class.
  if not,
  call the method tzinfo.__init__ with an argument self.
  if parse_until is true,
  call the method s.decode with encoding and errors as the arguments, substitute the result for s.
  substitute bits without last two elements for bits.
  call the method qs.values_list with 2 arguments: string 'pk' and flat set to boolean True, put the results in a list,
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  define the function runfastcgi with 2 arguments: argset set to an empty list and unpacked dictionary kwargs.
  define the method regex with an argument self.
  self.timezone is None.
  get the value under the field key of the html dictionary, append it to output.
  if self.asvar is None,
  open out_log file in append mode with buffering size of the input buffer, substitute the result for sys.stdout.
  delete first 3 elements of bits.
  if TypeError exception is caught,
  if self.cdata_tag is not None,
  call the method os.setsid.
  map elements from args through the function conditional_escape, substitute the result for args_safe.
  raise an ValueError with an argument string "Invalid timezone: %r", substitute '%r' with timezone.
  call the function self.tag with 2 arguments: function_name and compile_func.
  if end is not a '>' or '/>' character,
  call the method self._convert_to_charset with arguments: header and string 'ascii', substitute the result for header.
  for every a and n in targets, put a into a set, join all the set elements into a string separated by string ', ',
  call the function is_aware with an argument value, if it evaluates to true,
  replace '%s' in string "copying plural forms: %s\n" with plural_form_line, write it to self.stdout.
  raise a ValidationError exception with 2 arguments: return value of the function _ with an string argument 'Enter a valid integer.',
  if not,
  define the method __init__ with arguments self, context, base, sysid and pubid.
  help is a string "Prints the SQL statements for the named migration."
  self.getlist with an argument k, for every k in self.   return obj_dict.
  substitute str for text_type.
  if template starts with a string 'file://',
  if not,
  with different 3 string arguments, the others are results of the call to the function MovedModule called with 3 string arguments.   for every attr in _moved_attributes,
  if TypeError exception is caught,
  try,
  subclass is a class named Migration, sub classed from migrations.Migration base class, with fields dependencies set to an empty list,
  if s is not an instance of the object Exception,
  call the method self.format with an argument string '0', substitute the result for name.
  for 'maxSpare', value under the key 'minspare' of options dictionary converted to an integer for 'minSpare',   and value under the key 'maxchildren' of options dictionary converted to an integer, for 'maxThreads'.   if not,
  if form is contained in forms_to_delete,
  append value to parts.
  call the method sys._getframe with an argument 1, substitute the result for frame.
  define the function blankout with 2 arguments: src and char.
  call the method parser.parse with an argument tuple with an element string 'else' and end_tag, substitute the result for nodelist_true.
  if command is contained in parse_until,
  define the method __nonzero__ with an argument self.
  sum trail and closing, substitute the result for lead.
  call the method m.end with an argument integer 0, substitute the result for pos.
  call the method block.nodelist.render with an argument context, substitute the result for result.
  delete first element of bits.
  if six.PY3 is true,
  try,
  define the method execute with 3 arguments self, unpacked list args and unpacked dictionary options.
  _templatetags_modules is an empty list.
  if not,
  define the function parse_boundary_stream with arguments stream and max_header_size.
  substitute name for filter_func._filter_name.
  delete entry under the attr key of obj_dict dictionary.
  if self.data.hour is greater than integer 11,
  append '-' to generic_lang_code, if supported_code starts with it,
  for every path in format_module_path,
  from django.utils.encoding import force_text into default name space.
  define the method skip_past with 2 arguments: self and endtag.
  if transfer_encoding equals string 'base64',
  call the function re.compile with an argument string '(%s.*?%s|%s.*?%s|%s.*?%s)', substitute all occurrences of '%s' with,
  append string '-- The following references should be added but depend on non-existent tables:' to the final_output.
  call the method self._start_relational_field with the argument field.
  set old_method_name attribute of the base object to the result of the function wrapper called with an argument new_method.
   substitute code for self.code.
  leave_locale_alone is boolean True.
  if original_lookup and lookup_view are not callable objects,
  get the value of the values dictionary under the value converted to lowercase key, substitute it for value, if the key doesnt exists,
  raise an FieldError exception with an argument message.
  try,
  raise an TemplateDoesNotExist exception.
  call the method handler.addQuickElement with 2 arguments: string 'rights' and value under the 'item_copyright' key of the item dictionary.
  otherwise if self._meta.fields is true and field is not contained in self._meta.fields,
  raise an ValidationError with 2 arguments: value under the 'invalid_list' key of the self.error_messages dictionary and code set to 'invalid_list'.
  call the function get_language, split the result by '-', substitute the first element of the result for base_lang.
  for app_config in reversed list of apps.get_app_configs() elements,
  substitute _iterkeys for keys.
  if the key doesnt exists substitute boolean False for self.use_natural_keys.   if self.use_natural_keys is true,
  call the function base.DeserializedObject with obj and m2m_data as arguments, yield the result as the generator return value.
  if not,
  if not,
  call the method self.write_po_file with 2 arguments: potfile and locale.
  if _win is true,
  call the method self.writer_leaves.
  from __future__ import unicode_literals into default name space.
  status set to None and current_app set to None.   substitute request for self._request.
  if 'incomplete' key of the f.error_messages doesnt exists, assign it the value under the 'incomplete' key of the self.error_messages dictionary.
  define the method _resolve_lookup with 2 arguments: self and context.
  if lib is false,
  call the function _load_serializers.
  return out.
  decorator deconstructible,
  import module io.
  if min_num is None,
  from django.utils.datastructures import MultiValueDict into default name space.
  choices is an property property object of this class, with _get_choices getter and ChoiceField._set_choices setter functions.
  where '%s' is replaced with first element of bits.   otherwise if options equals 'only',
  call the method pk.rel.to._default_manager.get_queryset, substitute the result for qs.
  with self.mutex perform,
  define the method handle with 2 arguments: self and unpacked dictionary options.
  call the method resultclass.mro, reverse the order of elements, for every type_ in the result.
  put a tuple with 2 elements: k and value under k key of self dictionary into a list, for every k in self.keyOrder,
  substitute value for the value under the name key of the self.cleaned_data dictionary.
  __all__ is a tuple containing 2 initial elements: strigs 'WSGIServer' and 'WSGIRequestHandler'.
  if self.number is lesser than self.paginator.num_pages, return boolean True, otherwise return boolean False.
  if UnicodeEncodeError exception is caught,
  if code is contained in _supported and call to the function check_for_language with an argument code evaluates to true,
  call the method self.appendlist with 2 arguments: return value of the function force_text with 3 arguments:
  if self.use_ipv6 is true and socket.has_ipv6 is false,
  return None.
  call the private dict.__setitem__ method with self class instance, key and result of the function http_cookies.Morsel() as arguments.
  if autoescape is true and value is not an instance of SafeData, autoescape is boolean True, otherwise it is boolean False.
  self.field.choice_cache is a list containing results of the method self.choice called with an argument obj,
  strings "Please submit %d or more forms.", "Please submit %d or more forms." and self.min_num,   where '%d' is replaced with self.min_num, and code as a string 'too_few_forms'.   call the method self.clean.
  substitute the value under the entry key of the sys.path_importer_cache dictionary for finder.
  if self.verbosity is greater or equal to integer 2,
  return an instance of SafeText, created with an argument t.
  define the function ifnotequal with 2 arguments: parser and token.
  if x equals to integer 0,
  skip this loop iteration,
  convert initial into boolean and substitute it for initial.
  if size is None substitute self._remaining for remaining, if not, substitute size for remaining.
  substitute regex for self.regex.
  if name is contained in lib.filters.
  return token.
  call the method self.handle_starttag, with tag and attrs as the arguments.
  call the method get_unique_error_message from the base class of the class BaseInlineFormSet, with an argument unique_check, return the result.
  substitute urlconf_name for self.urlconf_name.
  raise an exception parser.error_class with an argument string "Unexpected end of expression in if tag.".
  define the method __init__ with 2 arguments: self and iterable set to None.
  define the function filesizeformat with an argument bytes.
  for every key_value in related,
  if representative is None,
  root is an list with 4 elements: root, root, None and None.
  from math import ceil into default name space.
  database set to connection.alias, skip_validation set to boolean True, app_label set to app_label and hide_empty set to boolean True.   return created_models
  call the function force_str with an argument: default if it is true, or if not, first element of the result of the function,
  append f.name to exclude.
  if cmatch is true,
  if site is contained in sites2,
  get config dictionary element under 'formatters' key, if it exists substitute it for formatters, if not, formatters is EMPTY_DICT.
  call the method self.decompress with an argument value, substitute the result for value.
  get the type of res, call the method mro on the result, for every t in the result,
  call the function linebreaks with 2 arguments value and autoescape, use the result as an argument for the call to the mark_safe,
  define the function _checkLevel with an argument level.
  call the method self.itervalues, return the list of results.
  call the method self._deleted_form_indexes.append with an argument i.
  derive the class JSONSerializer from the object base class.
  from threading import local into default name space.
  define the method _assert_mutable with an argument self.
  if commit is true,
  return boolean False.
  return obj.
  prefix set to None, initial set to None, error_class set to ErrorList, label_suffix set to None,   empty_permitted set to boolean False, instance set to None.   substitute self._meta for opts.
  call the method _entity_re.sub with 2 arguments: _replace_entity and text, return the result.
  call the method apps.get_app_config with an argument model._met.app_label, substitute path field of the result for app_dir.
  streaming_content.setter decorator,
  if value,
  from django.core.management.commands.check import Command as CheckCommand into default name space.
  raise an TemplateSyntaxError with an argument string "Invalid filter: '%s'", substitute '%s' with filter_name.
  return a string "%s%02d%02d" formated with sign, floored result of the division of seconds by integer 3000,
  if fourth element of version does not equals to string 'alpha' or 'beta' or 'rc' or 'final', raise an exception.
  try,
  call the method data.items, for every medium and paths in the result.
  format string ' pgettext(%r, %r) ' with message_context and g, write it to out.
  from django.core.management.color import color_style into default name space.
  msg is an string "django.utils.text.javascript_quote() is deprecated. Use django.utils.html.escapejs() instead.".
  if six.PY2 is true,
  call the method node.render with an argument context, append the result to the nodelist.
  delete all the whitespaces from ext, split it by ',' character, extend ext_list with the result.
  get the value under the 'content-transfer-encoding' key of the disposition meta_data, substitute it for transfer_encoding.
  return iterable self.keyOrder.
  ingeter 0 and integer 0.   call the method _time.mktime with an argument tt, substitute the result for stamp.
  output is a list containing an element: result of the function format_html called with 2 arguments: string '<select{0}>',
  child_loggers is an empty list.
  do nothing.
  or boolean False if not, substitute the result for boundary.   if boundary is true,
  and result of the function force_bytes called with an argument val2, return the result.   if not,
  substitute the result for new_obj.   if not,
  substitute connections element at the index of the value db for connections.
  or opts.auto_created is True and return value of converter function with opts.auto_created._meta.db_table is contained in tables,   invert the evaluated expression and return it.   manifest is OrderDict class instance, created with tuple of two elements, app_name and list of elements of model_list for which model_installed function returned true, for every app_name and model_list in all_modules.
  create_models is an empty list.
  substitute the result for guts.   concatenate string '"', guts and string '"', substitute the result for tok.
  define the method A with an argument self.
  imported_objects is an empty dictionary.
  self.method is None.
  if k equals a string 'fg',
  define the function walk_to_end with 2 arguments ch and input_iter.
  lookups is an instance of the MultiValueDict class.
  write it to self.stdout stream.   replaces is an empty list.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  define the method clean with arguments self and value.
  call the method related.natural_key, substitute the result for value.
  substitute setting and nodelist for self.setting and self.nodelist, respectively.
  for every f in self.instance._meta.fields,
  while i is lesser than length of subject and i-th element of subject is an empty space or tab character.
  if StandardError, renamed to e, exception is caught,
  otherwise if value under the 'method' key of optins dictionary equals to string 'thread' or 'threaded',
  from django.core.management.sql import check_for_migrations into default name space.
  label is an empty string.
  raise an TemplateSyntaxError exception with an argument string "'%s' received too many positional arguments",
  substitute i for self.pointer.
  call the function re.compile with an argument raw string "^((?:'[^']*'|[^'])*?)--.*$", substitute the result for comment_re.
  define the method namespace_dict with an argument self.
  object_data is an empty dictionary.
  if not,
  substitute declared_fields for new_class.base_fields.
  try,
  if p is greater or equal to integer 0,
  m is an instance of Media class.
  raise an exception.
  call the method language_code_re.search with an argument accept_lang, if it evaluates to false,
  initial is an empty list.
  raise an ValueError exception with an argument string "Unsupported version: %s" formated with value under 'version' key of config dictionary.
  define the method __init__ with 2 arguments self and func.
  for every app_name in app_names.
  self.saved_forms is an empty list.
  with all occurrences of '%s' replaced with app_name and model._meta.object_name and e, respectively.   finally perform,
  and help is a string 'App label of the application to squash migrations for.'.   call the method parser.add_argument with 2 arguments: string 'migration_name',
  neg is integer 1.
  derive the class cached_property from the object base class.
  derive the class Variable form the base class object.
  call the function base64_hmac with 3 arguments: string 'signer' appended to self.salt, value and self.key, substitute the result for signature.
  where string '%s' is replaced by lookup_view and mod_name, respectively.   if not,
  import module re.
  if not field_value is None.   if f.blank is false and form_field.required is false and field_value is contained in form_field.empty_values,
  define the method __get__ with 3 arguments: self, instance and name type to None.
  define the method next_token with an argument self.
  dependencies set to new_operations and replaces set to replaces.   call the function subclass with 2 arguments string "0001_squashed_%s", where '%s' is replaced with migration.name and app_label,
  call the b64_encode function with an argument data, substitute the result for base64d.
  from django.forms.utils import flatatt and to_current_timezone into default name space.
  where '%s' are replaced with name and param.   if not,
  substitute operator.getitem for indexbytes.
  substitute args for self.__args.
  raise an base.DeserializationError exception with an argument string "<%s> node is missing the required '%s' attribute",
  nofollow_attr is an empty string.
  define the method _has_changed with arguments self, initial and data.
  substitute error.error_dict for error.
  substitute the result for exc_value.   substitute exc for exc_value.__cause__.
  substitute the last element of parts for parts.
  open writer.path file in write mode, with the file descriptor as fh, perform the following,
  substitute the result for RFC1123_DATE.   call the function re.compile with an argument raw string '^\w{6,9}, %s-%s-%s %s GMT$' formated with __D, __M, __Y2 and __T,
  from django.utils import baseconv into default name space.
  substitute the limit_value for self.limit_value.
  define the function parts.
  return an empty string.
  call the method m.group with an argument integer 0, use it as an argument for the call to the re_tag.match function,
  join elements of output into a string, return the result.
  return form.
  if rhs is an instance of dict type and number is true,
  for every key and value in list created out of the elements of the result of the call to the method attrs.items,
  call the function force_text with an argument text, replace every occurrence of '&' in the result with '&amp;',
  zip elements of inner_result and inner_args into a list of tuples, for every i_item and i_args in the result,
  guid_attrs is an empty dictionary.
  'Enter a whole number.' for 'invalid'.   define the method __init__ with 5 arguments: self, max_value set to None, min_value set to None, unpacked list args and unpacked dictionary kwargs.
  if language_code is not contained in self._namespace_dict,
  if not,
  from __future__ import unicode_literals into default name space.
  TOKEN_TEXT is integer 0
  from __future__ import unicode_literals into default name space.
  define the method split_contents with an argument self.
  define the method filter with 2 arguments: self and record.
  if not,
  write ']' to the self.stream file stream.
  define the method _parse_header with an argument line.
  decorator function wraps with an argument fset.
  if attr is contained in obj_dict,
  call the method formats.get_format_lazy with an argument string 'DATETIME_INPUT_FORMATS', substitute the result for input_formats.
  exclude is an empty list.
  do nothing.
  if self.domain is not equal to string 'django' or string 'djangojs',
  derive the class GenericIPAddressField from the base class CharField class.
  call the method self.add_handlers with 2 arguments: logger and handlers.
  substitute val for self._encoding.
  found is boolean True.
  if self has an attribute '_object_dict',
  import module warnings.
  define the function get_language_from_request with 2 arguments: request and check_path set to boolean False.
  if not evaluate the method self.form.error_class and return the result.   define the method as_widget with 4 arguments: self, widget set to None, attrs set to None, only_initial set to boolean False.
  if self._is_rendered is false,
  if AttributeError exception is caught,
  define the method render with 4 arguments: self, name, value and attrs set to None.
  if length of args is smaller than integer 2,
  split self._wrapped into words, substitute the result for words.
  if reason is not None,
  derive the class BaseModelForm from the BaseForm base class.
  define the method _text_words with 3 arguments: self, length and truncate.
  return val.
  define the method __init__ with 4 arguments: self, content set to an empty list, unpacked list args and unpacked dictionary kwargs.
  if six.PY3 is true,
  for every x in argset,
  skip this loop iteration.
  sup_cls is base class of the class cls.
  if token.token_type equals integer 0,
  define the method pk_is_not_editable with an argument pk.
  if TypeError exception is caught,
  if las equals integer 2,
  and fileobj set to buf.   read data from buf file stream, yield the result.
  from django.utils import six into default name space.
  call the function get_resolver.cache_clear.
  if field.help_text is true,
  call the function escape with an argument p, replace every occurrence of '\n' in the result for '<br />',
  try,
  if qs._result_cache is not None,
  and unpacked dictionary kwargs.   define the method render with 2 arguments self and context.
  from django.db.migrations.executor import MigrationExecutor into default name space.
  from unittest2 import everything.
  derive the class NullBooleanSelect from the Select base class.
  define the method dumps with arguments self and obj.
  return an empty string.
  call the function popen_wrapper with an argument args, assign the result to msgs, errors and status, respectively.
  if self.verbosity is greater or equal to integer 1,
  raise a NotImplementedError with an argument string 'subclasses of Serializer must provide an handle_m2m_field() method'.
  call the method extend with refs as argument, on the result call the pending_references.setdefault method with refto and empty list as arguments.
  an unpacked list natural_key as argument, substitute the pk filed of the resulting object for obj.pk.   if Model.DoesNotExist exception is caught,
  return instance.
  where '%s' are replaced with name and param.   otherwise if param is contained in kwargs,
  if i is equal to integer 0, value under the 'first' key of the loop_dict dictionary is boolean True, otherwise it is False.
  multiply 10 to the power of 200, with itself, substitute the result for pos_inf.
  otherwise if value is an instance of datetime.date,
  do nothing.
  define the method __delitem__ with 2 arguments: self and key.
  if not,
  replace '%s' in a string "Error: %s" with error_text, write it to self.stderr.
  call the method handler.addQuickElement with 2 arguments: string 'pubDate' and result of the function rfc2822_date,
  and RemovedInDjango19Warning.   from django.conf import settings into default namespace.
  label is an empty string.
  for every punctuation in TRAILING_PUNCTUATION,
  get the value under the key 'verbosity' of options dictionary, substitute it for verbosity.
  call the function new_method_proxy with an argument operator.setitem, substitute the result for __setitem__.
  return rv.
  import module zipfile.
  return r.
  call the method token.split_contents, substitute results without the first element for bits.
  property decorator,
  selected_html is an empty string.
  if second element of data_list is contained in self.empty_values,
  replace every occurrence of '\n' in p for '<br />',
  define the method clean with an argument self.
  return None.
  if not,
  quant is an empty list.
  return an string "<%s: %r>", where '%s' is replaced with self.__class__.__name__ and self.var, respectively.
  if LookupError exception is caught,
  define the function partition with 2 arguments: predicate and values.
  if not,
  substitute lookup_view for lookup_view_s.
  if initial_forms is grater than self.max_num is grater or equal to integer 0,
  return timezone.zone.
  call the method __init__ from the base class of the class TemplateIfParser, with 2 arguments: unpacked list args and unpacked dictionary.
  if not,
  if tag is not contained in TemplateTagNode.mapping,
  read file fp, substitute the read data for output.
  raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.
  if other is an instance of Promise,
  default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid date/time.' for 'invalid'.
  check_for_language is lambda function that returns boolean True for every argument x.
  call the method self._clean_form.
  if not,
  values is an dictionary created with result of the method val.resolve called with an argument context, for key,
  return an empty string and an empty string.
  substitute choice for choice_value and choice_label, respectively.
  call the method token.split_contents, substitute the result for bits.
  sort result in reversed order by the key as lambda function with an argument k and reeturn value second element of k.
  define the function lower with an argument value.
  substitute urlconf_name for _urlconfs.value.
  convert value to lowercase and return the result.
  property decorator,
  substitute mapped_tokens for self.tokens.
  return the length of self.forms.
  return the result of the function format_html called with 2 arguments: string '<input{0} />',
  open '/dev/null' file in read mode, substitute the result for si.
  if self.message_context is true,
  if msgs is true,
  call the method m.groups, substitute the first element of the result for idx.
  left justify value under the 'microsecond' key of the kw dictionary, in the field of width 6, fill the rest with '0',
  for every p in parts without the first element,
  get 'value' attribute of the _active object
  skip this loop iteration.
  define the method eval with 2 arguments: self and context.
  target_app_labels_only is boolean True.
  mapped with a function k, for every k and v in return value of the method candidate_subs.items.   format candidate_pat with candidate_subs, return the result.
  return week_number.
  "(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}(?<!-)\.?)|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\[?[A-F0-9]*:[A-F0-9:]+\]?)(?::\d+)?(?::\d+)?(?:/",   "?|[/?]\S+)$" and re.IGNORECASE, substitute the result for regex.   call a function _ with a string 'Enter a valid value.' as an argument, substitute the result for message.
  return a list containing 2 elements: return value of the value.date method and return value of the replace method,
  if value is not None,
  'may be ambiguous or it may not exist.', substitute the result for message.   params is an dictionary containing 2 initial entries: value for 'datetime' and current_timezone for 'current_timezone'.
  and unpacked dictionary kwargs.   for every v in self.value call the function force_text with an argument v, add the result to a set,
  call the function sql_create with 3 arguments: app_config, self.style and connection, substitute the result for statements.
  call the method result.setFormatter with an argument formatter.
  evaluate the field.get_attname, use the result as the name of the obj attribute to get, substitute it for related_att.
  and _, respectively.   if file_ is true,
  return value of the call to the function _ with an argument string 'Enter only digits separated by commas.' and string 'invalid'.   decorator deconstructible,
  decorator method register.tag with an argument 'extends',
  set attr attribute of the self object to value.
  if not,
  lbp is integer 0.
  raise an TemplateSyntaxError with an argument string "'autoescape' tag requires exactly one argument.".
  try,
  derive the class Paginator from the object base class.
  if key is not contanied in self,
  filemsg is an empty string.
  define the method __repr__ with an argument self.
  define the method get_full_path with an argument self.
  call the method kwargs.update with an argument self.default_args.
  format, if its true, otherwise string 'TIME_FORMAT' and use_l10n as use_l10n, return the result.   define the function number_format with 4 arguments: value, decimal_pos set to None, use_l10n set to None,
  return string '(NOT (%s: %s))', formated with self.connector and string created by joining c into a string, separated by ', ',
  with lock,
  LUHN_ODD_LOOKUP is a tuple with 10 elements: integers 0, 2, 4, 6, 8, 1, 3, 5, 7 and 9.
  remove config dictionary element under '()' key, substitute it for c.
  if command.verbosity is greater than integer 1,
   for every domain in domains,
  convert param to a string, use it as a key to get the value from kwargs dictionary, assign it value.
  if six.PY2 is true and value is greater than sys.maxint,
  if list_ is not an instance of tuple or list types and length of list_ is not equal to integer 2,
  if _BASE64_DECODE_ERROR exception is caught,
  call the method self.splitext with an argument guessed_filename, substitute the second element of the result for ext.
  substitute i-th element of self.forms for form.
  substitute attr for the obtained value.   delete attr.
  code set to string 'max_digits' and params set to a dictionary with an entry: self.max_digits for 'max'.   if self.decimal_places is not None and decimals is grater than self.decimal_places:
  if ValueError exception is caught,
  from django.utils.six.moves import http_cookies into default name space.
  format self.month_field string with name, use it as the key for the data dictionary, substitute the result for m.
  get func_name attribute from the mod object, substitute it for view_func.
  substitute WSGIServer for httpd_cls.
  call the function datetime.datetime with 3 arguments: value.year, value.month and value.day, substitute the result for result.
  import threading.
  widget.is_localized is boolean True.
  if ValueError exception is caught,
  return result converted into an integer.   if not,
  from django.utils._os import upath into default name space.
  if origin is true,
  outdict is an empty dictionary.
  call the function force_str with an argument sep, substitute the result for self.sep.
  from django.db.migrations.optimizer import MigrationOptimizer into default name space.
  call the function to_locale with an argument lang, substitute the result for locale.
  if scheme is countaine in self.url_schemes return boolean True, otherwise return False.
  raise an AttributeError with an argument string "This %s instance has no `content` attribute. "Use `streaming_content` instead.",
  call the method self.to_python with an argument value, strip the whitespaces from the both ends of the result and substitute it for value.
  return neg and res.
  substitute the result for new_migration.   writer is an instance of a class MigrationWriter, created with an argument new_migration.
  if not,
  matches is boolean True,
  invalid_var_format_string is None.
  call the fastcgi_help function with an argument string "ERROR: Invalid option for daemonize parameter.", return it.
  if first element of the url_fields is false,
  call the method self.xml.endElement with an argument string "django-objects".
  if first element of params equals a string 'context',
  if other is not equal to list containing elements of self, return boolean True, otherwise return boolean False.
  create directories from the elements in filename.
  call the function cache_get with an argument key, substitute the result for link.
  from django.utils.translation import ugettext_lazy as _ into default name space.
  index of the first occurrence of '\\' in path, or alternatively if '\\' is not contained in path,   split path in two parts by '/' character, return the result.
  call the method find_indentation with an argument node, append the result to newline, substitute the result for klass.prefix.
  return None.
  substitute lookup_view for original_lookup,
  define the function model_to_dict with 3 arguments: instance, fields set to None and exclude set None.
  if _cached_modules equals to module_values,
  substitute settings.STATIC_URL for prefix.
  return result.
 define the function lazy with 2 arguments: func and unpacked list resultclasses.
  return a string '%02d' formated with self.data.day.
  if TypeError or ValueError exceptions are caught,
  if opts.model is true,
  define the function next_space_index with 2 arguments: self and subject.
  if loader is not None,
  method lru_cache.lru_cache with an argument maxsize set to None, as a decorator,
  derive the class DictWrapper from the dict base class.
  call the method self.strptime with arguments value and format, return the result.
  __all__ a tuple containing strings: 'Field', 'CharField', 'IntegerField', 'DateField', 'TimeField', 'DateTimeField', 'RegexField',
  attrs is a list with 2 elements: strings "__doc__" and "__name__".
  append filename to _error_files.
  define the function handle_m2m with an argument value,
  if data is contained in self.children,
  call the function local, substitute the result for _prefixes.
  derive the class HttpResponseRedirectBase from the HttpResponse base class.
  call the function format_html with 2 arguments: string '<input{0} />', return value of the function flatatt, called with an argument,
  if queryset is None,
  if not,
  call the add_arguments method with parser as argument form the base class of the class Command.
  indent contain tabs number of tab character.
  set attr.name attribute of the Module_six_moves_urllib_parse object to attr.
  substitute _urllib_request_moved_attributes for Module_six_moves_urllib_request._moved_attributes.
  '<p%(html_class_attr)s>%(label)s %(field)s%(help_text)s</p>', error_row set to a a string '%s', row_ender set to a string '</p>',   help_text_html set to a string, <span class="helptext">%s</span>' and errors_on_separate_row set to boolean True.   define the method non_field_errors with an argument self.
  call the method field.clean with an argument value, substitute the result for value.
  define the function m2m_convert with an argument n,
  if value is not an instance of list or tuple types,
  if not,
  call the method six.iteritems with an argument kwarg, convert the result into a list,
  if not,
  derive the class HttpResponseBase from the six.Iterator base class.
  call the method router.get_migratable_models with argument: app_config, connection.alias and include_auto_created set to True, substitute the result for app_models.
  self.translate is boolean True.
  decorator function register.filter with an argument is_safe set to boolean False.
  if name is callable object,
  if failures is true,
  define the method dst with 2 arguments: self and dt.
  call the method self._stream.read with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 4 entries:
  self.error_class called with an argument error_class set to string 'nonfield'.   define the method _raw_value with 2 arguments: self and fieldname.
  call the method self.model._default_manager.get_queryset with an argument qs.
  call the method tpl.format with an arguments self.name, self.sysid and self.pubid.
  raise a ValueError exception with an argument "The protocol '%s' is unknown. Supported: %s", replace '%s' with protocol,
  define the function firstof with 2 arguments: parser and token.
  cat for 'term'.   if value under the 'feed_copyright' key of the self.feed dictionary is not None,
  append '.' to name, substitute the result for prefixed.
  derive the class Loader from the BaseLoader base class.
  perform binary or for operands: fourth element of_attr_list and termios.ECHO, store the result in fourth element of attr_list.
  join elements of quant into a string, split it by string ',', substitute the result for values.
  append string '</optgroup>' to output.
  if args is true,
  take a tuple with 2 elements: boolean False and method resolve called with an empty dictionary on the instance of Variable class,
  strip t.contents from the left side of whitespaces, if the result starts with TRANSLATOR_COMMENT_MARK,
  use the result as the argument for the call to the sql.extend method.   if self.verbosity is greater or equal than integer 1 and sql is true,
  join elements of output into a string, separated by newline characters, use it as the argument for the call the function mark_safe,
  raise an base.DeserializationError exception with string "<field> node is missing the 'name' attribute" as argument.
  substitute the result for final_attrs dictionary value under the 'value' key.   call the function format_html with 2 arguments: string '<input{0} />',
  call the method logging.Filter with an argument name, substitute the result for result.
  from django.utils.encoding import force_text and iri_to_uri into default name space.
  if exit_code is lesser than integer 0,
  mime_type is a string 'application/atom+xml; charset=utf-8'.
  error_messages as an dictionary with an entry: value under the 'invalid_date' of errors dictionary for 'invalid',   localize set to localize, and an instance of the class TimeField created with 3 arguments: input_formats set to input_time_formats,   error_messages as an dictionary with an entry: value under the 'invalid_time' of errors dictionary for 'invalid',   localize set to localize   call the __init__ method with fields, unpacked list args and unpacked dictionary kwargs from the base class of the SplitDateTimeField class.
  substitute length of package for dot.
  widget set to None, label set to None, initial set to None, help_text set to an empty strign,   unpacked list args and unpacked dictionary kwargs.   call the method __init__ from the base class of the class ModelMultipleChoiceField, with 10 arguments: queryset, None,
  substitute the result for plural_form_line.   if self.verbosity is greater than integer 1,
  substitute complain for sort.
  define the method values with an argument self.
  default_validators is an empty list.
  call the method migration.ancestry.index with an argument common_ancestor, increment the result by one,
  derive the class Media from the object base class.
  call the method parser.compile_filter with an argument first element of bits, substitute the result for target.
  return the value under the self.data.month key of the MONTHS_3 dictionary.
  if six.PY3 is true,
  define the function get_format with 3 arguments: format_type, lang set to None and use_l10n set to None.
  if value is None,
  define the method __init__ with 3 arguments: self, media set to None and unpacked dictionary kwargs.
  if commit is false,
  call the method hashlib.sha1 with an argument secret appended to key_salt, call the method digest on the result, return the result.
  call the function add_to_builtins with an argument string 'django.template.loader_tags'.
  if ImportError exception is caught.
  call the method blankout with 2 arguments: part and 'S', write the result to out.
  get the value filed from the return value of the call to the c.key with the argument key, add the value to the cookiedict under the key key.
  define the method writer_enters with an argument self.
  if not,
  define the method add_item_elements with 3 arguments: self, handler and item.
  do nothing.
  call the function timesince with 2 arguments: value and arg, return the result.
  default set to boolean False and help as a string "Create an empty migration.".   call the method parser.add_argument with 5 arguments: string '--noinput', action as a string 'store_false',
  define the method __init__ with an argument self.
  from django.utils.encoding import force_text and python_2_unicode_compatible into default name space.
  otherwise if value under the 'CONTENT_TYPE' key of hte self.META dictionary starts with 'application/x-www-form-urlencoded',
  substitute link for link_prev, link_next, key and result, respectively.
  define the function normalize_newlines with an argument text.
  call the function warnings.warn with an argument string "A {% csrf_token %} was used in a template, but the context did not provide the value.  This is usually caused by not using RequestContext.".
  do nothing,
  from django.conf import settings into default name space.
  from django.template.loader import BaseLoader, get_template_from_string, find_template_loader and make_origin into default name space.
  call the function force_text with an argument text, split by it word_split_re, substitute it for words.
  derive the class IPAddressField from the base class CharField class.
  and substitute the result for self.prefix.   substitute auto_id for self.auto_id.
  if self.connector equals conn_type,
  from django.template.loader import BaseLoader into default name space.
  return data.
  if not,
  if not,
  match regex date_re with value, substitute the result for match.
  for every app_label in app_labels,
  call to the field.to_python method, substitute the result for value.   substitute value for value under the field.name key of the data dictionary.
  define the function localtime with 2 arguments: value and timezone set to None.
  date_keys is a tuple with 2 arguments: strings 'updateddate' and 'pubdate'.
  if localized_fields is not None,
  called with an argument value, return the result.   call the function allow_lazy with 2 arguments: strip_spaces_between_tags, six.text_type, substitute the result for strip_spaces_between_tags.
  call the method value.astimezone with an argument timezone, substitute the result for value.
  define the function save_instance with 7 arguments: form, instance, fields set to None, fail_message as string 'saved',
  try,
  if year is lesser than integer 100,
  if UnicodeDecodeError exception is caught,
  call the method __init__ from the base class of the ExternalReferenceForbidden class.
  (?P<filter_name>\w+)(?:%(arg_sep)s(?:(?P<constant_arg>%(constant)s)|(?P<var_arg>[%(var_chars)s]+|%(num)s)))?)",   where 'constant' is replaced with constant_string, 'num' with raw string '[-+\.]?\d[\d\.e]*', 'var_chars' with string "\w\.",   'filter_sep' with result of the function re.escape called with an argument FILTER_SEPARATOR,   anbd 'arg_sep' with result of the function re.escape called with an argument FILTER_ARGUMENT_SEPARATOR.   call the function re.compile with 2 arguments: filter_raw_string and result for bitwise OR on 2 operands re.UNICODE and re.VERBOSE,
  if option_label is an instance of list or tuple,
  join bytes and self._leftover into a bytes string, substitute it for self._leftover.
  consume_next is boolean False.
  from collections import OrderedDict into default name space.
  if quote_double_quotes is true,
  substitute the last element of parts for ser_fmt.
  substitute s for self.s.
  put the results in a list, join the list elements in a string separated by whitespace separator, return the string as the bytes string.   evaluate the method six.text_type(s), on the result call the method encode with the arguments encoding and errors, return the result.
  call the function data with 3 arguments: self.year, self.month and self.day, return the result.
  call method self.serialize_headers, append bytes string '\r\n\r\n' to the result, append self.content to the result, return it.
  call the method timezone.normalize with an argument value, substitute the result for value.
  return lookup_view.
  call the __init__ method of the base class of the QueryDict class.
  return maybe.
  if Exception, renamed to e, exception is caught,
  define the method list with 3 arguments: self and unpacked list args and unpacked dictionary kwargs.
  __version__ is a string "0.1".
  decorator function register.filter with an argument is_safe set to boolean True.
  call the method handler.new_file with 6 arguments: field_name, file_name, content_type, content_length, charset and  content_type_extra.
  if vale is not an instance of ConvertingDict and value is an instance of dict type,
  if return value of the self.is_secure is false and server port is not equal to string '80',   join host and server_port into a string, separated with ':', substitute the result for host.
  call the function resolve with arguments path and urlconf.
  if not,
  if name is None and compile_function is None,
  call the method self.var2.resolve with 2 arguments: context and boolean True, substitute the result for val2.
  define the function server_bind with an argument self.
  7 for 'jul', 8 for 'aug', 9 for 'sep', 10 for 'oct', 11 for 'nov' and 12 for 'dec'.   MONTHS_AP is an dictionary with 12 entries: result of the function pgettext_lazy with 2 arguments: 'abbrev. month' and 'Jan.' for 1,
  if not,
  if settings.USE_TZ is true substitute result of the function timezone.get_current_timezone for tzinfo, if not tzinfo is None.
  call the method __init__ from the base class of the class InlineForeignKeyField, with 2 arguments unpacked list args,
  if value is an instance of bytes class,
  call the method self._assert_mutable.
  if i is smaller than result of the method self.initial_form_count and key 'instance' is not contained in kwargs,
  from django.core.management.base import CommandError into default name space.
  if the tuple result equals to tuple containing character ';' and string '"\\073"', respectively,   assign _cookie_encodes_correctly the boolean True value, otherwise assign it False.   assign return value of the call to the http_cookies.SimpleCookie function to _tc.
  define the method process with 3 arguments: self, command and domain.
  try,
  from django.utils.safestring import mark_safe into default name space.
  get the value under the ns key of the resolver.app_dict dictionary, substitute it for app_list.
  default is a string 'DEFAULT'.
  f _serializers is false,
  if not,
  define the function pgettext with 2 arguments: context and message.
  return string '1'.
  return boolean True.
  call the function format_html with 2 arguments: string '<ul class="errorlist">{0}</ul>', and return value of the function,
  define the function linenumbers with 2 arguments value and autoescape set to None.
  get 'render' attribute of template object, if it is callable,
  substitute name for new.
  convert self.dict into boolean, return the result.
  call the method match.group with an arugument name, substitute the result for toktext.
  if not,
  for every field in concrete_model._meta.many_to_many,
  import module traceback.
  for every filename in gen_filenames(),
  "No file was submitted. Check the encoding type on the form." for 'invalid', return value of the function _ called with an argument,   string "No file was submitted." for 'missing', return value of the function _ called with an argument "The submitted file is empty.",   for 'empty', return value of the function ungettext_lazy called with 3 arguments:   string 'Ensure this filename has at most %(max)d character (it has %(length)d).',   string 'Ensure this filename has at most %(max)d characters (it has %(length)d).' and string 'max' for 'max_length',   and return value of the function _ called with an argument string,   'Please either submit a file or check the clear checkbox, not both.' for 'contradiction'.   define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  _func_closure is a string "__closure__".
  SINGLE_BRACE_END is a string '}'.
  call the method sys.stderr.write with an argument string "  Unable to load the flup package.  In order to run django\n".
  result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Feb.' for 2,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'March' for 3,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'April' for 4,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'May' for 5,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'June' for 6,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'July' for 7,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Aug.' for 8,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Sept.' for 9,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Oct.' for 10,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Nov.' for 11,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Dec.' for 12,   MONTHS_ALT is an dictionary with 12 entries: result of the function pgettext_lazy with 2 arguments: 'alt. month' and 'January' for 1,
  return first element of t.
  loader is an instance of MigrationLoader class, created with an argument connection.
  call the method self.download with an argument template, substitute the result for absolute_path.
  return None.
  call the function _load_serializers.
  try,
  return s.
  called with an argument commit, return the result.   save.alters_data is boolean True.
  for every func and unused in filter_expr.filters,
  call the method parser.compile_filter with an argument bit, append the result to args.
  substitute self.STDOFFSET for self.DSTOFFSET.
  derive the class VariableNode form the base class Node.
  define the function include_is_allowed with an argument filepath.
  for root, dirs and files in sorted list of the directory tree starting from the directory self.path,
  raise an exception.
  instantiate the TimestampSigner object with arguments key and salt set to salt, call its method sign with an argument base64, return it.
  if NameError exception is caught,
  call the datetime.datetime.utcfromtimestamp with timestamp converted to an integer as argument, substitute result for timestamp.
  default_error_messages is an dictionary containing entry: return value of the function _ called with an string 'This field is required.' for 'required'.
  define ensure_echo_on function.
  convert value and arg into a integers, return their sum.
  if self.language is not None,
  try,
  inplural is boolean False.
  if it does append it to targets list.   if not,
  call the re.compile function with 2 arguments: raw string "^(?:[a-z0-9\.\-]*)://(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+",
  import module copy.
  raise an TypeError with an argument string "update expected at most 1 arguments, got %d" formated with length of args.
  call the method self._add_local_translations.
  if limit is None or length of x is lesser than or equal to limit,
  substitute value under the cache_key key of the _format_cache dictionary for cached.
  if UnicodeDecodeError exception is caught,
  call the method widget_attrs from the base class of the class CharField, with an argument widget, substitute the result for attrs.
  if there is no match,
  if '_meta' is not an attribute of obj,
  if middleware has an attribute 'process_response',
  remove first element from remaining_bits, substitute the result for option.
  if field is contained in form.cleaned_data,
  call the method to_python with an argument value, from the base class of the IntegerField class, substitute the result for value.
  from django.utils.http import http_date to the default name space.
  substitute self.count for top.
  if errors is true,
  substitute key for result.key.
  split tmp at '/' character, substitute the last element of the result for filename.
  help is a tuple containing string "Creates a Django project directory structure for the given "
  set the value under the 'bindAddress' key of the wsgi_opts dictionary to a tuple containing 2 elements: value under the 'host' key,
  if palette equals value under the NOCOLOR_PALETTE key of the PALETTES dictionary,
  call the function __proxy__ with 2 arguments: args and kw, return the result.
  must_be_first is boolean True.
  where '%s' is replaced with self.__class__.__name__.   if self doesnt have an '_ordering' attribute,
  call the method self.non_field_errors, substitute the result for top_errors.
  import module codecs.
  from django.utils.safestring import mark_safe into default name space.
  call the function fn with list of arguments args and dictionary of argument values kwargs.
  define the function autoescape with 2 arguments: parser and token.
  decorator function register.filter with an argument is_safe set to boolean False.
  raise an CommandError with an argument string "Unable to find a locale path to store translations for file %s",
  call the method tf.format with an argument format_string, return the result.
  substitute the result for args.   call the function popen_wrapper with an argument args, assign the result to msgs, errors and status, respectively.
  if StopIteration exception,
  boolean True for 'True', boolean False for '3', boolean False for 'False' and boolean False for boolean False,   return it if the key exists, if not return None.   derive the class SelectMultiple from the Select base class.
  if StandardError, renamed to e, exception is caught,
  get the value under the new_method_name key of the base.__dict__ dictionary, substitute it for new_method.
  raise an ValidationError with 3 arguments: value under the 'max_decimal_places' key of the self.error_messages dictionary,
  func.is_usable in false,
  substitute user_function for wrapper.__wrapped__.
  if limit_choices_to is not None,
  LIGHT_PALETTE is a string 'light'.
  call the method parser.parse with an argument tuple with one element string 'endblock', substitute the result for nodelist.
  convert first 2 elements of django.VERSION into a strings, join them together, separated by a '.', substitute the result for docs_version.
  from django.core.management.base import BaseCommand and CommandError into default name space.
  return nothing.
  flush the output buffer of the self.stdout object.
  call the method self.nodelist.render with an argument context, substitute the result for output.
  call the method time.localtime with an argument stamp, substitute the result for tt.
  from django.apps import apps into default name space.
  if value is false,
  if IndexError exception is caught,
  define the method __init__ with 5 arguments: self, data, encoder set to DjangoJSONEncoder, safe set to boolean True,
  replace '%s' in string 'ignoring directory %s\n' with dirname, write it to self.stdout stream.
  call the function normalize_newlines with an argument value, substitute the result for value.
  valid is boolean True.
  return an empty string.
  get the value under the e.code key of the self.error_messages dictionary, substitute the result for e.message.
  append self.fk.name to form._meta.fields.
  define the method e with an argument self.
  call the function format_html with 3 arguments: string '<ul class="{0}">{1}</ul>', self.error_class and return value of the function,
  if value under the 'subtitle' key of the self.feed dictionary is not None,
  current_app as context.current_app, substitute the result for url.   if NoReverseMatch exception is caught,
  call the method self._truncate_html with 5 arguments: length, truncate, self._wrapped, length and boolean True, return the result.
  try,
  return nothing.
  call the function _super with 2 arguments: class SimpleLazyObject and self, call the method __init__ on the result.
  result of the function literals called with an argument string "/= /" and next as a string 'reg', to the both_before,   appended both_after to the previous result, for 'div' and appended list with an element instance of a class Tok,   created with 3 arguments: string "regex",   raw string '/([^*\\/[]|\\.|\[(   [^\]\\]|   \\.)*\])(   [^\\/[]|   \\.|   \[(   [^\]\\]|   \\.)*\])*/[a-zA-Z0-9]*',   and next as a string 'div', to the both_before, appended both_after to the previous result for 'div'.   define the method __init__ with an argument self.
  for app_config in return value of the method apps.get_app_configs,
  from django.utils import six and lru_cache into default name space.
  from django.utils.encoding import force_bytes into default name space.
  define the method id_for_label with an argument self.
  derive the class SimplerXMLGenerator form the XMLGenerator base class.
  define the function sql_indexes with 3 arguments: app_config, style and connection.
  if string 'id' is contained in self.attrs,
  call the function random_module.choice with an argument value, return the result.
  call the function get_mod_func with an argument mod_name, store the result in parentmod and submod, respectively.
  tf is an instance of TimeFormat class, created with an argument value.
  name appended to string '_', as the name of the attribute to get from self object, or if the previous doesnt exist, None.   append name to 'add_' use it as the name of the attribute to get from combined object , call the result with an argument:
  convert x into a string for every x in list of version elements up to the parts index, join the previous into a string separated by '.', assign the result to major.
  if self.inverse_match equals to return value of the self.regex.search method converted to boolean, called with argument force_text(value),
  builtins is an empty list.
  id is a string "literal".
  from django.utils.encoding import force_str and force_text into default name space.
  return integer 0.
  if value is false,
  call the method self._stream.unget with an argument unused_char.
  decorator function register.filter with an argument is_safe set to boolean False.
  substitute self._meta for opts.
  raise an exception parser.error_class with an argument string "Not expecting '%s' in this position in if tag.",
  from subprocess import PIPE and Popen into default name space.
  called with 2 arguments: request and response.   call the method response.add_post_render_callback with an argument callback.
  RAISE_ERROR is an instance of object class.
  define the method _itervalues with an argument self.
  if value is None,
  otherwise if tzinfo is not None,
  substitute _itervalues for itervalues.
  append app_dir to dirs list.
  call the method m.group with an argument string 'value', use the result as an argument for the call to the force_str,
  call the method pop from the base class of the class SortedDict, with 2 arguments k and unpacked list args,
  return self.data.day.
  try,
  call the method date.tzinfo.utcoffset with an argument date, substitute the result for offset.
  if compress is true,
  self.bad_cookies is an empty set.
  call the method parser.parse, substitute the result for nodelist.
  call the function os.spawnve with os.P_WAIT, sys.executable, args and new_environ as arguments, substitute the result for exit_code.
  get 'editable' attribute from object f, if it doesnt exists or its true,
  if construct is true,
  skip this loop iteration.
  get the element with minimal value between the value under the TOTAL_FORM_COUNT key of self.management_form.cleaned_data dictionary,
  in_tag is boolean True if in_tag is False, otherwise is boolean False.
  substitute name for self.__name.
  and self._current for 'fields'.   if self.use_natural_primary_keys is false or obj doesnt have a 'natural_key' attribute.
  if timezone has an attribute 'normalize',
  import module datetime.
  try,
  call the method self.event_stream.expandNode with an argument node.
  python_2_unicode_compatible decorator,
  import module random as random_module.
  call a function _ with a string 'Enter a valid value.' as an argument, substitute the result for message.
  substitute initial for initial_value, if initial is not None, if not, initial_value is an empty string.
  import module os.
  import module yaml.
  return value.
  call the method self.tag, substitute the result for self.tagname.
  if t is not None,
  call the method o.isoformat substitute the result for r.
  call the function is_library_missing with an argument path, return the result.
  define the method page with self class instance and number as arguments.
  if ',' is contained in second element of args,
  from django.utils import six into default name space.
  substitute the result for self.literal.   if ValueError exception is caught,
  derive the class DjangoTranslation from gettext_module.GNUTranslations base class.
  if not,
  if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
  slots is a list with an element, slots.
  if POST_override is not None, or otherwise generated with the call to the function pformat with an argument request.POST.   if Exception exception is caught,
  strings "addbase", "urllib" and "urllib.response", result of the function MovedAttribute, called with 3 arguments:   strings "addclosehook", "urllib", "urllib.response", result of the function MovedAttribute, called with 3 arguments:   strings "addinfo", "urllib", "urllib.response" and result of the function MovedAttribute, called with 3 arguments:   strings "addinfourl", "urllib", "urllib.response".   for every attr in _urllib_response_moved_attributes,
  call the method MONTHS.index with 6 arguments: year, month, day, hour, min and sec, substitute the result for result.
  raise an ValueError exception with an argument string "Base36 input too large".
  if ValueError, OverflowError or InvalidOperation exceptions are caught,
  for every field in unique_check, if field is contained in form.cleaned_data.   create a generator that for every d in row_data, if d has an '_get_pk_val' attribute,
  substitute chunk_size for self.chunk_size.
  try,
  call the method loader.graph.forwards_plan with argument a tuple, with 2 elements: app_label and migration_name,
  define the method pop with an argument self.
  derive the class URLInput from the TextInput base class.
  decorator stringfilter,
  try,
  concatenate string '%0', width and string "d. %s", format the previous string with i incremented by 1 and line,
  substitute root for value under the NEXT key of the link dictionary.
  return template.
  call the method cls.__dict__.copy substitute the result for orig_vars.
  if filename is not contained in _error_files,
  define the method save_existing_objects with 2 arguments: self and commit set to boolean True.
  raise an TemplateSyntaxError exception with an argument string "'for' statements should have at least four words: %s",
  return an instance of AutoEscapeControlNode with 2 arguments: boolean exception arg equals to string 'on', and nodelist.
  call method request.build_absolute_uri, use the result as an argument for function call of iri_to_uri,
  call the method self.full_clean.
  call the function make_middleware_decorator with an argument middleware_class, return the result.
  and elements of parse_until joined into a string, separated by string ', '.   raise an self.source_error exception with 2 arguments: source and msg.
  where '%s' is replaced with subject.   if i-th element of subject is '"' character or "'" character,
  set cache to the value of the dictionary caches under the key settings.CACHE_MIDDLEWARE_ALIAS.
  decorator total_ordering,
  define the method __repr__ with an argument self.
  if not,
  if response.streaming is true,
  return an instance of the class Media, called with an unpacked dictionary with an entry: name appended to string '_',
  from django.utils.encoding import force_text and smart_text into default name space.
  if pofile path exists,
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  call the method __init__ from the base class of the class RegexField, with 4 arguments: max_length, min_length, unpacked list args,
  call the function reset_translations.
  while self.tokens is true,
  otherwise if autoescape is true,
  return result.
  call the method func.__get__ with 2 arguments: self and type of self object, call the result with 2 arguments:
  called with 2 arguments: s and string_only as boolean True.   if categories is true,
  define the method resolve_context with 2 arguments: self and context.
  if language is not contained in _translations,
  if ImportError exception is caught,
  open the file whose name is stored in the value under the 'pidfile' key of options dictionary and mode 'w', with the file descriptor as fp,
  'Enter a list of values.' for 'invalid' and return value of the function _ called with an argument string,   'Enter a complete value.' for 'incomplete'.   define the method __init__ with arguments self, fields set to an empty ilst, unpacked list args and unpacked dictionary kwargs.
  remove symlink_path file.
  use the remainder of the division of name by count as the argument for the call to the avoid_wrapping function, store the result in result.
  assign values under the 'app_label' and 'migration_name' keys of the options dictionary to the app_label and migration_name, respectively.
  output is an list with initial elements generated with call to the function pformat with an argument val, for every val in context.
  define the method render with 2 arguments: self and context.
  substitute the result for args and kwargs, respectively.   call the function node_class with 3 arguments: takes_context, args and kwargs.
  return value.
  call the method result.setlist with 2 arguments: return value of the function copy.deepcopy called with 2 arguments: key and memo,
  value under the ORDERING_FIELD_NAME key of the form.fields is an instance of IntegerField class, created with 2 arguments:
  otherwise if form.has_changed method evaluates to true,
  remove the first element from context.render_context.
  define the function get_text_list with 2 arguments: list_ and last_word set to result of the function ugettext_lazy called with an argument string 'or'.
  return the value under the is_dst key of the _time.tzname dictionary.
  call the function datetime.now, on the result call the method strftime with an argument string '%B %d, %Y - %X', substitute the result for now.
  self.none_value is a tuple containing 2 elements: integer 0 and empty_label.
  call the method clean with an argument value from the base class of the class TypedChoiceField, substitute the result for value.
  if ValueError exception is caught,
  write string "  the new migration will be used for new installs. Once you are sure" to self.stdout.
  if not,
  and obj.__class__.__name__, first element of obj._constructor_args and second element of obj._constructor_args.   klass.__new__ is a static method of the function __new__.
  define the method encoding with arguments self and val.
  call the function is_naive with an argument obj.
  call the method calendar.monthrange with 2 arguments: self.data.year and self.data.month,
  define the function do_with with 2 arguments: parser and token.
  return qs.
  try,
  join to_path and name into a file path, substitute the result for filename.
  skip this loop iteration.
  if not,
  call the function new_method_proxy with an argument bytes, substitute the result for __bytes__.
  call the method parser.delete_first_token.
  call the method copy.copy, substitute the result for obj.
  if ImproperlyConfigured exception is caught,
  raise a SerializerDoesNotExist exception with an argument format.
  if not, substitute self.auto_id for id_.   call the method widget.id_for_label with an argument id_, return the result.
  update self dictionary with updates.
  call the six.reraise function with 3 arguments: DeserializationError, DeserializationError called with an argument e,
  FASTCGI_OPTIONS is a dictionary containing 16 initial entries: 'fcgi' for 'protocol', None for 'host', None for 'port',
  return self._callback.
  call the function lazy_number with 5 arguments: ngettext, str, singular set to singular, plural set to plural,
  try,
  convert to integer the value of dictionary cc under the key 'max-age', and return it
  call the function thread.start_new_thread with main_func, args and kwargs as arguments.
  define the function urlize with 2 arguments value and autoescape set to None.
  if not, substitute used_name for guessed_filename.   if not,
  created with an argument widget set to HiddenInput.   value under the INITIAL_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,
  VARIABLE_TAG_START for 'openvariable', VARIABLE_TAG_END for 'closevariable', SINGLE_BRACE_START for 'openbrace',   SINGLE_BRACE_END 'closebrace', COMMENT_TAG_START 'opencomment' and COMMENT_TAG_END for 'closecomment'.   define the method __init__ with 2 arguments: self and tagtype.
  call the function _urlize with 3 arguments: value, nofollow set to boolean True, autoescape set to autoescape,
  substitute offset.seconds for offset.
  substitute _iteritems for iteritems.
  otherwise if '=' is contained in part,
  define the method T with an argument self.
  and _allow_fallback set to boolean True, extend the output with the result.   return output.
  substitute EscapeText for EscapeString.
  replace all the '%s' occurrences with migration_name and app_label, respectively.   target is a list containing tuple with two elements app_label and migration.name.
  substitute app_template_dirs for template_dirs.
  return None.
  from django.core.servers.fastcgi import FASTCGI_HELP into default namespace.
  convert root.manager.loggerDict into a list, substitute it for existing.
  call the method parser.invalid_block_tag with 3 arguments: endblock, 'endblock' and acceptable_endblocks.
  from django.apps import apps into default name space.
  BASE56_ALPHABET is a string '23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz'.
  call the method self.nodelist.render with an argument context, substitute the result for result.
  from importlib import import_module into default name space.
  substitute namespace for self.namespace.
  define the method get_parent with 2 arguments self and context.
  from django.utils import six into default name space.
  for every cmatch in cmatches,
  call the method self._ordering.sort with an argument key as compare_ordering_key.
  with the call to the transaction.atomic method with using set to connection.alias, savepoint set to connection.features.can_rollback_ddl as arguments,
  internal_use_only is boolean False.
  define the method __setstate__ with 2 arguments: self and state.
  called with an argument result of the method self.latest_post_date.   if value under the 'author_name' key of the self.feed dictionary is not None,
  for every subwidget in the result,   yield subwidget, as the result of the generator.
  for every key in self.keyOrder,
  derive the class CycleNode from Node base class.
  call the method unicodedata.combining with an argument char, if it evaluates to false,
  for every header in headerlist,
  call the method _construct_form from the base class of the class BaseInlineFormSet, with 2 arguments: i,
  if self.verbosity is greater or equal than integer 1,
  return value.
  define the function mark_safe with an argument s.
  call the method datetime.datetime.strptime with 2 arguments: return value of the function force_str called with an argument value,
  raise an ValidationError with 2 arguments: value under the 'invalid_time' key of the self.error_messages dictionary and code set to string 'invalid_time'.
  call the method add_arguments from the base class of the class Command, with an argument parser.
  if form has an attribute 'Meta',
  call the method boundary.encode with an argument string 'ascii', substitute the result for boundary.
  call the method self.paginator.validate_number with self.number decremented by 1 as argument, return the result.
  return self._num_pages.
  call the method formats.sanitize_separators with an argument value, substitute the result for value.
  if value under the 'debug' key of options dictionary is not None, substitute it for value under the 'debug' key of wsgi_opts dictionary.
  if decimals is greater than digits,
  substitute tup for elements of self.
  if IOError, renamed to e, exception is caught,
  try,
  replace '%s' in string 'ignoring file %s in %s\n' with filename and dirpath, write it to self.stdout.
  unpacked list field_value as an argument, substitute the result for value.   substitute value for value under the field.attname key of the data dictionary.
  from django.conf import settings into default name space.
  streaming is boolean True.
  app_config, connection.alias and include_auto_created set to boolean True.   call the method connection.creation.sql_create_model with arguments model, style and known_models, substitute the result for output and references.
  compare is a lambda function with arguments self, a and b, return value is boolean true if a is lesser than b, otherwise is false.
  output is an empty list.
  substitute x for k and boolean True for v.
  call the function constant_re.findall with an argument t.contents, substitute the result for cmatches.
  substitute self.none_value for self.year_none_value.
  derive the class classonlymethod from the classmethod base class.
  move integer 1 left for 40 bits, substitute the result for TB.
  substitute cls for obj.__class__.
  self._is_rendered is boolean True.
  from django.conf import settings into default namespace.
  derive the class DjangoUnicodeDecodeError from the base class UnicodeDecodeError.
  otherwise if t.token_type equals TOKEN_COMMENT,
  if v is boolean False or v is None or v is an empty string, return boolean False, otherwise return boolean True.
  if VariableDoesNotExist exception is not caught,
  data, encoding and errors as a string 'replace'.   otherwise if item_type equals FILE,
  members is a list with elements member for every member in the result of the function self._archive.getmembers,
  call the method handler.addQuickElement with 2 arguments: string 'category' and cat.
  instantiate ValidationError class with an argument self.data, return its field error_list.
  for field in self if field.is_hidden is false, append field to a list, return the resulting list.
  locale_dir is None.
  join callback.__module__, character "." and callback.__class__.__name__ together, substitute the result for lookup_str.
  if self._is_rendered is false,
  if p_pattern starts with a string '^',
  for every app_config in return value of the call to the function apps.get_app_configs,
  from django.apps import apps into default name space.
  if item is not an instance of list or tuple class,
  if self.can_order is true,
  write data to fp.
  raise an exception.
  otherwise if self._delegate_text is true,
  if error is not an instance of ValidationError,
  if not,
  convert the first element of the first row of targets to string, append it to the string "  Unapply all migrations: ",
  substitute the result for proxy.   if not,
  call the method __init__ from the base class of the BaseTemporalField class, with arguments: unpacked list args and unpacked dictionary kwargs.
  for every f and e in list of tuples of self dictionary key, pair entries.   define the method as_json with 2 argumens self and escape_html set to boolean False.
  call the method __getitem__ from the base class of the class MultiValueDict, with an argument key, substitute the result for list_.
  substitute second element of args for name.
  if not,
  call the method HttpResponse.content.fset with 2 arguments: self and value.
  raise an NotImplementedError exception with an argument string 'subclasses of Origin must provide a reload() method'.
  date_data is a tuple with 3 elements: date.year, date.month and date.day.
  replace every occurrence of "'" in s with "\\'".
  delete the entry of self.cleaned_data dictionary under the key field.
  call the function import_module with an argument mod_name.
  call the __getstate__ method from the base class of the class SimpleTemplateResponse, substitute the result for obj_dict.
  if first and second element of sys.version_info are equal to integers 3 and 4, respectively,
  call the function template_dir.decode with an argument fs_encoding, substitute the result for template_dir.
  instantiate Archive class with an argument path, with it renamed to archive, perform,
  write content to new_file file.
  define the method write_items with 2 arguments: self and handler.
  "Use django.utils.timezone.get_fixed_timezone instead." and RemovedInDjango19Warning.   if offset is an instance of timedelta class,
  call the add_argument method on the parser object, with string 'migration_name', and help set to string 'Migration name to print the SQL for.' as arguments.
  output and hidden_fields are both empty lists.
  return an empty list.
  for every d in reversed list self.dicts,
  call the method FASTCGI_OPTIONS.copy, substitute the result for options.
  raise an NoReverseMatch exception with an argument string "%s is not a registered namespace", with '%s' replaced with key.
  join dirpath and filename into a path separated by '/', append it to new_filenames.
  call parser.add_argument method with 'args', metavar set to string 'fixture', nargs set to string '*' and help set to string 'Path(s) to fixtures to load before running the server.'.
  if value under the 'unique_id' key of the item dictionary is not None,
  key is a list with elements of list key from length of self.prefixes index to the end,
  call he function is_valid_ipv6_address with an argument ip_str, if it evaluates to false,
  if archive.ArchiveException or IOError, renamed to e, exception are caught,
  for every d in self.dicts,
  return last rollback elements of chunk.
  take two characters from the i-th element of rawdata, if they are not equal to the string '</',
  string '--keyword=gettext_noop', string '--keyword=gettext_lazy', string '--keyword=ngettext_lazy:1,2',   string '--keyword=pgettext:1c,2', string '--keyword=npgettext:1c,2,3' and string '--output=-', substitute it for args.   append work_file to args.
  define the function npgettext with 4 arguments: context, singular, plural and number.
  if data is true, substitute it for self.data, if not self.data is an empty dictionary.
  if not,
  try,
  silent is boolean True.
  input_type is a string 'url'.
  get the value under the 'no_location' key of the options dictionary, if it is true,
  self.m2m_data is None.
  define the method end_serialization with an argument self.
  append value under the 0 key of the opt_dict dictionary to code_list.
  ESCAPE_MAPPINGS is an dictionary with 10 initial entries: None for 'A', None for 'b', None for 'B', '0' for 'd', 'x' for 'D',
  from django.utils import six into default name space.
  try,
  if domain is not None,
  if attr is an instance of MovedModule.
  decrement self.waiting_writers by integer 1,
  import module importlib.
  define the function split_domain_port with an argument host.
  return the result.   decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
  define the method to_python with arguments self and value.
  define the method __init__ with 3 arguments: self, schemes set to None and unpacked dictionary kwargs.
  define the method get_nodes_by_type with 2 arguments: self and nodetype.
  call the function next_char with an argument iterator pattern, substitute the result for pattern_iter.
  call the method self.widget_attrs with an argument widget, substitute the result for extra_attrs.
  define the method nud with 2 arguments: self and parser.
  if not,
  call the function make_middleware_decorator with an argument middleware_class, call the result, return the new result.
  call the method render from the base class of the class NullBooleanSelect, with 4 arguments: name, value, attrs and choices,
  substitute _iteritems for iteritems.
  if not,
  otherwise if self.nodelist_false is true,
  call the method _construct_form from the base class of the class BaseModelFormSet, with 2 arguments: i and unpacked dictionary kwargs.
  define the method _get_regex an argument self.
  if value under the 'umask' key of options dictionary is true,
  with new_class.__name__, '%(opt)s' is replaced with opt and '%(value)s' is replaced with value.   raise an TypeError exception with an argument msg.
  define the method save_new with 3 arguments: self, form and commit set to boolean True.
  if extracted is true,
  if not,
  return self.
  derive the class StreamingHttpResponse from the HttpResponseBase base class.
  substitute new_method_name for new_method_name.
  substitute '%s' in string "No changes detected in app '%s'" with the result of the method app_labels.pop, write it to self.stdout.
  if arg starts with options,
  from unittest import import everything.
  contextlib.contextmanager decorator,
  while i is lesser than length of subject and i-th element of subject is not equal to p-th element of subject,
  remove the first element from p_pattern.
  from django.utils import six into default name space.
  label set to return value of the function _ called with an string 'Order', initial set to index incremented by 1,   and required as boolean False.   if not,
  make a system symbolic link between original_path and symlink_path.
  if ValueError exception is caught,
  if Exception exception is caught,
  substitute it for value under the 'pk' key of data dictionary.   return data.
  call the models.Model.save_base method with arguments self.object, using as using and raw set to boolean True.
  define the function normalize with an argument pattern.
  get the value under formatter key of dictionary under 'formatters' key of self.config dictionary, substitute the result for formatter.
  value is None.
  if loader is an instance of tuple or list,
  get the value under the 'use_default_ignore_patterns' key of the options dictionary, if it is true,
  for every v in value call the function conditional_escape with an argument v, append the result in a list, substitute the resulting list for value.
  try,
  for every f in opts.local_fields,
  from django.utils.translation import ungettext and ugettext as _ into default name space.
  call the add_argument method on the parser object with string '--backwards', asction set to 'store_true', dest set to 'backwards',
  if not,
  raise ValidationError with 2 arguments: return value of the function _ called with an argument string,
  return list with 2 elements: first_item and second_item, and old_style_list.
  substitute class_name for self.class_name.
  reverse element order of dicts, join them in a string, substitute the result for number.
  daemonize is boolean True.
  or value equals return value of the call to Decimal with argument '-Inf'   raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  call the method instance of TerminalIPythonApp class, substitute the result for app.
  get name attribute from the instance object, call it with an argument value and return the result.
  if data is an instance of bytes,
  args is an empty tuple.
  import module sys.
  test_runner is an instance of TestRunner class, called with an argument unpacked dictionary options.
  if IOError, renamed to e, exception is caught,
  call the function force_text with an argument val, if the result is not contained in pks,
  separated with string ', ', substitute '%s' with self.sequence, substitute '%d' with length of self.nodelist_loop,   substitute '%s' with reversed_text.   define the method __iter__ with an argument self.
  append cleaned_lien to statement.
  if not,
  if i is greater than, or equal to subject,
  call the method self._initialize_handlers,
  call the function warnings.warn with 3 arguments: string "`%s.%s` method should be renamed `%s`.",
  self.lineno is integer 1.
  raise an exception,
  skip this loop execution.
  define the method __str__ with an argument self.
  if IndexError exception is caught,
  call the function new_method_proxy with an argument operator.delitem, substitute the result for __delitem__.
  if value is an instance of str type,
  raise an exception.
  incomment is boolean False.
  if nodelist.contains_nontext is true,
  if AttributeError exception is caught,
  remove config dictionary element under 'class' key, use it as an argument for the call to the method self.resolve,
  raise an TemplateSyntaxError exception with an argument string "Searching for value. Unexpected end of string in column %d: %s",
  join dirpath and filename into path, use it as an argument for the call to the function os.path.normpath, substitute it for file_path.
  call the method self.configurator.convert with an argument value, substitute the result for result.
  replace '%s' with type of the obj object.   call the method self.indent with argument integer 1.
  if self._changed_data is None,
  if form.cleaned_data is true and value under the field key of form.cleaned_data dictionary is not None,
  call the function force_text with an argument value, substitute the result for value.
  return boolean False.
  if not,
  call the os.stat function with argument filename, store the return value in stat.
  return an empty string,
  plural is an empty list.
  convert to strings and concatenate context, CONTEXT_SEPARATOR and message, substitute the result for msg_with_ctxt.
  sublist_item is None.
  substitute gettext for gettext_noop, gettext_lazy and _.
  call the method self.resolve with an argument value, return the result.
  move integer 1 left for 50 bits, substitute the result for PB.
  use the result as an argument for the call to the os.path.join function,   use the result and the norm_patterns as arguments for the call to the is_ignored function, if it evaluates to true,   remove dirname from the dirnames.
  if CONTEXT_SEPARATOR is contained in result,
  do nothing.
  exp is an instance of Decimal, created with an argument integer 1.
  call the self.stdout.write method with string " (no migrations)" and self.style.MIGRATE_FAILURE as arguments.
  if not formfield_callback is None.   call the method __new__ from the base class of the class ModelFormMetaclass, with 4 arguments: mcs, name, bases and attrs,
  widget.is_localized is boolean True.
  substitute help_text for self.help_text.
  from django.utils.module_loading import import_string into default name space.
  convert o to an string, return it.
  import module os.
  raise an ValueError exception with an argument string "Negative base36 conversion input.".
  yield a tuple with 2 elements: tok.name and toktext.
  call the method self._resolve, substitute the result for result.
  return value.
  define the function make_list with an argument value.
  processors is an empty tuple.
  if m is false,
  raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.
  call the method handler.addQuickElement with an argument string "author", "%s (%s)",
  self.current is an empty dictionary.
  if model is contained in created_models,
  do nothing.
  ignored  is an empty list.
  from django.core.management.sql import sql_custom into default name space.
  if IndexError exception is caught,
  call the method token.split_contents, convert the result into a list and substitute it for bits.
  if length of parts is greater than integer 1 and last element of parts is contained in self.compression_formats,
  for every sql in custom_sql,
  increment i by integer 1.
  substitute timezone for _active.value.
  use the result as an key to get the value of the form.data dictionary, assign it value None.   call the method form.add_prefix with an argument self.fk.name,
  yield ch and boolean False.
  if Exception exception is caught,
  if other is contained in self.children, return boolean True, otherwise return boolean False.
  substitute complain for append.
  join return value of the function six.text_type called with an argument self.management_form and forms into a string,
  try,
  define the method __init__ with 3 arguments: self, token_type and contents.
  for every elt in list_ call the method bytes_to_text with 2 argument: elt and self.encoding, append the result into a list,
  call the function sql_destroy_indexes with 3 arguments: app_config, self.style and connection, substitute the result for statements.
  define the function extract with 2 arguments path and to_path set to empty string.
  define the function strip_entities with an argument value.
  for every loader in template_source_loaders,
  slice the filename from the previous result as start index to the end, strip it of white spaces from both ends,   if the result is not an empty string and filename is not an empty string, return boolean True, otherwise return boolean False.   define the method _close_files with an argument self.
  substitute cache_info for wrapper.cache_info.
  define the method setdefault with 3 arguments: self, key and default.
  args is an empty list.
  get format_type attribute of the settings object, return it.
  if IndexError, ValueError, KeyError or TypeError exceptions are caught,
  call the function timedelta with an argument integer 0, return the result.
  call the method path.expanduser with an argument template, substitute it for expanded_template.
  try,
  strip f of whitespaces and append it to plist.
  define the method __eq__ with self and other arguments:
  derive the class Loader from the BaseLoader base class.
  if self is not contained in context.render_context,
  endless loop,
  otherwise if fourth element of version does not equals to 'final',
  return guessed_path.
  for bit in self.lookups,
  get the element with maximal value between initial_forms and self.min_num, add self.extra to it, substitute the result for total_forms.
  if lang is None,
  do nothing.
  substitute char '0' for the value under the 'Content-Length' key of the response dictionary.
  define the function write with an argument data.
  call the method archive.extract with an argument to_path.
  value is None.
  delete dictionary item 'public' from cc.
  instantiate class Truncator, with an argument value, call the method words on the result with 2 arguments length,
  use_func is boolean False.
  define the method process_default with self class instance and event as arguments.
  if fields is not None,
  define the method encoding with an argument self.
  substitute value for self.cookies dictionary value under the key key.
  counters is a list containing length of handlers number of zeros.
  from django.utils.dates import MONTHS into default name space.
  __all__ is a tuple containing strings: 'ModelForm', 'BaseModelForm', 'model_to_dict', 'fields_for_model', 'save_instance',
  call the function import_module with argument self.urlconf_name, substitute the result for self._urlconf_module.
  if not,
  try,
  call the method self.invalid_block_tag with 3 arguments: token, command and parse_until.
  otherwise if child.nodeType equals to child.ELEMENT_NODE,
  define the method L with an argument self.
  call the method value.replace with an arugment tzinfo set to None, return the result.
  try,
  return a string '<%s: %r>', format it with __name__ field of the self class and repr_attr.
  call the method self.empty_block_tag with an argument token.
  return nothing.
  for every character in name,
  define method set_cdata_mode, with self class instance and tag as the arguments.
  get the value under the name key of the data dictionary, if it exists substitute it for value, if not, value is None.
  decorator stringfilter,
  convert locale to lowercase and return it.
  call the method re.sub with 3 arguments: raw string '>\s+<', string '><' and result of the function force_text,
  call the method self.sequence.resolve with 2 arguments: context and boolean True, substitute the result for values.
  call the method self.field.widget.value_from_datadict with 3 arguments: self.form.data, self.form.files, self.html_name, return the result.
  call the method self._handle_fk_field_node with field_node and field as arguments, substitute the result for the value under the
  from django.utils.html import avoid_wrapping into default name space.
  define the method _convert_to_charset with 4 arguments: self, value, charset and mime_encode set to boolean False.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  do nothing.
  skip this loop iteration,
  call the function get_wsgi_application, return the result.
  raise an TemplateSyntaxError exception with an argument string "back called without some previous parsing".
  if prefix doesnt end with character '/',
  error is an dictionary with an initial entry error.error_list for filed if true, or NON_FIELD_ERRORS if not.
  call the force_str function with an argument: salt, if it exists, if not with a string '%s.%s', with '%s' replaced by,
  if serializers is None and _serializers is false,
  and unpacked dictionary kwargs.   substitute queryset for self.queryset.
  join into a file path: django_dir, 'conf', 'locale', locale, 'LC_MESSAGES' and string '.po' appended to domain, substitute the result for django_po.
  substitute self._meta for opts.
  raise an BadSignature exception with an argument string 'Signature "%s" does not match', where '%s' is replaced by sig.
  for statements is sql,
  value is an instance of a class Decimal created with value as an argument.
  return an instance of SafeText, created with an argument data.
  use it as an argument for the call to the mark_safe function, return the result.   define the method value_from_datadict with 4 arguments: self, data, files and name.
  if empty_label is not None,
  call the method parser.parse with an argument tuple with an element string 'endautoescape', substitute the result for nodelist.
  pop_context is boolean True.
  if self.default_locale_path directory doesnt exists,
  do nothing.
  for every c in candidate without the last element and in reversed order, convert c into an integer,
  supports_microseconds is boolean False.
  define the function inotify_code_changed.
  raise an TemplateSyntaxError exception with an argument string "%r expected at least one variable assignment",
  call the method s.find with an argument bytes string ';', substitute the result for end.
  delete value under the key key of dictionary at last element of self.dicts.
  substitute instance._meta for opts.
  with new_path and self.style.NOTICE, respectively, write it to self.stderr stream.   if self.paths_to_remove is true,
  RemovedInDjango19Warning, stacklevel set to integer 2.   for field_name every obj in list created from the elements of the return value of the function six.iteritems with an argument attrs.
  s is an instance of StringIO class.
  for every w in widgets, call the function w and append the result to a list, if w is an instance of type class,
  from __future__ import unicode_literals into default name space.
  if dirname is true and dirname directory doesnt exists,
  requires_system_checks is boolean False.
  derive the class CharField from the base class Field class.
  substitute next_item for sublist_item.
  self._leftover is an empty string.
  if not,
  call the method bit.group with an argument integer 0, yield the result.
  derive the class Node from object base class.
  and 'Comment' for TOKEN_COMMENT.   FILTER_SEPARATOR is a string '|'.
  if self has an attribute '_files',
  call the function lazy with 2 arguments: gettext and str, substitute gettext_lazy.
  if not,
  _iterlists is a string "lists".
  try,
  call the function func with 2 arguments: unpacked list resolved_args and unpacked dictionary resolved_kwargs,
  strip of the whitespaces first element of transfer_encoding, substitute the result for transfer_encoding.
  get fist max_width incremented by 1 elements from line, find index of the first occurrenece of whitespace from the right side,
  import module sys.
  define the method as_table with an argument self.
  define the method __init__ with an argument self.
  join fixture_dir, fixture_name with appended character '*' into a valid file path,
  msg is a string "%(model)s.Meta.%(opt)s cannot be a string. Did you mean to type: ('%(value)s',)?", where '%(model)s' is replaced,
  define the method render with 2 arguments: self and context.
  if compare_to is not equal to value under the self key of state_frame.
  otherwise if count is greater than integer 1,
  call the __init__ method of the base class of the class URLValidator, with unpacked dictionary kwargs as argument.
  if value under the 'language' key of the self.feed dictionary is not None,
  encoding.setter decorator,
  import module zlib.
  import module re.
  create the object WSGIServer with 2 arguments: get_internal_wsgi_application return value and unpacked dictionary wsgi_opts, call the method run on it.
  define the method __init__ with 3 arguments: self, stream_or_string and unpacked dictionary options.
  if next_item is true and next_item is an instance of list or tuple type,
  if ValueError exception is caught,
  define the function escape with an argument text.
  define the function deactivate.
  if id_ is true,
  if not an empty string, and truncate, return the result.   return text.
  from django.core.management.base import BaseCommand and CommandError into default name space.
  define the function first with an argument value.
  define the method _isdst with 2 arguments: self and dt.
  substitute self.__class__.__doc__ for self.__doc__.
  try,
  define the method g with an argument self.
  derive the class ChoiceInput from the SubWidget base class.
  string '%Y-%m-%d', convert the result into a string and append it to ',', substitute the result for d.   format string 'tag:%s%s:%s/%s' with bits.hostname, d, bits.path and bits.fragment, return it.
  if first element of the second row of args equals a string '2',
  if self.instance.pk is not None,
  from django.utils import formats and six into default name space.
  substitute SelectMultiple for widget.
  datetime.date and datetime.time.   define the function is_protected_type with obj as the only argument.
  return boolean False.
  call the method self.setlistdefault with an argument key, append value to the result.
  stats is an list with 2 elements: 2 integers 0.
  from __future__ import unicode_literals into default name space.
  if ValueError exception is caught,
  from django.core.management.base import AppCommand into default name space.
  raise an TemplateSyntaxError exception with an argument string "'autoescape' argument should be 'on' or 'off'".
  called with an argument option_value, append the result to output.   for every option in option_label,
  if value has an '__iter__' attribute and value is not an instance of bytes or six.string_types class.
  convert lang_string to lowercase, split by the result string accept_language_re, substitute the result for pieces.
  if return value of the function normcase called with an argument final_path doesnt starts with result of the function normcase,
  yield line.
  if memo is None,
  from importlib import import_module into default name space.
  define the method label_from_instance with 2 arguments: self and obj.
  call the function force_bytes with an argument salt, substitute the result for salt.
  If you see valid patterns in the file then the issue is probably caused by a circular import."   raise an ImproperlyConfigured exception with an argument: return value of the method msg.format, called with an argument name set to self.urlconf_name.
  if name is contained in MEDIA_TYPES,
  define the method __exit__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  substitute dt for self.__dt.
  and result of the method self.__getstate__.   define the method __deepcopy__ with 2 arguments self and memo.
  for every f in opts.fields,
  raise an ValueError with an argument string "'%s.%s' has more than one ForeignKey to '%s.%s'.", where '%s' is replaced with,
  for every ext in extensions,
  loaders is an empty list.
  raise an TemplateSyntaxError exception with an argument string "'%s' is not a valid tag library: %s",
  define the method __init__ with 3 arguments: self, attrs set to None and format is None.
  otherwise if ch equals a string '.',
  if sep is None,
  call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for key.
  define the method __setitem__ with 3 arguments: self, kay and value.
  substitute first args for other_dict.
  get config dictionary element under 'format' key, if it exists substitute it for fmt, if not, fmt is None.
  try,
  if termios is true,
  substitute value under idx key of dictionary d for d.
  define the method add_arguments with 2 arguments self and parser.
  skip this loop iteration,
  substitute the result for the value under the Model._meta.pk.attname key of data dictionary.   m2m_data is an empty dictionary.
  BLOCK_TAG_END is a string '%}'.
  derive the class BaseArchive from the object base class.
  get _iterlists attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,
  if value under the 'enclosure' key of the item dictionary is not None,
  derive the class JsLexer from the Lexer base class.
  increment self.pos by integer 1.
  doublecolon_start is integer -1.
  self.object._meta.object_name and self.object.pk, respectively.   define the method save, with 3 arguments: self, save_m2m set to boolean True and using set to boolean True.
  call the function render_value_in_context with 2 arguments output and context, return the result.
  if not,
  incomment is boolean True.
  raise an CommandError with an argument string "couldn't extract file %s to %s: %s", where '%s' is replaced with filename, tempdir and e.
   self.locale_paths is an empty list.
  call the method handler.addQuickElement with 3 arguments: string 'title', an empty string and a dictionary with 3 entries:
  call the method token.split_contents, substitute the result without the first element for bits.
  derive the class Deserializer from the six.Iterator base class.
  finally perform,
  call the method __get__ with 2 arguments: instance and owner, from the base class of the classonlymethod class, return the result.
  substitute file for filename.
  from django.utils.six.moves import copyreg into default name space.
  append f.name to exclude.
  define the function stringformat with 2 arguments value and arg.
  substitute it for value under the string ".moves.urllib" appended to __name__ key of the sys.modules dictionary.   define the function add_move with an argument move.
  remove kwargs dictionary element under the 'method' key, substitute it for method.
  join root and f in path, substitute the result for f.
  if length of bits is not equal to integer 2,
  substitute the last element of parts for parts.
  if can_fail is true,
  for every date_key in date_keys,
  if not,
  substitute the result for time_str.   if six.PY2 is true,
  do nothing.
  _iterkeys is a string "iterkeys".
  if filter_name is contained in self.filters,
  substitute max_width for self.max_width.
  call the function os.environ.get with 2 arguments: string 'PATH' and an empty string, split the result at the os.pathsep, substitute the result for path.
  call the function force_text with an argument top_errors, format error_row with it, insert it at the beginning of output.
  if not,
  return end ans next.
  substitute settings.DEFAULT_CHARSET for self._charset.
  substitute args for self.args.
  return nothing.
  for f in sorted list of the files in the self.path directory,
  return first element of key.
  define the method item_attributes with 2 arguments self and item.
  if socket.error, renamed to e, exception is caught,
  define the method configure_root with 3 arguments: self, config and incremental set to boolean False.
  call the method connection.introspection.django_table_names with an argument boolean true, substitute the result for tables.
  if token equals a string "not" and i incremented by 1 is lesser than l,
  remove first element from non_capturing_groups, substitute it for start.
  for every medium in extend,
  substitute index for end.
  calculate length of chunk modulo integer 4, substitute the result for over_bytes.
  where '%s' is replaced with app_or_project and extensions joined into a string, separated by a string ', '.   call the method self.stdout.write, with an argument string "Rendering %s template files with filenames: %s\n",
  if self.pointer is smaller than length of self.subject, return boolean True, otherwise return False.
  define the method run_shell with an arguments self and shell set to None.
  if tt.tm_isdst is greater than integer 0, return the result.
  call the method connection.creation.sql_destroy_model with arguments: model, references_to_delete and style, extend with the result the list output.
  subtract length of dec_part from decimal_pos, multiply the number of character '0' by the result,
  if dirname starts with character '.' or dirname equals a string '__pycache__',
  split the string cc_delim_re with value under the key 'Vary' of response dictionary as delimiter, substitute result for vary_headers.
  define the function fget with 3 arguments: instance, instance_type set to None and name set to fget.__name__.
  and self.regex.flags equals to other.regex.flags and self.message equals to other.message and self.code equals to other.code,   and self.inverse_match equals to other.inverse_match, return the result.   define the method __ne__ with arguments self and other.
  raise an exception.
  if call to the method response.has_header with string 'Cache-Control' as an argument returns boolean True,
  do nothing.
  if value under the 'daemonize' of options dictionary is None,
  if changes is true,
  divide self.data.day by 10, substitute reminder of the result for last.
  if member is a directory,
  append form to self.saved_forms.
  use_l10n set to None and use_tz set to None.   substitute autoescape for self.autoescape.
  append templatetag_module to _templatetags_modules.
  if self.is_bound is true and i is smaller than self.initial_form_count,
  substitute choices for self.choices.
  derive the class MediaDefiningClass from the type base class.
  call the method self.resolve_context with an argument self.context_data, substitute the result for context.
  if count of occurrence of '.' in ip_str is not equal to integer 3,
  otherwise if length of app_labels is greater than integer 1,
  import module sys.
  call the method widget.id_for_label with an argument id_, substitute the result for id_for_label.
  if arg is true,
  call the function ungettext with 3 arguments: string "%(size)d byte", string "%(size)d bytes" and 0, '%(size)d' is replaced with 0,
  where '%s' is replaced with migration_name and app_label.   if KeyError exception is caught,
  call the method self.can_write.release.
  status_code is an integer 403.
  call the method sys.stderr.write with an argument string "fork #1 failed: (%d) %s\n", formated with e.errno and e.strerror.
  substitute new_attr for self.attr.
  delete the form.cleaned_data dictionary entry under the field key.
  if not,
  call the method datetime.now, return the result.
  call the function getInnerText with argument k, on the result call the method strip, for every k in keys, append the results to field_value list.
  define the function urlunquote with an argument quoted_url.
  for every i in range of integers from 0 to length of result, not included,
  define the function inlineformset_factory with 20 arguments: parent_model, model, form set to ModelForm,
  if age is greater than max_age,
  define the function slugify with an argument value.
  call the __init__ method from the base class of the WSGIServer class, with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  rise an KeyError exception with an argument key.
  from __future__ import unicode_literals into default name space.
  increment the lineno by the count of the newlines in self.__starttag_text.
  define the function center with 2 arguments value and arg.
  reminder of the division of floored result of division of seconds by 60, by integer 60.   define the method P with an argument self.
  call the method self.is_valid, if it evaluates to false,
  strings "Please submit %d or fewer forms.", "Please submit %d or fewer forms." and self.max_num,   where '%d' is replaced with self.max_num, and code as a string 'too_many_forms'.   if self.validate_min is true, and length of self.deleted_forms subtracted from the return value of the method self.total_form_count,
  substitute func.__doc__ for compile_func.__doc__.
  if not,
  define the method reader with an argument self.
  close file_ file descriptor.
  if AttributeError exception is caught,
  source and previous result.   if TemplateDoesNotExist exception is caught,
  substitute MultipleHiddenInput for hidden_widget.
  define the function emit_pre_migrate_signal with 4 arguments: create_models, verbosity, interactive and db.
  join the executor.loader.unmigrated_apps into a string separated by string ', ' append it to the end of a string "  Synchronize unmigrated apps: ",
  if not,
  from django.utils.encoding import force_str into default name space.
  year_val and month_val and day_val are set to None.
  remove entry at the attr key of the declared_fields dictionary.
  define the method add_arguments with 2 arguments self and parser.
  if ch is not equal to a sring '?' or escaped is true,
  substitute MultipleHiddenInput for hidden_widget.
  try,
  for model in model_list,
  call the method stream_or_string.decode with an argument string 'utf-8', substitute the result for stream_or_string.
  define the method eval with 2 arguments: self and context.
  return s.
  if self._num_pages is None,
  import module sys.
  if i is greater than sys.maxint,
  fks_to_parent is a list containing f for every f in opts.fields, only if f is an instance of ForeignKey,
  if field_value is not None,
  define the method __setitem__ with 3 arguments: self, key and value.
  get the bit attribute of current object, substitute it for current.
  delete dictionary item 'private' from cc.
  and final_attrs, append the result to output.   call the method self.format_output with an argument output, use the result as an argument for the call to the function mark_safe,
  call the function token.split_contents, substitute the result without the first element for bits.
  derive the class NullDevice.
  call the method logger.addHandler with an argument handler.
  define the method total_form_count with an argument self.
  try,
  call the method self.setlistdefault with an argument key, append value to the result.
  call the method self.limit_choices_to, return the result,
  define the method __init__ with 6 arguments: self, regex, urlconf_name, default_kwargs set to None, app_name set to None and namespace set to None.
  WEEKDAYS is an dictionary with 7 entries: result of the call to the function _ with an argument string 'Monday' for 0,
  if i is equal to len_values decremented by 1, value under the 'last' key of the loop_dict dictionary is boolean True, otherwise it is False.
  raise an NoReverseMatch exception with an argument string "Error importing '%s': %s.", where '%s' is replaced with lookup_view and e, respectively.
  import io.
  define the method getvalue with an argument self.
  with self.mutex perform,
  call the object Decimal with string '1' as an argument, divide it by 10, bring the result to the power of self.decimal_places,
  split value into two parts by decimal_separator, assign the result to value and decimals.
  format_html_join, called with 3 arguments: empty string, string '<li>{0}</li>', tuple containing results of the function,   force_text with an argument e, for every e in self, return the result.   define the method as_text with an argument self.
  substitute value under the f.name key of the help_texts dictionary for value under the 'help_text' key of kwargs dictionary.
  for every arg in s, evaluate the function force_bytes for the arguments arg, encoding, strings_only and errors,
  if not,
  if Exception exception is caught,
  if base.DeserializationError exception is caught,
  raise an exception.
  sort all_files and return it.
  return path,
  help is a string "Runs a Python interactive interpreter. Tries to use IPython or bpython, if one of them is available.".
  if exit_code is not equal to integer 3.
  define the method _archive_cls with an argument file.
  otherwise if self.verbosity is greater than integer 0,
  if not,
  raise an ValueError with an string "Zip-compressed fixtures must contain one file.".
  return message.
  define the function date_format with 3 arguments: value, format set to None and use_l10n set to None.
  and warning as a string "You cannot alter upload handlers after the upload has been processed.".   parser is an instance of MultiPartParser class, created with 4 arguments: META, post_data, self.upload_handlers and self.encoding.
  with arguments cookie_value and max_age set to max_age.   if signing.BadSignature exception is caught,
  return last element of list_.
  write string ' #\n' to out file.
  if format_module_path is None.
  return tuple, consisting of first element of t converted to lowercase and True.
  call the method self.style.NOTICE with string "  Your models have changes that are not yet reflected in a migration, and so won't be applied." as an argument, use the result as an argument for the call to the self.stdout.write method.
  if value is contained in self.empty_values,
  if formfield_callback is None,
  substitute _iterkeys for __iter__.
  if csrf_token equals string 'NOTPROVIDED',
  if self._content_length equals integer 0,
  if is_templatized is true,
  and path with self.path, substitute the result for current_uri.   call the function urljoin with arguments current_uri and location, substitute the result for location.
  derive the class UnreadablePostError from the base class IOError.
  output is an empty list.
  define the function set_script_prefix with an argument prefix.
  if value under the 'microsecond' key of the kw dictionary is true,
  if self.app_label is true and app_config.label is not equal to self.app_label,
  define the private method __init__, with self instance of this class, obj and list of arbitrary length *args as arguments.
  define the method add_fields with 3 arguments: self, form and index.
  decorator is an instance of class Node, created with 2 arguments: instance of Leaf class created with 2 arguments: token.AT and "@',
  make a directory top_dir.
  call the BaseConverter function with BASE36_ALPHABET as argument, store the result in base36.
  if template_dir is directory,
  for every value in data.   if data_set is not equal to initial_set return boolean True, otherwise return boolean False.
  if not,
  convert params into a list, substitute it for unhandled_params.
  if not,
  substitute complain for insert.
  for every i and choice in enumerated iterable self.choices,
  if not,
  derive the class WidthRatioNode from Node base class.
  if UnicodeDecodeError exception is caught,
  ipv4_address is a string "%d.%d.%d.%d" formated with first 2 elements of seventh element of hextets converted into hexadecimal number,
  if TypeError exception is caught,
  if self._non_form_errors is None,
  try,
  try,
  return result.
  if error has an attribute 'error_dict',
  serialize data to JSON format with cls set to encoder, substitute it for data.
  cal the method self.startElement with 2 arguments: name and attrs.
  subject is an string '%s: %s' formated with record.levelname and result of the method record.getMessage, respectively.
  increment i by integer 1.
  increment the offset by the length of self.__starttag_text.
  open err_log flie in append mode with buffering size of input buffer, substitute the result for se.
  from django.core.serializers.base import SerializerDoesNotExist into default name space.
  remove k element from self.keyOrder dictionary.
  finally,
  call the parser.add_argument method with the string '--database', default set to DEFAULT_DB_ALIAS and help containig string,
  if ImportError exception is caught,
  if AttributeError exception is caught.
  with all occurrences of '%s' replaced with app_name and model._meta.object_name, respectively.   if self.verbosity is greater or equal to integer 1,
  substitute model._meta for opts.
  from __future__ import unicode_literals into default name space.
  call the self.style.HTTP_SERVER_ERROR with an argument msg, substitute it for msg.
  mapping is an dictionary with 8 initial entries: BLOCK_TAG_START for 'openblock', BLOCK_TAG_END for 'closeblock',
  define the method latest_post_date with an argument self.
  created_models is a set.
  split template once at the first character ':', convert the first element to lowercase and substitute it for scheme.
  if length of compressed is lesser than length of data decremented by 1,
  derive the class EmptyPage from the InvalidPage base class.
  call the function ugettext with an argument string "Please correct the duplicate data for %(field)s, which must be unique.",
  if max_value is not None,
  substitute Lexer and Parser for lexer_class and parser_class.
  called with an argument k.   call the function c with an argument unpacked dictionary kwargs, substitute the result for result.
  derive the class TokenBase from the object base class.
  yield nothing.
  use the result as an argument for the call to the function bytes, return the result.   define the method __cast with an argument self.
  append migration.name to string ' - ', write it to self.stdout stream.
  kwargs is an empty dictionary.
  define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  call the method s.render with 3 arguments: field string formated with name, val and local_attrs, substitute the result for select_html.
  if not,
  if _default is None,
  value under the 'author_name' key of the item dictionary and dictionary with an entry: "http://purl.org/dc/elements/1.1/" for "xmlns:dc".   if value under the 'pubdate' key of the item dictionary is not None,
  call the function urlquote with an argument _prefix, use the result as an argument for the call to the normalize function,
  return an empty list.
  and csrf_token, return the result.   if not,
  self.waiting_writers is an integer 0.
  call the method self.var.resolve with an argument context, substitute it for obj.
  if not,
  substitute the result for trail.   call the function escape with an argument url, substitute the result for url, call the function escape with an argument trimmed,
  raise AttributeError exception,
  raise an TypeError exception with an argument: result of the method illegal_formatting.group called with an argument,
  call the function hashlib.pbkdf2_hmac with 5 arguments: field name of the result of the function digest, password, salt,
  name appended to string '_', as the name of the attribute to get from other object, or if the previous doesnt exist, None.   return combined.
  url_markup_template is a string '<a href="{0}">{1}</a>'.
  if not,
  join 'conf' and 'locale' into a file path, use it as an argument for the call the method os.path.abspath,
  if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
  for every k and v in the previous result, add a key into a dictionary: v converted to an integer for k,   substitute the resulting dictionary for kw.   call the method datetime.date with an argument unpacked dictionary kw, return the result.
  write it for self.stderr.   exit the program with the integer 2 as exit code.
  if name equals string "_wrapped",
  strip whitespaces from both ends of unicode_value, substitute the result for value.
  call the method clean with an argument value from the base class of the class TypedMultipleChoiceField, substitute the result for value.
   self._headers is an empty dictionary.
  substitute template_string for self.template_string.
  call the function hmac.compare_digest with 2 arguments: result of the function force_bytes called with an argument val1,
  output_transaction is boolean True.
  try,
  find the value of response under the key 'Cache-Control', use it as a delimiter to split string ss_delim_re,
  call the function clean_ipv6_address with arguments value and self.unpack_ipv4, return the result.
  call the method self.nodelist_false.render with an argument context, return the result.
  self._non_form_errors is None.
  convert fist p elements of language to lowercase, append '_' to it,
  return a instance of the class Page, created with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  self.filters is an empty dictionary.
  call the function force_text with an argument truncate, substitute the result for truncate.
  return result.
  if not,
  get the hash value of the tup, substitute it for self.hashvalue.
  call the method self.configure_filter with an argument value under name key of formatters dictionary,
  call the function _strip_once with an argument value, substitute the result for new_value.
  substitute file.name for filename.
  created with an argument constant_arg, append it to args.   otherwise if var_arg is true,
  call the method self.error_class, substitute the result for self._non_form_errors.
  from django.utils.html import strip_spaces_between_tags.
  join elements of c into a string, return it.
  if value is an instance of bool.
  call the method six.moves.input with an argument string "Do you wish to proceed? [yN] ", substitute the result for answer.
  import module re.
  call the method field.rel.to._meta.pk.to_python with an argument value, use the result as an argument for the call to the,
  if not,
  and string 'ignore', call the method decode on the result with an argument string 'ascii', substitute the result for value.   call the method re.sub with 3 arguments: string '[^\w\s-]', empty string and value, strip the result of whitespaces from both ends,
  call the method __init__ with an argument name form the base class of the class MovedAttribute.
  call the function _add_doc with 2 arguments: b and string """Byte literal""".
  for every arg in args,
  derive class MovedModule from the _LazyDescr base class.
  decrement factor by one.
  if ValueError, TypeError or ValidationError exception is caught,
  call the method self.stdout.write with an argument string 'examining files with the extensions: %s\n',
  raise an ValueError exception with an argument string 'Unable to set target handler %r: %s',
  attrs as a dictionary with an entry: checkbox_id for 'id',   substitute the result for value under the 'clear' key of the substitutions dictionary.   format self.template_with_clear with substitutions, substitute the result for value under the 'clear_template' key of,
  if filename is true and filename path doesnt exist,
  call the function format_html with 3 arguments: self.inner_html, choice_value set to choice_value,
  call the method self.as_widget with 3 arguments: return value of the method self.field.hidden_widget, attrs,
  leave_locale_alone is boolean True
  from __future__ import unicode_literals into default name space.
  call the method executor.loader.get_migration_by_prefix with arguments app_label, migration_name, substitute the result for migration.
  import module unicodedata.
  substitute every '%s' in string '%s<li>%s%s</li>' with indent, with result of the function escaper called with an argument:
  define the method strptime with arguments self, value and format.
  derive the class Archive from the object base class.
  call the function new_method_proxy with an argument unicode, substitute the result for __unicode__.
  remove kwargs dictionary element under the 'method' key, substitute it for method.
  define the method clear with an argument self.
  if 'fields' attribute of meta is None, or if it doesnt exists if fields is None and if 'exclude' attribute of meta is None,
  define the method Z with an argument self.
  define the method __eq__ with arguments self and other.
  call the function escape with an argument lead, substitute the result for lead, call the function escape with an argument trail,
  for every pattern in allowed_hosts:
  define the decode method with self class instance and s as arguments.
  substitute field_name for old_field_name.
  define the method __call__ with arguments self and value.
  call the method self.renderer with 4 arguments: name, value, final_attrs and choices, return the result.
  substitute RemovedInDjango19Warning for RemovedInNextVersionWarning.
  substitute the result for file_name.   call the function unescape_entities with an argument file_name, use the result as an argument for the call to the self.IE_sanitize,
  substitute context for self.context.
  from __future__ import unicode_literals into default name space.
  call the function escape with an argument text, return the result.
  yaml import CSafeDumper as SafeDumper into default name space.
  substitute date_check elements to uclass, lookup, field and unique_for, respectively.
  if '::' is not contained in ip_str and number of occurrences of ':' in ip_str is not equal to integer 7,
  call the function force_text with an argument text, substitute the result for text.
  try,
  return singular.
  derive the class SlugField from the base class CharField class.
  if value under the 'verbosity' key of the options dictionary is greater than zero,
  derive the class MultiValueDict from the dict base class.
  if decompress is true,
  remove slots_var key from the orig_vars dictionary.
  substitute '%r' in string ' ngettext(%r, %r, count) ' with result of the function join_tokens, called with 2 arguments: singular,
  if self.data.hour is greater than inreger 12,
  increment i by integer 1,.
  import module mimetypes.
  close file descriptor s.
  call the method self.xml.endElement with an argument string 'object'.
  for every sql in index_sql,
  call the method self.get_queryset, substitute i-th element of the result for value under the 'instance' key of kwargs dictionary.
  and help is a string 'Module paths to test; can be modulename, modulename.TestCase or modulename.TestCase.test_method'.   call the method parser.add_argument with 5 arguments: string '--noinput', action set to 'store_false', dest set to 'interactive',
  define the method load_template_source with 3 arguments: self, template_name and template_dirs set to None.
  from django.utils.functional import Promise into default name space.
  strip path of all leading '/' and '\\' characters, substitute the result for path.
  raise an SyntaxError with an argument string "Translation blocks must not include other block tags: %s (%sline %d)",
  call the function with 7 arguments: self, self.instance, self._meta.fields, fail_message, commit, self._meta.exclude,
  get 'widgets' attribute from the options object, if it exists substitute it for self.widgets, if not self.widgets is None.
  i is integer 366.
  if value is an instance of six.text_type class,
  if value under the index key of the hextets dictionary equals to string '0',
  if self.verbosity is greater or equal to integer 2,
  sum year and off, substitute the result for year.
  call the function all_locale_paths, for every path is the result,
  previous result and filepath.   if IOError exception is caught,
  call the function walk_to_end with 2 arguments: ch and pattern_iter.
  unpacked list field_value as an argument, substitute the result for obj.   get field.rel.field_name attribute of the object obj, substitute it for value.
  return a string '%s(%s)' formated with self.__class__.__name__ and dictreprs.
  call the method self.build_attrs with 2 arguments: attrs and name set to name, substitute the result for final_attrs.
  substitute key for op.id.
  from django.core.exceptions import ValidationError into default name space.
  common_prefix is None.
  for every sublist in second_item,
  return default.
  self._wrapped.
  call the __init__ method from the base class of the HttpResponseNotAllowed class, called with arguments: unpacked list args,
  define the function get_tag_uri with 2 arguments: url and date.
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  define the method __init__ with 4 arguments: self, template_string, origin set to None and name set to None.
  from django.template.base import Variable, Library and VariableDoesNotExist into default name space.
  convert tag to lowercase if it is not equal to self.cdata_tag,
  rais an AppRegistryNotReady exception with an argument string "The translation infrastructure cannot be initialized before the "
  value is an empty list.
   _assertRaisesRegex is a strnig "assertRaisesRegex".
  call the self.stderr.write method with string "    No custom SQL for %s.%s model\n" as argument,
  self._post_parse_error is boolean True.
  substitute the result for origin.   try,
  define the method widget_attrs with arguments self and widget.
  return html.
  if not,
  filesize_number_format with result of division of bytes by KB as an argument, substitute the result for value.   otherwise if bytes is smaller than GB,
  call the function super_set with 2 arguments: key and value.
  replace every occurrence of '\r' in s with '\\r'.
  call the sql_flush function with self.style, connections under the key with the value of options dictionary under the 'database' key,
  self.dicts is an list with element builtins.
  for key and value in return value of the six.iterlists function called with an argument self,
  import module sys.
  substitute self.html_initial_name for name.
  if 'media' is not contained in attrs,
  try,
  define the function npgettext with 4 arguments: context, singular, plural and number.
  substitute self for value.configurator.
  return an empty string.
  for model in router.get_migratable_models method return value, called with 3 arguments: app_config, connection.alias,
  if v is an instance of list or tuple type,
  substitute media.__dict__ for media_attrs.
  self._errors is None.
  get attribute "urlpatterns" form the self.urlconf_module, substitute it for patterns, if the attribute doesnt exist,
  if not,
  if root is true,
  BASE16_ALPHABET is a string '0123456789ABCDEF'.
  define the method __init__ with self and limit_value as arguments.
  substitute inverse_match for self.inverse_match.
  call the function copy with an argument self, substitute the result for new_context.
  get the value under the 'localize' key of the kwargs dictionary, if it is true and self.widget equals to NumberInput,
  define the method __init__ with 3 arguments: self, offset set to None, name set to None.
  call the method six.reraise 3 with arguments: os_err_exc_type, return value of the function os_err_exc_type,
  import module re.
  if site is contained in sites1,
  call the method template.render with an argument context, substitute the result for content.
  return value under the name key of the files dictionary, if it doesnt exists, return None.
  raise an DTDForbidden exception with arguments name, sysid and pubid.
  if attrs is false, make attrs an empty dictionary.
  from django.db.migrations.loader import MigrationLoader into default name space.
  if boundary is false or return value of the method cgi.valid_boundary called with an argument boundary evaluates to false,
  split string cc_delim_re by value of dictionary response under the key 'Vary' as a delimiter, substitute it for vary_headers.
  base36 is an empty list.
  substitute '%s' is string 'processing file %s in %s\n' with self.file and self.dirpath, write it to command.stdout.
  return integer 0.
  substitute result for the value of the memo dictionary, with identity of the self object as an key.
  return an empty string.
  if urlconf is None,
  define the method __init__ with 2 arguments: self and language.
  for every v in self.validators,
  return a list containing results of the function format_html called with 2 arguments:
  replace every occurrence of '\t' in s with '\\t'.
  define the function ifequal with 2 arguments: parser and token.
  if self.selected_fields is None or field.attname is contained in self.selected_fields
  try,
  derive the class ErrorList from the UserList and list base classes.
  define the class Serializer from the PythonSerializer base class.
  substitute instance for self.instance.
  if value is true,
  if not,
  if message is an instance of ValidationError class and message.code is contained in error_messages,
  raise an TypeError exception with an argument string "Variable must be a string or number, got %s", replace '%s' with type of var.
  if text is true format with it and RESET a string '%s\x1b[%sm', if not format it with an empty string and RESET, substitute the result for text.
  while t is greater than integer 0,
  if ValueError exception is caught,
  define the method compress with arguments self and data_list.
  post is a string '<could not parse>'.
  call the method self.options.copy, substitute the result for self.json_kwargs.
  substitute value for self.value.
  return boolean False.
  comment is an empty list.
  decorator deconstructible,
  define the method __init__ with 2 arguments: self and value.
  derive the class MultipleHiddenInput from the HiddenInput base class.
  if self.__language equals settings.LANGUAGE_CODE,
  if fk_name is true,
  if file filename exists,
  substitute renderer for self.renderer.
  define the function u with an argument s.
  num_args is an integer 0.
  if language is contained in _DJANGO_DEPRECATED_LOCALES,
  return an instance of EscapeBytes, created with an argument s.
  if _default is None,
  return unbound.
  if os.name equals string 'nt',
  call the method build_request_repr with an argument self, return the result.
  '"Upload a valid image. The file you uploaded was either not an image or a corrupted image."' for 'invalid_image'.   define the method to_python with arguments self and data.
  decorator function register.filter with an argument is_safe set to boolean False.
  if httponly is true,
  call the method _trans.npgettext with 4 arguments context, singular, plural and number.
  if domain is true,
  return self._urlconf_module.
  if self.pk_field,
  delete name attribute of the _MovedItems object.
  call the function do_ifequal with 3 arguments: parser, token and boolean False, return the result.
  for every e in errors convert e into a string and append it to a string '  * ',
  call the function six.iteritems with an argument dict_, for every item in the result,
  call the method lexer.tokenize, use it as an argument for the call to the parser_class function, substitute the result for parser.
  raise an ValidationError with 3 arguments: value under the 'max_digits' key of the self.error_messages dictionary,
  if data is an instance of datetime.datetime or datetime.time classes, and supports_microseconds field of self.field.widget is false,
  raise an self.error with 2 arguments: None and string "Unclosed tags: %s ",
  from django.core.exceptions import ImproperlyConfigured into default name space.
  remove first 7 elements form template.
  define the method handle_m2m_field with arguments self, obj and field.
  from django.core.servers.basehttp import run and get_internal_wsgi_application into default name space.
  substitute the result for netloc.   if UnicodeError exception is caught,
  if not, shutdown_message is an empty string.   if sys.platform equals string win32', substitute string 'CTRL-BREAK' for quit_command, if not substitute string 'CONTROL-C' for quit_command.
  call the method timezone.localize with 2 arguments: value and is_dst as None, return the result.
  call the method parser.add_argument with 2 arguments: string 'app_label',
  from django.utils.encoding import force_text into default name space.
  call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, return the result.
  import module sys.
  from django.utils.module_loading import module_has_submodule into default name space.
  if self.is_reversed is true, substitute reversed_text is an string ' reversed', if not, reversed_text is an empty string.
  if ',' is not contained in arg,
  _iterlists is a string "iterlists".
  self.years is list containing 10 successive integers from this_year.
  attrs is an dictionary with 9 initial entries: form for 'form', extra for 'extra', can_order for 'can_order',
  if self.warning is an instance of Exception class,
  import module contextlib.
  substitute var for value under the name key of the self.extra_context dictionary.
  and unpacked dictionary kwargs.   substitute max_length and min_length for self.max_length for self.min_length.
  valid is boolean False.
  try,
  from os.path import join, normcase, normpath, abspath, isabs, sep and dirname into default name space.
  if TemplateSyntaxError, replaced with e, exception is caught,
  use global variable _supported.
  while escaped is true or ch is not equal to a string ']',
  if TypeError or ValueError exceptions are caught,
  raise a SerializerDoesNotExist exception with an argument format.
  return args and kwargs.
  call the method to_delete.add with an argument model.
  yield subnode.
  call the function io.open with 3 arguments: potfile, string 'r' and encoding set to string 'utf-8' as arguments,
  import module inspect.
  substitute frame.f_globals for _globs_.
  define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  call the method os.dup2 with 2 arguments: result of the method so.fileno and result of the method sys.stdout.fileno.
  get attribute piece of the self object, call it and use the result as an argument for the call to the function force_text,
  if f.editable is true and f is an instance of models.AutoField, or f.name is not contained in cleaned_data,
  if Exception exception is caught,
  if t is not None,
  skip this loop iteration,
  convert number into an integer and substitute it for number
  if USE_INOTIFY is true,
  define the method with reload with an argument self.
  if data_list is true,
  call the method self.queryset.none, return the result.
  call the method formats.number_format with 2 arguments: number and absolute value of p,
  define the method get_resolved_arguments with 2 arguments: self and context.
  if kwds is true or typed is true, call the function make_key with 3 arguments: args, kwds and typed, substitute the result for key,
  call the method self.data.weekday, use the result as an key for obtaining WEEKDAYS_ABBR dictionary value, return it.
  text_kwargs is a dictionary created from the result of the function force_text with an argument v, mapped through function k, for every k and v in return value of the kwargs.items.
  try,
  remove element from kwargs dictionary under the key 'pk_field', substitute it for self.pk_field if it exists,
  for every key in self,
  call the function _trans.templatize with 2 arguments: src and origin, return the result.
  from collections import OrderedDict into default name space.
  if current_app and is true and current_app is contained in app_list,
  increment res by element of to_digit at the digit index.
  call the method test_runner_class.add_arguments with an argument parser.
  for every hook in sys.path_hooks,
  return it.   define the function iterlists with 2 arguments: d and unpacked dictionary  kw.
  if node.must_be_first is true and nodelist is true,
  call the method os.environ.copy, substitute the result for new_environ.
  convert header to lowercase, use it to as a key to get the value of the self._headers dictionary,
  try,
  derive the class Command from the AppCommand base class.
  if index is not an instance of six.integer_types or tuple type,
  append to errors list a dictionary created with 2 etries, if escape_html is true, return value of the function escape
  define the function random with an argument value.
  call the method to_python with an argument value from the base class of the DateField class, return the result.
  and help is a string 'Tells Django to use plain Python, not IPython or bpython.'.   call the method parser.add_argument with 4 arguments: string '--no-startup', action as a string 'store_true',
  define the method next with an argument self.
  call the function _add_doc with 2 arguments: reraise and string """Reraise an exception.""".
  from threading import RLock.
  derive the class MultiPartParser from the object base class.
  child_nodelists is a tuple with 2 initial elements: strings 'nodelist_true' and 'nodelist_false'.
  call the method writer.as_string, write the result to file fh.
  if call to the method self.L evaluates to true, and result of the call to the method self.data.month is greater than integer 2,
  if HTMLParseError exception is caught,
  and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) or y.eval(context) is True, for 'or',   result of the function inflix called with 2 arguments, integer 7,   and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) and y.eval(context) is True for 'and',   result of the function prefix called with 2 arguments, integer 8,   and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is True for 'not',   result of the function inflix called with 2 arguments, integer 9,   and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is contained in y.eval(context) for 'in',   result of the function inflix called with 2 arguments, integer 9,   and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is not contained in y.eval(context),   for 'not in', result of the function inflix called with 2 arguments, integer 10,   and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) equals y.eval(context) for '=',   result of the function inflix called with 2 arguments, integer 10,   and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) equals y.eval(context) for '==',   result of the function inflix called with 2 arguments, integer 10,   and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) doesnt equals y.eval(context) for '!=',   result of the function inflix called with 2 arguments, integer 10 and,   lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) is greater than y.eval(context) for '>',   result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y,   returns boolean True if x.eval(context) is greater than or equal to y.eval(context) for '>=',   result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y,   returns boolean True if x.eval(context) is smaller than y.eval(context) for '<',   result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y,   returns boolean True if x.eval(context) is smaller than or equal to y.eval(context) for '<=',   call the function OPERATORS.items, for every key and op in result,
  if six.PY2 is true,
  substitute Paginator for QuerySetPaginator.
  call the function lazy with 2 arguments: func and unpacked list resultclasses, call the result with 2 arguments: unpacked list args,
  call the function _generate_cache_key with request, request.method, an empty list and key_prefix as arguments, return the result.
  if length of bits equals integer 4,
  from xml.sax.saxutils import XMLGenerator into default name space.
  if value under the 'method' key of the options dictionary equals to string 'perfork' or 'fork',
  substitute digits for self.digits.
  for every i in sequence of integers, from 0 to the result of the method self.total_form_count,
  raise an ValidationError exception with 2 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,
  do not perform the following only if bits.scheme and bits.netloc are both true,
  call the function get_language, substitute the result for lang.
  call the method value.ljust with an argument, arg converted into a integer, return the result.
  if not,
  from importlib import import_module into default name space.
  step is an string 'any'.
  delete element under 'warning' key of kwargs dictionary.
  derive the class AutoEscapeControlNode from Node base class.
  return the result.   otherwise if value is an instance of decimal.Decimal, float or six.integer_types,
  call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for default_translation.
  from django.utils.functional import cached_property into default name space.
  decrement end by one.
  call the method autoreload.main with 3 arguments: self.inner_run, None and options.
  if value under the 'indent' key of the self.options dictionary is true,
  define the method add_root_elements with 2 arguments self and handler.
  evaluate the function bytes with the argument s, and return the result.
  if indent is true,
  from django.core.management.templates import TemplateCommand into default name space.
  compile the regex from the raw string "((^|[^%])(%%)*%[sy])", substitute the result for _illegal_formatting.
  return boolean False.
  from django.template.base import TemplateDoesNotExist into default name space.
  if not,
  if re.error, renamed to e, is caught,
  call the function force_text with an argument ttl, substitute the result for ttl.
  substitute self for value under the 'block' key of context dictionary.
  get the value under the key key of the self.cookies dictionary, substitute path for 'path' key of the returned dictionary.
  if _cookie_allows_colon_in_names is False,
  do nothing.
  if value under the header key of the self.META dictionary is equal to value,
  define the method render with 2 arguments self and context.
  if ImportError exception is caught,
  if meta is None,
  if self.match is None or call to the method self.match_re.search with an argument f, evaluated to true,
  call the method __init__ from the base class of the class BaseInlineFormSet, with 5 arguments: data, files, prefix set to prefix,
  add self.default_validators and validators, substitute the result for self.validators.
  derive class WindowsError from Exception base class.
  join the result in a string separated by whitespaces, substitute it for s.   return s.
  self.style.MIGRATE_HEADING, write the result to self.stdout.   write string "  You should commit this migration but leave the old ones in place;" to self.stdout.
  call the function sys.getfilesystemencoding if it evaluates to true, substitute its result for fs_encoding,
  if not,
  increment stats dictionary value under the HITS key by integer 1.
  define the method validate_unique with an argument self.
  define the method __init__ with 3 arguments self and unpacked list args and unpacked dictionary kwargs.
  with '%s' substituted for migration_name and app_label, respectively, as arguments.   targets is a list containing tuple with two elements, app_label and migration.name.
  hard copy list self.dicts to duplicate.dicts.
  substitute filepath for self.filepath.
  call the method zipfile.ZipFile.read with 2 arguments: self and first element of the result of the self.namelist method.
  call the method imatch.group with an argument integer 2, use the result as an argument for the call to the method context_re.match,
  break from the loop execution.
  do nothing.
  if y and m and d are all true,
  call the method self.reader_leaves.
  put the double qoutes around encoded.
  if not,
  call the function format_html with 2 arguments: string '<input{0} />' and result of the function flatatt,
  call the method self.create_token with 3 arguments: self.template_string list elements from start index to end index,
  call the private dict.__setitem__ method with self class instance, key and M as arguments.
  if extend is true,
  use the result as a key to get the value from the connections dictionary, substitute the result for connection.   call the function check_for_migrations with 2 arguments: app_config and connection.
  from django.core.urlresolvers import reverse, NoReverseMatch.
  decrement self.active_writers by integer 1,
  for every app_label in bad_app_labels,
  if ignore is true and field_name is not contained in model_fields,
  define the method _should_delete_form with an argument self.
  define the method __new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs.
  convert arg to an integer.
  try,
  return the value under the language_code key of the self._namespace_dict dictionary.
  call the method handler.receive_data_chunk with 2 arguments: chunk and i-th element of counters, substitute the result for chunk.
  otherwise if, type of s doesnt equal to six.text_type,
  if context_instance is false,
  call the method self.translate_token with an argument token, append the result to mapped_tokens.
  return boolean False,
  if GET_override is not None, or otherwise generated with the call to the function pformat with an argument request.GET.   if Exception exception is caught,
  return an instance of EscapeText, created with an argument s.
  define the function removetags with 2 arguments value and arg.
  replace '%s' in string "Running post-migrate handlers for application %s" with app_config.label, print it to the standard output.
   if self.initial is true and 'initial' key is not contained in kwargs,
  of the _DJANGO_DEPRECATED_LOCALES dictionary, RemovedInDjango19Warning and stacklevel set to integer 2.   call the function translation with an argument language, substitute the result for _active.value.
  substitute the middleware.   define the function _decorator with an argument view_func.
  call the method self.close.
  call the function time.strftime with 2 arguments: fmt and and timetuple without the first element,
  define the function m2m_convert with an argument value.
  if props is true,
  integer 0 and integer 0.   try,
  return msgs.
  substitute the value under the 'outlog' key of options dictionary for value under the 'out_log' key of daemon_kwargs dictionary.
  decorator function register.filter with an argument is_safe set to boolean True.
  if first element of sys.version_info equals integer 3, PY3 is boolean True, otherwise it is boolean False.
  data is an empty dictionary,
  return an empty dictionary.
  if valu is an instance of list type,
  and integer 60, substitute the result for timezone.   divide timezone by integer 60, substitute the quotient of the division for hour and reminder for minute.
  define the method has_key with 2 arguments: self and key.
  call the method gettext_module.GNUTranslations.__init__ with an argument self.
  '<tr%(html_class_attr)s><th>%(label)s</th><td>%(errors)s%(field)s%(help_text)s</td></tr>', error_row set to a a string,   '<tr><td colspan="2">%s</td></tr>', row_ender set to a string '</td></tr>', help_text_html set to a string,   '<br /><span class="helptext">%s</span>' and errors_on_separate_row set to boolean False.   define the method as_ul with an argument self.
  call the cursor.close method.
  'Enter a number.' for 'invalid', return value of the function ungettext_lazy called with 3 string arguments:   'Ensure that there are no more than %(max)s digit in total.', 'Ensure that there are no more than %(max)s digits in total.',   and 'max' for 'max_digits', return value of the function ungettext_lazy called with 3 string arguments:   'Ensure that there are no more than %(max)s decimal place.', 'Ensure that there are no more than %(max)s decimal places.' and 'max',   for 'max_decimal_places' and return value of the function ungettext_lazy called with 3 string arguments:   'Ensure that there are no more than %(max)s digit before the decimal point.',   'Ensure that there are no more than %(max)s digits before the decimal point.' and 'max' for 'max_whole_digits'.   define the method __init__ with 7 arguments: self, max_value set to None, min_value set to None, max_digits set to None,
  BASE2_ALPHABET is a string '01'.
  return value under the 'forloop' key of the context dictionary.
  call the function formatdate with 2 arguments: epoch_seconds and usegmt set to boolean True, return the result.
  define the method __init__ with arguments: self, fields set to an empty tuple, unpacked list args and unpacked dictionary kwargs.
  call the function date with 2 arguments: result of the call to the function datetime.now with an argument tz set to tzinfo,
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  call the function allow_lazy with an argument words, substitute the result for words.
  call the method handler.addQuickElement with 2 arguments: string 'description' and value under the 'description' key of the self.feed dictionary.
  if LookupError exception is caught,
  if second element of k is None,
  define the function infix with 2 arguments bp and func.
  self.resolver_match is None.
  try,
  if settings.USE_L10N is true,
  define the method getvalue with an argument self.
  "arguments '%s' not found. %d pattern(s) tried: %s", replace '%s' with lookup_view_s, args, kwargs, length of patterns, patterns,  and respectively.   derive the class LocaleRegexURLResolver with RegexURLResolver as base class.
  return id_.
  processors is an empty list.
  define the method build_attrs with 3 arguments: self, extra_attrs set to None and unpacked dictionary kwargs.
  call the method self.fk.rel.to, substitute the result for self.instance.
  call the traceback.extract_tb method with argument tb, substitute the first element of last row of the result to filename.
  call the method field_node.getElementsByTagName with an argument string 'None', if it evaluates to true,
  import module socket.
  called with arguments: filename and pattern.   call the function ignore with an argument pattern, for every pattern in ignore_patterns,
  substitute node.source for e.django_template_source.
  return a string "<%s: %s>" formated with self.__class__.__name__,
  for i in self._deleted_form_indexes append i-th element of self.forms into a list, return the resulting list.
  if data is an instance of MultiValueDict or MergeDict class,
  substitute auto_id for value under the 'id' key of the attrs dictionary.
  call the function isabs with an argument path, if it evaluates to false,
  if errors is true,
  if ch equals a string '?',
  call the method t.to_language, return the result.
  filename and e.   split the_path at the '/' character, substitute last element of the result for used_name.
  skip this loop iteration,
  call the function allow_lazy with 2 arguments: wrap and six.text_type, substitute the result for wrap.
  if resolved_path is true,
  unique_check is a list with elements field, for every field in unique_check if field is not equal to self.fk.name.
  call the method self.build_attrs with 3 arguments: attrs, type as a string 'checkbox', name as name, substitute the result for final_attrs.
  if self.max_length is not None,
  create directories from the elements in filename.
  save_as_new set to boolean False, prefix set to None, queryset set to None and unpacked dictionary kwargs.   if instance is None,
  try,
  call the function os.path.basename with an arguments path, substitute the result for filename.
  from django.utils import six into default name space.
  subtract year from integer 2000, divide the result by integer 28, floor the result, multiply it with 28 and increment by year,
  define the method _get_page with self class instance, unpacked list args and unpacked dictionary kwargs as arguments.
  RAW is a string "raw".
  from __future__ import unicode_literals into default name space.
  call the self.get_dum_object method with an argument obj, use the result as an argument for the self.objects.append method.
  return select_html.
  call the function six.text_type with s as an argument, substitute the result for s.
  call the method resolved_path.append with an argument ns.
  define the method __bool__ with an argument self.
  if path is an instance of six.string_types,
  if AttributeError exception is caught,
  kw is a list with 3 elements: d.year, d.month and d.day.
  link is a list with 4 elements: last, root, key and result.
  if not,
  _CacheInfo is an instance of namedtuple class created with 2 arguments: string "CacheInfo" and a list with 4 elements: string 'hits',
  decorator function register.filter with an argument is_safe set to boolean True.
  substitute asvar for self.asvar.
  derive the class InvalidPage from the Exception base class.
  operations is an empty list.
  define the function b with an argument s.
  define the function truncatechars with 2 arguments value and arg.
  call the function reloader with wrapped_main_func, args and kwargs as arguments.
  define the method __iter__ with an argument self.
  replace every occurrence of raw string '\\' in the result with string '\\', return the result.   call the function allow_lazy with an argument unescape_string_literal, substitute the result for unescape_string_literal.
  break the loop execution.
  zbuf is an instance of BytesIO class.
  derive the class ContextPopException from the Exception base class.
  define the method __mod__ with 2 arguments: self and rhs.
  return string "<Block Node: %s. Contents: %r>", where '%s' is replaced with self.name and '%r' with self.nodelist.
  if instance.pk is None,
  if safe is true,
  define the method close with an argument self.
  return obj.
  append ':' and ipv4_address to result.
  decorator function register.filter with 3 arguments string "slice", is_safe set to boolean True and needs_autoescape set to True.
  if not,
  for every sql in return value of the function connection.creation.sql_for_pending_references called with arguments: model, style,
  if TypeError or ValueError exceptions are caught,
  substitute func for value under the '_setupfunc' key of the self.__dict__ dictionary.
  call the method operator.attrgetter with an argument _func_closure, substitute the result for get_method_closure.
  call the method code.interact with an argument local set to imported_objects.
  "misses", "maxsize" and "currsize".   derive class _HashedSeq from list base class.
  substitute smart_bytes for smart_str.
  evaluate method self.literal_regex.match with an argument domain_part, substitute the result for literal_match.
  obj._constructor_args is a tuple with 2 elements: args and kwargs.
  call the function get_urlconf with an argument urlconf.
  if not,
  substitute '%s' in string "#. #-#-#-#-#  %s.pot (PACKAGE VERSION)  #-#-#-#-#\n" with self.domain,
  table_names is an empty list.
  call the method context.push with an argument var set to output, with the result perform,
  call the method self.make_writeable with an argument new_path.
  from django.utils.ipv6 import clean_ipv6_address into default name space.
  define the method __repr__ with an argument self.
  append str_hidden to output.
  from django.conf import settings into default name space.
  default_error_messages is an dictionary with an initial entry: result of the function _ called with an argument string,
  otherwise if char is contained in string 'bEFMmNn',
  if t.token_type equals TOKEN_BLOCK,
  if kwarg is true,
  try,
  call the function six.reraise with 3 arguments: UnreadablePostError, UnreadablePostError instantiated with unpacked list e.args,
  sum m and class Media created with definition, return the result.
  call the method self.create_nodelist, substitute the result for nodelist.
  define the function lazy_number with 4 arguments: func, resultclass, number set to None and unpacked dictionary kwargs.
  substitute '%s' in string "No changes detected in apps '%s'" with the app_labels joined into a string, separated by string "', '",
  call the function is_aware with an argument o, if it evaluates to true,
  derive the class BaseFormSet from the object base class.
  if settings.configured,
  skip this loop iteration.
  return an empty string.
  from django.db.migrations.executor import MigrationExecutor into default name space.
  call the method handler.startElement with 2 arguments: string 'author' and an empty dictionary.
  otherwise if name starts with a string 'string',
  call the method os.dup2 with 2 arguments: result of the method si.fileno and result of the method sys.stdin.fileno.
  if not,
  call the function get_connection with 2 arguments: backend set to self.email_backend and fail_silently set to boolean True.
  define the method usage with 2 argument: self and subcommand.
  otherwise if o is an instance of decimal.Decimal object,
  if init_path is not a file,
  append list containing pattern to tried.
  if self has an attribute 'clean_%s', where '%s' is replaced with name,
  import module types.
  self.empty_label is None.
  string 'ascii' and errors set to a string 'replace', return the result.   define the method render with 2 arguments: self and context.
  create a tuple out of types of v, for every k and v in sorted_items, extend key tuple with the result.
  substitute value for self.value.
  field.rel.__class__.__name__ for 'rel' and return value of the function smart_text with an argument field.rel.to._meta for 'to'.   derive the class Deserializer from the base.Deserializer base class.
  call the function update_wrapper with 2 arguments: _wrapper and func.
  call the function validate_ipv6_address with an argument value.
  from collections import OrderedDict into default name space.
  call the function re.compile with 2 arguments: raw string '^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$',
  if 'Location' is contained in response and function request.get_host evaluates to True,
  return an instance of metaclass class, created with 3 arguments: cls.__name__, cls.__bases__ and orig_vars.
  otherwise if name is contained in lib.filters,
  BLOCK_CONTEXT_KEY is a strign 'block_context'.
  replace every occurrence of string 'charset=CHARSET' for string  'charset=UTF-8' in msgs, substitute the result for msgs.
  help is a string "Runs this project as a FastCGI application. Requires flup.".
  call the function _trans.check_for_language with an argument lang_code, return the result.
  from django.utils.html import conditional_escape, escapejs, escape, urlize as _urlize, linebreaks, strip_tags, avoid_wrapping,
  get attribute 'print' from the moves.builtins object, if it exists substitute it for print_, if not print_ is None.
  if value has an attribute 'close',
  call the method re.compile with 2 arguments: raw string """^(?: (?P<addr> (?P<ipv4>\d{1,3}(?:\.\d{1,3}){3}) |"""
  define the method load_template with 3 arguments: self, template_name and template_dirs set to None.
  use it as an argument for the call to the force_str function, return the result.   define the method add_prefix with arguments self and prefix.
  pending_references is a empty dictionary.
  if length of fks_to_parent equals integer 1.
  call the method writer.as_string, write the result to fh file.
  substitute s without the first element for s.
  define the method n with an argument self.
  if self.merge and conflicts are both true,
  if fields is true and f.name is not contained in fields,
  remove first element of text.
  otherwise if field.rel is true and field.rel is an instance of the models.ManyToOneRel object,
  call the getvalue method of the base class of the PythonSerializer class, return the result.
  if errors is None,
  where '%s' is replaced with app_or_project and extra_files joined into a string, separated by a string ', '.   append string '_name' to app_or_project, substitute it for base_name.
  define the method to_python with arguments self and value.
  call the method __init__ with an argument data, from the base class of the class DictWrapper.
  call the method pytz.timezone with an argument settings.TIME_ZONE, substitute the result for _localtime.
  call the function func with an argument path.
  use the result as an argument for the call to the method filterer.addFilter.   if StandardError, renamed to e, exception is caught,
  return value under the name key of the data dictionary, if it doesnt exists, return None.
  substitute the value under the fieldname key of the self.fields dictionary for field.
  call the method operator.attrgetter with an argument _func_defaults, substitute the result for get_method_defaults.
  return None.
  if field is not contained in self.fields,
  take elements of token_string from second to second last element and strip the whitespaces surrounding the result,
  define the method _find_boundary with an arguments self, data and eof set to boolean False.
  for every c in reversed order of self.__class__.__mro__,
  define the method render with 2 arguments: self and context.
  substitute email_backend for self.email_backend.
  trans_real._default is None.
  existing_headers is a set of lowercase headers for every header in vary_headers.
  return initial_forms.
  if not,
  if ch is contained in string '*?+',
  call the function _ with an argument string 'noon', return the result.
  skip this loop iteration.
  raise an CommandError exception with an argument string "couldn't download URL %s to %s: %s", where '%s' is replaced with url,
  called with an argument value and value.   register.tag decorator function with an argument 'if',
  call the function io.open with 3 arguments: potfile, string 'a' and encoding set to string 'utf-8' as arguments,
  define the method Y with an argument self.
  and fileobj set to zbuf.   call the method zfile.write with an argument s.
  return result.
  if app_config.models_module is None,
  code set to string 'invalid_pk_value and params with an entry: pk for 'pk'.   call the method self.queryset.filter with an argument, unpacked dictionary with an entry: value for string '__in' appended to key,
  call the method self.error_class with an argument list containing results of the function conditional_escape,
  if parse_until is None,
  import module warnings.
  derive the class CheckboxFieldRenderer from the ChoiceFieldRenderer base class.
  if cls._delegate_bytes and cls._delegate_text are both false, raise an error, with an argument string "Cannot call lazy() with both bytes and text return types.".
  if bf.label is true,
  for every name in pattern.reverse_dict,
  if settings.TEMPLATE_DEBUG and display_name are both true,
  call the function mark_safe with an argument result, return it.
  call the method node.render with an argument context, append the result to the nodelist.
  define the function parse_cookie with cookie as the argument.
  call the method lookups.appendlist with 2 arguments: pattern.name and a tuple containing 3 elements: bits, p_pattern,
  if not substitute field.initial for initial_value.   if initial_value is an callable object,
  try,
  substitute origin for self.origin.
  RemovedInDjango19Warning and stacklevel as integer 2.   try,
  for every pattern in reversed list self.url_patterns,
  call the method block_context.add_blocks with an argument self.block.
  raise TemplateSyntaxError(
  from django.utils import six into default name space.
  try,
  call the function blankout with 2 arguments: p and 'F', write the result to out.
  from django.template.context import BaseContext, Context, RequestContext and ContextPopException into default namespace.
  call the method threading.Semaphore with an argument integer 0, substitute the result for self.can_read.
  self.verbatim is boolean False.
  from django.forms.formsets import BaseFormSet and formset_factory into default name space.
  from django.utils.translation import ugettext_lazy as _ and pgettext_lazy into default name space.
  from django.conf import settings into default name space.
  default_error_messages is an dictionary with an entry: return value of the function _ called with an argument,
  substitute '%s' in string '%s-%s-%s' with y,m and d, return the result.
  convert value into an floating point number, substitute it for value.
  define the method id_for_label with 2 arguments: self and id.
  if doublecolon_len is greater than best_doublecolon_len,
  key, encoding and errors set to string 'replace', and return value of the function force_text with 3 arguments:   value, encoding and errors set to string 'replace'.   call the method mutable substitute for self._mutable.
  if register_to is true,
  define the method indent with argument self and level.
  upload_handlers.setter decorator.
  substitute the result for formatted_subject.   return first 989 elements of formatted_subject.
  import module re.
  call the method router.get_migratable_models with arguments app_config and connection.alias.
  if lookup is false,
  call the function force_text with an argument value, call the method translate on the result, with an argument _js_escapes,
  evaluate the function force_str with key as the argument, substitute it for key.
  for every name in formatters,
  derive the class RequireDebugFalse from logging.Filter base class.
  dest as a string 'locale', action as a string 'append' and help as a string,   'Creates or updates the message files for the given locale(s) (e.g. pt_BR). Can be used multiple times.'.   call the method parser.add_argument with 5 arguments: string '--exclude', string '-x', default as a empty list,
  substitute app_name for self.app_name.
  increment i by integer 1.
  if self.verbosity is greater than integer 0,
  call the method self.nodelist_true.render with an argument context, assign the result to compare_to and nodelist_true_output.
  call the method self.instance.full_clean with 2 arguments: exclude set to exclude and validate_unique set to boolean False.
  call the function bytes with an argument value, return the result.
  call the function write_pot_file with 2 arguments: potfile and msgs.
  call the method os.environ.get with 2 arguments: strings 'PATHEXT' and '.COM;.EXE;.BAT;.CMD', split the result at os.pathsep, substitute it for pathext.
  _urllib_request_moved_attributes is an list with 33 elements, all of them are the results of the call to the function MovedAttribute with 3 different string arguments.
  try,
  call the method handler.addQuickElement with 3 arguments: string 'atom:link', None and dictionary with 2 entries: 'self' for 'rel',
  if not,
  call the function token.split_contents, substitute the result without the first element for bits.
  return an empty string.
  once split at the '.' value under the 'ENGINE' key of the connection.settings_dict dictionary, substitute last element of the result for backend_name.
  if ImportError exception is caught,
  derive the class URLValidator form the RegexValidator base class.
  call the method qs.using with an argument form.instance._state.db, substitute the result for qs.
  return lookup_view
  if pattern.app_name is true,
  for every app_dir in app_dirs,
  self.choices is an empty list.
  return result.
  call the function loader with arguments name and dirs, assign the result to template and display_name, respectively.
  call the function exhaust with an argument field_stream.
  from django.utils.encoding import force_text into default name space.
  call the salted_hmac with 3 arguments: salt, value and key, call the digest method on the result,
  try,
  input_type is a string 'checkbox'.
  replace all occurrences of symbol '_' in string k with symbol '-', use new string as key to find a value in dictionary cc,
  return klass.
  divide absolute offset by module 60, use the result to format string '%02d%02d', substitute it for hhmm.
  raise a ValidationError exception with 2 arguments: return value of the function _ called with an argument string 'Enter a valid IPv6 address.', and code set to string 'invalid'.
  raise an ValueError exception with an argument string 'Unable to add filter %r: %s' formated with f and e.
  register is an instance of Library class.
  if not,
  remove dirname key from dirs.
  result of the call to the method v.resolve with an argument context,   for result of the function smart_text called with 2 arguments k and string 'ascii'.   call the method self.view_name.resolve with an argument context, substitute the result for view_name.
  requires_system_checks is boolean False.
  call the method self._text_chars with 4 arguments: length, truncate, text and truncate_len, return the result.
  call the method parser.add_argument with 5 arguments: string '--noinput', action set to string 'store_false',
  if field.rel.to._default_manager has an attribute 'get_by_natural_key',
  if not,
  define the method self and blocks.
  from django.forms import Form into default name space.
  from django.utils.encoding import smart_text,  force_text and python_2_unicode_compatible into default name space.
  otherwise if o is an instance of datetime.date object,
  if self.negated,
  self.callback is None.
  call the function get_language, substitute the result for lang.
  return self.
  try,
  define the method __init__ with 2 arguments: self and attrs set to None.
  if value is contained in self.empty_values,
  remove the 'stream' key from the options dictionary and substitute it for self.stream,
  define the function _lazy_proxy_unpickle with 4 arguments: func, args, kwargs and unpacked list resultclasses.
  call the method stream.unget with an argument chunk.
  try,
  and unpacked dictionary kwargs, return the result.   define the function assertRaisesRegex with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  call the self.stdout.write method with string "    Installing custom SQL for %s.%s model\n" as argument,
  in the resulting string replace all occurrences of ' ' with '_' and append it to the end of cache_key.   return cache_key.
  return boolean True.
  if not,
  call the function trim_whitespace with an argument message, substitute the result for message.
  decorator stringfilter,
  from django.db import models into default namespace.
  call the function os.unlink with an argument work_file.
  call the function re.compile with arguments regex and re.UNICODE, substitute the result for compiled_regex.
  kwargs is a dictionary with 17 entries: form for 'form', formfield_callback for 'formfield_callback', formset for 'formset',
  call the method parser.add_library with an argument lib.
  mime_type is a string 'application/rss+xml; charset=utf-8'.
  define the method render with 2 arguments: self and context.
  replace '%s' with: elements of last element of parts joined into a string and last element of parts.   if not,
  join elements of parts into a string, separated with '.', substitute it for name.
  return the string '<Page %s of %s>', with occurrences of '%s' replaced by self.number and self.paginator.num_pages, respectively.
  s is an instance of the Select class, created with choices set to choices.
  if field.serialize is true,
  define the function _parse_header_params with an argument s.
  if settings.TEMPLATE_DEBUG is true,
  call the function time.strftime with 2 arguments: fmt and and timetuple without the first element,
  help is a string "Runs over the entire source tree of the current directory and "
  substitute default for value under the key key of self dictionary.
  self.upload_handlers is an instance of ImmutableList, created with 2 arguments: self.upload_handlers,
  split first element of hextet into parts by ':', append them to new_ip.
  if safe is not None,
  substitute string " " for space.
  get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.
  cls is None.
  if 'error_messages' is contained in kwargs,
  define the function phone2numeric with an argument phone.
  if length of bits is lesser than integer 2,
  if s is not an instance of the object six.string_types,
  is_compressed is boolean False.
  define the function timesince_filter with 2 arguments value and arg set to None.
  call the function _helper with 2 arguments: sublist_item and tabs incremented by 1, substitute the result for sublist.
  if not,
  convert number to string, if first element equals to sign,
  if format is not contained in _serializers,
  call the method optimizer.optimize with 2 arguments operations and migration.app_label, substitute the result for new_operations.
  call the method token.split_contents, substitute results without the first element for bits.
  call the method formfield.queryset.complex_filter with an argument limit_choices_to, substitute the result for formfield.queryset.
  call the function exhaust with an argument self._input_data.
  substitute the result for starttag_re.   call the function re.compile with an argument string '</%s>' formated with tags_re, substitute the result for endtag_re.
  call the method formfield_callback with 2 arguments: f and unpacked dictionary kwargs, substitute the result for formfield.
  from django.utils.six.moves.urllib.parse import urljoin into default name space.
  for every obj in result of the call to the method self.queryset.all,
  _win is a tuple containing 1 initial boolean: True is sys.platform equals to string "win32", False otherwise.
  if forms_valid is true and call to the method self.non_form_errors, evaluates to false, return boolean True, otherwise return False.
  if param is true,
  output is a list containing an entry: result of the function format_html called with 2 arguments:
  raise an self.error exception with 2 arguments: token and string  "Invalid block tag: '%s', expected %s",
  write it to self.stdout.   for every migration in migrations_to_squash,
  call function _checkLevel with an argument level, use the result as an argument for the method result.setLevel.
  substitute target_var for self.target_var.
  call the smart_text function with 3 arguments: field_value, value under the 'encoding' key of the options dictionary or,
  define the method getvalue with an argument self.
  define the function calculate_app_template_dirs.
  if not,
  encode is an lambda function with arguments k and v, return value is string '%s=%s', where '%s' is replaced with:
  form is an instance of ManagementForm class, created with 3 arguments: self.data, auto_id as self.auto_id and prefix as self.prefix.
  substitute logging.getLogger for getLogger.
  if s is an instance of SafeData.
  call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'test_label', nargs set to string '*',
  use the result as an key to get the value of the form.data dictionary, assign it value None.   use return value of the self.fk.get_attname as the name of the attribute of form.instance object to set, set it to self.instance.pk.
  from django.forms.widgets import HiddenInput into default name space.
  define the method __next__ with an argument self.
  message is a string 'use only numbers, letters and underscores'.
  define the method __init__ with 4 arguments: self, children set to None, connector set to None and negated set to boolean False.
  call the smart_text function with 2 arguments: return value of the obj._get_pk_val function and string_only set to boolean True,
  instantiate class X, get its length.
  and for every _, nodelist in self.conditions_nodelists.   define the method render with 2 arguments: self and context.
  import module datetime.
  define the method validate_unique with an argument self.
  call the method cmatch.group with an argument integer 1, format with the result string ' _(%s) ', write it to out.
  call the function strftime with 2 arguments: self and fmt, return the result.
  if self._wrapped is empty,
  define the method  remove_potfiles with an argument self.
  call the function get_format with an argument string 'DATE_INPUT_FORMATS', substitute the first element of the result for input_format.
  import module django.
  raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,
  call the function os.path.dirname with an argument writer.path, substitute the result for migrations_directory.
  define the method __init__ with 2 arguments: self and content.
  resource_string is None.
  separated with result of the function conditional_escape with an argument sep, for every args in args_generator,   use the result as an argument for the call to the function mark_safe, return the result.   define the function linebreaks with 2 arguments: value and autoescape set to boolean False.
  otherwise if '\\' is contained in path,
  call the function new_method_proxy with an argument hash, substitute the result for __hash__.
  substitute it for self.allow_empty_file, if not self.allow_empty_file is boolean False.   call the method __init__ from the base class of the FileField class, with 2 arguments: unpacked list args and unpacked dictionary.
  raise an exception.
  call the method node.getElementsByTagName with an argument string 'None', if it evaluates to true,
  call the function field.value_to_string with an argument obj, substitute the result for value under the field.name key of self._current dictionary.
  call the function base64.b64decode with an argument raw_data, substitute the result for data.
  raise an CommandError exception with an argument string '"%s" is not a valid port number or address:port pair.',
  call the method self.get_renderer with 4 arguments: name, value, attrs and choices, for every widget in result,
  if not,
  sum index and length of self._boundary, substitute the result for next.
  call the method tempfile.mkdtemp with 2 arguments: prefix set to prefix, suffix set to string '_extract', substitute the result for tempdir.
  define the method items with an argument self.
  token is an instance of Token class, created with 2 arguments: TOKEN_VAR,
  skip this loop iteration,
  define the method add_arguments with 2 arguments: self and parser.
  kwargs is a dictionary created with tuples with 2 elements: k and value under k key of config dictionary,
  define the method common_logger_config with 4 arguments: self, logger, config and incremental set to boolean False.
  unpacked list field_value as an argument, substitute the result for value of under the field.attname key of the data dictionary.   if not,
  default set to boolean False and help  set to string 'Tells Django to stop running the test suite after first failed test.'.   call the method parser.add_argument with 4 arguments: string '--testrunner', action set to string 'store', dest set to 'testrunner',
  call the function force_str with an argument format_type, substitute the result for format_type.
  return an empty string.
  get 'clean_%s', where '%s' is replaced with name' attribute of the self object, call the result as an function,
  try,
  call the function timezone.make_aware with arguments value and current_timezone, return the result.
  if _locs_ is None,
  if value is false,
  dest as a string 'no_startup' and help as a string 'When using plain Python, ignore the PYTHONSTARTUP environment variable and ~/.pythonrc.py script.'.   call the method parser.add_argument with 5 arguments: string '-i', string '--interface', choices set to string self.shells,
  return the instance of DefusedExpatParser class.
  if the key doesnt exists call the six.String function and substitute the result for self.stream.   remove the 'fields' key from the options dictionary and substitute it for self.selected_fields,
  if not,
  write ',' to the self.stream file stream.
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  return the length of self.object_list.
  call the object d with arguments stream_or_string and unpacked dictionary options, return the result.
  output is an empty list.
  self._post is an instance of QueryDict class created with an empty string as argument.
  call the method self._render with an argument context, return the result,
  raise an ValueError exception with an argument string 'Unable to set formatter %r: %s' formated with formatter and e.
  if key is not contained in self,
  call the function self._truncate_html with 5 arguments: length, truncate, text, truncate_len and boolean False, return the result.
  output is an empty list.
  call the function func with 2 arguments: context and self.first, return the result.
  call the method token.split_contents, substitute the result for bits.
  call the method _trans.gettext_noop with an argument message.
  name for base_name, top_dir for base_directory and docs_version for 'docs_version' and autoescape set to boolean False.   from django.conf import settings into a default name space,
  call the method handler.addQuickElement with 2 arguments: string 'copyright' and value under the 'feed_copyright' key of the self.feed dictionary.
  convert value into a iterator, substitute the result for self._iterator.
  delete the value under the header converted to lowercase key of the self._headers dictionary.
  from module __future__ import unicode_literals to default name space.
  derive the class RequestContext from the Context base class.
  and self.ns for "xmlns".   if not,
  if value is an instance of str type,
  try,
  define the method load_template_source with 3 arguments: self, template_name, template_dirs set to None.
  if field.serialize is true,
  from django.utils.jslex import prepare_js_for_gettext into default name space.
  on the result call the method encode with the arguments encoding and errors, return the result.   if strings_only and boolean return value of the call to the function is_protected_type for argument s are boolean True,
  VARIABLE_TAG_END is a string '}}'.
  if attr is contained in flags,
  convert provided into a list and substitute it for provided.
  define the method _has_changed with 3 arguments: self, initial and data.
  return palette.
  try,
  if parse_until is true,
  return boolean True, otherwise return boolean False.   define the function is_naive with an argument value.
  get the value under the 'keep_pot' key of the options dictionary, substitute it for self.keep_pot.
  call the method parser.next_token, substitute the result for token.
  split file by ',' character, apply on its every element a lambda function which takes an argument x,
  get the element of chunks at the (i+1)-the index, assign it to the seconds2 and name2, respectively.
  if AttributeError exception is caught,
  substitute conditional_escape for escaper.
  substitute nodelist_loop for self.nodelist_loop.
  call the function re.compile with an argument raw string "(?:(\w+)=)?(.+)", substitute the result for kwarg_re.
  substitute its __name__ field for function name, if it doesnt exists substitute func.__name__ for function_name.   call the function generic_tag_compiler, params set to params, varargs set to varargs, varkw set to varkw, defaults set to defaults,
  try,
  if not,
  return an empty dictionary.
  if self.field.choice_cache is None,
  decorator stringfilter,
  _empty_value is an empty list.
  call the method __init__ from the base class of the class SortedDict, called with an argument data.
  call the method self._iteritems, for every k and v in the result,
  call the method httpd.set_app with an argument wsgi_handler.
  raise an ValueError with an argument string 'ModelForm has no model class specified.'.
  substitute self.choices for self.widget.choices.
  define the method W with an argument self.
   if m is true,
  if not,
  while end is greater than integer 0 and return value of the s.count called with 3 arguments: an empty string, integer 0 and end,
  call the function force_str with raw data as an argument and substitute it for rawdata.
  append tok to c.
  define the method __new__ with 4 arguments: mcs, name, bases and attrs.
  call the method t.render with an argument, instance of Context class, created with an argument dictionary, return the result.
  if loader is an instance of six.string_types,
  call the method t.led with 2 arguments left and self.
  call the function get_format with an argument string 'DATE_FORMAT', substitute it for fmt.
  if app_label is not contained in executor.loader.migrated_apps,
  get attribute class_name form the module object, return it.
  call the method handler.addQuickElement with 2 arguments: string 'id' and unique_id.
  if form.errors is true,
  call the self.stderr.write method with string "    Failed to install custom SQL for %s.%s model: %s\n" as argument,
  for every bit in bits,
  f _serializers is false,
  substitute initial_id for self.auto_id.
  and data, if it evaluates to true,    return boolean  True.
  if not,
  substitute _urllib_error_moved_attributes for Module_six_moves_urllib_error._moved_attributes.
  try,
  self.xml is a instance of SimplerXMLGenerator class created with 2 arguments: self.stream and value under the 'encoding' key of the
  evaluate the member method of s, encode with the encoding and errors as the arguments, return the result.
  define the __init__ method with 4 arguments: self, message set to None, code set to None and whitelist set to None.
  call the method _trans.ungettext with 3 arguments singular, plural and number.
  if PY3 is true,
  define the method render with 2 arguments: self and context.
  substitute cls.__text_cast for cls.__str__.
  define the function iriencode with an argument value.
  substitute parent_instance for self.parent_instance.
  use global variable _supported.
  substitute the result for result.   try,
  call the method self.xml.endElement with an argument string 'field'.
  try,
  if Resolver404 exception is caught,
  call the method self.loader with 2 arguments: self.loadname and self.dirs, return the first element of the result.
  call the method self.can_write.release.
  if nodelist_empty is None,
  call the function from_current_timezone with an argument, return the result.
  if '.' is not contained in str_number,
  define the method clean with 2 arguments self and value.
  raise an AttributeError exception with an argument string: "'%s' object has no attribute 'ordered_forms'",
  if the result is equal to the result of the call to the function force_text with data_value as an argument, return boolean True,   otherwise return boolean False.   derive the class ModelMultipleChoiceField from the ModelChoiceField base class.
  if count2 does not equals to integer 0,
  call the method context.push with unpacked dictionary values as an argument, with the result perform,
  if verbosity is greater or equal to integer 2,
  define the method validate with arguments self and value.
  if e has an attribute 'code' and e.code is contained in self.error_messages,
  derive the class Command from the AppCommand base class.
  try,
  join app_config.path and string 'locale' into a file path, substitute it for localedir.
  if self.path is lesser than other.path, return boolean True, otherwise return boolean False.
  call the function func with 2 arguments: unpacked list resolved_args and unpacked dictionary resolved_kwargs, return it.
  call the function _unpack_ipv4 with an argument ip_str, substitute the result for ipv4_unpacked.
  property decorator,
  for every format in settings.SERIALIZATION_MODULES,
  from django.utils import six into default name space.
  app_name and model._meta.object_name, respectively.   evaluate connection.creation.sql_create_model method with model, no_style() and seen_models as arguments,
  if not,
  if link is not None,
  call the BaseConverter function with BASE2_ALPHABET as argument, store the result in base2.
  and code set to string 'invalid'.   decorator deconstructible,
  if self._count is None,
  define the method exit_command with an argument self.
  use the result as an argument for the call to the field.to_python method, substitute the result for initial_value.   if ValidationError exception is caught,
  substitute ClearableFileInput for widget.
  otherwise if dirname equals string 'locale',
  from django.forms.widgets import TextInput, NumberInput, EmailInput, URLInput, HiddenInput, MultipleHiddenInput, ClearableFileInput,
  if only_new is true,
  call the function check_errors with argument main_func, substitute the result for wrapped_main_func.
  return a string "UTC".
  call the function exc_type with an argument string "Unsupported value: %r. You should install pytz.", replace '%s' with dt,
  result is an empty list.
  call the method self._convert_to_charset with arguments: header, string 'latin-1' and mime_encode set to boolean True,
  from django.forms.forms import DeclarativeFieldsMetaclass and BaseForm into default name space.
  if incomment is true,
  split content by newline character, for every line in result,
  derive the class SafeBytes from bytes and SafeData base classes.
  define the function to_locale with 2 arguments language and to_lower set to boolean False.
  if value is an instance of datetime and settings.USE_TZ if use_tz is None else use_tz and call to the function is_naive,
  call the method self._archive.close.
  define the function mark_for_escaping with an argument s.
  define the method _add_local_translations with an argument self.
  self._choices and self.widget.choices are assigned value converted into a list.
  decorator deconstructible,
  define the method __init__ with 6 arguments self, parent_widget, name, value, attrs and choices.
  yield key and value under the key key of self dictionary.
  return reversed list output.
  if not,
  get the attribute 'Media' of the cls object, if it exists substitute it for definition, if not definition is None.
  if self.is_localized is true,
  if mtime is different than the value of dictionary _mtimes under the key filename,
  substitute super for _super.
  otherwise if token_string starts with COMMENT_TAG_START,
  join root and f into a file, substitute it for f.
  append string " You may need to add %r to ALLOWED_HOSTS." to msg, where '%s' is replaced with domain.
  append the result to pieces.   otherwise if piece is true,
  derive the class Group from list base class.
  print FASTCGI_HELP to the standard output.
  remove config dictionary entry under 'format' key, substitute it for value under 'fmt' key of config dictionary.
  substitute fields for self.fields.
  self._raw_ipv6 is boolean True.
  call the method self._stream.readline with 2 arguments: unpacked list args, unpacked dictionary kwargs.
  substitute the result for self.instance.   try,
  and unpacked dictionary kwargs.   python_2_unicode_compatible decorator,
  if using_sysrandom is false,
  if self.allow_folders is true,
  substitute self.config for config.
  self._post_parse_error is boolen False.
  call the method stream.unget with list containing elements of chunk list from the header_end incremented by integer 4 as a start index to the end as argument.
  from django.core.validators import validate_ipv4_address.
  if self.invoked_for_django is false,
  if first element of message_context equals to character '"',
  where '%(field)s' is replaced with first element of unique_check, return the result.   if not,
  for every date_check in all_date_checks,
  define the method end_serialization with an argument self.
  get "_decorated_function" attribute from func object, if it exists substitute __name__ field of the result for name,
  self._changed_data is an empty list.
  return boolean False.
  from gzip import GzipFile into default name space.
  return a dictionary with 2 elements: self._version for "version" and "http://www.w3.org/2005/Atom" for "xmlns:atom".
  call the method models.signals.pre_migrate.send with 5 arguments: sender set to app_config, app_config set to app_config,
  derive the class ConvertingList from list base class.
  call the method self.configure_custom with an argument config, substitute the result for result.
  substitute value under name key of handlers dictionary for handler_config.
  define the method configure_custom with 2 arguments: self and config.
  if self.is_localized is true,
  call the method f.save_form_data with 2 arguments: instance and value under the f.name key of cleaned_data dictionary.
  get the value under the root key of the convert dictionary, for every opname and opfunc in the result,
  decorator function wraps with 2 arguments: view_func and assigned set to result of the function available_attrs,
  if not,
  if not,
  substitute csrf_token for value under the 'csrf_token' key of new_context dictionary.
  substitute self for result.parent.
  HttpResponseNotModified, HttpResponseBadRequest, HttpResponseForbidden, HttpResponseNotFound, HttpResponseNotAllowed, HttpResponseGone,   HttpResponseServerError, Http404, BadHeaderError, JsonResponse into default name space.   from django.http.utils import fix_location_header and conditional_content_removal into default name space.
  return EndToken.
  return an instance of a class ResolverMatch created with 6 arguments: sub_match.func, sub_match.args, sub_match_dict,
  otherwise if, first element of message_context is equal to "'",
  if not,
  convert the value under the 'daemonize' key of options dictionary to lowercase, if it equals to string 'false', 'no' or 'f',
  call the function is_library_missing with an argument taglib_module, if it evaluates to true,
  import module os.
  import module json.
  return self._count.
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  call the method self._archive.printdir with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  return text.
  url is a string 'mailto:%s@%s' formated with local and domain.
  from django.utils.module_loading import module_has_submodule into default name space.
  append self to nodes.
  raise an CommandError exception with an argument message.
  call the function force_text with an argument message, return the result.
  code set to string 'max_decimal_places' and params set to a dictionary with an entry: self.decimal_places for 'max'.    if self.max_digits is not None and self.decimal_places is not None and whole_digits is grater than the difference of,
  define the function timeuntil with 2 arguments, d and now defaulting to none.
  last element of result is an instance of Choice class, created with an argument list with 2 elements: None and last element of result.
  values is an dictionary with 2 arguments: boolean False for 'false' and boolean True for 'true'.
  for every smigration in migrations_to_squash,
  define the method value with an argument self.
  self.instance and unpacked dictionary kwargs.   if form._meta.fields is true,
  call the function find_template with 2 arguments: template_name and dirs, substitute the result for template and origin.
  call the function become_daemon with 2 arguments: our_home_dir set to the value under the 'workdir' key of options dictionary and,
  call the method re_newlines.sub with 2 arguments: '\n' and text, return the result.
  derive the class Command from the BaseCommand class.
  substitute save_m2m for self.save_m2m.
  join elements of output into a string, separated with newlines, return the result.
  with an argument value evaluates to false, and if 'convert_to_local_time' attribute of value object doesnt exists,   or is it does is boolean True, should_convert is boolean True, otherwise is boolean False.   if should_convert is true, call the function localtime with an argument value and return the result, otherwise return value.
  if initial is not equal to data, return boolean True, if it is return boolean False.
  return nothing.
  for every i and tuple containing 2 elements: seconds and name, in enumerated chunks,
  try,
  doublecolon_len is an integer 0.
  do nothing.
  define the function ungettext with 3 arguments: singular, plural and number.
  append func to processors.
  return boolean True.
  return an instance of SafeText, created with an argument s.
  if end is None
  if not,
  import module argparse.
  if self._errors is None,
  call the method formats.time_format with 2 arguments: value and arg, return the result.
  do nothing.
  return _default.
  call the method self.xml.startElement with 2 arguments: string 'field' and a dictionary containing 2 entries: field.name for 'name',
  return string "(%s %r)", replace '%s' with self.if and '%r' with self.value.
  if offset is not None,
  define the method with self class instance and parser as arguments.
  substitute flo for self.flo.
  otherwise if field.required is true,
  try,
  define the method __init__ with 7 arguments: self, regex, max_length set to None, min_length set to None, error_message set to None,
  increment start by length of toktext.
  define the method __str__ with an argument self.
  decode with an argument string 'ascii', substitute the result for name.   take elements of p from index i incremented by 1 to the end, strip the result of the whitespaces, substitute it for value.
  return j.
  call the method instance.save.
  return the result.   define the method render_option with 4 arguments: self, selected_choices, option_value and option_label.
  break the loop execution.
  from __future__ import unicode_literals into default name space.
  get the value under the key key of the self.find_template_cache dictionary, substitute it for result.
  if value is an instance of SafeData, safe is boolean True, otherwise it is boolean False.
  raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,
  call the method datetime.datetime.strptime with 2 arguments: result of the function force_str called with an argument value,
  set field interesting for this class instance to interesting_cdata from module _html_parser.
  if call to the function module_has_submodule with app_config.module and "management" evaluates to True.
  if latest_date is None or item_date is greater than latest_date,
  substitute if _locs_ is None for _locs_.
  substitute name for self.name.
  call the method self.add_initial_prefix with an argument name, substitute the result for initial_prefixed_name.
  return value
  if app_dir is a directory,
  break from the loop execution.
  if value is contained in self.empty_values,
  i is integer 0.
  and unpacked dictionary kwargs.   if safe is true and data is not an instance of dict type.
  if AttributeError exception is caught,
  register.tag decorator,
  call the function warnings.warn with 3 arguments: string "django.utils.tzinfo will be removed in Django 1.9. "
  define the method __add__ with 2 arguments self and rhs.
  define the function patch_response_headers, with response and cache_timeout with None as default value, as arguments.
  if not,
  'Database state will be brought to the state after that migration.' as arguments.   call the method parser.add_argument with string '--noinput', action containing string 'store_false', dest set to string 'interactive',
  join self into a bytes string, yield the result as the return value of the generator.
  substitute _iteritems for items.
  define the method add_item_elements with 3 arguments: self, handler and item.
  call the method Model._meta.pk.to_python with one argument: value under the 'pk' key of dictionary d, or None if previous doesnt exists,
  call the function validate_ipv46_address with an argument ip_address.
  for every pattern in self.url_patterns,
  if length of password is greater than inner.block_size,
  define the method __dir__ with an argument self.
  and return value of the function flatatt called with an argument final_attrs, substitute the result for output.   call the method self.render_options with 2 arguments: choices and list with an entry, value, substitute the result for options.
  derive the class Operator from the base class TokenBase.
  call the function force_bytes with 2 arguments: safe and self.encoding, substitute it for safe.
  call the function warn_about_renamed_method with 2 arguments: class_name and unpacked list renamed_method, substitute the result for wrapper.
  import bpython.
  define the function smart_urlquote with an argument url.
  call the function six.reraise with unpacked list exc_info as an argument.
  derive the class FloatField from the base class IntegerField class.
  convert the value under the 'daemonize' key of options dictionary to lowercase, if it equals to string 'true', 'yes' or 't',
  if self.interactive is true,
  return an property object with getter function fget, setter function fset, destructor fdel and documentation string doc.
  substitute file_name for self.file_name.
  yield an instance of SubWidget class created with 5 arguments: self, name, value, attrs and choices.
  self.verbatim is boolean False.
  append contents to plural.
  call the method self.create_token with 3 arguments: last_bit, tuple with 2 elements: upto and sum of upto and length of last_bit,
  if self.queryset is not None,
  if 'class' is contained in attrs,
  call the method match.group with an argument integer 1, substitute the result for text.
  subtract self.STDOFFSET with self.DSTOFFSET, substitute the result for self.DSTDIFF.
  from django.utils.translation import ugettext_lazy as _ and ungettext_lazy into default name space.
  append string '-0000' to time_str, return the result.
  compile a regex from raw string '^\d+$', substitute it for DIGIT_PATTERN.
  match the rawdata from the position i, with _html_parser.endtagfind pattern, assign the result to the match.
  if truncate is None,
  ns_resolver is class instance of a class RegexURLResolver, created with 2 arguments: ns_pattern and resolver.url_patterns.
  raise an StopIteration.
  if cleaned_line ends with ';' character,
  register.tag decorator,
  break the loop execution,
  return result.
  df is an instance of DateFormat class, created with an argument value.
  if value under the 'indent' key of the self.options dictionary is true,
  define the function urlencode with 2 arguments value and safe set to None.
  self._post_render_callbacks is an empty list.
  call the function re.compile with 2 arguments: raw string "([A-Za-z]{1,8}(?:-[A-Za-z0-9]{1,8})*|\*)(?:\s*;\s*q=(0(?:\.\d{,3})?|1(?:.0{,3})?))?(?:\s*,\s*|$)",
  derive the class IfParser from the object base class.
  try,
  input_type is a string 'password'.
  return settings.LANGUAGE_CODE.
  try,
  if match is true,
  logger.propagate is boolean True.
  import module time.
  break from the loop execution.
  otherwise if token.token_type equals integer 2,
  if self.to_field is true,
  call the method self.handle_merge with 2 arguments: loader and conflicts, return the result.
  if self.required is false,
  if self has an attribute '_choices',
  substitute the fitst element of the result for prefix_norm and prefix_args, respectively.   for every possibility, pattern and defaults in possibilities,
  call the function io.open with 3 arguments: self.dirpath and thefile joined into a file path, string 'w',
  return result.
  if not, self.merge is boolean False.   get the value under the 'empty' key of the options dictionary, if the key exists substitute it for self.empty,
  if settings.configured is false,
  return settings.DEBUG.
  define the method load_template_source with 3 arguments: self, template_name, template_dirs set to None.
  delete _active.value.
  if connector is true, substitute it for self.connector, otherwise substitute self.default for self.connector.
  raise an ValueError exception with an argument string "Don't mix *args and **kwargs in call to reverse()!".
  if confirm equals string 'yes',
  error_messages is an empty dictionary.   substitute error_message for value under the 'invalid' key of the error_messages dictionary.
  _itervalues is a string "values".
  evaluate the logical expression, if other is an instance of RegexValidator and self.regex.pattern equals to other.regex.pattern,
  decorator stringfilter,
  call the method parser.delete_first_token.
  take subject elements from p-th to i-th index, substitute it for s.
  if renderer is true,
  call the function _ with an argument string 'Ensure this value is less than or equal to %(limit_value)s.', substitute the result for message.
  'PROCESSING' for 102, 'OK' for 200, 'CREATED' for 201, 'ACCEPTED' for 202, 'NON-AUTHORITATIVE INFORMATION' for 203,   'NO CONTENT' for 204, 'RESET CONTENT' for 205, 'PARTIAL CONTENT' for 206, 'MULTI-STATUS' for 207, 'ALREADY REPORTED' for 208,   'IM USED' for 226, 'MULTIPLE CHOICES' for 300, 'MOVED PERMANENTLY' for 301, 'FOUND' for 302, 'SEE OTHER' for 303,   'NOT MODIFIED' for 304, 'USE PROXY' for 305, 'RESERVED' for 306, 'TEMPORARY REDIRECT' for 307, 'PERMANENT REDIRECT' for 308,   'BAD REQUEST' for 400, 'UNAUTHORIZED' for 401, 'PAYMENT REQUIRED' for 402, 'FORBIDDEN' for 403, 'NOT FOUND' for 404,   'METHOD NOT ALLOWED' for 405, 'NOT ACCEPTABLE' for 406, 'PROXY AUTHENTICATION REQUIRED' for 407, 'REQUEST TIMEOUT' for 408,   'CONFLICT' for 409, 'GONE' for 410, 'LENGTH REQUIRED' for 411, 'PRECONDITION FAILED' for 412, 'REQUEST ENTITY TOO LARGE' for 413,   'REQUEST-URI TOO LONG' for 414, 'UNSUPPORTED MEDIA TYPE' for 415, 'REQUESTED RANGE NOT SATISFIABLE' for 416,   'EXPECTATION FAILED' for 417, 'I'M A TEAPOT' for 418, 'UNPROCESSABLE ENTITY' for 422, 'LOCKED' for 423, 'FAILED DEPENDENCY' for 424,   'UPGRADE REQUIRED' for 426, 'PRECONDITION REQUIRED' for 428, 'TOO MANY REQUESTS' for 429, 'REQUEST HEADER FIELDS TOO LARGE' for 431,   'INTERNAL SERVER ERROR' for 500, 'NOT IMPLEMENTED' for 501, 'BAD GATEWAY' for 502, 'SERVICE UNAVAILABLE' for 503,   'GATEWAY TIMEOUT' for 504, 'HTTP VERSION NOT SUPPORTED' for 505, 'VARIANT ALSO NEGOTIATES' for 506, 'INSUFFICIENT STORAGE' for 507,   'LOOP DETECTED' for 508, 'NOT EXTENDED' for 510 and 'NETWORK AUTHENTICATION REQUIRED' for 511.   derive the class BadHeaderError from the ValueError base class.
  define the method render with 2 arguments: self and context.
  if value is contained in self.empty_values,
  open_tags is an empty list.
  get name attribute from the instance object, call it and return the result.
  call the method value.encode with an argument charset.
  get the value under the 'all' key of the options dictionary, substitute it for process_all.
  call the function method with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, substitute the result for data.
  substitute DateTimeInput for widget.
  property decorator,
  for every i and v in enumerated iterable value,
  if not,
  raise an CommandError with an argument string "App '%s' does not have migrations (so squashmigrations on it makes no sense)",
  define the method __init__ with 2 arguments: self and filter_expression.
  MONTHS is an dictionary with 12 entries: result of the call to the function _ with an argument string 'January' for 1,
  integer 212, integer 243, integer 273, integer 304 and integer 334.   define the method b with an argument self.
  do nothing.
  with field_value as an argument, return the result.   define the method _handle_m2m_field_node with arguments self, node and field.
  if not,
  derive the class Serializer from the object base class.
  self.pointer is integer 0.
  or first element of var equals '_',   raise an TemplateSyntaxError exception with an argument string "Variables and attributes may not begin with underscores: '%s'",
  if secure is true,
  get the value under the 'symlinks' key of the options dictionary, substitute it for self.symlinks.
  return result
  call the function smart_urlquote with an argument string 'http://%s' formated with an argument middle, substitute the result for url.
  if not,
  call the method self.stdout.write, with an argument string "Rendering %s template files with extensions: %s\n",
  for every resultclass in resultclasses,
  from django.utils.six.moves import _dummy_thread as thread into default name space.
  convert language to lowercase and return it.
  if setting has an "SERIALIZATION_MODULES" attribute,
  call the function flatten_result with an argument result, unpack the resulting list and zip it in the list of tuples, return the result.
  if as_form is true,
  append work_file to string '#: ', substitute it for old.
  call the method self.configure_root with an argument root.
  substitute them for app_label and migration_name, respectively.   executor is an instance of MigrationExecutor, created with value under the DEFAULT_DB_ALIAS key of the connections dictionary.
  if ValidationError, renamed to e, exception is caught,
  return instance.
  call the method self.importer with an argument used, substitute the result for found.
  derive the class VerbatimNode from Node base class.
  where '%s' is replaced with first upto elements of token string, token string elements from upto to start index,   and token string elements from start index to the end.   if var_obj is None,
  get the type of self object, call its method __bool__ with an argument self, return the result.
  from django.utils.functional import curry and Promise into default name space.
  decorator stringfilter,
  raise an StopIteration exception.
  derive the class AdminEmailHandler from logging.Handler base class.
  return first element of t converted to lowercase and boolean True, as a tuple.
  for every name in loggers,
  substitute sign for self.sign.
  convert self.children into an boolean, return it.
  if e doesnt have an 'django_template_source' attribute,
  a dictionary with 18 pairs of dictionary value and string keys for DARK_PALETTE,   and a dictionary with 18 pairs of dictionary value and string keys for LIGHT_PALETTE.   substitute DARK_PALETTE for DEFAULT_PALETTE.
  join 'conf' and 'locale' into a file path, if it is a directory,
  self.bad_cookies is an empty set.
  break from the loop execution.
  substitute apps for the value under language_code key of the self._app_dict dictionary.
  week_number is integer 1.
  call the method notifier.stop.
  and guid_attrs.   if value under the 'ttl' key of the item dictionary is not None,
  for every form in self call the form.as_ul method, join the results in a string, separated by an empty string.
  call the method logger.addHandler with an argument: h-th element of value under 'handlers' key of self.config dictionary.
  define the method get with 3 arguments: self, key and default set to None.
  call the method __delitem__ from the base class of the QueryDict class, with an argument key.
  define the method num_items with an argument self.
  string 'Ensure this value has at most %(limit_value)d characters (it has %(show_value)d).' and string 'limit_value', substitute the result for message.   code is a string 'max_length'
  if self.required is true,
  otherwise if k equals a string 'bg',
  if StandardError, renamed to e, exception is caught,
  otherwise if vale is not an instance of ConvertingTuple and value is an instance of tuple type,
  tags is a list containing results of the function re.escape with an argument tag, for every tag in tags split into words.
  derive the class HttpResponseServerError from the HttpResponse base class.
  call the function get_language, substitute the result for language_code.
  widget is an instance of HiddenInput class.   if not,
  define the method clean with arguments self and value.
  call the method base64.urlsafe_b64encode with an argument s, on the result call the strip function with '=' as the argument, return the result.
  if value is contained in self.empty_values,
  call the function six.text_type with an argument self.data.year, return the result without the first 2 elements.
  if self.verbosity is greater than integer 1,
  call the function datetime_safe.new_datetime with an argument date, on the result call the method strftime with an argument,
  return None.
  use the result as an argument for the call to the function binascii.unhexlify, return the result.   if hashlib had an instance "pbkdf2_hmac",
  substitute name for self.name.
  call the method field._get_val_from_obj with obj argument, substitute the result for value.
  if not,
  substitute second element of plan_node for title.
  call the method token_string.count with an argument '\n', append the result to self.lineno.
  intrans is boolean False.
  if not,
  define the method check_programs with an argument unpacked list programs.
  define the method configure_formatter with 2 arguments: self and config.
  default_attrs is an dictionary with 2 initial entries: string '40' for 'cols' and string '10' for 'rows'.
  subtract _cached_modules from module_values, assign the result to new_modules.
  call the method self.parent_name.resolve with an argument context.
  call the function six.reraise with 3 arguments: exc_type, exc_value and third element of the result of the method sys.exc_info.
  call the method self.choice_input_class with 5 arguments: self.name, self.value, result of the method self.attrs.copy,
  raise an AttributeError exception.
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  call the method handler.addQuickElement with 2 arguments: string 'name' and value under the 'author_name' key of the item dictionary.
  call the method self.__dict__.copy, substitute the result for state.
  call the function six.itervalues with an argument kwargs, convert the result to a list and append it to a list containing args,
  define the method to_python with arguments self and value.
  return boolean False.
  if data in self.empty_values is true,
  from functools import wraps, update_wrapper and WRAPPER_ASSIGNMENTS into default name space.
  if cleaned_line is false,
  from django.core.management.sql import sql_indexes into default name space.
  substitute limit_choices_to for self.limit_choices_to.
  call the method self.xml.startElement with 2 arguments, string "django-objects" and a dictionary containing 1 element: "1.0" for "version".
  num_pages is a property object with _get_num_pages as a getter method.
  try,
  try,
  if seconds smaller than integer 0, sign is '-', otherwise sign is '+',
  define the method __init__ with 2 arguments: self and field.
  and dictionary with an entry: 'html' for 'type'.   if value under the 'enclosure' key of the item dictionary is not None,
  if six.PY2 is true,
  message_context is None.
  self._done is boolean False.
  if mime_encode is true,
  define the method pop with 3 arguments: self, k and unpacked list args.
  substitute the result for i-th element of lines.   if not,
  return value.
  return self.value.
  define the function translation with an argument language.
  if not,
  from django.core.management.utils import handle_extensions, find_command and popen_wrapper into default name space.
  call the method handler.addQuickElement with 2 arguments: string 'updated' and result of the function rfc3339_date,
  substitute serialize for __str__.
  allow_files set to boolean True, allow_folders set to boolean False, required set to boolean True, widget set to None,   label set to None, initial set to None, help_text set to an empty string, unpacked list args, unpacked dictionary kwargs.   substitute path, match and recursive for self.path, self.match and self.recursive.
  "|^"([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-\011\013\014\016-\177])*"$)" and re.IGNORECASE, substitute the result for user_regex.    call the re.compile function with 2 arguments: raw string '(?:[A-Z0-9](?:[A-Z0-9-]{0,247}[A-Z0-9])?\.)+(?:[A-Z]{2,6}|[A-Z0-9-]{2,}(?<!-))$',
  substitute self.fk.name for name.
  self._callback is None.
  define the method __getattr__ with 2 arguments: self and attr set to None.
  from django.utils.deprecation import RemovedInDjango20Warning into default name space.
  shells is a list containing 2 elements: string 'ipython' and string 'bpython'.
  with 2 arguments: stream and Loader set to SafeLoader, and unpacked dictionary options,   yield one element of the itterable obj.
  import module sys.
  re.U and re.S, substitute the result for re_chars.   call the function re.compile with 2 arguments: raw string '<(/)?([^ ]+?)(?:(\s*/)| .*?)?>' and bitwise OR performed with 2 operands,
  call the method self.get_template_sources with 2 arguments template_name and template_dirs, for every filepath in the result,
  define the method symlinks_supported.
  define the function run with 5 arguments: addr, port, wsgi_handler, ipv6 set to boolean False and threading set to boolean False.
  _format_cache is an empty dictionary.
  and include_auto_created set to boolean True,   call the method connection.creation.sql_indexes_for_model with arguments model and style, extend output with the result.
  if error_messages is not None,
  seen is an empty set.
  call the method parser.delete_first_token.
  if handlers is true,
  if matches is false,
  try,
  convert value and arg to integers, if value is divisible by arg, return True, otherwise return boolean False.
  replace all the occurrences of previous string in msgs for an empty string, substitute the result for msgs.   call the function io.open with 3 arguments: pofile, string 'w' and encoding set to string 'utf-8' as arguments,
  substitute the value under the 'HTTP_HOST' key of the self.META dictionary, substitute it for host.
  call the method re.compile with 2 arguments: raw string '^(?P<value>"Plural-Forms.+?\\n")\s*$',
  substitute absolute seconds for seconds.
  for every val in value call the function smart_text with an argument val, return the results in a lit.
  query a string 'Please enter either "yes" or "no": ' and store the result in confirm.
  from __future__ import unicode_literals into default name space.
  __all__ is an tuple containing string 'SelectDateWidget'.
  call the method self.extract with an argument absolute_path, return the result.
  substitute '%s' in string '%s_%s' with id_ and first_select, return it.
  call the function prepare_js_for_gettext with an argument src_data, substitute it for src_data.
  call the function escape with an argument value, return the result.
  substitute absolute value of the exponent for decimals.
  call the function t.render with an argument context_instance, return the result.
  'alternate' for 'rel' and value under the 'link' key of self.feed dictionary for 'href'.   if value under the 'feed_url' key of the self.feed dictionary is not None,
  and ignored as an empty tuple, convert the result into a tuple and substitute it for extensions.   extra_files is an empty list.
  append list containing 4 elements: 'CVS', '.*', '*~' and '*.pyc', to ignore_patterns.
  if not,
  _urllib_error_moved_attributes is a list with 3 elements: result of the call to the function MovedAttribute with 3 arguments:
  define the method __len__ with an argument self.
  default set to boolean False and help set to a string "Enable fixing of migration conflicts.".   call the method parser.add_argument with 5 arguments: string '--empty', action as a string 'store_true', dest as a string 'empty',
  define the function upath with an argument path.
  created with 2 arguments: required as boolean False and widget set to HiddenInput.   call the method __init__ from the base class of the class ManagementForm, called with 2 arguments: unpacked list args,
  from django.http.cookie import SimpleCookie into default name space.
  concatenate name and string '-clear', return it.
  return callback split into two lists at the dot index, without the element at the dot index.
  from django.conf import settings into default name space.
  call the method self._existing_object with an argument pk, substitute the result for value under the 'instance' key of kwargs.
  call the method date_value.strftime with an argument input_format, return the result.
  if AttributeError exception is caught.
  call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
  call the method six.text_type with 3 arguments: s, encoding and string 'replace'.
  from django.utils._os import safe_join into default name space.
  try,
  return value.
  if VariableDoesNotExist exception is caught,
  ch is None.
  call the function warnings.warn with 3 arguments: string "get_declared_fields is deprecated and will be removed in Django 1.9.",
  substitute sup_cls.media for base.
  call the method imp.find_module with 2 arguments: module_name and list containing element entry, assign the result to file_, _,
  call the method zipfile.ZipFile.__init___ with the arguments self, unpacked list args and unpacked dictionary kwargs.
  call the method warnings.warn with 2 arguments: string "The syncdb command will be removed in Django 1.9" and RemovedInDjango19Warning.
  msg is a tuple containing string "\nYou have installed Django's auth system, and don't have any superusers defined.\nWould you like to create one now? (yes/no): ".
  remove 'sep' key from the kwargs dictionary, if it exists substitute it for sep, if not sep is None.
  derive the class Command from the TemplateCommand base class.
  python_2_unicode_compatible decorator,
  define the method u with an argument self.
  from django.core.management.base import AppCommand into default name space.
  define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  define the function render_value_in_context with 2 arguments: value and context.
  derive the class SsiNode from Node base class.
  choice and idx, return the result.   define the method __str__ with an argument self.
  if count of occurrence of '::' in ip_str is greater than integer 1,
  define the method H with an argument self.
  if not,
  derive the class ModelChoiceIterator from object base class.
  call the function date_format with 2 arguments: value, string 'DATETIME_FORMAT' and use_l10n as use_l10n, return the result.
  put the results into a list, substitute self.locale_paths for it.   substitute first element of self.locale_paths for self.default_locale_path.
  compare is a lambda function with arguments self, a and b, return value is boolean true if a is lesser than b, otherwise is false.
  replace '%s' in string "  Optimized from %s operations to %s operations." with lengths of operations and ew_operations, respectively,
  call the method sub_match_dict.update with an argument sub_match.kwargs.
  return plural_suffix.
  define the function available_attrs with an argument fn.
  msgs_with_ctxt is a tuple containing 2 elements: string created by concatenating context, CONTEXT_SEPARATOR and singular,
  define the method lists with an argument self.
  called with an argument result of the method self.latest_post_date.   if value under the 'ttl' key of the self.feed dictionary is not None,
  upto is integer 0.
  if '.' is contained in last elements of hextets,
  ch2 is None.
  define the method get_limit_choices_to with arguments self.
  if number is an integer and use_grouping is false and decimal_pos is false,
  return an empty list.
  call the method parser.compile_filter with an argument value, substitute the result for value under the key key of kwargs dictionary.
  otherwise if char is contained in string 'dj',
  call the function normalize_newlines with an argument value, substitute the result for value.
  if kwds is true,
  call the method __deepcopy__ from the base class of the class ChoiceField, with an argument memo, substitute the result for result.
  raise an StopIteration exception,
  append block to the value under the name key of self.blocks dictionary.
  import readline.
  substitute the result for value under the 'microsecond' key of the kw dictionary.   update a dictionary with an entry v converted to an integer for k, for every k and v in result of the function six.iteritems,
  define the method __repr__ with an argument self.
  boolean_attrs is an empty list.
  with unpacked list field_value as an argument, substitute the field pk of the result for obj_pk.   if not,
  return an instance of FilterExpression class, created with 2 arguments: token and self.
  return data.
  if field is an instance of InlineForeignKeyField class,
  call the method autodetector.changes with 3 arguments: graph set to loader.graph, trim_to_apps set to app_labels,
  if length of self.backout is greater than zero,
  default_error_messages is an dictionary with 2 entries: return value of the function _ called with an string 'Enter a valid date.',
  msg is a string "%s doesn't look like a module path" formated with dotted_path.
  define the method handle_data with 2 arguments self and d.
  BASE62_ALPHABET is string '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.
  property decorator,
  use the result as an argument for the call to the upath function, for every d in dirs, append the results into a list,   substitute the resulting list for dirs.   return dirs.
  use the result as an argument for the call to the b64_encode function, return the result.   define the function get_cookie_signer with an argument salt set to string 'django.core.signing.get_cookie_signer'.
  import module sys.
  call the method match.groupdict, substitute the result for kw.
  call the method self.write with 2 arguments: s and encoding.
  return an instance of SafeBytes, created with an argument s.
  and self.message equals to other.message, and self.code equals to other.code, return boolean True, otherwise return boolean False.   validate_email is an instance of EmailValidator class.
  if StopIteration exception,
  call the method value.center with an argument, arg converted into a integer, return the result.
  write string "Performing system checks...\n\n" to self.stdout stream.
  where '%s' is replaced with taglib and e.   if not,
  from django.utils.translation import trans_real into default namespace.
  with call to the function transaction.atomic with using set to connection.alias and savepoint set to connection.features.can_rollback_ddl, as arguments.
  define the method _handle_object with arguments self and node.
  append string '</select>' to output.
  call the method to_python with an argument data from the base class of the class BooleanField, return the result.
  read one line from self file stream, substitute the result for buf.
  if result is not None,
  old_style_list is boolean True.
  match regex time_re with value, substitute the result for match.
  substitute settings.TEMPLATE_DIRS for template_dirs.
  return printable representation of self.dicts.
  call the function get_callable.cache_clear.
  define the function dictConfig with an argument config.
  is greater than self.max_num, or if value under the TOTAL_FORM_COUNT key of the self.management_form.cleaned_data dictionary,   is grater than self.absolute_max,   raise an ValidationError with 2 arguments: return value of the function ungettext with 3 arguments:
  opts.fields is None.
  call the function check_programs with an argument string 'xgettext'.
  define the function resolve with arguments path and urlconf set to None.
  if lengths of new_operations and operations are the same,
  if app_config.models_module is None,
  call the method expires.utcnow, subtract the result from expires, substitute the result for delta.
  define the method _reset_dicts with 2 arguments: self and value set to None.
  yield representative and boolean True.
  substitute the value under the 'app_label' key of options dictionary for app_label.
  if lengths of val1 and val2 are not equal,
  try,
  call the function time_format with 2 arguments: value and arg, return the result.
  split token.contents into separate words, substitute the first element of the result for command.
  return the directory name two directories up from the __file__ path, join it with 'conf' and 'locale' into valid path, separated by '/', basedirs is a list containing 2 elements: previous result and string 'locale'.
  if app_config.models_module is None,
  return an empty string,
  call the method popitem from the base class of the class QueryDict, return the result.
  call the method six.iteritems with an argument dict_, for every k and v in the result,
  call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw,
  call the function zlib.compress with an argument data, substitute the result for compressed.
  define the method __iter__ with an argument self.
  otherwise if ch equals a string '^',
  raise an base.SerializationError exception with argument string "Non-model object (%s) encountered during serialization",
  if m and n are not None,
  derive the class Command from the BaseCommand class.
  if six.PY3 is true,
  substitute _iterlists for iterlists.
  if self.first is false,
  call the method self.error_class with an argument e.error_list, substitute the result for self._non_form_errors.
  return instance of _HashedSeq class, created with an argument key.
  call the method self.save_existing with 3 arguments: form, obj and commit as commit, append the result to saved_instances.
  if num_loopvars is not equal to len_item,
  if data has an attribute 'read',
  from functools import wraps into default name space.
  for every k and v in result of the function six.iteritems,called with an argument self,
  define the method get_dump_object with arguments self and obj.
  if AttributeError exception is caught,
  if not,
  if elt is an instance of six.string_types class,
  nesting is integer 0.
  append the result to password.   call the method password.translate with an argument hmac.trans_36, update inner dictionary with the result.
  otherwise id change equals to I18N_MODIFIED,
  define the method __enter__ with an argument self.
  convert app_template_dirs to a tuple, return it.
  if ValueError exception is caught,
  if not,
  url_schemes is list of strings 'http', 'https' and 'ftp'.
  references_to_delete is an empty dictionary.
  define the method push with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  call the function self.regex.search with an argument path, substitute the result for match.
  slice the rawdata to obtain substring from i-th to j-th element, use it as the argument for the method call to the self.handle_data.
  for every dirpath, dirnames and filenames in the result,   for every dirname in list dirnames,
  while bits is true,
  return boolean True.
  define the method __eq__ with an argument self.
  if t is not None
  substitute name for self.name.
  call the method self.__class__, substitute the result for result.
  substitute value for rest.
  define the method __iter__ with an argument self.
  from django.core.management.base import CommandError into default name space.
  return the result.   define the method unclosed_block_tag with 2 arguments: self and parse_until.
  if TypeError and AttributeError exceptions are caught,
  define the function total_ordering with an argument cls.
  substituet node for value under the name key of the parser._namedCycleNodes dictionary.
  derive the class URLNode from Node base class.
  smart_text function, return the result.   if not,
  skip this loop iteration.
  define the method content with an argument self.
  substitute .error_class for self.error_class.
  define the function strip_spaces_between_tags with an argument value.
  substitute messages for self.error_messages.
  from django.conf import settings into default name space.
  call the method unicodedata.normalize with 2 arguments: string 'NFKD' and value, encode the result with 2 arguments: string 'ascii',
  return self._container converted into a iterable.
  assign the bits elements to tag, this_value_expr, max_value_expr and max_width, respectively.
  call the method text.find with 2 arguments: substr and i, substitute the result for j.
  return self.content
  _iteritems is a string "items".
  substitute name for new_attr.
  if value under the 'liveserver' key of the options dictionary is not None,
  define the method setdefault with 3 arguments: self, key and default set to None.
  otherwise if ch equals a string ')',
  call the method self.render_node with 2 arguments: node and context, substitute the result for bit.
  return boolean True.
  append value to the '-', substitute it for value.
  call the function sql_indexes with app_config, self.style and connection as arguments, store the result in statements.
  if definition is true,
  define the function with arguments self and filename.
  return d.
  call the function get_template_from_string with 3 arguments: template, origin and template_name, substitute the result for template.
  substitute message for self.message.
  from django.db.migrations.loader import AmbiguityError into default name space.
  return self._wrapped.__dict__.
  call the function glob.glob with an argument: string '/*' appended to self.default_locale_path converted into a string,
  call the method cache.set with cache_key, an empty list and cache_timeout as arguments.
  define the method root_attributes with an argument self.
  finally perform,
  return an empty string.
  call the method threading.RLock, substitute the result for self.mutex.
  define the method add_arguments with arguments self and parser.
  call the method netloc.encode with an argument string 'idna', on the return value call the decode method with string 'ascii' as argument, substitute the result for netloc.
  for every sub_stream in boundarystream,
  get the value under the state key of the regexes dictionary, call the method finditer on the result with 2 arguments: text and start,
  define the function do_include with 2 arguments parser and token.
  substitute '%s' with title in the string " [X] %s", write it to the standard output.
  derive the class BaseConfigurator from object base class.
  return the result.   define the method value_from_datadict with 4 arguments: self, data, files and name.
  return content.
  if in_tag and is not contained in self.verbatim,
  if migration.replaces is true,
  call the function bytes with an argument tuple with an element i, return the result.
  self.keyOrder is an empty list.
  try,
  import module copy.
  try,
  if field.rel.to._default_manager has an 'get_by_natural_key' attribute,
  substitute value under the name key of the lib.tags dictionary for value under the name key of the temp_lib.tags dictionary.
  call the method base.__dict__.items, for every attr and value in the result,
  if _globs_ is None,
  define the method __init__ with 8 arguments: self, data set to None, files set to None, instance set to None,
  if value is an instance of six.string_types class,
  as_form is boolean True.
  substitute 'n' for answer.
  return boolean False.
  from __future__ import unicode_literals into default name space.
  while ch is not equal to terminal_char,
  if sep is not None,
  try,
  define the method needs_multipart_form with an argument self.
  substitute reason for self.reason_phrase.
  increment self.active_writers by 1.
  decrement truncate_len by integer 1.
  return proxy.
  call the method self.build_attrs with an argument attrs, substitute the result for final_attrs.
  define the method push with 3 arguments: self, name and block.
  derive the class EscapeText from six.text_type and EscapeData base classes.
  call the method self._update_errors with an argument e.
  call the parent class of Command class add_arguments method and parser as the arguments.
  substitute first length elements of words for words.
  call the function getInnerText with argument field_node, on the result call the method strip, use the result as an argument for the
  if not,
  from django.utils import six into default name space.
  if first element of e.args is not contained in not_found,
  derive the class FilePathField from the base class ChoiceField class.
  return boolean False.
  use it as an argument for the call to the function force_text, return the result.   define the method as_text with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.
  if value is not equal self.empty_value,
  call the method self._archive.namelist, substitute the result for namelist.
  decorator cached_property,
  create a instance of a class BadSerializerModule from the object base class, with elements Deserializer set to bad_serializer and Serializer set to bad_serializer.
  substitute result for value under key key of self dictionary.
  from _systemrestart import SystemRestart into default name space.
  get the value under the key key of the self.cookies dictionary, domain expires for 'domain' key of the returned dictionary.
  pos and last are integer 0.
  only if form_class is not None, and if form_class has an attribute '_meta' and form_class._meta.fields is not None,
  substitute rhs for number_value.
  call the function endtag_re.sub with 2 arguments: an empty string and html, substitute the result for html.
  define the method __getinitargs__ with an argument self.
  if other_dict is an instance of MultiValueDict.
  otherwise if first element of message_context equals to character "'",
  substitute first element of nonlocal_root for root.
  call the function re.search with 3 arguments: string '^%s%s', with '%s' replaced for prefix_norm and pattern, respectively,
  changeset is None.
  try,
  get 'errors' attribute from fp object, substitute it for errors if it exists, if not errors is None.
  files and string created with concatenation of: name, string '_' and i converted into a string, return the results in a list.   define the method format_output with 2 arguments: self and rendered_widgets.
  call the method normalize with sum of parent_pat and pat as an argument, substitute the result for new_matches.
  if values is None,
  substitute first element of item for k.
  from django.conf import settings into default name space.
  msguniq_options is an list with elements: string '--to-code=utf-8'.
  if arg is not string 'on' or 'off',
  property decorator,
  and result of the bitwise OR performed on the re.MULTILINE and re.DOTALL operands, substitute the result for plural_forms_re/   STATUS_OK is integer 0.
  from django.utils.six.moves import xrange into default name space.
  value under the ORDERING_FIELD_NAME key of the form.fields is an instance of IntegerField class, created with 3 arguments:
  TOKEN_BLOCK is integer 2
  if only_new is True,
  if not,
  if not,
  result of the call to the function _ with an argument string 'feb' for 2,   result of the call to the function _ with an argument string 'mar' for 3,   result of the call to the function _ with an argument string 'apr' for 4,   result of the call to the function _ with an argument string 'may' for 5,   result of the call to the function _ with an argument string 'jun' for 6,   result of the call to the function _ with an argument string 'jul' for 7,   result of the call to the function _ with an argument string 'aug' for 8,   result of the call to the function _ with an argument string 'sep' for 9,   result of the call to the function _ with an argument string 'oct' for 10,   result of the call to the function _ with an argument string 'nov' for 11,   result of the call to the function _ with an argument string 'dec' for 12.   MONTHS_3_REV is an dictionary with 12 entries: 1 for 'jan', 2 for 'feb', 3 for 'mar', 4 for 'apr', 5 for 'may', 6 for 'jun',
  call the method os.path.splitext with an argument self.file, assign the result to _ and file_ext.
  if not,
  convert byte to its integer representation, return all of the results for every byte in buf.
  define the method previous_page_number with an argument self.
  and html set to boolean True, return the result.   decorator function register.filter with an argument is_safe set to boolean True.
  define the function debug with 2 arguments: parser and token.
  get the value under the 'exclude' key of the options dictionary, substitute it for exclude.
  try,
  try,
  call the function trim_url with an argument middle, substitute the result for trimmed.
  return i.
  call the function touch_import with 3 arguments: string 'django.utils.encoding', string 'python_2_unicode_compatible' and decorated.
  if not,
  while ch is not equal to a string '}',
  format string '&#%s;' with name, append it to self.fed.
  call the function func with an argument unpacked list args, substitute the result for result.
  if self._pk_field equals self.fk,
  result of the method ProjectState.from_apps with an argument apps and result of the method InteractiveMigrationQuestioner,   called with 2 arguments specified_apps set to app_labels and dry_run set to self.dry_run.   if self.empty is true,
  if attr equals any of the strings "__file__", "__name__" or "__path__" and self.mod is not contained in sys.modules,
  call the function get_format_modules with an argument lang, for every module in the result,
  call the function initial_value, substitute the result for initial_value.
  call the function register_serializer with 3 arguments: format, value under the format key of the BUILTIN_SERIALIZERS dictionary and serializers.
  call the function force_text with 2 arguments: value under the is_dst key of the time.tzname and DEFAULT_LOCALE_ENCODING,
  define the function make_origin with 4 arguments: display_name, loader, name and dirs.
  data is None.
  substitute first element of to_digits for res.
  increment self.active_readers by t.
  call the method constant_re.match with first element of parts as an argument, substitute the result for cmatch.
  call the method self.xml.startElement with argument string 'natural' and an empty dictionary.
  decorator function register.filter with an argument is_safe set to boolean True.
  import module os.
  if self.min_value is not None,
  join dirpath and dirname into a file path, use is as an argument for the call to the function os.path.join,
  return base.
  substitute length of item for len_item.
  from django.conf.locale import LANG_INFO.
  if call to the self.is_valid method evaluates to false or self.can_order is false,
  if not,
  substitute self for value.configurator.
  result of the call to the function _ with an argument string 'February' for 2,   result of the call to the function _ with an argument string 'March' for 3,   result of the call to the function _ with an argument string 'April' for 4,   result of the call to the function _ with an argument string 'May' for 5,   result of the call to the function _ with an argument string 'June' for 6,   result of the call to the function _ with an argument string 'July' for 7,   result of the call to the function _ with an argument string 'August' for 8,   result of the call to the function _ with an argument string 'September' for 9,   result of the call to the function _ with an argument string 'October' for 10,   result of the call to the function _ with an argument string 'November' for 11,   and result of the call to the function _ with an argument string 'December' for 12.   MONTHS_3 is an dictionary with 12 entries: result of the call to the function _ with an argument string 'jan' for 1,
  raise an TypeError with an argument string "relative imports require the 'package' argument".
  if exctype is not WindowsError or string 'Access is denied' is not contained in value converted into a string,
  from django.utils.safestring import mark_safe and SafeData into default name space.
  return result converted into an integer.   define the method w with an argument self.
  if obj.pk is None, and Model has an 'natural_key' attribute, and Model._default_manager has and 'get_by_natural_key',
  where '%s' is replaced with node.nodeName and attr.   define the function getInnerText with an argument node.
  empty string for 'field', empty string for 'help_text' and html_class_attr for html_class_attr.   append last_row to output.
  derive the class RssFeed from the SyndicationFeed base class.
  get value under the key settings.CACHE_MIDDLEWARE_ALIAS of caches dictionary, substitute with it the cache.
  define the method decompress with 2 arguments: self and value.
  substitute value for self._encoding.
  substitute the result for result.   call the function _long_to_bin with 2 arguments: result and hex_format_string, return the result.
  define the method y with an argument self.
  if handler has an attribute 'file',
  append tuple with 2 elements: migration.app_label and migration.name to replaces.
  values is an empty list.
  dest as a string 'no_obsolete', default as boolean False and help as a string "Remove obsolete message strings.".   call the method parser.add_argument with 5 arguments: string '--keep-pot', action as a string 'store_true',
  take subject elements from p-th to i-th index, substitute it for s.
  define the method_mark_post_parse_error with an argument self.
  for every key in self,
  call the _tc.load method with the 'foo:bar=1' converted to string as an argument.
  call the function unicodedata.combining with an argument char, if it evaluates to true,
  if KeyError exception is caught,
  third element of the result of the function sys.exc_info.   define the method readline with 3 arguments: self, unpacked list args and unpacked list kwargs.
  define the method empty_form with an argument self.
  call the method sys.stdout.close.
  if not,
  call a function _ with a string 'Enter a valid value.' as an argument, substitute the result for message.
  define the method __init__ with 2 arguments: self and dict_ set to None.
  call the function escape with an argument output.
  call the method from_current_timezone with an argument result, return the result.
  call the function limit_choices_to, substitute the result for limit_choices_to.
  substitute serialize for __bytes__.
  if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
  call the function datetime.datetime with utc as argument if call to the is_aware(d) returns True, if not None is the argument, store the result in now.
  from django.test.signals import setting_changed into default name space.
  if invalid_var_format_string is None,
  define the function get_language_from_path with an argument request.
  if bytes is false,
  return self.empty_value.
  substitute loader, name and dirs for self.loader, self.loadname and self.dirs, respectively.
  substitute abspath for abspathu.
  from django.template.base import Library, add_to_builtins, builtins, get_library, get_templatetags_modules, get_text_list,
  raise an TemplateSyntaxError exception with an argument string "Could not parse the remainder: '%s' from '%s'",
  call the method self._add_fallback.
  derive the class BlockContext from the Exception base class.
  call the method operator.attrgetter with an argument _meth_self, substitute the result for get_method_self.
  raise an ValidationError exception with an argument errors,
  derive the class BaseValidator form the object base class.
  get the value under the 'error_messages' key of the kwargs dictionary, update errors dictionary with it.
  for every item in elt,
  url is None.
  if ImportError exception is caught,
  call the method self.data.timetuple, use the result as an argument for the call to the function time.mktime,
  call the method m.end, slice list rest from previous result as starting index to the end, substitute the result for rest.
  move integer 1 left for 30 bits, substitute the result for GB.
  if value is true and character ':' is contained in value,
  if length of bits is greater or equal to intger 2 and second last element of bits is equal to string 'as',
  convert value to an integer, return it.
  call the method node.clone, substitute the result for klass.
  multiply offset.days, integer 24 and integer 60, sum the result with floored result of dividing offset.seconds by integer 60,
  call the function allow_lazy with 2 arguments: normalize_newlines and six.text_type, substitute the result for normalize_newlines.
  divide 10 to the power of 400 by 10 to the power of 400, substitute the result for nan.
  call the method execute form the base class of the class Command, with 2 arguments: unpacked list args and unpacked dictionary options.
  return printable representation of self.value.
  input_type is a string 'hidden'.
  "test management command has changed in Django 1.8. Please create an add_arguments class method to achieve this."   if test_runner_class has an attribute 'add_arguments',
  define the method add_arguments with 2 arguments self and parser.
  if length of hextet is greater than integer 1,
  call the method self.handle_template with 2 arguments: value under the 'template' key of the options dictionary and base_subdir.
  instantiate Lexer class with 2 argumets src and origin, call the method tokenize from it, for every t in the result,
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  substitute self.form.auto_id for auto_id.
  substitute self.source for e.django_template_source.
  from copy import copy into default name space.
  define the function ungettext with 3 arguments: singular, plural and number.
  remove the first element from self.command_stack, assign the result to command and source, respectively.
  call the method self.render, return the result.
  try,
  append work_file to string '#: ', substitute it for old.
  define the function get_language_from_path with an argument path.
  return boolean True.
  from django.db.models import ForeignKey.
  define the function Deserializer with 2 arguments: stream_or_string and unpacked dictionary options.
  try,
  substitute years for self.years.
  questioner is an instance of a InteractiveMigrationQuestioner class, created with an argument: defaults set to dictionary with entry:
  default_error_messages is a dictionary with 4 initial entries: return value of the function _ called with string as an argument,
  define the function locale with an argument locale.
  call the method apps.get_app_configs, convert the result in a list, reverse the order of elements, substitute the result for app_configs.
  return ipv4_unpacked.
  call the method types.MethodType with 3 arguments: func, obj and obj.__class__, return the result.
  call the self.style.HTTP_NOT_FOUND with an argument msg, substitute it for msg.
  from __future__ import unicode_literals into default name space.
  if iterations is lesser than integer 0, raise an error.
  import module codecs.
  call the method self._iteritems, for every k and v in the result,
  self.cleaned_data is an empty dictionary.
  if middle starts with opening,
  if match is true,
  define the method __eq__ with arguments self and other.
  value under the name key of the form.fields dictionary is an instance of InlineForeignKeyField created with 2 arguments:
  call the function get_script_prefix, substitute the result for prefix.
  define the method with reload with an argument self.
  call the function module_has_submodule with 2 arguments: package and module, return inverted boolean result.
  if stream_or_string is an instance of the six.string_types,
  if i is smaller than integer 0,
  from django.db.migrations.executor import MigrationExecutor into default name space.
  call the method field.widget.value_from_datadict with 3 arguments: self.data, self.files and return value of the method,
  append contents to singular.
  kwargs is an empty dictionary,
  convert ip_str to lowercase, if it doesnt start with a string '0000:0000:0000:0000:0000:ffff:',
  if kwarg_format is true,
  s and max_age set to max_age, use it as an argument for the force_bytes function, substitute the result for base64d.   decompress is boolean False.
  call the function format_html with 2 arguments: string ' for="{0}"' and self.id_for_label, substitute the result for label_for.
  if decimal_pos is not None
  for every f in opts.local_fields that has an 'post_create_sql' attribute, append f to a list, substitute the resulting list for post_sql_fields.
  if not,
  call the method __init__ from the base class of the class Truncator,
  if message is not None,
  substitute last element of output for last_row.
  call the function six.reraise with 3 arguments: class ValidationError, class ValidationError, created with 3 arguments:
  define the method nud with 2 arguments: self and parser.
  call the function import_module with an argument templatetag_module.
  raise an exception.
  for every f in file_field_list,
  decorator function register.filter with an argument is_safe set to boolean False.
  define the method render with 2 arguments: self and context.
  from django import VERSION as version into default name space.
  if cache_timeout is None,
  keep_blank_values set to boolean True, encoding set to encoding.   call the method appendlist with 2 arguments: key and value.
  help is a string 'Prints the SQL statements for resetting sequences for the given app name(s).'.
  return an instance of ModelChoiceIterator class, created with an argument self.
  convert result of the method self.__iter__ into a list, return its length.
  append tuple containing element attr to boolean_attrs.
  if other is an instance of Promise class,
  return initial.
  otherwise if bmatch is true,
  get the unicode representation of the absolute path of base, substitute it for base_path.
  get 'value' attribute of the _prefixes, if it exists, return it, otherwise return '/'.
  both_after is an list with an element instance of Tok class, created with 2 arguments: string 'other' and raw string '.'.
  call the method self.can_write.release.
  if not,
  substitute self.current_token for t.
  substitute length for self._length.
  define the method popitem with an argument self.
  return boolean False.
  call the method __setitem__ from the base class of the class MultiValueDict, with 2 arguments key and list_.
  return ZERO.
  if not,
  define the function do_filter with 2 arguments: parser and token.
  if m is None,
  try,
  called with string as an argument 'Error executing %s: %s', where '%s' is replaced by: first element of args and strerror, respective,   and third element of the result of the function sys.exc_info.   call the method p.communicate, assign the result to output and errors, respectively.
  extend list inner_result with res.
  define the method __init__ with 2 arguments: self and attrs set to None.
  if key exists, substitute it for self.key, if not substitute settings.SECRET_KEY for key.
  call the method __init__ with an argument UNKNOWN_SOURCE, from the base class of the class StringOrigin.
  increment i by integer 1,
  if neg is true,
  import module time.
  call the method b64_decode with an argument base64, substitute the result for data.
  if ValueError exception is caught,
  if AttributeError exception is caught,
  call the function format_html with 4 arguments: string '<label{0}>{1} {2}</label>', label_for, result of the method self.tag,
  derive the class ModelFormOptions from object base class.
  replace the result for tz_name.   call the method tz_name.encode with the arguments 'ascii' and 'ignore', call the method decode on the result with 'ascii' as argument,
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  substitute '%r' with name and compile_function.   define the method tag_function with 2 argument: self and func.
  if extensions is false, substitute it for exts, otherwise exts is a list containing string 'js'.
  if KeyError exception is caught,
  derive the class MaxValueValidator form the BaseValidator base class.
  substitute the result input_attrs.   if id_,
  if timezone is an instance of tzinfo,
  otherwise substitute args for key.   with lock,
  call the method parser.delete_first_token.
  call the function find_command with an argument program, if it evaluates to None,
  call the function force_text with an argument formatstr, use the result as an argument for the call to the method,
  derive class BaseCOnverter from object base class.
  define the method encoding with an argument self.
  derive the class ConvertingTuple from tuple base class.
  if help_texts is true and f.name is contained in help_texts,
  substitute newretval for retval.
  self.waiting_readers is an integer 0.
  if data is bound to the same object as FILE_INPUT_CONTRADICTION,
  derive the class HttpResponseBadRequest from the HttpResponse base class.
  if self.timezone is false,
  define the method source_error with 3 arguments: self, source and msg.
  call the function _trans.deactivate, return the result.
  append f.name to exclude.
  assign it to value under the string ".moves.urllib_robotparser" appended to __name__ key of the sys.modules dictionary,   and to value under the string ".moves.urllib.robotparser" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib from the types.ModuleType base class.
  try,
  map elements of self._iterator through self.make_bytes function, return the result.
  if self.data.day equals integer 11, 12 or 13,
  writer is an instance of MigrationWriter class, created with an argument migration.
  define the method __init__ with 4 arguments: self, nodelist_true, nodelist_false and unpacked list varlist.
  call the method formats.get_format_lazy with an argument string 'TIME_INPUT_FORMATS', substitute the result for input_formats.
  call the function copy.deepcopy with 2 arguments: self.children and memodict, substitute the result for obj.children.
  substitute force_text for force_str.
  raise an exception.
  if not,
  substitute idx-th element of self.choices for choice.
  call the method self.clear_checkbox_name with an argument name, substitute the result for checkbox_name.
  define the function activate with an argument language.
  return boolean True.
  return None.
  floor the division of delta by integer 100 and delta by integer 400, sum the two results, multiply integer 6 by it, substitute the result for off.
  import threading module.
  define the method convert with 2 arguments: self and value.
  call the functoin callback with an argument self.
  call the function get_templatetags_modules, substitute the result for templatetags_modules.
  convert to an integer first element of the value under the 'content-length' key of the meta_data dictionary, substitute it for content_length.
  convert processors elements into a tuple, substitute it for _standard_context_processors.
  try,
  args is a list containing arg surrounded by double quotes for every arg in args.
  call the function six.reraise with 3 arguments: ImportError, instance of ImportError class created with an argument msg,
  call the function validate_ipv4_address with an argument value.
  value under the comment_lineno_cache key of the lineno_comment_map dictionary is an empty string.
  if self.verbosity is greater or equal to 3,
  join first element of django.__path__, string 'conf' and subdir into a valid file path, return it.
  call the method self.setFeature with 2 arguments: handler.feature_external_ges and boolean False.
  if not,
  substitute obj._meta.concrete_model for concrete_model.
  existing_headers is a set containing lowercase strings header for every header in vary_headers.
  return encoding.
  is_required is boolean False.
  raw string '(?:<br clear="all">|<i><\/i>|<b><\/b>|<em><\/em>|<strong><\/strong>|<\/?smallcaps>|<\/?uppercase>)' and re.IGNORECASE,   substitute the result for html_gunk_re.   call the function re.compile with 2 arguments: raw string '((?:<p>(?:%s).*?[a-zA-Z].*?</p>\s*)+)',
  from django.core.cache import caches to the default name space.
  incremental is boolean False.   EMPTY_DICT is an empty dictionary.
  call the method self.iterlists, return list of results.
  call the method handler.addQuickElement with 2 arguments: string 'language' and value under the 'language' key of the self.feed dictionary.
  translators_comment_start is None.
  substitute auto_id for self.auto_id.
  return value.
  return the absolute path of file path filepath, substitute it for filepath.
  append list with element inner to list containing first start elements of result, substitute it for result.
  do nothing.
  define the function contains with 2 arguments source and inst.
  call the method parser.parse, return the result.
  try,
  define the function _split_statements with an argument content.
  return self.token.
  if not,
  skip this loop iteration.
  if IndexError, TypeError or ValueError exception is caught,
  if opts.model is None.
  define the function parse_accept_lang_header with an argument lang_string.
  from django.utils.html import conditional_escape and format_html into default name space.
  otherwise if value is an instance of datetime.date,
  define the function server_bind with an argument self.
  return an instance of a ResolverMatch class, crated with arguments self.callback, args, kwargs and self.name.
  call the method self.configure_custom with an argument config, substitute the result for result.
  if StandardError, renamed to e, exception is caught,
  if field is contained in self.errors,
  try,
  if length of words is greater than length,
  return EventHandler.modified_code.
  raise a ValidationError exception with arguments self.message, code set to self.code and params set to params.
  remove the 'use_natural_primary_keys' key from the options dictionary and substitute it for self.use_natural_foreign_keys,
  from __future__ import unicode_literals into default name space.
  if ImportError exception is caught,
  call the method value.replace with an argument tzinfo as timezone, return the result.
  substitute '%s' in a string "Merging %s" with app_label,
  if s is an instance of six.text_type or Promise,
  define the method entity_decl with arguments self, name, is_parameter_entity, value, base, sysid, pubid and notation_name.
  if self.use_natural_primary_keys is false and obj doesnt have 'natural_key' argument.
  call the method apps.get_model with an argument model_identifier.
  return the result.   decorator function register.filter with an argument is_safe set to boolean True.
  compile regex from the raw string '(\d{4})-(\d\d?)-(\d\d?)$', substitute it for RE_DATE.
  call the function compile_string with 2 arguments: template_string and origin, substitute the result for self.nodelist.
  from yaml import CSafeLoader as SafeLoader into default name space.
  domain_whitelist is a list containing string 'localhost'.
  join the resulting sequence in a string with comma as separator, assign the string to cc.   substitute response dictionary value under the key 'Cache-Control' for cc.
  if ch2 equals string '?',
  if nodelist is true,
  if self.field.show_hidden_initial is true,
  if source is an instance of inst class,
  substitute length of values for len_values.
  substitute months for self.months.
  if value under the 'setting' key of the kwargs dictionary is equal to string 'LANGUAGES' or strnig 'LANGUAGE_CODE',
  if app_config.models_module is None.
  call the method self.clear_checkbox_id with an argument checkbox_name, substitute the result for checkbox_id.
  django.core.exceptions import ImproperlyConfigured, ValidationError, NON_FIELD_ERRORS and FieldError into default namespace.
  self.tokens is an empty dictionary.
  return boolean False.
  derive the class CheckboxChoiceInput from the ChoiceInput base class.
  return result.
  if offset is lesser than integer 0, sign is set to '-', otherwise sign is '+',
  if not,
  append value to the self.sign, return the result.
  raise an exception.
  define the method content with an argument self.
  get config dictionary element under 'root' key, if it exists substitute it for root, if not, root is None.
  define the method __nonzero__ with an argument self.
  define the method delete_cookie with 4 arguments: self, key, path set to character '/' and domain set to None.
  if TemplateSyntaxError, renamed to e, exception is caught,
  from the base class of the class TypedChoiceField.   define the method _coerce with arguments self and value.
  call the method obj.delete.
  call the method field_stream.read with an argument: over_bytes subtracted from integer 4, substitute the result for over_chunk.
  call the function force_text with an argument option_value, substitute the result for option_value.
  define the method render with 2 arguments: self and context.
  'determine whether string is singular or plural.', where '%s' is replaced with number.   if not,
  call the method self.compile_filter_error with 2 arguments: token and e, if it evaluates to false,
  do nothing.
  substitute i for self.pointer.
  call the method unescape with attrvalue as the argument on the self class instance, substitute the result for attrvalue.
  element of data at the index last equals to newline bytes character.
  if response.streaming is True,
  define function patch_cache_control, with response and dictionary set of arguments, kwargs, as arguments.
  remove first element of unhandled_params.
  if formfield has an attribute 'queryset',
  raise a exception of CommandError class, with string "App '%s' does not have migrations" with '%s' replaced with app_label as the argument.
  return value of the method field.rel.to._meta.pk.to_python called with an argument v.   call the m2m_convert function with pk as argument, for every pk in field_value, substitute the value under the field.name key of the m2m_data dictionary.
  if not, substitute self.field.initial for data.   if data is an callable object,
  substitute decimals for digits.
  split ip_str into parts by ':', for every hextet in the result,
  if self.lookups is not None,
  decorator stringfilter,
  if ImportError exception is caught,
  append '0' to digits.
  return text.
  call the method blankout with 2 arguments: part and 'P', write the result to out.
  substitute FILE for TYPE.
  from django.core.serializers.base import DeserializationError into default name space.
  use the result as an argument for the call to the function strip_spaces_between_tags, return the result.   derive the class TemplateTagNode from Node base class.
  with value result of the conditional_escape function called with an argument v for key k.   call the method format_string.format with 2 arguments: unpacked list args_safe and unpacked dictionary kwargs_safe,
  append an empty string to dirs list.
  call the __init__ method from the base class of the class SimpleTemplateResponse, with 3 arguments: an empty string, content_type and status.
  from __future__ import unicode_literals into default name space.
  define the method _iter with an argument self.
  opts.localized_fields, opts.labels, opts.help_texts and opts.error_messages, substitute the result for fields.   for every k and v in return value of the function six.iteritems called with an argument fields, if n is false, append it to a list,
  call the method self.has_previous, if it evaluate to false, call the self.has_next method, return the result.
  if not,
  if StandardError, renamed to e, exception is caught,
  substitute sys.maxsize for MAXSIZE.
  for every module in templatetags_modules,
  yield string 'month' as an return value of the generator.
  call the function force_text with 3 arguments: old_field_name, self._encoding and errors as a string 'replace',
  if plan_node is not contained in shown and first element of plan_node equals to app_name,
  define the method m with an argument self.
  derive the class DebugNodeList from the NodeList base class.
  call the method UnicodeDecodeError.__str__, with self as the argument, substitute the result for original.
  decorator function register.filter with an argument is_safe set to boolean True.
  append decimals to parts.
  if self doesnt have an '_deleted_form_indexes' attribute,
  call the function get_library with an argument taglib, substitute the result for lib.
  define the function _make_key with 9 arguments: args, kwds, typed, kwd_mark as a tuple with an element result of the function object,
  use it as an argument for the call to the glob.iglob, for every candidate in result,   call the method os.path.basename with an argument candidate, is result is contained in targets,
  call the method self.to_python with an argument value, strip the whitespaces from the result, substitute it for value.
  if end is an instance of unicode,
  call the method handler.handle_raw_input with 5 arguments: self._input_data, self._meta, self._content_length, self._boundary,
  if not,
  from django.utils.functional import total_ordering into default name space.
  months is a tuple with 12 elements: strings 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov' and 'Dec'.
  substitute self.entity_decl for parser.EntityDeclHandler.
  define the method full_clean with an argument self.
  default set to None and help set to string 'Overrides the default address where the live server (used '  'with LiveServerTestCase) is expected to run from. The default value is localhost:8081.'   call the function get_runner with arguments settings and self.test_runner, substitute the result for test_runner_class.
  content_length is integer 0.
  substitute TemplateDoesNotExist for self.find_template_cache dictionary value under the key key.
  call the method handler.addQuickElement with 2 arguments: string 'updated' and result of the function rfc3339_date,
  assign the result to ctypes and opts.   get the value under the 'boundary' key of the opts dictionary, substitute it for boundary.
  define the method _update_errors with 2 arguments: self and errors.
  define the method __next__ with an argument self.
  inplural is boolean False.
  define the method is_hidden with an argument self.
  called with an argument w, and sub_widgets as an empty string, append the result to output.   call the function format_html with 3 arguments: self.outer_html,
  raise an CommandError exception with an argument "Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed.",  where '%s' is replaced with program.
  call the method self.widget.decompress with an argument initial, substitute the result for initial.
  call the method handler.addQuickElement with 2 arguments: string 'description' and value under the 'description' key of the item dictionary.
  call the x.split method with arguments: character '=' and integer 1, store the result in k and v, respectively.
  otherwise if name is not None and filter_func is not None,
  from django.core import validators into default name space.
  decorator decorator.
  call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs,
  BM_compatible is boolean True.
  substitute config dictionary value under '()' key for factory.
  split settings.SETTINGS_MODULE by '.' character, substitute the first element of the result for project_name.
  call the method cgi.parse_header with an argument content_disposition, assign the result to _ and params, respectively.
  call the method self._callback_strs.add with an argument lookup_str.
  call the method re.split with 2 arguments: string '\n{2,}' and value, substitute the result for paras.
  call the method self.coerce with an argument choice, append the result to new_value.
  from __future__ import unicode_literals into default name space.
  substitute unicode for text_type.
  raise an ImproperlyConfigured with an argument string 'Loader does not define a "load_template" callable template source loader'.
  page_range is a property object with _get_page_range as a getter method.
  queryset set to qs and unpacked dictionary kwargs.   define the method initial_form_count with an argument self.
  try,
  get the value under the key key of the self.cookies dictionary, substitute max-age for 'max-age' key of the returned dictionary.
  raise an TemplateDoesNotExist exception with an argument string "No template names provided".
  call the function to_current_timezone with an argument, substitute the result for value.
  substitute value under 'unique_id' key of item dictionary for unique_id.
  open filename file in write mode, with the file descriptor renamed to outfile, perform,
  call the method field.clean with an argument field_value, append the result to clean_data.
  skip this loop iteration.
  call the method self.run_shell with an argument shell set to value under the 'interface' key of the options dictionary.
  try,
  server_address is a tuple containing 2 initial elements: addr and port.
  raise an TypeError exception with an argument string "sep must be None or a string".
  covert to lowercase locale elements from (p+1)-th index to the end, append it to the previous result, return it.   if not,
  define the method bound_data with arguments self, data and initial.
  if not,
  define the method render with 2 arguments: self and context.
  substitute url_name for self.url_name.
  define the function force_text, with s, encoding set to 'utf-8', strings_only set to False, errors set to string 'strict' as arguments.
  append string '</select>' to output.
  call the method models.signals.post_migrate.send with 5 arguments: sender set to app_config, app_config set to app_config,
  convert value to an string and substitute it for value.
  convert priority into a floating point integer, substitute it for priority.
  if number is greater than self.num_pages,
  use the result as an argument for the call to the function mark_safe, return the result.   if p equals integer 0,
  if self has an '_regex_validator' attribute and self._regex_validator is contained in self.validators,
  if '_' is contained in locale,
  from pprint import pformat into default name space.
  substitute current_app for self._current_app.
  if not,
  join into a file path: self.locale_dir and string '.pot' appended to domain converted to string, substitute it for potfile.
  call the method form.add_prefix with an argument self, substitute the result for self.html_name.
  property decorator,
  pathext is an list containing an empty string.
  if level is not None,
  if self.value equals self.choice_value, return boolean True, if not, return boolean False.
  instantiate TimestampSigner object with arguments key and salt set to salt, call its method unsign with arguments:
  call the function warnings.warn with 3 arguments: string "`%s.%s` is deprecated, use `%s` instead.",
  define the method __init__ with 4 arguments: self, name, old and new set to None.
  from django.utils import six into default name space.
  if not,
  if not,
  call the function chain with 2 arguments: self.choices and choices, convert the result into a list and substitute it for choices.
  call the method queryset.none, substitute it for qs.
  __D2 is a raw string '(?P<day>[ \d]\d)'.
  if not,
  try,
  if logging_config is true,
  substitute stream for self._stream.
  remove dirname from the dirnames.
  return a string "<UTC>".
  substitute producer for self._producer.
  if ImportError exception is caught,
  split value by newline characters, substitute the result for lines.
  return t.
  define the method tzname with 2 arguments: self and dt.
  if not,
  derive the class SafeText from six.text_type and SafeData base classes.
  and unpacked dictionary kwargs.   define the method clean with 2 arguments: self and value.
  if formfield is true,
  property decorator,
  return an empty list.
  nodelist_true_output is None.
  use the result as the argument for the call to the function hashlib.sha1, call the hexdigest method on the result,   join template_name and previous final result into a string, separated with '-', return it.   if not,
  add key to the self.bad_cookies set.
  otherwise if func is callable,
  define the method reload with an argument self.
  call the method self.itervalues, return list of results.
  if self.forms is true,
  if threading is true,
  derive the class CommentNode from Node base class.
  try,
  get the value under the mem_args key of the cache dictionary, return it.
  if f doesnt has an 'save_form_data' attribute,
  sum max_num and DEFAULT_MAX_NUM, substitute the result for absolute_max.
  define the function new_method_proxy with an argument func.
  if not,
  return iri.
  if self.localize is true,
  call the method self.importer with an argument used.
  return an empty string.
  if not,
  return an empty string.
  call the method tag.groups, substitute the result for closing_tag, tagname and self_closing, respectively.
  formated with t.contents, filemsg and t.lineno.   otherwise if t.token_type equals TOKEN_VAR,
  return value.
  if endblock.contents is not contained in acceptable_endblocks,
  substitute self._upload_handlers for handlers.
  "That port is already in use." for errno.EADDRINUSE and "That IP address can't be assigned-to." for errno.EADDRNOTAVAIL.   try,
  internal_use_only is boolean False.
  define the method _clean_fields with an argument self.
  _func_defaults is a string "func_defaults".
  if it is smaller than the value of dictionary kwargs under the key 'max_age', substitute kwargs value under the key 'max-age' by it.   if cc contains item 'private' and kwargs contains item 'public',
  from django.utils.regex_helper import normalize into default name space.
  widget set to widget, label set to label, initial set to initial, help_text set to help_text, unpacked list args,   and unpacked dictionary kwargs.   substitute choices for self.choices.
  if not,
  if self.timezone is false,
  where '%s' is replaced with top_dir.   call the function handle_extensions with 2 arguments: value under the 'extensions' key of the options dictionary,
  call the method connection.introspection.table_names with an argument cursor, substitute the result for table_names.
  define the function remove_move with an argument name.
  from django.utils.encoding import force_text into default name space.
  substitute link for values under the NEXT key of the last dictionary and PREV key of the root dictionary.
  if any resulting element is true, return boolean True, otherwise return boolean False.   convert os.sep into a string and append '*' to it, substitute the result for dir_suffix.
  if viewname is not an instance of the six.string_types object,
  define the function flatten_result with an argument source.
  widgets is a tuple with 2 elements: instance of DateInput class, created with 2 arguments: attrs as attrs and format as date_format,
  derive class Command from the BaseCommand base class.
  if name is None and filter_func is None,
  append the result to app_dirs.   join app_dir and string 'models/sql' into a file path, use the result as an argument for the call to the function os.path.normpath,
  define the method _get_to_python with 2 arguments: self and field.
  remove 'end' key from the kwargs dictionary, if it exists substitute it for end, if not end is None.
  define the method __add__ with 2 arguments self and rhs.
  call the function get_tag_uri with 2 arguments: values under 'link' and 'pubdate' keys of item dictionary, substitute the result for unique_id.
  call the method self._populate,
  call the function dropwhile with 2 arguments: function len and msgs spit into parts at newlines, join the result into a string,
  decorator deconstructible,
  if template_dirs is false,
  derive the class Page from the collections.Sequence base class.
  do nothing.
  call the self.xml.endDocument method.
  derive the class InputStreamExhausted from the Exception base class.
  define the method _has_changed with arguments self, initial and data.
  to_unicode is an lambda function with an argument s, result is the result of the function force_text,
  if length of value is not equal to integer 1,
  delete entry under the attr key of the attrs dictionary.
  format string "%s%s%s" with 3 elements: result of the function random.getstate, result of the call the the function time.time,
  return self.id.
  create a printable representation of self.urlconf_name object, substitute it for urlconf_repr.
  continue with the next iteration of the for loop.
  if url_name exists substitute it for view_path, if not substitute .self._func_path for view_path.
  fields is an tuple containing instances of the class DateField, created with 3 arguments: input_formats set to input_date_formats,
  if field.rel.to._default_manager has an atttribute 'get_by_natural_key',
  define the function get_resolver with an argument urlconf.
  if fixture_name is not equal to string 'initial_data' and fixture_files is false,
  if it exists return the second element of the result, if not, return alternate.   define the method set_cookie with 9 arguments: self, key, value set to an empty string, max_age set to None, expires set to None,
  return value.
  for every char in result of the self.add_truncation_text, called with 2 arguments: an empty string and truncate.
  return integer -1.
  separated by newline, substitute it for msgs.   if not,
  call the method self.xml.startElement with an argument string 'object'.
  pop the element form the path as substitute the result for ns.
  if token_string starts with VARIABLE_TAG_START,
  from django.utils.timezone import utc and get_fixed_timezone into default name space.
  if not,
  substitute c for factory.
  _urllib_robotparser_moved_attributes is a list containing an instance of MovedAttribute class, created with 3 argument: strings,
  replace '%r' from string '\nServer stopped.\nNote that the test database, %r, has not been deleted. You can explore it on your own.',  with db_name, substitute it for shutdown_message.
  return j.
  try,
  from django.utils.encoding import force_text into default name space.
  if ValueError exception is caught,
  return an instance of FixedOffset class, created with 2 arguments: offset and name.
  use the result as an argument for the call to the method final_output.extend.   call the method connection.creation.sql_for_pending_references with 3 arguments: refo, style and pending_references,
  tuple with 2 elements: start and end and boolean False, append the result to result.   substitute end for upto.
  call the method token.split_contents, substitute the result for bits.
  substitute stream_or_string for self.stream.
  call the method data.replace with an argument microsecond set to integer 0, substitute the result for data.
  derive the class DefusedExpatParser from the _ExpatParser base class.
  call the method self.nodelist.render with an argument context, substitute the result output.
  return the result.   if type of s equals bytes,
  append tuple with 2 elements: command and token.source, append the result to self.command_stack.
  sign is a string '-'.
  if self.active_writers equals integer 0 and self.waiting_writers equals integer 0 and self.active_readers equals integer 0,
  from django.forms.models import everything into default name space.
  if only_initial is false,
  covert to lowercase language element at (p+1)-th index, append it to the previous result,   covert to lowercase language elements from (p+2)-th index to the end, append it to the previous result, return it.   convert fist p elements of language to lowercase, append '_' to it,
  if offset is an instance of timedelta class,
  call the function force_text with an argument value, substitute the result for value under the 'value' key of the final_attrs.
  raise a ValueError exception with an argument string "JSON can't represent timezone-aware times.".
  use the app_config, style and connection as arguments for the call to the sql_create, sql_custom and sql_indexes functions,  append the results respectively, return the result.
  try,
  return a string '%02d' formated with self.data.minute.
  import module logging.
  from django.db import models into default name space.
  call the function force_str with an argument url, use the result as an argument for the call to the function unquote, substitute the result for url.
  flush the output buffer of the self.stdout object.
  substitute the result for value under the 'isPermaLink' key of the guid_attrs dictionary.   call the method handler.addQuickElement with 3 arguments: string 'guid', value under the 'unique_id' key of the item dictionary,
  return attrs.
  if not,
  call the fastcgi_help function, return the result.
  from importlib import import_module into default name space.
  substitute timezone for self.timezone.
  append arg to ',', substitute the result for arg.
  substitute the result for key.   pdict is an empty dictionary.
  from django.core.management.color import no_style into default name space.
  finally perform,
  return boolean True.
  call the function unicodedata.normalize with 2 arguments: string 'NFKD' and thousand_sep, put the result and thousand_sep into a set,
  call the self.to_python method with an argument value, strip the result of the whitespaces from the sides, substitute the result for value.
  convert self.changed_data into boolean, return it.
  if ValueError exception is caught,
  if end is lesser than integer 0,
  define the method is_multipart with an argument self.
  filesize_number_format with result of division of bytes by PB as an argument, substitute the result for value.   call the function avoid_wrapping with an argument value, return the result.
  call the method parser.compile_filter with an argument, second element of bits, substitute the result for val1.
  remove idx-th element from self list.
  return self._errors.
  if not,
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  value under '_data' key of obj_dict is a dictionary created with tuples containing 2 elements: k and result of the function,
  if code is not None
  try,
  call the method self.next_token, substitute the result for token.
  call the method self.style.MIGRATE_HEADING with an argument string "Optimizing...", write it to self.stdout.
  html set to boolean True and truncate set to string ' ...', return the result.   decorator function register.filter with an argument is_safe set to boolean False.
  append attr.name to attrs for every attr in self._moved_attributes.
  from django.core.serializers.python import Deserializer as PythonDeserializer into default name space.
  from collections import OrderedDict into default name space.
  if accept_lang equals '*',
  get the first space decremented with integer 1 elements from string line, append newline character to it, and yield the result.
  call the method zfile.close.
  call the method self.Z, substitute the result for seconds.
  substitute attrs for self.attrs.
  call the method self.build_attrs with 3 arguments: attrs, type set to self.input_type, name set to name,
  define the method setlistdefault with 3 arguments: self, key and default_list set to None.
  derive the class metaclass form the meta base class.
  define the method widget_attrs with arguments self and widget.
  from __future__ import unicode_literals into default name space.
  if not,
  call the function conditional_escape with an argument arg, call the method join on the result with an argument value,
  if self_closing is true or tagname is contained in html4_singlets,
  return new_class.
  return attrs.
  from django.apps import apps into default name space.
  try,
  substitute result for self.find_template_cache dictionary value under the key key.
  substitute the result for RFC850_DATE.   call the function re.compile with an argument raw string '^\w{3} %s %s %s %s$' formated with __M, __D2, __T and __Y,
  call the method self.resolve with an argument c, substitute the result for c.
  substitute i for value under the 'counter0' key of the loop_dict dictionary.
  import module json.
  define the function boolean_check with an argument v.
  for every value in initial call the function force_text with an argument value, add the results into a set, substitute the resulting set for initial_set.
  from django.utils.encoding import force_text and python_2_unicode_compatible into default name space.
  raise a SerializerDoesNotExist exception with an argument format.
  break from the loop execution.
  and digestmod set to hashlib.sha1, return the result.   define the function constant_time_compare with 2 arguments: length set to integer 12,
  if six.PY3 is true,
  derive the class TypedChoiceField from the base class ChoiceField class.
  return a string "<DjangoTranslation lang:%s>", where '%s' is replaced with self.__language.
  define the method _isdst with 2 arguments: self and dt.
  convert to integer value of dictionary cc under the key 'max-age',
  define the function timeuntil_filter with 2 arguments value and arg set to None.
  match is None.
  substitute self.unparsed_entity_decl for parser.UnparsedEntityDeclHandler.
  skip this loop iteration,
  and fk.rel.to is not contained in result of the call to the method parent_model._meta.get_parent_list.   raise an ValueError with an argument string "fk_name '%s' is not a ForeignKey to '%s.%'.", where '%s' is replaced with,
  define the method add_item_elements with 3 arguments: self, handler and item.
  define the method __init__ with 6 arguments: self, dict_ set to None, autoescape set to True, current_app set to None,
  if not,
  call the function find_template_loader with an argument loader_name, substitute the result for loader.
  if exception of class Exception, as e, is caught,
  output_transaction is boolean True.
  call the method (hidden_widget.value_from_datadict with 3 arguments: self.data, self.files and initial_prefixed_name,
  if length of bits is not equal to integer 6,
  from django.core.exceptions import ValidationError into default name space.
  otherwise if ch equals a string ':',
  define the method clean with an argument self.
  match rest string with self.DIGIT_PATTERN regex, if it evaluates to false,
  substitute object_list for self.object_list.
  for every model in return value of the function router.get_migratable_models, called with arguments:
  substitute is_reversed for self.is_reversed.
  raise an base.DeserializationError exception with an argument string "<%s> node has invalid model identifier: '%s'",
  define function force_bytes with s, encoding set to 'utf-8', strings_only set to False and errors set to 'strict' as arguments.
  call the function func with 2 arguments: self._wrapped and unpacked list args.
  if Resolver404, renamed to e, exception is caught,
  call the method msgs.decode with an argument string 'utf-8', substitute it for msgs.
  if Exception exception is caught,
  call the method tuple.__new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs, substitute the result for self.
  call the get_serializer function with an argument format, call the return value object and substitute it for s.
  calculate negative length of s, by modulus integer 4, use the result as the number of '=' characters to be stored in pad.
  define the method items with an argument self.
  if option_value is contained in selected_choices,
  call the method datetime.utcnow, on the result call the method replace with an argument tzinfo set to utc, return the result.
  from django.utils.encoding import smart_text, force_str and force_text into default name space.
  define the method IE_sanitize with arguments self and filename.
  return an empty dictionary.
  call the method timezone.tzname with an argument None, return the result.
  comment_lineno_cache is None.
  call the method dig2.digest, substitute the result for u.
  msg is a string "Invalid HTTP_HOST header: %r.", replace '%r' with host.
  from collections import OrderedDict into default name space.
  define the method __reduce__ with an argument self.
  do nothing.
  for every w in self.widgets, if all elements w.is_hidden are true, return boolean True, otherwise return boolean False.
  if name is contained in existing,
  substitute _itervalues for itervalues.
  multiply offset.days, integer 24 and integer 60, sum the result with floored result of division of offset.seconds,
  and replace %r with self.obj, return the result.   define function python_2_unicode_compatible, with klass as an argument.
  if key is contained in d,
  if not,
  add decimal_sep and dec_part, substitute the result for dec_part.
  if self.field.localize is true,
  if not,
  property decorator,
  increment chunk by over_chunk.
  define the method update with 2 arguments: self and other_dict.
  call the function mark_safe with an argument string ' selected="selected"', substitute the result for selected_html.
  if months is true,
  call the method handler.addQuickElement with 2 arguments: string 'name' and value under the 'author_name' key of the self.feed dictionary.
  split string s once, with '=' sign as a delimiter, assign the resulting list to the t.
  messages is an empty dictionary.
  call the method handler.addQuickElement with 2 arguments: string 'subtitle' and value under the 'subtitle' key of the self.feed dictionary.
  call the method handler.endElement with an argument string 'channel'.
  input_attrs, append the result to inputs list.   join inputs elements into a string, separated with newline character, use it as an argument for the call to the function mark_safe,
  if bytes is contained in resultclasses, cls._delegate_bytes is boolean True, otherwise it is boolean False.
  append None to bits.
  static method,
  substitute the result for url_fields.   call the function urlunsplit with an argument url_fields, substitute the result for value.
  define the method has_changed with an argument self.
  call the method query.lists, substitute the result for query.
  call the function os.kill with os.getpid() and negative exit_code as arguments.
  from PIL import Image into default namespace.
  if value has an attribute '__iter__' and value is not an instance of six.text_type and value doesnt have an attribute '_meta',
  for every name in filters,
  for every app_name and namespace_list in pattern.app_dict.items method return value,
  if key is contained in cache,
  call the method logging.getLogger with an argument string 'py.warnings', substitute the result for logger.
  where '%s' is replaced with self.id.   define the method display with an argument self.
  call the function calculate_app_template_dirs, substitute the result for app_template_dirs.
  call the method self.read, substitute the result or self._body.
  return an empty string,
  call the method node.render with an argument context, return the result.
  define the method __new__ with 5 arguments: cls, fget set to None, fset set to None, fdel set to None and doc set to None.
  increment self.active_writers by integer 1,
  if value is not equal to an empty string,
  ALLOWED_VARIABLE_CHARS is a string 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.'.
  write new line to the self.stream file stream.
  define the method remove with 2 arguments: self and item.
  get the value under the 'database' key of the options dictionary, use it as the key to get the value from the connections dictionary, substitute the result for connection.
  self._post is an instance of QueryDict created with arguments: an empty string and encoding set to self._encoding,
  if settings.DEBUG is true,
  call the function re.compile with an argument raw string "_\(((?:".*?")|(?:'.*?'))\)", substitute the result for constant_re.
  call the method filename.rfind with an argument string "\\", increment the result by one,
  append ch to quant.
  if not, substitute self.auto_id for id_.   if id_ is true,
  substitute a tuple with 2 elements: template and origin, for self.find_template_cache dictionary value under the key key.
  with an argument: value under the name key of the media_attrs dictionary, if it exists, if not use None as an argument.   define the method __str__ with an argument self.
  if not,
  join root and filename into a file path, substitute it for old_path.
  for 'errors', return value of the function force_text with an argument label for 'label', return value of the function six.text_type,   with an argument bf, for 'field', help_text for help_text, html_class_attr for 'html_class_attr' and bf.html_name for 'field_name'.    if top_errors is true,
  return result.
  return integer 0.
  get the absolute file path of the expanded_template, substitute it for absolute_path.
  call the method self.write_migration_files with an argument changes.
  return an string "Error in formatting: %s", replace '%s' with result of the function force_text,
  url is a property of the class, lambda function is getter attribute with an argument self and return value is the value under the 'Location' key of the self dictionary.
  biggest_number is integer 1.
  if custom_sql is empty,
  define the method _has_changed with arguments self, initial and data.
  replace all the occurrences of '\\\\' in string value with '\\' and all occurrences of '\\"' for '"', substitute the result for value.
  raise an NotImplementedError exception with an argument string 'Awaiting Implementation'.
  property decorator,
  call the function force_text with an argument bf_errors, format the error_row string with the result, append it to the output.
  if not,
  try,
  substitute settings.TIME_FORMAT for arg.
  if max_age is not None,
  substitute FIELD for TYPE,
  from django.utils.encoding import force_str into default name space.
  do nothing.
  with self.mutex perform,
  return value.
  if self.old_timezone is None,
  return callback and a empty string.
  if not,
  method MONTHS.index, increment the result by integer 1, substitute it for month.   call the method m.group with an argument string 'fay', convert the result into a string, substitute it for day.
  import module os.
  and unpacked dictionary kwargs, return the result.   return wrapper.
  if min_value is not None,
  define the method B with an argument self.
  define the method clear_checkbox_name with 2 arguments: self and name.
  if slots is an instance of str,
  if imoportError exception is caught,
  num is an integer 0.
  raise the exception ValueError, with string as argument, "@python_2_unicode_compatible cannot be applied",
  if not,
  define the method empty_variable with 2 arguments: self and token.
  register.tag decorator,
  if self.choices is true,
  define the function to_bytes with arguments val and encoding.
  define the function ngettext with 4 arguments: context, singular, plural and number.
  call the method executor.loader.graph.leaf_nodes and substitute its result for targets.
  _error_files is an empty list.
  define the method prepare_value with 2 arguments: self and value.
  with an argument i, for 'prefix' and self.error_class for 'error_class'.   if self.is_bound is true,
  return string 'nd'.
  call the function urlunsplit with an argument url_fields, use the result as an argument for the call to the function split_url,
  substitute self.max_num for total_forms.
  definition is an empty dictionary,
  if lengths of initial and data are equal,
  define the method ipython with an argument self.
  if self._is_rendered is false.
  yield d.
  return value.
  from itertools import chain into default name space.
  set filter_func._decorated_function objects attr attribute to value.
  get 'help_texts' attribute from the options object, if it exists substitute it for self.help_texts, if not self.help_texts is None.
  if settings.USE_L10N is true, substitute settings.USE_THOUSAND_SEPARATOR for use_grouping,
  substitute _urllib_robotparser_moved_attributes for Module_six_moves_urllib_robotparser._moved_attributes.
  define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwds.
  from django.utils.six import StringIO into default name space.
  from django.http.cookie import SimpleCookie and parse_cookie into default name space.
  zfile is an instance of GzipFile class, created with 3 arguments: mode set to string 'wb', compresslevel set to integer 6,
  unpack a dictionary with an entry id_for_label for 'for', map it through attrs mapping if attrs is true,
  and third element of result of the function sys.exc_info.   call the function import_module with an argument module_path, substitute the result for module.
  call the method update_watch.
  paths is a list containing results of the function force_text called with an argument p, for every p in paths.
  substitute the result for value under the field key of the self._errors dictionary.   if not,
  call the function make_key with 3 arguments: args, kwds and typed, substitute the result for key.
  if callback is an instance of functools.partial object,
  define the function parse_datetime with an argument value.
  call the function cleanup_url with an argument url, assign the result to filename and display_url, respectively.
  define the method handle_fk_field with self, obj and field arguments.
  _supported is None.
  dest set to string 'no_location', default as boolean False and help as a string "Don't write '#: filename:line' lines.".   call the method parser.add_argument with 5 arguments: string '--no-obsolete', action as a string 'store_true',
  if second element of t is boolean True,
  call the method dig1.update with an argument u.
  "or the 'exclude' attribute is prohibited; form %s needs updating.", where '%s' is replaced with name.   if opts.fields equals ALL_FIELDS,
  call the method parser.delete_first_token.
  ge the absolute path of the return value of the function path.expanduser with the argument target, substitute it for top_dir.
  skip this loop iteration.
  if match is true,
  context is an instance of a class Context, created with 2 arguments: dictionary created by apllying options to unpacked dictionary containing 3 entries:
  call the method formats.localize_input with an argument value, return the result.
  define the method __str__ with an argument self.
  replace all the occurrences of character '_' in name with a whitespace, capitalize the first letter and return the result.
  if not,
  from django.core.exceptions import ValidationError into default name space.
  do nothing.
  from __future__ import unicode_literals into default name space.
  if maxsize equals integer 0,
  if LookupError or TypeError exceptions are caught,
  if value is contained in self.empty_values,
  bring integer 36 to the power of factor, substitute the result for j.
  call the self.domain_regex.match method with an argument domain_part, if it evaluates to true,
  return an empty list.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  self._js is an empty list.
  if slots is not None,
  do nothing.
  call the method to_python with an argument data from the base class of the class ImageField, substitute the result for f.
  call the value.natural_key method, substitute the result for natural.
  append string 'Form' to model.__name__, substitute the result for class_name.
  where '%s' is replaced with parsed.scheme.   call the __init__ method from the base class of the HttpResponseRedirectBase class, called with arguments: unpacked list args,
  call the function bytes with an argument self, divide the result with rhs and return the reminder of the division.
  call the function endblock_re.match with an argument t.contents, substitute the result for endbmatch.
  if field equals NON_FIELD_ERRORS and opts.error_messages is true and NON_FIELD_ERRORS is contained in opts.error_messages,
  if file_name is false,
  print message to the standard output.
  from django.utils.safestring import mark_safe into default name space.
  substitute CheckboxFieldRenderer for renderer.
  substitute the result for language_code_re.   call the function re.compile with an argument raw string '^/([\w-]+)(/|$)', substitute the result for language_code_prefix_re.
  call the function user_function with 2 arguments: unpacked list args and unpacked dictionary kwds, substitute the result for result.
  if years is true,
  if middleware has an attribute 'process_response',
  help is a string "Prints the DROP TABLE SQL statements for the given app name(s).".
  if config_string is false,
  call the method sys.stderr.write with an argument string "  installed flup, then make sure you have it in your PYTHONPATH.\n".
  substitute obj for self.data.
  call the self.user_regex.match method with an argument user_part, if it evaluates to false,
  try,
  value is boolean False.
  call the method self.can_write.acquire.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  define the method tzname with 2 arguments: self and dt.
  define the method __getitem__ with 2 arguments: self and idx.
  chunks is a tuple containing 6 initial tuples:
  call the function smart_text with argument related_att, use the result as an argument for the call to the self.xml.characters method.
  if length of args is greater than integer 1,
  if input_formats is not None,
  return None.
  if AmbiguityError exception is caught,
  for every path in self.locale_paths,
  if tok.next is true,
  import module os.
  call the method signing.get_cookie_signer with an argument salt set to sum of key and salt,
  substitute self.auto_id for auto_id.
  if self.forms is true,
  django.utils import translation into default namespace.
  for every path in paths,
  define the method resolve_expression with 3 arguments: self, obj and context.
  define the method flatten with an argument self.
  return value.
  call the function user_function with 2 arguments: unpacked list args and unpacked dictionary kwds, substitute the result for result.
  substitute nodelist_empty for self.nodelist_empty.
  call the function import_module with an argument app_name.
  with unpacked list field_value as an argument, substitute the result for obj.   get the field.rel.field_name from the obj, substitute it for obj_pk.
  if ZeroDivisionError exception is caught,
  if shell is true substitute list with element shell for available_shells, if not substitute self.shells for available_shells.
  append x to self.namespaces list for every x in namespaces, only if x is true.
  raise an TemplateSyntaxError exception with an argument string "widthratio final argument must be a number".
  if self._varlist is true,
  append f.name to exclude.
  define the method F with an argument self.
  if six.PY2 is true,
  append string ".moves.urllib_robotparser" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for robotparser.
  with all '%s' strings replaced with migration_name and app_label, respectively, as an argument.   if KeyError exception is raised,
  call the method m.groupdict, substitute the result for d.
  define the function _import_module with an argument name.
  call the function _ with an argument string 'Ensure this value is greater than or equal to %(limit_value)s.', substitute the result for message.
  if self.is_reversed is true,
  call the unsign method from the base class of the TimestampSigner class with an argument value, substitute the result for result.
  skip this loop iteration.
  call the function get_language, substitute the result for language_code.
  call the function dec with an argument func, return the result.
  if query is an instance of MultiValueDict class,
  raise an InvalidTemplateLibrary exception with an argument string "Template library %s not found, tried %s",
  foreground is a dictionary created with elements: x appended to a string '3' for value under the key x of color_names dictionary,
  get the value under the 'id' key of the attrs dictionary, substitute the return value field of the self object for id_.
  if ValueError exception is caught,
  if "'stream'" is not contained in te converted into a string,
  substitute self._rollback for rollback.
  call the function self._new_gnu_trans with 2 arguments: localedir and use_null_fallback, substitute the result for translation.
  define the method render with 2 arguments: self and context.
  all_date_checks is an empty set.
  join elements of words into a string, return it.
  if length of bits is not equal to integer 3,
  derive the class HttpResponseForbidden from the HttpResponse base class.
  decorator function register.filter with 2 arguments string "phone2numeric" and is_safe set to boolean True.
  substitute value for url.
  if origin is true,
  return nothing.
  get is a tuple containing elements generated by the call to the function pformat with an argument POST_override,
  append the tempdir to self.paths_to_remove.
  call the add_argument method on the parser object, with string 'app_label', and help set to string 'App label of the application containing the migration.' as arguments.
  collect is an empty list.
  return output.
  allowed_schemes is an list containing 3 elements: strings 'http', 'https' and 'ftp'.
  call the method zbuf.getvalue, return the result.
  raise an InvalidTemplateLibrary exception with an argument string "ImportError raised loading %s: %s",
  called with an argument lang_code is true,   return lang_code.
  derive the class ArchiveException from the Exception base class.
  define the function parse_time with an argument value.
  self._producer is an empty list.
  if exception GeneratorExit is caught,
  if block_name is contained in parser.__loaded_blocks,
  from django.utils.text import normalize_newlines and slugify as _slugify into default name space.
  get format_type attribute of module object, substitute the result for val.
  substitute self.deleted_forms for forms_to_delete.
  raise an exception e.
  define the function conditional_content_removal with request and response as the arguments.
  do nothing.
  return nodelist.
  and pk.rel.parent_link is true and function pk_is_not_editable called with an argument pk.rel.to._meta.pk evaluates to true,   if function pk_is_not_editable called with an argument pk evaluates to true, or pk.name is not contained in form.fields,
  yield buf as return value of the generator.
  if current_len is smaller than or equal to length,
  calculate the length of args, substitute it for alen.
  return an empty string,
  append filename to filenames.
  substitute val_expr for self.val_expr.
  call the method self.add_fields with arguments form and i).
  flush zfile stream buffer.
  if pattern is an instance of RegexURLResolver class,
  substitute propagate for logger.propagate.
  return value.
  pop the first element from plist, convert it to lowercase, call the method decode on it, with string 'ascii' as an argument,
  if not,
  substitute url for display_url.
  call the method stat.S_IMODE with an argument st.st_mode, calculate binary OR with the result and stat.S_IWUSR, as operands,
  substitute _iteritems for items.
  define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
  derive the class Textarea from the Widget base class.
  if last_bit is true,
  define the method filter with 2 arguments: self and record.
  substitute chr for unichr.
  if f is an instance of models.FileField,
  if ValueError or TypeError exceptions are caught,
  raise a ValidationError exception with arguments self.message and code set to self.code.
  substitute block for value under the 'block' key of context dictionary.
  if pk is an instance of OneToOneField or ForeignKey classes,
  if t is contained in self.__dispatch,
  define the function main, with main_func, args defaulting to None and kwargs defaulting to None as arguments.
  call the function allow_lazy with 2 arguments: get_valid_filename and six.text_type, substitute the result for get_valid_filename.
  return a tuple containing 3 entries: output, result of the function force_text, called with 3 arguments: errors,
  raise an TemplateSyntaxError exception with an argument string "'templatetag' statement takes one argument".
  call the function force_text with 2 arguments: src and settings.FILE_CHARSET.
  define the next_space_index with 2 arguments: subject and i.
  c is an empty list.
  'Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice'.   define the method __init__ with 9 arguments: self, choices set to an empty tuple, required set to boolean True, widget set to None,
  return source and display_name.
  if m is true,
  prepend an empty string to hextets list.
  define the method __init__ with 3 arguments: self, args and kw.
  as long k is smaller than endpos,
  call the method self._close_files.
  substitute var for self.var.
  from django.core.management import call_command into default name space.
  append string " Got this from the '%s' variable." to error_msg, where '%s is replaced with self.parent_name.token.
  substitute view_name for self.view_name.
  for every message in messages,
  call the function quote_plus with 2 arguments: result of the function force_str called with an argument url,
  return boolean False.
  if ValueError exception is caught,
  call the method __init__ from the base class of the class IntegerField, with arguments unpacked list args and unpacked dictionary kwargs.
  raise a ValidationError exception with arguments self.message and code set to self.code.
  call the method self._get_to_python with an argument pk_field, substitute the result for to_python.
  for 'invalid_date' and return value of the function _ called with an string 'Enter a valid time.', for 'invalid_time.   define the method __init__ with 3 arguments: self, input_date_formats set to None, input_time_formats set to None,
  raise an exception.
  if fp is None,
  return _standard_context_processors.
  evaluate function force_bytes with path as the argument, replace all of the occurancies of the "\\" with "/" in the resulting string,
  break the loop execution.
  from django.utils.translation import ugettext_lazy as _ and ungettext_lazy into default name space.
  if cls is false,
  if widget is an instance of the NumberInput class, and string 'step' is not contained in widget.attrs,
  and pending_references append sql to the string '-- ', put the results in a list, extend alter_sql with the result.   if alter_sql,
  define the method handle_field with argument self, obj and field.
  if option_value is None,
  if self._upload_handlers is false,
  import module re.
  write it to self.stdout.   if not,
  substitute value under the key key of the self.COOKIES dictionary, substitute it for cookie_value.
  for every form in self call the form.as_p method, join the results in a string, separated by an empty string.
  increment self.active_readers by 1.
  if length of bits is lesser than integer 3 or second element of bits is not equal to string 'as',
  call the function os.path.abspath with an argument 'locale', append the result to self.locale_paths.
  sum best_doublecolon_start and best_doublecolon_len, substitute the result for best_doublecolon_end,
  return self._is_rendered.
  define the function valid_ident with an argument s.
  call the function method with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, substitute the result for data.
  define the method get_renderer with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
  substitute the result for the value under the 'day' key of the html dictionary.   output is an empty list.
  call the function dec with an argument func, return the result.
  call the method HTMLParser.__init__ with an argument self.
  return an empty list.
  third element of the return value of the function sys.exc_info.   define the class DjangoJSONEncoder from the json.JSONEncoder base class.
  derive the class DTDForbidden from the DefusedXmlException base class.
  if response has an attribute 'render' and response.render is a callable object,
  explicitly is prohibited."   call the function modelform_factory with 10 arguments: model, form as form, fields as fields, exclude as exclude,
  if not,
  response.streaming_content is an empty list.
  __all__ is a list with 15 elements: strings 'utc', 'get_fixed_timezone', 'get_default_timezone', 'get_default_timezone_name',
  define the function b64_hmac with arguments salt, value and key.
  call the function import_library with an argument module, append the result to builtins.
  return an instance of _CacheInfo class, created with 4 arguments: value under the HITS key of the stats dictionary,
  define the function __init__ with 11 arguments: self, required set to boolean True, widget set to None, label set to None,
  of the request.META dictionary is contained in settings.INTERNAL_IPS, otherwise use string 'EXTERNAL',   and result of the method record.getMessage.   call the function get_exception_reporter_filter with an argument request, substitute the result for filter.
  try,
  if field_name is false,
  call the method one_percent_re.sub with 2 arguments: string '%%' and g, substitute the result for .
  if NotImplementedError exception is caught,
  escaped is boolean False.
  skip this loop iteration.
  if key is contained in d,
  from django.core.exceptions import ValidationError into default name space.
  return settings.LANGUAGE_CODE.
  define the method format_subject with 2 arguments: self and subject.
  append block_content to a string 'end', substitute the result for self.verbatim.
  substitute it for max_age, if not, max_age is integer 0.   if not,
  fork a child process, if the result equals integer 0,
  raise an ValidationError with 2 arguments: self.error_messages dictionary value under the 'invalid_choice' key,
  define the function dictsortreversed with 2 arguments value and arg.
  define the method __getitem__ with arguments self and name.
  use global variable _supported.
  define the method build_potfiles with an argument self.
  if not,
  return media.
  from lib2to3.pytree import Leaf and Node into default name space.
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  define the method unsign with arguments self, value and max_age set to None.
  substitute second element of bits without the first and last element for format_string.
  get the integer representation of the first element of bs, return it.
  define the method value_from_datadict with 2 arguments: self, data, files and name.
  call the method self.endElement with an argument name.
  return initial.
  raise an ViewDoesNotExist exception with an argument string "Could not import '%s.%s'. View is not callable.",
  m2m_convert is a lambda function with an argument v, return value is the result of the function smart_text called with an argument:
  use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.   for every operation in migration.merged_operations,
  where '%r' is replaced with name and filter_func, respectively.   define the method filter_function with 3 arguments: self, func and unpacked dictionary flags.
  self.__name is a string "%s%02d%02d", replace '%s' with sign, '%02d' is replaced with absolute value of offset divided by 60,
  call the method parser.add_argument with 2 arguments: string '--template' and help set to string 'The path or URL to load the template from.'.
  from django.core.exceptions import DisallowedRedirect into default name space.
  define the method end_object with arguments self and obj.
  if StandardError, renamed to e, exception is caught,
  format a string "(?P<%s>%s)" with groupid and tok.regex, append it to the parts.
  define the method __init__ with an argument self.
  call the function logging_config_func with an argument DEFAULT_LOGGING.
  call the function get_language, substitute the result for language_code.
  divide hits by a floating point number self.per_page, convert its ceiling value to an integer and substitute it for self._num_pages.
  tried_modules is an empty list.
  raise an TemplateSyntaxError exception with an argument string "next-to-last argument to 'regroup' tag must be 'as'".
  define the method __getitem__ with arguments self and index.
  derive the class Tok from the object base class.
  call the method validators.MaxValueValidator with max_value converted into an integer, append the result to list self.validators.
  call the method t.nud with an argument self, substitute the result for left.
  put every header in newheaders in a list, only if newheader converted to lowercase does not exist in existing_headers,
  substitute result for value under key key of self dictionary.
  decompress is boolean True.
  substitute text_kwargs for candidate_subs.
  substitute '%s' in a string "  %s:\n" with return value of the self.style.MIGRATE_LABEL method called with argument writer.filename,
  if t.token_type == TOKEN_TEXT:
  property decorator,
  do nothing.
  try,
  skip this loop iteration,
  define the method super with an argument self.
  convert settings.LOCALE_PATHS into a list and extend list self.locale_paths with it.
  if values under the 'app_label' and 'migration_name' keys of the options dictionary are True,
  call the method self._reset_dicts with an argument dict_.
  if the UnicodeEncodeError exception is caught,
  import module sys.
  do nothing.
  import module os.
  define the function _helper with 2 arguments list and tabs set to integer 1.
  call the method __getitem__ with an argument key from the base class of the class DictWrapper, substitute the result for value.
  import module subprocess.
  from django.db.migrations.autodetector import MigrationAutodetector into default name space.
  define the method reset with an argument self.
  if every input_val in special_floats,
  params is a list with second element of source as a element.
  from django.core.handlers.wsgi import WSGIHandler into default name space.
  do nothing.
  __D is a raw string '(?P<day>\d{2})'.
  define the method close with an argument self.
  raise an CommandError exception with an argument string "Django doesn't know which syntax to use for your SQL statements,\n"
  define the function ngettext with 3 arguments: singular, plural and number.
  subtract decimals from digits, substitute the result for whole_digits.
  try,
  first element of bits and first element of remaining_bits.   call the method parser.parse with an argument tuple, with an element string 'endwith', substitute the result for nodelist.
  call the method self.indent with argument integer 2.
  call the function timedelta with an argument seconds as negative time.timezone, subtract the result from the result of the call,
  call the function new_method_proxy with an argument str, substitute the result for __str__.
  substitute self.urlconf_module for self.urlconf_module.   try,
  for every dirpath, dirnames and locale_filenames in directory tree starting at the basedir directory.
  if self._wrapped is contained in empty,
  increment i by integer 1,
  call the nethod self._isdst with an argument dt, if it evaluates to true,
  action set to 'append', default is a list containing string 'py' and help set to string:   'The file extension(s) to render (default: "py"). Separate multiple extensions with commas, or use -e multiple times.'.   call the method parser.add_argument with 6 arguments: string '--name', string '-n', dest set to string 'files',
  if not,
  if bad_app_labels is true,
  if self does not have 'bad_cookies' attribute,
  for 'maxSpare', value under the key 'minspare' of options dictionary converted to an integer for 'minSpare',   value under the key 'maxchildren' of options dictionary converted to an integer, for 'maxChildren',   and value under the key 'maxrequests' of options dictionary converted to an integer, for 'maxRequests'.   append string '_fork' to flup_module.
  return data.
  define the function python_reloader with main_func and kwargs as arguments.
  raise an exception DjingoUnicodeDecodeError, with s and list of arguments *args from object e, as the arguments.
  from __future__ import unicode_literals into default name space.
  update the self._catalog dictionary with other._catalog.
  raise a ValueError exception with an argument "You can only use `unpack_ipv4` if `protocol` is set to 'both'".
  merge_migrations is an empty list.
  call the method self.add_prefix with an argument fieldname, substitute it for prefix.
  otherwise if self._delegate_text is true,
  if tuple current_version elements are greater or equal to (3, 4), respectively,
  join elements of name into a string, substitute it for param.
  if the value of the kwargs dictionary under the key k is not equal to v,
  widget is an instance of HiddenInput class
  do nothing,
  if not,
  substitute options for self.options.
  if not,
  call the method data.encode with 2 arguments: fp.encoding and errors, substitute the result for data.
  if AttributeError exception is caught,
  status_code is an integer 304.
  call the method f.save_form_data with 2 arguments: instance and value under the f.name key of cleaned_data dictionary.
  code is a string 'min_value'
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  call the function func with 2 arguments: obj and unpacked list arg_vals, substitute the result for new_obj.
  for every handler in settings.FILE_UPLOAD_HANDLERS,
  join statements into a string, separated by white spaces, append it to statements.
  message is an string 'Unknown field(s) (%s) specified for %s'.
  if self.parent_name.filters is true or self.parent_name.var is an instance of Variable.
  if value under the 'feed_copyright' key of the self.feed dictionary is not None,
  call the function six.text_type with return value of the function bytes(s), encoding and errors as the arguments,
  call the method widget_attrs with an argument widget, from the base class of the class IntegerField, substitute it for attrs.
   substitute whitelist for self.domain_whitelist.
  convert protocol to lowercase, use it as a key to get a value from the ip_address_validator_map dictionary, return it.
  exc_info is an tuple with 3 elements: None, result of method record.getMessage and None.
  if finder is None,
  define the method tzname with 2 arguments self and dt.
  substitute old_mod for self.mod.
  insert none_value at the beginning of the choices list.
  if bit starts with '_("' ot bit starts with "_('",
  from django.conf import settings into default namespace.
  if KeyError exception is caught,
  substitute token_type and contents for self.token_type and self.contents.
  substitute last four elements of base for base.
  call the method __init__ form the base class of the Command class.
  call the method clean with an argument data from the base class of the class URLField, return the result.
  split str_number by '.', substitute the result for int_part and dec_part, respectively.
  from django.utils.deprecation import RemovedInNextVersionWarning into default name space.
  title is an empty string.
  if KeyboardInterrupt exception is caught,
  of the obj object.   if commit is true,
  call the method self.add_error with 2 arguments name and e.
  if not,
  for every app_name is app_names,
  call the function escape with an argument value, return the result.
  if data is not None, substitute data for initial_value, otherwise data_value is an empty string.
  doesn't support that type of template loading. Consider removing that line from TEMPLATE_LOADERS.",   where '%r' is replaced with loader.   return None.
  raise an ValueError with an argument string "attempted relative import beyond top-level package".
  left justify string s in a field of width equal to the sum of length of s and reminder of the division of length of s by integer 4,
  substitute the list of results for values.   return an instance of a class IfChangedNode, created with 3 arguments: nodelist_true, nodelist_false and unpacked list values.
  if string 'trimmed' is contained in result of the method t.split_contents, trimmed is boolean True, otherwise is boolean False.
  define the function dec with an argument func.
  define the method app_dict with an argument self.
  if found is false and, line is false or return value of the function plural_forms_re.search called with an argument line is false,
  call the function new_method_proxy with an argument len, substitute the result for __len__.
  for every form in self.saved_forms,
  raise an TypeError exception with an argument string 'other_dict must be a mapping (dictionary-like) object.'.
  sub is an empty string.
  substitute value under idx key of dictionary d for d.
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  unpacked list args, unpacked dictionary kwargs.   substitute unpack_ipv4 for self.unpack_ipv4.
  call the self.style.HTTP_INFO with an argument msg, substitute it for msg.
  consume_next is boolean True.
  if value under the 'description' key of the item dictionary is not None,
  skip this loop iteration.
  return boolean False.
  define the method __init__ with 3 arguments self, states and first.
  from django.utils.safestring import mark_safe into default name space.
  call the method self.get_date_error_message with an argument date_check, append the result to errors.
  get the value under the key 'database' of the options dictionary, use it as a index to get an element from connections, substitute it for connection.
  define the method __getitem__ with an argument self.
  call the function force_str with an argument string '<%s\npath:%s,\nGET:%s,\nPOST:%s,\nCOOKIES:%s,\nMETA:%s>',
  decorator function wraps with an argument fdel.
  return hard copy of self.keyOrder elements.
  if e doesnt have an 'django_template_source' attribute,
  define the method get_template_sources with 3 arguments: self, template_name, template_dirs set to None.
  if not,
  derive the class HttpResponseRedirect from the HttpResponseRedirectBase base class.
  raise an TypeError exception with an argument string "invalid keyword arguments to print()".
  and boolean False, append the result to result.   return result.
  if data is true,
  substitute the resulting set for selected_choices.   output is an empty list.
  instantiate class Module_six_moves_urllib_robotparser with an argument, string ".moves.urllib.robotparser" appended to __name__,
  derive the class EntitiesForbidden from the DefusedXmlException base class.
  self.month_none_value is a tuple containing 2 elements: integer 0 and second element of empty_label.
  if inverse_match is not None,
  for every lookup and arg in args,
  skip this loop iteration.
  and re.IGNORECASE, substitute the result for domain_regex.   call the re.compile function with 2 arguments: raw string '\[([A-f0-9:\.]+)\]$' and re.IGNORECASE, substitute the result for literal_regex.
  define the method content with 2 arguments: self and value.
  if extensions is false, substitute it for exts, otherwise exts is a list containing 2 elements: string 'html' and string 'txt'.
  to the function url.hexdigest(), respectively, substitute it for cache_key.   call the function _i18n_cache_key_suffix with request and cache_key as arguments, return the result.
  return value.
  initial set to None, help_text set to an empty string, error_messages set to None, show_hidden_initial set to boolean False,   validators is an empty, localize set to boolean False, label_suffix set to None.   substitute required, label and initial for self.required, self.label and self.initial.
  raise an TemplateSyntaxError exception with an argument string "'now' statement takes one argument".
  define the method expression with 2 arguments: self and rbp set to integer 0.
  return filename and display_url.
  substitute Tok.num for self.id.
  if TypeError exception is caught,
  if self.deactivate is true,
  define the method s with an argument self.
  for every matches, pat and defaults in return value of the method pattern.reverse_dict.getlist called with an argument name,
  value is an empty string.
  substitute the return value of the method self.object_list.count for self._count.
  open new_path file in 'wb' mode, with file descriptor renamed to new_file,
  from django.core.management.base import BaseCommand and CommandError into default name space.
  cached_property decorator,
  if third element from the end of the args equals string 'as',
  return self.html_name.
  if return value of the method UserModel._default_manager.exists is false and value under the 'interactive' key of the options dictionary is true,
  return default,
  substitute kwargs for media_attrs.
  pyinotify.IN_MOVED_FROM, pyinotify.IN_MOVED_TO and pyinotify.IN_CREATE, store the result in mask.   for every path in return value of the call to the function gen_filenames with argument only_new set to boolean True,
  from the base class of the SimpleCookie class call the method load with rawdata as argument.
  derive the class EmailField from the base class CharField class.
  call the function convert_old_style_list with an argument value, substitute the result for value and converted, respectively.
  join missing_fields into a string separated by string ', ', use it and opts.model.__name__ to format message, substitute the result for message.
  meta is an instance of a class named 'Meta', derived from the object base class, without any fields.
  and sub_widgets set to return value of the function sub_ul_renderer.render, append the result to output.   if not,
  self._populated is boolean True.
  return string 'https'.
  if record.exc_info is true,
  call the function converter with an argument suffix, substitute the result for value.
  derive the class TemplateResponse from the SimpleTemplateResponse base class.
  if value is an instance of Field class,
  if entry is a directory,
  call the method field.hidden_widget, substitute the result for field.hidden_widget.
  new_ip is an empty list,
  is derived from the formset base class and with fields contained in attrs, return an instance of the obtained class.   define the function all_valid with an argument formsets.
  if urlconf_name is not an instance of six.string_types class,
  call the method self.mapping.get with 2 arguments: self.tagtype and an empty list, return the result.
  from django.template import Lexer, TOKEN_TEXT, TOKEN_VAR, TOKEN_BLOCK, TOKEN_COMMENT and TRANSLATOR_COMMENT_MARK.
  for every c in self.children.   return string '(%s: %s)', formated with self.connector and string created by joining c into a string, separated by ', ',
  all_date_checks is union of all_date_checks set and date_checks set.
  call the method field.rel.get_related_field, substitute the result for field.
  var_obj is None.
  call the method unifunc.replace with an argument strfunc.
  if self._errors is None,
  if since is lesser or equal to integer 0,
  define the emethod parse with 2 arguments: self and parse_until set to None.
  substitute str for string_types.
  if KeyError, IndexError and AttributeError exception is caught,
  get 'WSGI_APPLICATION' attribute from the settings, substitute it for app_path.
  define the function with_metaclass with 2 arguments meta and unpacked list bases.
  call the method m.groups, use the first element of the result as key for obtaining value from self.config dictionary,
  return result,
  do nothing.
  call the method netloc.encode with an argument string 'idna', call the method decode on the result with an argument 'ascii',
  integer_types is a tuple with 2 elements int and long.
  if args is true,
  if 'pk' is contained in d,
  compile regex from string '^[a-z_][a-z0-9_]*$' in case insensitive mode, substitute it for IDENTIFIER.
  call the method kwarg_re.match with an argument first element of bits, substitute the result for match.
  bitwise shift integer 1 to the left by 31 spaces, return the result.
  return an instance of a SsiNode class, created with 2 arguments: filepath and parsed.
  substitute EmailInput for widget.
  content_length is None.
  call the result.rsplit method with arguments self.sep and integer 1, substitute the result for value and timestamp, respectively.
  if 'fields' attribute of Meta object is None and 'exclude' attribute of Meta object is None,
  call the method data.getlist with an argument name, return the result.
  define the method _iterlists with an argument self.
  otherwise if timezone is an instance of six.string_types and pytz is not None,
  _cached_filenames is an empty list.
  substitute name for self.name.
  add k to seen.
  open filepath file in read mode, with file descriptor as fp, perform,
  then the first element of the result of the function formats.get_format called with an argument self.format_key, return the result.   derive the class DateInput from the DateTimeBaseInput base class.
  get config dictionary element under 'datefmt' key, if it exists substitute it for dfmt, if not, dfmt is None.
  where '%s' is replaced with taglib_module and e.   try,
  from django.utils.six.moves import input into default name space.
  import module shutil.
  if over_bytes is true,
  from xml.sax.expatreader import ExpatParser as _ExpatParser into default name space.
  append ch to result.
  call the function urlquote with 2 arguments value and unpacked dictionary kwargs, return the result.
  args is a empty tuple.
  call the method msgs.decode with an argument string 'utf-8', substitute the result for msgs.
  try,
  get the values under the keys 'app_label' and 'migration_name' of the options dictionary, substitute the results for app_label and migration_name, respectively.
  define the function get_standard_processors.
  if an exception of the type UnicodeDecodeError, renamed to e, is caught,
  if field_value has an attribute '__iter__' and is not an instance of six.text_type object,
  use_l10n set to None and use_tz set to None.   call the method Context.__init__ with 5 arguments: self, dict_, current_app as current_app, use_l10n as use_l10n, use_tz as use_tz.
  return self.__name.
  if not,
  if self.required is boolean true,
  if qs.ordered is false,
  define the function now.
  if BLOCK_CONTEXT_KEY is contained in render_context and call to the method get_block with an argument self.name from the object,
  define the function title with an argument value.
  open err_log file in append mode with buffering size of the input buffer, substitute the result for sys.stderr.
  derive the class RemovedInDjango20Warning from PendingDeprecationWarning base class.
  if token.contents equals string 'else',
  define the function sql_delete with 4 arguments: app_config, style, connection and close_connection set to boolean True.
  if length of bits is smaller than integer 1,
  raise an UnrecognizedArchiveFormat exception with an argument string "Path not a recognized archive format: %s",
  import module socket.
  and include_auto_created set to boolean True,   call the method connection.creation.sql_destroy_indexes_for_model with arguments model and style, extend the output with the result.
  call the method self.xml.startElement with argument string 'object' and an empty dictionary.
  call the method parser.parse, return the result.
  for every frag in name.
  if settings.USE_L10N is true,
  derive the class SafeData from object base class.
  call the method context.render_context.push.
  if not, call the function sys.getdefaultencoding and substitute the result for fs_encoding.   app_template_dirs is an empty list.
  return template.
  otherwise substitute settings.USE_L10N for use_grouping.   if use_grouping is true substitute it for use_grouping, otherwise substitute force_grouping for use_grouping.
  return s.
  call the function re.sub with 3 arguments: raw string "\\.|.", escape_quotes and tok without the first and last element,
  return boolean False.
  if use_grouping is true,
  derive the class TypedMultipleChoiceField from the base class MultipleChoiceField class.
  from django.conf import settings into default name space.
  define the method utcoffset with 2 arguments: self and dt.
  if object response has an attribute 'render' and if response.render is callable object,
  get translation_function attribute of the t object, call the result with 3 arguments: singular, plural and number, return the result.
  call the self.stdout.write method, with string "  Applying %s..." with '%s' replaced with migration and ending set to '', as arguments.
  evaluate the function bytes with the argument s, and return the result.
  call the method termios.tcsetattr with fd, termios.TCSANOW and attr_list, as arguments.
  if key is not contained in self,
  return output.
  substitute first element of base64d for base64d.
  substitute code_changed for fn.
  raise an ValidationError with 2 arguments: value under the 'empty' key of the self.error_messages dictionary and code set to 'empty'.
  call the function escape with an argument word, substitute the result for i-th element of words.
  define the method __getinitargs__ with an argument self.
  if not,
  reverse the order of elements of styles.
  if not,
  from django.utils import six into default name space.
  call the method __init__ from the base class of the class MultiValueDict, with an argument key_to_list_mapping.
  if not, substitute self.auto_id for id_.   if if_is true attrs is an dictionary with initial entry: id_ for 'id', if not, attrs is an empty dictionary.
  return boolean True.
  validate_comma_separated_integer_list is a instance of a RegexValidator class, created with 3 arguments: comma_separated_int_list_re,
  define the method write_migration_files with arguments self and changes.
  substitute settings.TEMPLATE_STRING_IF_INVALID for current.
  call the function force_str with 3 arguments: string "<Text Node: '%s'>", with '%s' replaced with first 25 elements of self.s string,
  derive the class CallbackFilter from logging.Filter base class.
  call the method nodelist.render with an argument context, return the result.
  in_tag is boolean False.
  _builtin_context_processors is a tuple containing a string 'django.core.context_processors.csrf'.
  if inplural is true,
  call the function do_ifequal with 3 arguments: parser, token and boolean False, return the result.
  return self.
  call the function formset.is_valid, if it evaluates to false,
  from django.utils.safestring import mark_safe and SafeData into default name space.
  if match is false or call to the method match.group with an argument integer 1 evaluates to boolean false,
  define the function get_serializer with an argument format.
  use global variable _default.
  return an instance of IfEqualNode class, created with 5 arguments: val1, val2, nodelist_true, nodelist_false and negate.
  define the method start_doctype_decl with an arguments self, name, sysid, pubid and has_internal_subset.
  endless loop,
  substitute element at the bit index of current for current.
  return a tuple wit 2 elements: _lazy_proxy_unpickle and tuple with 3 elements: func, self.__args, self.__kw and resultclasses.
  if not self.pk_field is boolean False.   remove element from kwargs dictionary under the key 'to_field', substitute it for self.to_field if it exists,
  use its __name__ field as a key to get the value from self.tags, assign func to it.   return func.
  do nothing.
  decorator python_2_unicode_compatible,
  substitute greater element between integer 0 and end decremented by one for last.
  call the method fixture_name.rsplit with 2 arguments: character '.' and integer 2, substitute the result for parts.
  called with value under the 'pubdate' key of the item dictionary.   if value under the 'comments' key of the item dictionary is not None,
  if not,
  define the method _itervalues with an argument self.
  if not,
  decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
  if s is not an instance of the object six/string_types,
  get_language_bidi is lambda function returning boolean True if settings.LANGUAGE_CODE is contained in settings.LANGUAGES_BIDI.
  for every key and val in return value of the function six.iteritems called with an arguments self.extra_context.   call the method context.push with an argument unpacked dictionary values, with the result as an argument,
  return s.
  substitute basestring for string_types.
  call the self.xml.addQuickElement method with 2 arguments: string 'object' and attr dictionary containing 1 entry:
  from django.conf import settings.
  call the method self.run_validators with an argument value.
  open the file named filepath in read mode, with file descriptor renamed to fp perform,
  if expires is an instance of datetime.datetime class,
  call the function resource_string with 2 arguments app_config.name and pkg_name, substitute the result for resource.
  define the function default_if_none with 2 arguments value and arg.
  if f is None,
  decorator function register.filter with 2 arguments string "slice" and is_safe set to boolean True.
  define the method _proxy_method with 3 arguments self, unpacked list args and unpacked dictionary kwargs.
  try,
  define the method _iteritems with an argument self.
  define the method __exit__ with 4 arguments self, exc_type, exc_value and traceback.
  define the method urlconf_module with an argument self.
  define the method error with 3 arguments: self, token and msg.
  try,
  callback is an lambda function with an argument response and with return value result of the method middleware.process_response,
  if MultiPartParserError exception is caught,
  decrement end by one.
  if extend is boolean True,
  append ch to result.
  where '%s' is replaced with migration_name and app_label.   migrations_to_squash is a list created dynamically with elements: return value of the method executor.loader.get_migration called,
  substitute result for value under the id of self key of memo dictionary.
  define the function jython_reloader with main_func, args and kwargs as arguments.
  sum _cached_filenames, new_filenames and _error_files, store the result in filelist.
  if fk.unique is boolean true,
  if return values of the function force_text called two times with 1 argument, with value, and with orig, are equal,
  return kwargs.
  for every filenam in locale_filenames,
  if obj is an instance of datetime.datetime,
  decorator function register.filter with an argument is_safe set to boolean False.
  call the method self._setup.
  if string 'help' is contained in options,
  substitute conditions_nodelists for self.conditions_nodelists.
  if not,
  define the function create_bound_function with 2 arguments: func and obj.
  define the function spaceless with 2 arguments: parser and token.
  call the function import_module with an argument string '%s.formats' formated with location, which is formated with loc,
  call the method os._exit with an argument integer 1.
  if old_attr is None,
  if app_config.path is true,
  derive the class Truncator form the SimpleLazyObject class.
  substitute self._encoding for encoding.
  join template_dirs elements into a string, separated by '|', use it as an argument for the call to the function force_bytes,
  call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the item dictionary.
  if value is not contained in result,
  method, substitute the result for file_name.   get the value under the 'content-type' of the meta_data dictionary, if it exists assign it to content_type, content_type_extra,
  derive the class FixedOffset from the tzinfo base class.
  define the method tell with an argument self.
  define the method clean with arguments self, data and initial set to None.
  import module hmac.
  multiply x by length of from_digits add the return value of method from_digits.index with digit argument, substitute the result for x.
  return None.
  if not,
  covert to uppercase language elements from (p+1)-th index to the end, append it to the previous result, return it.   if not,
  for every i and widget in enumerated iterable self.widgets, call the function widget.value_from_datadict with 3 arguments: data,
  try,
  substitute instance._meta for opts.
  return context.
  raise an value.with_traceback exception with an argument tb.
  if self has an '_get' attribute,
  define the method __hash__ with an argument self.
  if self.parsed is true,
  derive the class ContentNotRenderedError from the Exception base class.
  define the method __init__ with 2 arguments: self and nodelist.
  call the method __new__ from the base class of the class DeclarativeFieldsMetaclass, with 4 arguments: mcs, name, bases and attrs.
  get the value under the value key of a dictionary with 6 entries: boolean True for '2', boolean True for boolean True,
  substitute obj for self.object.
  if self.field.label_suffix is not None, substitute self.field.label_suffix for label_suffix,
  if TypeError or VariableDoesNotExist exceptions are caught,
  if the value under the 'QUERY_STRING' key of the self.META dictionary is true, call the function iri_to_uri,
  from django.utils.module_loading import module_has_submodule into default name space.
  call the method __init__ from the base class of the class DecimalField, with 4 arguments: max_value, min_value,
  append list containing string '--no-location' to self.xgettext_options.
  return a list with an element tuple with 2 elements: an empty string and an empty list.
  define the function modelform_factory with 10 arguments: model, form set to ModelForm, fields set to None, exclude set to None,
  warning is a string 'ImmutableList object is immutable.'.
  define the method start_serialization with an argument self.
  return value under the DEFAULT_PALETTE key of the PALETTES dictionary.
  if not,
  DEFAULT_LOCALE_ENCODING and strings_only set to boolean True and p.returncode.   define the function handle_extensions with 2 arguments: extensions set to tuple containing string 'html' and ignored set to tuple containing string 'py'.
  join statements into a string, separated by newlines, return it.
  return boolean True.
  append i-th element of existing to child_loggers.
  remove the first element from self.backout, substitute the result for self.pointer.
  substitute it for value of dictionary response under the key 'Vary'.   define function has_vary_header, with response and header_query as arguments.
  from . import six into default name space.
  return a tuple with 2 elements: integers 1 and 0.
  derive the class __proxy__ from the Promise base class.
  define the method serialize with 3 arguments: self, queryset and unpacked dictionary options.
  fork a child process, if the result equals integer 0,
  try,
  slice the rawdata to obtain substring from i-th to j-th element, use it as the argument for the method call to the self.handle_data.
  call the method datetime.datetime.strptime with 2 arguments: result of the function force_str called with an argument value,
  if AttributeError exception is caught,
  raise an TemplateSyntaxError exception with an argument string "'%s' takes one argument", where '%s' is replaced with first element of bits.
  call the add_argument method on the parser object, with string '--database', default set to DEFAULT_DB_ALIAS and help set to string 'Nominates a database to create SQL for. Defaults to the default" database.' as arguments.
  call the method dict_.getlist with an argument key, return the result.
  define the method more with an argument self.
  call the method self.has_leading_dir with an argument namelist, substitute the result for leading.
  if value has an attribute '__iter__' and value is not an instance of six.text_type,
  if self.input_type equals string 'hidden' and self has an attribute 'input_type', return boolean True, otherwise return boolean False.
  if not,
  if not,
  call the method validators.MaxLengthValidator with max_length converted into an integer, append the result to list self.validators.
  call the method ETAG_MATCH.findall with an argument etag_str, substitute the result for etags.
  define the method __deepcopy__ with 2 arguments: self and memo.
  if field.rel is None,
  _func_closure is a string "func_closure".
  call the get method with an argument string 'tried' on the first element of the e.args, substitute the result for sub_tried.
  define the method _html_output with 6 arguments: self, normal_row, error_row, row_ender, help_text_html and errors_on_separate_row.
  from __future__ import unicode_literals into default name space.
  with 3 arguments: data, files and return value of the function self.clear_checkbox_name called with an argument name,   evaluates to true,   if upload is true,
  define the function sql_all with 3 arguments: app_config, style and connection.
  increment factor by one.
  if not,
  return is boolean False.
  call the connection.introspection.table_names with cursor as argument, store the result in tables.
  put elements of ignore_patterns into a set, substitute the length of it for self.ignore_patterns.
  from django.utils.safestring import mark_safe into default name space.
  if app_config.models_module is None,
  call the method datetime_safe.new_date with an argument date_value, substitute the result for date_value.
  if fp is an instance of file and data is an instance of unicode and fp.encoding is not None,
  import module re.
  if i is greater than or equal to length of subject,
  derive the class TemplateIfParser from IfParser base class.
  if self.data.minute equals integer 0,
  define the function do_extends with 2 arguments parser and token.
  regex is an empty string.
  slice migration.ancestry list from the last result as an starting index to the end, substitute the slice for migration.branch.   migration.merged_operations is an empty list.
  __all__ is an tuple with 3 elements: strings 'MultiPartParser', 'MultiPartParserError' and 'InputStreamExhausted'.
  return an instance of FirstOfNode class, created with an argument, result of the method parser.compile_filter called with bit,
  call the method formats.sanitize_separators with an argument value, substitute the result for value.
  property decorator,
  delete attr.
  import module re.
  call the function six.text_type with an argument value, use the result as an argument for the call to the function mark_safe,
  call the function lazy_number with 6 arguments: npgettext, six.text_type, context set to context, singular set to singular,
  return self._upload_handlers.
  termios is None.
  define the function comment with 2 arguments: parser and token.
  if current_len equals truncate_len,
  if self.allow_files is true and full_file is a file, or if self.allow_folders is true and full_file is an directory,
  if ImportError exception is caught,
  substitute self.parent_instance.pk for orig.
  substitute the last element of args for name.
  if kwargs is true,
  first and second are None.
  from django.utils.functional import allow_lazy and SimpleLazyObject into default name space.
  if attrs is not None substitute it for self.attrs, or if not self.attrs is an empty dictionary.
  remove values under the keys 'name' and 'directory' of the options dictionary and substitute it for app_name and target, respectively.
  if data is None,
  call the function fastcgi_help with an argument string "ERROR: Implementation must be one of prefork or thread.", return the result.
  define the method __iter__ with an argument self.
  decorator function register.filter with an argument is_safe set to boolean True.
  result of the m.group method called with an argument integer 0 converted into lowercase and result of the method value.title,   substitute the result for t.   call the function re.sub with 3 arguments: string "\d([A-Z])", lambda function with an argument m and return value,
  call the function digest, substitute the filed digest_size of the result for hlen.
  define the method to_python with arguments self and value.
  return nothing.
  call the function escapejs with an argument value, return the result.
  from django.utils.translation import get_language, to_locale and check_for_language into default name space.
  if encoding is true, substitute it for self._encoding, if not substitute settings.DEFAULT_CHARSET for self._encoding.
  import module itertools.
  if y, m and d are all equal to string '0',
  call the method numberformat.format with 6 arguments: value, result of the function get_format called with 3 arguments:
  derive the class WithNode from Node base class.
  call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, return the result.
  assign it to value under the string ".moves.urllib_response" appended to __name__ key of the sys.modules dictionary,   and to value under the string ".moves.urllib.response" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_robotparser from the _LazyModule base class.
  if not,
  str.__unicode__().encode('utf-8'), call the lambda function and put the result in the __str__ filed of klass.   return klass.
  if url starts with '///',
  label set to return value of the function _ called with an string 'Delete' and required as boolean False.   define the method add_prefix with an argument self.
  if AmbiguityError exception is raised,
  call the method self.exit_command.
  if errors_on_separate_row and bf_errors are both true,
  RemovedInDjango19Warning and stacklevel set to integer 2.   if data is None or data is an instance of dict type,
  from django.core.exceptions import ValidationError into default name space.
  return first element of the list containing elements of error.
  return a dictionary generated with an expression, return value of the method e.as_data for f,
  call the method initial_form_count from the base class of the class BaseInlineFormSet, return the result.
  derive the class Lexer form the base class object.
  if ImportError exception is caught,
  define the function templatetag with 2 arguments: parser and token.
  call the function update_wrapper with 2 arguments: _wrapper and dummy.
  if ValueError exception is caught,
  get the id of the self object, use it as a key to obtain the value from the memo dictionary, substitute self with it.
  if errors is true,
  namespaces is an empty dictionary.
  if not,
  if not,
  call the method self.handle_m2m_field with arguments obj and filed.
  HttpResponse.content.setter property,
  return modules.s
  get the value under the name key of self.blocks dictionary, insert to it block at the beginning.
  define the method __deepcopy__ with arguments self and memo.
  call the function _is_shorthand_ip with an argument ip_str, if it evaluates to false,
  call the method self.parent_widget.render with unpacked list args as an argument, return the result.
  remove the first element from colors, substitute it for fg.
  return value.
  from django.utils.encoding import force_bytes,  force_text and iri_to_uri into default name space.
  if value is true,
  under the 'handlers' key of self.config dictionary, substitute the result for value under 'target' key of config dictioanry.   if StandardError, renamed to e, exception is caught,
  call the method handler.startElement with 2 arguments: string "rss" and result of the method self.rss_attributes.
  append digit to int_part_gd.
  if self doesnt have '_queryset' attribute,
  if not,
  for every name in handlers,
  define the method validate with 2 arguments: self and value.
  decorator classmethod,
  derive the class SerializationError from the Exception base class.
  define the function yesno with 2 arguments value and arg set to None.
  otherwise if self.reason_phrase is None,
  remove config dictionary element under 'formatter' key, if it exists substitute it for formatter, if not, formatter is None.
  if not return boolean False.   define the method add_fields with 3 arguments: self, form and index.
  call the function ungettext_lazy with 3 arguments: string 'Ensure this value has at most %(limit_value)d character (it has %(show_value)d),
  try,
  substitute '%s' in a string "    - %s\n" with return value of the operation.describe method, write the result to self.stdout.
  if pot_path file path exists,
  call the function mark_for_escaping with an argument value, return the result.
  call the method __init__ from the base class of the DTDForbidden class.
  if not,
  where '%s' is replaced with filter_name.   call the method parser.parse with an argument tuple with an element string 'endfilter', substitute the result for nodelist.
  if to_lower is true,
  if InvalidOperation exception is caught,
  if self._is_rendered is false,
  dictionary containing element v for k.   for every k and list_ in return value of the method self.lists,
  get the value under the 'database' key of the options dictionary, use it as the key to get the value from the connections dictionary, substitute the result for connection.
  pieces is an empty list.
  if fourth element of attr_list and termios.ECHO are both true,
  prefix set to None, queryset set to None and unpacked dictionary kwargs.   substitute queryset for self.queryset.
  substitute new_result for result.
  return boolean False.
  substitute t.nodelist for self.nodelist.
  append taglib_module to tried_modules.
  call the method clean with an argument data from the base class of the class FileField, return the result.
  if app_names is not empty,
  only if v.Serializer.internal_use_only is false, return the resulting list.   define the function get_deserializer with an argument format.
  call the method self.reader_enters.
  if not,
  err_msg is a string "Tried %s", where '%s' is replaced with tried.
  if not,
  define the method represent_decimal with arguments self and data.
  call the function func with 3 arguments: obj, autoescape set to context.autoescape and unpacked list arg_vals,
  define the function from_current_timezone with an argument value.
  from django.utils import six into default name space.
  substitute render_value for self.render_value.
  define the function add with 2 arguments value and arg.
  call the function token_kwargs with 3 arguments: remaining_bits, parser and support_legacy set to boolean True, substitute the result for extra_context.
  write string "  No optimizations possible." to self.stdout stream.
  define the method sign with arguments self and value.
  return an empty string.
  if dirname is true and dirname path doesnt exists,
  if exclude is true and f.name is contained in exclude,
  define the method total_error_count with an argument self.
  saved_instances is an empty list.
  default as boolean False and help as a string "Don't break long message lines into several lines.".   call the method parser.add_argument with 5 arguments: string '--no-location', action set to string 'store_true',
  return boolean True.
  substitute instance._meta for opts.
  substitute the result for value.   call the function avoid_wrapping with an argument value, return the result.
  write string "No changes detected" to self.stdout stream.
  call the function gettext with an argument message, use the result as an argument for the call to the force_text function, return the result.
  call the method six.iteritems with an argument base.declared_fields, convert it to a list and append fields to it, substitute the result for fields.
  if value is not contained in result,
  if ValueError exception is caught,
  request_repr is a string "unavailable".
  define the function slice_filter with 2 arguments value and arg.
  define the method media with an argument self.
  stats is a list with 2 elements: 2 integers 0.
  call the self.stderr.write method with string "    Installing index for %s.%s model\n" as argument,
  define the method __repr__ with an argument self.
  try,
  define the method __init__ with 2 arguments: self and text.
  if not,
  call the method msgs.decode with an argument string 'utf-8', substitute the result for msgs.
  if index is not None and index is smaller than return value of the method self.initial_form_count,
  call the function warnings.warn with an argument,
  define the method __init__ with 2 arguments self and file.
  substitute elements of middle from the beginning to the negative length of punctuation, for middle.
  delete X.
  second 2 elements of seventh element of hextets converted into hexadecimal number,   first 2 elements of eight element of hextets converted into hexadecimal number,   second 2 elements of eight element of hextets converted into hexadecimal number.   join first 5 elements of hextets into a string, separated by ':', substitute the result for result.
  if self.load_initial_data is not empty,
  if self.first is true,
  substitute TemplateSyntaxError for error_class.
  where '%s' is replace by regex and return value of the function six.text_type with an argument e.   substitute the compiled_regex for value under the language_code key of the self._regex_dict dictionary.
  try,
  try,
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  call the method operations.extend with an argument smigration.operations.
  define the method render with 5 arguments: self, name set to None, value set to None, attrs set to None and choices set to an empty tuple.
  try,
  "to %s because it doesn't define __str__().", replace %s with string value of klass.__name__.   substitute __str__ filed of klass for __unicode__ field of klass.
  for every c in lineno_comment_map dictionary value under the comment_lineno_cache key,
  raise an AttributeError with an argument string "This QueryDict instance is immutable".
  __all__ is a list of strings, 'SimpleCookie', 'parse_cookie', 'HttpRequest', 'QueryDict', 'RawPostDataException',
  try,
  where '%s' is replaced with opts.object_name and fail_message, respectively.   define the function save_m2m.
  append newline to plural_form_line, substitute the result for line.
  call the method self.field.bound_data with 2 arguments: self.data and value under the self.name key of the dictionary,
  value is an empty string.
  try,
  return boolean False.
  otherwise if value is an instance of datetime.time,
  return self.data.hour.
  call the method self.add_truncation_text with 2 arguments: if end_index is greater than zero, first end_index elements of text,
  call the method self._text_words with 2 arguments length and truncate, return the result.
  call the method self._update_unget_history with length of bytes as an argument.
  dest as a string 'interactive', default set to boolean True,   and help as a string 'Tells Django to NOT prompt the user for input of any kind.'.   define the method handle with 3 arguments: self, unpacked list app_labels and unpacked dictionary options.
  substitute RAW for TYPE.
  call the function force_text with second element of choice as an argument, substitute the result for self.choice_label.
  return response.
  define the method __deepcopy__ with 2 arguments: self and memo.
  substitute sysid for self.sysid.
  define the method decompress with 2 arguments: self and value.
  define the method __eq__ with arguments self and other.
  and generic_lang_code.   call the function re.compile with an argument string '\s*\n\s*', substitute the result for trim_whitespace_re.
  calculate length of provided and increment it by one, substitute the result for plen.
  append line to lines.
  do nothing.
  required set to boolean True, widget set to None, label set to None, initial set to None, help_text set to an empty string,   to_field_name set to None, limit_choices_to set to None, unpacked list args and unpacked dictionary kwargs.   if required is true and initial is not None,
  remove the first element of context.
  I18N_MODIFIED is integer 2
  _dec.__name__ is a string 'method_decorator(%s)' formated with decorator.__name__.
  return dec.
  if length of bits is lesser than integer 3 or second element of bits is not equal to string 'as',
  if call to the function module_has_submodule with 2 arguments: app_config.module and module_to_search evaluates to true,
  raise an TemplateSyntaxError exception with an argument string "'cycle' tag requires at least two arguments".
  call the function sql_all with 3 arguments: app_config, self.style and connection, substitute the result for statements.
  return an empty list.
  from django.core.exceptions import DisallowedHost and ImproperlyConfigured into default name space.
  if default_kwargs exists, substitute it for self.default_kwargs, otherwise self.default_kwargs is an empty dictionary.
  return value of the function quote called with arguments k and safe, and with return value of the function quote called with arguments v and safe.   if not,
  substitute upload_handlers for self._upload_handlers.
  define the method encode with self class instance and i as arguments.
  unpacked list exc_info.   if self.include_html is true, call the method reporter.get_traceback_html and substitute the result for html_message,
  from django.utils.http import urlquote into default name space.
  comment is an empty list.
  dest as a string 'interactive', default as boolean True help as a string 'Tells Django to NOT prompt the user for input of any kind.'.   define the method handle with 3 arguments: self and unpacked dictionary options.
  if file_ext is contained in command.extensions, is_templatized is boolean True, otherwise it is boolean False.
  if use_l10n is true, or use_l10n is None and settings.USE_L10N is true,
  if related is true,
  substitute form.cleaned_data for cleaned_data.
  internal_use_only is a boolean False.
  _trans is an instance of Trans class.
  define the function do_block with 2 arguments parser and token.
  try,
  raise an CommandError exception with an argument string "%r conflicts with the name of an existing Python module and cannot be used "
  try,
  call the function format_html with 3 arguments: string ('<textarea{0}>\r\n{1}</textarea>', return value of the function flatatt,
  call the method self.validate_unique.
  if 'require_all_fields' key of the kwargs dictionary exists remove it and substitute its value for self.require_all_fields,
  if attrs is true,
  if not,
  if not,
  define the method __str__ with an argument self.
  call the function warnings.warn with 3 arguments: string "django.utils.importlib will be removed in Django 1.9.",
  substitute value for field.name key of self._current dictionary.
  if not,
  value under the 'required' key of the kwargs dictionary is boolean False.
  define the method i with an argument self.
  dest set to string 'load_initial_data', default set to True,   help containing string 'Tells Django not to load any initial data after database synchronization.' as arguments.   call the method parser.add_argument with string '--database', action containing string 'store', dest set to string 'database',
  raise an MultiPartParserError with an argument string 'multipartparser.exhaust() was passed a non-iterable or stream parameter'.
  substitute nonlocal_root for a tuple with an element root.
  slice the rawdata from k to endpos, then take the first 20 elements of the previous slice,
  if _supported is None,
  import module datetime.
  if cookie is an empty string,
  define the method subwidgets with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
  code set to a string 'invalid_choice'.   return value.
  define the function format with 2 arguments self and formatstr.
  result is an empty list.
  import module traceback.
  row_data is an generator object that returns value under the field key of form.cleaned_data dictionary,
  from django.db.migrations.state import ProjectState into default name space.
  with the result renamed to fp, perform the following:   call the method fp.write with an arguments src_data.
  call the method copy.copy with an argument self, return the result.
  call parser.add_argument method with '--noinput', action set to string 'store_false', dest set to string 'interactive',
  if not,
  if min_length is not None,
  return new_context.
  call the method self.split_leading_dir with an argument name, substitute the second element of the result for name.
  get config dictionary element under 'loggers' key, if it exists substitute it for loggers, if not, loggers is EMPTY_DICT.
  for every j in range of integers from 0 to iterations converted to an integer,
  call the method match.groups with 2 arguments: key and value.
  try,
  call the function new_method_proxy with an argument operator.getitem, substitute the result for __getitem__.
  get the attribute 'extend' of the cls object, if it exists substitute it for extend, if not extend is boolean True.
  try,
  supports_microseconds is boolean False.
  get self.instance
  instantiate class Header with 3 arguments: value, string 'utf-8', maxlinelen set to sys.maxsize, call the encode method on it,
  return value.
  define the method __init__ with 3 arguments: self, language and deactivate set to boolean False.
  returns the result of the call the method d._get_pk_val, if not return d, put all the generator items into a tuple row_data.   if row_data is true and None is not contained in row_data,
  define function _to_tuple with s as an argument.
  delete self._get.
  if sys.platform starts with string 'java',
  return value.
  write errors to self.stdout.
  substitute length of tokens for l.
  from __future__ import unicode_literals into default name space.
  request_finished is a instance of a Signal class.
  if character '-' is not contained  in lang_code,
  if extra_context is true, substitute it for self.extra_context, if not self.extra_context is an empty dictionary.
  define the function handle_m2m with an argument value,
  if length of parts is greater than integer 1.
  substitute the result for url.   if NoReverseMatch exception is caught,
  replace '%s' in string "Downloading %s\n", with display_url, write it to self.stdout stream.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  otherwise if vale is not an instance of ConvertingList and value is an instance of list type,
  call method request.META.get with arguments header and None.
  and unpacked dictionary kwargs.   call the function iri_to_uri with an argument redirect_to, substitute the result for the value under the 'Location' key of the self dictionary.
  if not,
  define the function to_language with an argument locale.
  and store it in the value of the dictionary response under the key 'ETag'.   return response
  if this_bases is None,
  if ipv4_unpacked is true,
  if not,
  if 'needs_autoescape' attribute of func object exists and is true,
  do nothing.
  call the method dictConfigClass with an argument config, call the method configure on the result.
  call the function ugettext with an argument string "Please correct the duplicate values below.", return the result.
  supported is boolean True.
  raise an TemplateSyntaxError exception with an argument "'%s' received unexpected keyword argument '%s'",
  if sys.platform starts with string 'java',
  define the function method_decorator with an argument decorator.
  call the function six.reraise with 3 arguments: ValueError, instance of a class ValueError, created with an argument string,
  get the value under the field key of self.fields dictionary, substitute error_messages field of the result for error_messages.
  call the method setlistdefault from the base class of the class QueryDict, with arguments key and default_list, return the result.
  covert to lowercase language elements from (p+1)-th index to the end, append it to the previous result, return it.   if not,
  define the method _format_value with 2 arguments: self and value.
  import module datetime.
  if Exception, renamed to e, exception is caught,
  substitute third and first element of bits for key and value, respectively.
  define the function get_script_prefix.
  define the method __init__ with 2 arguments: self and loaders.
  define the method __deepcopy__ with 2 arguments: self and memo.
  max_num is integer 1.
  from django.utils.datastructures import MultiValueDict into default name space.
  define the function csrf_token with 2 arguments: parser and token.
  do nothing,
  from __future__ import unicode_literals into default name space.
  if self.localize is true,
  from django.db.migrations.questioner import MigrationQuestioner and InteractiveMigrationQuestioner into default name space.
  substitute changeset for get_git_changeset.cache.
  convert git_changeset to string, append it to the string '.dev', replace it for sub.
  if cc contains item 'public' and kwargs contains item 'private',
  define the function check_errors with argument fn.
  from django.utils.module_loading import import_string into default name space.
  if ValidationError exception is caught,
  if ext is false and content_type is true,
  if result is not None,
  define the function build_request_repr with arguments: request, path_override set to None, GET_override set to None,
  get 'model' attribute from the options object, if it exists substitute it for self.model, if not self.model is None.
  call the method match.start, substitute the result for start.
  call the method self.next_token, substitute the result for self.current_token.
  split s into parts by '.', substitute the result for name.
  return sites.
  define protected method _BaseCookie__set with self class instance, key, real_value and coded_value as arguments.
  if field PY2 of the module six is boolean True,
  substitute self.setting for context.autoescape.
  define the method __getitem__ with 2 arguments: self and key.
  for every loc in locales,
  if not,
  define the function trim_url with 2 arguments: x and limit set to trim_url_limit.
  call the function constant_time_compare with 2 arguments: val1 and val2.
  if initial is not None, substitute initial for initial_value, otherwise initial_value is an empty string.
  attribute of the self object for name converted into a string.   raise an KeyError with an argument string 'Unknown media type "%s"', where '%s' is replaced with name.
  all the method field.rel.to._meta.get_field with field.rel.field_name as argument, call the to_python method on the result with,
  substitute 3 successive elements starting from the i-th index of pieces for first, lang and priority, respectively.
  default_validators is an list containing validators.validate_ipv4_address.
  if OverflowError or ValueError, renamed to exc, exceptions are caught,
  replace all '%s' in string '<%s %s (%s:%s) %s>' with self.__class__.__name__, urlconf_repr, self.app_name,
  define the function ugettext with an argument message.
  define the method __reduce_ex__ with 2 arguments self and proto.
  define the function urlize with 4 arguments: text, trim_url_limit set to None, nofollow set to boolean False,
  raise an self.exception exception.
  if self.save_as_new is true,
  bitwise shift integer 1 to the left by 63 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.
  call the function getInnerText with an argument node, call the strip method on the result, substitute the result for field_value.
  call the method __init__ with an argument name form the base class of the class _LazyModule.
  return self.
  call the method field.widget.value_from_datadict with 3 arguments: self.data, self.files, prefixed_name, substitute the result for data_value.
  call the function processor with an argument request, update updates dictionary with the result.
  raise an ValueError with an argument string "Invalid header: %r", where '%s' is replaced with line.
  try,
  call the method validate with an argument value from the base class of the class ChoiceField.
  property decorator,
  call the method add_arguments from the base class of the class Command, with an argument parser.
  call the method clear from the base class of the class QueryDict, return the result.
  derive the class ImmutableList from the tuple base class.
  define the method __init__ with an argument self.
  return the value under the self.data.month key of the MONTHS_AP dictionary.
  from django.core.management.base import CommandError and BaseCommand into default name space.
  call the method handler.file_complete with i-th element of counters as an argument, substitute the result for file_obj.
  inverse_match is boolean False.
  if tag is contained in self.CDATA_CONTENT_ELEMENTS,
  import module sys.
  define the method render with 2 arguments self and context.
  if self.is_bound is true and self.errors is false, return boolean True, otherwise return boolean False.
  define the method render with 2 arguments: self and context.
  substitute field for self.field.
  raise an ValueError exception with an argument string 'Cannot resolve %r: %s', formated with s and e.
  raise an ValueError with an argument string "'package' not set to a string".
  with lock,
  for every migration in merge_migrations.   try,
  if length of bits is not equal to integer 2,
  substitute regex for self.regex.
  if in_index-th element of bits equals to string 'in',
  if value is not equal to value or value equals return value of the call to Decimal with argument 'Inf',
  append d to self.fed.
  renamed_methods is an tuple.
  join elements of pieces into a string, return it.
  from django.db import connections,  DEFAULT_DB_ALIAS and migrations into default name space.
  multiply self.number and self.paginator.per_page, return the result.
  from __future__ import unicode_literals into default name space.
  otherwise if rhs is an instance of SafeBytes,
  kwargs is a dictionary with boolean True for 'pk_field'.
  bring integer 2 to the power of 31, subtract the result by 4, put the result into a list, append possible_sizes to it,
  bytes_read is integer 0.
  self.active_readers is an integer 0.
  substitute obj for the value of the memo dictionary at the identity of the self object key.
  if not,
  call the method path_rest.replace with arguments base_name and name, substitute the result for relative_dir.
  substitute token.source for e.django_template_source.
  define the method __call__ with arguments self and value.
  for every key and value in items of other_dict dictionary,
  define the method configure with an argument self.
  return res.
  call the BaseConverter function with BASE64_ALPHABET and sign set to '$' as arguments, store the result in base64.
  define the method __init__ with 6 arguments: self, name, value, attrs, choice and index.
  parsed is boolean False.
  s_len is integer 0.
  append command.xgettext_options to the list containing 10 elements: string 'xgettext', string '-d', domain, string '--language=C',
  if path is not contained in self._js,
  dest as a string 'use_default_ignore_patterns', default set to boolean True,   and help as a string "Don't ignore the common glob-style patterns 'CVS', '.*', '*~' and '*.pyc'.".   call the method parser.add_argument with 5 arguments: string '--no-wrap', action as a string 'store_true', dest as a string 'no_wrap',
  substitute content_length for self._content_length.
  define the method _itervalues with an argument self.
  import module sys.
  otherwise if ch equals a string '$',
  if not,
  return self.__to_language.
  define the method __delitem__ with 2 arguments: self and header.
  call the method self.validate_number with an argument number, substitute it for number.
  substitute elements of self.validators list for result.validators.
  call the function context_class with 2 arguments: _dict and unpacked dictionary containing 4 entries:
  self.nodelist_empty is an instance of NodeList class.
  get the value under the 'extensions' key of the options dictionary, substitute it for extensions.
  get the value under the 'filename' key of the disposition dictionary, substitute it for file_name.
  substitute MONTHS for self.months.
  if extra_classes is not empty put its elements into a set, substitute it for extra_classes, if not extra_classes is an empty set.
  remove 3 elements from r starting at the index 23.
  if ValidationError, substituted for e, exception is caught,
  from django.utils.six.moves import html_entities into default name space.
  call the method self.write_migration_files with an argument changes.
  get_language is a lambda function returning settings.LANGUAGE_CODE.
  strip whitespaces from both sides of the value, substitute it for value.
  set attr.name attribute of the Module_six_moves_urllib_error object to attr.
  if length of bits is not zero,
  convert '\n' to a string, if it is contained in value or '\r' converted to an string is contained in value,
  substitute the result for tag.   if tag is false or current_len is greater or equal to truncate_len,
  define the function sql_destroy_indexes with 3 arguments: app_config, style and connection.
  for every name in MEDIA_TYPES,
  define the function get_template with 2: template_name and dirs set to None.
  return the result of the method self._html_output, called with 5 arguments: normal_row to a string,
  if hextet converted to hexadecimal number is smaller than hexadecimal 0, or hextet converted to hexadecimal number is smaller than hexadecimal FFFF,
  python_2_unicode_compatible decorator,
  derive the class DjangoSafeDumper from the SafeDumper base class.
  import module copy.
  define the method __repr__ with an argument self.
  substitute error_messages for value under the 'error_messages' key of attrs dictionary.
  call the BaseConverter function with BASE62_ALPHABET as argument, store the result in base62.
  define the function urlencode with 2 arguments query and doseq set to integer 0.
  if call to the function response.has_header with string 'Last-Modified' as an argument returns boolean False,
  get converter attribute from self object, substitute it for converter.
  if output is true,
  return an instance of DebugNodeList class.
  _meth_func is a string "__func__".
  call the method f.formfield with an argument, unpacked dictionary kwargs, substitute the result for formfield.
  every occurrence of '<' with '&lt;', every occurrence of '>' with '&gt;', every occurrence of '"' with '&quot;',   and every occurrence of "'" with '&#39;', call the function mark_safe with the previous result as an argument, return the result.   call the function allow_lazy with 2 arguments: escape, six.text_type, substitute the result for escape.
  translation._catalog is an empty dictionary.
  assign integer 2 to parts if third element of version equals to zero, otherwise assign it integer 3.
  for every header in list of strings compiled by splitting string cc_delim_re with value under the key 'Vary' of response dictionary as a delimiter.
  import module random.
  define the method tell with an argument self.
  substitute chr for int2byte.
  break the loop execution.
  with the result renamed to fp, perform the following:   call the method fp.write with an argument msgs.
  call the method form.instance._get_unique_checks with an argument exclude as exclude, substitute the result for unique_checks,  and date_checks, respectively.
  substitute self.html_initial_id for value under the 'id' key of the attrs dictionary.
  if not,
  call the function re.compile with 2 arguments: raw string '<%s(/?>|(\s+[^>]*>))' formated with tags_re and re.U,
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  from django.utils import six into default name space.
  for every bit in bits,
  define the method cache_key with 3 arguments: self, template_name and template_dirs.
  define the function get_language_from_request with 2 arguments: request and check_path set to boolean False.
  languages set to a list with an element self.__locale, codeset set to a string 'utf-8' and fallback set to use_null_fallback,   substitute the result for translation.   if translation has an attribute '_catalog',
  format self.year_field string with name, use it as the key for the data dictionary, substitute the result for y.
  from django.forms.utils import from_current_timezone and to_current_timezone into default name space.
  if not,
  define the method value_from_datadict with 4 arguments: self, data, files and name.
  define the function rmtree_errorhandler with 3 arguments func, path and exc_info.
  for second and third element of args, respectively.   if length of args equals integer 2,
  try,
  if both cursor and close_connection are true,
  join all of the results into a string separated by newline character, return the result.   define the method __str__ with an argument self.
  update defaults dictionary with kwargs.
  substitute cookie for c.
  call the method self._setup.
  replace '%s' in string '<%s list>' with __class__.__name__ field of first element of self.urlconf_name, substitute it for urlconf_repr.
  call the method self._archive.extract with an argument to_path.
  kwargs_safe is a dictionary created for every k and v in result of the function six.iteritems called with an argument kwargs,
  if unpack_ipv4 is true,
  call the method blankout with 2 arguments: part and 'S', write the result to out.
  import module base64.
  return the result.   if UnicodeDecodeError exception is caught,
  define the function urlizetrunc with 3 arguments value, limit and autoescape set to None.
  if ValueError exception is caught,
  default_error_messages is an dictionary with 2 entries: return value of the function _ called with an argument string,
  from django.utils import iri_to_uri, force_bytes, force_text to the default name space.
  define the method get_default_prefix with an argument cls.
  if value is an instance of datetime.datetime class,
  evaluate the fd.isatty method, if the result is true,
  self.dict is an instance of OrderedDict class, created with arguments: tuples with 2 argument x and None, for every x in iterables,
  model is None.
  if TypeError exception is caught,
  return an instance of TemplateLiteral with 2 arguments: result of the function self.template_parser.compile_filter,
  substitute first element of self.locale_paths for self.default_locale_path.
  if not,
  return response.
  substitute string 'ascii' for encoding.
  if not,
  if cache is None,
  self._files is an instance of class MultiValueDict.   if not,
  otherwise if closing_tag is true,
  and i is greater than or equal to self.min_num,   value under the 'empty_permitted' key of the defaults dictionary is boolean True.
  input_type is None.
  call the function six.text_type with length of lines as an argument,
  call the method warnings.warn with 2 arguments: string "FastCGI support has been deprecated and will be removed in Django 1.9.",
  call the method domain.encode with an argument string 'idna', call the method decode on the result with an argument string 'ascii',
  define the method __init__ with 2 arguments: self and data set to None.
  split locale by '_', append the first element of the result to locales.
  define the method pop with 2 arguments: self and idx set to negative integer 1.
  for every key in self.keyOrder,
  try,
  call the method self.validate with an argument value.
  from django.utils import autoreload into default name space.
  return total_forms.
  do nothing.
  return ZERO.
  derive the class HttpRequest from the object base class.
  substitute name for handler.name.
  return an empty string,
  if not,
  call the function force_text with an argument value, substitute the result for value.
  return the result.   define the function pgettext with 2 arguments: context and message.
  join hidden_fields elements into a string, without separation, substitute the result for str_hidden.
  return an empty string.
  append list with 2 strings: '_request' and '_current_app' to SimpleTemplateResponse.rendering_attrs, substitute the result for rendering_attrs.
  if file path top_dir doesnt exists,
  get 'value' attribute of the _active object, if it exists return it, if not, call the function get_default_timezone and return the result.
  otherwise if o is an instance of datetime.time object,
  if fift element of bits is not equal to a string 'as',
  substitute cache.get for cache_get.
  skip this loop execution.
  call the function quote with 2 arguments: url and safe as bytes string '!*\'();:@&=+$,/?#[]~', substitute the result for url.
  return kwargs.
  self.META is an empty dictionary.
  if item_date is true,
  define the method root_attributes with an argument self.
  new_result is an empty list.
  return a string '%02d' formated with self.data.second.
  for every var in self._varlist.   if not,
  if ValidationError renamed to e, exception is caught,
  call the function handle_extensions exts, substitute self.extensions.
  define the method _text_chars with 5 arguments: self, length, truncate, text and truncate_len.
  if result is not root,
  call the function meta with 3 arguments: name, base and d.
  substitute complain for __setitem__.
  call the method self.z, substitute the result for day_of_year.
  and unpacked dictionary kwargs, return the result.   define the function assertRegex with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  append val to self.vals.
  define the method __repr__ with an argument self.
  call the function force_text with an argument text, substitute the result for input_val.
  from django.utils import six into default name space.
  call the method bmatch.group with an argument integer 1, if it evaluates to true,
  Meta is an instance of class with name 'Meta', parent base class and fields attrs.
  and call to the method form.has_changed evaluates to false,   skip this loop iteration,
  call the method parser.parse with an argument tuple with an element end_tag, substitute the result for nodelist_false.
  interactive set to boolean False, database set to db, reset_sequences set to boolean False, inhibit_post_migrate set to boolean True.   if self.verbosity is greater or equal to integer 1,
  if match evaluates to False throw an exception with the string message 'unexpected call to parse_starttag()'.
  from django.utils.text import smart_split, unescape_string_literal and get_text_list into default namespace.
  define the method handle_entityref with 2 arguments self and name.
  default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid date.' for 'invalid'.
  return self.data.hour.
  default_error_messages is an dictionary with 3 entries: return value of the function _ called with an argument,
  msg is a string '%sError importing module %s: "%s"', where '%s' is replaced with error_prefix, dotted_path and e, respectively.
  from django.forms.extras.widgets import SelectDateWidget into default name space.
  return name, ser_fmt and cmp_fmt.
  get the index of the first occurrence of tagname, substitute it for i.
  set opname attribute of cls object to opfunc.
  return result.
  cache_choices, required, widget, label, initial, help_text, unpacked list args and unpacked dictionary kwargs.   define the method to_python with 2 arguments: self and value.
  substitute oldroot for value under the key key of the cache dictionary.
   _cookie_allows_colon_in_names is a boolean True.
  call the method self.get_renderer with 4 arguments: name, value, attrs and choices, call the render method on the result, return the result.
  define the function sql_create with 3 arguments: app_config, style and connection.
  call the nethod self._isdst with an argument dt, if it evaluates to true,
  define the method has_next with an argument self.
  import pytz.
  import module warnings.
  define the __init__ method with 5 arguments: self, urlconf_name, default_kwargs set to None, app_name set to None and  namespace set to None.
  substitute i-th element of value for field_value.
  return flat.
  from threading import local into default name space.
  call the method value.serializable_value with an argument self.to_field_name, return the result.
  substitute attrs and choices for self.attrs and self.choices
  for every arg in the result,   if arg is an instance of Promise class,
  call the method get_template with an argument template, substitute the result for template.
  raise an CommandError with an argument string "Problem installing fixture '%s': %s is not a known serialization format.",
  if OSError, NotImplementedError or AttributeError exceptions are caught,
  from datetime import datetime into default name space.
  child_nodelists is a tuple with 2 elements strings 'nodelist_true' and 'nodelist_false'.
  call the method deactivate.
  from django.utils.text import get_text_list and capfirst into default name space.
  define the function smart_text, with s, encoding set to string 'utf-8', strings_only set to False, errors set to 'strict' as arguments.
  get the attribute '__module__' from the getattr, if it exists substitute it for m, if not, m is None.
  if not,
  call the function ungettext_lazy with 3 arguments: string 'Ensure this value has at least %(limit_value)d character (it has %(show_value)d),
  substitute __setitem__ filed of the base class of the class SortedDict for super_set.
  if o is an instance of datetime.datetime object.
  if other is instance of EmailValidator and, self.domain_whitelist equals to other.domain_whitelist,
  if not,
  if _serializers is false,
  get the value under the key key of the self.cookies dictionary, substitute boolean True for 'httponly' key of the returned dictionary.
  import module re.
  if not,
  define the method end_serialization with an argument self.
  kwargs is a dictionary with elements: config dictionary element under k key for k, for every k in result of function valid_ident,
  substitute app_name for self.app_name.
  if language_code is not contained in self._reverse_dict
  if field.show_hidden_initial is false,
  call the function number_format with 2 arguments: value and use_l10 as use_l10n, return the result.
  decorator function register.filter with an argument is_safe set to boolean True.
  where '%s' is replaced with result of the function humanize, called with an argument fixture_dir.   fixture_files_in_dir is an empty list.
  substitute result.queryset for result.queryset.
  substitute serializers for _serializers.
  call the method opts.model, substitute the result for self.instance.
  derive the class Command from the BaseCommand class.
  if self.addr is false,
  kwargs is a empty dictionary.
  TOKEN_MAPPING is a dictionary with 4 initial entries: 'Text' for TOKEN_TEXT, 'Var' for TOKEN_VAR, 'Block' for TOKEN_BLOCK,
  define the method _prepare_data with 2 arguments: self and data.
  add bits to a tuple, return it.
  call the method apps.get_app_config with an argument app_label.
  call the function get_format with an argument string 'DATE_INPUT_FORMATS', substitute the first element of the result for input_format.
  call the method self.get_queryset, return the length of the result.
  skip this loop iteration.
  get the value under the 'id' key of the widget.attrs dictionary, if the key exists substitute it for id_,
  return obj.
  from django.apps import apps.
  if conflicts is true,
  break from the loop execution,
  append string ".moves.urllib_parse" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for parse.
  call the method datetime.datetime.combine with unpacked list data_list, substitute the result for result.
  try,
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  substitute index for doublecolon_start.
  define the function join_tokens with 2 arguments: tokens and trim set to boolean False.
  substitute asvar for self.asvar.
  and ip_address_validator_map converted to a list, respectively.   call the re.compile function with an argument raw string '^[\d,]+$', substitute the result for comma_separated_int_list_re.
  and a result of the method __repr__ called from instance of base class of the MultiValueDict class.   define the method __getitem__ with 2 arguments: self and key.
  return an empty list.
  self._files is an instance of MultiValueDict class.
  while bit doesnt end with sential,
  substitute pubid for self.pubid.
  from django.utils.encoding import force_text into default name space.
  derive the class BaseForm from the base class object.
  define the method handle with 3 arguments: self, unpacked list test_labels and unpacked dictionary options.
  if OverflowError exception is caught,
  extend list inner_args with args.
  crate a dictionary with app mapping and from the class Migration, created with arguments: string 'custom' and app,
  get value under the 'register_to' key of the kwargs dictionary, substitute it for register_to.
  call the method pattern.resolve with an argument new_path, substitute the result for sub_match.
  defaults is an dictionary with 3 initial entries: self.auto_id for 'auto_id', result of the call to the method self.add_prefix,
  define the method resolve with 2 arguments: self and s.
  status_code is an integer 410.
  return t.
  derive the class MultipleChoiceField from the base class ChoiceField class.
  if plan_node is contained in loader.applied_migrations,
  do nothing.
  if length of t equals to integer 2,
  remove first element from self.command_stack.
  substitute self.pointer for i.
  call the function get_callable with an argument self._callback_str, substitute the result for self._callback.
  define the method __init__ with 3 arguments: self, attrs set to None and choices set to an empty tuple.
  call the MigrationExecutor with the connection as the argument, substitute it for executor.
  define the method render with 4 arguments: self, name, value and attrs set to None.
  from django.conf import settings into default name space.
  for every f in filters,
  result is an empty list, upto is integer 0.
  call the method sys.stderr.write with an argument string "ERROR: %s\n", where '%s' is replaced by e.
  settings.USE_I18N is boolean True.
  for every i and arg in enumerated iterable args,
  define the function modelformset_factory with 18 arguments: model, form set to ModelForm, formfield_callback set to None,
  '\\u0027' for integer representation of string '\', '\\u0022' for integer representation of string '"',   '\\u003E' for integer representation of string '>', '\\u003C' for integer representation of string '<',   '\\u0026' for integer representation of string '%', '\\u003D' for integer representation of string '=',   '\\u002D' for integer representation of string '-', '\\u003B' for integer representation of string ';',   '\\u2028' for integer representation of string '\u2028' and '\\u2029' for integer representation of string '\u2029'.   for eery z in range of integers from 0 to 31, update _js_escapes dictionary with '\\u%04X' formated with z,
  from django.utils import six into default name space.
  for every app_name and model_list in return value of manifest.items method,
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  call the function check_for_migrations with arguments app_config and connection.
  for every event and node in self.event_stream,
  if vale is None or an empty string,
  substitute fg for value under the 'fg' key of definition dictionary.
  import pyinotify module.
  define the method compress with arguments self and data_list.
  self._regex_dict is an empty dictionary.
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  substitute package.__path__ for package_path.
  define the function module_has_submodule with 2 arguments: package and module_name.
  from django.utils.six.moves import xrange into default name space.
  from django.core import signing into default name space.
  _supported is an instance of OrderedDict class, created with an argument settings.LANGUAGES.
  define the method self and name.
  compile regex from raw string '(?P<hour>\d{1,2}):(?P<minute>\d{1,2})(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?',
  increment i-th element of result by piece.
  split ip_str into parts by ':', substitute the result for new_ip.
  obj is an instance of Model class, created with an unpacked dictionary data as argument.
  write the string "  Creating tables...\n" to the standard output.
  call the method __setitem__ from the base class of the class MultiValueDict, with 2 arguments key and list containing element value.
  if not,
  raise an TemplateSyntaxError exception with an argument string "'for' statements should use the format 'for x in y': %s",
  where '%s' are replaced by sel.file and errors, respectively.   if command.verbosity is greater than integer 0,
  call the get_complete_version function with version as argument, store the result in version.
  if not,
  if string '()' is contained in config,
  define the function compile_filter with 2 arguments: self and token.
  remove config dictionary element under '.' key, if it exists substitute it for props, if not, props is None.
  for every i in sequence of integers, from 0 to the result of the method self.total_form_count,
  create the list of paths from which filename module was included for every filename in new_modules, only is filename has '__file__' attribute, substitute the resulting list for new_filenames.
  day_field is a string '%s_day'.
  define the method handle_file_complete with 3 arguments: self, old_field_name and counters.
  define the method enter_command with 3 arguments: self, token and msg.
  if not,
  otherwise if value is boolean False,
  if not,
  format_module_path is a list containing an element format_module_path.
  if middleware has an attribute 'process_response',
  for every cat in value under the 'categories' key of the self.feed dictionary.
  replace '%s' in string 'django_%s_template_' with self.app_or_project, substitute it for prefix.
  register.tag decorator,
  EventHandler.modified_code is I18N_MODIFIED.
  substitute it for callback, if the attribute doesnt exists, callback is None.   if not callback,
  derive the class ExternalReferenceForbidden from the DefusedXmlException base class.
  derive the class TemplateSyntaxError form the base class Exception.
  append name to 'add_' use it as the name of the attribute to get from combined object , call the result with an argument:
  return boolean True.
  call the function write with an argument sep.
  if not,
  return value.
  if plan is true,
  nodes is an empty list.
  update self.filters dictionary with lib.filters.
  iterator is None.
  for every attr in self.rendering_attrs,
  increment num_args by one.
  raise an TemplateSyntaxError exception with an argument string "'%s' is not a valid tag or filter in tag library '%s'",
  return a string '"%s"' formated with etag, in which every occurrence of '\\' is replaced with '\\\\' and every occurrence of '"',
  if AttributeError exception is raised,
  call the method _illegal_formatting.search with an argument fmt, substitute the result for illegal_formatting.
  self._current is None.
  if first element of sys.version_info equals integer 2, PY2 is boolean True, otherwise it is boolean False.
  call the method lookups.appendlist with 2 arguments: pattern.callback and a tuple containing 3 elements: bits, p_pattern,
  get the value under the 'incomplete' key of the field.error_messages dictionary, if it is not contained in errors,
  if ValueError or TypeError exceptions are caught,
  help is a string "Prints the CREATE TABLE, custom SQL and CREATE INDEX SQL statements for the given model module name(s).".
  value under 'localize' key of kwargs dictionary is boolean True.
  define the method __init__ with 2 arguments: self and lexer.
  set self.__starttag_text to None.
  define the method copy with an argument self.
  filter_raw_string is a raw string "^(?P<constant>%(constant)s)|^(?P<var>[%(var_chars)s]+|%(num)s)| (?:\s*%(filter_sep)s\s*
  call avoid_wrapping function with name2 modulus count2 as argument, call the ugettext with ', ' as argument, add previous 2 results, increment variable result by it.
  derive the class Command from the AppCommand base class.
  decorator function register.filter with 2 arguments expects_localtime set to boolean True and is_safe set to boolean False.
  define the function template_localtime with 2 arguments: value and use_tz set to None.
  if ImportError, renamed to e, exception is caught,
  if 'HTTP_HOST' is contained in self.META,
  if not,
  call the method form.save with an argument commit as commit, return the result.
  convert s to integer of base 36, substitute it for value.
  call the httpd_cls function with 4 arguments: server_address, WSGIRequestHandler and ipv6 set to ipv6, substitute the result for httpd.
  cache is an empty dictionary.
  define the method add_item_elements with 2 arguments, handler self and item.
  ret_ip is an empty list.
  define the function get_language.
   if field.widget.needs_multipart_form is true,
  convert deader to lowercase, if it is contained in self._headers return boolean True, if not, return boolean False.
  if not,
  call the function warnings.warn with 3 arguments: string "SortedDict is deprecated and will be removed in Django 1.9.",
  derive the class date from the real_date base class.
  substitute callback for self._callback_str.
  if self.variable_name is true.
  return instance.
  define the function deactivate.
  evaluate the method connection.introspection.table_name_converter with model._meta.db_table as argument, append it to tables.
  for every arg in self.args call the method arg.resolve with an argument context, substitute the results in a list for args.
  from django.template.loader import BaseLoader into default name space.
  derive the class NullBooleanField from the base class BooleanField class.
  call the self.stderr.write method with string "    Failed to install index for %s.%s model: %s\n" as argument,
  output is an empty list.
  skip this loop iteration,
  compare is a lambda function with arguments self, a and b, return value is boolean True if a is not b, otherwise it is False.
  if not,
  ext_list is an empty list,
  define the function safe_join with 2 arguments base and unpacked dictionary paths.
  and value under the unique_for key of form.cleaned_data dictionary is not None,   if lookup equals a string 'date',
  try,
  if 'coerce' key of the kwargs dictionary exists remove it and substitute its value for self.coerce,
  if timezone is None,
  call the method handler.startElement with 2 arguments: string 'entry' and result of the function self.item_attributes,
  call the color_style method, substitute the result for self.style.
  call the method json.__version__.split with an argument '.', if the result is respectively greater than list containing strings '2', '1' and '3',
  and unpacked dictionary kwargs.   delete the value under the 'content-type' key of the self dictionary.
  call the function inline_re.match with an argument t.contents, substitute the result for imatch.
  substitute complain for reverse.
  convert idx to an integer, substitute it or n.
  if value is None,
  substitute name for new_mod.
  use the result as an argument for the call to the function mark_safe, return the result.   define the function format_html_join with 3 arguments: sep, format_string and args_generator.
  error_class, label_suffix and empty_permitted.   for every field_name in self.fields,
  convert slice of language string from (p+1)-th index to the end to uppercase, append it to the previous result, return the resulting string.   if not,
  if field.rel.to._default_manager has an attribute 'get_by_natural_key',
  call the method self.stdout.write with an argument string "No fixture '%s' in %s.", where '%s' is replaced with fixture_name,
  sort loader.migrated_apps, substitute it for app_names.
  BUILTIN_SERIALIZERS is a dictionary containing 4 inital entries: "django.core.serializers.xml_serializer" for "xml",
  return boolean True.
  self._files is an instance of class MultiValueDict.   define the method close with an argument self.
  with the result renamed to fp, perform the following:   call the method fp.read, substitute the result for src_data.
  call the force_str function with an argument value, substitute the result for value.
  call the method activate with an argument self.old_language.
  if data is true, substitute it for self.data, otherwise self.data is an empty dictionary.
  substitute the resulting list for none_model_fields.   missing_fields is difference between set containing none_model_fields and set containing result of the method,
  substitute space for sep.
  substitute i-th element of self.forms for form.
  call the function getattr with request, string 'LANGUAGE_CODE' and function get_language as arguments,
  split ip_str into parts by ':', substitute the result for hextets.
  if LookupError or TypeError exceptions are caught,
  increment i-th element of result by piece.
  define the method resolve_context with 2 arguments: self and context.
  substitute mtime for the value under the filename key of _mtimes dictionary.
  append a tuple with 2 entries lang and priority to result.
  define the function fset with 3 arguments: instance, valse to None and name set to fset.__name__.
  try,
  call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for value.
  return token.
  string 'DECIMAL_SEPARATOR', lang and use_l10n set to use_l10n, decimal_pos, result of the function get_format called with 3 arguments:   string 'NUMBER_GROUPING', lang and use_l10n as use_l10n, result of the function get_format called with an argument:   string 'THOUSAND_SEPARATOR', lang and use_l10n as use_l10n and force_grouping as force_grouping, return the result.   define the function localize with 2 arguments value and use_l10n set to None.
  and dictionary created by applying defaults mapping on the pattern.default_kwargs dictionary.   for every namespace and tuple containing: prefix and sub_pattern, in return value of the method pattern.namespace_dict.items,
  if value is contained in self.empty_values,
  call the method self.check_migrations.
  where '%r' is replaced with first element of bits.   append first element of bits to 'end'. substitute the result for end_tag.
  filesize_number_format is an lambda function with an argument value, return value is the result of the method formats.number_format,
  if fdel is not None,
  use fourth element of version as a key to get the value from mapping dictionary, append to it fourth element of version converted to string, substitute it for sub.
  if self.required is true and value is false,
  if media is true,
  where '%s' is replaced with self.__class__.__name__.   property decorator,
  if not,
  and help set to a string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.   define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
  define the method __iter__ with an argument self.
  if ImportError exception is caught,
  or if current_version is greater than (3,0), but smaller than (3,2,3), otherwise set use_workaround to boolean False.   substitute HTMLParseError from the module _html_parser for HTMLParseError.
  define the method delete_first_token with an argument self.
  for every migration in merge_migrations,
  call the method parser.parse with an argument tuple with an element string 'endspaceless', substitute the result for nodelist.
  if middle ends with punctuation,
  model._meta.app_label, model._meta.object_name, parent_model._meta.app_label, parent_model._meta.object_name, respectively.   return fk.
  call the method self.val_expr.resolve with an argument context, substitute the result for value.
  call the function getInnerText with an argument node, call the strip method on the result, substitute the result for field_value.
  for every i and line in enumerated iterable lines,
  define the method __new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs.
  replace all the occurrences of the '%' string for '%%', append result to the previous result, substitute it for candidate_pat.
  from django.utils.encoding import python_2_unicode_compatible into default name space.
  call the method self.validate_name with 2 arguments: app_name and string 'app'.
  return endpos.
  if typed is true,
  and an empty dictionary, substitute the result for httpd_cls.   if not,
  derive the class RssUserland091Feed from the RssFeed base class.
  define the method __init__ with 5 arguments: self, val_expr, max_expr, max_width and asvar set to None.
  if IndexError exception is caught,
  prefix the base64d with a '.' character.
  filenames is an empty list.
  increment piece by firs element of elt.
  do nothing.
  substitute SelectMultiple for widget.
  call the function date.strftime with an argument string '%Y-%m-%dT%H:%M:%S', substitute the result for time_str.
  author_name set to None, author_link set to None, subtitle set to None, categories set to None, feed_url set to None,   feed_copyright set to None, feed_guid set to None, ttl set to None and unpacked dictionary kwargs.   to_unicode is an lambda function with an argument s, result is the result of the function force_text,
  assign obj to the obj field of self instance of this class.
  call the method logger.removeHandler with an argument handler.
  call the method cls.__promise__ with 3 arguments: resultclass, k and v, substitute the result for meth.
  set old_method_name attribute of the base object to the result of the function wrapper called with an argument old_method.
  substitute boolean_check for self.check_test if check_test is None, otherwise substitute check_test for self.check_test.
  for every filename in filenames,
  import module copy.
  convert the value under the 'umask' key of options dictionary into an integer of base 8, substitute it for value under the 'umask' key of daemon_kwargs dictionary.
  if not,
  substitute value.pk for value.
  value is an empty string.
  call the function six.text_type with an argument number, substitute the result for str_number.
  from logging.config import dictConfig.
  if active has an attribute 'value',
  if not,
  called with 3 arguments: data, files and name, substitute the result for upload.   if self.is_required is boolean false and call to the method value_from_datadict from the instance of CheckboxInput class,
  define the method generic_tag_compiler with 9 arguments: parser, token, params, varargs, varkw, defaults, name, takes_context,
  if self.data.minute equals integer 0 and self.data.hour equals integer 0,
  return boolean False.
  call the executor.loader.get_migration_by_prefix with app_label and migration_name, substitute the result for migration.
  get the value under the name key of the self.initial dictionary, if it exists substitute it for initial,
  define the method __init__ with 3 arguments: self, attrs set to None and render_value set to boolean False.
  clean is a lambda function with arguments self and x, return value is x.
  message_context is None.
  if cookie is not an instance of http_cookies.BaseCookie,
  if title is an instance of list or tuple,
  return s.
  if not, self.reason_phrase is a string 'UNKNOWN STATUS CODE'.   substitute content_type for value under the 'Content-Type' key of the self dictionary.
  define the function _replace_entity with an argument match.
  if year is lesser than integer 70,
  decorator function register.filter with an argument is_safe set to boolean False.
  define the function dumps with 5 arguments: obj, key set to None, salt set to string 'django.core.signing',
  not_found is an empty list.
  called with an argument string 'Unknown', tuple with 2 elements: string '2' and return value of the function ugettext_lazy,   called with an argument string 'Yes' and tuple with 2 elements: string '3' and return value of the function ugettext_lazy,   called with an argument string 'No'.   call the method __init__ from the base class of the class NullBooleanSelect, with arguments attrs and choices.
  return self._queryset.
  call the function zlib.decompress with an argument data, substitute the result for data.
  define the method t with an argument self.
  if third element of bits is not equal to a string 'by',
  plural is an empty list.
  import module logging.
  default set to boolean False and help set to string 'Tells Django to use an IPv6 address.'.   define the method handle with self class instance, list of arguments fixture_labels and dictionary options as arguments.
  where '%s' is replaced with node.nodeName and attr.   try,
  for every key is self.bad_cookies,
  call the function parse_boundary_stream with 2 arguments: sub_stream and integer 1024, yield the result as the return value of the generator.
  and format, return the result.   derive the class RegexField from the base class CharField class.
  return dictionary created with tuples with 2 elements: key and value under the key key of self dictionary, for every key in self.
  from django.conf import settings into default name space.
  return a list containing an empty string and a list containing an empty list.
  call the self.make_bytes method with an argument chunk, for every chunk in value join the result to a bytes string,
  is an even number,   call the method s.find with 2 arguments: bytes string ';' and end incremented by one, substitute the result for end.
  if return value of function response.has_header with string 'Vary' as argument is boolean False,
  define the function escape_quotes with an argument m.
  call the method handler.endElement with an argument string 'author'.
  return resulting list.   define the method keys with an argument self.
  if exists, if not use None as the second argument, return the result.   call the function MigrationExecutor with connection and self.migration_progress_callback as arguments, substitute the result fro executor.
  if filename is empty,
  try,
  define the method __contains__ with 2 arguments: self and key.
  try,
  define the method tokenize with an argument self.
  choice and i, substitute the result for w.   call the function format_html with 3 arguments: self.inner_html, choice_value set to result of the function force_text,
  if old_handler is not None,
  get shell attribute of the self object, call it and return the result.
  try,
  from django.core.files.uploadhandler import StopUpload,  SkipFile and StopFutureHandlers into default name space.
  break the execution of the smallest enclosing loop.
  call the run_from_argv function from the base class of the Command class with argv as a argument,.
  where 'strdq' is replaced with '"[^"\\]*(?:\\.[^"\\]*)*"', 'strsq' is replaced with "'[^'\\]*(?:\\.[^'\\]*)*'",   'i18n_open' is replaced with return value of function re.escape called with an argument string '_(',   'i18n_close' is replaced with return value of function re.escape called with an argument string ')'.   remove all occurrences of newline character from constant_string.
  for every c in choices split into words, concatenate prefix, result of the function re.escape with an argument c and suffix,
  call the function six.text_type with an argument number, use the result as an argument for the call to the function mark_safe,
  if not csrf_token is None.   if csrf_token is true,
  append current_number to a list for current_number in self._unget_history, if current_number is equal to num_bytes,
  if not,
  append key to self.keyOrder.
  reverse the order of colors elements,
  self.children is an list with 2 elements: obj and data.
  slice list unhandled_params from the beginning to the length of defaults last element,
  join self.dirpath and self.file into a file path, substitute it for orig_file.
  line is an empty string.
  define the method write with 2 arguments: self and value.
  define the method __init__ with arguments self and attrs set to None.
  extend basedirs list with settings.LOCALE_PATHS.
  into a file path, substitute it for new_path.   if new_path file path exists,
  convert field into a string and concatenate it to a string '* ', append the result to output.
  return nothing.
  try,
  is length of list_ equals integer 0,
  replace every occurrence of '\\' in tok with 'U', substitute the result for tok.
  return a string "<DeserializedObject: %s.%s(pk=%s)>", where '%s' are replaced with self.object._meta.app_label,
  try,
  from django.utils.timezone import template_localtime into default name space.
  use the result as an argument for the call to the mark_safe function, return the result.   call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs, return the result.
  if not,
  sub_ul_renderer is an instance of ChoiceFieldRenderer class, created with 4 arguments: name as self.name, value as self.value,
  derive the class RadioChoiceInput from the ChoiceInput base class.
  substitute the return value of the smart_text function with an argument obj_pk for the value under the 'pk' key of the attrs dictionary.
  call the method parser.add_argument with 6 arguments: string '--extension', string '-e', dest set to string 'extensions',
  for every key and value in data,
  call the method self.cache_key with 2 arguments name and dirs, substitute the result for key.
  otherwise return boolean False.   if not,
  if not,
  if self.no_obsolete is true,
  get the value under the name key of the data dictionary, if it exists return it, if not return None.
  join elements of self.fed into a string, return the result.
  result of the call to the function _ with an argument string 'Tue' for 1,   result of the call to the function _ with an argument string 'Wed' for 2,   result of the call to the function _ with an argument string 'Thu' for 3,   result of the call to the function _ with an argument string 'Fri' for 4,   result of the call to the function _ with an argument string 'Sat' for 5,   and result of the call to the function _ with an argument string 'Sun' for 6.   WEEKDAYS_REV is an dictionary with 7 entries: 0 for 'monday', 1 for 'tuesday', 2 for 'wednesday', 3 for 'thursday', 4 for 'friday',   5 for 'saturday' and 6 for 'sunday'.
  increment i by integer 1, substitute the result for i.
  from django.utils.safestring import SafeData, EscapeData, mark_safe and mark_for_escaping into default namespace.
  call the method self.prepend_token with an argument token,
  needs_multipart_form is boolean False.
  get 'default_error_messages' from the c object, if it doesnt exists return an empty dictionary,
  if string "'format'" is not contained in e converted into a string,
  from decimal import Decimal into default name space.
  if value is contained in self.empty_values and self.required is true,
  call the function func with 2 arguments: unpacked list resolved_args and unpacked dictionary resolved_kwargs, substitute the result for _dict.
  call the function validate_ipv4_address with an argument hextet.
  define the method appendlist with 3 arguments: self, key and value.
  call the method __copy__ with an argument unpacked list self.dicts, return the result.
  from django.utils import six into default name space.
  substitute a tuple with 2 elements: template and None, for self.find_template_cache dictionary value under the key key.
  if self.instance.pk is None,
  define the method handle_fk_field with argument self, obj and field.
  define the method __init__ with arguments self, input_formats set to None, unpacked list args and unpacked dictionary kwargs.
  call the field.rel.to._meta.get_field method with an field.rel.field_name argument, on the result call the method to_python,
  call the function smart_text with an argument value, strip the result of whitespaces from both ends and substitute it for value.
  define the method __repr__ with an argument self.
  return chunk.
  substitute context for self.context_data.
  if language_code is not contained in self._regex_dict,
  self.default_locale_path is None.
  return first element of value.
  for every model in model_list,
  derive the class TimeFormat from the base class Formatter.
  define the method __deepcopy__ with 2 arguments: self and memodict.
  substitute value under the name key of the lib.filters dictionary for value under the name key of the temp_lib.filters dictionary.
  called with n.getAttribute('pk') method.   call the m2m_convert function with an argument c, for every c in return value of the method node.getElementsByTagName,
  where '%s' is replaced with token.contents.   assign the string 'reversed' to is_reversed and bits last elements.
  if self has an '_files' attribute.
  if ch equals a string '<',
   if terminal_char is not equal to string ')',
  if self.current_token is not EndToken,
  raise an EntitiesForbidden exception with arguments name, None, base, sysid, pubid and notation_name.
  return wrapper.
  if six.PY3 is true,
  response.content is bytes empty string.
  define the function fdel with 2 arguments: instance and name set to fdel.__name__.
  convert string header to uppercase and replace all occurrences of '-' with '_', substitute it for header.
  if element of targets in first row and second column is None,
  call the method m.group with an argument string 'hour', convert the result into a string, substitute it for hour.
  if args and kwargs are both true,
  from django.utils.six.moves.urllib.parse import urlparse into default name space.
  define the method initial_forms with an argument self.
  if first element of base64d equals to a '.' character,
  if 'filename' attribute of ev is None,
  self._app_dict is an empty dictionary.
  substitute data for data_value if data is not None, otherwise data_value is an empty list.
  try,
  call the method calendar.isleap with an argument self.data.year, return the result.
  if value is Nan, or value is contained in return value of the Decimal called twice with string 'Inf' and with string '-Inf',
  from __future__ import unicode_literals into default name space.
  otherwise if autoescape is true,
  value under the 'invalid_image' key of the self.error_messages dictionary and code set to a string 'invalid_image',   and third element of the return value of the function sys.exc_info.   if f has an attribute 'seek' and if f.seek is an callable object,
  call the function escape with an argument value, substitute it for value.
  if identity lambda function returns false, substitute the x for capfirst, if not call the function force_text with an argument x,
  return input_val.
  raise an SystemRestart exception,
  if children is true, copy children list to self.children, otherwise self.children is an empty list.
  extend errors list with m for every m in e.error_list, only if m is not in errors.
  if not,
  reason_phrase is None.
  call the function re.compile with 2 arguments: raw string '^https?://\[?\w' and re.IGNORECASE, substitute the result for simple_url_re.
  otherwise if value under the "author_name" key of the item dictionary is true,
  called with an argument string ':?.!'.   call the method format_html with 3 arguments: string '{0}{1}', contents and label_suffix, substitute the result for contents.
  consume_next is boolean True.
  define the function truncatewords_html with 2 arguments value and arg.
  define the method __init__ with 3 arguments: self, initlist set to None and error_class set to None.
  for every path in paths,
  if ch is contained in string "iLmsu#",
  delete the _serializers dictionary entry at the format key.
  define the function get_version with version set to None as argument.
  if not,
  if '/' is contained in path, and only if '\\' is contained in path and index of the first occurrence of '/' in path is lesser than,
  if not,
  call the method text.__html__, return the result.
  return boolean True.
  define the method _iterkeys with an argument self.
  call the method self._assert_mutable.
  substitute '%r' in string ' pgettext(%r, %r) ' with message_context and result of the function join_tokens,
  return value.
  substitute data.size for file_name.
  UNKNOWN_SOURCE is a string '<unknown source>'.
  self._unget_history is an empty list.
  substitute '%s' in a string "\nCreated new merge migration %s" with writer path, write it to self.stdout.
  import module sys.
  if os.name equals string 'posix',
  substitute key for result.key.
  call the method self.__dict__.copy, substitute the result for obj_dict.
  if self.translate is true,
  if push is not None,
  get the value under the name key of the self.fields dictionary, substitute it for field.
  return an string '<ExtendsNode: extends %s>', where '%s' is replaced with self.parent_name.token.
  define the method _truncate_html with 6 arguments: self, length, truncate, text, truncate_len and words.
  increment i by integer 1.
  substitute nodelist for self.nodelist.
  define the method clear_checkbox_id with 2 arguments: self and name.
  call the function check_programs with 3 arguments: strings 'msguniq', 'msgmerge' and 'msgattrib'.
  substitute tuple containing 2 elements: sum of p_pattern and prefix, and sub_pattern for value under the namespace key of the namespace dictionary.
  if value under the 'outlog' key of options dictionary is true,
  call the method self.validate_name with 2 arguments name and app_or_project.
  yield d.
  try,
  if lang is None,
  get the value under the 'content-disposition' key of the info dictionary, substitute it for content_disposition.
  define the method migration_progress_callback with self class instance, action, migration and fake set to boolean False as arguments.
  call the function _trans.deactivate_all, return the result.
  if in_tag is true and token_string starts with BLOCK_TAG_START.
  code set to an string 'invalid_choice' and dictionary params with an entry: choice for 'value'.   return new_value.
  from django.utils import six into default name space.
  otherwise if file_name is not an instance of six.string_types and call to the function is_iterable with an argument file_name,
  define the method __init__ with 6 arguments: (self, var1, var2, nodelist_true, nodelist_false and negate.
  match the rawdata from the position k, with attrfind pattern, assign the result to the m.
  if 'warning' is contained in kwargs,
  call the method parser.compile_filter with an argument string "var|%s", where '%s' is replaced with rest, substitute the result for filter_expr.
  call the method kwarg_re.match with an argument bit, substitute it for match.
  raise self.warning.
  return r.
  define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
  call the force_bytes function with an argument settings.SECRET_KEY, substitute the result for key.
  if not,
  define the method _wrapper with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  use the it as an argument for the call to the self.style.MIGRATE_LABEL method, use the result to cal the self.stdout.write method.   if not,
  return a string '%02d' formated with self.data.month.
  call the method self.fields.items, for every name and field in result,
  call the method loader.get_migration with arguments app_label and migration_name, substitute the result for migration.
  if data is not None,
  if self.allow_multiple_selected is false,
  define the method add_item with 17 arguments: self, title, link, description, author_email set to None, author_name set to None,
  get_format called with an argument string 'TIME_INPUT_FORMATS', substitute the result for format.   call the method value.strftime with an argument format, return the result.
  define the method save with 2 arguments: self and commit set to boolean True.
  if format_module_path is true,
  call the method match.groupdict, use the result as an argument for the call to the function six.iteritems,
  read file fp, call the method decode on the result with an argument settings.FILE_CHARSET, return tuple containing 2 elements,
  call the method __init__ from the base class of the class RendererMixin, with 2 arguments: unpacked list args,
  from django.conf import settings into default name space.
  substitute the result for new_permission.   call the function os.chmod wiht arguments filename and new_permissions.
  for every closable in self._closable_objects,
  call the method self.render, return the result.
  substitute the result for new_class.   if bases equals a tuple with an element: class BaseModelForm.
  raise an CommandError exception with an argument string 'You must set settings.ALLOWED_HOSTS if DEBUG is False.'.
  if format is not contained in _serializers,
  if not, substitute template_dirs for key.   get the value under the key key of the self.template_cache dictionary, substitute it for template_tuple.
  format string normal_row with an dictionary containing 5 entries: an empty string for 'errors', empty string for 'label',
  if not,
  derive the class BaseLoader from the object base class.
  from django.utils.functional import lazy into default name space.
  if not,
  return boolean False.
  fail_message is a string changed'.
  define the function add_metaclass with an argument metaclass.
  substitute name and value for self.name and self.value.
  call the method self.setlistdefault with an argument key, append value to the result.
  return self._errors.
  if not,
  and form is not contained in forms_to_delete, substitute the resulting list for valid_forms.   for every form in valid_forms,
  if use_grouping is true and grouping is greater than integer 0, use_grouping is boolean True, otherwise it is boolean False.
  define the method strptime with arguments self, value and format.
  otherwise if name is not None and filter_func is None,
  substitute self.subject for subject.
  derive the class Command from the AppCommand base class.
  define the method __str__ with an argument self.
  derive the class RemovedInDjango19Warning from DeprecationWarning base class.
  derive the class ModelForm from the base class in the return value of the method six.with_metaclass, called with 2 arguments:
  define the method led with 3 arguments self, left and parser.
  return cls.
  name set to function_name, and takes_context set to takes_context and node_class set to SimpleNode.   substitute func.__doc__ for compile_func.__doc__.
  define the method __init__ with 5 arguments: self, name, value, attrs and choices.
  define the __call__method with arguments self, unpacked list args and unpacked dictionary kwargs.
  if self.verbosity is greater or equal to integer 3,
  if keys is true,
  call the function urlsplit with an argument value, assign the result to scheme, netloc, path, query and fragment, respectively.
  define the method add_arguments with 2 arguments self and parser.
  substitute encoding for self.encoding.
  break from the loop execution.
  define show_migration_list with self class instance, connection and app_names set to None, as arguments.
  call the method self._resolve, substitute the result for _module.
  call the __init__ method of the base class of the class LocaleRegexURLResolver, with arguments:  None, urlconf_name, default_kwargs, app_name and namespace.
  raise an TemplateSyntaxError exception with an argument string "Invalid arguments provided to assignment_tag".
  return split.
  decrement self.waiting_writers by integer 1,
  call the method Module_six_moves_urllib_request with an argument: string ".moves.urllib.request" appended to __name__,
  fail_message is a string 'created'.
  derive the class NumberAwareString from the resultclass base class.
  strip g of "'" from both ends,
  raise an Resolver404 exception with an argument dictionary containing 2 entries: new_path for 'path' and tried for 'tried'.
  call the function allow_lazy with 2 arguments: linebreaks, six.text_type, substitute the result for linebreaks.
  if KeyError exception is caught,
  call the method extend_nodelist with 3 arguments: nodelist, node and token, from the base class of the class DebugParser.
  define the method update with 2 arguments: self and dict_.
  substitute pattern._callback for callback.
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  call the method parser.skip_past with an argument string 'endcomment'.
  from django.utils import six into default name space.
  call the function import_module with an argument taglib_module, substitute the result for mod.
  define the method unparsed_entity_decl with arguments self, name, base, sysid, pubid and notation_name.
  if character '=' is contained in x,
  from django.db.migrations.loader import MigrationLoader and AmbiguityError into default name space.
  create directories from the elements in filename.
  call the function get_internal_wsgi_application, return the result.
  append the result to the result of the method, self.as_widget, return the resulting string.   call the method self.as_widget, return the result.
  substitute context.autoescape for old_setting.
  if app_label is not contained in executor.loader.migrated_apps,
  if endpos is lesser than zero,
  nesting is integer 1.
  token is an instance of Token class, created with 2 arguments: TOKEN_BLOCK and block_content.
  for every field_name and field_value in return value of the function six.iteritems called with value under the 'fields' key of dictionary d,
  join it with app into a string, separated with string '; ', substitute it for name_str.   substitute '%s\ in string "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'",
  where string '%s' is replaced by mod_name and func_name, respectively.   return view_func.
  if git_changeset is true,
  raise an ImportError exception with an argument string "No IPython".
  if self is an instance of nodetype,
  define the method errors with an argument self.
  get name attribute from the instance object, call it and return the result.
  call the function sql_destroy_indexes with 3 arguments: app_config, self.style and connection, substitute the result for statements.
  return value.
  define the method get_block with 2 arguments self and name.
  substitute last element of bits for taglib.
  evaluate the function force_bytes, with the arguments s, encoding, strings_only and errors, return the result.
  substitute self.external_entity_ref_handler for parser.ExternalEntityRefHandler.
  define the method __deepcopy__ with arguments self and memo.
  define the method _resolve with an argument self.
  call the method self.items, for every field and errors in the result.
  if csrf_token is not None,
  call the method baseconv.base62.encode with result of the time.time function converted to an integer, as an argument, return the result.
  if status is not equal to STATUS_OK,
  define the method find_potfiles with an arguments self and root.
  delete attr.
  return value.
  get executor.loader.graph.nodes list item at the index of the first element of targets list, get the value under the 'backwards' key of options dictionary, put previous two elements is a tuple, tuple is contained in a plan list.
  substitute link_next for value under the NEXT key of the link_prev dictionary.
  call the function force_str with an argument quoted_url, use the result as an argument for the call to the function unquote_plus,
  increment self.position by length of output.
  raise a ValidationError exception with arguments self.message and code set to self.code.
  if best_doublecolon_start equals integer 0,
  if app_config.label is contained in loader.migrated_apps,
  concatenate opts.concrete_fields, sortable_virtual_fields and opts.many_to_many, for every f in sorted result,
  if signal has an attribute 'SIGTTOU',
  define the method complain with 3 arguments: self, unpacked dictionary wargs and unpacked dictionary kwargs.
  define the method got with 3 arguments: self, key and otherwise set to None.
  define the method args_check with 3 arguments: name, func and provided.
  call the method self.nodelist.render with an argument context, strip the result of the surrounding whitespaces,
  derive the class Command from the BaseCommands base class.
  from xml.dom import pulldom into default name space.
  define the method handle with arguments self and unpacked dictionary options.
  value under the "RUN_MAIN" key of new_environ dictionary is a string 'true'.
  define the function to_locale with an argument language.
  if six.PY3 is true,
  call the function six.reraise with 3 arguments: DeserializationError, return value of the DeserializationError called with an argument e,
  convert args into a list, substitute it for args.
  if dklen is false,
  return nothing.
  call the function local, substitute the result _urlconf.
  derive the class Trans from the object base class.
  import module copy.
  call the function urlretrieve with arguments url and tempdir and filename joined into a file path, assign the result to the_path,  and info, respectively.
  substitute variables for self.vars.
  if space equals integer 0,
  _iterkeys is a string "iterkeys".
  import module sys.
  get frag attribute from found object, substitute it for found.
  strip message_context of "'" characters from both ends, substitute the result for message_context.
  call the method return self.format with an argument string 'D, j M Y H:i:s O', return the result.
  if not,
  increment doy by integer 1.
  substitute labels for value under the 'labels' key of attrs dictionary.
  for every char in fmt,
  from django.utils.text import unescape_entities into default name space.
  append a tuple with elements key and value to current_fields.
  if attrs is not None,
  substitute settings.CACHE_MIDDLEWARE_SECONDS for cache_timeout.
  derive the class SignatureExpired from the BadSignature base class.
  substitute bp for lbp.
  replace every occurrence of string '\r\n' in message with '\n', replace every occurrence of string '\r',
  format string hex_format_string with x, call the method encode on the result with an argument string 'ascii',
  from django.utils import timezone into default name space.
  convert self to a tuple, call the result with 2 arguments: block.name and block.nodelist, substitute the result for block.
  if rhs is an instance of SafeData.
  define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  derive the class Serializer from the base.Serializer base class.
  define the method _construct_form with 3 arguments: self, i and unpacked dictionary kwargs.
  from django.utils.six.moves import xrange into default name space.
  return an empty dictionary.
  self.objects is an empty list.
  call the function warnings.warn with 3 arguments: string 'import_by_path() has been deprecated. Use import_string() instead.',
  define the method create_token with 4 arguments: self, token_string, source and in_tag.
  delete attr.
  if path is None,
  substitute tokens for self.tokens.
  deifne the method __init__ with 5 arguments: self, class_name, old_method_name, new_method_name and deprecation_warning.
  escaped is boolean False.
  while length of line is grater than max_width,
  root is an empty list.
  substitute self.to_field_name, if exists, for key, if not substitute string 'pk' for key.
  call the method self.flo.read with an argument self.chunk_size, substitute the result for data.
  call the function import_library with an argument taglib_module, substitute the result for lib.
  call the method connection.ops.sql_flush with arguments: style, tables, seqs and allow_cascade, substitute the result for statements.
  substitute settings.MEDIA_URL for prefix.
  define the function split_url with an argument url.
  call the method validators.MinLengthValidator with min_length converted into an integer, append the result to list self.validators.
  call the method apps.setdefault with 2 arguments: app_name and an empty list, extend the resulting list with namespaces_list.
  define the method write_items with 2 arguments: self and handler.
  break from the loop execution,
  _localtime is an instance of LocalTimezone class.
  for value of dictionary response under the key 'Last-Modified'.   if call to the function response.has_header with 'Expires' as argument returns boolean False,
  import module re.
  return value.
  define the method __next__ with an argument self.
  if six.PY3 is true,
  otherwise if first element of g equals a string "'",
  call the method bmatch.group with an argument integer 1, use the result as an argument for the call to the function context_re.match,
  for every app_label and app_migrations in result of the method changes.items,
  while i is lesser than length of subject and i-th element of subject is not equal to c,
  and sorted return value of the items of the attrs dictionary, and second time with 3 arguments: an empty string, string ' {0}',   and sorted list of boolean_attrs elements, concatenate the results and return the resulting list.   python_2_unicode_compatible decorator,
  if data is not None or FILE_INPUT_CONTRADICTION,
  try,
  loop_dict and value under the 'forloop' key of the context dictionary are dictionaries with an entry: parentloop for 'parentloop'.
  return boolean True.
  call the method timezone.get_current_timezone, substitute the result for current_timezone.
  define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  while x is greater than zero,
  self._deleted_form_indexes is an empty list.
  return self._non_form_errors.
  raise an TypeError exception with an argument string 'In order to allow non-dict objects to be serialized set the safe parameter to False'.
  call the function data with 3 arguments: d.year, d.month and d.day, return the result.
  substitute value for value under the field.name key of the self._current dictionary.
  an instance of VerbatimNode class, return it.   register.tag decorator,
  if var ends with '.',
  if not,
  try,
  try,
  try,
  modify value at the key 'Location' of the dictionary response by applying function request.build_absolute_uri on it.
  if not,
  append t.contents to comment.
  call the method parser.compile_filter with an argument value, append the result to args.
  try,
  for every attr in _urllib_request_moved_attributes,
  and trimmed and result of the function join_tokens called with 2 arguments: plural and trimmed, write the result to out.   for every part in singular,
  if bit is true,
  nonlocal_root is an list with an element root.
  define the method has_key with 2 arguments: self and key.
  and app_or_project if app_or_project equals to string 'app', if not, it is replaced with 'a' and app_or_project.   call the method re.search with 2 arguments: raw string '^[_a-zA-Z]\w*$' and name, if it evaluates to false,
  define the method __ne__ with 2 arguments: self and other.
  define the function regroup with 2 arguments: parser and token.
  if args is None,
  self._unget_history is an empty list.
  if IOError, substituted to e, exception is caught,
  match value string with regex self.CONVERT_PATTERN, substitute the result for m.
  if iri is not initialized,
  define the method _format_value with 2 arguments: self and value.
  call the method self.data.isocalendar, return the first element of the result.
  if call to the method finder.find_module with 2 arguments: name and package_path evaluates to true,
  increment Field.creation_counter by one.
  msgmerge_options is an list with elements: strings '-q' and '--previous'.
  derive class _LazyModule from the types.ModuleType base class.
  if length of args is not equal to integer 2,
  substitute new_obj for obj.
  define the function default with 2 arguments value and arg.
  and '%(error)s' is replaced with return value of the force_text function called with an argument e,   extend the top_errors with the result.   call the function six.text_type with an argument bf, append the result to hidden_fields.
  try,
  if code is not None,
  return None.
  if pop_context is true,
  code_list is an empty list.
  CONTEXT_SEPARATOR is a string "\x04".
  call the M.set method with the key, real_value, coded_value as the arguments.
  call the method self.error_class with an argument list with a element: result of the method self.get_form_error,
  substitute the value under the command key of self.tags dictionary for compile_func.
  return boolean False.
  x is integer 0.
  substitute complain for __delitem__.
  try,
  call the sys.stderr.write function with an argument msg.
  define initialization method __init__ with self instance of the class as an argument.
  define the method _has_changed with arguments self, data and initial.
  define the method assignment_tag with 4 arguments: self, func set to None, takes_context set to None and name set to None.
  append self.msguniq_options to a list containing a string 'msguniq', append list containing potfile to the result, substitute it for args.
  call the method self.max_expr.resolve with an argument context, substitute the result for max_value.
  return Operator.
  if the key doesnt exists substitute self.use_natural_keys for self.use_natural_foreign_keys.   remove the 'use_natural_primary_keys' key from the options dictionary and substitute it for self.use_natural_primary_keys,
  from django.utils.safestring import mark_safe into default name space.
  return arg.
  substitute SafeBytes for SafeString.
  if initial is None,
  if value under the "RUN_MAIN" key of the os.environ dictionary equals to string "true",
  skip this loop iteration.
  call the force_text function with 3 arguments: e.strerror, DEFAULT_LOCALE_ENCODING and strings_only set to boolean True.
  if source is an instance of Group class,
  if change equals to FILE_MODIFIED,
  if index is lesser than integer 0,
  substitute max_value and min_value for self.max_value and self.min_value.
  substitute smart_text for smart_str.
  substitute self.old_timezone for _active.value.
  if ImportError exception is caught,
  verbosity set to verbosity, interactive set to interactive and using set to db.   call the method models.signals.post_syncdb.send with 6 arguments: sender set to app_config.models_module,
  define the function compress_sequence with an argument sequence.
  try,
  call the function re.compile with raw string '(\s+)', substitute the result for word_split_re.
  substitute value under the 'use_ipv6' key of the options dictionary for self.use_ipv6.
  replace '%s' in the string 'handler%s' with view_type, use it as an name of the attribute to get from the urls, substitute it for callback.
  if m is true,
  call the method urlparse with an argument url, substitute the result for bits.
  call the method self.configure_logger with 2 arguments: name and value under loggers dictionary key name.
  substitute self.urlconf_name for self.urlconf_module.
  substitute template for self.template.
  return value.
  attrs is an empty dictionary.
  help is a tuple containing a string "Creates a Django app directory structure for the given app name in the current directory or optionally in the given directory.".
  if KeyError exception is caught,
  biggest_number is maximum numbers element.
  substitute string 'checked' for value under the 'checked' key of final_attrs dictionary.
  if ValueError or TypeError are caught,
  replace every occurrence of '</' in s with '<\\/'.
  return the value under the self.data.month key of the MONTHS_ALT dictionary.
  skip this loop iteration.
  define the method _setup with an argument self.
  define the method __init__ with arguments self, stream and boundary.
  clean_data is an empty list.
  new_class.declared_fields.keys.   if missing_fields is true,
  check if obj is instance of the object _PROTECTED_TYPES, return the boolean result.
  if not,
  call the context.push method, with the result, perform,
  define the method reader_leaves with an argument self.
  define the method read with an argument self.
  substitute value under the 'use_threading' key of the options dictionary for threading.
  self.error_class is a string 'errorlist'.
  substitute node.source for e.django_template_source.
  define the method reset with an argument self.
  for ext in pathext,
  return data.
  define the method write_po_file with arguments self, potfile and locale.
  if autoescape is true,
  try,
  substitute source for e.django_template_source.
  if ValueError exception is caught,
  if source is an instance of NonCapture class,
  return the result of the method self.errors.get called with 2 arguments: NON_FIELD_ERRORS and return value of the method,
  if middleware has an attribute 'process_view',
  define the method __init__ with 2 arguments: self and callback.
  call the method self.error_class, substitute the result for value under the field key of the self._errors dictionary.
  self._reverse_dict is an empty dictionary.
  for every field_node in return value of the method node.getElementsByTagName with an argument string 'field'.
  return the value under the INITIAL_FORM_COUNT key of the self.management_form.cleaned_data dictionary.
  from django.conf import settings into default name space.
  call the function self.filter_expr.resolve with an argument context, return the result.
  call the function lazy with 2 arguments: ugettext and six.text_type, substitute ugettext_lazy.
  for every node in self.nodelist_loop,
  call the function
  an empty string for 'clear_template' and self.clear_checkbox_label for 'clear_checkbox_label'.   template is a string '%(input)s'.
  try,
  define the __init__ method with 3 arguments: self, unpacked list args and unpacked dictionary **kwargs.
  want_unicode is boolean True.
  self.test_runner is None.
  if iterator is None,
  if self.verbosity is greater or equal to integer 2,
  __T is a raw string '(?P<hour>\d{2}):(?P<min>\d{2}):(?P<sec>\d{2})'.
  convert value to an integer.
  call the method token.split_contents, substitute the result for bits.
  call the function blankout with 2 arguments: t.contents and 'X', write the result to out.
  define the method items with an argument self.
  substitute serialize_headers for __bytes__.
  __Y is a raw string '(?P<year>\d{4})'.
  if Exception, renamed to e, exception is caught,
  define the method __init__ with arguments self, flo and chunk_size set to integer 64 multiplied by integer 1024.
  call the method self.data.tzinfo.tzname with an argument self.data, if it is true, return it, otherwise return an empty string.
  call the method host_validation_re.match with an argument host.
  find the first subgroup of the matched string from the match object, convert it to lowercase, substitute it for tag and self.lasttag.
  define the method E with an argument self.
  define the function get_cache_key, with request key_prefix set to None, method set to 'GET' and cache set to None as arguments.
  derive the class RadioSelect from the RendererMixin and Select base classes.
  property decorator,
  for every k and v in result of method the self.lists.   define the method __deepcopy__ with 2 arguments: self and memo set to None.
  return an empty string.
  extend new_second_item with item.
  for every item in values,
  call the method __init__ from the base class of the class BaseModelForm, with 8 arguments: data, files, auto_id, prefix, object_data,
  return dec.
  call the method start_ipython with an argument argv as an empty list.
  append options to output.
  if ValueError exception is caught,
  value under the field.attname key of the data dictionary is None.
  current_len is equal to integer 0.
  define the method _has_changed with 3 arguments: self, initial and data.
  for every model in model_list,
  define the method add with 4 arguments: self, data, conn_type and squash set to boolean True.
  create an iterator out of x.
  domains is a tuple with element string 'django'.
  _assertRegex is a strnig "assertRegex".
  define the function pprint with an argument value.
  return an empty string.
  substitute EscapeBytes for EscapeString.
  help is a string "Squashes an existing set of migrations (from first until specified) into a single new one.".
  split into two parts token.contents by None, substitute the parts for _ and rest, respectively.
  return value under the key key of d dictionary.
  for every x is the range of integers from level to the integer 2, in the reversed order,
  shown is an empty set.
  if value under the 'author_email' key of the item dictionary is not None,
  close fd file descriptor.
  define the function prefix with 2 arguments bp and func.
  call the method self.check_test with an argument value, if it evaluates to true,
  for every app and names in result of the method conflicts.items, join names into a string, separated by ', ',
  if value under the 'feed_url' key of the self.feed dictionary is not None,
  substitute self.files for value under the 'files' key of the defaults dictionary.
  for every condition and nodelist in self.conditions_nodelists,
  if lengths of initial and data are not the same,
  call the method operator.attrgetter with an argument _func_globals, substitute the result for get_method_globals.
  call the function timedelta with an argument seconds as negative time.timezone, return the result.
  call the method self.as_ul, return the result.
  otherwise if first element of second row of args equals a string '3',
  raise an InvalidTemplateLibrary exception with an argument string "Unsupported arguments to Library.tag: (%r, %r)",
  call parser.add_argument method with '--ipv6', string '-6', action set to string 'store_true', dest set to string 'use_ipv6',
  call the method token.split_contents, substitute the result for bits.
  while remaining is not equal to integer 0,
  if value is boolean True, string 'True' or string '1',
  from django.core.serializers.python import Serializer as PythonSerializer into default name space.
  call the method parser.add_argument with string 'app_label', nargs set to charcter '?', help containing string,
 call the method os.chdir with an argument our_home_dir.
  if vale is None or an empty string,
  raise a CommandError exception with an argument:
  define the method __deepcopy__ with 2 arguments: self and memo.
  define the function __init__ with 5 arguments: self, takes_context, args, kwargs and target_var.
  import gettext module.
  define the method _has_changed with 3 arguments: self, initial and data.
  call the function quote with the result and with the safe set to bytes string "/~!*()'", return the function result.   define the function get_system_encoding without the input arguments.
  WRAPPING_PUNCTUATION is a list with 6 elements: tuple with 2 elements: '(' and ')', tuple with 2 elements: '<' and '>',
  substitute '%r' in string ' gettext(%r) ' with  result of the function join_tokens, called with 2 arguments: singular,
  append string 'django.conf.locale.%s' to format_locations.
  if new_method is false and old_method is true,
  if source is None,
  self.vals is an empty list.
  and result of the function flatatt, called with an argument final_attrs.   define the method value_from_datadict with 4 arguments: self, data, files and name.
  if iterable is true, otherwise use an empty list as an argument.   define the method add with 2 arguments: self and item.
  call the method self.set_cdata_mode with tag as the argument.
  if message is an instance of SafeData.
  for every value in result of the method self.prepare_value called with an argument initial.   data_set is set created out of return values of the function force_text called with an argument value,
  if initial is None,
  called with the argument microseconds set to integer 0, on the result of the method value.time.   return list containing 2 elements: None and None.
  call the function pformat with an argument sys.modules, append the result for output.
  return nothing.
  call the method self.__bytes_cast, return the result.
  self.cookies is an instance of a class SimpleCookie.
  if _default is None
  define the function sanitize_separators with an argument value.
  from django.core.servers.basehttp import get_internal_wsgi_application into default name space.
  if not self.max_length is None.   remove the value under 'allow_empty_file' key from the kwargs dictionary and if the key exists,
  define the method S with an argument self.
  remove original_path directory.
  return value of the function re.escape called with an argument BLOCK_TAG_START,   return value of the function re.escape called with an argument BLOCK_TAG_END,   return value of the function re.escape called with an argument VARIABLE_TAG_START,   return value of the function re.escape called with an argument VARIABLE_TAG_END,   return value of the function re.escape called with an argument COMMENT_TAG_START,   and return value of the function re.escape called with an argument COMMENT_TAG_END, substitute the result for tag_re.   libraries is an empty dictionary.
  if used_name is not equal to guessed_filename,
  if self.object is not an instance of list type,
  for every key and value in return value of the self._headers.values method, call the function to_bytes with 2 arguments: key,
  where '%s' is replaced with command and result of the function get_text_list called with an argument list,   with p converted into a string and surrounded with single quotes for every p in parse_until.   call the method self.error with 2 arguments: token and string "Invalid block tag: '%s'", where '%s' is replaced with command,
  if cache is None,
  import module warnings.
  if not, isolated_context is boolean False.   get the value under the 'width' key of the options dictionary, if it exists, substitute it for namemap, if not namemap is an empty dictionary.
  return result.
  call the function reloader_thread.
  if filename ends with '/' or with '\\',
  import module warnings.
  return new_class.
  call the function warnings.warn with 3 arguments: string '`MergeDict` is deprecated, use `dict.update()` instead.',
  return nothing.
  from __future__ import unicode_literals into default name space.
  raise an ValueError exception with an argument string 'Unable to configure formatter %r: %s' formated with name and e.
  call the function warnings.warn with 3 arguments:
  define the method __init__ with arguments self, stream and boundary.
  return self.__language.
  return the first element of self.client_address.
  property decorator,
  if settings.TEMPLATE_DEBUG is true,
  _assertRegex is a strnig "assertRegexpMatches".
  get the value under the 'filename' key of the params dictionary, if the key exists substitute it for guessed_filename,
  if not,
  default set to boolean False, help as a string "Just show what migrations would be made; don't actually write them.".   call the method parser.add_argument with 5 arguments: string '--merge', action as a string 'store_true', dest as a string 'merge',
  return lambda function with text as argument and return value being result of the function colorize, called with 3 arguments: text,
  get value under the BLOCK_CONTEXT_KEY key of context.render_context dictionary, substitute it for block_context.
  call the method self.copy, return the result.
  get the value under the format key of the _serializers dictionary, return the Serializer filed of the result.
  where '%s' is replaced with elemnts of token from upto index till the end, and token.   substitute filters for self.filters.
  call the function chain with an argument unpacked list, append name to string 'render_',
  call the method handler.addQuickElement with 2 arguments: string 'email' and value under the 'author_email' key of the self.feed dictionary.
  if self.allow_empty_file and file_size are both false,
  do nothing.
  for every i and word in enumerated iterable words,
  if block is None,
  if resource_string is not None,
  if field_value is an instance of the str type,
  convert arg to an integer, substitute it for p.
  _iterkeys is a string "keys".
  from django.template.loader import BaseLoader into default name space.
  substitute choices for self.choices.
  update declared_fields dictionary with entry base.declared_fields.
  if value under the 'author_link' key of the self.feed dictionary is not None,
  from django.core.management.sql import sql_delete into default name space.
  substitute text for self.text.
  TOKEN_COMMENT is integer 3.
  decorator function register.filter with an argument is_safe set to boolean True.
  define the method handle_m2m_field with argument self, obj and field.
  raise an CommandError with an argument string "errors happened while running msgmerge\n%s", where '%s' is replaced with errors.
  append self._regex_validator to self.validators.
  try,
  call the method self.func with an argument value.
  substitute the value under the 'errlog' key of options dictionary for value under the 'err_log' key of daemon_kwargs dictionary.
  if comment_lineno_cache is not None,
  call the method m.group with an argument string 'min', convert the result into a string, substitute it for min.
  if sys.warnoptions is false,
  status_code is an integer 405.
  where '%s' is replaced with taglib_module.   templatetags_modules is an empty list.
  get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.
  define the method add_arguments with self and parser as arguments.
  if templatetags_modules is false,
  derive the class RegexURLResolver with LocaleRegexProvider as base class.
  call the method form.add_initial_prefix with an argument self.auto_id, substitute the result for self.html_initial_id.
  is_compressed is boolean True.
  return obj_dict.
  return self._changed_data.
  call the function get_ns_resolver.cache_clear.
  call the function ugettext with an argument string "%s PB", substitute '%s' with the result of the call to the function,
  if lookup_view is a callable object,
  return self._callback.
  if value.tzinfo is not None and call to the method value.tzinfo.utcoffset called with an argument value evaluates to not None,
  call the method self.build_attrs with an argument id set to field modulus id_, substitute the result for local_attrs.
  resolved_args is an list with elements, return value of the method var.resolve with an argument context, for every var in self.args.
  define the function b64_decode with an argument s.
  define the method validate with arguments self and value.
  define the function get_fixed_timezone with an argument offset.
  from django.core.exceptions import ImproperlyConfigured into default name space.
  remove config dictionary element under 'name' key, if it exists substitute it for name, if not, name is an empty string.
  if value object the 'unique_id_is_permalink' key of the item dictionary is an instance of bool type,
  substitute '%s' with return value of the function get_text_list called with 2 arguments:self.extensions converted into a list and string 'and'.   self.invoked_for_django is boolean False.
  register is an instance of Library class.
  call the function format_html with 2 arguments: string "<input type='hidden' name='csrfmiddlewaretoken' value='{0}' />",
  result is an integer 0.
  call the function popen_wrapper with argument args, assign the result to msgs, errors and status.
  convert value into an floating point number, substitute it for value.
  if empty_label is an instance of list or tuple type,
  call the function update_wrapper with 2 arguments: wrapper and user_function, return the result.
  for every form in self.initial_forms,
  call the function predicate with an argument item, use it as a key to get results dictionary value, append item to it.
  define the method __iter__ with an argument self.
  decorator function register.filter with an argument is_safe set to boolean False.
  call the function walk_to_end with 2 arguments: ch and pattern_iter.
  define the method __eq__ with 2 arguments: self and other.
  yield v.
  if var is not an instance of six.string_types,
  define the method has_previous with an argument self.
  raise an ValueError with an argument string "The %s could not be %s because the data didn't validate.",
  substitute obj_pk.pk for obj_pk.
  write a '[' to the self.stream file stream.
  import module operator.
  if TemplateDoesNotExist exception is caught,
  if META_override is not None, or otherwise generated with the call to the function pformat with an argument request.META.   if Exception exception is caught,
  call the method self._handle_m2m_field_node with an argument field_node and field, substitute the result for value under the field.name key of m2m_data dictionary.
  otherwise if end is not an instance of string type,
  return the result of the method self._html_output, called with 5 arguments: normal_row to a string,
  register.tag decorator,
  call the method validate with an argument value from the base class of the DecimalField class.
  import module re.
  self.first is boolean True.
  substitute prefix for common_prefix.
  delete attr.
  self.tags is an empty dictionary.
  for every migration in migrations_to_squash,
  slice root starting from the prefix_length index to the end, substitute it for path_rest.
  call the method self.full_clean.
  call the method pending_references.keys, put the result into a set and substitute it for not_installed_models.
  called with an argument view_func.   define the function _wrapped_view with 3 arguments: request, unpacked list args and unpacked dictionary kwargs.
  skip this loop iteration.
  substitute the result for filter_re.   derive the class FilterExpression form the base class object.
  call the method inspect.getmro with an argument new_class, for every base in the result,
  import module re.
  define the method __repr__ with an argument self.
  call the method value.decode with an argument charset.
  break from the loop execution,
  substitute the result for the value under the 'year' key of the html dictionary.   call the function six.iteritems with an argument self.months, convert the result to a list and substitute it for choices.
  convert self.forms into an iterable, return it.
  if confirm is not equal to string 'yes' or string 'no',
  if sys.platform starts with string 'java',
  try,
  yield node.
  if action equals to string "apply_start",
  substitute self.choices for self.widgetchoices.
  if m is false,
  if header_end equals integer negative 1,
  decorator stringfilter,
  with '%s' substituted for name_str, as argument.   run_syncdb is boolean False.
  define the method id_for_label with arguments self, name, field, value, val, choices and none_value.
  if field.rel.to._meta.pk.rel is true,
  if buf is false,
  if KeyError exception is caught,
  wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " FAKED" as a argument.
  substitute return value of call to the function _set_response_etag with response as an argument, for response.
  substitute definition for value under the role key of palette dictionary.
  skip this loop iteration,
  call the method self.has_header with string 'Content-Encoding' as an argument, if it evaluates to true,
  call the function exhaust with an argument self._input_data.
  return list with an element first_item, and boolean True.
  from django.utils import datetime_safe into default name space.
  append string '%%(%s)s' to plural, where '%s' is replaced with t.contents.
  if start is greater than upto,
  derive the class VariableDoesNotExist form the base class Exception.
  if not,
  d is an instance of class Decimal, created with result of the function force_text,
  substitute self.template_with_initial for template.
  call the method data.find with an argument self._boundary, substitute the result for index.
  old_field_name is None.
  if self.is_bound is false,
  return the first element of bits and an empty string.
  define the method start_serialization with an argument self.
  call the method self.configure_logger with 3 arguments: name, value under name key of loggers dictionary and boolean True.
  if call to the method finder.find_module with an argument name evaluates to true,
  if field is contained in self.errors return boolean True, if not, return boolean False.
  if http_cookies.CookieError exception is raised.
  if secret is None,
  if not,
  import module time.
  call the method handler.addQuickElement with 2 arguments: string "category" and cat.
  if value is false, return it, if it is true convert first element of value to uppercase letter, return the value.
  try,
  if length of t is greater than integer 1,
  if instance is None,
  if args is true,
  return value.
  return self.object_list element at index.
  substitute new_value for value.
  self.namespaces is an empty list.
  return string first element of t, '=', second element of t.
  make a directory migrations_directory.
  for every value in data call the function force_text with an argument value, add the results into a set, substitute the resulting set for data_set.
  call the method self.valid_value with an argument val, if it evaluates to false,
  otherwise if total_forms is grater than self.max_num is grater or equal to integer 0,
  if OSError renamed to e, exception is caught,
  call the function ugettext with an argument message.
  if name is true, substitute it for function_name, if not get '_decorated_function' attribute from func object, if it exists,
  if target is None,
  substitute http_cookies.SimpleCookie for SimpleCookie.
  from django.forms.fields import Field and ChoiceField into default name space.
  from django.utils.timezone import template_localtime into default name space.
  raise an Resolver404 exception with an argument dictionary containing 1 entry: path for 'path'.
  call the method handler.addQuickElement with 2 arguments: string 'lastBuildDate' and result of the function rfc2822_date,
  define the method __setitem__ with 3 arguments: self, key and value.
  if TypeError, renamed to te, exception is caught,
  define the method utcoffset with 2 arguments: self and dt.
  if num_loopvars is greater than integer 1, unpack is an boolean True, otherwise is an boolean False.
  increment pos by one, substitute the result for last.
  is replaced with '\\"'.   define the function same_origin with 2 arguments url1 and url2.
  can_delete for 'can_delete', min_num for 'min_num', max_num for 'max_num', absolute_max for 'absolute_max',   validate_min for 'validate_min' for validate_max for 'validate_max'.   create a class class which name is generated by converting 'FormSet' into a string and appending it to form.__name__,
  try
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  call the signed_value.rsplit method with arguments self.sep and integer 1, substitute the result for value and sig, respectively.
  use the result as the argument for the call to the messages.update function.   update messages dictionary with error_messages, if it exists, if not don't update it.
  if file is an instance of six.string_types.
  call the method self.error with 2 arguments: token and string "Empty block tag", return the result.
  year_field is a string '%s_year'.
  convert path to a string, substitute the result for path.
  evaluate the self.getpos() and assign the result to the lineno and offset respectfully.
  perform bitwise exclusive OR on 2 operands integer representation of x and integer representation of y,
  call the function do_translate with 2 arguments: message and string 'ugettext', return the result.
  get '_decorated_function' attribute from the func object, substitute it for _dec._decorated_function, if it doesnt exist,
  from django.template.loader import get_template into default name space.
  initial set to None, error_class set to ErrorList, label_suffix set to None, empty_permitted set to boolean False.   if data is not None or files is not None, self.is_bound is boolean True, otherwise it is boolean False.
  replace every occurrence of old for new in msgs, substitute the result for msgs.
  if path is not initialized,
  call the function warnings.warn with 3 arguments: string 'Reversing by dotted path is deprecated (%s).', with '%s' replaced with
  for every dict_ in self.dicts,
  call the function re.compile with 2 arguments, string '^%s/', where '%s' is replaced with language_code and re.UNICODE, substitute the result for regex_compiled.
  call the method self.__cast, if the result doesnt equal to other, return boolean True, otherwise return boolean False.
  for every i in range of integers from integer 0 to the length of pieces decremented by one, with step of integer 3,
  call the function io.open with 3 arguments: work_file, string 'w' and encoding set to settings.FILE_CHARSET as arguments,
  from django.conf import settings into default name space.
  for every plan_node in return value of the graph.forwards_plan method called with node as argument.
  if indent is false,
  call the function get_format with an argument string 'THOUSAND_SEPARATOR', substitute the result for thousand_sep.
  i is integer 0.
  call the self.stdout.write method with string "    Creating table %s\n" as argument, with all occurrences of '%s' replaced with model._meta.db_table.
  while i is lesser than length of subject and i-th element of subject is not an empty space or tab character,
  try,
  if current is an instance of BaseContext and bit attribute of type of current is true,
  if second element of url_fields is false,
  from django.core.management.sql import sql_flush into default name space.
  if cached is not None,
  define the method utcoffset with 2 arguments: self and dt.
  call the method validators.ip_address_validators with arguments protocol, unpack_ipv4, substitute first element of the result for self.default_validators.
  substitute the length of the resulting list for number_equal.   if number_equal is greater than integer 40,
  if test_runner_class has an 'option_list' attribute,
  call the method executor.migration_plan wiht return value of te method executor.loader.graph.leaf_nodes as argument, substitute it for plan.
  return value.
  where '%s' is replaced with self.__class__.__name__.   for form in self.forms append form.cleaned_data to a list, return the resulting list.
  derive the class Command from the AppCommand base class.
  if the 'fake' key doesnt exists set fake to boolean False, as arguments.   call the method emit_post_migrate_signal with created_models, self.verbosity, self.interactive and connection.alias as arguments.
  for integer representation of z converted into a string.   define the function escapejs with an argument value.
  'Nominates a database to print the SQL for. Defaults to the "default" database.' as the arguments.   define the method handle with self class instance and dictionary options as the arguments.
  call the method translation._info.copy, substitute the result for self._info.
  if '.' is contained in words or '@' is contained in word or ':' is contained in word,
  help is a string "Starts a lightweight Web server for development.".
  substitute the result for final_attrs.   get the value under the 'id' key of final_attrs dictionary, substitute if for id_ if the key doesnt exists, id_ is None.
  decorator method register.tag with an argument 'include',
  from django.db import models and router into default name space.
  return an empty string,
  substitute settings.ROOT_URLCONF for urlconf.
  buffer_types is a tuple with 2 elements bytearray and memoryview.
  sub_match.url_name, self.app_name if it exists or if not sub_match.app_name and sub_match.namespaces list appended to self.name.   append pattern to tried list.
  if attrs is not None,
  register.tag decorator,
  if i is greater than, or equal to the result of the call to the method self.initial_form_count,
  call the method six.reraise with 3 arguments: MultiPartParserError, MultiPartParserError created with msg,
  call the self.initial_form_count method, return the sublist of self.forms from the beginning to the previous result as the end index.
  call the value.split method with '://' as argument, convert first element of the result to lower case, substitute the result for scheme.
  if Exception, renamed to e, exception is caught,
  derive the class RWLock from the object base class.
  call the method handler.endElement with an argument string 'item'.
  if settings.DEBUG is true,
  substitute raw_data for data.
  call the function force_text with an argument template_string.
  template_with_clear is a string '%(clear)s <label for="%(clear_checkbox_id)s">%(clear_checkbox_label)s</label>'.
  from django.forms.utils import ErrorList into default name space.
  from django.utils import datetime_safe into default name space.
  call the method s.decode with an argument string 'utf-8', substitute the result for s.
  call the function getcallargs with an argument current,
  while path is true,
  autodetector is an instance of the MigrationAutodetector class, created with 3 arguments: result of the method loader.project_state,
  if IndexError exception is caught,
  self.POST is an instance of QueryDict class created with an argument mutable set to boolean True.
  call the function timedelta with an argument seconds set to negative _time.altzone, substitute the result for self.DSTOFFSET.
  if elt is an instance of NonCapture class,
  if rhs is an instance of SafeText,
  define the method write with 3 arguments: self, outfile and encoding.
  if fget is not None,
  call the method handler.endElement with an argument string 'entry'.
  call the function v with an argument value.
  from __future__ import unicode_literals into default name space.
  content.setter decorator,
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  call the method package.rindex with 3 arguments: string '.', integer 0 and dot, substitute the result for dot.
  import flup
  append string ".moves.urllib_response" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for response.
  call the method template_file.read, substitute it for content.
  from django.utils.timezone import is_aware into default name space.
  if doublecolon_start equals integer -1,
  call the method _trans.gettext_noop with an argument message.
  for every __ in iterator,
  return a string "<Variable Node: %s>", substitute '%s' with self.filter_expression.
  self.first is boolean False.
  substitute old_method_name for self.old_method_name.
  use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.   for every migration in merge_migrations,
  substitute name for self.name.
  call the function timeuntil with 2 arguments value and arg, return the result.
  weekday, increment the result by integer 1 and substitute it for jan1_weekday.   call the method self.data.weekday, increment the result by integer 1, substitute the result for weekday.
  break from the loop execution.
  for every filename in files,
  define the method __repr__ with an argument self.
  if other is an instance of self.__class__ and, self.limit_value equals to other.limit_value, and self.message equals to other.message,
  convert exclude elements to list, substitute it for construct_instance_exclude.
  otherwise, if s has an attribute '__unicode__',
  return form.
  call the method popitem from the base class of the class SortedDict, substitute the result for result.
  if is_compressed is true,
  for f in file_list,
  for every el in split string cc_delim_re, with delimiter being the value of dictionary response under the key 'Cache-Control'.   if cc contains item 'max-age',
  escaped is boolean True.
  substitute name, nodelist and parent for self.name, self.nodelist and self.parent.
  substitute localize for self.localize.
  define the method __new__ with 4 arguments mcs, name, bases and attrs.
  define the method values with an argument self.
  if TypeError or ValueError exceptions are caught,
  if self.initial is true, substitute the length of self.initial for initial_forms, if not, initial_forms is integer 0.
  if not,
  substitute first element of args for arg.
  for every k and v in result of the call to the method type_.__dict__.items,
  do nothing,
  call the function importlib.import_module with 2 arguments: flup_module converted to string and appended to '.' character, and string 'flup', substitute the result for module.
  dest set to string 'interactive', default set to boolean True and help as 'Tells Django to NOT prompt the user for input of any kind.'   call the method parser.add_argument with 5 arguments: string '--no-initial-data', action set to string 'store_false',
  use the result as an argument for the call to the self.stdout.write.   call the self.sync_apps method with connection and executor.loader.unmigrated_apps as arguments, substitute it for created_models.
  yield item.
  if not,
  define the method close with an argument self.
  model._meta.app_label, model._meta.object_name, fk_name, respectively.   if not,
  if not,
  otherwise if value under the 'app_label' key of options dictionary is true,
  return _decorator.
  raise an ValueError exception with an argument string "Unable to convert %r" formated with value.
  define the method __str__ with an argument self.
  substitute error_messages under the message.code key of error_messages dictionary for message.message.
  rendering_attrs is a list containing 3 strings: 'template_name', 'context_data' and '_post_render_callbacks'.
  yield string 'year' as an return value of the generator.
  convert keys of dictionary self.dict into a iterable, return it.
  if not,
  if cc contains item 'max-age' and kwargs contains item 'max_age',
  the %(lookup)s in %(date_field)s.", where '%(field_name)s' is replaced with third element of data_check,   '%(date_field)s' is replaced with fourth element of date_check and '%(lookup)s' is replaced with result of the function,   six.text_type called with second element of date_check as an argument, return the result.   define the method get_form_error with an argument self.
  if self._validate_unique is true,
  return boolean False.
  if value under the 'ENGINE' key of the connection.settings_dict dictionary equals a string 'django.db.backends.dummy',
  self.template_cache is an empty dictionary.
  call the function copy.deepcopy with an argument self.base_fields, substitute the result for self.fields.
  call the method self.resolve with an argument c, substitute the result for c.
  split header string at string '\r\n', for every line in result,
  append list containing string '--no-wrap' to self.msgmerge_options
  call the function time_format with 3 arguments: value, string 'TIME_FORMAT' and use_l10n as use_l10n, return the result.
  return result.
  define the method clean with arguments self and value.
  if last element of host equals character ']',
  define the function iri_to_uri with iri as an argument.
  call the function runfastcgi with an argument args.
  import module calendar.
  return the element at the index index of the tuple containing 3 elements: self.func, self.args and self.kwargs.
  return a string '<%s token: "%s...">' with '%s', replace '%s' with token_name and 20 self.contents elements with every newline deleted.
  decorator stringfilter,
   file is an instance of BytesIO class created with an argument: value under the 'content' key of the data dictionary.
  if not,
  return an instance of a NodeList class, created with arguments node, for every node in nodelist,
  can_order as can_order, can_delete as can_delete, validate_min as validate_min, validate_max as validate_max,   substitute the result for form.   substitute model for FormSet.model.
  get the id of the self object, use it as a key to obtain the value from the memo dictionary, substitute self with it.
  remove config dictionary element under 'filter' key, if it exists substitute it for filters, if not, filters is None.
  make a directory named original_path.
  try,
  if not,
  if sys.version_info is greater than or equal to a tuple with 3 elements: integers 2, 7 and 2, respectively,
  if not,
  call the method final_output.extend with an argument output.
  remove first and last elements of s, replace every occurrence of string '\%s' formated with quote with quote,
  call the method pytz.timezone with an argument timezone, substitute the result for _active.value.
  call the traceback.print_exc method.
  get translation_function attribute of the object t, call the result with an argument eol_message, substitute the result for result.
  call the function select_template with 2 arguments: template_name, dirs, substitute the result for t.
  from django.utils import six into default name space.
  raise an ContextPopException.
  increment i by integer 1.
  delete attr.
  raise an ValidationError with 2 arguments: value under the 'contradiction' key of the self.error_messages dictionary and code set to 'contradiction'.
  for every d in self.dicts,
  substitute first element of parts for view.
  import module stat.
  call the method query.items, substitute the result for query.
  output_transaction is boolean True.
  substitute status for self.status_code.
  define the method filter with 4 arguments: self, name set to None, filter_func set to None and unpacked dictionary flags.
  derive the class IfChangedNode from Node base class.
  return the value under the language_code key of the self._app_dict dictionary.
  return an empty dictionary.
  with an argument string 'object', return the result.   define the method _get_model_from_node with arguments self, node and attr.
  get the value under the 'domain' key of the options dictionary, substitute it for self.domain.
  if string 'version' is not contained in config,
  call the function walk_to_end with 2 arguments: ch and pattern_iter.
  map elements of value through mapping function force_text, substitute the result for value.
  return a string '%02d' formated with the result of the function self.g.
  create md5 hash from string response.content in hexadecimal format, surround the hash with double quotes,
  increment int_part_gd by thousand_sep.
  define the method to_python with arguments self and value.
  best_doublecolon_start is an integer -1.
  call the function parse_header with an argument line, substitute the result for main_value_pair and params, respectively.
  substitute URLInput for widget.
  delete the first element of self.tokens.
  if 'content_type' key doesnt exist in kwargs, set its value to 'application/json'.
  substitute _make_key for make_key.
  define the method __init__ with 4 arguments: self, name, nodelist, parent set to None.
  if self.verbosity is greater than integer 0,
  for every handler in self._upload_handlers,
  if ch is not equal to string '\\'.
  media is an instance of Media class.
  option_value is an empty string.
  define the method render with 2 arguments self and context.
  best_doublecolon_len is an integer 0.
  HITS and MISSES are integer 0 and 1, respectively.
  add ext to f, substitute the result for fext.
  define the method __init__ with 3 arguments: self, func and name set to None.
  call the method bf.css_classes, substitute the result for css_classes.
  get return value of the field.get_attname function attribute of the obj object, substitute it for value.
  and self.model._meta.pk.name.   substitute the value under the pk_key key of the self.data dictionary for pk.
  skip this loop iteration.
  try,
  define the function import_string with an argument dotted_path.
  return _dec.
  raise an DisallowedHost exception with an argument msg.
  define the function urlsafe_base64_decode with an argument s.
  call the function re.compile with 2 arguments: elements of parts joined into a string, separated with '|',
  return the result of the call to the function force_text, with s, encoding, string_only and errors as arguments.
  sum sign and hhmm, substitute the result for name.
  call the method self._coerce with an argument data, substitute the result for data.
  from django.conf import settings into default name space.
  if length of bits is lesser than integer 2,
  split is an empty list.
  call the method parser.compile_filter with an argument value, substitute the result for value under the name key of kwargs dictionary.
  raise an EmptyPage exception with string 'That page number is less than 1' as an argument.
  if self.ignore is true and field_name is not contained in model_fields,
  try,
   substitute value under the RESULT key of the root dictionary for oldvalue.
  check if lowercase header_query exists is existing_headers, return the boolean result.
  if UnicodeError exception is caught,
  from django.utils.formats import localize into default name space.
  substitute lib for value under the library_name key of libraries dictionary.
  convert self.use_ipv6 to boolean, substitute it for self._raw_ipv6.
  get handler_config dictionary element under 'level' key, if it exists substitute it for level, if not, level is None.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  define the method __mod__ with 2 arguments: self and rhs.
   substitute value under the KEY key of the root dictionary for oldkey.
  remove first element from styles, split it by the '/' character, substitute the result for colors.
  from django.db import models into default name space.
  if method self.validate_domain_part with an argument domain_part evaluates to true,
  if self._encoding is None,
  _assertCountEqual is a strnig "assertCountEqual".
  while token.contents starts with a string 'elif',
  get the value under the settings.LANGUAGE_COOKIE_NAME key of the request.COOKIES dictionary, substitute it for lang_code.
  return boolean False.
  call the function datetime_safe.new_datetime with an argument date, substitute the result for date.
  call the function ugettext_lazy with an argument string 'Currently', substitute the result for initial_text.
  define the method has_other_pages with an argument self.
  derive class Command from the BaseCommand base class.
  raise an raise self.warning with an argument self.warning.
  return an empty string.
  if value has an 'close' attribute,
  if not, self.empty is boolean False.   crate a set containing of app_labels elements, substitute it for app_labels.
  substitute opts for value under the 'opts' key of definition dictionary.
  from django.template.base import TemplateSyntaxError, Library, Node, TextNode, token_kwargs and Variable into default namespace.
  make basedir directory,
  if not,
  dest as a string 'all' default as boolean False and help as a string 'Updates the message files for all existing locales.'.   call the method parser.add_argument with 5 arguments: string '--extension', string '-e', dest set to string 'extensions',
  do nothing.
  call the method self.make_bytes with an argument value, substitute the result for value.
  get the id of the self object, use it as a key to obtain the value from the memo dictionary, substitute self with it.
  define the method handle with 3 arguments: self and unpacked dictionary options.
  do nothing.
  substitute handler for value under name key of handlers dictionary.
  if self.path equals other.path, return boolean True, if not return boolean False.
  call the function timezone.make_naive with 2 arguments value, current_timezone, return the result.
  if self.empty_permitted is true and call to the method self.has_changed evaluates to false,
  call the function force_str with an argument: default if it is true, or if not, first element of the result of the function,
  if err_log is true,
  call the method resource.decode with an argument settings.FILE_CHARSET, substitute the result for resource.
  call the method self.filter with 3 arguments: name, func and unpacked dictionary flags, return the result.
  while factor is greater or equal to integer 0,
  define the method __copy__ with an argument self.
  for every location in format_locations,
  register.tag decorator,
  if context is an instance of Context class.
  return x.
  plural is an empty list.
  derive the class FileField from the base class Field class.
  call the method __init__ from the base class of the class SplitHiddenDateTimeWidget, with 3 arguments: attrs, date_format,  and time_format.
  call the method operator.attrgetter with an argument _meth_func, substitute the result for get_method_function.
  substitute result for value under the RESULT key of the oldroot dictionary.
  if name equals a string 'content-disposition',
  substitute number for self.number.
  return the result.   decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
  subtract i from len_values, substitute the result for value under the 'revcounter' key of the loop_dict dictionary.
  hex_format_string is a string "%%0%ix" formated with hlen multiplied with integer 2.
  append ext to guessed_filename.
  self.waiting_readers is integer 0.
  define the method combine with 3 arguments: cls, date and time.
  both_before is a list containing 14 elements, all of them are instances of Tok class, created with 2 arguments, a string and a raw string.
  return six.text_type(s).encode(encoding, errors).
  if retval is true,
  call the method handler.addQuickElement with 2 arguments: string 'description' and value under the 'description' key of item dictionary.
  format string ' _(%s) ', with fmatch, write it to out.
  call the method self.compress with an argument clean_data, substitute the result for out.
  substitute the result for value under the 'input' key of the substitutions dictionary.   if value is true and value has an attribute 'url',
  define the method initial_form_count with an argument self.
  if OverflowError or ValueError exceptions are caught,
  call the method o.isoformat, return the result.
  'PasswordInput', 'HiddenInput', 'MultipleHiddenInput', 'ClearableFileInput', 'FileInput', 'DateInput', 'DateTimeInput', 'TimeInput',   'Textarea', 'CheckboxInput', 'Select', 'NullBooleanSelect', 'SelectMultiple', 'RadioSelect','CheckboxSelectMultiple', 'MultiWidget',   'SplitDateTimeWidget' and 'SplitHiddenDateTimeWidget'.   MEDIA_TYPES is a tuple with 2 strings: 'css' and 'js'.
  formated with value under 'target' key of config dictionary and e.   otherwise if klass is a subclass of logging.handlers.SMTPHandler and string 'mailhost' is contained in config,
  call the method self.add_library with an argument lib.
  call the re.compile function with self.regex and self.flags as arguments, substitute the result for self.regex.
  mapped_tokens is an empty list.
  skip this loop iteration.
  if last element of parts is contained in self.serialization_formats,
  call the function _add_doc with 2 arguments: u and string """Text literal""".
  return the length of self.children.
  try,
  substitute the regex_compiled for value under the language_code key of the self._regex_dict dictionary.
  initial_set is set created out of return values of the function force_text called with an argument value,
  define the method nodelist with an argument self.
  get value under 'target' key of config dictionary, use it as a key to get the value from the dictionary,
  from django.utils.encoding import force_st into default name space.
  if AttributeError exception is caught,
  slice the list from the i-th to the endpos-th element, substitute it for self.__starttag_text.
  special_floats is an list with 3 elements, pos_inf, neg_inf and nan, all converted to strings.
  for every app_config in result of the method apps.get_app_configs, append the resulting list to templatetags_modules_candidates.   for every templatetag_module in templatetags_modules_candidates,
  if func doesnt have a attribute '__name__',
  if the key doesnt exists substitute boolean False for self.ignore.   define the method _make_parser with an argument self.
  from django.utils.six.moves.urllib.request import urlretrieve into default name space.
  from django.conf import settings into default name space.
  if field is not equal to NON_FIELD_ERRORS and field is not contained in self.fields,
  try,
  try,
  if count does not equals to integer 0,
  substitute declared_fields for new_class.declared_fields.
  define the function get_current_timezone.
  return result.
  call the method notifier.process_events.
  try,
  from django.utils.six.moves import socketserver into default name space.
  self.COOKIES is an empty dictionary.
  if Exception, renamed to e, exception is caught,
  convert fist p elements of language to lowercase, append '_' to it,
  substitute value for self.value.
  call the method self.var1.resolve with 2 arguments: context and boolean True, substitute the result for val2.
  call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs, from the base class of the class ComboField.
  result is an instance of SimpleLazyObject class, created with an argument self._setupfunc.
  if not,
  if sign is contained in self.digits,
  define convert method with self class instance, number, from_digits, to_digits and sign as arguments.
  get the value under the key of the dictionary self, if key does not exists return evaluated result of the function Morsel, substitute it for M.
  if Exception, renamed to e, exception is caught,
  if LookupError exception is caught,
  call the method os.path.splitext with an argument base, substitute the result for base and ext, respectively.
  raise an ValueError exception with an argument string 'Unable to configure logger %r: %s' formated with name and e.
  call the function get_callable with arguments lookup_view and boolean True, substitute the result for lookup_view.
  internal_use_only is boolean True.
  define the method reverse with arguments self, lookup_view, unpacked list args and unpacked dictionary kwargs.
  and re.IGNORECASE, substitute the result for simple_url_re.   call the function re.compile with raw string '&(?!(\w+|#\d+);)', substitute the result for simple_email_re.
  call the function new_method_proxy with an argument operator.ne, substitute the result for __ne__.
  from django.utils.encoding import force_text into default name space.
  call the method parser.next_token, substitute the result for token.
  wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " OK" as a argument.
  call the function new_method_proxy with an argument bool, substitute the result for __nonzero__.
  if submod is true and return value of the function module_has_submodule called with 2 arguments: result of the function:
  substitute var_obj for self.var.
  derive the class Http404 from the Exception base class.
  call the function custom_sql_for_model with 3 arguments: model, style and connection, extend the output with the result.
  decorator stringfilter,
  substitute value under the 'suffix' key of dictionary d, substitute it for suffix.
  define the method external_entity_ref_handler with arguments self, context, base, sysid and pubid.
  self._done is boolean True.
  call the method hmac.new with 3 arguments: key, msg set to result of the function force_bytes with an argument value,
  otherwise if ch equals a string 'P',
  substitute node for bit.
  if not substitute field.initial for initial.   call the method filed.clean with arguments value and initial, substitute the result for value.
  otherwise if prefix is not equal to common_prefix,
  and autoescape as autoescape, use the result as an argument for the call to the function mark_safe, return the result.   decorator function register.filter with an argument is_safe set to boolean False.
  raise an CommandError with an argument string "errors happened while running msgattrib\n%s", where '%s' is replaced with errors.
  substitute value under the f.name key of the labels dictionary for value under the 'label' key of kwargs dictionary.
  from django.utils.crypto import constant_time_compare and salted_hmac into default name space.
  use the result as an argument for the call to the mark_safe function, return the result.   call the function allow_lazy with 2 arguments: escapejs, six.text_type, substitute the result for escapejs.
  get the value under the part key of the PALETTES dictionary, update with it palette dictionary.
  self._files is an instance of class MultiValueDict.   return nothing.
  return templatetags_modules.
  if r ends with string '+00:00',
  substitute base for m.
  find the ending position of the regular expression match of the object match, substitute the result for j.
  for every f in fields,
  python_2_unicode_compatible decorator
  call the get_deserializer function with an argument format, substitute the result for d.
  assign value and params to the value under the name key of the outdict dictionary.
  from django.utils.translation import ugettext_lazy into default name space.
  do nothing.
  define the method __init__ with an argument self.
  if sep is an instance of unicode,
  call the method handler.file.close.
  define the function get_urlconf with an argument default set to None.
  try,
  call the function t.render with an argument context, return the result.
  if name is true,
  if id_ is true,
  define the method create_variable_node with 2 arguments self and filter_expression.
  sum item and i_item together, append the result to new_result.
  if tt.tm_isdst is greater than intger 0, return boolean True, otherwise return boolean False.
  if incremental is true,
  if s is an instance of an object Promise.
  called with an argument BlockNode.   define the method __repr__ with an argument self.
  return _localtime.
  call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with an entry:
  if not,
  substitute length of s for end.
  call the method value.astimezone with an argument timezone, substitute the result for value.
  define the function wordwrap with 2 arguments value and arg.
  from datetime import datetime,  timedelta and tzinfo into default name space.
  open filename file in write mode, with the file descriptor renamed to outfile, perform,
  define the method widget_attrs with arguments self and widget.
  define the method add_arguments with 2 arguments self and parser.
  if fext is a file,
  define the method parse_endtag with self class instance and i as the arguments.
  return self.name.
  if not,
  call the executor.loader.get_migration_by_prefix with app_label and migration_name with arguments, substitute the result fr migration.
  random is an instance of random.SystemRandom class.
  call the method copy.copy with an argument self, substitute the result for result.
  and remove_tags.   from django.utils.http import urlquote into default name space.
  slice the rawdata string from the k-th to the endpos-th index, remove the whitespaces from the start and the end of the string, substitute it for end.
  for every i and item in enumerated iterable values,
  define the method list with an argument self.
  from django.conf import settings into default namespace.
  try,
  sort elements of list existing.
  from django.utils.dateformat import format and time_format into default name space.
  if ImportError exception is caught,
  call the method __new__ from the base class of the class SortedDict, with 3 arguments: cls, unpacked list args,
  decorator function register.filter with an argument string "escapejs".
  if priority is true,
  joined into a string, separated by whitespaces, substitute the result for loopvars.   for every var in loopvars,
  call the function _trans.to_locale with an argument language, return the result.
  call the method self.writer_enters.
  return None.
  try,
  ser_fmt is None.
  remove first element of result from self.keyOrder dictionary.
  evaluate next boolean expression, value of converter function with opts.db_table as argument is contained in tables,
  raise an ValueError exception with an argument string 'Unknown level: %r' formated with level.
  return from the function
  if not,
  if p is greater or equal to integer 0,
  call the method match.groups, substitute the result for args.
  define the method __init__ with 10 arguments: self, data set to None, files set to None, auto_id set to string 'id_%s',
  define the method endChannelElement with 2 arguments: self and handler.
  define the method __html__ with an argument self.
  convert _serializers into a list, return it.
  define the function b64_encode with an argument s.
  call the method self.write_items with an argument handler.
  skip this loop iteration.
  if shown is an empty set,
  substitute result for cache dictionary value under the key key.
  define the method __contains__ with 2 arguments: self and other.
  call the function copy with an argument self.render_context, substitute the result for duplicate.render_context.
  try,
  define the method __repr__ with an argument self.
  _version is a string "2.0".
  if e doesnt have an 'django_template_source' attribute,
  call the method self.filter_expression.resolve with an argument context, substitute the result for output.
  define the function check_for_migrations with 2 arguments: app_config and connection.
  call the function _trans.activate with an argument language, return the result.
  write string "  all instances of the codebase have applied the migrations you squashed," to self.stdout.
  define the function time with 2 arguments value and arg set to None.
  4 for 'h', 4 for 'i', 4 for 'j', 5 for 'k', 5 for 'l', 5 for 'm', 6 for 'n', 6 for 'o', 6 for 'p', 7 for 'q', 7 for 'r', 7 for 'r',   7 for 's', 7 for 't', 8 for 't', 8 for 'u', 8 for 'v', 9 for 'w', 9 for 'x', 9 for 'y' and 9 for 'z'.   for every c in phone converted to lowercase, join the value under the c key of the char2number dictionary into a string, return it.
  define the function escapejs_filter with an argument value.
  substitute '%s' in a string "Migrations for '%s':" with app_label, append newline to it,
  define the function write_pot_file with 2 arguments potfile and msgs.
  response.streaming_content is an empty list.
  if expires is not None,
  return an instance of OrderedDict class, created with an argument fields.
  define the method __prepare_class__ with an argument self.
  strip value of the first and last element.
  define the function flatatt with an argument attrs.
  if field.rel.through._meta.auto_created is true,
  status_code is an integer 301.
  for every bytes in stream,
  convert the result into a lowercase, append it to ret_ip.   join elements of ret_ip into a string separated with ':', return it.
  substitute first 2 elements of bits for singular_suffix and plural_suffix, respectively.
  set attr.name attribute of the _MovedItemst object to attr.
  lang is None.
  PATTERN is a string  "classdef< 'class' any+ ':'suite< any*funcdef< 'def' unifunc='__unicode__'parameters< '(' NAME ')' > any+ >any* > >".
  convert e to a string, substitute it for error_text.
  remove '__weakref__' key from the orig_vars dictionary.
  try,
  if header list is not None,
  from __future__ import unicode_literals into default name space.
  call the method nodelist.render with an argument, an instance of Context class, use the result as an argument for the creation of,
  raise an TemplateSyntaxError exception with an argument string "Invalid syntax in widthratio tag. Expecting 'as' keyword".
  call the method self.fields.values, for every field in result,
  if cache_timeout is lesser than integer 0,
  return filenames.
  define the method validate_host with 2 arguments: host and allowed_hosts.
  help is a string 'Discover and run tests in the specified modules or the current directory.'.
  create list of first remaining elements of chunk, substitute it for emitting.
  delete _active.value.
  get the value under the 'CONTENT_TYPE' key of the self.META dictionary, if it starts with a string 'multipart/form-data',
  raise an ValueError exception with an argument string 'No handler found with name %r' formated with name.
  evaluate the method s.decode with string 'utf-8' and errors as the arguments,
  import module re.
  if remaining is not greater than 0, assert an error with the message string 'remaining bytes to read should never go negative'.
  from __future__ import unicode_literals into default name space.
  return cookiedict.
  call the method self.filter_function with 2 arguments func and unpacked dictionary flags, return the result.
  return None.
  derive the class BoundField from the base class object.
  substitute result for value under the self.asvar key of context dictionary.
  from django.conf import settings into default name space.
  self._namespace_dict is an empty dictionary.
  first element of url_fields is string 'http'.
  ns_pattern is an empty string.
  call the method self.validate with an argument out.
  call the function pgettext_lazy with an argument self.message_context and value, return the result.
  define the function byte2int with an argument bs.
  is_localized is boolean False.
  otherwise if cahr equals a string '\\',
  gett self.attr from the module object, return it.
  from django.conf import settings into default namespace.
  return field.to_python.
  sql_files is an empty list.
  from __future__ import unicode_literals into default name space.
  from django.template.debug import DebugLexer and DebugParser.
  from django.utils.translation import ugettext as _ into default name space.
  define the function load with 2 arguments: parser and token.
  def method add_arguments with self class instance and parser as the arguments.
  raise an exception,
  if domain equals a string 'djangojs' and file_ext is contained in command.extensions,
  substitute '%s' in string "Extracting %s\n" with filename, write it to self.stdout stream.
  call the method six.iteritems with an argument base.base_fields, convert it to a list and append fields to it, substitute the result for fields.
  return a string '%s %s %s' formated with 3 elements: result of the function force_text called with an argument i,
  call the method cache.set, with cache_key, headerlist, cache_timeout as arguments.
  if flags is not None,
  return other_dict.
  return self._post and self._files.
  substitute the result for context_match.   call the method context_match.group with an argument integer 1, substitute the result for message_context.
  from functools import wraps into default name space.
  return boolean True.
  if s equals a string '"',
  call the method validators.MinValueValidator with min_value converted into an integer, append the result to list self.validators.
  call the function six.text_type with an argument name, return the result.
  call the function factory with an argument unpacked dictionary kwargs, substitute the result for result.
  return an instance of RequestContext class, created with 3 arguments: self._request, context and current_app set to self._current_app.
  return boolean True.
  if six.PY3 is true,
  call the method self.write_items with an argument handler.
  from django.utils.timezone import get_default_timezone, is_aware and is_naive into default name space.
  call the method clear from the base class of the class SortedDict.
  substitute app_or_project for self.app_or_project.
  define the method extend_nodelist with 4 arguments: self, nodelist, node and token.
  call the method self.max_width.resolve with an argument context, convert the result to an integer and substitute it for max_width.
  decorator stringfilter,
  if Exception exception is caught,
  call the method app.start.
  initial is an empty list.
  in the string '%s. You passed in %r (%s)' replace every %s with original and type of the object self.obj as strings, respectively,
  call the method signal.signal with signal.SIGTTOU and old_handler, as arguments.
  call the function phone2numeric with an argument value, return the result.
  return id_.
  call the method literal_match.group with an integer 1, substitute the result for ip_address.
  call the method settings.configure with an argument USE_I18N set to boolean True.
  decorator function register.filter with an argument is_safe set to boolean False.
  if IndexError exception is caught,
  define the function get_current_timezone_name.
  subclass is a instance of a class named Migration, derived from the base class Migration, with 1 field:
  value under the self.var_name key of the context dictionary is an list with dictionary elements with 2 entries:
  import module os.
  from __future__ import unicode_literals into default name space.
  default set to boolean True, help set to string 'Tells Django to NOT prompt the user for input of any kind.'.   call the method parser.add_argument with 5 arguments: string '--failfast', action set to string 'store_true', dest set to 'failfast',
  return lookup_view.
  assign the handle to stream.   old_field_name is None.
  join lineno_comment_map dictionary value under the comment_lineno_cache key into a string, separated with ' | ',
  call the method value.as_tuple, assign the result to sign, digittuple and exponent, respectively.
  if self.addr is true,
  bring intger 2 to integer 32, decrement the result by 1, multiply it with hlen, if dklen is greater than the previous result,
  import module warnings.
  write string "Cleaning up temporary files.\n" to self.stdout stream.
  call the method self.extend_nodelist with 3 arguments: nodelist, var_node and token.
  substitute subject elements from p-th to i-th index for res.
  convert config_string to lowercase and split it by ';' character, substitute the result for parts.
  if bytes is smaller than KB,
  if _time.daylight is true,
  from django.utils.functional import allow_lazy into default name space.
  call the method token.split_contents, substitute the result for bits.
  define the method validate_number with self class instance and number as arguments.
  property decorator,
  if message is an instance of SafeData,
  call the the method __copy__ from the base class of the class Context, substitute the result for duplicate.
  use the result as an argument for the call to the function force_text, return the result.   call the function allow_lazy with 2 arguments: urlunquote_plus and six.text_type, substitute the result for urlunquote_plus.
  write errors to self.stdout.
  if second from the end element of args equals a string 'as',
  code set to an string 'invalid_choice' and dictionary params with an entry: val for 'value'.   define the method _has_changed with arguments self, initial and data.
  assign self.model._meta.pk to self._pk_field and pk.
  return boolean True.
   for every p in path,
  define the method configure_handler with 2 arguments: self and config.
  substitute value for the vale under the name key of the pdict dictionary.
  delete name attribute from self._wrapped object.
  substitute i for end_index.
  call the method data.items, for every k and v in the result,
  flags is a integer 0.
  call the method parser.add_argument with 3 arguments: string 'addrport', nargs='?' and help as a string 'Optional port number, or ipaddr:port'.
  for every f in fields, if exclude is false, or if exclude is true and f is not contained in exclude, and only if f is not in ignored,
  call the method self.form with unpacked dictionary defaults as an argument, substitute it for form.
  exception in Django 2.0." formated with num_loopvars and len_item, respectively, and RemovedInDjango20Warning.   try,
  if initial_value is not equal to data_value, return boolean True, otherwise return boolean False.
  for every form in self call the method form.has_changed if any of the results evaluates to true, return boolean True,
  substitute python_reloader for reloader.
  return result.
  from django.utils.safestring import mark_safe into default name space.
  for every key and value in parse_gsl with query_string is it exists or an empty string if not and keep_blank_values set to boolean True.
  define the method unsign with arguments self and signed_value.
  define the method run with 3 arguments: self and unpacked dictionary options.
  help is an string "Prints the DROP INDEX SQL statements for the given model module name(s).".
  call the function date.strftime with an argument string '%s, %%d %s %%Y %%H:%%M:%%S ' formated with dow and month,
  return value.
  define the function is_library_missing with an argument name.
  value is an string '1'.
  join to_path and name into a valid system path, substitute the result for filename.
  open writer.path file in write mode, with file descriptor as fh, perform the following,
  define the method to_python with arguments self and value.
  substitute context for block.context.
  join self._container elements into a string, return it.
  self.backout is an empty list.
  derive class Command from the TemplateCommand base class.
  define the method resolve with 2 arguments: self and context.
  call the server_bind method from the base class of the WSGIServer class.
  if css_classes is true,
  for every dict_ in self.dicts,
  try,
  raise an TemplateSyntaxError exception with an argument string 'The %r option was specified more than once.',
  _empty_value is None.
  if colors is true and last element of colors is contained in color_names,
  raise an StopIteration exception.
  define the function remove_tags with 2 arguments: html and tags.
  substitute hashlib.sha256 for digest.
  return _wrapped_view.
  return an instance of SafeText, created with an argument s converted into a string.
  code set to an string 'invalid_choice' and dictionary params with an entry: value for 'value'.   return value.
  call the function f.process with 2 arguments: self and self.domain.
  raise an ImportError exception.
  if potfile file path doesnt exist,
  define the method __iter__ with an argument self.
  otherwise if first element of second row of args equals a string '4',
  write string "  you can delete them." to self.stdout.
  define the method __copy__ with an argument self.
  if leading is true,
  substitute v for value under the k converted to lower case key of options dictionary.
  inner_html is a string '<li>{choice_value}{sub_widgets}</li>'.
  if TYPE equals to RAW,
  substitute self.rawdata for rawdata.
  substitute RadioChoiceInput for choice_input_class.
  define the method keys with an argument self.
  from wsgiref import simple_server into default name space.
  call the cursor.execute method with statement as argument.
  if value is contained in self.empty_values,
  if initial is None,
  if not,
  from pkg_resources import resource_string into default name space.
  call the function six.StringIO with an argument stream_or_string, substitute the result for self.stream.
  substitute the result for value under the 'clear_checkbox_name' key of the substitutions dictionary.   call the function conditional_escape with an argument checkbox_id,
  substitute the result for value under the self.target_var key of the context dictionary.   return an empty string.
  from importlib import import_module.
  split first element of args by ',', convert separated elements to strings, substitute the first 2 elements of the result,
  if not,
  define the method close with an argument self.
  raise an ValueError with an argument string "Could not find common ancestor of %s", where '%s' is replaced with migration_names.
  if TypeError, renamed to te, exception is caught,
  content is an empty string.
  want_unicode is boolean False.
  for every path_to_remove in self.paths_to_remove,
  decrement mtime by stat.st_ctime.
  if self._is_rendered is true,
  otherwise if cmatches is true,
  return boolean False.
  if data is true,
  call the function force_str with an argument self._tzname, return the result.
  if self._wrapped is empty,
  default_list is an empty list.
  try,
  split first and second element of hextet into parts by ':', sum their lengths, substitute the result for sep.
  if kwargs is true,
  get value under key key of self dictionary, if it doesnt exists return default, substitute the result for value.
  EndToken is an instance of EndToken class.
  yield string 'day' as an return value of the generator.
  raise an MultiPartParserError with an argument string 'Invalid boundary in multipart: %s' is replaced with boundary.
  increment key by kwd_mark.
  call the function _ with the argument string 'Ensure this value is %(limit_value)s (it is %(show_value)s).', substitute the result for message.
  if callback doesnt have '__name__' attribute,
  if not,
  get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.
  and unpacked dictionary kwargs.   call the __init__ method from the base class of the StreamingHttpResponse class, called with arguments: unpacked list args,
  define the function int2byte with an argument i.
  join into a path: path and string '%s.pot', where '%s' is replaced with self.domain converted into a string.
  derive the class Template form the base class object.
  if KeyError or AttributeError, renamed to exc, exceptions are caught,
  in encoded, replace all the occurrences of unicode character "\\054" with ',' character and "\\073" with ';' characters.
  filemsg is an empty string.
  call the method __new__ with an argument cls from the base class of the klass function.
  get the value from the options dictionary under the key 'interactive', substitute it for self.interactive.
  raise an RawPostDataException exception with an argument string "You cannot access body after reading from request's data stream".
  iterator is iterator created out of stream_or_iterable.
  if not, substitute func.__name__ for name.   call the method self.filter with 3 arguments: name, func and unpacked dictionary flags.
  call the function original_urlencode with 2 arguments: list with 2 elements: result of the function force_str with an argument k,
  delete entry under the name key of the moves.__dict__ dictionary.
  get the length of the options, use it as a starting index for the slicing arg list, substitute it for self.test_runner.
  add ns_pattern and extra, substitute the result for ns_pattern.
  call the options.update method with an argument kwargs.
  call the method __setitem__ from the base class of the class SortedDict, with 2 arguments key and value.
  return boolean False.
  call the function six.reraise with 3 arguments: ImportError, instance of ImportError class created with an argument msg,
  raise an ValidationError with 2 arguments: dictionary self.error_messages value under the key 'required',
  substitute deactivate for self.deactivate.
  derive the class UTC from the tzinfo base class.
  call the method cursor.close,
  raise an TemplateSyntaxError exception with an argument string "'%s' is not a valid tag library: %s",
  if not,
  return a tuple with 3 elements: self.__newobj__, tuple with an element self.__class__ and result of the method self.__getstate__.
  from __future__ import unicode_literals into default name space.
  define function get_max_age with response as an argument.
  create a list with count decremented by 1 number of last element of result elements, extend list result with it.
  convert number to a string, truncate first element.
  derive the class DecimalField from the base class IntegerField class.
  if self.timezone is None,
  if ext is true,
  call the method form.add_initial_prefix with an argument name, substitute the result for self.html_initial_name.
  define the method parse with an argument self.
  if get_git_changeset has an attribute 'cache',
  remove self._regex_validator from self.validators.
  substitute ngettext for ngettext_lazy.
  define the function get_valid_filename with an argument s.
  break the loop execution.
  if InvalidTemplateLibrary, renamed to e, exception is caught,
  raise an NotImplementedError exception with an argument sting 'subclasses of LazyObject must provide a _setup() method'.
  define the function get_wsgi_application.
  call the method self.choice_input_class with 5 arguments: self.name, self.value, return value of the method self.attrs.copy,
  if app_path is None,
  decorator stringfilter,
  call the method self.queryset.filter with an argument, unpacked dictionary with an entry: pk for key.
  call the method imatch.group with an argument integer 1, if it evaluates to true,
  define the method reset with an argument self.
  substitute func for self.func.
  if except UnicodeDecodeError exception is caught,
  return host and an empty string.
  define the method _new_instance with 4 arguments: (cls, children set to None, connector set to None and negated set to boolean False.
  httpd.daemon_threads is boolean True.
  value under the 'feed_url' key of the self.feed dictionary for 'href'.   if value under the 'language' key of the self.feed dictionary is not None,
  if length of value is greater or equal to integer 2 and first and last elements of value are an empty string,
  if value is not contained in result,
  try,
  derive the class TimestampSigner from the Signer base class.
  breaks from the smallest enclosing loop.
  use it and the re.I as the input arguments for function re.compile, put the result in the self.interesting.   evaluate function tag.lower, without the arguments, put the result in the self.cdata_tag.
  if cls has an attribute k,
  cat for 'term'.   if value under the 'item_copyright' key of the item dictionary is not None,
  define the function reraise with 3 arguments: tp, value and tb set to None.
  define function patch_vary_headers, with response and newheaders as arguments.
  parse_until is an empty list,
  convert orphans into an integer and substitute it for self.orphans.
  current_fields is an empty list.
  define the method to_python with arguments self and value.
  for every loader_name in settings.TEMPLATE_LOADERS,
  self.choices is an list containing an tuple with 2 elements: an empty string and string "---------".
  call the method field.rel.to._default_manager.db_manager with an argument self.db, on the result call the method get_by_natural_key,
  raise an NoReverseMatch exception with an argument string "Reverse for '%s' with arguments '%s' and keyword ",
  define the method __copy__ with an argument self.
  define the function linebreaksbr with 2 arguments value and autoescape set to None.
  if not,
  define the function ngettext with 3 arguments: singular, plural and number.
  from django.utils import six into default name space.
  from UserList import UserList into default namespace.
  call the method field.clean with an argument value, substitute the result for value.
  if conflicts is true and self.merge is false,
  call the method self._new_instance with 3 arguments: self.children, self.connector and self.negated, substitute the result for obj.
  format translated with rhs, substitute the result for translated.
  substitute value under the f.name key of the widgets dictionary for value under the 'widget' key of kwargs dictionary.
  if length of bits is not integer 2 or 3,
  if not,
  ch2 is None.
   if _serializers is false,
  call the method self.resolve_template with an argument self.template_name, substitute the result for template.
  if the Exception exception is caught,
  if autoescape is true,
  split arg by ',', substitute the result for bits.s
  join elements of output in a string, separated by newlines, return it.
  raise an VariableDoesNotExist exception with an argument string "Failed lookup for key [%s] in %r",
  if self has an '_post' attribute,
  call the method attrs.copy, substitute the result for self.attrs.
  if ImportError exception is caught,
  import module warnings.
  try,
  if value under the 'description' key of the item dictionary is not None,
  return value.
  define the method G with an argument self.
  import module os.
  from __future__ import absolute_import into default name space.
  define the method __init__ with 2 arguments: self and s.
  substitute doc for func.__doc__.
  substitute value under n key of dictionary d for d.
  msg is a string ""The included urlconf '{name}' does not appear to have any patterns in it.
  dest as a string 'exclude', action as a string 'append' and help as a string 'Locales to exclude. Default is none. Can be used multiple times.'.   call the method parser.add_argument with 5 arguments: string '--domain', string '-d', default as a string 'django',
  function-based loader.", where '%s' is replaced with loader.   substitute TemplateLoader for func.
  try,
  define the method exit_command with an argument self.
  if s is an instance of bytes class,
  substitute _iterkeys for iterkeys.
  import module sys.
  import rlcompleter.
  for every bwidget in self.widgets,
  call the method settings.configure.
  substitute inotify_code_changed for fn.
  m2m_value is an lambda function with value as an argument, return value is the result of the method value.natural_key.
  return the value under the filter_name key of the self.filters dictionary.
  RemovedInDjango19Warning and stacklevel as integer 2.   try,
  property decorator,
  yield self.
  return filter_func.
  define the method dict with an argument self.
  substitute value for value under the key key of dictionary at last element of self.dicts.
  if value is None,
  if ImportError, rename it to e, exception is caught,
  if self._populated is false,
  derive the class DeclarativeFieldsMetaclass from the base class MediaDefiningClass.
  activate is a lambda function which returns None for any argument x.
  for every d in reversed list self.dicts,
  define the function npath with an argument path.
  call the method self.args_check with 3 arguments: filter_name, filter_func and args.
  define the function prepare_js_for_gettext with an argument js.
  raise an TemplateSyntaxError exception with an argument string "'%s' takes at least one argument (path to a view)",
  return nodes.
  if lib is true,
  call the method compile_func with 2 arguments self and token, substitute the result for compiled_result.
  convert var into an floating point number, substitute it for self.literal.
  substitute greater element between integer 0 and end decremented by one for last.
  result of the function iri_to_uri called with an argument link for 'link',   result of the function to_unicode called with an argument description for 'description',   result of the function to_unicode called with an argument language for 'language',   result of the function to_unicode called with an author_email description for 'author_email',   result of the function to_unicode called with an argument author_name for 'author_name',   result of the function iri_to_uri called with an argument author_link for 'author_link',   result of the function to_unicode called with an argument subtitle for 'subtitle',   if true, categories is value for 'categories' key, if not, empty tuple is value for 'categories' key,   result of the function iri_to_uri called with an argument feed_url for 'feed_url',   result of the function to_unicode called with an argument feed_copyright for 'feed_copyright',   if true, feed_guid is value for 'id' key, if not, lik is value for 'id' key and ttl for 'ttl'.   update self.feed dictionary with kwargs.
  if self.verbosity is greater than integer 1,
  append '/' to prefix.
  try,
  substitute bytes for binary_type.
  get the value under the 'incomplete' key of the field.error_messages dictionary, append it to errors.
  return an string "<IfNode>".
  if match is true,
  multiply offset by integer -1.
  call the function timedelta with an argument seconds set to negative _time.timezone, substitute the result for self.STDOFFSET.
  call the method token.split_contents, substitute the result for bits.
  call the function _trans.get_language_from_request with 2 arguments: request and check_path, return the result.
  arg_vals is an empty list,
  return the result of the method field.widget.value_from_datadict called with 3 arguments: self.data, self.files and prefix.
  define the method __new__ with 4 arguments: cls, name, this_bases and d.
  instantiate class Truncator, with an argument value, call the method chars on the result with 2 arguments length,
  if data is not an instance of basestring,
  return attrs.
  if not,
  if first element of s is not contained in "\"'" or last element of s is not equal to first element of s,
  call the method self._stream.read with an argument integer 1, substitute the result for unused_char.
  if six.PY2 is true and rawdata is an instance of the type six.text_type.
  decorator function lru_cache.lru_cache with an argument maxsize set to integer 1000.
  if errors is true,
  call the method self.split_leading_dir with an argument path, assign the result to prefix and rest, respectively.
  where '%d' is replaced with i and '%s' is replaced with subject.   increment i by one.
  tuple with 2 elements: upto and start and boolean False, append the result to result.   substitute start for upto.
  format string '\x1b[%sm' with RESET, return the result.
  substitute msg for self.msg.
  return response.
  if number is an instance of int type.
  call the method self.get_parent with an argument context, substitute the result for compiled_parent.
  append 'Z' to time_str, return the result.
  from django.utils.safestring import mark_safe into default name space.
  raise an NotImplementedError with an argument string 'subclasses of SyndicationFeed must provide a write() method'.
  define lambda function with self class instance as the argument, lambda function body encapsulates the call to the method,
  if not,
  called with 2 arguments: value and memo, for every key and value in result for the method self.items, return the result.   define the method __copy__ with an argument self.
  substitute arg converted into an integer for length.
  return value.
  substitute self.field.widget for widget.
  if base has an attribute 'declared_fields',
  if string '()' is contained in config,
  substitute self.none_value for self.month_none_value.
  append key to self.keyOrder.
  call the method handler.startDocument.
  divide j by integer 7, substitute the floored result for week_number.
  decorator stringfilter,
  return an empty string.
  with all occurrences of '%s' replaced with app_name and model._meta.object_name and e, respectively.   if self.show_traceback is true,
  and to value under the '.moves' appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_parse from the _LazyModule base class.
  subtract i from len_values, decrement the result by integer 1, substitute it for value under the 'revcounter' key of the loop_dict dictionary.
  call the method self.full_clean.
  set name attribute of self._wrapped object to value.
  if six.PY2 is true,
  if opts.fields is None and opts.exclude is None,
  define the function cache_info.
  define the method __init__ with 2 arguments: self and attrs set to None.
  define the method css_classes with 2 arguments: self and extra_classes set to None.
  if fourth element of version equals to string 'alpha' and fight element of version equals to integer 0,
  from __future__ import unicode_literals into default name space.
  define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  if not,
  define the function gettext with an argument message.
  from email.utils import formatdate into default name space.
  if plen is lesser than difference of alen and dlen, or if plen is greater than alen,
  if not,
  return result.
  define the method back with an argument self.
  define the function Deserializer with arguments stream_or_string and unpacked dictionary options.
  raise an InputStreamExhausted exception,
  import module struc.
  call the method data, substitute the result for data.
  try,
  created with an argument widget set to HiddenInput.   value under the MIN_NUM_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,
  define the method forms with an argument self.
  call the method self._archive_cls with an argument file, call the result with an argument file, substitute the result for self._archive.
  call the method closable.close.
  dest set to string 'use_ipv6', default set to boolean False and help set to string 'Tells Django to use an IPv6 address.'.   call the method parser.add_argument with 5 arguments: string '--nothreading', action set to string 'store_false',
  call the function itertools_cycle with an argument self.cyclevars, substitute the result for value under the self dictionary context.render_context.
  raise an ValidationError with 2 arguments: dictionary self.error_messages value under the key 'list',
  substitute ValueError for error_class.
  self._errors is an instance of ErrorDict.
  sum sign, int_part and dec_part, return the result.
  import module re.
  define the method clean with arguments self and value.
  call the method parser.next_token, substitute the result for token.
  sum media and w.media, substitute the result for media.
  return boolean False.
  define the function __init__ with 3 arguments: self, token and parser.
  from django.db.models.fields.related import RelatedObject into default namespace.
  raise an CommandError exception with an argument string "Multiple fixtures named '%s' in %s. Aborting.", where '%s' is replaced with:
  if value under 'plain' key of the options dictionary is true,
  call the self._get_pages method with 3 arguments: self.object_list from the bottom to the top index, number and self, return the result.
  substitute bits without the first element for remaining_bits.
  raise an AttributeError with an argument attr.
  for every post_callback in self._post_render_callbacks,
  call the method f.post_create_sql with arguments: style and model._meta.db_table, extend the output with the result.
  chunks is an empty list.
  return nothing.
  define the function luhn with an argument candidate.
  if self.timezone is true,
  substitute cache_choices for self.cache_choices.
  creation_counter is an integer 0.
  for every cnt and digit in enumerated list int_part with reversed ordering of elements,
  call the method to_python with an argument value from the base class of the DateTimeField class, substitute the result for result.
  from django.utils.six.moves.urllib.parse import quote into default name space.
  if AttributeError exception is caught.
  substitute stat.st_mtime for mtime.
  action set to string 'append', default as an empty list and help set to a string:   'The file name(s) to render. Separate multiple extensions with commas, or use -n multiple times.'.   define the method handle with 5 arguments: self, app_or_project, name, target set to None and unpacked dictionary options.
  call the method strftime with an argument fmt, from the base class of the type of dt class.
  append flup_module to string "Can't import flup.", print it to the standard output.
  get 'localized_fields' attribute from the options object, if it exists substitute it for self.localized_fields,
  if self.asvar is true,
  define the method __nonzero__ with an argument self.
  substitute package.__name__ for package_name.
  if self.urlconf_name is an instance of a list type and its length is not zero.
  and list with results of the function force_str with an argument i, for every i in v, only if v is a list or a tuple,   otherwise second element is result of the function force_str with an argument v, for every k and v in query,   and doseq, return the result.   define the function cookie_date with an argument epoch_seconds set to None.
  obj is an instance of Node class, created with 2 arguments: connector set to self.connector and negated set to self.negated.
  raise an ContentNotRenderedError exception with an string 'The response content must be rendered before it can be iterated over.'.
  path is an list containing path.
  substitute __name__ field of the result for function_name, in not, substitute func.__name__ for function_name.   define the function compile_func with 2 arguments: parser and token.
  substitute fields for new_class.base_fields.
  raise a NotImplementedError with an argument string 'subclasses of Serializer must provide a start_serialization() method'.
  convert first element of answer to lowercase and substitute it for answer.
  help is a string, containing "Returns a list of the SQL statements required to return all tables in the database to the state they were in just after they were installed.".
  substitute value under the field_name key of the self.fields dictionary for formfield.
  string 'unicode_escape', substitute the list of results for etags.   return etags.
  call the method __init__ with 2 arguments: self.states and string 'reg' from the base class of the class JsLexer.
  define the method copy with an argument self.
  call the function get_format with an argument string 'DECIMAL_SEPARATOR', substitute the result for decimal_separator.
  string '<script type="text/javascript" src="{0}"></script>' and absolute file path of the path, for every path is self._js.   define the method render_css with an argument self.
  take the first i elements of string p, strip the whitespaces from the both sides, convert it to lowercase and apply on it the method,
  call the function convert_old_style_list with an argument sublist, substitute the result for item and old_style_list.
  if val is an instance of tuple,
  return result.
  format string '<a href="%s"%s>%s</a>' with lead, middle and trail, use it as an argument for the call to the function mark_safe,
  substitute self._leftover for output.
  return exclude.
  _localtime is None.
  if TypeError or AttributeError exceptions are caught,
  call the method _format_modules_cache.setdefault with 2 arguments: lang and list created out of the results of the function,
  return results.
  COMMENT_TAG_END is a string '#}'.
  if unpack is true,
  value under the self._pk_field.name key of form.fields dictionary is an instance of ModelChoiceField class,
  split tag_re by self.template_string separator, for every bit in result,
  if status is not equal to STATUS_OK,
  if filename ends with extensions or filename is contained in extra_files,
  if tok starts with "'",
  import module opera.
  append path to self._js.
  return result.
  derive the class HttpResponseNotFound from the HttpResponse base class.
  from django.conf import settings into default name space.
  substitute buffer for memoryview.
  buffer_types is a tuple with 3 elements: bytes, bytearray and memoryview.
  define the method make_writeable with arguments self and filename.
  if key is not contained in self,
  from django.utils.timezone import get_current_timezone_name to the default name space.
  call the function  six.iteritems with an argument blocks, for every name and block in result,
  derive the class HttpResponseGone from the HttpResponse base class.
  define the method has_key with 2 arguments: self and key.
  if _localtime is None,
  pk_value is None.
  convert fist p elements of locale to lowercase, append '_' to it,
  if self.__language equals settings.LANGUAGE_CODE or self.__language equals a string "en-us",
  for every cat in value under the 'categories' key of the self.feed dictionary.
  if parser doesnt have an '_namedCycleNodes' attribute,
  from django.core.management.base import BaseCommand into default name space.
  define the method __bytes_cast with an argument self.
  result of the function force_text with an argument option_label, return the result.   define the method render_options with 3 arguments: self, choices and selected_choices.
  call the function _generator, join the result into a string, return the result.
  skip this loop iteration.
  if consume_next is true,
  all the method field.rel.to._meta.get_field with field.rel.field_name as argument, call the to_python method on the result with,
  substitute root for oldroot.
  value under the all_label key of the directory_created dictionary is boolean True.
  substitute self for result.parent.
  increment year by integer 2000.
  return nothing.
  call the function force_text with an argument field.help_text, format help_text_html with it, substitute the result for help_text.
  wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " FAKED" as a argument.
  call the function force_text with an argument ttl, substitute the result for ttl.
  from __future__ import unicode_literals into default name space.
  _mtimes is an empty dictionary.
  with the result renamed to fp, perform the following:   write msgs to fp.
  define the function _long_to_bin with 2 arguments: x and hex_format_string.
  define the function get_language_bidi.
  if self.asvar is None,
  self.year_none_value is a tuple containing 2 elements: integer 0 and first element of empty_label.
  if not,
  substitute settings.DEFAULT_CHARSET for self._encoding.
  otherwise, get the 'alters_data' attribute of current object, if it exists and is true,
  from django.test.utils import get_runner into default name space.
  define the function popen_wrapper with 2 arguments: args and os_err_exc_type set to CommandError.
  outut is an empty list.
  call the function import_string with an argument logging_config, substitute the result for logging_config_func.
  call the method threading.Semaphore with an argument integer 0, substitute the result for self.can_write.
  define the function decorator_from_middleware_with_args with an argument middleware_class.
  remove name from existing.
  raise an CommandError exception with an argument string "couldn't handle %s template %s.", replace '%s' with self.app_or_project and template.
  if cls._delegate_text is true,
  call the function import_module with an argument project_name.
  substitute cls.__bytes_cast for cls.__str__.
  define the method __getstate__ with an argument self.
  skip this loop iteration.
  register.tag decorator,
  define the method add_arguments with 2 arguments self and parser.
  define the method _iteritems with an argument self.
  read data from buf, yield the result.
  return self._urlconf_module.
  do nothing.
  call the function _trans.get_language, return the result.
  define the function code_changed.
  and element of tokens at i incremented by 1 index equals a string "in",   token is a string "not in".
  import module warnings.
  substitute new_args for result_args.
  convert values into a list, substitute it for value.
  if IndexError exception is caught,
  and format, call the method time on the result, return the result.   derive the class DateTimeField from the base class BaseTemporalField class.
  define method clear_cdata_mode, with self class instance as an argument.
  define the method __getstate__ with an argument self.
  if not,
  from django.core import signing into default name space.
  substitute compile_function for self.tags dictionary value under the name key.
  define the method __init__ with 2 arguments: self and token.
  substitute boundary for self._boundary.
  define the function get_templatetags_modules.
  and form_class_attrs.   derive the class BaseModelFormSet from the BaseFormSet base class.
  define the function _generator.
  substitute TimeInput for widget.
  raise an TemplateSyntaxError exception with an argument string "expected another tag, found end of string: %s",
  substitute form.instance.pk for pk_value.
  if old_style_list is true,
  call the method node.get_nodes_by_type with an argument nodetype, extend nodes with it.
  increment doublecolon_len by integer 1,
  define the method __getitem__ with arguments self and name.
  otherwise if auto_id is true,
  if not,
  call the method self.as_hidden with an argument only_initial set to boolean True,
  call the method self.indent with argument integer 2.
  substitute the result for ASCTIME_DATE.   define the function urlquote with 2 arguments: url and safe set to '/'.
  decorator function register.filter with an argument is_safe set to boolean True.
  get field.name attribute of obj, convert it to a string, substitute it for the value under the filed.name key of self._current dictionary.
  raise an CommandError exception with an argument string 'Your Python does not support IPv6.'.
  week_number is integer 52.
  raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to string 'required'.
  define the method __len__ with an argument self.
  self._errors is None.
  call the method __init__ with an argument lexer, from the base class of the class DebugParser.
  where string '%s' is replaced by lookup_view and mod_name, respectively.   if not,
  if url_info.netloc is false and url_info.scheme is true,
  if words is true, substitute re_words for regex, if not substitute re_chars for regex.
  string "memoize wrapper is deprecated and will be removed in Django 1.9. Use django.utils.lru_cache instead.",   RemovedInDjango19Warning and stacklevel set to integer 2.   decorator function wraps with an argument func.
  define the function is_aware with an argument value.
  import module sys.
  if ValueError exception is caught,
  get the value under the DELETION_FIELD_NAME key of the form.cleaned_data dictionary, if it exists return it, if not, return boolean False.
  call the Parser object with stream and self._boundary, for every item_type, meta_data and field_stream in return value,
  call the method datetime.datetime with an argument unpacked dictionary kw, return the result.
  call the method self.extend_nodelist with 3 arguments: nodelist, instance of TextNode class, created with an argument token.contents,
  return None.
  define the method create_var with 2 arguments: self and value.
  call the method handler.addQuickElement with 2 arguments: string 'uri' and value under the 'author_link' key of the item dictionary.
  define the method prepare_value with arguments: self and value.
  loader is instance of MigrationLoader initialized with connection as an argument.
  from django.conf import settings into default name space.
  raise an exception.
  substitute io.BytesIO for BytesIO.
  return an empty string.
  write the result to self.stdout.   for every operation in migration.operations,
  wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " OK" as a argument.
  import termios module.
  call the method field.rel.to._default_manager.db_manager with db as argument, call the get_by_natural_key method on the result with,
  define the function _curried with 2 arguments: unpacked list moreargs and unpacked dictionary morekwargs.
  return an instance of a URLNode class, created with 4 arguments viewname, args, kwargs and asvar.
  try,
  if not,
  append ch to result.
  append ch to result.
  if self.verbosity is greater than integer 1,
  call the method self.clean with value as argument, substitute the result for cleaned.
  define the method addQuickElement with 4 arguments: self, name, contents set to None and attrs set to None.
  call the method re.sub with 3 arguments: raw string '&(?:\w+|#\d+);', empty string and result of the function force_text,
  call the function _trans.get_language_from_path with an argument path, return the result.
  try,
  decorator decorator.
  finally perform,
  import module importlib.
  call the method widget_attrs with an argument widget, from the base class of the DecimalField class, substitute the result for attrs.
  substitute format_string for self.format_string.
  call the method match.groupdict, substitute the result for kwargs.
  if not,
  define the method __deepcopy__ with 2 arguments self and memo.
  call the method match.group with an argument integer 0, return the result.
  call the function io.open with 3 arguments: potfile, string 'w' and encoding set to string 'utf-8' as arguments,
  define the function get_callable with arguments lookup_view and can_fail set to boolean False.
  if name is false,
  count occurrences of '\n' in t.contents, add the result to t.lineno, substitute the result for cur_lineno.
  define the function reverse with 6 arguments: viewname, urlconf set to None, args set to None, kwargs set to None,
  if self._wrapped is empty,
  from django.forms.widgets import Widget and Select into default name space.
  call the function format_html with 4 arguments: string '<option value="{0}"{1}>{2}</option>', option_value, selected_html,
  widget_value is None.
  from django.core.management.base import BaseCommand into default name space.
  import module sys.
  if value is an instance of datetime.datetime,
  filters is an empty list.
  get the value under the lang_code key of the _BROWSERS_DEPRECATED_LOCALES dictionary, substitute it for replacement.
  define the function do_translate with 2 arguments: message and translation_function.
  call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the item dictionary.
  substitute settings.SECRET_KEY for secret.
  define the method add_css with arguments self and data.
  and return value of the call to the method ProjectState.from_apps with apps as an argument, assign it to the autodetector.   call the method autodetector.changes with the graph set to executor.loader.graph as an argument, substitute it for the changes.
  instantiate class Truncator, with an argument value, call the method words on the result with 3 arguments length,
  if f is a file,
  get the value under the key 'interactive' of options dictionary, substitute it for interactive.
  default set to True, help containing string 'Tells Django to NOT prompt the user for input of any kind.' as arguments.   call the method parser.add_argument with string '--no-initial-data', action containing string 'store_false',
  remove tmpdir directory.
  if the union of the kwargs and defaults dictionary keys converted into sets is not the same as the union of the defaults and prefix
  call the method widget_attrs with an argument widget, from the base class of the FloatField class, substitute the result for attrs.
  _mtimes is an empty dictionary.
  remove element under 'stream' key of kwargs dictionary, substitute the result for value under 'strm' key of kwargs dictionary.
  return value.
  return supported.
  from django.utils.html import format_html into default name space.
  from django.http import HttpResponse into default name space.
  errors is an empty list.
  value under the resultclass key of the cls.__dispatch dictionary is an empty dictionary.
  if not,
  define the method add_arguments, with 2 arguments self and parser.
  if jan1_weekday is greater than integer 4,
  if f is an instance of ModelFiled, for every f in opts.virtual_fields, append f to a list, substitute the resulting list for sortable_virtual_fields.
  return an instance of VariableNode class with an argument filter_expression.
  if _cookie_encodes_correctly and _cookie_allows_colon_in_names are boolean True,
  if locale_dir is false,
  if not,
  call the signal.signal method with signal.SIGTTOU and signal.SIG_IGN as arguments, store the result in old_handler.
  append string '0000' to new_ip.
  define the method __ne__ with 2 arguments: self and other.
  if item_type equals FIELD,
  join self.dirpath, thefile into a file path, substitute it for work_file.
  called with an argument path,   substitute path for locale_dir.
  substitute second element of renamed_method for new_method_name.
  dictionary keys converted into sets,   skip this loop iteration,
  call the method var.resolve with 2 arguments: context and True, substitute the result for value.
  get the value under the lang_code key of the LANG_INFO dictionary, return it.
  call the method self.data.weekday, use the result as an key for obtaining WEEKDAYS dictionary value, return it.
  otherwise if template_tuple is None,
  call the method self._get_model_from_node with arguments node and string 'model'.
  raise an ValueError exception with an argument string 'Unable to configure root logger: %s' formated with e.
  derive the class Promise from the object base class.
  from django.utils.translation import get_language to the default name space.
  call the function __current_timezone with an argument value, return the result.
  call the method self.callback with an argument record, if the result evaluates to true,
  finally perform,
  call the function force_text with an argument redirect_to, use the result as an argument for the call to the function urlparse,
  otherwise if self._meta.exclude is true and field is not contained in self._meta.exclude,
  if ImportError exception is caught,
  call the function write with an argument end.
  substitute obj for value under the self.var_name key of the context dictionary.
  define the function cycle with 2 arguments: parser and token.
  if not,
  get the value under the funcname key of the t-th elment of self.__dispatch dictionary, call the result with 3 arguments: res,
  if not, sself.empty_value is an empty string.   call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs,
  use global variable _translations.
  return result.
  return duplicate.
  define the method __repr__ with an argument self.
  return an empty string.
  call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries:
  do nothing.
  if first element of bits is not equal to string 'and',
  call the function get_mod_func with an argument lookup_view, store the result in mod_name and func_name, respectively.
  input_type is a string 'text'.
  substitute self.subject for subject.
  RemovedInDjango19Warning and integer 2.   substitute dicts for self.dicts.
  from django.core.signals import request_finished into default name space.
  define the method __dir__ with an argument self.
  call the method self.__cast, if the result is lesser than other, return boolean True, otherwise return boolean False.
  substitute next for advance_iterator.
  call the function loader with 2 arguments name and dirs, substitute the result for source and display_name, respectively.
  yield nothing.
  from .base import CommandError into default name space.
  call the function call_command with 2 arguments: string migrate and unpacked dictionary options.
  if default is true and RAISE_ERROR is false,
  if can_fail is true,
  define the method tag with 3 arguments: self, name set to None and compile_function set to None.
  define the serialize content with an argument self.
  if call to the function response.has_header with string 'Vary' as an argument returns True,
  if any w.needs_multipart_form for every w in self.widgets is true, return boolean True, if not return boolean False.
  call the method _ExpatParser.__init__ with arguments self, unpacked list args and unpacked dictionary kwargs.
  if offset is smaller than integer 0, sign is '-', otherwise sign is '+'.
  handler is an instance of SimplerXMLGenerator class, created with 2 arguments: outfile and encoding.
  call the method field._has_changed with 2 arguments: return value of the function field.to_python called with an argument initial,
  derive the class Operator from the base class TokenBase.
  if value is contained in self.empty_values,
  if self.verbosity is greater or equal than integer 1,
  escaper is an identity lambda function.
  sublist is an empty string.
  call the method self.error_class with an argument list with one element, return value of the method self.get_form_error,
  return an empty string.
  return result.
  input_type is a string 'number'.
  try,
  convert the first element of the result to uppercase, append to it the rest of the result, substitute it for capfirst.   call the function allow_lazy with 3 arguments: capfirst and six.text_type.
  call the method nodelist.get_nodes_by_type with an argument nodetype, extend nodes with the result.
  RemovedInDjango19Warning and stacklevel set to integer 2.   import module logging.handlers.
  in "%s in %s" substitute '%s' with names string and app, respective, join all the previous pairs into a string separated by ';',   substitute it for name_str.   raise CommandError exception, with "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'",
  python_2_unicode_compatible decorator,
  from django.template.base import TemplateDoesNotExist into default name space.
  __Y2 is a raw string '(?P<year>\d{2})'.
  if ttl is not None,
  call the method datetime.timedelta with an argument seconds set to integer 1, increment delta by it.
  if InvalidTemplateLibrary, renamed to e, exception is caught,
  if KeyError exception is caught,
  if data is false and initial is true,
  if base has an 'declared_fields' attribute,
  call the method deactivate.
  define the function get_quantifier with 2 arguments ch and input_iter.
  derive the class HttpResponseNotAllowed from the HttpResponse base class.
  try,
  return the result.   call the function force_bytes with arguments value and self._charset, return the result.
  call the method __init__ from the base class of the class DateTimeBaseInput, with an argument attrs.
  get the name key of the data dictionary, if the key exists return it, if not return None.
  if StopIteration exception,
  from django.utils.translation import ugettext_lazy as _ and ugettext into default name space.
  if TypeError or ValueError exceptions are caught,
  break from the loop execution,
  try,
  if self equals to other return boolean False, otherwise return boolean True.
  join statements in a string separated by newline, return the result.
  call the method self.configure_handler with an argument value under name key of handlers dictionary, substitute the result for handler.
  derive the class Input from the Widget base class.
  call method executor.collect_sql with plan as the argument, substitute the result for sql_statements.
  call the function _import_module with an argument self.mod, substitute the result for module.
  if not,
  if dt is None is_dst is boolean False, otherwise call the method self._isdst with an argument dt, substitute the result for is_dst.
  yield widget.
  call the method out.getvalue, return the result.
  from django.utils.module_loading import import_string into default name space.
  call the method self.save_new with 2 arguments: form and commit as commit, append the result to self.new_objects.
  if s_len is greater than length,
  define the method create_nodelist with an argument self.
  if length of app_labels is equal to integer 1,
  call the method self.find_template_cache.clear.
  substitute a tuple with 2 elements: characters ',' and ': ' for value under the 'separators' key of the self.json_kwargs dictionary.
  update flat dictionary with d.
  call the function make_origin with 4 arguments: display_name, loader, name and dirs, return a tuple containing 2 elements:
  substitute the value under the 'socket' key of options dictionary for value under the 'bindAddress' key of wsgi_opts dictionary.
  for every f in fields,
  if m is not False, None is considered False,
  call the method node.render with an argument context, return the result.
  default_error_messages is a dictionary with an entry, result of the call to the function _ with an argument,
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  if not,
  define the method __delitem__ with 3 arguments: self and key.
  if not,
  clean is a lambda function with self and x as arguments, return value is length of x.
  derive the class TimeInput from the DateTimeBaseInput base class.
  self._changed_data is None.
  if context.autoescape is true and value is not an instance of SafeData, or value is an instance of EscapeData,
  call the function allow_lazy with an argument phone2numeric, substitute the result for phone2numeric.
  if urlconf is None,
  define the function check_for_language with an argument lang_code.
  if ValueError exception is caught,
  self.form.initial, if it exists, or self.field.initial if not, substitute the result for data.   call the method self.field.prepare_value with an argument data, return the result.
  call the function normpath with an argument path, return the result.
  get the unicode representation of current working directory, join it and path into a string, substitute the result for path.
  if not,
  unpacked dictionary created with elements of morekwargs dictionary through the kwargs mapping, return the result.   return _curried.
  substitute self.field.label for self.label.
  substitute form for self.form.
  append self.pointer to self.backout.
  define the method value_from_datadict with 4 arguments: self, data, files and name.
  ' ' for 's', 'x' for 'S', 'x' for 'W', '!' for 'W' and None for 'Z'.   derive the class Choice from list base class.
  define the method _clean_form with an argument self.
  result of the call to the function _ with an argument string 'Tuesday' for 1,   result of the call to the function _ with an argument string 'Wednesday' for 2,   result of the call to the function _ with an argument string 'Thursday' for 3,   result of the call to the function _ with an argument string 'Friday' for 4,   result of the call to the function _ with an argument string 'Saturday' for 5,   and result of the call to the function _ with an argument string 'Sunday' for 6.   WEEKDAYS_ABBR is an dictionary with 7 entries: result of the call to the function _ with an argument string 'Mon' for 0,
  return default.
  if options is true,
  and help set to a string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.   define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
  call the function post_callback with an argument retval, substitute the result for newretval.
  if cleaned_data is not None,
  split string name into two parts from the right side by the separator '.', substitute parts for path and module, respectively.
  try,
  if self.use_natural_foreign_keys is true and field.rel.to has an 'natural_key' attribute,
  call the method node.hasAttribute with string 'pk' as an argument, if it evaluates to true,
  call the function datetime.date with 3 arguments: y, m and d all converted into a integers, substitute the result for date_value.
  output_transaction is boolean True.
  where '%s' is replaced with token.contents.   call the method parser.compile_filter with an argument, in_index incremented by one, and used to index parser.compile_filter,
  if length of bits equals integer 3,
  count is a property object with _get_count as a getter method.
  raise an BadSignature exception with an argument string 'No "%s" found in value', where '%s' is replaced by self.sep.
  request_started is a instance of a Signal class.
  define function _generate_cache_key, with request, method, headerlist and key_prefix as arguments.
  call the method text.splitlines with an argument boolean True, for every line in the result,
  from django.utils.deprecation import RemovedInDjango20Warning into default name space.
  raise an ImportError exception with an argument string "Could not import '%s'. The path must be fully qualified.",
  join app_config.path and string 'fixtures' into a valid file path, substitute it for app_dir.
  template is an instance of Template class, created with an argument content.
  call the self.style.MIGRATE_HEADING method, with string "Operations to perform:" as an argument,
  import module sys.
  derive the class LazyStream from the six.Iterator base class.
  call the function force_text with an argument v, for every v in selected_choices, add results to a set,
  if attrs is false, make it an empty dictionary.
  create a tuple out a tuple with an element integer 2037 and a list tt elements without the first element, substitute the result for tt.
  substitute cls.__bytes_cast for cls.__bytes__.
  call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for key.
  errors is an empty list.
  define the method end_object with arguments self and obj.
  define the function convert_old_style_list with an argument list_.
  write a new line to the self.stream file stream.
  call the __init__ method from the base class of the class TemplateResponse, with 4 arguments: template, context, content_type, status.
  unpacked list args2 and unpacked dictionary kwargs2, return the result.   call the function bound_func with 2 arguments: unpacked list args and unpacked dictionary kwargs, return the result.
  substitute str for binary_type.
  and placed into 2 character spaces, and '%02d' is replaced with reminder of the division of absolute offset by integer 60,   and placed into 2 character spaces.   define the method __repr__ with an argument self.
  if ValueError exception is caught,
  substitute complain for extend.
  if data is true,
  if self.max_length is not None and length of file_name is grater than self.max_length,
  derive the class RendererMixin from the object base class.
  create a tuple out of elements under the key field of the form.cleaned_data dictionary, add elements of date_data to it,
  field_dict is an instance of OrderedDict class, created with an argument field_list.
  call the method __init__ from the base class of the class BaseModelFormSet, with an argument unpacked dictionary defaults.
  evaluate the function getdefaultlocale from the module locale, if second element of return value exists assign it to encoding,
  get the value from the options dictionary under the key 'traceback', substitute it for self.show_traceback.
  try
  try,
  otherwise if safe_input is true,
  return it.   define the function iteritems with 2 arguments: d and unpacked dictionary  kw.
  try,
  call the method other.__cast, substitute the result for other.
  define the method __iter__ with an argument self.
  and join the results into a string, separated with '|' character, return the result.   derive the class Lexer from the object base class.
  call the method render from the base class of the class FileInput, called with 3 arguments: name, None and attrs as attrs.
  call the function remove_tags with 2 arguments value and tags, return the result.
  tt is an tuple with 9 elements: dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, result of the function dt.weekday,
  builtins is an dictionary with 3 initial entries: boolean True for 'True', boolean False for 'False' and None for 'None'.
  for every key_value in natural,
  if AttributeError exception is caught,
  concatenate opts.concrete_fields, opts.virtual_fields and opts.many_to_many, for every f in the result,
  import module datetime.
  define the method __call__ with 3 arguments: self, template_name and template_dirs set to None.
  define the method pop with 3 arguments: self, key and default set to None.
  call the function tempfile.mkdtemp with arguments: prefix set to prefix and suffix  set to string '_download'.
  match is boolean True.
  substitute self.none_value for self.day_none_value.
  var_obj is None.
  substitute ngettext for ungettext.
  if self.pos is greater than or equal to self.tokens,
  for every child in node.childNodes,
  call the function smart_urlquote with an argument middle, substitute the result for url.
  define the method get_unique_error_message with 2 arguments: self and unique_check.
  for every node in self.nodelist_empty,
  from yaml import SafeLoader, SafeDumper into default name space.
  if cls is false,
  return self.empty_value.
  if TemplateSyntaxError, renamed to e, exception is caught,
  from IPython import start_ipython into default namespace.
  define the function callable with an argument obj.
  if not,
  return an instance of SafeText, created with an argument data.
  child_nodelists is an tuple with an element 'nodelist'.
  get 'Meta' attribute from form object, if it exists substitute it for meta, if not meta is None.
  yield choice.
  if s is an instance of SafeData or EscapeData,
  define the method _handle_fk_field_node with arguments self, node and field.
  default set to False and help set to string'Creates SQL to unapply the migration, rather than to apply it' as arguments.   define the method handle with self class instance, list of arguments args and options dictionary as the arguments.
  if threading is true,
  return patterns.
  if candidate is not an instance of six.string_types,
  define the method __init__ with 2 arguments: self and source.
  define the function do_ntranslate with 4 arguments: singular, plural, number and translation_function.
  syear is a string "%04d" formated with dt.year.
  raise an exception.
  define the method enter_command with 3 arguments: self, command and token.
  if not,
  self._done is boolean True.
  substitute DEFAULT_MAX_NUM for max_num,
  call the __init__ method of the base class of the class FilePathField, with arguments: choices set to an empty tuple,4
  from django.core.management.base import AppCommand into default name space.
  define the method setdefault with 3 arguments: self, key and default set to None.
  substitute xreadlines for __iter__.
  called with string '__prefix__' as an argument and empty_permitted as boolean True, substitute the result for form.   call the method self.add_fields with arguments form and None.
  substitute the result for self.event_stream.   remove the 'using' key from the options dictionary, substitute the return value for self.db, if the key doesnt exists substitute
  choice_input_class is None.
  from binascii import Error as BinasciiError into default name space.
  define the function find_template with 2: template_name and dirs set to None.
  get the directory name of filename, substitute it for dirname.
  concatenate package_name, string '.' and module_name, substitute it for full_module_name.
  if length of bits equals integer 2,
  otherwise if action equals to string 'unapply_start'.
  define the method add_root_elements with 2 arguments: self and handler.
  try,
  call the method self.create_select with 6 arguments: name, self.month_field, value, month_val, choices and self.month_none_value,
  derive the class CsrfTokenNode from Node base class.
  call the function _explode_shorthand_ip_string with an argument ip_str, substitute the result for ip_str.
  import StringIO.
  if pathext is None,
  define the function _load_serializers.
  zip val1 and va2 into list of tuples, for every x and y in the result,
  join elements of list source from index last to the end into a string, substitute it for piece.
  call the method error.items, for every field and error_list in the result,
  raise an ValueError with an argument string "'%s.%s' has no field named '%s'.", where '%s' is replaced with,
  if ch equals string '+',
  call the function force_text with first element of list_ as an argument, return the result.
  call the timestamp.strftime with string '%Y%m%d%H%M%S' as an argument, substitute the result for changeset.
  skip this loop iteration.
  if translators_comment_start is not None and lineno is greater than or equal to translators_comment_start,
  define the method _get_context_stack_frame with 2 arguments: self and context.
  mem_args is a list containing of first num_args elements of args list.
  use it as an argument for the call to the self.style.MIGRATE_LABEL method, use the result of the previous method as an argument for the call to the self.stdout.write method.   if target_app_labels_only is true,
  derive the class HTMLParser from the base class HTMLParser located in the module _html_parser.
  call the method self._assert_mutable.
  derive class Command from the base class AppCommand.
  if ImportError, renamed to exc, exception is caught,
  try,
  if p is greater or equal to integer 0,
  return boolean True.
  define the method to_python with arguments self and value.
  if data is an instance of bytes.
  substitute loaders for self._loaders.
  call the method self.model._default_manager.get_queryset with an argument qs.
  call the method time_str.decode with an argument string 'utf-8', substitute the result for time_str.
  join prefix and path into an url, return it.
  if statue is not equal to STATUS_OK.
  if self.max_digits is not None and digits is grater than self.max_digits,
  derive the class BadSignature from the Exception base class.
  substitute bp for lbp.
  return a string '%s:%s' formated with the results of the functions self.g and self.i, respectivley.
  self._leftover is an empty string.
  otherwise if t.token_type equals TOKEN_VAR,
  where '%s' is replaced with final_path and base_path.   return final_path.
  call the method self.__class__ with 3 arguments: an empty string, mutable is boolean True, encoding is self.encoding, substitute the result for result.
  boundarystream is an instance of InterBoundaryIter class, created with self._stream and self._separator as arguments.
  return an instance of Context class, created with an argument context.
  append command.xgettext_options to list containing 15 elements: string 'xgettext', string '-d', domain, string '--language=Python',
  derive the class SimpleNode form the base class TagHelperNode.
  try,
  raise an TemplateSyntaxError exception with an argument string "widthratio takes at least three arguments".
  if self.number is greater than integer 1, return boolean True, otherwise return boolean False.
  call the method self.xml.endElement with an argument string 'field'.
  try,
  for every migration_name in migration_names,
  get _iteritems attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,
  call the function check_for_language with an argument lang, if it evaluates to false,
  if not,
  from django.utils.encoding import force_text and force_str into default name space.
  for arg in argv list without the first two elements,
  call the load method on the c class instance, with the cookie argument.
  do nothing.
  raise an exception.
  return __wrapper__.
  return value of the function os.path.basename called with first element of sys.argv as an argument, and second element of sys.argv.   from django.conf import settings into default namespace.
  if value is an instance of six.string_types and value converted to lowercase is not equal to strings 'false' or '0',
  if func is None,
  substitute value under the key key of self dictionary for val.
  if form.is_bound is true,
  if data is not None or files is not None, self.is_bound is boolean True, otherwise it is boolean False.
  do nothing.
  call the method self.error_class with an argument error_class as an string 'nonfield',
  if i incremented by 1 is lesser than length of chunks,
  if exclude is true and f.name is contained in exclude,
  post is a string '<could not parse>'.
  derive the class ComboField from the base class Field class.
  if LookupError exception is caught.
  define the method __new__ with 4 arguments: mcs, name, bases and attrs.
  if not,
  call the method sign on the result with an argument value, substitute the result for value.   call the method self.set_cookie with 3 arguments: key, value and unpacked dictionary kwargs, return the result.
  html_class_attr is an empty string.
  call the function ugettext with an argument string "%s GB", substitute '%s' with the result of the call to the function,
  find the first subgroup of the matched string from the match object, strip the whitespaces from the begging and end, replace it for tag.
  for every dict_ in self.dicts,
  do nothing.
  call the function _get_model with an argument value under the 'model' key of the d dictionary, substitute the result for Model.
  otherwise if formfield_callback is not callable object,
  convert val to an list, substitute it for val.
  get value under the 'level' key of the config dictioanry, if it exists substitute it for level, if not level is None.
  define the method save_existing with 4 arguments: self, form, instance and commit set to boolean True.
  try,
  define the function memoize with 3 arguments: func, cache and num_args.
  yield node as an return value of a generator.
  using_sysrandom is boolean True.
  replace every occurrence of '\n' in subject with '\\n' and replace every occurrence of '\r' in subject with '\\r',
  substitute settings.DEFAULT_CHARSET for encoding.
  from django.forms.fields import IntegerField and BooleanField into default name space.
  derive the class MultiPartParserError from the Exception base class.
  call the method parser.expression with an argument bp, substitute it for self.seconds.
  format with it a string '# %s', write it to out.   comment_lineno_cache is None,
  call the method widget.render with 3 arguments: name, return value of the method self.value, attrs set to attrs,
  raise an CommandError with an argument string "Cannot find a migration matching '%s' from app '%s'.",
  call te method operator.itemgetter with an argument integer 0, substitute the result for byte2int.
  substitute DjangoJSONEncoder for DateTimeAwareJSONEncoder.
  convert elements of choices into a list, substitute it for self.choices.
  call the function _checkLevel with an argument level, use the result as an argument for the call to the method logger.setLevel.
  from django.utils.six.moves import html_parser as _html_parse into default name space.
  if self.sep is not contained in signed_value,
  if not,
  self.second is None.
  return name and tuple containing 2 elements value and params.
  class_types is a tuple with 2 elements: type and types.ClassType.
  from django.utils.encoding import force_str and force_text into default name space.
  if safe is true and arg is not equal to string ';',
  get value under the 'handlers' key of the config dictioanry, if it exists substitute it for handlers, if not handlers is None.
  join top_dir, relative_dir and return value of the function filename.replace called with 2 arguments: base_name and name,
  sub_match_dict is a dictionary created from self.default_kwargs dictionary using mapping function match.groupdict.
  substitute the result for value.   if not,
  self._current is None.
  define the method empty_block_tag with 2 arguments: self and token.
  define the method split_leading_dir with 2 arguments self and path.
  call the method __init__ from the base class of the class AssignmentNode, with 3 arguments: takes_context, args and kwargs.
  if settings.SECURE_PROXY_SSL_HEADER is true,
  set attr.name attribute of the Module_six_moves_urllib_request object to attr.
  call the method self.make_bytes with an argument content, append it to self._container.
  return data.
  if value under the 'verbosity' key of the options dictionary is greater than zero,
  derive the class EndToken from the TokenBase base class.
  return an empty string.
  call the method self.merge with an argument translation.
  for every filename is filelist,
  substitute self.queryset for qs.
  if filename ends with string '.mo',
  pop value under the 'ipv6' key of the kwargs dictionary, if it is true,
  return obj.
  decorator function register.filter with an argument is_safe set to boolean True.
  for every e in etags call the method e.encode with an argument string 'ascii', call the method decode on the result with an argument,
  set attr.name attribute of Module_six_moves_urllib_response object to attr.
  do nothing.
  call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries:
  define the function select_template with 2 arguments: template_name_list and dirs set to None.
  if 'widget' key of the kwargs dictionary doesnt exists assign it widget field of the base class of the IntegerField class value.
  return self._body.
  call the method gettext_module.translation with 5 arguments: domain set to string 'django', localedir set to localedir,
  define the method __repr__ with an argument self.
  from django.core.serializers.python import Serializer as PythonSerializer into default name space.
  for every item in self.items,
  define the function rjust with 2 arguments value and arg.
  define the function decorating_function with an argument user_function.
  from django.conf import settings into default name space.
  define the method upload_handlers with arguments: self and upload_handlers.
  register.tag decorator,
  from django.forms.fields import Field and FileField into default name space.
  for every potfile in potfiles,
  if ValidationError, renamed to e, is caught,
  USE_INOTIFY is boolean True.
  define the method __init__ with 4 arguments: self, context, unpacked list args and unpacked dictionary kwargs.
  call the method self.represent_scalar with 2 arguments: string 'tag:yaml.org,2002:str' and data converted into a string, return the result.
  call the function mark_safe with an argument value, return the result.
  final_output is an empty list.
  substitute logging.NOTSET for logger.level.
  if not append w to the list, substitute the resulting list for self.widgets.   call the method __init__ from the base class of the class MultiWidget, with an argument attrs.
  derive the class TagHelperNode form the base class Node.
  call the method self.attrs.copy, substitute the result for attrs_plus.
  skip this loop iteration,
  return an instance of ForNode class, created with 5 arguments: loopvars, sequence, is_reversed, nodelist_loop and nodelist_empty.
  return it.   define the function itervalues with 2 arguments: d and unpacked dictionary  kw.
  call the function _ with an argument string 'AM', return the result.
  substitute minimal element of the resulting list for self._chunk_size.   substitute META for self._meta.
  substitute _upload_handlers for self.__upload_handlers.
  substitute used_name for guessed_filename.
  modified_code is None.
  define the method management_form with an argument self.
  is smaller than self.min_num,   raise an ValidationError with 2 arguments: return value of the function ungettext with 3 arguments:
  write it to self.stdout.   substitute Command for BaseRunserverCommand.
  return the result.   define the method id_for_label with 2 arguments: self and id_.
  return attrs.
  call the function current, substitute the result for current.
  call the function format_html with 2 arguments: string '<optgroup label="{0}">' and return value of the function force_text,
  if KeyError exception is caught.
  call the method apps.setdefault with 2 arguments: pattern and an empty list, append to the resulting object pattern.namespace.
  raise an TemplateSyntaxError exception with an argument string, "'%s' tag takes at least 2 arguments and the second last argument
  try,
  if VariableDoesNotExist exception is caught,
  try,
  call the function get_random_string with 2 arguments: integer 50 and chars, substitute it for value under the 'secret_key' of the options dictionary.
  decorator function wraps with an argument fget.
  for every program in programs,
  if self.m2m.data and save_m2m are true,
  raise a ValidationError exception with 2 arguments: return value of the function _ called with an argument string 'Enter a valid IPv4 or IPv6 address.', and code set to string 'invalid'.
  call the method self._isdst with an argument dt, if it evaluates to true,
  if six.PY2 is true,
  property decorator,
  return an empty string.
  format string ' _(%s) ', with fmatch, write it to out.
  if last element of args is not equal to a string "silent",
  and token.   otherwise if token.token_type equals integer 1,
  get 'nodelist' attribute from self object. if it doesnt exists return boolean False, if the result evaluates to false,
  if not,
  substitute e and tb for v.__cause__ and v.__traceback__.
  try,
  try,
  cookiedict is an empty dictionary.
  if ValueError, TypeError or OverflowError exceptions are caught,
  return an empty string,
  derive the class MinLengthValidator form the BaseValidator base class.
  get_format called with an argument string 'DATETIME_INPUT_FORMATS', substitute the result for format.   call the method value.strftime with an argument format, return the result.
  do nothing.
  append string '_template' to app_or_project, substitute it for base_subdir.
  and encoding set to string 'utf-8' as arguments, with the result renamed to fp, perform the following:   call the method fp.write with an argument content.
  raise an ValueError exception with an argument string 'Unable to configure handler %r: %s' formated with name and e.
  call the function urlparse with an argument url, substitute the result for url_info.
  assign the result to opts and new_class._meta.   for every opt in list containing 3 elements: strings 'fields', 'exclude' and 'localized_fields',
  return obj.
  call the function re.compile with an argument string "^\s*trans\s+((?:"[^"]*?")|(?:'[^']*?'))(\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?')))?\s*", substitute the result for inline_re.
  tpl is an string "EntitiesForbidden(name='{}', system_id={!r}, public_id={!r})".
  call the function force_text with an argument text, substitute the result for text.
  call the function handle_m2m with an argument relobj.
  if not,
  substitute arg converted into an integer for length.
  trym
  nodelist_false is an instance of NodeList.
  remove entry under the 'formfield_callback' key of the attrs dictionary, if it exists substitute if for formfield_callback,
  if file_name is false,
  call the function construct_instance with 4 arguments: self, self.instance, opts.fields and construct_instance_exclude,
  called with 2 arguments: singular and trimmed, write the result to out.   if not,
  if inplural is true,
  return all the integers from the integer 1 to the self.num_pages.
  call the method connection.close,
  return data.
  define the function next_char with an argument input_iter.
  define the method words with 4 arguments: self, num, truncate set to None, html set to boolean False.
  if not,
  define method parse_starttag with self class instance and i as the arguments.
  call the get_complete_version with an argument version, store the result in version.
  append list containing string '--no-location' to self.msguniq_options.
  status_code is an integer 302.
  if arg is None
  define the method hidden_fields with an argument self.
  call the function is_protected_type with an argument value, if it evaluates to true,
  derive the class MergeDict from the object base class.
  statement is an empty list.
  call the function write with an argument arg.
  call the __init__ method with an argument name from the base class of the MovedModule class.
  import module datetime.
  define the method __init__ with 2 arguments self and file.
  call the method handler.addQuickElement with 2 arguments: string 'published' and result of the function rfc3339_date,
  decorator function register.filter with an argument is_safe set to boolean True.
  do nothing.
  verbosity set to verbosity, interactive set to interactive and using set to db.   call the method models.signals.pre_syncdb.send with 6 arguments: sender set to app_config.models_module,
  call the method parser.add_argument with 6 arguments: string '--locale', string '-l', default as an empty list,
  define the method _get_scheme with an argument self.
  call the method app_config.get_models with include_auto_created set to boolean True, substitute the result for models.
  try,
  from django.utils import six and timezone into default name space.
  derive the class WSGIServer from simple_server.WSGIServer and object base classes.
  if field is an instance of models.TimeField and filed.name attribute of obj is not None,
  substitute socket.AF_INET6 for self.address_family.
  substitute name for self.name.
  if ip_str starts with ':, but it doesnt starts with '::', or if ip_str ends with ':, but it doesnt ends with '::',
  input_type is a string 'file'.
  where '%s' is replaced with request.__class__.__name__, path, return value of the function six.text_type called with an argument get,   return value of the function six.text_type called with an argument post, return value of the function six.text_type,   called with an argument cookies and return value of the function six.text_type called with an argument meta.   define the function bytes_to_text with 2 arguments s and encoding.
  if illegal_formatting is true,
  if t.token_type is not equal to TOKEN_COMMENT,
  reverse the order of modules elements, put them into a list, return it.
  define function fix_location_header with request and response as arguments.
  import module fnmatch.
  for every base in new_class.__mro__ in reversed order,
  if not,
  result is an tuple with 2 elements: template and return value of the function make_origin called with 4 arguments: display_name,  loader, name and dirs.
  derive the class SerializerDoesNotExist from the KeyError base class.
  call the function warnings.warn with 2 arguments: string "Need {0} values to unpack in for loop; got {1}. This will raise an
  call the function get_supported_language_variant with an argument lang_code, return the result.
  define the method __iter__ with an argument self.
  try,
  substitute length of existing for num_existing.
  return an empty string.
  value under the MISSES key of the stats dictionary, maxsize and length of cache.   define the function cache_clear.
  substitute silent for self.silent.
  if formatter is true,
  delete entry under item key of self.dict dictionary.
  call the method local, substitute the result for _active.
  if level is not None,
  convert the result to a lowercase string, substitute it for step.   if not,
  return value.
  if attrvalue is not an empty string,
  call the method self.as_ul, return the result.
  nodelist_false is an instance of NodeList class.
  called with with an argument lambda function which returns result of the force_text function called with an argument text.   define the method add_truncation_text with 3 arguments: self, text and truncate set to None.
  substitute namespaces for the value under language_code key of the self._namespace_dict dictionary.
  append pattern into a list patterns, for every possibility, pattern and defaults in possibilities.
  define the method _set_queryset with 2 arguments: self and queryset.
  define the method __init__ with 3 arguments: self, msg and params set to an empty tuple.
  if settings.SETTINGS_MODULE is true,
  instantiate RelatedObject class with 3 arguments: cls.fk.rel.to, cls.model and cls.fk,
  if val equals an empty list.
  from django.utils.html import conditional_escape and format_html into default name space.
  define the method write with 3 arguments: self, outfile and encoding.
  use the result as an argument for the call to the add_move function.   call the function MovedModule with 2 arguments: strings "_thread" and "thread",
  import module datetime.
  define the function autodiscover_modules with 2 arguments unpacked list args and unpacked dictionary kwargs.
  if not,
  call the method compiled_parent._render with an argument context, return the result.
  try,
  return input_val.
  if TypeError, AttributeError, KeyError or ValueError exceptions are caught,
  substitute self.min_value for the value under the 'min' key of the attrs dictionary.
  if newretval is not None,
  try,
  if not,
  define the method end_object with argument self and obj.
  join statements into a string, separated by newline characters, return it.
  append list containing string '--no-wrap' to self.msguniq_options.
  call the function get_supported_language_variant with an argument settings.LANGUAGE_CODE, return the result.
  for every func and args in self.filters,
  call the method base64.urlsafe_b64decode with sum of s and pad as argument.
  return list_ and boolean False.
  if self.active_writers and self.waiting_writers both equal to integer 0,
  contains_nontext is boolean False.
  substitute stream for self._stream.
  import module time.
  define the function dec with an argument func.
  substitute use_tz for self.use_tz.
  app_dirs is an empty list.
  digits is a string "0123456789abcdefghijklmnopqrstuvwxyz".
  result_args is a list containing an empty list.
  create a list out of fist end_text_pos text elemnts, substitue it for out.
  status_code is an integer 500.
  call the function lazy with 2 arguments: pgettext and six.text_type, substitute pgettext_lazy.
  where '%s' is replaced by lookup_view.   try,
  if form._meta.widgets is true,
  raise an DisallowedRedirect exception with an argument string "Unsafe redirect to URL with protocol '%s'",
  substitute True for output_transaction.
  self.path_info is an empty string.
  call the function mark_safe with an argument message, return the result.
  define the function construct_instance with 4 arguments: form, instance, fields set to None and exclude set to None.
  if filename ends with '.pyo', '.pyc' or '.py.class',
  define the method tzname with 2 arguments self and dt.
  if not,
  define the method __init__, with 3 arguments: self, stream_or_string and unpacked dictionary options.
  replace every occurrence of arg is value for an empty string, substitute the result for value.
  from __future__ import unicode_literals into default name space.
  p and errors set to string 'replace', for p in self.params.   derive the class InvalidTemplateLibrary form the base class Exception.
  if TemplateDoesNotExist exception is caught,
  define the function address_string with an argument self.
  return self._regex.
  call the method __init__ from the base class of the Field class.
  call the method connection.introspection.sequence_list if reset_sequences is true, substitute the result for seqs, if not, seqs is an empty tuple.
  return string 'th'.
  otherwise if ch equals a string '[',
  if old_method is false and new_method is true,
  return list_ and boolean False.
  matches is boolean False.
  append length of result to non_capturing_groups.
  try,
  if attrs is None,
  return cached.
  call the method self.dicts.pop, return the result.
  call the method self._isdst with an argument dt, if it evaluates to true,
  if not,
  replace '%s' in string "Creating %s\n" with new_path, write it to the self.stdout stream.
  substitute _itervalues for itervalues.
  raise an TemplateDoesNotExist exception with an argument error_msg.
  return the value under the self.data.month key of the MONTHS dictionary.
  if value is boolean False or boolean True or value is None or value is an empty string, do not perform the following,
  substitute complain for __iadd__.
  return wrapper.
  substitute prefix for _prefixes.values.
  for every ch and escaped in input_iter,
  remove the entry under the 'stream' key of the self.json_kwargs dictionary.
  call the method notifier.read_events.
  get the value under the old_method_name key of the base.__dict__ dictionary, substitute it for old_method.
  define the method add_arguments with 2 arguments: self and parser.
  call the method parser.delete_first_token.
  if roots is false,
  delete _urlconfs.value.
  return self.streaming_content
  return self.
  from django.utils.encoding import force_text into default name space.
  call the method handler.addQuickElement with 2 arguments: string 'comments' and value under the 'comments' key of the item dictionary.
  raise an StopIteration exception.
  substitute complain for remove.
  if endbmatch is true,
  return potfiles.
  import module hashlib.
  return self.new_objects.
  substitute length for truncate_len.
  import module errno.
  decorator stringfilter,
  substitute s1 for s.
  if not,
  call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for key.
  if PY3 field of six is boolean True,
  instantiate class ModelFormOptions with argument: attribute 'Meta' of the new_class object. if it exists or None, if not,
  convert num to an integer, substitute it for length.
  for every template_dir in template_dirs,
  error_msg is a string "Your TEMPLATE_DIRS setting is empty. Change it to point to at least one template directory.".
  derive the class NodeList form the base class list.
  substitute nodelist_true and nodelist_false for self.nodelist_true and self.nodelist_false, respectively.
  return the result.   define the method value_from_datadict with 4 arguments: self, data, files and name.
  define the method _construct_form with 3 arguments: self, i and unpacked dictionary kwargs.
  dest set to string 'use_threading', default set to boolean True and help set to 'Tells Django to NOT use threading.'.   call the method parser.add_argument with 5 arguments: string '--noreload', action set to string 'store_false',
  call the method Model._meta.get_all_field_names, substitute the result for model_fields.
  define the method run_validators with arguments self and value.
  sum return value of the function call time.time() and cache_timeout, use it as an argument for function call of http_date,
  if value is None,
  substitute the results in a list for T.   join elements of T in a bytes string, append first r elements of result of the call to the function F with an argument l to it,
  return output.
  skip this loop iteration.
  call the method f.save_form_data with 2 arguments: instance and value under the f.name key of cleaned_data dictionary.
  substitute save_as_new for self.save_as_new.
  if out_log is true,
  if six.PY3 is true,
  define the method extract with 2 arguments self and to_path.
  if self._cached_loaders is false,
  substitute the result for filters dictionary value under name key.   if StandardError, renamed to e, exception is caught,
  try,
  call the method app.initialize with an argument argv as an empty list.
  derive the class SplitDateTimeField from the base class MultiValueField class.
  call the method m.end, slice list rest from previous result as starting index to the end, substitute the result for rest.
  call the method re.search with 2 arguments: raw string '^[_a-zA-Z]' and name, if it evaluates to false,
  append obj to self.deleted_objects list.
  split path in two parts by '\\' string, return the result.
  define the function get_supported_language_variant with 2 arguments: lang_code and strict set to boolean False.
  substitute takes_context for self.takes_context.
  join package.__name__ and module_name into a string separated with '.', substitute it for name.
  call the function cache_get with 2 arguments: key and root, substitute the result for result.
  and errors set to the result of self.default_error_messages.copy.
  and help as a string 'Nominates a database to print the SQL for. Defaults to the "default" database.', as arguments.   define the method handle_app_config with self class instance, app_config and dictionary options as arguments.
  for every base in reversed order of bases,
  if self.can_delete is true and call to the method self._should_delete_form with an argument form, evaluates to true,
  raise an InvalidTemplateLibrary exception with an argument string ("Unsupported arguments to Library.filter: (%r, %r)",
  errors is a string "strict".
  append string '_0' to id_.
  substitute connection.introspection.table_name_converter for converter.
  if return value of the self.is_secure method is true and server_port is not equal to string '443',
  define the method dst with 2 arguments self and dt.
  do nothing.
  define the method add_arguments with 2 arguments self and parser.
  define the function deconstructible with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  encode is an lambda function with 2 arguments k and v, return value is the result of the function urlencode, called with an argument:
  define the method resolve_template with 2 arguments: self and template.
  define the method I with an argument self.
  call the method self.render_option with 2 arguments: selected_choices and unpacked list option, append the result to output.
  if AppRegistryNotReady exception is caught,
  define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
  property decorator,
  define the method is_rendered with an argument self.
  call the function call_command with string 'flush', verbosity set to greater element, self.verbosity decremented by 1 or integer 0,
  substitute the result for base and tail_ext.   get the value under the tail_ext key of the extension_map dictionary, substitute it for cls.
  if migrations_directory is not a directory,
  define the method __newobj__ with 2 arguments cls and unpacked list args.
  from django.utils.deconstruct import deconstructible into default name space.
  substitute dirpath for self.dirpath.
  if app_config.models_module is None,
  if error_class is None,
  get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.
  create a tuple out of types of v, for every v in args, extend key tuple with the result.
  define the method __init__ with 4 arguments: self, dirpath, file_name and locale_dir.
  import imp.
  call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self.feed dictionary.
  define the method write with 2 arguments: self and val.
  template_source_loaders is None.
  substitute the result for the value under the 'month' key of the html dictionary.   for every i in successive list of integers from 1 to 30, append tuple containing i and i elements into a list,
  call the function six.text_type with s as an argument, substitute result for s.
  append the results into a list, substitute it for value.   node is an instance of CycleNode class, created wiht an argument values.
  substitute number_value for kwargs dictionary value under the 'number' key.
  substitute the result for year.   call the method dt.timetuple, substitute the result for timetuple.
  if parser doesnt have an '_namedCycleNodes' attribute,
  if return value of the function connection.introspection.table_name_converter called with an arugment: model._meta.db_table is contained in table_names
  and '3' for '3', substitute it for value.   if KeyError exception is caught,
  compare_to is an list with elements generated by calling the var.resolve method with 2 arguments: context and boolean True,
  derive the class warn_about_renamed_method from object base class.
  if string '__str__' is not contained in __dict__ field of klass,
  substitute WindowsError for WindowsError.
  if _active has an attribute "value",
  if jan1_weekday equals integer 5, or if jan1_weekday equals integer 6 and call to the function calendar.isleap,
  field_value is None.
  if error_message is not None,
  call the function six.text_type with an argument arg, append the result to '%', format the previous with value, return the result.
  substitute the result for timezone.   divide timezone by integer 60, substitute the quotient of the division for hour and reminder for minute.
  if self.can_delete is true,
  call the function smart_text with an argument obj, return the result.
  call the method self.add_prefix with an argument name, substitute the result for prefixed_name.
  call the method viewname.split, with an argument ':', substitute the result for parts.
  if s is an instance of bytes or Promise and s._delegate_bytes is true,
  if self.dry_run is false,
  find the ending position of the regular expression match of the object match, substitute the result for k.
  if the result is true or self.domain is not None,   raise an CommandError exception with an argument string "Type '%s help %s' for usage information.", where '%s' are replaced by:
  substitute new_filenames for filelist.
  define the method __next__ with an argument self.
  define the method __getitem__ with 2 arguments: self and key.
  singular is an empty list.
  end_index is None.
  define the method __iter__ with an argument self.
  call the function six.reraise with 3 arguments: UnreadablePostError, UnreadablePostError instantiated with unpacked list e.args,
  substitute base for self.base.
  derive Serializer from the base.Serializer base class.
  call the method self.endChannelElement with an argument handler.
  extend list kw with a list with 5 elements: d.hour, d.minute, d.second, d.microsecond and d.tzinfo.
  raise an ImproperlyConfigured with an argument string "Calling modelform_factory without defining 'fields' or 'exclude' explicitly is prohibited."
  define the function constant_time_compare with 2 arguments: val1 and val2.
  substitute self.var for obj.
  call the re.compile function with 2 arguments: raw string "(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*$",
  call the function timedelta with an argument minutes set to offset, substitute the result for self.__offset.
  if not,
  for every obj in queryset,
  COMMENT_TAG_START is a string '{#'.
  call the method self.initial_form_count, return the result initial_forms.
  return dec.
  call the function re.compile with 2 arguments: string '^([a-z])[:|]' and re.I, substitute the result for _url_drive_re.
  match string s with regex IDENTIFIER, substitute the result for m.
  import module warnings.
  _cached_modules is an empty set.
  substitute the length of defaults for dlen.
  define the method _construct_form with 3 arguments: self, i and unpacked dictionary kwargs.
  in string '-W%s' replace '%s' with o for every o in sys.warnoptions, put the result into a list, append the list to a list containing sys.executable, append sys.argv to the end of the resulting list, substitute the result for args.
  call the method pending_references.setdefault with 2 arguments: refto and an empty list, extend the result with refs.
  try,
  substitute tok.next for state.
  call the function get_supported_language_variant with an argument accept_lang, return the result.
  substitute old_attr for self.attr.
  call the function urlunsplit with an argument tuple with 4 elements: scheme, netloc, path, query and fragment, substitute the result for url.
  get the value under the 'indent' key of the self.options dictionary, substitute it for indent.
  do nothing.
  if key is not contained in self,
  TOTAL_FORM_COUNT is a string 'TOTAL_FORMS'.
  call the method stream.unget with elements of list chunk from the index next to the end.
  c is an instance of the class SimpleCookie.
  with an argument i, append the result to a list, substitute the resulting list for forms.   return forms.
  seen_data is an empty set.
  from django.utils import six into default name space.
  call the method handler.endElement with an argument string 'feed'.
  return the result of the method self._html_output, called with 5 arguments: normal_row to a string,
  define the method _set_choices with arguments self and value.
  get _iterkeys attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,
  append the resulting string to dec_part, substitute it for dec_part.   if dec_part is true,
  return an instance of NodeList class.
  incomment is boolean False.
  substitute the result for value.   substitute tuple containing 2 elements: header and value for the value under the header converted to lowercase key of the self._headers dictionary.
  get is a tuple containing elements generated by the call to the function pformat with an argument GET_override,
  decrement self.number by one, multiply it by self.paginator.per_page, increment the result by one, return it.
  if register_to is true,
  derive the class Origin form the base class object.
  call the function os.stat with an argument path, perform bitwise and on 2 operands st_mode field of the result and stat.S_IREAD,
  define the method setlistdefault with 3 arguments: self, key and default_list set to None.
  define the function import_library with an argument taglib_module.
  if self.field.label is None,
  and settings.SECRET_KEY, call on it method encode with an argument string 'utf-8',   use the result as an argument for the call to the method hashlib.sha256, call the method digest on the result,   use the result as an argument for the call to the function random.seed.   call the function random.choice with an argument allowed_chars, for every i in range of integers from 0 to lengths,
  declare that we use global variables cached_modules and _cached_filenames in this function.
  get the type of form object, return an instance of resulting class created with 3 arguments: class_name, tuple with an element form,
  if UnicodeError exception is caught,
  if base_lang is contained in settings.LANGUAGES_BIDI, return boolean True, if not, return boolean False.
  call the method form.is_valid, perform bitwise and with the result and forms_valid as operands, substitute the result for forms_valid.
  if self.choice_value is contained in self.value return boolean True, otherwise return boolean False.
  define the function is_valid_path with arguments path and urlconf set to None.
  attrs as attrs_plus and choices as choice_label.   substitute self.choice_input_class for sub_ul_renderer.choice_input_class.
  convert self.object_list to a list.
  get field.name attribute of the obj, substitute it for related.
  call the method parser.parse with an argument tuple with 3 elements strings 'elif', 'else' and 'endif', substitute the result for nodelist.
  self.items is an empty list.
  define the method __len__ with an argument self.
  classmethod decorator,
  define the method __init__ with arguments self and regex.
  try,
  call the function force_text with an argument first element of args, substitute the result for first element of args.
  substitute name for self.name.
  return nothing.
  'ManagementForm data is missing or has been tampered with' and code as a string 'missing_management_form'.   if not,
  if format_module_path is an instance of six.string_types,
  find first index of whitespace occurrence in line, add integer 1 to it, substitute the result for space.
  if pythonrc is not a file,
  string '<select multiple="multiple"{0}>' and result of the function flatatt called with an argument final_attrs.   call the method self.render_options with 2 arguments: choices and value, substitute the result for options.
  define the function lru_cache with 2 arguments maxsize set to integer 100 and typed set to boolean False.
  if TemplateLoader has an attribute 'load_template_source',
  self.add_prefix called with an argument name, substitute the result for value.   try,
  call the function timedelta with an argument seconds as negative time.altzone, return the result.
  split host from the right side into 2 parts at the ':', substitute the result for bits.
  property decorator,
  return the_path.
  call the method Model._meta.get_field with an argument field_name, substitute it for field.
  if TemplateDoesNotExist exception is caught,
  if not,
  append '-' to digits.
  substitute i-th element of self.data for error.
  memo is an empty dictionary.
  return s.
  substitute elements of middle from length of opening index to the end, for middle.
  call the method handler.upload_complete, substitute the result for retval.
  derive class _LazyDescr from the object base class.
  if UnicodeDecodeError exception is caught,
  _assertCountEqual is a strnig "assertItemsEqual".
  return boolean False.
  derive class X from the object base class.
  REASON_PHRASES is a dictionary containing 59 initial entries: 'CONTINUE' for 100, 'SWITCHING PROTOCOLS' for 101,
  inner_text is an empty list.
  define the method start_object with arguments self and obj.
  get format_type attribute of the settings object, return it.
  get type of self, call it and substitute the result for result.
  from django.conf import settings into default name space.
  return nothing,
  return value under key key of self dictionary
  define the method render with 2 arguments: self and context.
  replace '%s' in string "%s, from %s" with second and first element of the first targets row, respectively,
  if not, content_type is an empty string and content_type_extra is an empty dictionary.   strip the content_type of the whitespaces, substitute it for content_type.
  import module gettext as gettext_module.
  call the method value.encode with an argument self._charset, use the result as an argument for the call to the bytes function,
  return _make_decorator.
  if not,
  kwargs is an empty dictionary.
  if obj_list is None,
  BLOCK_TAG_START is a string '{%'.
  if self.interactive is true,
  return None.
  property decorator,
  from django.contrib.auth import get_user_model into default name space.
  call the method sys.stderr.write with an argument string "  http://www.saddi.com/software/flup/   If you've already\n".
  if _standard_context_processors is None,
  if token.contents equals a string 'else',
  and 3 additional pairs of dictionaries for string.   define the function configure_logging with 2 arguments: logging_config and logging_settings.
  _func_code is a string "__code__".
  define the method __text_cast with an argument self.
  define the method add_arguments with 2 arguments self and parser.
  from django.template.base import Origin,  Template,  Context and TemplateDoesNotExist into default name space.
  and unpacked dictionary kwargs, substitute the result for form.   if self.save_as_new is true,
  for every arg in s, call the function force_text with arg, encoding, strings_only and errors as arguments,
  if bytes_read is greater than rollback,
  if urlconf_name is true,
  want_unicode is boolean True.
  define the function pbkdf2 with 5 arguments: password, salt, iterations, dklen set to integer 0 and digest set to None.
  call the method parser.delete_first_token.
  if initial is not an instance of the list type,
  define the method __init__ with 3 arguments: self, producer and length set to None.
  do nothing.
  define the function wrap with 2 arguments text and width.
  define the method is_valid with an argument self.
  for every key in return value of the method c.keys call,
  where '%s' is replaced with first element of bits.   call the method parser.compile_filter with second element of bits as an argument, substitute the result for viewname.
  if 'step' key of the attrs dictionary doesnt exists assign it step as an value.
  if not,
  format_key is a string 'TIME_INPUT_FORMATS'.
  from django.conf import settings into default name space.
  call the method parser.add_argument with 2 arguments: string 'name' and help set to string 'Name of the application or project.'.
  get the index of first occurrence of name in existing, substitute it for i.
  call the method condition.eval with an argument context, substitute the result for match.
  append data to self.children.
  if ImportError exception is caught,
  subject is an string '%s (%s IP): %s', formated with record.levelname, string 'internal' if value under the 'REMOTE_ADDR' key,
  call the method self.paginator.validate_number with self.number incremented by 1 as argument, return the result.
  for every subnode in node,
  return supported_code.
  from django.db.models import AutoField, OneToOneField and ForeignKey.
  if self.cdata_tag is not None,
  from django.db.migrations.writer import MigrationWriter into default name space.
  substitute allow_empty_first_page for self.allow_empty_first_page.
  get the type of the self object, on the result call the __bool__ method with an argument self, return the result.
  if exclude is true and f.name is contained in exclude,
  from logging import _checkLevel.
  import module decimal.
  raise an CommandError with an argument string "You must supply at least one app label when using --empty.".
  append boundary to bytes string '--', substitute the result for self._separator.
  if string ':::' is contained in ip_str,
  call the connection.cursor method, substitute it for cursor.
  call the method self._assert_mutable.
  self.regexes is an empty dictionary.
  return duplicate
  try,
  ISO_INPUT_FORMATS is a dictionary with 3 entries: tuple with an element string '%Y-%m-%d' for 'DATE_INPUT_FORMATS',
  return s.
  define the function iterkeys with 2 arguments: d and unpacked dictionary  kw.
  "Starting development server at http://%(addr)s:%(port)s/\n Quit the server with %(quit_command)s.\n",   where '"%(started_at)s' is replaced with now, '%(version)s' is replaced with return value of the method self.get_version,   '%(settings)r' is replaced with settings.SETTINGS_MODULE, '%(addr)s' is replaced with self.addr if self._raw_ipv6 is true,   or with self.addr if it is false, '%(port)s' is replaced with self.port and '%(quit_command)s' is replaced with quit_command.   call the method translation.activate with an argument settings.LANGUAGE_CODE.
  do nothing.
  if host ends with '.', remove the last element from host.
  call the method __getitem__ from the base class of the class MultiValueDict, with an argument key, return the result..
  divide x by length of to_digits, convert floor value of the result to an integer, substitute it for x.
  if commit is true,
  import module re.
  if KeyError exception is caught,
  return self.STDOFFSET.
  if value is an instance of datetime.date class,
  substitute new_class.declared_fields for fields.
  self.use_ipv6 is boolean True.
  define the function rfc3339_date with an argument date.
  call the method self.show_migration_list with connection as first argument, as second argument use value under the 'app_label' key of options dictionary,
  from threading import local into default name space.
  if daemonize is true,
  groupid is a string "t%d" formated with tok.id.
  raise an exception.
  break from the loop execution.
  substitute length of self.loopvars for num_loopvars.
  substitute settings.FORMAT_MODULE_PATH for settings.FORMAT_MODULE_PATH.
  if self.verbosity is greater or equal to integer 1,
  call the method self._format_value with an argument value, use the result as an argument for the call to the function force_text,
  substitute '%s' with title in the string " [ ] %s", write it to the standard output.
  if not, self.coerce is an identity lambda function with an argument val.   if 'empty_value' key of the kwargs dictionary exists remove it and substitute its value for self.empty_value,
  call the method self.configurator.convert with an arugment value, substitute the result for result.
  call the method apps.get_app_configs, for every app_config in the result,
  return boolean False.
  remover 'file' key from the kwargs dictionary, if it exists substitute it for fp, if not substitute sys.stdout for fp.
  call the function next_space_index with 2 arguments subject and i, substitute the result for i.
  if self.verbosity is greater or equal to integer 1.
  __all__ is an list with an element 'luhn'.
  call the method __deepcopy__ with an argument memo from the base class of the class ChoiceField, substitute the result for result.
  substitute HiddenInput for hidden_widget.
  derive the class IntegerField from the base class Field class.
  substitute the result for value under the NON_FIELD_ERRORS key of the form._errors dictionary.   for every field in unique_check,
  substitute DebugLexer and DebugParser for lexer_class and parser_class.
  return an empty string,
  derive the class Form from the base classes DeclarativeFieldsMetaclass and BaseForm.
  help is a string 'Runs a development server with data from the given fixture(s).'.
  define the method __init__ with 5 arguments: self, view_name, args, kwargs and asvar.
  define the method __init__ with 2 arguments: self and timezone.
  bitwise shift integer 1 to the left by 31 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.
  and unpacked dictionary kwargs.   join into a string permitted_methods, separated by string ', ', substitute it for value under the 'Allow' key of the self dictionary.
  call the method self.tag with 2 arguments: function_name and compile_func.
  try,
  derive the class override from the object base class.
  call the function strip_tags with an argument value, return the result.
  substitute complain for __setslice__.
  get the value under the 'interactive' key of the options dictionary, substitute it for self.interactive.
  MONTHS is a list with 12 elements: strings 'jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', and 'dec'.
  try,
  pad the rest of the field with bytes string '=', use the result as an argument for the call to the method base64.urlsafe_b64decode,   return the result.   if LookupError or BinasciiError, renamed to e, exceptions are caught.
  from functools import update_wrapper.
  define the method errors with an argument self.
  if not, self.empty_value is an empty list.   call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs,
  substitute self.start_doctype_decl for parser.StartDoctypeDeclHandler.
  if response.streaming is boolean False,
  call the method filter.get_request_repr with an argument request, format string '\n{0}' with the result, substitute the result for request_repr.
  define the function _unpack_ipv4 with an argument ip_str.
  define the method _setup with an argument self.
  added to a tuple with an element year, substitute the result for s1.   call the function _findall with 2 arguments: s1 and year converted into a string, substitute the result for sites1.
  for v in return value of the function match.groups, convert v into an integer and append i to a list,
  import module re.
  if count of occurrence of '.' in ip_str is equal to integer 3,
  call the function add_to_builtins with an argument string 'django.template.defaulttags'.
  substitute compressed for data.
  if old_style_list is false,
  sum major and sub, return the result converted to string.
  sort value with key set to filed resolve of instance of a class Variable, created with an argument arg, return the result.
  import module warnings.
  default set to False, help containing string 'Mark migrations as run without actually running them' as arguments.   call the method parser.add_argument with string '--list', string '-l', action contains string 'store_true', dest set to string 'list',
  singular is an empty list.
  respectively replace '%s' with key and elements of the resolved_path joined into a string, separated by ':'.   if not,
  if not,
  raise an v exception.
  slice language from (p+1)-th index to the end, calculate the length of the obtained segment, if it is greater than integer 2,
  if not,
  if StopFutureHandlers exception is caught.
  raise an ValueError exception with an argument string 'Unable to add handler %r: %s' formated with h and e.
  get the value under self._pk_field.name key of form._meta.widgets dictionary, if it exists substitute it for widget, if not,
  and third element of the result of the function sys.exc_info.   for every i and handler in enumerated iterable handlers,
  if not,
  substitute last for value under the PREV key of the link dictionary.
  return plist.
  substitute the result for self._object_dict.   return the value under the pk key of self._object_dict dictionary.
  call the executor.loader.detect_conflicts, substitute the result fr conflicts.
  define the function join with 3 arguments: value, arg and autoescape set to None.
  append truncate_text to out.
  if self.is_bound is true,
  call the method self.create_variable_node with an argument filter_expression, substitute the result for var_node.
  if comment_lineno_cache equals cur_lineno.
  substitute jython_reloader for reloader.
  CheckboxInput, Select, NullBooleanSelect, SelectMultiple, DateInput, DateTimeInput, TimeInput, SplitDateTimeWidget,   SplitHiddenDateTimeWidget and FILE_INPUT_CONTRADICTION.   from django.utils import formats into default name space.
  derive class Command from the BaseCommand base class.
  if length of bits is greater or equal to integer 4 and second last element of bits equals sting 'from',
  substitute space for end.
  if content_type is false,
  common_ancestor is None.
  args is an list with 3 initial elements self.name, self.value and self.attrs.
   with self.mutex perform,
  append string '-_' to the BASE62_ALPHABET, substitute it for BASE64_ALPHABET.
  call the method connection.creation.create_test_db with verbosity set to verbosity, autoclobber set to inverse value of interactive,
  for every obj in result of the method self.queryset.all.   for every choice in self.field.choice_cache,
  third element of the result of the function sys.exc_info.   self._stream is an instance of BytesIO class created with an argument self._body.
  substitute the result for offset.   if first element of tzinfo equals '-',
  if keys is true,
  if self.verbosity is greater or equal to integer 1.
  if condition is not None,
  if upto is not equal to start.
  return an empty string.
  while self.tokens is true,
  _wrapped is None.
  from io import StringIO into default name space.
  if not,
  write data bytes to outfile.
  call the function fields_for_model with 9 arguments: opts.model, opts.fields, opts.exclude, opts.widgets, formfield_callback,
  derive the class IfEqualNode from Node base class.
  if initial is not None,
  return boolean False.
  define the function check_for_language with an argument lang_code.
  substitutions is a dictionary with 4 initial entries: self.initial_text for 'initial_text', self.input_text for 'input_text',
  try,
  skip this loop execution.
  replace every occurrence of '\\' in s with '\\\\'.
  skip this loop iteration,
  substitute callback.func for callback.
  call the method handler.startDocument.
  from django.utils import six into default name space.
  replace '%s' in string "'%s' already exists" with top_dir, substitute it for message.
  if not,
  try,
  define the method tell with an argument self.
  try,
  call the function json.loads with an argument stream_or_string, substitute the result for objects.
  if ValidationError, renamed to e, exception is caught,
  define the function url with 2 arguments: parser and token.
  call the function dateformat.time_format with 2 arguments: value and result of the function get_format called with 2 arguments:
  join result of the parts function into a bytes string, substitute it for out.
  get the value under the settings.__module__ key of the sys.modules dictionary, use its __file__ field as an argument,
  return new_class.
  increment self.active_writers by integer 1,
  string 'Select a valid choice. That choice is not one of the available choices.' for 'invalid_choice'.   define the method __init__ with 13 arguments: self, queryset, empty_label set to a string  "---------", cache_choices set to None,
  define the method sign with arguments self and value.
  call the method self.compile_function_error with 2 arguments token and e, if it evaluates to false,
  call the function importlib_find with 2 arguments: full_module_name and package_path, if the result is not None, return boolean True,
  get the value under the key key of the self.cookies dictionary, call the cookie_date function with an argument:
  if base has an attribute 'base_fields'.
  call the function get_callable with an argument callback, return the result and an empty dictionary.
  strip g of '"' from both ends,
  call the method _trans.gettext with an argument message.
  if second element of source is None,
  skip this loop iteration.
  if ns_pattern is true,
  do nothing.
  if value has an attribute '_meta',
  if not,
  substitute list with an element block_name for parser.__loaded_blocks.
  register is an instance of Library class.
  result of multiplication of integers: 60,60,24,365, and return value of ungettext_lazy with 2 arguments: '%d year', '%d years',   result of multiplication of integers: 60,60,24,30, and return value of ungettext_lazy with 2 arguments: '%d month', '%d month',   result of multiplication of integers: 60,60,24,7, and return value of ungettext_lazy with 2 arguments: '%d weeks', '%d weeks',   result of multiplication of integers: 60,60,24, and return value of ungettext_lazy with 2 arguments: '%d days', '%d days',   result of multiplication of integers: 60,60, and return value of ungettext_lazy with 2 arguments: '%d hours', '%d hours',   result of multiplication of integers: 60, and return value of ungettext_lazy with 2 arguments: '%d minutes', '%d minutes',   if d is not an instance of datetime.datetime,
  substitute value.year, value.month and value.day for year_val, month_val and day_val, respectively.
  value is None.
  raise an TemplateSyntaxError exception with an argument string '"with" in %r tag needs at least one keyword argument.',
  return nothing.
  if is_templatized is true,
  call the method self.setlist with 2 arguments: key and default_list.
  call the function shutil.copymode with arguments old_path and new_path.
  month_field is a string '%s_month'.
  return nothing.
  call the function warnings.warn with 3 arguments: string 'Using SplitDateTimeWidget with DateTimeField is deprecated. '
  if default is None,
  call the method self.load_template_source with arguments template_name and template_dirs, assign the result to source and display_name.
  raise an ExternalReferenceForbidden exception with arguments context, base, sysid and pubid.
  substitute callback for self._callback.
  define the method __init__ with 3 arguments: self unpacked list args and unpacked dictionary kwargs.
  substitute str_number and an empty string for int_part and dec_part.
  define the method resolve_error_handler with arguments self and view_type.
  locales is a difference between the locales and exclude sets.
  return a string "%s.%s" formated with first dot package elements and name.
  use global variable _standard_context_processors.
   if i is greater or equal to the result of the method self.initial_form_count and self.initial_extra is true,
  update widget.attrs dictionary with extra_attrs.
  call the function get_ns_resolver with arguments ns_pattern and resolver, substitute the result for resolver.
  substitute connection.features.test_db_allows_multiple_connections for use_threading.
  for every opening and closing in WRAPPING_PUNCTUATION,
  define the method render with 2 arguments: self and context.
  if OSError, renamed to e, exception is caught,
  if not,
  if value is true,
  define the method __repr__ with an argument self.
  raise an exception,
  derive the class TemplateEncodingError form the base class Exception.
  call the method loader.get_template with an argument template, return the result.
  if not,
  from django.core.exceptions import ImproperlyConfigured into default name space.
  with call to the function transaction.atomic with using set to connection.alias as argument,
  define function smart_bytes with s, encoding set to string 'utf-8', strings_only set to False and errors set to string 'strict', as arguments.
  ORDERING_FIELD_NAME is a string 'ORDER'.
  define the method __init__ with arguments self, stream and boundary.
  if response.status_code is lesser than integer 200 and grater or equal than 100, or response.status_code equals to integer 204 or 304,
  import module warnings.
  call the method match.groupdict, substitute the result for kw.
  if widget is false,
  replace '%s' in the string 'handler%s' with view_type, use it as an name of the attribute to get from the self.urlconf_module,
  substitute format for self.format if format is true, if not self.format is None.
  _moved_attributes is an empty list.
  define method add_arguments with self class instance and parser as the arguments.
   define the method resolve with arguments self and path.
  return an instance of DebugVariableNode, created with an argument contents.
  get the value under the 'content-disposition' key of the meta_data dictionary, substitute second element of it for disposition.
  import module os.
  define the method c with an argument self.
  otherwise if self.verbosity equals integer 3,
  new_method_proxy, __class__ is an property object created with previous result as an argument.   call the function new_method_proxy with an argument operator.eq, substitute the result for __eq__.
  define the function parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and name.
  if pytz is true, substitute pytz.utc for utc, otherwise substitute result of the function UTC for utc.
  if length of unique_check equals integer 1,
  return new_class.
  raise an EntitiesForbidden exception with arguments name, value, base, sysid, pubid and notation_name.
  if not,
  get the value under the 'charset' key of the content_type_extra dictionary, substitute it for charset.
  call the method self.template_cache.clear.
  if value is false or character '@' is not contained in value,
  derive the class BaseContext from the object base class.
  return url.
  raise an TemplateSyntaxError exception with an argument string "No named cycles in template. '%s' is not defined",
  append list containing string '--no-wrap' to self.msgattrib_options.
  do nothing.
  if upto is not equal to length of token,
  update a dictionary with an entry v converted to an integer for k, for every k and v in result of the function six.iteritems,
  empty is an instance of object class.
  substitute the result for value under the index key of the hextets dictionary.   get the value under the index key of the hextets dictionary, if it is false,
  if status is not None.
  call the method self.split_leading_dir with an argument name, substitute the first element of result for name.
  terminal_char is an string ')'.
  return default.
  call the method parser.delete_first_token.
  get the value from the options dictionary under the key 'verbosity', substitute it for self.verbosity.
  return template and None.
  write a white space to the self.stream file stream.
  call the function get_template_from_string with 3 arguments: template, origin and template_name, substitute the result for template.
  call the method self._populate.
  decrement nesting by one.
  call the method middleware.process_request with an argument request, substitute the result for result.
  from django.utils import six into default name space.
  substitute m2m_data for self.m2m_data.
  call the function allow_lazy with 2 arguments: remove_tags, six.text_type, substitute the result for remove_tags.
  call the function save_m2m.
  write migration_string to file fh.
  for every form in valid_forms,
  for every form in self.extra_forms,
  if name is true, substitute it for function_name, if not get '_decorated_function' attribute from func object, if it exists,
  return boolean False.
  call the function _generate_cache_key with request, method, headerlist, key_prefix as arguments, return the result.
  define the function get_mod_func with an argument callback.
  from django.core.management.sql import sql_create into default name space.
  for every p in plist,
  if not,
  if not,
  define the method _iteritems with an argument self.
  if data is boolean False,
  import module os.
  if self.to_field is true,
  substitute '%s' with first element of bits and block_name, respectively.   append block_name to parser.__loaded_blocks.
  replace '%s' in string "Notice: Couldn't set permission bits on %s. You're probably using an uncommon filesystem setup. No problem.",
  value_converters is a dictionary with 2 entries: 'ext_convert' for 'ext' and 'cfg_convert' for 'cfg'.
  try,
  define the method dst with 2 arguments self and dt.
  format value into printable data representation with formating rules arg, return the result.
  if obj.pk is None,
  __version__ is a string "1.6.1".
  decorator function register.filter with 2 arguments string "escape" and is_safe set to boolean True.
  define the function custom_sql_for_model with 3 arguments: app_config, style and connection.
  raise an TemplateSyntaxError exception with an argument string "'regroup' tag takes five arguments".
  define the method display with an argument self.
  return a string '%02d' formated with the result of the function self.G.
  sites is an empty list.
  call the method self.build_attrs with 3 arguments: attrs, type as self.input_type, name as name, substitute the result for final_attrs.
  define the method to_python with 2 arguments: self and value.
  strings "URLError", "urllib2", "urllib.error", result of the call to the function MovedAttribute with 3 arguments:   strings "HTTPError", "urllib2", "urllib.error" and result of the call to the function MovedAttribute with 3 arguments:   strings "ContentTooShortError", "urllib", "urllib.error".   for every attr in _urllib_error_moved_attributes,
  if filename is not contained in _mtimes,
  return self.parent_instance.
  define the function urlquote_plus with 2 arguments: url and safe set to an empty string.
  if settings.DEBUG is true,
  call the method _time.localtime with an argument stamp, substitute the result for tt.
  call the function mark_safe with an argument contents, return the result.
  if errors is true,
  get the '_decorated_function' attribute from func object, if it exists substitute it for func.
  call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  if filename ends with string "$py.class",
  import module collections.
  define the method render with 2 arguments self and context.
  from wsgiref.util import FileWrapper
  if string 'forloop' is contained in context,
  split lang_code by '-', substitute the first element of the result for generic_lang_code.
  call the function formatdate with an argument epoch_seconds, substitute the result for rfcdate.
  slice the list value with unpacked list bits as an argument, return the result.
  return string "<%s: %s>", formated with self.__class__.__name__ and self.
  define the method compile_filter_error with 3 arguments: self, token and e.
  if value is contained in self.empty_values,
  call the method as_tuple on the result, substitute the result for sign, digits and exponent, respectively.   append result of method six.text_type called with an argument digit to an list, for every digit in reversed order of digits,
  return an instance of IfNode class, created with an argument conditions_nodelists.
  raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.
  from django.core.management import call_command into default name space.
  import module binascii.
  if answer is false,
  try,
  for every module_to_search in args,
  if KeyError and TypeError exceptions are caught,
  define the method add_aguments with arguments self and parser.
  return host.
  is self.data has an attribute 'tzinfo' and self.data.tzinfo is true,
  call the function type with an argument self, on the result call the method __next__ with an argument self, return the result.
  substitute package.__path__ for package_path.
  break from this loop execution.
  return an empty string,
  call the method self.end_serialization.
  substitute self.max_value for the value under the 'max' key of the attrs dictionary.
  if settings.USE_TZ is true,
  if self.use_natural_foreign_keys is true and field.rel.to has an 'natural_key' attribute.
  endless loop,
  call the method bpython.embed.
  if not,
  return self.s.
  get the value under the 'cookies' key of the state dictionary,
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  substitute error_messages for value under the ''error_messages' key of the kwargs dictionary.
  if TemplateDoesNotExist, renamed to e, exception is caught,
  define the method D with an argument self.
  if string '%(truncated_text)s' is contained in truncate,
  if default_args exists substitute it for self.default_args, if not, self.default_args is an empty dictionary.
  return obj.
  if value under the name key of self.cleaned_data dictionary is not None,
  define the method strftime with 2 arguments: self and fmt.
  call the function re.compile with 2 arguments: raw string '<.*?>|((?:\w[-\w]*|&.*?;)+)' and bitwise OR performed with 2 operands,
  assign the result for year_val, month_val and day_val, respectively.   html is an empty dictionary.
  file is an instance of BytesIO class created with an argument: return value of the method data.read.
  return a list containing first element of source and a list containing params.
  remove the value under the 'using' key from the options dictionary, assign it to the db, if the entry doesnt exists,
  if settings.STATIC_URL is None,
  and use it as the name of the attribute to get from the self object,   call the result and append it to a list for every name in MEDIA_TYPES, join all the results into a string with newline separator,   use the result as an argument for the call to the function mark_safe, return the result.   define the method render_js with an argument self.
  write string "App '%s' could not be found. Is it in INSTALLED_APPS?" with '%s' where '%s' is replaced with app_label,
  if self.decimal_places is not None,
  remove item from self dictionary.
  call the method self.merge with an argument translation.
  if not,
  substitute the resulting string for choices.   call the method self.create_select with 6 arguments: name, self.year_field, value, day_val, choices and self.day_none_value,
  substitute left for self.first.
  define the method __init__, with 3 arguments: self, m2m and data set None.
  token is an instance of Token class, created with 2 arguments: TOKEN_TEXT and token_string.
  call the method imp.find_module with 2 arguments: module_name and list containing element entry, assign the result to file_, _,
  append j to sites.
  substitute self for result.parent.
  call the add_argument method on parser object, use string '--database', default set to DEFAULT_DB_ALIAS and help set to string,
  self._current is None.
  get the value under the 'id' key of the final_attrs dictionary, substitute it for id_, if it doesnt exists, id_ is None.
  define the method render with 4 arguments: self, name, value and attrs set to None.
  self.new_objects is an empty list.
  define the method is_hidden with an argument self.
  from django.test.utils import get_runner into default namespace.
  append self.choices to args.
  raise an MultiValueDictKeyError exception with printable representation of key.
  define the method handle_m2m_field with self, obj and field arguments.
  if protocol is not equal to string 'both' and unpack_ipv4 is true,
  from django.utils.encoding import smart_text and is_protected_type into default name space.
  separated by newline, use it as an argument for the call to the function mark_safe, return the result.   define the function formset_factory with 9 arguments: form, formset set to BaseFormSet, extra set to integer 1,
  message_context is None.
  define the method discard with 2 arguments: self and item.
  iterations and dklen, return the result.   if not,
  call the method sys.stderr.write with an argument string "fork #2 failed: (%d) %s\n", formated with e.errno and e.strerror.
  call the flatten method of the self and other objects, if they are equal, return boolean True, if not return boolean False.
  otherwise if ch equals a string '|',
  otherwise if length of key equals integer 1 and type of first element of key is contained in fasttypes,
  if event.path ends with string '.mo',
  if value equals k2 or text_value equals return value of the function force_text called with argument k2,
  use the result as an argument for the call to the json.dumps function, return the result.   define the method as_text with an argument self.
  get the value under the 'database' key of the options dictionary, use it as the key to get the value from the connections dictionary, substitute the result for connection.
  return boolean False.
  self.active_writers is an integer 0.
  return lang_code.
  if errors is true,
  define the method compile_function_error with 3 arguments: self, token and e.
  raise an TemplateSyntaxError exception with an argument string "'for' tag received an invalid argument: %s",
  instantiate a class Group with 2 arguments: string "%%(%s)s" formated with name, and name, append it to result.
  if converter is true,
  if self.data is an instance of datetime.datetime and result of the function is_aware called with an argument self.data evaluates to true,
  decorator stringfilter,
  define the method start_object with arguments self and obj.
  get the value under the self.name key of the self.form.initial dictionary, if it exists, substitute it for data,
  raise an TemplateSyntaxError exception with an argument string "%s requires %d arguments, %d provided",
  call the method lineno_comment_map.setdefault with 2 arguments: t.lineno and an empty list, append t.contents to the result.
  define the method flush with an argument self.
  call the function add_to_builtins with an argument string 'django.template.defaultfilters'.
  label set to return value of the function _ called with an string 'Order' and required as boolean False.   if self.can_delete is true,
  split lang_code by character '-', substitute the first element of the result for generic_lang_code.
  if filters is true,
  if extra_context is false,
  substitute the result for content.   token is an instance of Token class, created with 2 arguments: TOKEN_COMMENT and content.
  delete self entry under the key key.
  __all__ is an list containing string 'SelectDateWidget'.
  if choice_label is an instance of tuple or list,
  error is an instance of ValidationError created with an argument error.
  lexer is an instance of JsLexer class.
  all_unique_checks is union of all_unique_checks set and unique_checks set.
  substitute self.field.widget for widget.
  from django.conf import settings into default namespace.
  for every base in reversed order of bases,
  substitute name for self.name.
  raise an TypeError exception with an argument sting "can't delete _wrapped.".
  property decorator,
  return output.
  replace every occurrence of ' ' in value for '\xa0', return the result.
  if contents is false, substitute self.label for contents.
  classmethod decorator,
  try,
  if not,
  if fh has an attribute a, for every a in WRAPPER_ASSIGNMENTS, put a into a tuple, return the resulting tuple.
  call the function new_method_proxy with an argument str, substitute the result for __str__.
  if prefix is None,
  if ImportError exception is caught,
  call the function normalize with an argument p_pattern, substitute the result for bits.
  status_code is an integer 400.
  missing_args_message is a string "You must provide an application name.".
  data is an empty list.
  substitute value under the name key for bf.
  from django.http import Http404 into default name space.
  substitute the result for domain.   if UnicodeError exception is caught,
  call the function _explode_shorthand_ip_string with an argument ip_str, substitute the result for ip_str.
  define the method has_changed with an argument self.
  get the value under the self key of the context.render_context dictionary, substitute it for cycle_iter.
  call the method smart_split_re.finditer with an argument text, for every bit in result,
  close the process with an argument 0.
  derive the class DeserializationError from the Exception base class.
  if context is an instance of Context,
  substitute i-th element of subject for c.
  call the function reverse with 4 arguments: concatenated project_name, character '.' and view_name, args as args, kwargs as kwargs,
  substitute len for _len.
  derive the class HttpResponsePermanentRedirect from the HttpResponseRedirectBase base class.
  return ZERO.
  substitute self.html_name for name.
  substitute i-th element of list for title.
  call the __init__ method from the base class of the HttpResponseNotModified class, called with arguments: unpacked list args,
  substitute _itervalues for values.
  value under the index key of the hextets dictionary is a string '0'.
  if KeyError exception is caught,
  FILE is a file".
  define the function get_unbound_function with an argument unbound.
  define the function int_to_base36 with an argument i.
  define the method as_hidden with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.
  call the function format_html with 3 arguments string '<label{0}>{1}</label>', attrs and contents, substitute the result for contents.
  dest as a string 'no_optimize', default set to boolean False and help as a string 'Do not try to optimize the squashed operations.'.   call the method parser.add_argument with 5 arguments: string '--noinput', action set to string 'store_false',
  call the function _ with an argument string 'p.m.', return the result.
  if ValueError exception is caught,
  append a tuple with 2 arguments: filter_func and args to filters.
  call the function self.create_var with an argument token, return the result.
  call the method self.handle_startendtag with tag and attrs as the arguments.
  derive the class ContextDict from the dict base class.
  try,
  define the method _init_translation_catalog with an argument self.
  use_null_fallback is boolean False.
  where '%s' is replaced with var.   call the method var.split with an argument VARIABLE_ATTRIBUTE_SEPARATOR, convert the result to a tuple and substitute it for self.lookups.
  decorator stringfilter,
  if self.require_all_fields is boolean true,
  if not,
  do nothing.
  return t.
  define the method handle_field with arguments self, obj and field.
  "enclosure" for 'rel', field url of value under the "enclosure" key of item dictionary for 'href',   field length of value under the "enclosure" key of item dictionary for 'length',   and field mime_type of value under the "enclosure" key of item dictionary for 'type'.   for every cat in value under 'categories' key of item dictionary,
  raise a CommandError exception, with string "No migrations present for: %s" as argument, substitute '%s' in previous string with,
  parent is a tuple with 2 arguments: form.Meta and object.
  for every var in self.vars,
  if not,
  if value is false,
  define the method __init__ with an argument self.
  decorator stringfilter,
  join tmpdir and sting 'original' into a file path name, substitute it for original_path.
  latest_date is None.
  substitute target and expression for self.target and self.expression, respectively.
  call the method __init__ from the base class of the class CharField, with arguments unpacked list args and unpacked dictionary kwargs.
  substitute settings.TEMPLATE_STRING_IF_INVALID for current,
  call the method self.enter_command with 2 arguments command and token.
  define the function add_library with 2 arguments: self and lib.
  call the method handler.addQuickElement with 2 arguments: string 'ttl' and value under the 'ttl' key of the self.feed dictionary.
  define the method value with an argument self.
  if best_doublecolon_end equals length of hextets,
  define the method __repr__ with an argument self.
  from django.dispatch import receiver into default name space.
  otherwise if action equals to string "unapply_success".
  call the import_string function with an argument settings.SIGNING_BACKEND, substitute the result for Signer.
  define the method __ne__ with an argument self.
  remove value under key key of self dictionary, if it doesnt exists return default, substitute the result for value.
  compare is a lambda function with arguments self, a and b, return value is boolean true if a is greater than b, otherwise is false.
  derive the class FirstOfNode from Node base class.
  derive the class DefusedXmlException from the ValueError base class.
  return base and ext.
  define the method invalid_block_tag with 4 arguments: self, token, command and parse_until as None.
  set field cdata_tag for this class instance to None.
  if lang_code is contained in _supported and lang_code is not None and result of the function check_for_language,
  define the function get_digit with 2 arguments value and arg.
  join into a file path: path and string '%s.pot', where '%s' is replaced with self.domain converted into a string, substitute the result for pot_path.
  return self.DSTOFFSET.
  return self.cleaned_data.
  model._meta.app_label, model._meta.object_name, parent_model._meta.app_label, parent_model._meta.object_name, respectively.   if not,
  if not,
  call the method self.copy_plural_forms with arguments: msgs and locale, substitute it for msgs.
  if new_attr is None,
  call the connection.creation.sql_for_pending_references method with refto, no_style() and pending_references as arguments,
  define the method __getitem__ with 2 arguments: self and key.
  if second last element of django.VERSION is not equal to a string 'final',
  define the method __init__ with 4 arguments: self, redirect_to, unpacked list args and unpacked dictionary kwargs.
  call the method p.find with bytes string '=' as an argument, substitute the result for i.
  call the self.convert method with s, self.decimal, self.decimal_digits and self.sign as arguments, assign the result to the neg and value, respectively.
  for every result and params in possibility,
  define the method __init__ with 5 arguments: self, var, name, nodelist and extra_context set to None.
  define the method render with an argument self.
  if TypeError exception is caught,
  return boolean True.
  if j equals to integer -1,
  import module sys.
  call the method token.split_contents, substitute the result for bits.
  call the method datetime_safe.new_datetime with an argument value, substitute the result for value.
  call the function _generate_cache_header_key with key_prefix and request as arguments, substitute the result for cache_key.
  from django.apps import apps into default name space.
  if KeyError exception is caught,
  define the method __str__ with an argument self.
  if IOErro, renamed to e, exception is caught,
  try,
  get opname attribute from int object, substitute its field __doc__ for opfunc.__doc__.
  return is empty dictionary.
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  from inspect import getargspec and getcallargs into default name space.
  otherwise if self.verbosity is greater than integer 0,
  self._empty is boolean False.
  strip message_context of '"' characters from both ends, substitute the result for message_context.
  call the method stream.unget with last rollback elements of chunk as an argument.
  call the method self._get_context_stack_frame with an argument context, substitute the result for state_frame.
  define the method rss_attributes with an argument self.
  join m and n into a string, separated by '.', substitute the result for lookup_view_s.
  define the method write with 2 arguments: self and s.
  property decorator,
  register.tag decorator,
  call the method ustring_re.sub with 2 arguments: fix and s, return the result.
  if not,
  neg is integer 0.
  call the method to_python with an argument value from the base class of the TimeField class, return the result.
  append bytes to chunks.
  if self.takes_context is true,
  if cache_choices is not None,
  if __name__ equals a string '__main__'.
  if name is not None,
  call the method self.handle_fk_field with arguments obj and field.
  from django.utils import six into default name space.
  if not,
  substitute it for basedir.   if basedir is not a directory,
  derive the class ExtendsNode from the Node base class.
  define the method errors with an argument self.
  define the method __iter__ with an argument self.
  from functools import lru_cache.
  module_values is a set created from the elements of sys.modules.values method return value.
  return FILE_INPUT_CONTRADICTION.
  if only_initial is false,
  if self._wrapped is empty,
  return self.var.
  return value.
  derive the class Loader from the BaseLoader base class.
  from django.utils.text import get_text_list into default name space.
  call the function re.compile with an argument raw string "(?<!%)%(?!%)", substitute the result for one_percent_re.
  assign the result to cc.   cc is a dictionary populated with items by calling function dictitem with el as argument, for every el in cc.
  result of the function flatatt called with an argument final_attrs, return the result.   derive the class TextInput from the Input base class.
  if 'expects_localtime' attribute of func object exists and is true,
  call the method base.build_instance with arguments Model, data and self.db, substitute the result for obj.
  trimmed is boolean False.
  and instance of TimeInput class, created with 2 arguments: attrs set to attrs and format set to date_format.   call the method __init__ from the base class of the class SplitDateTimeWidget, with 2 arguments: widgets and attrs.
  from django.utils.html import format_html, format_html_join and escape into default name space.
  decrement week_number by integer 1.
  try,
  substitute value under the 'prefix' key of dictionary d, substitute it for prefix.
  define the method copy with an argument self.
  derive the class NumberInput from the TextInput base class.
  msg is a tuple containing one initial entry: a string "WSGI application '%(app_path)s' could not be loaded; Error importing module: '%(exception)s'", where '%(app_path)s' is replaced by app_path and '%(exception)s' is replaced by e.
  while i is lesser than length of subject and i-th element of subject is an empty space or tab character,
  self.config is an instance of ConvertingDict, called with an argument config.
  define the method __init__ with 4 arguments: self, object_list, number, and paginator.
  raise an exception.
  return boolean True.
  return result.
  if ignore is true,
  call the function new_method_proxy with an argument dir, substitute the result for __dir__.
  define the method end_object with arguments self and obj.
  skip this loop iteration,
  substitute notation_name for self.notation_name.
  define the method __init__ with 3 arguments: self, attrs set to None and check_test set to None.
  raise an EmptyPage exception with string 'That page contains no results' as an argument.
  if IndexError exception is caught,
  call the method default with an argument o from the base class of the class DjangoJSONEncoder, return the result.
  define the method nud with 2 arguments self and parser.
  zip elements of result and result_args into a list of tuples, for every item and args in the result,
  where '%s' is replaced with first element of bits.   call the method parser.compile_filter with second element of bits as an argument, substitute the result for filepath.
  if callback is an callable object,
  derive the class InterBoundaryIter from the six.Iterator base class.
  and string '~/.pythonrc.py' as tuples second element.   if pythonrc is true,
  self.position is an integer 0.
  register.tag decorator,
  for value under the key key of the cache dictionary.   increment stats dictionary value under the MISSES key by integer 1.
  substitute __import__ for importer.
  return an instance of a BlockNode class, created with 2 arguments: block_name and nodelist.
  evaluates to true,   split middle into two parts from the right by '@' character, assign the resulting parts to local and domain.
  call the cursor.execute method with sql as argument.
  if form._meta.fields is an instance of tuple type,
  return None.
  if not,
  if func_name is false,
  and self.absolute_max, return the result.   if not,
  call the function sys.getfilesystemencoding, if it evaluates to true, substitute the result for fs_encoding,
  decorator stringfilter,
  call the function sys.exc_info with an argument exc_info.
  from functools import partial into default name space.
  substitute self.toks for toks.
  call the function exhaust with an argument stream.
  from django.core.management.base import AppCommand into default name space.
  if string 'forloop' is contained in context,
  string 'Enter a list of values.' for 'list', return value of the function _ called with an argument,   string 'Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice',   and return value of the function _ called with an argument string '"%(pk)s" is not a valid value for a primary key.' for 'invalid_pk_value'.   define the method __init__ with 10 arguments: self, queryset, cache_choices set to None, required set to boolean True,
  call the function mark_safe with an argument arg, append it to arg_vals.
  return string 'initial-%s' where '%s' is replaced with return value of the self.add_prefix method called with an argument field_name.
  if not,
  reverse order of parts, join them into a string, separated with '.', substitute the result for value.
  define the function unregister_serializer with an argument format.
  if self.field.empty_label is not None,
  if not,
  optimizer is an instance of MigrationOptimizer class.
  called with an argument value under the 'pubdate' key of the item dictionary.   if value under the 'updateddate' key of the item dictionary is not None,
  return a string '%s-%s-%s GMT', formated with: first 7 elements of rfcdate, elements of rfcdate from 8-th to the 11-th index,
  call function _generate_cache_header_key with arguments key_prefix and request, substitute the result for cache_key.
  from datetime import datetime into default name space.
  try,
  and input_format, substitute the result for v.   substitute v.year, v.month and v.day for year_val, month_val and day_val, respectively.
  define the method add_arguments with self class instance and parser as the arguments.
  if dictionary is false,
  substitute self for retval.
  if length of version does not equals to integer 5, raise an exception.
  call the get_major_version wit version as argument, store the result in major.
  substitute self._setupfunc for repr_attr.
  property decorator,
  otherwise if call to the method finder.find_module with an argument name evaluates to true,
  return value under the name key of the sys.modules dictionary.
  call the method s.encode with an argument string 'utf-8', substitute the result for s.
  if new_mod is None,
  define the method save with 2 arguments: self and commit set to boolean True.
  from django.utils import six into default name space.
  if not,
  define the method __init__ with 7 arguments: self, data set to None, files set to None, auto_id set to an string 'id_%s',
  call the self.convert method with i, self.decimal_digits, self.digits and '-' as arguments, assign the result to the neg and value, respectively.
  if not,
  define the method __repr__ with an argument self.
  call the method tarfile.open with an argument file, substitute the result for self._archive.
  if nesting is false,
  call the function make_origin with 4 arguments: display_name, self.load_template_source, template_name and template_dirs,
  derive the class TextNode form the base class Node.
  define the method as_textarea with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.
  for every f in files,
  if _supported is None,
  call the function six.text_type with s, encoding and errors as the arguments, substitute the result for s.
  get the value under the date_key key of the item dictionary, substitute it for item_date.
  define the method __init__ with 2 arguments: self and name.
  substitute error_class for self.error_class.
  call the function get_template with 2 arguments: template_name and dirs, substitute the result for t.
  call the function sql_custom with app_config, self.style and connection as the arguments, substitute the result for statements.
  call the method self.handle_file_complete with arguments old_field_name, counters.
  from django.utils.encoding import force_bytes,  force_text,  force_str and iri_to_uri into default name space.
  decorator function register.filter with an argument is_safe set to boolean False.
  return it.   if PY3 is true,
  return all the results in a list.   decorator function register.filter with an argument is_safe set to boolean True.
  define the method close with an argument self.
  call the function re.compile with an argument raw string "^\s*blocktrans(\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?')))?(?:\s+|$)",
  get the value under the self.data.month key of the MONTHS_3 dictionary, call on it the method title, return the result.
  raise an NotImplementedError with an argument string 'Subclasses must implement this method.'.
  if m is true,
  set attrvalue to None.
  if not,
  substitute klass.__dict__ for next.
  DEFAULT_MAX_NUM is an integer 1000.
  define the function date with 2 arguments value and arg set to None.
  call the method writer.as_string, substitute the result for migration_string.
  import module errno.
  define the function length with an argument value.
  substitute smart_text for smart_unicode.
  call the function force_text with an argument s, strip the result of whitespaces from both ends,
  if second_item is an empty list,
  help is a string "Prints the CREATE TABLE SQL statements for the given app name(s).".
  _meth_self is a string "__self__".
  if BLOCK_CONTEXT_KEY is not contained in context.render_context,
  define the method transform with 3 arguments: self, node and results.
  if s is the instance of the object six.text_type,
  raise an ImproperlyConfigured exception with an argument string "Creating a ModelForm without either the 'fields' attribute,
  if ch equal a string '(',
  call the function t.render with an argument context_instance, return the result.
  alter_sql is an empty list.
  from django.db.models.fields.related import ManyToManyField.
  do nothing.
  try,
  if package is false,
  return length of value,
  define the method id_for_label with arguments self, data, files and name.
  split ip_str into 2 parts from right, return second element of the result.
  define the method get_nodes_by_type with 2 arguments: self and nodetype.
  try,
  set k attribute of cls object to meth.
  if proto is greater than or equal to integer 2,
  concatenate __name__, string '.moves' and attr.name together, use it as an key to get the value from the sys.modules dictionary,
  if value under the 'microsecond' key of the kw dictionary is true,
  substitute last element of bits for asvar.
  remove config dictionary element under 'disable_existing_loggers' key, if it exists substitute it for disable_existing, if not,
  from django.http.request import HttpRequest, QueryDict, RawPostDataException, UnreadablePostError and build_request_repr into default name space.
  return integer 1 and ch2.
  derive the class DateTimeInput from the DateTimeBaseInput base class.
  output is an empty list.
  perform the bitwise or operation on the next 6 operands pyinotify.IN_MODIFY pyinotify.IN_DELETE, pyinotify.IN_ATTRIB,
  substitute token for self.token.
  raise an NotImplementedError with an argument string 'subclasses of Tokenparser must provide a top() method'.
  get self.to_field attribute of self.parent_instance, substitute it for orig.
  call the method self.as_tuple with an argument value under 'mailhost' key of config dictionary,
  call the function import_module with an argument string '%s.%s', where '%s' is replaced with app_config.name and module_to_search.
  for every root in settings.ALLOWED_INCLUDE_ROOTS,
  import module sys.
  define the method __iter__ with an argument self.
  call the method self._new_gnu_trans with an argument localedir, substitute the result for translation.
  use the result as an argument for the call to the self.stdout.write method.   if run_syncdb and executor.loader.unmigrated_apps exist,
  remove the first element from the self.context.
  define the method _load_post_and_files with an argument self.
  from django.utils.translation import get_language into default name space.
  substitute i-th element of self.forms for form.
  call the method self.handle_field with arguments obj and filed.
  define the method unget with arguments self and bytes.
  call the method new_context._reset_dicts values.
  import module re.
  decorator function register.filter with an argument is_safe set to boolean True.
  call the function mark_safe with an argument new_obj, substitute the result for obj.
  if value is false and self.required is true,
  and truncate, return the result.   return elements of words joined in a string, separated with whitespaces.
  substitute complain for pop.
  define the function exhaust with an argument stream_or_iterable.
  define the method __len__ with an argument self.
  substitute sixth element of bits for var_name.
  DARK_PALETTE is a string 'dark'.
  define the method __init__ with 3 arguments: self, filepath and parsed.
  derive the class StringOrigin form the base class Origin.
  import time module.
  define the function _add_doc with 2 arguments: func and doc.
  return self.paginator.count.
  is_usable is boolean True.
  if id_ is true,
  try,
  formfield_callback as formfield_callback, widgets as widgets, localized_fields as localized_fields, labels as labels,   help_texts as help_texts and error_messages as error_messages, substitute the result for form.   call the function formset_factory with 10 arguments: form, formset, extra as extra, min_num as min_num, max_num as max_num,
  do nothing.
  return string 'st'.
  use_func is boolean True.
  if value is contained in self.empty_values,
  define the method _start_relational_field with arguments self and field.
  data is an dictionary with 2 initial entries: return value of the smart_text function with the argument obj._meta for 'model',
  call the method type.__new__ with 4 arguments: cls, name, empty tuple and d, return the result.
  define the method update with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  define the method defalt with arguments self and o.
  decorator function register.filter with an argument is_safe set to boolean True.
  call the function mark_safe with an arguments: for every n in nodelist results of the function force_text called with an argument n,  joined in a string, return the result.
  define the function deactivate_all.
  cached_loaders is an empty list.
  if not settings.DEBUG is true and settings.ALLOWED_HOSTS is false,
  if self.timezone is true and call to the method self.timezone.dst with an argument self.data, evaluates to true,
  otherwise if ch equals a string '(',
  and prefix as node.prefix.   call the method node.replace with an argument decorated.
  call the method self.empty_form.is_multipart, return the result
  if length of empty_label is not equal to integer 3.
  raise an ValueError with an argument string 'empty_label list/tuple must have 3 elements.'.
  append new_filenames to _cached_filenames.
  call the handle_filed method of the base class of the Serializer class, with arguments obj and field.
  if nofollow is true nofollow_attr is a string ' rel="nofollow"', otherwise nofollow_attr is an empty string.
  gettext._translations is an empty dictionary.
  try,
  append list containing string '--no-wrap' to self.xgettext_options.
  convert elements of error into a list, substitute the first element for message.
  call the method boundary with an argument string 'ascii', use the result to call to the parse_header function,
  call the method is_multipart on the first element of self.forms, return it.
  return output.
  update object_data dictionary with initial.
  convert result to lowercase and return it.
  if child.nodeType equals to child.TEXT_NODE or child.nodeType equals to child.CDATA_SECTION_NODE,
  derive the class JsonResponse from the HttpResponse base class.
  from django.utils import six into default name space.
  if self.initial_forms is false,
  define the method render with 4 arguments: self, name, value and attrs set to None.
  from django.db.migrations.loader import MigrationLoader into default name space.
  raise an MultiPartParserError with an argument string 'Invalid Content-Type: %s', where '%s' is replaced with content_type.
  skip this loop iteration,s
  raise an AttributeError exception with an argument string "This method is available only on the view class.".
  dest as a string 'interface' and help as a string 'Specify an interactive interpreter interface. Available options: "ipython" and "bpython"'.   define the method _ipython_pre_011 with an argument self.
  string created by concatenating context, CONTEXT_SEPARATOR and plural and number.   call the function ungettext with unpacked dictionary msgs_with_ctxt, substitute the result for result.
  call the method self._archive.extractfile with an argument member, substitute the result for extracted.
  only if member.name is not equal to string 'pax_global_header'.   call the method self.has_leading_dir with an argument list, with elements x.name for every x in members, substitute the result for leading.
  args is a string '[fixture ...]'.
  if template is None,
  if part is contained in PALETTES,
  call the function lazy with 4 arguments: get_format, six.text_type, list and tuple, substitute the result for get_format_lazy.
  decorator stringfilter,
  get the value under the if iso_input not in val key of the ISO_INPUT_FORMATS dictionary, if it doesnt exists return an empty tuple,
  try
  if IndexError exception is caught,
  return self.hashvalue.
  call the function ngettext with 3 arguments: singular, plural and number, use the result as an argument for the call to the force_text,
  for every form in valid_forms,
  if content_disposition is true,
  define the function quote_etag with an argument etag.
  self._errors is an empty list.
  if varargs is None,
  call the method self.__cast, return the hash value of the result.
  call the method self._callback_strs.add with an argument pattern._callback_str.
  from django.utils.encoding import force_str, force_text and iri_to_uri into default name space.
  define the method __iter__ with an argument self.
  derive the class BaseInlineFormSet from the BaseModelFormSet base class.
  define the method resolve_variable with 2 arguments: path and context.
  raise an TemplateDoesNotExist exception with an argument name.
  assign the result to the value under the string ".moves.urllib_error" appended to __name__ key of the sys.modules dictionary,   and to the value under the string ".moves.urllib.error" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_request from the _LazyModule base class.
  return unbound.im_func.
  from itertools import chain into default name space.
  define the method writer with an argument self.
  if template_tuple is contained in TemplateDoesNotExist,
  if field is not contained in self.errors,
  if last_row doesnt ends with row_ender,
  get the value under the self.status_code key of the REASON_PHRASES dictionary, if it exists substitute it for the self.reason_phrase,
  skip this loop iteration.
  if six.PY3 is true,
  raise an AttributeError with an argument string "no such move, %r", formated with a tuple with an element name.
  try,
  substitute val for the value under the cache_key key of the _format_cache dictionary.
  if not,
  call the function register_serializer with 3 arguments: format, value under the format key of the settings.SERIALIZATION_MODULES dictionary and serializers.
  return value under the key key of self dictionary.
  derive the class Command from the base class AppCommand.
  convert is a dictionary with 4 initial entries: list with 3 tuples: tuple with 2 elements: string '__gt__',
  call the method self.build_attrs with an argument attrs, substitute the result for final_attrs.
  if whitelist is not None
  import module warnings.
  yield k.
  return an empty string.
  raise an UnrecognizedArchiveFormat exception with an argument string "File object not a recognized archive format.".
  from django.utils.encoding import force_str,  force_text and DEFAULT_LOCALE_ENCODING into default name space.
  from django.core.exceptions import ImproperlyConfigured and ViewDoesNotExist into default name space.
  derive the class TemplateCommand from the BaseCommand base class.
  call the method self.expression.resolve with 2 arguments: context and boolean True, return the result.
  if sender is true and sender attribute 'handles_files' is also True,
  call the method tpl.format with an arguments self.name, self.sysid and self.pubid.
  from django.core.serializers.python import Deserializer as PythonDeserializer into default name space.
  call the function _urlize with 4 arguments: value, trim_url_limit as limit converted into an integer, nofollow as boolean True,
  property decorator.
  if not,
  if not,
  get _assertCountEqual attribute of the self object, call the result with 2 arguments: unpacked list args,
  define the function get_serializer_formats.
  call the function force_text with arguments value and strings_only set to boolean True, substitute the result for unicode_value.
  call the method base.build_instance with arguments Model, data and db, substitute the result for obj.
  raise an CommandError exception with an argument string "%r is not a valid port number.", where '%r' is repaced with self.port.
  substitute elements of self.template_string list from upto index to the end for last_lit.
  return result.
  call the function _checkLevel with an argument level, use the result as an argument for the call to the function handler.setLevel.
  define the function pluralize with 2 arguments value and arg set to character 's'.
  substitute the result for args and kwargs.   return an instance of AssignmentNode class created with 4 arguments: takes_context, args, kwargs and target_var.
  define the method callback with an argument self.
  if it exists or None if not and convert_apps set to app_labels, if it exists or None if not, substitute the result for changes.   if changes is false and self.verbosity is greater than, or equal to iteger 1,
  call the method self.xml.startElement with arguments string 'object' and attrs.
  for every i and widget in enumerated iterable self.widgets,
  from __future__ import unicode_literals into default name space.
  if fset is not None,
  call the method self.load_template with 2 arguments: template_name and template_dirs, return the result.
  extend errors list with e.error_list.
  define the function dictsort with 2 arguments value and arg.
  FILE_MODIFIED is integer 1.
  substitute self._wrapped for repr_attr.
  decorator function register.filter with an argument is_safe set to boolean False.
  try,
  pk_key is a string "%s-%s", where '%s' is replaced with: result of the method self.add_prefix called with an argument i,
  if not,
  call the method self.validate_unique.
  __all__is an tuple with 2 elements: strings 'BaseForm' and 'Form'.
  define the method resolve with 3 arguments: self, context and ignore_failures set to boolean False.
  if self.verbosity is greater than integer 0,
  try,
  do nothing.
  derive the class ZipArchive from the BaseArchive base class.
  call the function _load_serializers.
  do nothing.
  define the function urlunquote with an argument quoted_url.
  substitute _urllib_response_moved_attributes for Module_six_moves_urllib_response._moved_attributes.
  if line ends with a new line character substitute width incremented by integer 1 for max_width, if not substitute width for max_width.
  import module warnings.
  for every i and ext in enumerated iterable ext_list,
  if not,
  value under the DELETION_FIELD_NAME key of the form.fields is an instance of BooleanField class, created with 2 arguments:
  define the method __init__ with 2 arguments: self and config.
  endless loop,
  call the function allow_lazy with an argument strip_tags, substitute the result for strip_tags.
  from collections import UserList into default namespace.
  define the function unescape_entities with an argument text.
  call the method handler.addQuickElement with 2 arguments: string 'email' and value under the 'author_email' key of the item dictionary.
  return an empty list.
  where '%s' is replaced with filename.   return cls.
  remove '__dict__' key from the orig_vars dictionary.
  call the method tag_re.finditer with an argument self.template_string, for every match in result,
  from django.utils import formats into default name space.
  return an empty string,
  substitute the result for value under 'address' key of config dictionary.   substitute klass for factory.
  get greater value between integer 1 and result of subtraction of self.orphans from self.count, substitute it for hits.
  get the index name, of the parser._namedCycleNodes, return the result.
  call the function ungettext with 3 arguments: singular, plural and number, substitute the result for result.
  from django.forms.utils import flatatt,  ErrorDict and ErrorList into default name space.
  substitute type.__call__ for __call__.
  finally perform,
  for every form in self.forms append form to a list, if function form.is_valid evaluates to true,
  append name to string 'add_' use it as the name of the attribute to get from object self, call the result as an function,
  if block_context is None,
  wsgi_opts is a dictionary with 4 initial entries: value under the key 'maxspare' of options dictionary converted to an integer,
  call the method render from the base class of the class ClearableFileInput, called with 3 arguments: name, value and attrs,
  if result is true,
  skip this loop iteration.
  if filename ends with string ".pyc" or it ends with ".pyo",
  define the method pop with 3 arguments: self, key and unpacked list args.
  from django.utils.six import StringIO into default name space.
  formated with values under the 'author_email' and 'author_name' keys of item dictionary.   otherwise if value under the "author_email" key of the item dictionary is true,
  get field.name from the obj, substitute it for related.
  substitute '%s' in a string "Full migrations file '%s':" with writer.filename, append newline to it,
  append other_dict to self.dicts.
  append field.widget.media to media, substitute the result for media.
  call the method self.validate_name with arguments project_name and string "project".
  define the method __init__ with 4 arguments: self, takes_context, args and kwargs.
  return _cached_filenames.
  none_value is a tuple containing 2 elements: integer 0 and string '---'.
  form is an instance of ManagementForm class, created with 3 arguments: auto_id as self.auto_id, prefix as self.prefix,
  substitute boolean False for cache_choices.
  queryset is an property object of this class, with _get_queryset getter and _set_queryset setter functions.
  call the function apps.get_app_configs, for every app_config in result,
  call the function m.group, if the result evaluates to true,
  if not,
  call the method appendlist from the base class of the QueryDict class, with arguments key and value.
  from django.utils import six into default name space.
  format string '%+03d%02d' with hour and minute, append it to time_str, return the result.
  call the method LocaleRegexProvider.__init__ with arguments self and regex.
  if value is None,
  from django.utils import six into default name space.
  if not,
  from django.utils.translation import ugettext and ungettext into default name space.
  derive the class ForNode from Node base class.
  define the method path with an argument self.
  call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self.feed dictionary.
  from io import BytesIO into default name space.
  call the function six.reraise with 3 arguments: ImproperlyConfigured, instance of ImproperlyConfigured class created with msg,
  raise an TemplateSyntaxError exception with an argument string "Only 'silent' flag is allowed after cycle's name, not '%s'.",
  define the method __repr__ with an argument self.
  call the method self._css.keys, sort the result and substitute it for media.
  join comment elements into a string, substitute it for content.
  call the function get_current_timezone, use the result as an argument for the call to the function _get_timezone_name, return the result.
  call the stream_or_string.read function, substitute the result for stream_or_string.
  for every name and value in items of props dictionary,
  non_capturing_groups is an empty list.
  call the method logging.captureWarnings with an argument boolean True.
  define the method render with 2 arguments: self and context.
  if data is None,
  call the method self._update_errors with an argument e.
  if ValidationError exception is caught,
  replace '%s' in the string '</\s*%s\s*>' with the result of the function call tag.lower(),
  converted to an integer.   call the method self._init_translation_catalog.
  for p in self.ignore_patterns if p ends with dir_suffix take sliced list p from the start,
  if there is no match,
  call the method match.group with an argument integer 0, return the result.
  define the method inclusion_tag with 5 arguments: self, file_name, context_class set to Context, takes_context set to boolean False,
  for every loader in self.loaders,
  return singular_suffix.
  raise an TemplateSyntaxError exception with an argument string "Could not parse some characters: %s|%s|%s",
  import module sys.
  call the method self.regex.search with an argument path, substitute the result for match.
  instantiate Variable class, with an argument constant, call the resolve method with an empty dictionary as an argument, substitute the result for var_obj.
  for every field in self.fields,
  decorator stringfilter,
  replace all occurrences of '\\' with '\\\\' in value, replace all occurrences of '"' with '\\"' in the previous result,
  try,
  exit program with code integer 0.
  try,
  import module time.
  split msgs by newline characters, for every line in result,
  and help set to a string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.   define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
  call the method self.timezone.utcoffset with an argument self.data, substitute the result for offset.
  return context.render_context.
  raise an TemplateDoesNotExist exception with an argument, elements of not_found joined into a string, separated with ', '
  _js_escapes is a dictionary with 11 initial entries: '\\u005C' for integer representation of string '\\',
  substitute '%s' in the string " (%s squashed migrations)" with length of replaces filed of graph.nodes element at the plan_node index, append the string to the title.
  call the method self.configurator.convert with an argument value, substitute the result for result.
  "as an app name. Please try another name.", where '%r' is replaced with app_name.   call the method handle from the base class of Command class, with 4 arguments: string 'app', app_name, target and unpacked dictionary options.
  try,
  if field is an instance of FileField,
  define the function upper with an argument value.
  derive the class ManagementForm from the Form base class.
  decorator function register.filter with an argument is_safe set to boolean False.
  if data is None,
  get_format called with an argument string 'DATE_INPUT_FORMATS', substitute the result for format.   call the method value.strftime with an argument format, return the result.
  format string normal_row with an dictionary containing 6 entries: return value of the function force_text with an argument bf_errors,
  raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.
  split instructions by ',' character, substitute the result for styles.
  if six.PY3 is true and val1 and val2 are an instances of bytes,
  for every name and var in return value of the function six.iteritems called with an argument self.extra_context.   if self.isolated_context is true,
  substitute the result for value under the 'clear_checkbox_id' key of the substitutions dictionary.   call the method render from the instance of CheckboxInput class, with 3 arguments: checkbox_name, boolean False,
  decorator stringfilter,
  define the method list with an argument self.
  call the method call the function warnings.warn with 3 arguments: msg formatted with language and value under the language key,
  derive the class Library form the base class object.
  derive the class HTMLParser from the base class HTMLParser located in the module _html_parser.
  call the method __init__ from the base class of the class CheckboxInput, with an argument attrs.
  substitute conn_type for self.connector.
  call the method imatch.group with an argument integer 1, substitute the result for g.
  try,
  substitute the result for value under the f.name key of data dictionary.   if not,
  return default.
  return boolean False.
  raise an TypeError with an string 'formfield_callback must be a function or callable'.
  define the function Deserializer with arguments object_list and unpacked dictionary options.
  while first element of s is equal to bytes string ';',
  define the method __delattr__ with 2 arguments self and name.
  import module django.
  define the function abspathu with an argument path.
  call the method apps.get_model with 2 arguments: string 'auth' and string 'Permission'.
  total_ordering decorator,
  if not,
  otherwise is template is six.string_types instance,
  return.
  try,
  import module warnings.
  'Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice',   and return value of the function _ called with an argument string 'Enter a list of values.' for 'invalid_list'.   define the method to_python with arguments self and value.
  return self.cleaned_data.
  define the method _add_fallback with an argument self.
  return nothing.
  if not,
  define the function _set_response_etag, with response as an argument.
  get the value under the ext key of the extension_map dictionary, substitute it for cls.
  define the method __reversed__ with an argument self.
  substitute has_key for __contains__.
  call the method self.unget with list containing first remaining elements of chunk as an argument.
  if can fail is true,
  call the function smart_text with argument key_value, use the result as an argument for the call to the self.xml.characters method.
  substitute self.state for state.
  code is a string 'limit_value'
  for every i and char in enumerated text,
  otherwise name is None.   if name is None,
  t is an instance of Template class, created with 2 arguments output and name set to filepath.
  return an instance of Media class, created with definition as an argument.
  call the function exec_ with an argument string """def reraise(tp, value, tb=None):    raise tp, value, tb""".
  if values is None,
  define the initialization method __init__, with self instance of this class, convert_charrefs set to boolean False,
  inner_result and inner_args are empty lists.
  _meth_func is a string "im_func".
  define the method is_multipart with an argument self.
  otherwise if name is not None and compile_function is None,
  for every o in opts.   for every val in value,
  from collections import defaultdict into default name space.
  if not,
  if value is an instance of list type,
  append value under the 'protocol' key of the options dictionary to the string 'server.', substitute it for flup_module.
  daemon_kwargs is an empty dictionary.
  subtract integer 12 from self.data.hour, return the result.
  old_handler is None.
  call the serializer function, call the loads method on the return value with an argument data, return the result.
  substitute self.lineno for token.lineno.
  call the function ungettext with 3 arguments: singular, plural and number, return the result.
  append string ".moves.urllib_request" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for request.
  define the method _dec with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  unpacked dictionary daemon_kwargs.   if value under the 'pidfile' of options dictionary exists,
  import module sys.
  call the method match.end, substitute the result for upto.
  needs_multipart_form is boolean True.
  define the function bound_func with 2 arguments: unpacked list args2 and unpacked dictionary kwargs2.
  if not,
  substitute the result for qs.   pks is a set containing results of the call to the function force_text with an argument, key attribute of the o object,
  try,
  define the method __init__ with 4 arguments: self, permitted_methods, unpacked list args and unpacked dictionary kwargs.
  define the function widthratio with 2 arguments: parser and token.
  call the function warnings.warn with 3 arguments: msg, RemovedInDjango19Warning and stacklevel as integer 2.
  substitute '%s' in string "UnicodeDecodeError: skipped file %s in %s" with f.file and f.dirpath, write it to self.stdout.
  if text is an instance of SafeData, safe_input is boolean True, otherwise is boolean False.
  return None.
  if NameError exception is caught,
  for every __ in range of integers from 0 up to sep subtracted from fill_to,
  if resource_string is not None, is_usable is boolean True, otherwise is_usable is boolean False.
  if settings.USE_L10N is true and value is an instance of six.string_types,
  for every i in sequence of integers from 0 to result of the method self.total_form_count, call the method self._construct_form,
  parser.compile_filter, substitute the result for expression.   return an instance of a RegroupNode class, created with 3 arguments target, expression and var_name.
  get the LANG_INFO dictionary value under the generic_lang_code key, return the result.
  try,
  if file_name is an instance of Template class.
  if settings.DEBUG is true,
  define the method start_serialization with an argument self.
  call the function date_format with 2 arguments: value and use_l10n as use_l10n, return the result.
  define the method render with 4 arguments: self, name, value and attrs set to None.
  if six.PY2 is true,
  call the method self.add_truncation_text with 2 arguments: an empty string and truncate, substitute it for truncate_text.
  if TypeError exception is caught,
  default set to False, help containing string 'Show a list of all known migrations and which are applied' as arguments.   define the method handle with self instance of a class, list args, dictionary options as arguments.
  call the method tried.extend with an argument: t added to a list containing element pattern, for every t in sub_tried.
  decrement by length of password, create bytes string with previous result number of characters '\x00',
  raise an KeyError with an argument string "Key %r not found in '%s'", substitute '%s' with name and self.__class__.__name__.
  if self.active_readers equals integer 0 and self.waiting_writers is not equal to integer 0,
  substitute content for self.content.
  func is an instance of TemplateLoader class, created with unpacked list args.
  delete the value under the 'liveserver' key of the options dictionary.
  if not,
  define the function deserialize with 3 arguments: format, stream_or_string and unpacked dictionary options.
  define the function literals with 3 arguments: choices, prefix set to an empty string and suffix set to an empty string.
  evaluate the method six.text_type(s), on the result call the method encode with encoding as an argument, return the result.
  property decorator.
  apps is an empty dictionary.
  categories is a list containing the results of the function force_text, called with an argument c, for every c in categories.
  define the method __repr__with an argument self.
  while RUN_RELOADER is true.
  second element of l for every l in return value of the self._files.lists   call the method f.close.
  break the loop execution.
  define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  for every node in self,
  call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'app_label', nargs set to character'*',
  if autoescape is true and safe_input is false,
  skip this loop iteration.
  if s is instance of a class Promise,
  replace "%s" from the string ' class="%s"' with css_classes, substitute it for html_class_attr.
  with all occurrences of '%s' replaced with app_name and model._meta.object_name, respectively.   try,
  substitute _moved_attributes for _MovedItems._moved_attributes.
  method lru_cache.lru_cache with an argument maxsize set to None, as a decorator,
  call the method copy.deepcopy with arguments self._choices and memo, substitute the result for result._choices.
  append self.msgattrib_options to a list containing string 'msgattrib', append to it a list containing string '-o', pofile and pofile,
  call the function block_re.match with an argument t.contents, substitute the result for bmatch.
  call the function mark_safe with an argument, elements of bits joined into a string, return the result.
  call the function six.reraise with 3 arguments: ImproperlyConfigured, ImproperlyConfigured(msg) and third element of return value of the function sys.exc_info.
  def the method __init__ with 5 arguments: self, object_list, per_page, orphans set to integer 0 and allow_empty_first_page set to boolean True.
  call the function ugettext with an argument string "%s KB", substitute '%s' with the result of the call to the function,
  try,
  if not,
  derive the class TemplateDoesNotExist form the base class Exception.
  define the function _get_foreign_key with 4 arguments: parent_model, model, fk_name set to None and can_fail set to boolean False.
  from django.utils.translation import TranslatorCommentWarning, trim_whitespace and LANGUAGE_SESSION_KEY into default name space.
  if s is an instance of object bytes,
  derive the class Command from the BaseCommand class.
  open out_log flie in append mode with buffering size of input buffer, substitute the result for so.
  return func.
  if settings.USE_ETAGS is True and function call response.has_header with string 'ETag' as argument returns boolean False,
  substitute value under the NEXT key of the oldroot dictionary for root and first element of nonlocal_root.
  call the method path.decode with an argument fs_encoding, return the result.
  otherwise if self.required is true,
  from django.utils.dates import MONTHS, MONTHS_3, MONTHS_ALT, MONTHS_AP, WEEKDAYS and WEEKDAYS_ABBR into default name space.
  logger.handlers is an empty list.
  find the last index of newline occurrence in self.__starttag_text, subtract it from total length of self.__starttag_text,
  if first element of str_number equals a string '-'.
  exit the program with failures converted to boolean as a message.
  sum length of self.quertset and integer 1 if self.field.empty_label is not None, or integer 0 if not, return the result.
  if six.PY2 is true,
  define the method __init__ wiht 5 arguments: self, META, input_data, upload_handlers and encoding set to None.
  from django.core import signals into default name space.
  raise a ValidationError exception with arguments self.message and code set to self.code.
  call the function self.func with an argument instance, substitute the result for res and value under the self.name key of the instance.__dict__ dictionary.
  if not,
  request_queue_size is integer 10.
  if ImportError exception is caught,
  if ValueError exception is caught,
  raise an ValueError with an argument string "Non-reversible reg-exp portion: '(?P%s'" formated with ch.
  define the method fastcgi_help with an argument message set to None.
  define the method find_template with 3 arguments: self, name, dirs set to None.
  define private method __repr__ with argument self.
  if IndexError exception is caught,
  from datetime import date as real_date and datetime as real_datetime into default name space.
  call the method self.reset.
  call the function allow_lazy with an argument chars, substitute the result for chars.
  define the method getlist with 2 arguments: self and key.
  convert items of attrs dictionary to list of tuples, for every attr and value in it,
  define the function register_serializer with 3 arguments: format, serializer_module and serializers set to None.
  for i in self._ordering append to a list value under the first element of i key of the self.forms dictionary, return resulting list.
  code set to string 'invalid_choice' and params as a dictionary with an entry, val for 'value'.   call the method self.run_validators with an argument value.
  if first two elements of sys.version_info equal to integers 2 ant 7, respectively,
  raise an ValidationError exception with an argument errors.
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  TRAILING_PUNCTUATION is a list with 7 elements: '.', ',', ':', ';', '.)', '"' and '\''.
  if Exception exception is caught,
  get the 'value' attribute of the _urlconfs, if it exists return it, otherwise return defaults.
  define the method is_url with arguments self and template.
  substitute var_name for self.var_name.
  if it is not equal to stat.S_IREAD,   raise an exception.
  call the function force_str with an argument quoted_url, use the result as an argument for the call to the function unquote,
  define the __init__method with arguments self and exception.
  substitute loopvars and sequence for self.loopvars and self.sequence, respectively.
  from django.core.wsgi import get_wsgi_application into default name space.
  call the function tempfile.mkdtemp, substitute the result for tmpdir.
  call the function urlsplit with an argument location, substitute the result for bits.
  call the method dig1.digest, use the result as an argument for the call to the function dig2.update.
  try,
  try,
  define the function last with an argument value.
  if error is an instance of ValidationError,
  add integer 1 to it, substitute the result for space.   if space equals integer 0,
  substitute Iterator for create_bound_method.
  call the method self.can_read.release.
  otherwise if var is None,
  return boolean True.
  call the method other_dict.lists, for every key and value_list in result,
  format_html_join, called with 3 arguments: empty string, string '<li>{0}{1}</li>', tuple containing tuples with 2 elements:   k and result of the function force_text with an argument v, for every k and v in items of the dictionary self, return the result.   define the method as_text with an argument self.
  define the method filter with 2 arguments: self and record.
  if not self.initial_extra is None.   defaults is a dictionary with 4 entries: data for 'data', files for 'files', auto_id for 'auto_id' and prefix for 'prefix'.
  if DecimalException exception is caught,
  remove the first occurrence of the filename value in the _error_files list.
  derive the class BaseTemporalField from the base class Field class.
  _func_globals is a string "__globals__".
  if value is an instance of six.string_types,
  append orig_file to string '#: ', substitute it for new.
  call the function F with an argument x, for every x in sequence of integers from 1 to l, not included,
  call the function re.compile with 2 arguments regex, re.UNICODE and substitute the result for regex.
  raise an StopIteration exception.
  concatenate var_name, VARIABLE_ATTRIBUTE_SEPARATOR and fourth element of bits, use the result as an argument for the call the method,
  if files is true, substitute it for self.files, if not self.files is an empty dictionary.
  if not,
  if ImportError exception is caught.
  substitute the result for parsed.   if parsed.scheme is true and parsed.scheme is not contained in self.allowed_schemes,
  define the method add_fields with 2 arguments: self, form and index.
  from django.utils.encoding import force_text and iri_to_uri into default name space.
  call the method self._populate.
  self.__class__.__module__ and self.__class__.__name__, respectively, substitute the result for self.salt.   define the method signature with arguments self and value.
  slice chunk list to get the last rollback elements, if the new list is not empty,
  define the function clear_url_caches.
  decorator function register.filter with an argument is_safe set to boolean True.
  call the function allow_lazy with 2 arguments: javascript_quote and six.text_type, substitute the result for javascript_quote.
  call the method self.add_fallback with an argument default_translation.
  define the method has_error with 3 arguments: self, field and code set to None.
  _encoding is None.
  apply operator.eq function to elements of level iterable, until level is reduced to a single value, if the result is true,
  define the function rfc2822_date with an argument date.
  if UnicodeDecodeError exception is caught,
  if is_templatized is true,
  increment stats dictionary value under the HITS key by integer 1.
  define the method lex with 2 arguments self and text.
  convert newline character to unicode and substitute the result for newline.
  define the function _findall with 2 arguments text and substr.
  call the method d.as_tuple, substitute the result for tupl.
  for every part in plural,
  substitute self for self.config.configurator.
  sites is an empty list.
  define the method __str__ with an argument self.
  call the method questioner.ask_merge with an argument app_label, if it evaluates to true,
  if not,
  substitute settings.DATE_FORMAT for arg.
  if o is contained in opt_dict,
  from django.core.management.base import BaseCommand and CommandError into default name space.
  define the function format with 2 arguments: value and format_string.
  call the method token.split_contents, substitute the result.
  p is a instance of Popen class, created with 6 arguments: args, shell set to boolean False, stdout set to PIPE,
  append name to self._changed_data list.
  remove self.value_converters dictionary element under prefix key, if it exists substitute it for converter, if not, converter is None.
  get config dictionary element under 'handlers' key, if it exists substitute it for handlers, if not, handlers is EMPTY_DICT.
  where '%s' is replaced with name.   if defaults is not None,
  call the method self.end_object with an argument obj.
  with the result renamed to fp, perform the following:   write msgs to fp.
  sort elements of handlers, for every name in result,
  if Exception, renamed to e, exception is caught,
  return value, if it is None return arg.
  call the method __init__ from the base class of the class CheckboxChoiceInput, with 2 arguments: unpacked list args,
  return e.
  substitute language for self.__language.
  return boolean True.
  while current_len is smaller than or equal to length,
  if widget is an instance of NumberInput and string 'step' is not contained in widget.attrs.
  split value into words, return the length of the result.
  decorator function register.filter with an argument is_safe set to boolean True.
  decorator function register.filter with 2 arguments expects_localtime set to boolean True and is_safe set to boolean False.
  get the value under the 'no_obsolete' key of the options dictionary, substitute it for self.no_obsolete.
  substitute length of chunk for chunk_length.
  replace all the elements of the basedir list by its corresponding absolute directory path, only is that directory exists.
  if value under the 'errlog' key of options dictionary is true,
  if StopUpload, renamed to e, exception is caught,
  call the function self.coerce with an argument value, substitute it for value.
  return an instance of a class WithNode, created with 4 arguments: None, None, nodelist and extra_context as extra_context.
  join source list elements from last till pos indexes into a string, substitute the result for piece.
  if encoded contains string "\\" and if encoded doesnt start with the double quote symbol,
  join elements of code_list in a string, separated by ';', format string '\x1b[%sm' with it, append text to the result if exists,
  if settings.TEMPLATE_DEBUG is true and origin is None,
  return plural_suffix.
  from functools import total_ordering.
  substitute self.__class__ for obj.__class__.
  increment i by integer 1, substitute the result for i.
  yield obj as generator return value,
  substitute fk for FormSet.fk.
  call the method f.value_from_object with an argument instance, substitute the result for value under the f.name key of the data dictionary.
  substitute logging.root for root.
  _meth_self is a string "im_self".
  define the method content with 2 arguments: self and value.
  substitute the result for final_attrs.   call the method self.is_checked, if it evaluates to true,
  call the method __init__ with an argument display_name, from the base class of the LoaderOrigin class.
  substitute flags for self.flags.
  do nothing.
  call the function shutil.rmtree with 2 arguments: path_to_remove and onerror set to rmtree_errorhandler.
  called with sep appended to base_path as an argument and results of the function normcase called twice with final_path,   and base_pah are not equal and directory name of the result of the function normcase called with an argument base_path,   if not equal to the result of the function normcase called with an argument base_path.   raise an ValueError with an argument string 'The joined path (%s) is located outside of the base path component (%s)',
  take last four elements of base and append ext to it, substitute result for ext.
  add state element to self.__dict__ dictionary.
  templatetags_modules_candidates is an list with an argument string 'django.templatetags'.
  if match is true,
  raise CommandError exception with "App '%s' does not have migrations (you cannot selectively sync unmigrated apps)",
  raise an NotImplementedError with an argument string 'subclasses of Widget must provide a render() method'.
  call the function user_function with 2 arguments unpacked list args and unpacked dictionary kwds, substitute the result for result.
  unpacked list args and unpacked dictionary kwargs.   define the method to_python with arguments self and value.
  set real_name attribute of the self object to value of real_name attribute of trans object.
  for every formset in formsets,
  if OSError exception is caught,
  append value under k key of self dictionary to a list, for every k in self.keyOrder, return the result.
  if app_label is not contained in executor.loader.migrated_apps,
  media is an instance of Media class.
  if self doesnt have an '_body' attribute,
  call the method pyinotify.INotifyWrapper.create, on the return value call the inotify_init method, substitute the result for fd.
  'Nominates a database to print the SQL for. Defaults to the "default" database.' as the arguments.   define method handle_app_config with self class instance, app_config and dictionary options as arguments.
  if ValueError or TypeError exceptions are caught,
  for app_config in return value of the method apps.get_app_configs,
  call the function get_language, substitute the result for lang.
  try,
  define the function dec with an argument func,
  if VariableDoesNotExist exception is caught,
  strip message_context of "'" characters from both ends, substitute the result for message_context.
  return an empty string.
  from django.db import models and DEFAULT_DB_ALIAS into default name space.
  return nothing.
  substitute bits, without the first two elements, substitute the result for remaining_bits.
  define the method writer_leaves with an argument self.
  called with an argument final_attrs, return the result.   property decorator,
  pop_context is boolean False.
  get config dictionary element under 'incremental' key, if it exists substitute it for incremental, if not,
  call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
  if '.' is not contained in var and 'e' is not contained in var converted into lowercase,
  code is a string 'max_value'
  if value is boolean True,
  default_error_messages is an dictionary with an initial entry: result of the function _ called with an argument string,
  filesize_number_format with result of division of bytes by MB as an argument, substitute the result for value.   otherwise if bytes is smaller than TB,
  substitute Field.creation_counter for self.creation_counter.
  call the function warnings.warn with 3 arguments: string "django.utils.unittest will be removed in Django 1.9.",
  return an empty string.
  substitute code for self.code.
  define the method __getitem__ with 2 arguments: self and key.
  exit the program with the code integer 1.
  if decimal_separator is contained in value,
  define the method to_python with arguments self and value.
  output_transaction is boolean True.
  return key and pdict.
  return a tuple with an element self.__offset.
  if self has an attribute '_coerce',
  call the function blankout with 2 arguments: t.contents and 'B', write the result to out.
  if initial is true, substitute it for self.initial, if not self.files is an empty dictionary.
  write string "  Installing indexes...\n" to the standard output.
  append potfile to potfiles.
  if self.setting is true,
  and '8' for 'conceal'.   define the method colorize with 3 arguments: text set to an empty string, opts set to an empty tuple and unpacked dictionary kwargs.
  property decorator,
  _supported is None.
  remove element under '_data' key of obj_dict dictionary, if it exists substitute it for data, if not data is an empty list.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  return an empty dictionary.
  substitute e for message.
  raise TemplateSyntaxError("%r must be the first tag in the template.", where '%s' is replaced with node.
  where '%s' is replaced with taglib and e.   return an instance of a LoadNode class.
  if f equals to string '__pycache__',
  match rest string with self.INDEX_PATTERN regex, substitute the result for m.
  call the function ugettext with an argument string "%s MB", substitute '%s' with the result of the call to the function,
  """(?P<ipv6>\[[a-fA-F0-9:]+\]) | (?P<fqdn>[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*) ):)?(?P<port>\d+)$""", re.X   DEFAULT_PORT is a string "8000".
  break from the loop execution
  register.tag decorator,
  and instance of Name class created with an argument string 'python_2_unicode_compatible'.   decorated is an instance of class Node, created with 3 arguments: syms.decorated, list with 2 arguments: decorator and klass,
  if not,
  otherwise if value is an instance of decimal.Decimal, float or six.integer_types,
  if not,
  call the method match.groups, assign the result to name and value, respectively.
  define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
  define the function templatize with 2 arguments: src and origin set to None.
  pytz is None.
  raise an NoReverseMatch exception with an argument string "%s is not a registered namespace inside '%s'",
  if not,
  call the method parser.parse with an argument tuple with 2 elements strings: 'else' and 'endfilter', substitute the result for nodelistelse.
  for every iso_input in the result,   if iso_input is not contained in val,
  define the function truncatewords with 2 arguments value and arg.
  call the function warnings.warn with 2 arguments: "django.utils.tzinfo.FixedOffset will be removed in Django 1.9. "
  if self.keep_pot is false,
  do nothing.
  get the value under the LANGUAGE_SESSION_KEY key of the request.session dictionary, substitute it for lang_code.
  compile regex from a string '(?<!\\)([aAbBcdDeEfFgGhHiIjlLmMnNoOPrsStTUuwWyYzZ])', substitute it for re_formatchars.
  return next element of the iterable it.
  if not,
  params is a dictionary with 2 initial entries: self.limit_value for 'limit_value' and cleaned for 'show_value'.
  if not,
  call the method self.iterkeys, return the list of results.
  self.translate is boolean False.
  try,
  derive class _MovedItems from the _LazyModule base class.
  call the function datetime.date.today, substitute the year field of the result for this_year.
  define the method validate with arguments self and value.
  call the emit_pre_migrate_signal with create_models, self.verbosity, self.interactive. connection.alias as arguments.
  append form.errors to self._errors.
  truncate the last element of filename.
  call the function view_func with 3 arguments: request, unpacked list args, unpacked dictionary kwargs, substitute the result for response.
  call the method self.instance.validate_unique with an argument exclude set to exclude.
  while remaining_bits is true,
  close file_ file descriptor.
  return path.
  if etags is false,
  self._callback_strs is an empty set.
  e is an instance of TemplateSyntaxError class, created with an argument msg.
  define the method set_signed_cookie with 5 arguments: self, key, value, salt as an empty string and unpacked dictionary kwarg.
  define the method close with an argument self.
  if SkipFile exception is caught,
  mapping is a dictionary with 3 initial entries: 'a' for 'alpha', 'b' for 'beta' and 'c' for 'rc'.
  define the function divisibleby with 2 arguments value and arg.
  derive the class EscapeData from object base class.
  derive the class NoReverseMatch with Exception as base class.
  do nothing.
  raise an TemplateSyntaxError exception with an argument error_msg.
  call the method self.as_data, for every error in the result.
  if max_num is None,
  and only if self.match is None or return value of the method self.match_re.search called with an argument f is true.   append a tuple containing 2 elements: full_file and f to self.choices list.
  called with an argument value, substitute the result for value under the 'initial' key of the substitutions dictionary.   if self.is_required is false,
  invert the ordering of elements of int_part_gd, substitute it for int_part.
  call the method datetime_safe.new_datetime with an argument date, substitute the result for date.
  define the function deconstruct with an argument obj.
  if ValueError exception is caught,
  _func_defaults is a string "__defaults__".
  call the function force_text with arguments self and _regex, substitute the result for regex.
  define the function templatize with 2 arguments: src and origin set to None.
  return compile_function.
  do nothing.
  call the method self.__prepare_class__.
  if value is not contained in result,
  property decorator,
  convert language to lowercase, return it.
  define the function get_language_bidi.
  return self.
  for field in self if field.is_hidden is true, append field to a list, return the resulting list.
  call the method value_from_datadict from the base class of the class ClearableFileInput,
  call the method self._mark_post_parse_error.
  if call to the method os.access with arguments: filename and os.W_OK, evaluates to false,
  call the function digest with an argument password, call the method digest on the result, substitute the result or password.
  call the method translation.activate with an argument settings.LANGUAGE_CODE.
  for every i and line in enumerated iterable lines,
  define the method to_python with arguments self and value.
  if not,
  if not,
  if auto_id is true and '%s' is contained in result of the call to the function smart_text with an argument auto_id,
  ns is a string "http://www.w3.org/2005/Atom".
  'ModelChoiceField', 'ModelMultipleChoiceField', 'ALL_FIELDS', 'BaseModelFormSet', 'modelformset_factory', 'BaseInlineFormSet',   and 'inlineformset_factory'.   ALL_FIELDS is a string '__all__'.
  import module warnings.
  define the method __getitem__ with 2 arguments: self and header.
  define the function format with 6 arguments: number, decimal_sep, decimal_pos set to None, grouping set to integer 0,
  and, if f.rel.toequals parent_model or f.rel.to is contained in result of the call to the method parent_model._meta.get_parent_list.   if length of fks_to_parent is integer 1,
  for every accessor_name and object_list is return value of the method self.m2m_data.items.
  if imatch is true,
  if not,
  substitute deconstruct for klass.deconstruct.
  append it to the string "  Target specific migration: ", use it as the argument for the call to the self.style.MIGRATE_LABEL method,   call the self.stdout.write method with previous return value as an argument.   if run_syncdb and executor.loader.unmigrated_apps is true,
  if message_context is true,
  define the method _post_clean with an argument self.
  get the value under the 'localize' key of the kwargs dictionary, substitute it for localize, if the key doesnt exists, substitute the result for localize.
  substitute self.pointer for i.
  call the function get_git_changeset, store the result in git_changeset.
  if not,
  raise an ValidationError with 3 arguments: value under the 'required' key of the self.error_messages dictionary,
  import module warnings.
  do nothing.
  if value under the 'author_email' key of the self.feed dictionary is not None,
  define the method start_index with an argument self.
  if template has an attribute 'render',
  from django.utils.translation import ugettext and ungettext_lazy into default name space.
  derive the class SplitHiddenDateTimeWidget from the SplitDateTimeWidget base class.
  if self._wrapped is empty,
  define the function trim_whitespace with an argument s.
  define the method _ipython_pre_100 with an argument self.
  do nothing.
  call the function urlunsplit with a tuple containing 5 elements: scheme, netloc, path, query and fragment, as an argument, substitute the result for url.
  return otherwise.
  'EmailField', 'FileField', 'ImageField', 'URLField', 'BooleanField', 'NullBooleanField', 'ChoiceField', 'MultipleChoiceField',   'ComboField', 'MultiValueField', 'FloatField', 'DecimalField', 'SplitDateTimeField', 'IPAddressField', 'GenericIPAddressField',   'FilePathField', 'SlugField', 'TypedChoiceField', 'TypedMultipleChoiceField'.   derive the class Field from the base class object.
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  if level is an instance of int type,
  url is an empty string.
  call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
  define the method parse_name with arguments self and fixture_name.
  classmethod decorator,
  define the method __init__ with 2 arguments: self and unpacked list dicts.
  combined is an instance of Media class.
  replace '%s' in string "%s; charset=%s" with settings.DEFAULT_CONTENT_TYPE and self._charset, substitute it for content_type.
  define the method handle_field with arguments self, obj and field.
  if expanded_template is a directory,
  call the method lookups.appendlist with 2 arguments: name and a tuple containing 3 elements: new_matches, sum of p_pattern and pat,
  if model_identifier is false,
  for every v in list_ append to a list result of the function encode, called with arguments: k and result of the function force_bytes,
  if field.rel.to._meta.pk.rel is true,
  use length of result as an argument for the call to the function six.text_type, substitute the result for width.   if autoescape is false, if value is an instance of SafeData,
  derive the class Command from the base class BaseCommand.
  import module warnings.
  substitute the last element of parts for cmp_fmt.
  if options is true,
  define the function u with an argument s.
  host ends with '.' and host ends with pattern or host is equal to all but first elements of pattern,   substitute boolean true for match, otherwise substitute boolean False for match.   if match is true,
  define the method as_text with an argument self.
  derive the class SplitDateTimeWidget from the MultiWidget base class.
  get the value under the 'HTTP_X_REQUESTED_WITH' key of the self.META dictionary, if it equals string 'XMLHttpRequest',
  split into two parts string main_value_pair at character ':', substitute the parts for name and value, respectively.
  id is None.
  append self.msgmerge_options to a list containing string 'msgmerge', append to it a list containing pofile and potfile, substitute the result for args.
  return an empty string.
  substitute subject for self.subject.
  for every handler in handlers,
  try,
  if not,
  import module binascii.
  "apps registry is ready. Check that you don't make non-lazy gettext calls at import time.".   for every app_config in app_configs,
  remove kwargs dictionary entry under the 'extra_context' key, if it exists substitute it for self.extra_context,
  otherwise if common_prefix is None,
  import module os.
  substitute hashlib.sha256 for digest.
  define the method __init__ with 2 arguments: self and conditions_nodelists.
  substitute value under the self.token_type key of the TOKEN_MAPPING dictionary for token_name.
  call the function ugettext with an argument string "%s TB", substitute '%s' with the result of the call to the function,
  sort value with key set to filed resolve of instance of a class Variable, created with an argument arg, reverse the sort and return the result.
  call the method self.add_item_elements with 2 arguments: handler and item.
  insert token at the beginning of self.tokens.
  call the function force_text with an argument error, return the result.
  substitute pattern.regex.pattern for p_pattern.
  substitute _html_parser.interesting_normal for self.interesting.
  self.fed is an empty list.
  call the function binascii.hexlify with an argument x, convert the result to base 16 integer, return the result.
  if self.verbosity is greater than integer 0,
  define the method clean with arguments self and value.
  define the function pgettext with 2 arguments: context and message.
  from django.core.files import uploadhandler into default name space.
  if match is true,
  from the base class of the class TypedMultipleChoiceField.   define the method _coerce with arguments self and value.
  if exclude is not None,
  otherwise if value is an instance of datetime.datetime,
  get config dictionary element under 'filters' key, if it exists substitute it for filters, if not, filters is EMPTY_DICT.
  call the method handler.endElement with an argument string 'rss'.
  substitute '%s' in string '%s %s' with the elements of value converted into a tuple, substitute the result for value.
  if commit is true and form has an attribute 'save_m2m',
  if use_l10n is true, or if use_l10n is None and settings.USE_L10N is true,
  if domain is true and return value of the function validate_host called with 2 arguments: domain and settings.ALLOWED_HOSTS, evaluates to true,
  if self.limit_choices_to object is callable,
  call the function re.sub with 3 arguments: string "([a-z])'([A-Z])", lambda function with an argument m and return value,
  substitute _iteritems for items.
  define the method simple_tag with 4 arguments: self, func and None, takes_context and None and name set to None.
  if ValueError, TypeError or ValidationError exception is caught,
  import module functools.
  if not,
  decorator register.filter.
  import hashlib module.
  define the function pretty_name with an argument name.
  if self.can_delete is true and call to the function self._should_delete_form with an argument form evaluates to true,
  "Use django.forms.utils instead.", RemovedInDjango19Warning and stacklevel set to an integer 2.   from django.forms.utils import everything into default name space.
  evaluate the boolean expression: locale is None and exclude is false and process_all is false,
  'get_current_timezone', 'get_current_timezone_name', 'activate', 'deactivate', 'override', 'localtime', 'now', 'is_aware',   'is_naive', 'make_aware' and 'make_naive'.   call the function timedelta with an argument integer 0, substitute the result for ZERO.
  if expires is false,
  add self.form.required_css_class to extra_classes set.
  define the method _media with an argument self.
  call the method self.compile_filter with an argument token.contents, substitute the result for filter_expression.
  call the function quote with return value of the evaluated function force_bytes(iri),
  call the method m.group with an argument string 'sec', convert the result into a string, substitute it for sec.
  raise an CommandError exception, with an arguent: string "App '%s' has migrations. Only the sqlmigrate and sqlflush commands can be used when an app has migrations.", where '%s' is replaced for app_config.label.
  invalid_apps is an empty list.
  import module warnings.
  try,
  define the method render with 2 arguments self and context.
  return the result.   sign is an empty string.
  increment length of boundary by integer 6, substitute the result for self._rollback.
  from django.core.exceptions import ImproperlyConfigured into default name space.
  return val.
  call the function widget, substitute the result for widget.
  get the value under the 'id' key of the widget.attrs dictionary, if the key exists substitute it for id_,
  with an argument self.data.year decremented by 1, evaluates to true,   week_number is integer 53.
  return doy.
  if KeyError exception is caught,
  if default_list is None,
  call the function plural_re.match with an argument t.contents, substitute the result for pluralmatch.
  if first element of g equals a string '"',
  return boolean True.
  replace '%s' in sting '%s-%s' with self.prefix and index, return the result.
  format the string '{scheme}://{host}{path}' by replacing scheme with self.scheme, host with return value of the self.get_host method,
  call the function io.open with 3 arguments: django_po, string 'r' and encoding set to string 'utf-8' as arguments,
  call the function get_default_timezone, use the result as an argument for the call to the function _get_timezone_name, return the result.
  if 'is_safe' attribute of func object exists and is true and obj is an instance of SafeData,
  and request_repr, respectively.   reporter is an instance of ExceptionReporter class, created with 3 arguments: request, is_email as boolean True,
  derive the class Literal from the TokenBase base class.
  call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
  otherwise if action equals to string 'apply_success',
  if elt is an instance of Choice or NonCapture classes,
  if truncate_len equals integer 0.
  substitute length for self._remaining.
  if row_data is contained in seen_data,
  while i is lesser than length of subject and i-th element of subject is an empty space or tab character.
  try,
  call the method parser.add_argument with 6 arguments: string '--ipv6', string '-6', action set to string 'store_true',
  if self.errors is true and self.form has an attribute 'error_css_class',
  if arg is smaller than integer 1,
  delete Trans.
  import module re.
  __slots__ is a string 'hashvalue'.
  return the value under the language_code of the self._regex_dict dictionary.
  call the method self.template.resolve with an argument context, substitute the result for template.
  if KeyboardInterrupt exception is caught,
  call the method e.encode with an argument string "latin-1".
  define the method write with 2 arguments: self and content.
  finally, perform,
  import module os.
  EMPTY_VALUES is a tuple containing 5 initial elements: None, empty string, empty list, empty tuple and an empty dictionary.
  default_validators is an list containing validators.validate_slug.
  from django.utils.encoding import force_bytes into default name space.
  define the method is_valid with an argument self.
  return self._choices.
  call the method operator.methodcaller with 3 arguments: string 'to_bytes', integer 1 and string 'big', substitute the result for int2byte.
  if i-th element of subject is '"' character or "'" character,
  substitute old for self.mod.
  substitute record.exc_info for exc_info.
  define the function set_urlconf with an argument urlconf_name.
  call the method self.find_files with an argument string '.', substitute the result for file_list.
  raise CommandError exception with "More than one migration matches '%s' in app '%s'. Please be more specific.",
  if not,
  define the method extend_nodelist with 4 arguments: self, nodelist, node and token.
  doublecolon_start is an integer -1.
  if self.regex is not an instance of six.string_types,
  define the function F with an argument i.
  cache_key is a tuple with 2 argumetns: format_type and lang.
  unpack the manifest.values function return value and feed it to the itertools.chain function, create_models is a set containing chanied list.
  if value equals self.empty_value or value is contained in self.empty_values,
  if self.flags is true and self.regex is not an instance of a six.string_types type,
  substitute safe for value under the 'safe' key of kwargs dictionary.
  read data from buf, yield the result.
  if not,
  define the method validate with arguments self and value.
  replace '%s' in string '%s_%s' with id_ and i, substitute the result for input_attrs dictionary value under the 'id' key.
  if not,
  define the function length_is with 2 arguments value and arg.
  define the function salted_hmac with 3 arguments: key_salt, value and secret set to None.
  with lock,
  if count is equal to integer 0.
  return func.
  if sign is true,
  return settings.TEMPLATE_STRING_IF_INVALID.
  return retval.
  if field.rel is true and field.rel is an instance of models.ManyToManyRel,
  if not,
  import module os.
  return obj.
  for every choice in value,
  call the method self.build_attrs with arguments attrs, name as name, substitute the result for final_attrs.
  call the function six.iteritems with an argument kwargs, for every key and value in the result,
  substitute Select for widget.
  define the method d with an argument self.
  substitute substitute TextInput for widget.
  substitute t.lineno for comment_lineno_cache.
  for every x in self.fields call the method x.__deepcopy__ with an argument memo, put the result into a tuple, substitute it for result.fields.
  call the method self.next_token, substitute the result for token.
  write shutdown_message to self.stdout file stream.
  from django.utils.daemonize import become_daemon into default name space.
  otherwise if ch equals a string '(',
  define the method __init__ with 3 arguments: self, attrs set to None and choices set to an empty tuple.
  define the method o with an argument self.
  otherwise if maxsize is None,
  define the function wrapper with an argument cls.
  append key to self.keyOrder dictionary.
  substitute level for rv.
  inplural is boolean False.
  for every key and value in items of dictionary self,
  VARIABLE_ATTRIBUTE_SEPARATOR is a string '.'.
  call the method self._archive.close.
  append orig_file to string '#: ', substitute it for new.
  substitute before_import_registry for register_to._registry.
  call the method self._assert_mutable.
  if not,
  call the function _ with an argument string '%(datetime)s couldn\'t be interpreted in time zone %(current_timezone)s; it '
  change access mode of path to stat.S_IWRITE mode.
  from .html_parser import HTMLParser and HTMLParseError into default name space.
  and initial as a dictionary with 4 entries: result of self.total_form_count method for TOTAL_FORM_COUNT,   result of self.initial_form_count method for INITIAL_FORM_COUNT, self.min_num for MIN_NUM_FORM_COUNT and self.max_num for MAX_NUM_FORM_COUNT.   return form.
  raise an exception self.error_class with an argument string ""Unused '%s' at end of if expression",
  define the private method __str__, with self instance of this class as the only argument.
  DEFAULT_MIN_NUM is an integer 0.
  try,
  call the function get_user_model, substitute the result for UserModel.
  define the method __repr__ with an argument self.
  from django.utils.safestring import mark_safe, SafeData and mark_for_escaping into default name space.
  define the method __init__ with 3 arguments: self,unpacked list args and unpacked dictionary kwargs.
  call the method self.tag_function with an argument name, return the result.
  attrs is a dictionary with model for 'model'.
  if unused_char is false,
  return the content field of the base class of the class SimpleTemplateResponse.
  get the value under the settings.__module__ key of the sys.modules dictionary,
  if not,
  define the method __promise__ with 4 arguments: cls, klass, funcname and method.
  if http_cookies.CookieError exception is raised,
  for every name in loggers,
  call the function dict with an argument tuple with 2 elements: o.pk and o, for every o in result of the method self.get_queryset,
  for every first_select in return value of the function _parse_date_fmt.
  add row_data to seen_data set.
  join self.path and f in path, substitute the result for full_file.
  define the method _get_queryset with an argument self.
  if self.field.required is true and self.form has an attribute 'required_css_class' ,
  if processors is None,
  define the function ngettext_lazy with 3 arguments: singular, plural and number set to None.
  output_transaction is boolean True.
  if role is contained in value under the NOCOLOR_PALETTE key of the PALETTES dictionary and definition is true,
  define the function gettext_noop with an argument message.
  return string 'form'.
  convert self.domain into a string and append string '.po' to it, join basedir and result in file path, substitute it for pofile.
  define the function clean_ipv6_address with 3 arguments: ip_str, unpack_ipv4 set to boolean False and error_message,
  do nothing.
  remove the value under 'max_length' key from the kwargs dictionary and if the key exists substitute it for self.max_length,
  derive the class DeserializedObject from the object base class.
  call the method formats.time_format with 2 arguments: value and arg, return the result.
  if answer equals a string 'y',
  convert value into a string, take character at the negative arg index, convert it into an integer, return it.
  if unicode_value is an instance of six.text_type,
  try,
  for every bit in bits.   register.tag decorator function with an argument 'for',
  call the function warnings.simplefilter with 2 arguments: string "default" and RemovedInNextVersionWarning.
  if call to the function response.has_header with argument 'Vary' returns boolean True,
  obj is an instance of Node class, created with 3 arguments: children, connector and negated.
  subtract year from integer 2000, substitute the result for delta.
  substitute current_app for self.current_app.
  prepend '.' to the i-th element of the ext_list.
  decorator function register.filter with an argument is_safe set to boolean False.
  re_formatchars.split, for every i and piece in enumerated result,   if i is even number,
  return boolean False.
  call the method self.remove_potfiles.
  return dec.
  file_field_list is an empty list.
  help is a string "Prints the CREATE INDEX SQL statements for the given model module name(s).".
  substitute i incremented by 1 for value under the 'counter' key of the loop_dict dictionary.
  compile a regex from raw string '^\.\s*(\w+)\s*', substitute it for DOT_PATTERN.
  call the method self.as_tuple with an argument value under 'address' key of config dictionary,
  substitute '%s' in string ' # %s' with line, write it to out file.
  derive the class MLStripper from the HTMLParser base class.
  define the function phone2numeric_filter with an argument value.
  if stream_or_string is an instance of six.string_types type.
  define the method __copy__ with an argument self.
  call the method handler.addQuickElement with 3 arguments: string 'dc:creator',
  substitute exclude for value under the 'exclude' key of attrs dictionary.
  join elements of output into a string with newline as separator, use it as an argument for the call to the function mark_safe, return it.
  substitute instance for self.instance.
  string '--keyword=gettext_noop', string '--keyword=gettext_lazy', string '--keyword=ngettext_lazy:1,2',   string '--keyword=ugettext_noop', string '--keyword=ugettext_lazy', string '--keyword=ungettext_lazy:1,2',   string '--keyword=pgettext:1c,2', string '--keyword=npgettext:1c,2,3', string '--keyword=pgettext_lazy:1c,2',   string '--keyword=npgettext_lazy:1c,2,3' and string '--output=-', substitute the result for args.   append work_file to args.
  try,
  from django.utils.six.moves import map into default name space.
  return an instance of DebugNode class.
  self.pos is integer 0.
  for every chunk in field_stream,
  define the functionbase36_to_int with an argument s.
  join together callback.__module__, character "." and callback.__name__, substitute the result for lookup_str.
  for every log in existing,
  compare is a lambda function with arguments self, a and b, return value is boolean true if a is greater than b, otherwise is false.
  return boolean False.
  define the method strptime with arguments self, value and format.
  try,
  return input_val.
  try,
  call the method self.xml.addQuickElement with an argument string 'None'.
  bitwise shift integer 1 to the left by 31 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.
  otherwise if obj is an instance of EscapeData,
  remove first element from self.tokens, return removed element.
  return value under the key key of dictionary in last element of self.dicts,
  root dictionary values under the KEY and RESULT keys are both None.
  call the function six.reraise with 3 arguments: ValidationError, ValidationError created with 2 arguments:
  for ever app_config in return value of the method apps.get_app_configs,
  otherwise if value is an instance of datetime.time,
  substitute save_m2m for form.save_m2m.
  joint prefix, character '.' and self._callback_str together, substitute the result for self._callback_str.
  from django.utils.encoding import force_text into default name space.
  call the function strftime with 2 arguments: self and fmt, return the result.
  get the value under the self.name key of the self.form.errors dictionary, if the key exists, return it,
  f.required is boolean False.
  if self.match is not None,
  if OSError exception is caught,
  define the method top with an argument self.
  define the function get_git_changeset.
  decorator stringfilter,
  substitute self.deleted_forms for forms_to_delete.
  substitute force_text for force_unicode.
  define the method handle_merge with arguments self, loader and conflicts.
  self.cookies is an instance of SimpleCookie class created with self.cookies as an argument.
  if instance is None,
  format the string  '<p>%s</p>' with the result, for every p in paras, substitute list of results for paras.   join elements of paras into a string separated with '\n\n', return the result.
  substitute self for block.
  for every f in post_sql_fields,
  call the method form.save_m2m.
  if index is negative inter 3, if is_reversed, substitute it for in_index, if not, in_index is negative integer 2.
  raise an ValidationError with 3 arguments: dictionary self.error_messages value under the key 'invalid_choice',
  return result.
  raise an ValueError exception.
  try,
  otherwise it is boolean False.   if kwarg_format is false,
  sum bottom and self.per_page, substitute the result for top.
  decorator function register.filter with 2 arguments string "timeuntil" and is_safe set to boolean False.
  if takes_context is true,
  if prefix is true, substitute it for self.prefix, otherwise call the method self.get_default_prefix,
  define the method parse_file_upload with 3 arguments: self, META and post_data.
  return an string "[Included template had syntax error: %s]", where '%s' is replaced with e.
  define the method __deepcopy__ with 3 arguments: self and memo.
  if transfer_encoding is not None,
  get the 'silent_variable_failure' attribute of e object, if it exists and is true,
  call the method middleware.process_view with 4 arguments: request, view_func, args and kwargs, substitute the result for result.
  if six.PY2 is true,
  for every x in sequence of integer from integer 0 to length of data, append an empty string to a list, substitute the resulting list for initial.
  if value is true and method self.valid_value called with an argument value evaluates to false,
  return integer 0.
  get translation_function attribute of the _default object, call the result with 3 arguments: singular, plural and number, return the result.
  return mod.register.
   help is a string "Creates new migration(s) for apps.".
  define the function camel_case_to_spaces with an argument value.
  substitute DEFAULT_MIN_NUM for min_num,
  define the function is_valid_ipv6_address with an argument ip_str.
  if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
  substitute type.__init__ for __init__.
