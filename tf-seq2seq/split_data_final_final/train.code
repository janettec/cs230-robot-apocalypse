 return data_set != initial_set
                  domain_part = domain_part . encode ( 'idna' ) . decode ( 'ascii' )
                  push = block = block_context . pop ( self . name )
             def read ( self , * args , ** kwargs ) :
 import sys
                     self . _count = len ( self . object_list )
 _format_modules_cache = { }
  except InvalidOperation :
from django . dispatch import Signal
   class ClearableFileInput ( FileInput ) :
 return '\n' . join ( statements )
              basedirs . append ( os . path . join ( app_config . path , 'locale' ) )
    def _explode_shorthand_ip_string ( ip_str ) :
      return CsrfTokenNode ( )
  except Exception :
              return 'rd'
   if options . get ( "list" , False ) :
  elif ch == ')' :
              super ( URLValidator , self ) . __call__ ( value )
 import warnings
   def is_checked ( self ) :
 return list ( value )
  return obj_pk
          self . cyclevars = cyclevars
  else :
  if use_reloader :
 if extra_attrs :
 data = { }
  return [ k for k , v in six . iteritems ( _serializers ) if not v . Serializer . internal_use_only ]
    return mark_safe ( template % substitutions )
          return list ( self ) == other
 app_dirs . append ( old_app_dir )
              exit_code = restart_with_reloader ( )
              raise OverflowError ( 'dklen too big' )
   def validate_ipv6_address ( value ) :
   raise TemplateDoesNotExist ( template_name )
      def get_unbound_function ( unbound ) :
              self . add_filters ( result , filters )
      class SelectDateWidget ( Widget ) :
  if line :
 from django . utils . deprecation import RemovedInDjango20Warning
 if os . path . exists ( django_po ) :
 from django . db import connections , DEFAULT_DB_ALIAS
 shutdown_message = options . get ( 'shutdown_message' , '' )
 return j
  else :
 self . locale_dir = locale_dir
   kwargs = { }
 def addslashes ( value ) :
 value = self . to_python ( value )
                field_name = field_node . getAttribute ( "name" )
 for name in bits [ 1 : - 2 ] :
           yes , no , maybe = bits [ 0 ] , bits [ 1 ] , bits [ 1 ]
   self . _clean_fields ( )
   def display ( self ) :
                  pass
          try :
              thefile = self . file
   @ property
  fixture_files . extend ( fixture_files_in_dir )
  list_length = len ( list_ )
 try :
 from importlib import import_module
    def load_template ( self , template_name , template_dirs = None ) :
              return '0'
 self . warning = warning
      return getattr ( self , _assertRegex ) ( * args , ** kwargs )
              with codecs . open ( sql_file , 'r' , encoding = settings . FILE_CHARSET ) as fp :
 from django . utils import six
 for i in range ( 0 , self . total_form_count ( ) ) :
 nodes = [ ]
              return val if isinstance ( val , bytes ) else val . encode ( encoding )
  if value [ 0 ] in self . empty_values and value [ 1 ] in self . empty_values :
  else :
 self . _unget_history = [ num_bytes ] + self . _unget_history [ : 49 ]
  except KeyError :
 propagate = config . get ( 'propagate' , None )
     if options . get ( "test_flush" , False ) :
  else :
  def clean ( self , value ) :
  return output
                          date_data = ( getattr ( form . cleaned_data [ unique_for ] , lookup ) , )
              params , varargs , varkw , defaults = getargspec ( func )
   from logging import NullHandler
 from __future__ import unicode_literals
  else :
 if contents is not None :
                      words [ i ] = mark_safe ( word )
                  for pythonrc in ( os . environ . get ( "PYTHONSTARTUP" ) , '~/.pythonrc.py' ) :
                  data = self
 silent = False
  return result
 for option_value , option_label in chain ( self . choices , choices ) :
 from django . utils . deprecation import RemovedInDjango19Warning
 if lang_code is not None :
 if i >= 0 :
 StringIO = BytesIO = StringIO . StringIO
 t = super ( SafeText , self ) . __add__ ( rhs )
    return iri_to_uri ( resolver . _reverse_with_prefix ( view , prefix , * args , ** kwargs ) )
 return getattr ( trans , real_name )
  elif len ( bits ) == 6 :
    @ register . tag ( 'filter' )
 if token . contents == 'else' :
 pass
                  i = 365
 palette = PALETTES [ NOCOLOR_PALETTE ] . copy ( )
          duplicate = copy ( super ( BaseContext , self ) )
   def _get_media ( self ) :
  return self . _encoding
 self . _input_data = input_data
   if six . PY3 :
  output [ - 1 ] = last_row [ : - len ( row_ender ) ] + str_hidden + row_ender
  elif self . waiting_readers != 0 :
 __dispatch = None
 self . current_token = self . next_token ( )
  return upload
                  name = match . lastgroup
                      attrvalue = attrvalue [ 1 : - 1 ]
 self . paths_to_remove . append ( tempdir )
 if self . waiting_writers != 0 :
  else :
 from django . utils import timezone
    if hasattr ( data , 'temporary_file_path' ) :
          try :
 logger = logging . getLogger ( name )
  unichr = unichr
              raise ValueError ( 'Sign character found in converter base digits.' )
                  widget_value = value [ i ]
              return [ ]
     class DateFormat ( TimeFormat ) :
    def parse_http_date ( date ) :
  except ValidationError :
              u = salt + struct . pack ( b'>I' , i )
 default_error_messages = {  'invalid' : _ ( "No file was submitted. Check the encoding type on the form." ) ,  'missing' : _ ( "No file was submitted." ) ,  'empty' : _ ( "The submitted file is empty." ) ,  'max_length' : ungettext_lazy (  'Ensure this filename has at most %(max)d character (it has %(length)d).' ,  'Ensure this filename has at most %(max)d characters (it has %(length)d).' ,  'max' ) ,  'contradiction' : _ ( 'Please either submit a file or check the clear checkbox, not both.' )  }
 offset = self . __offset . seconds // 60
 parser . add_argument ( '--liveserver' ,  action = 'store' , dest = 'liveserver' , default = None ,  help = 'Overrides the default address where the live server (used '  'with LiveServerTestCase) is expected to run from. The '  'default value is localhost:8081.' ) ,
   if isinstance ( nodelist , NodeList ) and not isinstance ( node , TextNode ) :
              if isinstance ( s , Exception ) :
  except KeyError :
  exclude = self . _get_validation_exclusions ( )
 from django . core . management . base import BaseCommand , CommandError
              context . render_context [ BLOCK_CONTEXT_KEY ] = BlockContext ( )
 self . stdout . write ( self . style . NOTICE ( "  Run 'manage.py makemigrations' to make new migrations, and then re-run 'manage.py migrate' to apply them." ) )
          return mark_safe ( value )
     request_finished . connect ( update_watch )
 self . FILES = MultiValueDict ( )
              if level not in logging . _levelNames :
                    self . children . append ( data )
  def _get_page_range ( self ) :
 dirs = [ ]
                    raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
      def become_daemon ( our_home_dir = '.' , out_log = None , err_log = None , umask = 0o022 ) :
 found = False
   for val in value :
 try :
          _default = translation ( settings . LANGUAGE_CODE )
 executor = MigrationExecutor ( connections [ DEFAULT_DB_ALIAS ] )
          for taglib in bits [ 1 : ] :
    else :
 field_value = self . cleaned_data . get ( field , None )
          year = int ( m . group ( 'year' ) )
           return super ( PythonSerializer , self ) . getvalue ( )
   base , tail_ext = os . path . splitext ( filename . lower ( ) )
          return
              activate ( self . timezone )
          self . _read_started = True
 def truncatechars_html ( value , arg ) :
 from django . template . base import TemplateDoesNotExist
                   result . append ( "." )
          _dec . __name__ = 'method_decorator(%s)' % decorator . __class__ . __name__
      pass
 opt_dict = { 'bold' : '1' , 'underscore' : '4' , 'blink' : '5' , 'reverse' : '7' , 'conceal' : '8' }
      def copy_plural_forms ( self , msgs , locale ) :
 return do_ntranslate ( singular , plural , number , 'ngettext' )
                  raise ValidationError (  self . error_messages [ 'invalid_pk_value' ] ,  code = 'invalid_pk_value' ,  params = { 'pk' : pk } ,  )
              if key in dict_ :
   def M ( self ) :
 attrs [ 'declared_fields' ] = OrderedDict ( current_fields )
  else :
          try :
                  continue
                  return self . __text_cast ( )
    @ register . filter ( is_safe = True )
   else :
    def has_leading_dir ( self , paths ) :
                   qs = f . value_from_object ( instance )
     headerlist = [ ]
          _load_serializers ( )
 import time as _time
                  pass
 from django . utils . xmlutils import SimplerXMLGenerator
          _default = translation ( settings . LANGUAGE_CODE )
  else :
              fk = fks_to_parent [ 0 ]
  json . dump ( self . get_dump_object ( obj ) , self . stream ,  cls = DjangoJSONEncoder , ** self . json_kwargs )
                      label = conditional_escape ( force_text ( bf . label ) )
 if pieces [ - 1 ] :
   def strptime ( self , value , format ) :
  args_check = staticmethod ( args_check )
 stamp = time . mktime ( tt )
 from django . utils . module_loading import import_string
 if self . require_all_fields :
 return self
 if item [ 'description' ] is not None :
   possibilities = self . reverse_dict . getlist ( lookup_view )
  for part in singular :
   def values ( self ) :
  from __future__ import unicode_literals
  inner , outer = digest ( ) , digest ( )
 model_fields = Model . _meta . get_all_field_names ( )
  return smart_text ( value )
 if literal_match :
              if number == 1 and self . allow_empty_first_page :
     class RequireDebugTrue ( logging . Filter ) :
   def handle_app_config ( self , app_config , ** options ) :
              from django . utils . translation import trans_real as trans
              self . dicts . append ( value )
    def all_locale_paths ( ) :
   return False
  return s
          output = [ ]
      def ugettext ( message ) :
  lexer = lexer_class ( template_string , origin )
              return loader . select_template ( template )
          return s
 def force_escape ( value ) :
 def regex ( self ) :
       def __init__ ( self , * args , ** kwargs ) :
              taglib_module = '%s.%s' % ( module , library_name )
   class BadSerializer ( object ) :
  elif domain == 'django' and ( file_ext == '.py' or file_ext in command . extensions ) :
              handler . addQuickElement ( "ttl" , item [ 'ttl' ] )
          self . filters = { }
               if ( isinstance ( data , Node ) and not data . negated  and ( data . connector == conn_type or len ( data ) == 1 ) ) :
 return '' . join ( force_text ( s ) for s in strings )
   ugettext_noop = gettext_noop
          bits = [ ]
              locales = all_locales
 return changeset
              raise TypeError ( "If the flags are set, regex must be a regular expression string." )
              warnings . warn ( "``use_natural_keys`` is deprecated; use ``use_natural_foreign_keys`` instead." ,  RemovedInDjango19Warning )
  unencoded_ampersands_re = re . compile ( r'&(?!(\w+|#\d+);)' )
     class LocalTimezone ( ReferenceLocalTimezone ) :
 app_label , migration_name = options [ 'app_label' ] , options [ 'migration_name' ]
  check_for_migrations ( app_config , connection )
 from django . utils . six . moves . urllib . parse import parse_qsl , urlencode , quote , urljoin , urlsplit
    def get_date_error_message ( self , date_check ) :
  else :
 if root :
 ctx = hashlib . md5 ( )
      def validate_integer ( value ) :
 try :
 return res
 raise NotImplementedError ( 'subclasses of Serializer must provide a start_object() method' )
 results = ( [ ] , [ ] )
 self . cdata_tag = None
  except ( TypeError , ValueError ) :
                  obj = mark_for_escaping ( new_obj )
  if value :
          raise TemplateSyntaxError ( "'%s' tag takes only one argument" % bits [ 0 ] )
          if 'id' in self . attrs :
     class ChoiceField ( Field ) :
 from django . forms . fields import *
 kwargs = { }
          values = [ parser . compile_filter ( arg ) for arg in args [ 1 : ] ]
   message = "%s\n\nRequest repr(): %s" % ( self . format ( record ) , request_repr )
  return ( 0 , k [ 1 ] )
 def dictitem ( s ) :
  self . _container = [ ]
 def as_data ( self ) :
  else :
  return '%s%s' % ( text , truncate )
  nodelist . append ( node )
 autoescape = autoescape and not isinstance ( value , SafeData )
  return copy . deepcopy ( self . _wrapped , memo )
 bits = iter ( smart_split ( self . contents ) )
 if i < 36 ** factor :
 if index_sql :
 self . __kw = kw
  self . path = ''
              params = { 'max' : self . max_length , 'length' : len ( file_name ) }
  import base64
  return '&' . join ( output )
                  result . append ( self . create_token ( self . template_string [ upto : start ] , ( upto , start ) , False ) )
   def __repr__ ( self ) :
 conditions_nodelists . append ( ( None , nodelist ) )
 super ( QueryDict , self ) . setlist ( key , list_ )
 if value :
 _upload_handlers = [ ]
 import sys
          module_path , class_name = dotted_path . rsplit ( '.' , 1 )
              if len ( x ) == 0 :
    def add_root_elements ( self , handler ) :
 for node_app , node_name in migration . branch :
  elif ns not in app_list :
    def get_language ( ) :
          raise ValueError ( "Not a string literal: %r" % s )
  urlize = allow_lazy ( urlize , six . text_type )
   return False
  def __init__ ( self , parent_instance , * args , ** kwargs ) :
 attrs = dict ( self . attrs , ** kwargs )
      renderer = RadioFieldRenderer
     FILE_INPUT_CONTRADICTION = object ( )
          cc = { }
 return retval
  from django . apps import apps
                   raise TemplateSyntaxError (  "'%s' received multiple values for keyword argument '%s'" %  ( name , param ) )
                      if model in created_models :
  setattr ( obj , self . name , result )
              self . _post , self . _files = QueryDict ( self . body , encoding = self . _encoding ) , MultiValueDict ( )
  return decorator ( * args , ** kwargs )
   def validate_name ( self , name , app_or_project ) :
 if os . path . exists ( old_app_dir ) :
 slots = orig_vars . get ( '__slots__' )
              cmp_fmt = None
                  raise
                      for f in dirs :
 nodelist_loop = parser . parse ( ( 'empty' , 'endfor' , ) )
    @ register . filter ( is_safe = True )
                              t = get_template ( file_name )
                  pass
   except ( ValueError , TypeError ) :
 t -= 1
 os . umask ( umask )
              os . unlink ( work_file )
 def id_for_label ( self ) :
  except KeyError :
                          pk_value = None
 raise NotImplementedError ( 'may be implemented in a future release' )
              data [ Model . _meta . pk . attname ] = Model . _meta . pk . to_python (  node . getAttribute ( 'pk' ) )
 param = elt [ 1 ]
   def l ( self ) :
              domains = ( 'djangojs' , 'django' )
              words [ i ] = mark_safe ( word )
   class Command ( BaseCommand ) :
     def make_middleware_decorator ( middleware_class ) :
              name = self . _pk_field . name
 value = template_localtime ( value , use_tz = context . use_tz )
 return { }
              return value
          if isinstance ( value , datetime . datetime ) :
   def urlencode ( self , safe = None ) :
      def __init__ ( self , display_name , loader , name , dirs ) :
     elif field in self . _errors . keys ( ) :
   call_command ( 'loaddata' , * fixture_labels , ** { 'verbosity' : verbosity } )
 from lib2to3 . pgen2 import token
  output = [ ]
   reverse_lazy = lazy ( reverse , str )
 if not digest :
                  try :
                  if safe_input :
 def __init__ ( self , setting , nodelist ) :
    def __setitem__ ( self , key , value ) :
 self . sysid = sysid
 representative = ESCAPE_MAPPINGS . get ( ch , ch )
    def __iter__ ( self ) :
  except InputStreamExhausted :
                          result = middleware . process_exception ( request , e )
       def __init__ ( self , obj ) :
  if fields is not None and f . name not in fields :
                      return ( fp . read ( ) . decode ( settings . FILE_CHARSET ) , filepath )
                  if self . _should_delete_form ( form ) :
 self . args = args
           renderer = kwargs . pop ( 'renderer' , None )
   def widget_attrs ( self , widget ) :
      format_key = ''
 obj_pk = field . rel . to . _default_manager . db_manager ( self . db ) . get_by_natural_key ( * field_value ) . pk
 tried = [ ]
          get = '<could not parse>'
          self . _wrapped = empty
 return chain ( * [  [ format_html ( '<link href="{0}" type="text/css" media="{1}" rel="stylesheet" />' , self . absolute_path ( path ) , medium )  for path in self . _css [ medium ] ]  for medium in media ] )
  return RegexURLResolver ( r'^/' , urlconf )
  return wrapped
  if value is not result :
      status_code = 404
    _mutable = True
 return RegexURLResolver ( r'^/' , [ ns_resolver ] )
 return mark_safe ( _helper ( value ) )
 return '\n' . join ( statements )
 if isinstance ( other , BaseContext ) :
    def dictvalue ( t ) :
              if text [ 0 ] in 'xX' :
          return cls . __new__ ( cls , * args )
  if isinstance ( f , ManyToManyField ) :
          super ( BaseInlineFormSet , self ) . add_fields ( form , index )
  elif value in ( False , 'False' , '0' ) :
  if fields and f . name not in fields :
              value = getattr ( opts , opt )
              HTMLParser . __init__ ( self , strict = False )
                  contents = one_percent_re . sub ( '%%' , t . contents )
          bad_serializer = BadSerializer ( exc )
 from django . utils import six
 i += 1
  import copy
   raise TypeError ( "Lazy object returned unexpected type." )
  return self . _regex_dict [ language_code ]
  while rest :
   _standard_context_processors = None
                                  filemsg = 'file %s, ' % origin
 MB = 1 << 20
  return ''
 def __init__ ( self , * args , ** kwargs ) :
 if autoescape :
   if isinstance ( boundary , six . text_type ) :
          return repr ( list ( self ) )
  import os
  except ImportError as e :
                  data [ field . name ] = field . to_python ( field_value )
              self . xml . characters ( field . value_to_string ( obj ) )
   def handle_charref ( self , name ) :
 lineno_comment_map = { }
   elif name is not None and compile_function is not None :
  else :
 result = [ ]
           if id_ :
  if field == NON_FIELD_ERRORS :
 import warnings
   if t . token_type == TOKEN_BLOCK :
          self . vals = [ ]
                  raise TemplateSyntaxError (  "'%s' received some positional argument(s) after some "  "keyword argument(s)" % name )
 handler = logging . StreamHandler ( )
    decode = curry ( _proxy_method , method = bytes . decode )
  targets = [ key for key in executor . loader . graph . leaf_nodes ( ) if key [ 0 ] == app_label ]
 os . dup2 ( se . fileno ( ) , sys . stderr . fileno ( ) )
          if not self . data :
 __bool__ = new_method_proxy ( bool )
  def __init__ ( self , var ) :
          count = since // seconds
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
  else :
 if version is None :
  while start < end :
 result . widget = copy . deepcopy ( self . widget , memo )
    def time_format ( value , format = None , use_l10n = None ) :
   return result
              return '%s_month' % id_
          self . field = field
  if max_length is not None :
   USE_INOTIFY = False
   @ property
  for i , field in enumerate ( self . fields ) :
 VARIABLE_TAG_START = '{{'
 return df . format ( format_string )
  except Exception as e :
 _assertRaisesRegex = "assertRaisesRegexp"
   if six . PY3 :
 def do_for ( parser , token ) :
          if not getattr ( f , 'editable' , False ) :
   def __next__ ( self ) :
                      arg_vals . append ( arg . resolve ( context ) )
 graph = loader . graph
  return _wrapper
                  cached_loaders . append ( find_template_loader ( loader ) )
       if sys . version_info [ : 2 ] >= ( 3 , 3 ) :
  bit = ' ' . join ( trans_bit )
  current_version = sys . version_info
               lead , middle , trail = '' , word , ''
 parser . add_argument ( 'directory' , nargs = '?' , help = 'Optional destination directory' )
          return s
 widget = NullBooleanSelect
  except ValidationError :
 if not path . exists ( target_dir ) :
              fp . write ( "%d\n" % os . getpid ( ) )
  datetime_re = re . compile (  r'(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})'  r'[T ](?P<hour>\d{1,2}):(?P<minute>\d{1,2})'  r'(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?'  r'(?P<tzinfo>Z|[+-]\d{2}(?::?\d{2})?)?$'  )
     class ImageField ( FileField ) :
 self . view_name = ':' . join ( self . namespaces + [ view_path ] )
 ignore = options . pop ( 'ignorenonexistent' , False )
  chunk = next ( self )
 values = _itervalues
              docs_version = 'dev'
     role , instructions = part . split ( '=' )
  if strings_only and is_protected_type ( s ) :
    class StreamingBuffer ( object ) :
  def __init__ ( self , query_string = None , mutable = False , encoding = None ) :
                  digit = x % len ( to_digits )
  for ext in pathext :
              self . attrs [ 'id' ] += "_%d" % self . index
    class LazyObject ( object ) :
                          latest_date = item_date
  return self . parent_instance
          return ( self . field . prepare_value ( obj ) , self . field . label_from_instance ( obj ) )
 for match in matches :
              id_ = 'id_%s' % name
 import datetime
  try :
  elif disable_existing :
          return False
                  ip ( )
   return out
                  setattr ( result , name , value )
 __delslice__ = complain
  to_py = super ( ModelMultipleChoiceField , self ) . to_python
           return s
  try :
  return False
 endpos = self . check_for_whole_start_tag ( i )
  sys . modules [ __name__ + ".moves.urllib_error" ] = sys . modules [ __name__ + ".moves.urllib.error" ] = Module_six_moves_urllib_error ( __name__ + ".moves.urllib.error" )
  PALETTES = {  NOCOLOR_PALETTE : {  'ERROR' : { } ,  'WARNING' : { } ,  'NOTICE' : { } ,  'SQL_FIELD' : { } ,  'SQL_COLTYPE' : { } ,  'SQL_KEYWORD' : { } ,  'SQL_TABLE' : { } ,  'HTTP_INFO' : { } ,  'HTTP_SUCCESS' : { } ,  'HTTP_REDIRECT' : { } ,  'HTTP_NOT_MODIFIED' : { } ,  'HTTP_BAD_REQUEST' : { } ,  'HTTP_NOT_FOUND' : { } ,  'HTTP_SERVER_ERROR' : { } ,  'MIGRATE_HEADING' : { } ,  'MIGRATE_LABEL' : { } ,  'MIGRATE_SUCCESS' : { } ,  'MIGRATE_FAILURE' : { } ,  } ,  DARK_PALETTE : {  'ERROR' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'WARNING' : { 'fg' : 'yellow' , 'opts' : ( 'bold' , ) } ,  'NOTICE' : { 'fg' : 'red' } ,  'SQL_FIELD' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'SQL_COLTYPE' : { 'fg' : 'green' } ,  'SQL_KEYWORD' : { 'fg' : 'yellow' } ,  'SQL_TABLE' : { 'opts' : ( 'bold' , ) } ,  'HTTP_INFO' : { 'opts' : ( 'bold' , ) } ,  'HTTP_SUCCESS' : { } ,  'HTTP_REDIRECT' : { 'fg' : 'green' } ,  'HTTP_NOT_MODIFIED' : { 'fg' : 'cyan' } ,  'HTTP_BAD_REQUEST' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'HTTP_NOT_FOUND' : { 'fg' : 'yellow' } ,  'HTTP_SERVER_ERROR' : { 'fg' : 'magenta' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_HEADING' : { 'fg' : 'cyan' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_LABEL' : { 'opts' : ( 'bold' , ) } ,  'MIGRATE_SUCCESS' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_FAILURE' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  } ,  LIGHT_PALETTE : {  'ERROR' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'WARNING' : { 'fg' : 'yellow' , 'opts' : ( 'bold' , ) } ,  'NOTICE' : { 'fg' : 'red' } ,  'SQL_FIELD' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'SQL_COLTYPE' : { 'fg' : 'green' } ,  'SQL_KEYWORD' : { 'fg' : 'blue' } ,  'SQL_TABLE' : { 'opts' : ( 'bold' , ) } ,  'HTTP_INFO' : { 'opts' : ( 'bold' , ) } ,  'HTTP_SUCCESS' : { } ,  'HTTP_REDIRECT' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'HTTP_NOT_MODIFIED' : { 'fg' : 'green' } ,  'HTTP_BAD_REQUEST' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'HTTP_NOT_FOUND' : { 'fg' : 'red' } ,  'HTTP_SERVER_ERROR' : { 'fg' : 'magenta' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_HEADING' : { 'fg' : 'cyan' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_LABEL' : { 'opts' : ( 'bold' , ) } ,  'MIGRATE_SUCCESS' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_FAILURE' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  }  }
 for pk in value :
  else :
 raise NotImplementedError ( 'subclasses of Serializer must provide an handle_fk_field() method' )
                  if name in lib . tags :
  return self . nodelist . render ( new_context )
              self . stdout . write ( self . style . MIGRATE_HEADING ( "Will squash the following migrations:" ) )
     def deactivate_all ( ) :
              return LazyStream ( BoundaryIter ( self . _stream , self . _boundary ) )
                      obj = None
 for path in self . locale_paths :
    def get_public_serializer_formats ( ) :
          for _ , nodelist in self . conditions_nodelists :
   seen_data . add ( data )
 if bits and not kwarg_format :
              return
  else :
 _func_code = "func_code"
  urlunquote = allow_lazy ( urlunquote , six . text_type )
 return ''
          warnings . warn ( "Custom SQL location '<app_label>/models/sql' is "  "deprecated, use '<app_label>/sql' instead." ,  RemovedInDjango19Warning )
    def ngettext ( singular , plural , number ) :
          return datetime . datetime . strptime ( force_str ( value ) , format ) . time ( )
 if param not in params and varkw is None :
   try :
              params = [ ]
  else :
          raise base . DeserializationError ( "Invalid model identifier: '%s'" % model_identifier )
 raise ValidationError ( self . error_messages [ 'max_length' ] , code = 'max_length' , params = params )
 return self . data . isoformat ( )
    class PageNotAnInteger ( InvalidPage ) :
      @ register . tag ( 'block' )
   attrs = [ ]
              self . match_re = re . compile ( self . match )
 return mark_safe ( re . sub ( '[-\s]+' , '-' , value ) )
     if best_doublecolon_len > 1 :
     def a ( self ) :
      @ register . filter ( "timesince" , is_safe = False )
  val . append ( iso_input )
                      if contains ( result [ - 1 ] , Group ) :
   elif len ( fks_to_parent ) == 0 :
   if ( middle . endswith ( closing )  and middle . count ( closing ) == middle . count ( opening ) + 1 ) :
   elif cls . _delegate_bytes :
 self . add_item_elements ( handler , item )
  super ( TextInput , self ) . __init__ ( attrs )
 self . prefix = prefix
          return self . dicts [ - 1 ] [ key ]
 found = getattr ( found , frag )
              op = OPERATORS [ token ]
 self . sysid = sysid
 units = len ( tupl [ 1 ] ) - tupl [ 2 ]
                      bit = next ( bits )
  connection = connections [ options [ 'database' ] ]
    else :
   def __deepcopy__ ( self , memo ) :
 if reverse :
     def is_safe_url ( url , host = None ) :
 if lang_code not in _supported and replacement in _supported :
                      raise CommandError ( '"%s" is not a valid IPv6 address.' % self . addr )
 from django . utils import dateformat , numberformat , datetime_safe
                  definition [ 'bg' ] = colors [ - 1 ]
                  return False
          cursor = connection . cursor ( )
 return func
 result = ugettext ( msg_with_ctxt )
 if language_code not in self . _app_dict :
    def _i18n_cache_key_suffix ( request , cache_key ) :
              param = None
from __future__ import absolute_import
                  result . parent = self
              self . _setup ( )
  try :
 kwargs = dict ( ( smart_text ( k , 'ascii' ) , v . resolve ( context ) )  for k , v in self . kwargs . items ( ) )
   if path is not None :
 if file_ :
              for f in chain . from_iterable ( l [ 1 ] for l in self . _files . lists ( ) ) :
 for refto , refs in references . items ( ) :
  if not self . is_required :
 for dirpath , dirnames , filenames in os . walk ( root , topdown = True , followlinks = self . symlinks ) :
  quote = s [ 0 ]
     class DateTimeBaseInput ( TextInput ) :
   can_import_settings = False
          for path in self . locale_paths :
 return self . forms [ self . initial_form_count ( ) : ]
 from django . utils import archive
   def utcoffset ( self , dt ) :
   return result == 0
  final_attrs = self . build_attrs ( attrs , name = name )
   self . _handler_class = None
  WORD_PATTERN = re . compile ( r'^\s*(\w+)\s*' )
     class ModelFormMetaclass ( DeclarativeFieldsMetaclass ) :
              self . first = parser . expression ( bp )
  self . _current [ field . name ] = [ m2m_value ( related )  for related in getattr ( obj , field . name ) . iterator ( ) ]
   def render ( self , context ) :
          value = ungettext ( "%(size)d byte" , "%(size)d bytes" , bytes ) % { 'size' : bytes }
              result = None
      class ChunkIter ( six . Iterator ) :
                      return self . tag ( name , func )
import sys
 token . source = self . origin , source
               if not isinstance ( node , TextNode ) :
 try :
 strfunc = Name ( "__str__" , prefix = unifunc . prefix )
              attrs . setdefault ( 'step' , 'any' )
  if f . name in cleaned_data :
 statement = [ ]
 self . base_fields [ MAX_NUM_FORM_COUNT ] = IntegerField ( required = False , widget = HiddenInput )
 try :
   if self . verbosity > 0 :
  else :
 @ stringfilter
  item = {  'title' : to_unicode ( title ) ,  'link' : iri_to_uri ( link ) ,  'description' : to_unicode ( description ) ,  'author_email' : to_unicode ( author_email ) ,  'author_name' : to_unicode ( author_name ) ,  'author_link' : iri_to_uri ( author_link ) ,  'pubdate' : pubdate ,  'updateddate' : updateddate ,  'comments' : to_unicode ( comments ) ,  'unique_id' : to_unicode ( unique_id ) ,  'unique_id_is_permalink' : unique_id_is_permalink ,  'enclosure' : enclosure ,  'categories' : categories or ( ) ,  'item_copyright' : to_unicode ( item_copyright ) ,  'ttl' : ttl ,  }
     class RadioFieldRenderer ( ChoiceFieldRenderer ) :
  unescape_entities = allow_lazy ( unescape_entities , six . text_type )
  self . _ordering . append ( ( i , form . cleaned_data [ ORDERING_FIELD_NAME ] ) )
 RFC1123_DATE = re . compile ( r'^\w{3}, %s %s %s %s GMT$' % ( __D , __M , __Y , __T ) )
   def __delitem__ ( self , key ) :
   for lineno , line in enumerate ( content . splitlines ( True ) ) :
  EscapeUnicode = EscapeText
          return Field . validate ( self , value )
   def render ( self , context ) :
  raise CommandError (  "errors happened while running xgettext on %s\n%s" %  ( self . file , errors ) )
              self . _post_render_callbacks . append ( callback )
               host = self . META [ 'SERVER_NAME' ]
  urlquote_plus = allow_lazy ( urlquote_plus , six . text_type )
 self . pubid = pubid
  level = 0
   date_re = re . compile (  r'(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})$'  )
   def save_new_objects ( self , commit = True ) :
 if value is None :
 if value == self . empty_value or value in self . empty_values :
  app_template_dirs . append ( template_dir )
 opts = model . _meta
  if self . match is None or self . match_re . search ( f ) :
          msg = 'Module "%s" does not define a "%s" attribute/class' % (  dotted_path , class_name )
 self . isolated_context = kwargs . pop ( 'isolated_context' , False )
  if option == 'with' :
   def __getstate__ ( self ) :
              continue
 from django . core . exceptions import SuspiciousMultipartForm
 output = localize ( output , use_l10n = context . use_l10n )
          m = int ( d ) - d
    return False
    def npgettext_lazy ( context , singular , plural , number = None ) :
  else :
  else :
  TestRunner = get_runner ( settings , options . get ( 'testrunner' ) )
          return "<IfEqualNode>"
              return SafeText ( t )
 for subwidget in self . field . widget . subwidgets ( self . html_name , self . value ( ) , attrs ) :
              return self . DSTDIFF
  return self . _queryset
                       value = value . decode ( charset )
    @ property
 if autoescape :
   def handle_field ( self , obj , field ) :
  else :
              m2m_convert = lambda n : field . rel . to . _meta . pk . to_python ( n . getAttribute ( 'pk' ) )
          super ( ChoiceField , self ) . __init__ ( required = required , widget = widget , label = label ,  initial = initial , help_text = help_text , * args , ** kwargs )
 from django . utils . html import escape
                  form_field = self . fields [ field ]
   def __repr__ ( self ) :
 if first :
   def render ( self , name , value , attrs = None , choices = ( ) ) :
   def render ( self , context ) :
  elif bytes < MB :
 orig_file = os . path . join ( self . dirpath , self . file )
   except :
 readline . set_completer ( rlcompleter . Completer ( imported_objects ) . complete )
   def writeString ( self , encoding ) :
  else :
 if not bits :
 from django . utils . datastructures import MultiValueDict , MergeDict
    assert token . contents == 'endif'
              extra_classes = extra_classes . split ( )
  return self . __cast ( ) == other
   def as_p ( self ) :
  streaming = False
              sites . append ( site )
    def get_unique_error_message ( self , unique_check ) :
  elif hasattr ( query , 'items' ) :
  split . append ( bit )
 value = str ( '%s%s%s' ) % ( value , self . sep , self . timestamp ( ) )
  if isinstance ( value , datetime . time ) :
              self . stdout . write ( "No conflicts detected to merge." )
                       value = value . encode ( charset )
  if i >= self . initial_form_count ( ) and not form . has_changed ( ) :
              questioner = InteractiveMigrationQuestioner ( )
          return self . __name
  except TypeError :
          return s
  return self . _reverse_dict [ language_code ]
 if self . domain == 'djangojs' :
  return bool ( value )
          fd = sys . stdin
 return '' . join ( rendered_widgets )
 re_escaped = re . compile ( r'\\(.)' )
          return ContextDict ( self , * args , ** kwargs )
  else :
 def upload_handlers ( self ) :
 return result
 sublist = '\n%s<ul>\n%s\n%s</ul>\n%s' % ( indent , sublist ,  indent , indent )
  filters = config . get ( 'filters' , None )
              error_msg = "Invalid template name in 'extends' tag: %r." % parent
     class NowNode ( Node ) :
    if six . PY3 :
   def handle ( self , ** options ) :
  elif ( attrvalue [ : 1 ] == '\'' == attrvalue [ - 1 : ] or  attrvalue [ : 1 ] == '"' == attrvalue [ - 1 : ] ) :
  def __init__ ( self , request , template , context = None , content_type = None ,  status = None , current_app = None ) :
 p = language . find ( '-' )
                          raw_data = field_stream . read ( )
      def __init__ ( self , target , expression , var_name ) :
      help = "Updates database schema. Manages both apps with migrations and those without."
 from django . utils . deprecation import RemovedInDjango19Warning
               self . __dict__ [ "_wrapped" ] = value
 parser . add_argument ( '--ignore' , '-i' , action = 'append' , dest = 'ignore_patterns' ,  default = [ ] , metavar = 'PATTERN' ,  help = 'Ignore files or directories matching this glob-style pattern. '  'Use multiple times to ignore more.' )
              if calendar . isleap ( self . data . year ) :
  if not self . is_bound :
     def get_language_from_request ( request , check_path = False ) :
 from django . utils . ipv6 import is_valid_ipv6_address
    _urllib_response_moved_attributes = [  MovedAttribute ( "addbase" , "urllib" , "urllib.response" ) ,  MovedAttribute ( "addclosehook" , "urllib" , "urllib.response" ) ,  MovedAttribute ( "addinfo" , "urllib" , "urllib.response" ) ,  MovedAttribute ( "addinfourl" , "urllib" , "urllib.response" ) ,  ]
 import shutil
 for ch in input_iter :
              self . cookies [ key ] [ 'secure' ] = True
              self [ key ] = result
 re_camel_case = re . compile ( r'(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))' )
 for attr in _urllib_robotparser_moved_attributes :
 from django . db . migrations . loader import AmbiguityError
              if not app_labels :
          obj = super ( MultiWidget , self ) . __deepcopy__ ( memo )
          pass
   save . alters_data = True
  self . _callback_strs . update ( pattern . _callback_strs )
  except ValidationError as e :
   def __enter__ ( self ) :
 return ( ( evens + odds ) % 10 == 0 )
 doy = self . year_days [ self . data . month ] + self . data . day
  if not _cached_filenames and settings . USE_I18N :
    return final_output
 for basedir in basedirs :
 def cut ( value , arg ) :
              if isinstance ( node , Node ) :
                  return self . nodelist_empty . render ( context )
                      self . stdout . write ( "processing locale %s\n" % locale )
          self . set_cookie ( key , max_age = 0 , path = path , domain = domain ,  expires = 'Thu, 01-Jan-1970 00:00:00 GMT' )
 self . to_field_name = to_field_name
          stream = StringIO ( stream_or_string )
 label = bf . label_tag ( label ) or ''
      allow_multiple_selected = False
 return do_ntranslate ( singular , plural , number , 'ungettext' )
  else :
    chunk = stream . read ( max_header_size )
 return True
     class QueryDict ( MultiValueDict ) :
                      data [ f . name ] = [ item . pk for item in qs ]
                          self . _close_files ( )
    class SimpleTemplateResponse ( HttpResponse ) :
 return result
          t = self . current_token
              stamp = time . mktime ( tt )
   if 'noreset' not in opts :
 self . _varlist = varlist
                  not_found . append ( e . args [ 0 ] )
    return saved_instances
   DEFAULT_LOCALE_ENCODING = get_system_encoding ( )
  if i >= len ( subject ) :
          sql_files . append ( os . path . join ( app_dir , "%s.%s.sql" % ( opts . model_name , backend_name ) ) )
               context [ self . var_name ] = [ ]
   _BROWSERS_DEPRECATED_LOCALES = {  'zh-cn' : 'zh-hans' ,  'zh-tw' : 'zh-hant' ,  }
 prec = abs ( p ) + units + 1
          if hasattr ( _urlconfs , "value" ) :
          if not var or ' ' in var :
 html [ 'year' ] = self . create_select ( name , self . year_field , value , year_val , choices , self . year_none_value )
                   open_tags . insert ( 0 , tagname )
 base56 = BaseConverter ( BASE56_ALPHABET )
 return [ mark_safe ( force_text ( obj ) ) for obj in value ]
 re_chars = re . compile ( r'<.*?>|(.)' , re . U | re . S )
                  self . add_filters ( logger , filters )
     def make_bytes ( self , value ) :
    def _resolve ( self ) :
 code = 'invalid'
          return s . get_data ( )
 i += 1
 from __future__ import unicode_literals
    except UnicodeError as e :
   @ property
   def __get__ ( self , obj , tp ) :
                  self . timezone = get_default_timezone ( )
  else :
 return timesince ( d , now , reversed = True )
          language_code = get_language ( )
 from django . core . management . base import BaseCommand , CommandError
          s . feed ( value )
    function_name = ( name or  getattr ( func , '_decorated_function' , func ) . __name__ )
 self . xml . endElement ( "natural" )
 from django . utils . xmlutils import SimplerXMLGenerator
 raise NotImplementedError ( 'subclasses of Deserializer must provide a __next__() method' )
 self . base = base
          return yes
 _format_cache = { }
           return ip_str
              value = token_kwargs ( remaining_bits , parser , support_legacy = False )
 def dummy ( * args , ** kwargs ) :
              return force_text ( value )
     return offset . days * 86400 + offset . seconds
          iteritems = _iteritems
                  sys . exit ( exit_code )
 def unordered_list ( value , autoescape = None ) :
   def __call__ ( self , f ) :
 return ( self . data . weekday ( ) + 1 ) % 7
     def humanize ( dirname ) :
 self . initial_extra = kwargs . pop ( 'initial' , None )
 trans_bit = [ bit ]
         if six . PY3 or os . name == 'nt' :
   header = chunk [ : header_end ]
  slugify = allow_lazy ( slugify , six . text_type )
 self . max_expr = max_expr
  except AttributeError :
 for k , v in self . choices :
  if not dklen :
 final_path = abspathu ( join ( base , * paths ) )
 trans_real . _translations = { }
            obj = form . save ( commit = False )
          if not support_legacy :
 if isinstance ( template_name , ( list , tuple ) ) :
           return [ ( '' , [ ] ) ]
   def _parse_date_fmt ( ) :
   def visible_fields ( self ) :
 if categories :
   def absolute_path ( self , path , prefix = None ) :
              self . schemes = schemes
      pass
 host_validation_re = re . compile ( r"^([a-z0-9.-]+|\[[a-f0-9]*:[a-f0-9:]+\])(:\d+)?$" )
                      resolved_args , resolved_kwargs = self . get_resolved_arguments ( context )
 super ( Command , self ) . handle ( ** options )
          fill_to = 7
 for template_name in template_name_list :
  elif len ( fks_to_parent ) == 0 :
              super ( SortedDict , self ) . __init__ ( )
           self . verbosity = options . get ( 'verbosity' )
  value = data . get ( name )
 from django . utils import six
 return out
      with open ( old_path , 'rb' ) as template_file :
      def curry ( _curried_func , * args , ** kwargs ) :
          attrs [ 'localized_fields' ] = localized_fields
  rawdata = self . rawdata
  return value
   def __str__ ( self ) :
                  self . stdout . write ( "  Installing custom SQL...\n" )
 if not parent :
  else :
          return 'https' if os . environ . get ( "HTTPS" ) == "on" else 'http'
  lang_code = regex_match . group ( 1 )
          tt = ( dt . year , dt . month , dt . day ,  dt . hour , dt . minute , dt . second ,  dt . weekday ( ) , 0 , 0 )
              _html_parser . HTMLParser . __init__ ( self )
              return r'\"'
              compare_to = None
 self . parsed = parsed
    def ext_convert ( self , value ) :
              if hasattr ( pattern , '_callback_str' ) :
 import os
              cls . __dispatch = { }
  def items ( self ) :
  time . sleep ( 1 )
                      logger = root . manager . loggerDict [ log ]
    def assertCountEqual ( self , * args , ** kwargs ) :
   def handle_app_config ( self , app_config , ** options ) :
  else :
          kwargs [ 'number' ] = number
   signals . request_finished . send ( sender = self . _handler_class )
 super ( JsonResponse , self ) . __init__ ( content = data , ** kwargs )
 for tok in rules :
                  return
              file = data . temporary_file_path ( )
                      raise TemplateSyntaxError ( "Could not find variable at "  "start of %s." % token )
   if func is None :
               raise MultiPartParserError ( "Invalid content length: %r" % content_length )
 from itertools import groupby , cycle as itertools_cycle
 return super ( TimestampSigner , self ) . sign ( value )
   def __getitem__ ( self , index ) :
                      try :
  def save_m2m ( ) :
          self . _validate_unique = True
 sys . stdin . close ( )
 if o . microsecond :
  if request . _post_parse_error :
     def make_naive ( value , timezone ) :
   def validate ( self , value ) :
                  if not isinstance ( node , ExtendsNode ) :
  text_args = [ force_text ( v ) for v in args ]
   return __wrapper__
    return current
    for dirname in dirs [ : ] :
  states = {   'div' : both_before + [  Tok ( "punct" , literals ( "/= /" ) , next = 'reg' ) ,  ] + both_after ,    'reg' : both_before + [  Tok ( "regex" ,  r"""                     /                       # opening slash                     # First character is..                     (   [^*\\/[]            # anything but * \ / or [                     |   \\.                 # or an escape sequence                     |   \[                  # or a class, which has                             (   [^\]\\]     #   anything but \ or ]                             |   \\.         #   or an escape sequence                             )*              #   many times                         \]                     )                     # Following characters are same, except for excluding a star                     (   [^\\/[]             # anything but \ / or [                     |   \\.                 # or an escape sequence                     |   \[                  # or a class, which has                             (   [^\]\\]     #   anything but \ or ]                             |   \\.         #   or an escape sequence                             )*              #   many times                         \]                     )*                      # many times                     /                       # closing slash                     [a-zA-Z0-9]*            # trailing flags                 """ , next = 'div' ) ,  ] + both_after ,  }
                   try :
  return attr
   regex = property ( _get_regex , _set_regex )
   for locale in locales :
  for index in range ( len ( hextets ) ) :
 if not self . port . isdigit ( ) :
  if self . number == self . paginator . num_pages :
          return self . msg % tuple ( force_text ( p , errors = 'replace' ) for p in self . params )
  self . feed = {  'title' : to_unicode ( title ) ,  'link' : iri_to_uri ( link ) ,  'description' : to_unicode ( description ) ,  'language' : to_unicode ( language ) ,  'author_email' : to_unicode ( author_email ) ,  'author_name' : to_unicode ( author_name ) ,  'author_link' : iri_to_uri ( author_link ) ,  'subtitle' : to_unicode ( subtitle ) ,  'categories' : categories or ( ) ,  'feed_url' : iri_to_uri ( feed_url ) ,  'feed_copyright' : to_unicode ( feed_copyright ) ,  'id' : feed_guid or link ,  'ttl' : ttl ,  }
      def handle_template ( self , template , subdir ) :
                              open ( init_path , "w" ) . close ( )
              fk = fks_to_parent [ 0 ]
              return None
 BASE36_ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz'
 new_args . append ( args [ : ] + i_args )
  template_dir = os . path . join ( app_config . path , 'templates' )
                  c = int ( text )
          tables = connection . introspection . table_names ( )
                      raise ValueError ( 'Unable to convert '  '%r at %r' % ( value , rest ) )
    from django . conf import settings
   return val , encoded
              return replacement
   return fixture_files
 default_error_messages = {  'invalid' : _ ( 'Enter a valid time.' )  }
 if constant_arg :
          self . _assert_mutable ( )
                      for node in self . nodelist_loop :
 if settings . TEMPLATE_DEBUG :
                  bad_app_labels . add ( app_label )
  try :
 return self . _coerce ( value )
  break
          self . exception = exception
          msg = "[%s] %s\n" % ( self . log_date_time_string ( ) , format % args )
  return TemplateTagNode ( tag )
                              invalid_var_format_string = '%s' in settings . TEMPLATE_STRING_IF_INVALID
  else :
    return False
 block_context . add_blocks ( blocks )
   def compile_filter_error ( self , token , e ) :
 self . exclude = getattr ( options , 'exclude' , None )
 from django . core import mail
 if not content_type . startswith ( 'multipart/' ) :
 args = args [ : - 1 ]
      opts = model . _meta
                from django . conf import urls
 if text == '' and len ( opts ) == 1 and opts [ 0 ] == 'reset' :
 break
  except IndexError :
  def __init__ ( self , attrs = None , date_format = None , time_format = None ) :
 base16 = BaseConverter ( BASE16_ALPHABET )
 if hasattr ( timezone , 'normalize' ) :
   def add_handlers ( self , logger , handlers ) :
 def url_patterns ( self ) :
  return BoundField ( self , field , name )
    def _is_shorthand_ip ( ip_str ) :
          key_prefix = settings . CACHE_MIDDLEWARE_KEY_PREFIX
              raise CommandError ( "Cannot find a migration matching '%s' from app '%s'. Is it in INSTALLED_APPS?" % (  migration_name , app_label ) )
          return json . loads ( data . decode ( 'latin-1' ) )
 kwarg_format = match and match . group ( 1 )
 from django . utils import six
     loader = MigrationLoader ( None , ignore_no_migrations = True )
   self . extend_nodelist ( nodelist , compiled_result , token )
 cursor = connection . cursor ( )
 return Signer ( b'django.http.cookies' + key , salt = salt )
                  pass
    if self . verbosity >= 2 and not fixture_files_in_dir :
 TOKEN_VAR = 1
   return False
 self . fields = getattr ( options , 'fields' , None )
  return value
 if use_func :
 roots = set ( dir ( cls ) ) & set ( convert )
  urlquote = allow_lazy ( urlquote , six . text_type )
 content = templatize ( src_data , orig_file [ 2 : ] )
   return WidthRatioNode ( parser . compile_filter ( this_value_expr ) ,  parser . compile_filter ( max_value_expr ) ,  parser . compile_filter ( max_width ) ,  asvar = asvar )
   if not m and p < 0 :
 del attrs [ attr ]
 call_command (  'runserver' ,  addrport = options [ 'addrport' ] ,  shutdown_message = shutdown_message ,  use_reloader = False ,  use_ipv6 = options [ 'use_ipv6' ] ,  use_threading = use_threading  )
 return mark_safe ( '\n' . join ( output ) )
 self . add_root_elements ( handler )
   dirs . extend ( list ( settings . FIXTURE_DIRS ) )
                      self . addr = self . addr [ 1 : - 1 ]
              try :
 __contains__ = new_method_proxy ( operator . contains )
   def as_json ( self , escape_html = False ) :
          return ''
 try :
          for name , field in self . fields . items ( ) :
          return get_supported_language_variant ( lang_code , strict = strict )
              priority = 1.0
  try :
                          temp_lib . filters [ name ] = lib . filters [ name ]
  else :
   def appendlist ( self , key , value ) :
  def model_installed ( model ) :
    if hasattr ( hmac , "compare_digest" ) :
  from __future__ import unicode_literals
 if app_label not in executor . loader . migrated_apps :
 @ wraps ( func )
 if sub_tried is not None :
      def __init__ ( self , format_string ) :
  else :
                  pass
                  return render_value_in_context ( value , context )
 import glob
          return list ( self . __iter__ ( ) ) [ idx ]
                  self . _post , self . _files = self . parse_file_upload ( self . META , data )
   def get_queryset ( self ) :
  elif _len ( cache ) >= maxsize :
    class EmailInput ( TextInput ) :
 import calendar
   def as_ul ( self ) :
                      blocks = dict ( ( n . name , n ) for n in  compiled_parent . nodelist . get_nodes_by_type ( BlockNode ) )
  result = getattr ( _default , translation_function ) ( eol_message )
  def __init__ ( self , name , regex , next = None ) :
 return data . get ( name , None )
      class Atom1Feed ( SyndicationFeed ) :
                  limit_choices_to = formfield . limit_choices_to
              six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc_info ( ) [ 2 ] )
              pass
  except VariableDoesNotExist :
 html_gunk_re = re . compile ( r'(?:<br clear="all">|<i><\/i>|<b><\/b>|<em><\/em>|<strong><\/strong>|<\/?smallcaps>|<\/?uppercase>)' , re . IGNORECASE )
 from django . db import connections , DEFAULT_DB_ALIAS
 for i in range ( len ( result ) ) :
                      try :
          return value
          self . _archive = zipfile . ZipFile ( file )
 from django . utils . module_loading import import_string
          return get_git_changeset . cache
                      if index is not None :
 if not ( self . data or self . files ) :
  def __init__ ( self , regex = None , message = None , code = None , inverse_match = None , flags = None ) :
   self . unclosed_block_tag ( [ endtag ] )
 secret = force_bytes ( secret )
 parser . add_argument ( 'migration_name' , nargs = '?' ,  help = 'Database state will be brought to the state after that migration.' )
          self . base_fields [ TOTAL_FORM_COUNT ] = IntegerField ( widget = HiddenInput )
  return value
 from django . utils . six . moves . urllib . parse import urlparse
 id_ = self . field . widget . attrs . get ( 'id' ) or self . auto_id
     class Enclosure ( object ) :
 return dot_re . sub ( char , src )
              context [ self . asvar ] = url
  return field_dict
          self . _archive . list ( )
    if callable ( current ) :
 raise NotImplementedError ( 'subclasses of BaseLoader must provide a load_template_source() method' )
   def _ipython ( self ) :
  except StopIteration :
 dictreprs = ', ' . join ( repr ( d ) for d in self . dicts )
   def __iter__ ( self ) :
  if field_value in self . empty_values :
 from django . utils import six
                   def wrapper ( * args , ** kwds ) :
 match = datetime_re . match ( value )
 self . indent ( 0 )
   def choice ( self , obj ) :
                  return "[Didn't have permission to include file]"
                                  raise
     class DictConfigurator ( BaseConfigurator ) :
              return [ super ( ModelMultipleChoiceField , self ) . prepare_value ( v ) for v in value ]
   def is_iterable ( x ) :
 value . configurator = self
   def render_node ( self , node , context ) :
 nodelist = parser . parse ( ( 'elif' , 'else' , 'endif' ) )
 self . keyOrder . remove ( key )
 data = serializer ( ) . dumps ( obj )
  else :
 for i , handler in enumerate ( self . _upload_handlers ) :
   def handle_fk_field ( self , obj , field ) :
 if not squash :
 from django . db import DEFAULT_DB_ALIAS
  data = self . _prepare_data ( data )
              data = self . _archive . read ( name )
      tagfind = re . compile ( '([a-zA-Z][-.a-zA-Z0-9:_]*)(?:\s|/(?!>))*' )
      def print_ ( * args , ** kwargs ) :
  bits = token . contents . split ( )
 if not template_name_list :
   intrans = True
   if not now :
          warnings . warn ( "IPAddressField has been deprecated. Use GenericIPAddressField instead." ,  RemovedInDjango19Warning )
              params , varargs , varkw , defaults = getargspec ( func )
   if self . verbosity >= 2 :
  super ( Command , self ) . handle ( 'project' , project_name , target , ** options )
 self . _boundary = boundary
 self . event_stream = pulldom . parse ( self . stream , self . _make_parser ( ) )
  except KeyError :
 try :
  options [ option ] = value
                raise RuntimeError (  "The method to extend accepted command-line arguments by the "  "test management command has changed in Django 1.8. Please "  "create an add_arguments class method to achieve this." )
   loopvars = re . split ( r' *, *' , ' ' . join ( bits [ 1 : in_index ] ) )
          filepath = self . filepath . resolve ( context )
          cursor = None
 clear_checkbox_label = ugettext_lazy ( 'Clear' )
      """     Adds (or updates) the "Vary" header in the given HttpResponse object.     newheaders is a list of header names that should be in "Vary". Existing     headers in "Vary" aren't removed.     """
          ch , escaped = next ( pattern_iter )
  tagname = tagname . lower ( )
 if refto in known_models :
          return ''
  middle = '<a href="%s"%s>%s</a>' % ( url , nofollow_attr , trimmed )
              raise ValueError (  "make_aware expects a naive datetime, got %s" % value )
                      construct_instance_exclude . append ( name )
    @ register . tag
 for key , value in six . iterlists ( self ) :
 self . _post_clean ( )
 last [ NEXT ] = root [ PREV ] = cache [ key ] = link
                      os . makedirs ( self . default_locale_path )
 if end_index is None and s_len > truncate_len :
 self . verbosity = options [ 'verbosity' ]
 super ( IPAddressField , self ) . __init__ ( * args , ** kwargs )
   return data
          if isinstance ( self . var , Variable ) :
     @ property
   def conditional_escape ( text ) :
              if shutdown_message :
    def fields_for_model ( model , fields = None , exclude = None , widgets = None ,  formfield_callback = None , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ) :
 import os
     class RegroupNode ( Node ) :
 try :
 return value . upper ( )
                  try :
   def flush ( self ) :
   def create_variable_node ( self , contents ) :
 key = args
  connection = connections [ options [ 'database' ] ]
 if date is not None :
 if not isinstance ( fk , ForeignKey ) or ( fk . rel . to != parent_model and  fk . rel . to not in parent_model . _meta . get_parent_list ( ) ) :
    class MultiWidget ( Widget ) :
   @ property
 for dict_ in self . dicts :
 try :
  cleaned_data = form . cleaned_data
 if not regex_match :
 patch_response_headers ( response , cache_timeout = - 1 )
 collect . extend ( settings . TEMPLATE_CONTEXT_PROCESSORS )
      if not _serializers :
   try :
          return ugettext ( "Please correct the duplicate data for %(field_name)s "  "which must be unique for the %(lookup)s in %(date_field)s." ) % {  'field_name' : date_check [ 2 ] ,  'date_field' : date_check [ 3 ] ,  'lookup' : six . text_type ( date_check [ 1 ] ) ,  }
              self . xml . addQuickElement ( "None" )
                          if os . path . abspath ( dirpath ) . startswith ( os . path . dirname ( path ) ) :
 counters = [ 0 ] * len ( handlers )
 pk = to_python ( pk )
  except KeyError :
 d = ''
   _cached_modules = _cached_modules . union ( new_modules )
 text_value = force_text ( value )
 for h in handlers :
 shell . mainloop ( )
 from io import BytesIO
          if app_config . models_module is None :
              nodelist . contains_nontext = True
 while i < l :
          cache_timeout = 0
 handler . startElement ( "channel" , self . root_attributes ( ) )
  return media
                      context [ self . loopvars [ 0 ] ] = item
          path = force_text ( path )
   class DebugLexer ( Lexer ) :
  rv = logging . _levelNames [ level ]
    if url :
  elif options [ "socket" ] and not options [ "host" ] and not options [ "port" ] :
          def activate ( timezone ) :
                          number_value = rhs [ number ]
 for attr in ( 'expects_localtime' , 'is_safe' , 'needs_autoescape' ) :
 return FormSet
    def catalog ( ) :
    class MovedAttribute ( _LazyDescr ) :
      if dt . year >= 1900 :
              if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
 field_name = disposition [ 'name' ] . strip ( )
  return render_value_in_context ( value , context )
      class BoundaryIter ( six . Iterator ) :
   except IOError :
 background = dict ( ( color_names [ x ] , '4%s' % x ) for x in range ( 8 ) )
 result = self . configurator . convert ( value )
 import hashlib
  __import__ ( name )
          current_timezone = timezone . get_current_timezone ( )
     @ register . filter ( is_safe = True , needs_autoescape = True )
 if self . _leftover :
  if help_texts is not None :
          return self . text
          return self . scheme == 'https'
 get_supported_language_variant . cache_clear ( )
                          result . pop ( )
 if fields :
           return ip_str
          offset = date . tzinfo . utcoffset ( date )
   def render ( self , context ) :
  exclude . append ( name )
 using_sysrandom = False
              raise TypeError ( "Non-integer base36 conversion input." )
 condition = TemplateIfParser ( parser , bits ) . parse ( )
      year_days = [ None , 0 , 31 , 59 , 90 , 120 , 151 , 181 , 212 , 243 , 273 , 304 , 334 ]
 if message_context [ 0 ] == '"' :
   def __bool__ ( self ) :
 if len ( self . namelist ( ) ) != 1 :
 from django . utils . http import cookie_date
   _format_cache [ cache_key ] = None
 return Variable ( path ) . resolve ( context )
          return decorator
   self . streaming_content = streaming_content
                      if hasattr ( middleware , 'process_exception' ) :
 while 1 :
          return len ( self . content )
   def _add_installed_apps_translations ( self ) :
                  values = reversed ( values )
 merge_migrations . append ( migration )
          new_class = ( super ( MediaDefiningClass , mcs )  . __new__ ( mcs , name , bases , attrs ) )
   try :
 from django . utils . deprecation import RemovedInDjango19Warning
 self . allow_files , self . allow_folders = allow_files , allow_folders
          return self . as_table ( )
 if text [ 0 ] == '#' :
                       fixture_files_in_dir . append ( ( candidate , fixture_dir , fixture_name ) )
 dirname = os . path . dirname ( filename )
 space = unicode ( " " )
 self . invoked_for_django = True
  except ImportError :
          final_attrs = dict ( self . attrs , type = self . input_type , name = self . name , value = self . choice_value )
  else :
              attr_list = termios . tcgetattr ( fd )
              self . _ordering = [ ]
          return self . _headers [ header . lower ( ) ] [ 1 ]
                      pass
     csrf_token = context . get ( 'csrf_token' , None )
      pass
  if number < 1 :
   def create_var ( self , value ) :
  elif not self . required and not value :
 self . command_stack = [ ]
 nodelist = parser . parse ( ( 'endverbatim' , ) )
  else :
          self . tagtype = tagtype
   def list ( self , * args , ** kwargs ) :
  except StandardError as e :
  else :
      def render ( self , context ) :
   def as_tuple ( self , value ) :
 sys . exit ( 1 )
                              self . stdout . write ( "    Processing %s.%s model\n" % ( app_name , model . _meta . object_name ) )
                          len_item = 1
  load_template_source . is_usable = True
 if token_string . find ( TRANSLATOR_COMMENT_MARK ) :
  def get_template_sources ( self , template_name , template_dirs = None ) :
                  e . reason += ', HTTP response headers must be in %s format' % charset
          return os . path . join ( self . dirpath , self . file )
              yield self [ key ]
  return mark_safe ( value . replace ( '\n' , '<br />' ) )
  def __init__ ( self , content_type = None , status = None , reason = None ) :
                      call_command ( "createsuperuser" , interactive = True , database = options [ 'database' ] )
   def render ( self ) :
   def get_handler ( self , * args , ** options ) :
  def __init__ ( self , nodelist , parent_name , template_dirs = None ) :
 self . _catalog = translation . _catalog . copy ( )
 result ^= _bin_to_long ( u )
          return self . has_key ( key )
  return result
  _BASE64_DECODE_ERROR = TypeError if six . PY2 else binascii . Error
 super ( Context , self ) . __init__ ( dict_ )
   if ( domain_part not in self . domain_whitelist and  not self . validate_domain_part ( domain_part ) ) :
 self . toks [ groupid ] = tok
          return "<WithNode>"
   if tried :
 return self . field . widget . is_hidden
              del self . _post
   from django . template . base import ( Context , FilterExpression , Lexer , Node ,  NodeList , Parser , RequestContext , Origin , StringOrigin , Template ,  TextNode , Token , TokenParser , Variable , VariableNode , constant_string ,  filter_raw_string )
from __future__ import absolute_import
 if fg in color_names :
     @ contextlib . contextmanager
          pass
                  if app_name not in loader . migrated_apps :
                  if character != '.' :
 import sys
                   def dec ( func ) :
          return None
                      args . append ( ( True , Variable ( var_arg ) ) )
                      import operator
              retval = self . tokens [ self . pos ]
                      self . stdout . write ( self . style . MIGRATE_LABEL ( "  Branch %s" % migration . name ) )
 exctype , value = exc_info [ : 2 ]
  elif not isinstance ( sep , str ) :
          if os . path . exists ( sql_file ) :
 return tpl . format ( self . sysid , self . pubid )
                  return dict_ [ key ]
                  block_content = token_string [ 2 : - 2 ] . strip ( )
 created_models . add ( model )
              default_attrs . update ( attrs )
                   query_string = query_string . decode ( )
                  return template . render ( context )
 for filepath in self . get_template_sources ( template_name , template_dirs ) :
              new_class . media = media_property ( new_class )
                  loaders . append ( loader )
  if exclude and f . name in exclude :
              parsed = True
 model_identifier = node . getAttribute ( attr )
                              result . append ( Group ( ( ( "%%(%s)s" % param ) , None ) ) )
 return self . __copy__ ( )
 boundary = self . _find_boundary ( chunk , len ( chunk ) < self . _rollback )
 self . _closable_objects = [ ]
   except ( ImportError , AttributeError ) as e :
   @ content . setter
       def __init__ ( self , name ) :
 self . dry_run = options . get ( 'dry_run' , False )
                  kwargs [ "initial" ] = self . parent_instance . pk
   def translate_token ( self , token ) :
           value = timezone . normalize ( value )
  from django . core . management . base import AppCommand
  else :
 ratio = ( value / max_value ) * max_width
  if item [ 'pubdate' ] is not None :
 if base . lower ( ) . endswith ( '.tar' ) :
  attrs . append ( ( attrname . lower ( ) , attrvalue ) )
 run_syncdb = True
              from django . utils . translation import trans_null as trans
              label_for = ''
   def tag ( self ) :
 self . parent_name = parent_name
 import cgi
 remaining -= len ( emitting )
   self . can_read . acquire ( )
          if not self . render_value :
    with context_instance . push ( dictionary ) :
     wm = pyinotify . WatchManager ( )
              result . setlist ( key , value )
   def handle ( self , * args , ** options ) :
          if message is not None :
 def __getitem__ ( self , key ) :
    else :
          if not _cookie_encodes_correctly :
  if namespaces :
      if PY3 :
                      form . save_m2m ( )
  file_name = force_text ( file_name , encoding , errors = 'replace' )
  except ValidationError as e :
          parser . add_argument ( 'args' , nargs = argparse . REMAINDER ,  help = 'Various KEY=val options.' )
   def _existing_object ( self , pk ) :
 value = force_text ( value )
                if data_list [ 0 ] in self . empty_values :
              for path in data :
 __all__ = [ "runfastcgi" ]
   domain , port = split_domain_port ( host )
 inner = NonCapture ( result [ start : ] )
      pass
 SINGLE_BRACE_START = '{'
  block_context = context . render_context [ BLOCK_CONTEXT_KEY ]
     class lazy_property ( property ) :
    __class__ = property ( new_method_proxy ( operator . attrgetter ( "__class__" ) ) )
          return language [ : p ] . lower ( ) + '_' + language [ p + 1 : ] . upper ( )
 id_ = self . attrs . get ( 'id' , None )
              class ConvertingDict ( dict ) :
                  return kwargs
   def render ( self ) :
  new_ip += hextet [ 1 ] . split ( ':' )
              if isinstance ( other , Promise ) :
   def render ( self , context ) :
 warnings . warn ( "Your TEMPLATE_LOADERS setting includes %r, but your Python installation doesn't support that type of template loading. Consider removing that line from TEMPLATE_LOADERS." % loader )
 FILTER_ARGUMENT_SEPARATOR = ':'
  except KeyError as key :
          return self . __class__ ( [  ( k , v [ : ] )  for k , v in self . lists ( )  ] )
 return data
 self . setFeature ( handler . feature_external_pes , False )
 return _generate_cache_key ( request , request . method , headerlist , key_prefix )
              res = ''
     class OrderedSet ( object ) :
   elif t . contents == 'comment' :
   def validate ( self , value ) :
 return mark_safe ( conditional_escape ( sep ) . join (  format_html ( format_string , * tuple ( args ) )  for args in args_generator ) )
                          for handler in handlers :
  if self . field . required and hasattr ( self . form , 'required_css_class' ) :
 self . func = func
              def __len__ ( self ) :
 statements = [ ]
          return LoaderOrigin ( display_name , loader , name , dirs )
              p = i
   for o in opts :
   def __repr__ ( self ) :
           return avoid_wrapping ( ugettext ( '0 minutes' ) )
 changes = autodetector . arrange_for_graph ( changes , loader . graph )
                  return expanded_template
 if as_ != 'as' :
              defaults [ 'data' ] = self . data
  for d in object_list :
  widget = self . field . widget
 if len ( bits ) < 2 :
   def reset_format_cache ( ) :
 def __init__ ( self , url , length , mime_type ) :
 requires_system_checks = False
                  logger . removeHandler ( h )
  headerlist = cache . get ( cache_key , None )
   @ deconstructible
 self . run_validators ( out )
   def __exit__ ( self , exc_type , exc_value , traceback ) :
              return self . blocks [ name ] [ - 1 ]
      def _get_validation_exclusions ( self ) :
              return context
    def __call__ ( self , value ) :
 from django . core . exceptions import AppRegistryNotReady
 return value . rjust ( int ( arg ) )
                  final_attrs = dict ( final_attrs , id = '%s_%s' % ( id_ , i ) )
   def z ( self ) :
   format_locations = [ ]
               msg = self . style . HTTP_SUCCESS ( msg )
                  kwargs [ "initial" ] = getattr ( self . parent_instance , self . to_field )
      pass
  return datetime ( * kw )
          super ( ContextDict , self ) . __init__ ( * args , ** kwargs )
  if self . field . cache_choices :
   def start_object ( self , obj ) :
  for state , rules in states . items ( ) :
  def update_watch ( sender = None , ** kwargs ) :
                  if fake :
              return lookup_view
 try :
          super ( HttpResponse , self ) . __init__ ( * args , ** kwargs )
   def has_header ( self , header ) :
  except NameError :
 object_data = model_to_dict ( instance , opts . fields , opts . exclude )
              data = bool ( data )
 self . pointer = i
 handler . addQuickElement ( "link" , item [ 'link' ] )
 integer_types = int ,
  else :
 try :
  else :
 self . empty_permitted = empty_permitted
          value = dict . __getitem__ ( self , key )
              try :
          node . source = token . source
 msgs , errors , status = popen_wrapper ( args )
              value = True
  from django . apps import apps
  def __init__ ( self , streaming_content = ( ) , * args , ** kwargs ) :
  else :
              return
                  return value . pk
    chars = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'
 if message :
 from django . utils . encoding import python_2_unicode_compatible
   def end_serialization ( self ) :
   else :
 context . update ( unpacked_vars )
 def __init__ ( self , request , dict_ = None , processors = None , current_app = None ,  use_l10n = None , use_tz = None ) :
 from django . utils import six
  template_with_initial = '%(initial_text)s: %(initial)s %(clear_template)s<br />%(input_text)s: %(input)s'
 pending_references = { }
                          data = field_stream . read ( )
 def __new__ ( cls , * args , ** kwargs ) :
 class RegexValidator ( object ) :
   def next_token ( self ) :
    def sql_flush ( style , connection , only_django = False , reset_sequences = True , allow_cascade = False ) :
 self . next = next
   if self . verbosity > 0 or self . interactive :
              context [ self . variable_name ] = value
 s = MLStripper ( )
   @ classmethod
 base36 . append ( digits [ i // j ] )
  else :
  for item in self . items :
  else :
    @ lru_cache . lru_cache ( maxsize = None )
  from django . utils import six
 from django . utils import six
                  if not token . contents :
 if self not in state_frame :
 try :
 result = str ( int ( round ( ratio ) ) )
     return Operator
 return ''
     return new_class
     header_end = chunk . find ( b'\r\n\r\n' )
   def __bool__ ( self ) :
 token = parser . next_token ( )
              return SafeBytes ( data )
                      m = plural_forms_re . search ( fp . read ( ) )
              warnings . warn ( "cache_choices has been deprecated and will be "  "removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2 )
  if not plan :
 return NowNode ( format_string )
  if kwargs is None :
              dict . __setitem__ ( result , copy . deepcopy ( key , memo ) ,  copy . deepcopy ( value , memo ) )
  return ''
 if self . compare ( cleaned , self . limit_value ) :
                  self . waiting_writers += 1
      pass
   def to_python ( self , data ) :
          return self . _encoding
   def __str__ ( self ) :
  time . sleep ( 1 )
  else :
  if self . localize :
                  next_item = list_ [ i + 1 ]
  return '%s...' % x [ : max ( 0 , limit - 3 ) ]
  return self . template_cache [ key ]
 self . old_language = get_language ( )
  return result
 self . kwargs = kwargs
 return f ( * args , ** kwargs )
 self . length , self . mime_type = length , mime_type
  new_value = [ ]
 self . labels = getattr ( options , 'labels' , None )
  return f
          supported = False
  return self . nodelist_false . render ( context )
              return six . unichr ( html_entities . name2codepoint [ text ] )
              return
                  target_dir = path . join ( top_dir , relative_dir )
 out = StringIO ( '' )
                   best_doublecolon_len = doublecolon_len
 config [ '()' ] = factory
  f = s [ : end ]
 if filter_name in ( 'escape' , 'safe' ) :
  self . mod = new_mod
 if len ( bits ) != 2 :
   def full_clean ( self ) :
 parser . add_argument ( '--symlinks' , '-s' , action = 'store_true' , dest = 'symlinks' ,  default = False , help = 'Follows symlinks to directories when examining '  'source code and templates for translation strings.' )
 self . _start_relational_field ( field )
  else :
              name , ( value , params ) = _parse_header ( line )
  elif self . use_ipv6 and not _fqdn :
 if ch :
  warnings . warn (  "The django.forms.util module has been renamed. "  "Use django.forms.utils instead." , RemovedInDjango19Warning , stacklevel = 2 )
 from django . forms . formsets import *
                  if value == k or text_value == force_text ( k ) :
   if sublist_item :
 result . key = key
                      if getattr ( current , 'do_not_call_in_templates' , False ) :
              exclude = form . _get_validation_exclusions ( )
  shown . add ( plan_node )
 if location is None :
              if lookup_view in self . _callback_strs :
 from django . utils . functional import lazy
   def end_index ( self ) :
  except NotImplementedError :
              return op ( )
   def is_checked ( self ) :
   def tag ( self ) :
  warn_msg = ( "The translator-targeted comment '%s' "  "(%sline %d) was ignored, because it wasn't the last item "  "on the line." ) % ( c , filemsg , comment_lineno_cache )
  if prefix is None :
 context . autoescape = old_setting
 self . name = name
                  sublist_item = title
                  obj = template_localtime ( obj , context . use_tz )
          HTMLParser = _html_parser . HTMLParser
      setattr ( Module_six_moves_urllib_robotparser , attr . name , attr )
   def N ( self ) :
   class SimpleLazyObject ( LazyObject ) :
    def xreadlines ( self ) :
                          logger . disabled = True
  def __init__ ( self , loopvars , sequence , is_reversed , nodelist_loop , nodelist_empty = None ) :
   try :
 return form
              if key in d :
 k = match . end ( )
          value = tuple . __getitem__ ( self , key )
 return re_camel_case . sub ( r' \1' , value ) . strip ( ) . lower ( )
   if check_path :
              handler . addQuickElement ( "author" , item [ "author_email" ] )
     @ python_2_unicode_compatible
              response . add_post_render_callback ( _set_response_etag )
          fks_to_parent = [ f for f in opts . fields if f . name == fk_name ]
    _PROTECTED_TYPES = six . integer_types + ( type ( None ) , float , Decimal ,  datetime . datetime , datetime . date , datetime . time )
              try :
  except AttributeError :
 if len ( bits ) < 4 :
              def value_encode ( self , val ) :
  KB = 1 << 10
 from django . core . mail import get_connection
              value = ConvertingDict ( value )
                                  handler = logging . _handlers [ name ]
  connection = connections [ options . get ( 'database' ) ]
 if len ( bits ) != 2 :
                  m2m_value = lambda value : smart_text ( value . _get_pk_val ( ) , strings_only = True )
              pass
          fill_to = 8
      def sync_apps ( self , connection , app_labels ) :
 all_locales = map ( os . path . basename , locale_dirs )
 statements = connection . ops . sequence_reset_sql ( self . style , models )
 for w in self . widgets :
 def __init__ ( self , widgets , attrs = None ) :
   except ValidationError as e :
 self . merge = options . get ( 'merge' , False )
 self . blocks = dict ( ( n . name , n ) for n in nodelist . get_nodes_by_type ( BlockNode ) )
      class TokenParser ( object ) :
          return "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_name=%s, namespaces=%s)" % (  self . _func_path , self . args , self . kwargs , self . url_name , self . app_name , self . namespaces )
          tag , this_value_expr , max_value_expr , max_width , as_ , asvar = bits
    self . _reverse_dict [ language_code ] = lookups
   def handle ( self , * args , ** options ) :
      ensure_echo_on ( )
  else :
    return (  format_html_join ( '' , ' {0}="{1}"' , sorted ( attrs . items ( ) ) ) +  format_html_join ( '' , ' {0}' , sorted ( boolean_attrs ) )  )
 import locale
 from django . template import Template , Context
 for statement in sql_statements :
  if isinstance ( s , bytes ) or ( isinstance ( s , Promise ) and s . _delegate_bytes ) :
  class Module_six_moves_urllib_response ( _LazyModule ) :
 super ( URLValidator , self ) . __call__ ( url )
          m = regex . match ( date )
   def parse_date ( value ) :
  all_files . append ( TranslatableFile ( dirpath , filename , locale_dir ) )
              raise ContentNotRenderedError ( 'The response content must be '  'rendered before it can be accessed.' )
    def strftime ( dt , fmt ) :
  if labels and f . name in labels :
  if config [ 'version' ] != 1 :
     class IncludeNode ( Node ) :
 return super ( QueryDict , self ) . setdefault ( key , default )
                   raise ImportError
  def __init__ ( self , include_html = False , email_backend = None ) :
   else :
   def get_default_timezone ( ) :
  except KeyError :
 prefix_length = len ( template_dir ) + 1
 if kwds :
              if self . _delegate_bytes and six . PY2 :
 import tempfile
    if six . PY3 :
              msg = self . style . HTTP_NOT_MODIFIED ( msg )
     def get_default_timezone_name ( ) :
                    if var . find ( VARIABLE_ATTRIBUTE_SEPARATOR + '_' ) > - 1 or var [ 0 ] == '_' :
     def media_property ( cls ) :
   DOTS = [ '&middot;' , '*' , '\u2022' , '&#149;' , '&bull;' , '&#8226;' ]
 class ChoiceFieldRenderer ( object ) :
 return s . getvalue ( )
          choices = ( ( '1' , ugettext_lazy ( 'Unknown' ) ) ,  ( '2' , ugettext_lazy ( 'Yes' ) ) ,  ( '3' , ugettext_lazy ( 'No' ) ) )
 msgattrib_options = [ '--no-obsolete' ]
              return self . stream . getvalue ( )
          view = viewname
   to_delete = set ( )
 if ch not in ( '<' , '=' ) :
  import decimal
          int ( value )
          _serializers [ format ] = module
 from django . core . management . base import BaseCommand
 return attrs
   except ImportError :
  strip_entities = allow_lazy ( strip_entities , six . text_type )
  self . addr , _ipv4 , _ipv6 , _fqdn , self . port = m . groups ( )
                  if error . code == code :
                  total_forms = initial_forms
  self . mod = new
     class TimeField ( BaseTemporalField ) :
              try :
    def get_complete_version ( version = None ) :
              try :
     ip_str = _explode_shorthand_ip_string ( ip_str )
 self . add_root_elements ( handler )
                  regex = self . _regex
          raise NotImplementedError ( 'subclasses of BaseArchive must provide a list() method' )
                          response = middleware . process_template_response ( request , response )
     if opts . managed :
 if old_attr is None :
          return pformat ( value )
   return set ( x for x in ext_list if x . strip ( '.' ) not in ignored )
    def __call__ ( self , value ) :
          LocaleRegexProvider . __init__ ( self , regex )
 parser = self . _parser
 try :
                      continue
   return False
   def utcoffset ( self , dt ) :
                      attrs [ 'class' ] = self . form . required_css_class
 tables = connection . introspection . table_names ( )
       check_for_migrations ( app_config , connection )
 from django . utils import six
  return True
                  t = self . waiting_readers
    def reset_translations ( ) :
   def to_language ( self ) :
 from django . http . multipartparser import MultiPartParser , MultiPartParserError
 missing_args_message = "You must provide a project name."
              processors = tuple ( processors )
  else :
 super ( GenericIPAddressField , self ) . __init__ ( * args , ** kwargs )
          meta = '<could not parse>'
 if len ( bits ) < 2 or bits [ - 2 ] != 'as' :
   stream = LazyStream ( ChunkIter ( self . _input_data , self . _chunk_size ) )
   def reload ( self ) :
          attrs [ 'widgets' ] = widgets
    def gettext ( message ) :
   def _new_gnu_trans ( self , localedir , use_null_fallback = True ) :
   return lib
              if not form . has_changed ( ) :
  s_len += 1
  return EscapeBytes ( bytes ( s ) )
     @ classmethod
          super ( Command , self ) . add_arguments ( parser )
  headerlist . sort ( )
 _func_globals = "func_globals"
              value = ConvertingList ( value )
 if is_ignored ( file_path , self . ignore_patterns ) :
   self . widget = widget
  self . run ( ** options )
                      continue
                      expires = timezone . make_naive ( expires , timezone . utc )
              if ( self . validate_max and  self . total_form_count ( ) - len ( self . deleted_forms ) > self . max_num ) or self . management_form . cleaned_data [ TOTAL_FORM_COUNT ] > self . absolute_max :
          self . object_list = object_list
              ch2 , escaped = next ( input_iter )
  _serializers = { }
              for error in self . errors . as_data ( ) [ field ] :
 self . _files = MultiValueDict ( )
          self . changed_objects = [ ]
          self . value = value
  self . help_text = field . help_text or ''
  else :
      _version = "0.91"
   try :
      child_nodelists = ( 'nodelist_loop' , 'nodelist_empty' )
 var = var [ 2 : - 1 ]
 from django . conf import settings
 import tempfile
 jan1_weekday = self . data . replace ( month = 1 , day = 1 ) . weekday ( ) + 1
   from __future__ import absolute_import
  from django . utils . encoding import force_str
                      exclude . append ( f . name )
  del cache [ oldkey ]
          return item in self . dict
              return path , ''
  else :
 if settings . USE_I18N or settings . USE_L10N :
 known_models = set ( model for model in connection . introspection . installed_models ( tables ) if model not in app_models )
                  raise SignatureExpired (  'Signature age %s > %s seconds' % ( age , max_age ) )
  return get_resolver ( urlconf ) . resolve ( path )
  return self . save_existing_objects ( commit ) + self . save_new_objects ( commit )
 from xml . sax import handler
      def __init__ ( self , func , args , kwargs , url_name = None , app_name = None , namespaces = None ) :
  SafeUnicode = SafeText
                       if transfer_encoding == 'base64' :
                          shutil . copyfileobj ( extracted , outfile )
               self . options . update ( { 'use_decimal' : False } )
     class ModelChoiceField ( ChoiceField ) :
              self . _post , self . _files = QueryDict ( '' , encoding = self . _encoding ) , MultiValueDict ( )
                      try :
    class TemplateLiteral ( Literal ) :
 from django . utils . six . moves import reduce
  except StandardError as e :
                 Image . open ( file ) . verify ( )
 bits = bits [ 2 : ]
          return formats . localize_input ( value ,  self . format or formats . get_format ( self . format_key ) [ 0 ] )
   def emit ( self , record ) :
 def fixture_dirs ( self ) :
                  yield safe_join ( template_dir , template_name )
 class EmailValidator ( object ) :
                      return self . compress ( [ ] )
                      raise CommandError ( "Cannot find a migration matching '%s' from app '%s'." % (  migration_name , app_label ) )
              raise BadHeaderError ( "Header values can't contain newlines (got %r)" % value )
                  filterer . addFilter ( self . config [ 'filters' ] [ f ] )
 if extra_attrs :
  from django . core . management . base import AppCommand
          result = self . __class__ ( '' , mutable = True , encoding = self . encoding )
 codecs . lookup ( encoding )
                      invalid_apps . append ( app_name )
  except ImportError :
          return TemplateSyntaxError ( msg )
 if end is not None :
   def prepare_value ( self , value ) :
               return self . tag_function
  try :
 while ( i < num_existing ) and ( existing [ i ] [ : pflen ] == prefixed ) :
                              return field . rel . to . _default_manager . db_manager ( db ) . get_by_natural_key ( * value ) . pk
     class BooleanField ( Field ) :
          if value is None :
 import os
    @ register . tag
 self . tag ( function_name , compile_func )
 from django . core . serializers import base
 from django . forms . widgets import Media , MediaDefiningClass , TextInput , Textarea
 if fd >= 0 :
 final_output . extend ( alter_sql )
          ret = b'' . join ( self . vals )
              return parent
          if self . required and not value :
  return force_text ( url )
   if recursive :
              cursor . close ( )
          self . parent_widget = parent_widget
   def O ( self ) :
     class Resolver404 ( Http404 ) :
 httpd . serve_forever ( )
    def compile_function_error ( self , token , e ) :
               if var . startswith ( '_(' ) and var . endswith ( ')' ) :
 from IPython . frontend . terminal . ipapp import TerminalIPythonApp
  from django . conf import settings
 flat = { }
 new_second_item = [ ]
      exec_ = getattr ( moves . builtins , "exec" )
 import types
 input_type = None
     def _get_model ( model_identifier ) :
                  call_command ( 'loaddata' , 'initial_data' , verbosity = self . verbosity , database = connection . alias , skip_validation = True , app_label = app_label , hide_empty = True )
      help = 'Deprecated. Use "check" command instead. ' + CheckCommand . help
                  self . stdout . write ( "  Unapplying %s..." % migration , ending = "" )
      widget = SplitDateTimeWidget
      return _trans . pgettext ( context , message )
    def setlist ( self , key , list_ ) :
 compile_func = partial ( generic_tag_compiler ,  params = params , varargs = varargs , varkw = varkw ,  defaults = defaults , name = function_name ,  takes_context = takes_context , node_class = InclusionNode )
 if auto_id and 'id' not in attrs and 'id' not in widget . attrs :
 if m is None :
 if m is not None :
 if not self . form . is_bound :
 if not hasattr ( package , 'rindex' ) :
          self . tags [ getattr ( func , "_decorated_function" , func ) . __name__ ] = func
  def __init__ ( self , tokens ) :
 try :
          try :
              return self
  return super ( PasswordInput , self ) . render ( name , value , attrs )
              inner_text . append ( child . data )
  updates = dict ( )
          return fastcgi_help ( "Invalid combination of host, port, socket." )
              return ""
          language_code = get_language ( )
          if instance is not None :
                                          cursor . execute ( sql )
    def _generate_cache_header_key ( key_prefix , request ) :
 trans_bit . append ( bit )
              self [ k ] = v
 def encoding ( self , value ) :
              yield ( "" , self . field . empty_label )
              self . stdout . write ( self . style . MIGRATE_HEADING ( "Created new squashed migration %s" % writer . path ) )
    return self . getlist ( key )
              return self . nodelist_true . render ( context )
          return ( p1 . scheme , p1 . hostname , p1 . port ) == ( p2 . scheme , p2 . hostname , p2 . port )
                  r = r [ : - 6 ] + 'Z'
   def find_filter ( self , filter_name ) :
      from django . utils . six . moves import _thread as thread
  import decimal
 if token . token_type == TOKEN_BLOCK and token . contents == endtag :
  with context . push ( ) :
          if args :
 def do_if ( parser , token ) :
                  return fext
 if only_django :
 return self . data . year
                  lib = get_library ( taglib )
   return super ( ModelChoiceField , self ) . prepare_value ( value )
   @ property
 language_code = get_language ( )
 return data
    def clean ( self ) :
 from django . utils . encoding import smart_text , force_text
  return errors
                  return False
    def get_template_from_string ( source , origin = None , name = None ) :
 def ssi ( parser , token ) :
 self . locale_paths . insert ( 0 , os . path . join ( os . path . abspath ( dirpath ) , dirname ) )
          return "<TranslatableFile: %s>" % os . sep . join ( [ self . dirpath , self . file ] )
   def render ( self , name , value , attrs = None ) :
    def activate ( language ) :
 lists = _iterlists
          if gettext_module . find ( 'django' , path , [ to_locale ( lang_code ) ] ) is not None :
    class Parser ( object ) :
   return False
          warnings . warn ( '"validate" has been deprecated in favor of "check".' ,  RemovedInDjango19Warning )
      widget = NumberInput
 if isinstance ( elt , Group ) :
                      if settings . TEMPLATE_STRING_IF_INVALID :
 from django . utils import six
  else :
                  _html_parser . HTMLParser . __init__ ( self , convert_charrefs = convert_charrefs , ** kwargs )
          if len ( self . dicts ) == 1 :
 def ifchanged ( parser , token ) :
  if not language_code_re . search ( lang_code ) :
     @ deconstructible
                      parent_pat = pattern . regex . pattern
      input_type = 'email'
   def r ( self ) :
                      try :
 from django . db . migrations . autodetector import MigrationAutodetector
  else :
 for lineno , line in enumerate ( content . splitlines ( True ) ) :
  except IndexError :
  except KeyboardInterrupt :
  color_names = ( 'black' , 'red' , 'green' , 'yellow' , 'blue' , 'magenta' , 'cyan' , 'white' )
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
  return self . __cast ( ) % rhs
 timestamp = git_log . communicate ( ) [ 0 ]
   ustring_re = re . compile ( "([\u0080-\uffff])" )
    class PasswordInput ( TextInput ) :
                  return
      p = language . find ( '-' )
 cache [ mem_args ] = result
 factor -= 1
                  used += '.' + frag
    context_re = re . compile ( r"""^\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?'))\s*""" )
  from django . db . models . fields import Field as ModelField
          return self . _headers . values ( )
        class FixedOffset ( tzinfo ) :
               self . _func_path = '.' . join ( [ func . __class__ . __module__ , func . __class__ . __name__ ] )
 while i < list_length :
  try :
   def dst ( self , dt ) :
    def get_major_version ( version = None ) :
  except ( ValueError , TypeError ) :
  if i >= self . initial_form_count ( ) and not form . has_changed ( ) :
   return ( TYPE , outdict , stream )
   raise TemplateDoesNotExist ( name )
 from django . db import models , DEFAULT_DB_ALIAS
                      os . mkdir ( target_dir )
              dklen = None
    if self . merge and not conflicts :
   else :
              request = record . request
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
 bits = token . split_contents ( )
                  return list ( urlsplit ( url ) )
 global _serializers
  if path . exists ( absolute_path ) :
  thefile = '%s.py' % self . file
 from itertools import dropwhile
          return self
              handler = self . get_handler ( * args , ** options )
 if neg :
     def _render ( self , context ) :
 args , kwargs = parse_bits ( parser , bits , params , varargs , varkw ,  defaults , takes_context , name )
                  result . parent = self
    def tzname ( self , dt ) :
 return do_translate ( message , 'gettext' )
                  i += 1
     sys . modules [ __name__ + ".moves.urllib" ] = Module_six_moves_urllib ( __name__ + ".moves.urllib" )
 from django . utils . safestring import mark_safe
 with open ( writer . path , "wb" ) as fh :
                  if path . isfile ( path_to_remove ) :
              potfiles = self . build_potfiles ( )
          super ( ErrorList , self ) . __init__ ( initlist )
 base_directory = '%s_directory' % app_or_project
          for d in self . dicts [ - 1 ] :
              return '0'
  self . label_suffix = label_suffix if label_suffix is not None else _ ( ':' )
    def check_migrations ( self ) :
 if refto in seen_models :
    def read ( self ) :
 @ stringfilter
                  m = self . DOT_PATTERN . match ( rest )
  else :
  except ImportError :
  def start_serialization ( self ) :
 FIELD = "field"
              data = data or [ ]
     self . _validate_unique = False
 if len_values < 1 :
                          pass
          return ''
            if sys . version_info [ : 2 ] == ( 3 , 2 ) :
   class ExtendsError ( Exception ) :
 request = None
 PREV , NEXT , KEY , RESULT = 0 , 1 , 2 , 3
   def create_token ( self , token_string , in_tag ) :
  if not hasattr ( values , '__len__' ) :
  except ValueError :
 raise NotImplementedError ( 'subclasses of Serializer must provide an handle_field() method' )
              return QueryDict ( '' , encoding = self . _encoding ) , MultiValueDict ( )
 if ':' not in template :
          return force_str ( '<%s %s %s>' % ( self . __class__ . __name__ , self . name , self . regex . pattern ) )
              doublecolon_len = 0
          for node in self . nodelist :
      import dummy_threading as threading
      def __init__ ( self , template_string , origin ) :
      widget = DateInput
  return wrapper
     self . add_error ( None , errors )
          ch , escaped = next ( input_iter )
 if six . PY2 and not isinstance ( path , six . text_type ) :
 handler . addQuickElement ( "link" , "" , { "href" : item [ 'link' ] , "rel" : "alternate" } )
 bits = bits [ : - 2 ]
 return SpacelessNode ( nodelist )
    internal_use_only = False
   if not strict :
          return unicode ( s . replace ( r'\\' , r'\\\\' ) , "unicode_escape" )
  return default
 if header == 'ACCEPT_LANGUAGE' and is_accept_language_redundant :
 acceptable_endblocks = ( 'endblock' , 'endblock %s' % block_name )
  if self . data . minute == 0 and self . data . hour == 12 :
  from django . core . management . base import BaseCommand
 handler . startElement ( 'feed' , self . root_attributes ( ) )
          return WRAPPER_ASSIGNMENTS
              hextets += [ '' ]
 self . _set_regex ( regex )
 use_reloader = options . get ( 'use_reloader' )
          return s
      return _trans . get_language_bidi ( )
 inputs = [ ]
          result = super ( MultiValueField , self ) . __deepcopy__ ( memo )
           all_unique_checks = set ( )
               return dec
 from django . utils . html import escape
 import unicodedata
    proxy = lazy ( lambda ** kwargs : NumberAwareString ( ) , NumberAwareString ) ( ** kwargs )
   else :
                      migration . merged_operations . extend (  loader . get_migration ( node_app , node_name ) . operations  )
 def safeseq ( value ) :
 max_age = max ( 0 , delta . days * 86400 + delta . seconds )
                      attrs_plus [ 'id' ] += '_{0}' . format ( i )
   class Formatter ( object ) :
  check_for_migrations ( app_config , connection )
      def __init__ ( self , max_length = None , min_length = None , * args , ** kwargs ) :
     def _bin_to_long ( x ) :
     class ReferenceLocalTimezone ( tzinfo ) :
   if self . asvar :
       DefaultFeed = Rss201rev2Feed
  else :
  level += 1
 from django . db . migrations import Migration
  else :
 self . _cached_loaders = [ ]
   def eval ( self , context ) :
   def __repr__ ( self ) :
          if field . rel . through . _meta . auto_created :
  elif args [ 1 ] [ 0 ] == '1' :
   def get_internal_wsgi_application ( ) :
                  opts = model . _meta
   def token_kwargs ( bits , parser , support_legacy = False ) :
   return mark_safe ( '\n' . join ( lines ) )
 if settings . USE_TZ and value is not None and timezone . is_naive ( value ) :
 cache_key = 'views.decorators.cache.cache_header.%s.%s' % (  key_prefix , url . hexdigest ( ) )
   def list ( self ) :
              kw [ 'microsecond' ] = kw [ 'microsecond' ] . ljust ( 6 , '0' )
                  if status != STATUS_OK :
     def strip_tags ( value ) :
   def U ( self ) :
 return result
  return value
 global _format_cache , _format_modules_cache
 translation . _info = { }
  loggers = config . get ( 'loggers' , EMPTY_DICT )
          pass
              return mark_safe ( output )
  if name not in parser . _namedCycleNodes :
    def __exit__ ( self , exc_type , exc_value , traceback ) :
                  final_output . extend ( connection . creation . sql_for_pending_references ( refto , style , pending_references ) )
     def modelform_defines_fields ( form_class ) :
 locales = [ locale ]
 handler . addQuickElement ( "link" , self . feed [ 'link' ] )
 if self . data . hour > 11 :
    def add_to_builtins ( module ) :
 d = data . get ( self . day_field % name )
      def __init__ ( self , cyclevars , variable_name = None , silent = False ) :
  else :
    if ip_str . count ( ':' ) > 7 :
     class DateField ( BaseTemporalField ) :
          return ''
                  raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : choice } ,  )
 from io import BytesIO
   def non_form_errors ( self ) :
              return 1
                form . data [ form . add_prefix ( self . _pk_field . name ) ] = None
                  if _ipv6 :
                  widget . is_localized = self . is_localized
          return any ( self . dicts )
 self . interactive = options . get ( 'interactive' )
 self . index = index
 break
       for name , field in self . fields . items ( ) :
 if not match :
 from django . utils . translation import ugettext_lazy , ugettext as _ , pgettext
  digits . insert ( - exponent , '.' )
    @ register . tag
      return "'%s'" % dirname if dirname else 'absolute path'
              self . active_readers -= 1
  def __init__ ( self , attrs = None , years = None , months = None , empty_label = None ) :
  except TypeError :
  def to_python ( self , value ) :
 for format in BUILTIN_SERIALIZERS :
          self . nodelist = nodelist
              ctx . update ( force_bytes ( value ) )
                          pass
 def __init__ ( self , name , value , base , sysid , pubid , notation_name ) :
    _urllib_parse_moved_attributes = [  MovedAttribute ( "ParseResult" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "SplitResult" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "parse_qs" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "parse_qsl" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urldefrag" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urljoin" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlparse" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlsplit" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlunparse" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlunsplit" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "quote" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "quote_plus" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "unquote" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "unquote_plus" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "urlencode" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "splitquery" , "urllib" , "urllib.parse" ) ,  ]
   def _has_changed ( self , initial , data ) :
                          continue
 def deleted_forms ( self ) :
 self . clear_cdata_mode ( )
 content = template . render ( context )
 if arg is None :
          return ord ( buf [ i ] )
 return time_str + '%+03d:%02d' % ( hour , minute )
   def id_for_label ( self , id_ ) :
  for shell in available_shells :
                  self . timezone = obj . tzinfo
  if isinstance ( s , bytes ) :
                  if e . errno == errno . EEXIST :
          nodelist_false = parser . parse ( ( 'endifchanged' , ) )
 for refto , refs in references . items ( ) :
 s = s . replace ( '\n' , '\\n' )
          try :
                          if f == '__pycache__' :
                       name = "_%d" % num_args
     class RenameMethodsBase ( type ) :
                          os . makedirs ( dirname )
              contents = conditional_escape ( contents )
              seen_data = set ( )
 if tzinfo == 'Z' :
                  raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : val } ,  )
  try :
 text = unicodedata . normalize ( 'NFC' , self . _wrapped )
              p = i
          bytes = float ( bytes )
  from django . core . management . base import BaseCommand
  else :
   return result , result_args
              if callable ( name ) :
              raise AttributeError ( attr )
       def stringfilter ( func ) :
 days = ( 'Mon' , 'Tue' , 'Wed' , 'Thu' , 'Fri' , 'Sat' , 'Sun' )
 zfile = GzipFile ( mode = 'wb' , compresslevel = 6 , fileobj = zbuf )
                   def render ( self , context ) :
 self . xml . characters ( smart_text ( key_value ) )
   url = url . replace ( '\\' , '/' )
   self . _css = { }
          return import_string ( app_path )
              template , origin = self . find_template ( template_name , template_dirs )
 return "(" + " " . join ( out ) + ")"
  elif field in self . fields :
  return attrs
   class TranslatorCommentWarning ( SyntaxWarning ) :
    DjangoSafeDumper . add_representer ( decimal . Decimal , DjangoSafeDumper . represent_decimal )
 validate_ipv4_address = RegexValidator ( ipv4_re , _ ( 'Enter a valid IPv4 address.' ) , 'invalid' )
                          self . stdout . write ( "    - %s\n" % operation . describe ( ) )
          super ( MultipleHiddenInput , self ) . __init__ ( attrs )
          tpl = "ExternalReferenceForbidden(system_id='{}', public_id={})"
               ERRORS = {  errno . EACCES : "You don't have permission to access that port." ,  errno . EADDRINUSE : "That port is already in use." ,  errno . EADDRNOTAVAIL : "That IP address can't be assigned-to." ,  }
 MAX_NUM_FORM_COUNT = 'MAX_NUM_FORMS'
              yield key , self [ key ]
 result . key = key
          del _prefixes . value
  output . append ( widget . render ( name + '_%s' % i , widget_value , final_attrs ) )
    i = next_space_index ( subject , i )
 global templatetags_modules
 if option in options :
  name = _resolve_name ( name [ level : ] , package , level )
              raise TypeError ( 'Level not an integer or a '  'valid string: %r' % level )
 parser . add_argument ( '--fake' , action = 'store_true' , dest = 'fake' , default = False ,  help = 'Mark migrations as run without actually running them' )
          s = s . replace ( '"' , '&quot;' )
 self . validate ( display_num_errors = True )
              return
                      resolved_args , resolved_kwargs = self . get_resolved_arguments ( context )
  _DJANGO_DEPRECATED_LOCALES = _BROWSERS_DEPRECATED_LOCALES
     def import_by_path ( dotted_path , error_prefix = '' ) :
 clean = lambda self , x : len ( x )
 code = 'min_length'
  import datetime
 thefile = '%s.c' % self . file
    class CheckboxSelectMultiple ( RendererMixin , SelectMultiple ) :
  if data in seen_data :
 for k , v in defaults . items ( ) :
   raise KeyError ( key )
 def wrapper ( * args ) :
          d = datetime . datetime ( d . year , d . month , d . day )
 setattr ( obj , self . fk . get_attname ( ) , getattr ( pk_value , 'pk' , pk_value ) )
    def serialize ( format , queryset , ** options ) :
 handler . addQuickElement ( "link" , item [ 'link' ] )
 return ''
 for file in options [ 'files' ] :
              if self . to_field_name :
     class Node ( object ) :
  for template_dir in template_dirs :
              raise ValueError ( "dictionary doesn't specify a version" )
 from django . utils import six
 return "<For Node: for %s in %s, tail_len: %d%s>" % ( ', ' . join ( self . loopvars ) , self . sequence , len ( self . nodelist_loop ) ,  reversed_text )
          if name not in data :
              try :
          return self
          handler . addQuickElement ( "title" , item [ 'title' ] )
 value = bytes_to_text ( value , self . encoding )
  field_name = force_text ( field_name , encoding , errors = 'replace' )
              return data . getlist ( name )
   self . _post . appendlist ( field_name ,  force_text ( data , encoding , errors = 'replace' ) )
    for node in compiled_parent . nodelist :
 from django . core . management . sql import custom_sql_for_model , emit_post_migrate_signal , emit_pre_migrate_signal
    while True :
                        print ( "In the tar file %s the member %s is invalid: %s" %  ( name , member . name , exc ) )
              value = { True : '2' , False : '3' , '2' : '2' , '3' : '3' } [ value ]
          try :
              out += '</%s>' % tag
           pass
  try :
                tok = '"REGEX"'
                  opfunc . __name__ = opname
   def javascript_quote ( s , quote_double_quotes = False ) :
   as_form = False
  for k , v in six . iteritems ( kwargs ) :
          if regex is not None :
                  raise
 return value . tzinfo is None or value . tzinfo . utcoffset ( value ) is None
  else :
  since = delta . days * 24 * 60 * 60 + delta . seconds
  from django . utils import six
  block_name = bits [ 1 ]
  if not use_workaround :
    possible_sizes = [ x . chunk_size for x in upload_handlers if x . chunk_size ]
              return 12
 class_types = type ,
  self . backout . append ( self . pointer )
 memoryview = memoryview
 asvar = None
  except ( ValueError , self . queryset . model . DoesNotExist ) :
                  if timezone . is_aware ( expires ) :
                   for k2 , v2 in v :
                  output . append ( self . render_option ( selected_choices , option_value , option_label ) )
  else :
          return self . value . resolve ( context , ignore_failures = True )
          if isinstance ( regex , six . string_types ) :
                  filename = ev . filename
  if any ( len ( x ) < 4 for x in ip_str . split ( ':' ) ) :
              et , ev , tb = sys . exc_info ( )
              return s
 if truncate_text :
 self . __to_language = to_language ( language )
  if self . is_url ( template ) :
 if mem_args in cache :
  return I18N_MODIFIED if filename . endswith ( '.mo' ) else FILE_MODIFIED
              error_messages = kwargs . get ( 'error_messages' ) or { }
          self . content = content
                      for fmatch in constant_re . findall ( t . contents ) :
 if cache_timeout is None :
   else :
   def __getitem__ ( self , key ) :
 from django . utils . text import Truncator , wrap , phone2numeric
                        ns = current_app
   def merge ( self , other ) :
  except ( HTMLParseError , UnboundLocalError ) :
from __future__ import unicode_literals
              raise TemplateSyntaxError (  "'%s' is decorated with takes_context=True so it must "  "have a first argument of 'context'" % name )
  except LookupError :
          self . _assert_mutable ( )
    if item [ "author_name" ] and item [ "author_email" ] :
                          filemsg = 'file %s, ' % origin
 for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) :
          arg = ugettext ( 'yes,no,maybe' )
              continue
          self . nodelist_true , self . nodelist_false = nodelist_true , nodelist_false
 if not isinstance ( value , ( bytes , six . text_type ) ) :
              return
   def get ( self , header , alternate = None ) :
       app_models = app_config . get_models ( include_auto_created = True )
 self . xml . startElement ( "field" , {  "name" : field . name ,  "rel" : field . rel . __class__ . __name__ ,  "to" : smart_text ( field . rel . to . _meta ) ,  } )
              self . xml . ignorableWhitespace ( '\n' + ' ' * self . options . get ( 'indent' , None ) * level )
 output . append ( '\n\n' )
 if print_ is None :
     if label_suffix and contents and contents [ - 1 ] not in _ ( ':?.!' ) :
 import stat
 from django . template import loader , Context , RequestContext
                      initial_value = self . initial . get ( name , field . initial )
  else :
  else :
 def wordcount ( value ) :
               self . filters [ name ] = filter_func
   def unclosed_block_tag ( self , parse_until ) :
      class DebugVariableNode ( VariableNode ) :
  import warnings
 result = self . configurator . convert ( value )
  def __setattr__ ( self , name , value ) :
  resolved_kwargs = dict ( ( k , v . resolve ( context ) ) for k , v in self . kwargs . items ( ) )
 __M = r'(?P<mon>\w{3})'
              locales = locale or all_locales
                          locale_dir = self . default_locale_path
  else :
  from django . utils . datastructures import MultiValueDict
              return value . date ( )
  else :
          return self . as_table ( )
   all_models = [  ( app_config . label ,  router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) )  for app_config in apps . get_app_configs ( )  if app_config . models_module is not None and app_config . label in app_labels  ]
   errors = [ ]
      input_type = 'radio'
                  result |= x ^ y
      is_usable = True
 self . kwargs = kwargs
                       field_value = [ getInnerText ( k ) . strip ( ) for k in keys ]
  requires_system_checks = False
 from django . utils import translation
  from os import path
 def cleanup_url ( url ) :
    def validate_domain_part ( self , domain_part ) :
 c = config . pop ( '()' )
 try :
                  key += item
    dot_re = re . compile ( r'\S' )
              return [ ]
 value = localize ( value , use_l10n = context . use_l10n )
 if key_prefix is None :
    def urlsafe_base64_encode ( s ) :
   if not locale_dir :
  def __init__ ( self , tup , hash = hash ) :
              value = int ( str ( value ) )
                      cache . clear ( )
  return '\n' . join ( output )
              try :
 for app_config in apps . get_app_configs ( ) :
          if not self :
 if not url :
 return force_text ( self . prepare_value ( initial_value ) ) != force_text ( data_value )
 if name . startswith ( '.' ) :
 if value is not result :
              field_list . append ( ( f . name , formfield ) )
 if not prefix :
              sys . stderr = NullDevice ( )
 if last == 1 :
   field = Model . _meta . get_field ( field_name )
  try :
  return six . unichr ( c )
          return self . source_error ( token . source , msg )
                           self . _changed_data . append ( name )
   def label_tag ( self , contents = None , attrs = None , label_suffix = None ) :
 from django . utils . safestring import SafeData , EscapeData
  else :
          raise ValidationError ( error_message , code = 'invalid' )
          return parse_http_date ( date )
              pass
 return FilterNode ( filter_expr , nodelist )
  week_number = None
      def render_node ( self , node , context ) :
              if escaped :
  nodelist = [ ]
  Module_six_moves_urllib_parse . _moved_attributes = _urllib_parse_moved_attributes
  return _serializers [ format ] . Deserializer
              parentloop = { }
   if kwargs :
 self . use_l10n = use_l10n
  return super ( SimpleTemplateResponse , self ) . __iter__ ( )
                          pk_value = self . get_queryset ( ) [ index ] . pk
 from django . utils . itercompat import is_iterable
   def to_python ( self , value ) :
  msgs = '\n' . join ( lines )
          return self
    opts = tuple ( s for s in styles if s in opt_dict . keys ( ) )
          attr = import_string ( dotted_path )
                       obj_pk = field . rel . to . _meta . pk . to_python ( n . getAttribute ( 'pk' ) )
 self . paths_to_remove = [ ]
 sys . stderr . close ( )
    def __deepcopy__ ( self , memo ) :
     class DebugNode ( Node ) :
                  extra , resolver = resolver . namespace_dict [ ns ]
 self . stdout . write ( self . style . NOTICE ( "Run 'python manage.py migrate' to apply them.\n" ) )
          try :
      return getattr ( self , _assertRaisesRegex ) ( * args , ** kwargs )
 if language_code not in self . _regex_dict :
    def _isdst ( self , dt ) :
                          raise KeyError ( 'Your dictionary lacks key \'%s\'. '  'Please provide it, because it is required to '  'determine whether string is singular or plural.'  % number )
  if not incremental :
  def decorator ( klass ) :
 def slugify ( value ) :
                  other = other . __cast ( )
  sys . modules [ __name__ + ".moves.urllib_response" ] = sys . modules [ __name__ + ".moves.urllib.response" ] = Module_six_moves_urllib_response ( __name__ + ".moves.urllib.response" )
 os . umask ( umask )
 for model in not_installed_models :
 return str ( '%s%s%s' ) % ( value , self . sep , self . signature ( value ) )
 if formatter :
   def f ( self ) :
 for digit in str ( number ) :
 self . lineno = None
                  yield self . choice ( obj )
   def get_signed_cookie ( self , key , default = RAISE_ERROR , salt = '' , max_age = None ) :
  try :
  else :
          logging . Handler . __init__ ( self )
          _load_serializers ( )
 if not directory_created . get ( app_label , False ) :
              self . addr = '::1' if self . use_ipv6 else '127.0.0.1'
 return self . __deepcopy__ ( { } )
              cleaned_data = self . clean ( )
   def bound_data ( self , data , initial ) :
       def __init__ ( self , * args , ** kwargs ) :
              self . content = self . rendered_content
       def get_format_modules ( lang = None , reverse = False ) :
          if path . startswith ( ( 'http://' , 'https://' , '/' ) ) :
          self . _assert_mutable ( )
   def is_secure ( self ) :
 symlink_path = os . path . join ( tmpdir , 'symlink' )
 try :
 attrs . pop ( key )
  try :
  if self . _read_started and not hasattr ( self , '_body' ) :
 def safe ( value ) :
 from django . forms . widgets import ( SelectMultiple , HiddenInput ,  MultipleHiddenInput )
  import os
     class DebugParser ( Parser ) :
                  pass
 from django . utils . datastructures import MultiValueDict , ImmutableList
 import signal
 from django . utils . six . moves . urllib . parse import urlsplit , urlunsplit
  if issubclass ( klass , logging . handlers . MemoryHandler ) and 'target' in config :
    if item [ 'unique_id' ] is not None :
 return super ( QueryDict , self ) . pop ( key , * args )
              continue
  try :
  return self . limit_choices_to
          return s
 self . day_none_value = ( 0 , empty_label [ 2 ] )
          _ExpatParser . reset ( self )
 from django . utils . formats import localize
 from django . template . defaultfilters import date
             self . template_name = template
   def __str__ ( self ) :
 role = role . upper ( )
  import copy
      def __init__ ( self ) :
 end = len ( text )
 self . source = source
              for node in nodelist :
                  self . cleaned_data = cleaned_data
                          custom_sql = custom_sql_for_model ( model , no_style ( ) , connection )
 for hextet in new_ip :
 self . xml . endElement ( "natural" )
   else :
 widget = HiddenInput
  return ExtendsNode ( nodelist , parent_name )
          if escaped :
   def __setitem__ ( self , header , value ) :
 return
 if not self . timezone :
              return SafeBytes ( data )
                      break
  if settings . USE_TZ :
 return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )
              super ( TypedMultipleChoiceField , self ) . validate ( value )
 if log in child_loggers :
                      if line . lstrip ( ) . startswith ( TRANSLATOR_COMMENT_MARK ) :
                          filters [ name ] = self . configure_filter ( filters [ name ] )
              f . seek ( 0 )
 self . json_kwargs . pop ( 'fields' , None )
 from django . db . migrations . executor import MigrationExecutor
 if isinstance ( template , ( list , tuple ) ) :
          return self
 return FormSet
 django_dir = os . path . normpath ( os . path . join ( os . path . dirname ( django . __file__ ) ) )
   def __lt__ ( self , other ) :
 from django . views . debug import ExceptionReporter , get_exception_reporter_filter
    if len ( s ) > 13 :
 return message
  import re
  self . _cached_loaders = cached_loaders
    class Token ( object ) :
              self . attrs = { }
 if related_att is not None :
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to synchronize. Defaults to the "default" database.' )
          csrf_token = context . get ( 'csrf_token' , None )
              return bytes ( value )
 return '%s-%s' % ( self . prefix , field_name ) if self . prefix else field_name
 def extra_forms ( self ) :
          try :
  else :
   attrs = flatatt ( attrs ) if attrs else ''
 self . setup_environ ( )
   def gen_filenames ( only_new = False ) :
          cleaned_line = comment_re . sub ( r"\1" , line ) . strip ( )
      def compile_string ( template_string , origin ) :
 default_validators = [ validators . URLValidator ( ) ]
  if self . max_value is not None :
  cc_delim_re = re . compile ( r'\s*,\s*' )
  if invalid_var_format_string :
 try :
      def __init__ ( self , options = None ) :
  from django . conf import settings
 conditions_nodelists = [ ( condition , nodelist ) ]
 for path in collect :
      default_error_messages = {  'invalid_image' : _ ( "Upload a valid image. The file you uploaded was either not an image or a corrupted image." ) ,  }
 self . common_logger_config ( logger , config , incremental )
              resolved_args = [ context ] + resolved_args
          raise TemplateSyntaxError ( "'firstof' statement requires at least one argument" )
 if not hasattr ( c , '__call__' ) and hasattr ( types , 'ClassType' ) and type ( c ) != types . ClassType :
              origin = StringOrigin ( template_string )
   else :
   _drive_re = re . compile ( '^([a-z]):' , re . I )
              response . content = b''
                       try :
 from django . db import connections , DEFAULT_DB_ALIAS
  else :
 for field in _parse_date_fmt ( ) :
              return ''
  raise ValueError (  "'%s.%s' has no ForeignKey to '%s.%s'."  % ( model . _meta . app_label , model . _meta . object_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )
              if cnt and not cnt % grouping :
    def ugettext ( message ) :
 ignore = lambda pattern : fnmatch . fnmatchcase ( filename , pattern )
  LANGUAGE_SESSION_KEY = '_language'
 setattr ( _MovedItems , move . name , move )
 self . __locale = to_locale ( language )
     class Parser ( object ) :
 from django . db import connections , router , transaction , DEFAULT_DB_ALIAS
 month = months [ date . month - 1 ]
     @ register . filter ( is_safe = True , needs_autoescape = True )
 self . variable_name = variable_name
 def __init__ ( self , offset ) :
 from django . utils . six . moves . urllib . parse import (  quote , quote_plus , unquote , unquote_plus , urlparse ,  urlencode as original_urlencode )
  as_form = True
  for model in app_models :
                      self . xml . startElement ( "natural" , { } )
 return force_text ( iri_to_uri ( value ) )
 return state
              state_frame [ self ] = None
   self . _container = [ value ]
   if max_age is not None :
   return True
  values = [ parser . compile_filter ( bit ) for bit in bits [ 1 : ] ]
 for name , tok in lexer . lex ( js ) :
  else :
    @ register . filter ( is_safe = True )
 if settings . USE_I18N :
  class AssignmentNode ( TagHelperNode ) :
 import time
          stream = stream_or_string
      class Rss201rev2Feed ( RssFeed ) :
   def __iter__ ( self ) :
   def new ( self , values = None ) :
          if value . __traceback__ is not tb :
      def __init__ ( self , name ) :
 oldroot [ KEY ] = key
              if not hasattr ( e , 'django_template_source' ) :
  del bits [ : 1 ]
 return b'\r\n' . join ( headers )
 super ( QueryDict , self ) . __setitem__ ( key , value )
                  break
                  if block_content [ : 9 ] in ( 'verbatim' , 'verbatim ' ) :
  except ( ValueError , TypeError ) :
  return value . strip ( )
      content_type = META . get ( 'HTTP_CONTENT_TYPE' , META . get ( 'CONTENT_TYPE' , '' ) )
    value = super ( URLField , self ) . to_python ( value )
          self . var1 , self . var2 = var1 , var2
 n = getattr ( lookup_view , '__name__' , None )
              return list ( self . iteritems ( ) )
   def to_locale ( language ) :
              import warnings
      def __init__ ( self , regex , callback , default_args = None , name = None ) :
  RESET = '0'
 host = host . lower ( )
                      self . stdout . write ( errors )
                      attrs [ 'class' ] += ' ' + self . form . required_css_class
    try :
 if not prefix or not hasattr ( self , '_callback_str' ) :
                  result = self . configure_custom ( config )
          try :
              second_item = new_second_item
              continue
     def validate_ipv46_address ( value ) :
  if last == 3 :
          from pprint import pformat
                  if self . allow_files :
            if initial == 'False' :
              yield self [ name ]
          evens = sum ( int ( c ) for c in candidate [ - 1 : : - 2 ] )
 if pattern . name is not None :
              end , next = boundary
 def changed_data ( self ) :
 for obj in PythonDeserializer ( objects , ** options ) :
   plan = executor . migration_plan ( targets )
  ETAG_MATCH = re . compile ( r'(?:W/)?"((?:\\.|[^"])*)"' )
 if six . PY3 :
  else :
              value = to_current_timezone ( value )
   return property ( _media )
  if now and not isinstance ( now , datetime . datetime ) :
 self . empty_value = kwargs . pop ( 'empty_value' , '' )
    except Exception as e :
 i = 0
 value = next ( cycle_iter ) . resolve ( context )
   else :
 from django . core . management . base import BaseCommand
 from django . forms . widgets import *
 if widgets and f . name in widgets :
    return value
              ignored . append ( f . name )
          if value in self . empty_values :
          if self . id_for_label :
  import base64
      if number == 1 :
 return output
          return input_val
              return super ( LocalTimezone , self ) . _isdst ( dt )
 tok = toks [ name ]
          yes , no , maybe = bits
   return value
  elif issubclass ( klass , logging . handlers . SysLogHandler ) and 'address' in config :
 return nodelist
              return get_template ( template_name , dirs )
 from django . utils . _os import rmtree_errorhandler
          TemplateLoader = import_string ( loader )
  media = property ( _get_media )
              handler . addQuickElement ( "category" , "" , { "term" : cat } )
     _entity_re = re . compile ( r"&(#?[xX]?(?:[0-9a-fA-F]+|\w{1,8}));" )
 s = s [ end : ]
          self . fed . append ( '&%s;' % name )
   data = { }
                      candidate_subs = dict ( ( k , urlquote ( v ) ) for ( k , v ) in candidate_subs . items ( ) )
 if isinstance ( value , six . string_types ) and value != ALL_FIELDS :
 return self . add_truncation_text ( ' ' . join ( words ) , truncate )
   def __repr__ ( self ) :
 self . ignore = options . pop ( 'ignorenonexistent' , False )
              new_path = path [ match . end ( ) : ]
                      singular . append ( '%%(%s)s' % t . contents )
                  self . waiting_readers += 1
              self . empty_label = empty_label
 import os
 pflen = len ( prefixed )
  handler . addQuickElement ( "id" , self . feed [ 'id' ] )
  except ( ValueError , TypeError ) :
  return None
              final_attrs [ 'checked' ] = 'checked'
  else :
   for cat in item [ 'categories' ] :
 DELETION_FIELD_NAME = 'DELETE'
                  raise ValidationError ( self . error_messages [ 'invalid_date' ] , code = 'invalid_date' )
    @ register . filter ( is_safe = True , needs_autoescape = True )
      def __init__ ( self , path , match = None , recursive = False , allow_files = True ,  allow_folders = False , required = True , widget = None , label = None ,  initial = None , help_text = '' , * args , ** kwargs ) :
 return super ( EmailField , self ) . clean ( value )
          return self . __class__ ( [ ( key , copy . deepcopy ( value , memo ) )  for key , value in self . items ( ) ] )
              raise TemplateSyntaxError ( "Named cycle '%s' does not exist" % name )
                  continue
  return iri_to_uri ( location )
 def get_default_prefix ( cls ) :
 p1 , p2 = urlparse ( url1 ) , urlparse ( url2 )
   @ classmethod
   def cfg_convert ( self , value ) :
          for node in self . nodelist_loop :
   for tag in open_tags :
 from django . utils import six
  __all__ = (  'Media' , 'MediaDefiningClass' , 'Widget' , 'TextInput' ,  'EmailInput' , 'URLInput' , 'NumberInput' , 'PasswordInput' ,  'HiddenInput' , 'MultipleHiddenInput' , 'ClearableFileInput' ,  'FileInput' , 'DateInput' , 'DateTimeInput' , 'TimeInput' , 'Textarea' , 'CheckboxInput' ,  'Select' , 'NullBooleanSelect' , 'SelectMultiple' , 'RadioSelect' ,  'CheckboxSelectMultiple' , 'MultiWidget' ,  'SplitDateTimeWidget' , 'SplitHiddenDateTimeWidget' ,  )
 got_request_exception = Signal ( providing_args = [ "request" ] )
                      match = RE_DATE . match ( value )
              deactivate ( )
   return "" . join ( inner_text )
          value = force_str ( value )
 output = template_localtime ( output , use_tz = context . use_tz )
 self . _add_installed_apps_translations ( )
   update_wrapper ( _dec , decorator , assigned = available_attrs ( decorator ) )
    def decorator_from_middleware ( middleware_class ) :
          super ( DebugLexer , self ) . __init__ ( template_string , origin )
 break
  if errors :
   def __contains__ ( self , item ) :
          return self . source
 return nodelist_true_output or self . nodelist_true . render ( context )
   def _update_unget_history ( self , num_bytes ) :
  return ( resource , 'egg:%s:%s' % ( app_config . name , pkg_name ) )
 cache_key = 'views.decorators.cache.cache_page.%s.%s.%s.%s' % (  key_prefix , method , url . hexdigest ( ) , ctx . hexdigest ( ) )
 return result
  requires_system_checks = False
              import code
 work_file = os . path . join ( self . dirpath , thefile )
 return self . as_widget ( Textarea ( ) , attrs , ** kwargs )
 break
          for name in self . fields :
          return False
              value = [ ]
   def language ( self ) :
    @ register . filter ( is_safe = True )
  except Exception as e :
 if value is not None :
 if not hasattr ( c , '__call__' ) and hasattr ( types , 'ClassType' ) and type ( c ) != types . ClassType :
                  result . append ( self . create_token ( bit , in_tag ) )
                  pass
 def __init__ ( self , key_to_list_mapping = ( ) ) :
 for field , messages in errors . error_dict . items ( ) :
 if six . PY2 and not isinstance ( path , bytes ) :
                  value = value . replace ( replacement , '' )
                      namespaces [ pattern . namespace ] = ( p_pattern , pattern )
 args , varargs , varkw , defaults = getargspec ( func )
 best_doublecolon_start = doublecolon_start
  try :
    conflicts = loader . detect_conflicts ( )
 self . params = params
              daemonize = False
    for f in opts . many_to_many + opts . virtual_fields :
  from django . utils . encoding import force_text , DEFAULT_LOCALE_ENCODING
                   raise
  parent_name = parser . compile_filter ( bits [ 1 ] )
     return self . _get_scheme ( )
 return name + '_id'
 def __init__ ( self , dt ) :
    def copy ( self ) :
                          finder = hook ( entry )
 if sys . version_info [ 1 ] <= 1 :
                  self . _closable_objects . append ( value )
   def add_initial_prefix ( self , field_name ) :
 import re
              id_ += '_0'
              self . _closable_objects . append ( value )
              deactivate_all ( )
  return bool ( initial ) != bool ( data )
   def smart_split ( text ) :
 import sys
 import re
  else :
              if default is not RAISE_ERROR :
   choices = property ( _get_choices , _set_choices )
          return self . render ( )
   __contains__ = has_header
 def verbatim ( parser , token ) :
              for format in self . input_formats :
   user_part , domain_part = value . rsplit ( '@' , 1 )
                  header , value = settings . SECURE_PROXY_SSL_HEADER
              code_list . append ( background [ v ] )
  if settings . USE_X_FORWARDED_HOST and (  'HTTP_X_FORWARDED_HOST' in self . META ) :
   def render ( self , context ) :
  subject = self . format_subject ( subject )
              return truncate % { 'truncated_text' : text }
  except AttributeError :
                  year += 1900
          if not self . _mutable :
 from pprint import pformat
   else :
 def __init__ ( self , form , field , name ) :
 os . chdir ( our_home_dir )
          raise ImproperlyConfigured (  "Calling modelformset_factory without defining 'fields' or "  "'exclude' explicitly is prohibited."  )
 if match :
 import sys
              self . _populate ( )
   @ property
     class LoadNode ( Node ) :
   __all__ = [  'activate' , 'deactivate' , 'override' , 'deactivate_all' ,  'get_language' , 'get_language_from_request' ,  'get_language_info' , 'get_language_bidi' ,  'check_for_language' , 'to_locale' , 'templatize' , 'string_concat' ,  'gettext' , 'gettext_lazy' , 'gettext_noop' ,  'ugettext' , 'ugettext_lazy' , 'ugettext_noop' ,  'ngettext' , 'ngettext_lazy' ,  'ungettext' , 'ungettext_lazy' ,  'pgettext' , 'pgettext_lazy' ,  'npgettext' , 'npgettext_lazy' ,  'LANGUAGE_SESSION_KEY' ,  ]
 from django . core . management . utils import handle_extensions
 i = j + 1
  else :
  else :
   def eval ( self , context ) :
              handler . startElement ( 'item' , self . item_attributes ( item ) )
   args = [ ]
  if PY3 :
       def timestamp ( self ) :
   declared_fields = OrderedDict ( )
 yield emitting
      widget = CheckboxInput
  dow = days [ date . weekday ( ) ]
                    res = func ( * self . __args , ** self . __kw )
     class SpacelessNode ( Node ) :
 import re
                                       break
  def __init__ ( self , parser , * args , ** kwargs ) :
  except AttributeError :
  except ImportError :
  root = max ( roots )
 line = line [ space : ]
     def deactivate ( ) :
              return exit_code
 for loader in self . _loaders :
                          ch , escaped = next ( pattern_iter )
                              current = current [ int ( bit ) ]
              token = tokens [ i ]
  pythonrc = os . path . expanduser ( pythonrc )
    def sql_custom ( app_config , style , connection ) :
          lang_code = get_language_from_path ( request . path_info )
          return type ( self ) . __bool__ ( self )
 all_files = [ ]
              if field is not None :
 self . value = force_text ( self . value )
   __getattr__ = new_method_proxy ( getattr )
  else :
   def is_ajax ( self ) :
                   self . _done = True
              output = next ( self . _producer )
    sign , digits , exponent = d . quantize ( exp , ROUND_HALF_UP ,  Context ( prec = prec ) ) . as_tuple ( )
 return result
     def build_instance ( Model , data , db ) :
 _active . value = gettext_module . NullTranslations ( )
  if hasattr ( decorator , '__name__' ) :
    @ property
 r = dklen - ( l - 1 ) * hlen
 @ stringfilter
          return _time . tzname [ self . _isdst ( dt ) ]
  raise ValidationError ( self . message , code = self . code )
                              exec ( compile ( handle . read ( ) , pythonrc , 'exec' ) , imported_objects )
    def __repr__ ( self ) :
              is_templatized = True
              return _ ( 'midnight' )
  return dec
 message_context = context_match . group ( 1 )
              break
          if not hasattr ( e , 'django_template_source' ) :
 proxy = lazy ( func , resultclass ) ( ** kwargs )
 from django . utils import six
 setattr ( base , new_method_name , old_method )
 return chunk [ : end ]
    @ register . tag
                  if old_field_name :
   def splitext ( self , the_path ) :
              raise AttributeError ( "You cannot set the upload handlers after the upload has been processed." )
 if top + self . orphans >= self . count :
              self . input_type = attrs . pop ( 'type' , self . input_type )
  get_text_list = allow_lazy ( get_text_list , six . text_type )
 pass
 self . prefix = prefix
     if not options [ 'no_startup' ] :
 if schemes is not None :
          raise TemplateSyntaxError ( "'ssi' tag takes one argument: the path to"  " the file to be included" )
 if "\n" in self . __starttag_text :
  bits . append ( force_text ( bit ) )
 if not value or isinstance ( value , ( list , tuple ) ) :
                          try :
          if name == "_wrapped" :
              now = now . decode ( 'utf-8' )
 with io . open ( orig_file , encoding = settings . FILE_CHARSET ) as fp :
   class FixUnicode ( fixer_base . BaseFix ) :
                      var_obj = Variable ( var )
 kwargs = kwargs or { }
 result . key = key
  except Exception :
  except ValueError :
   html4_singlets = (  'br' , 'col' , 'link' , 'base' , 'img' ,  'param' , 'area' , 'hr' , 'input'  )
  def handle ( self , ** options ) :
                  return code
                  return format_html ( "" )
 tzinfo . __init__ ( self )
                  parts = t . contents . split ( '|' )
              value = bool ( value )
 def rendered_content ( self ) :
      def strftime ( self , fmt ) :
          return _import_module ( self . mod )
 hidden_widget = SplitHiddenDateTimeWidget
               value = self . _resolve_lookup ( context )
    def ungettext_lazy ( singular , plural , number = None ) :
  def clean ( self ) :
 root [ : ] = [ root , root , None , None ]
      if PY3 :
          return self . _choices
 from django . utils import six
   for field , initial , data in zip ( self . fields , initial , data ) :
          return str ( self )
                  raise
        constant_string = r""" (?:%(i18n_open)s%(strdq)s%(i18n_close)s| %(i18n_open)s%(strsq)s%(i18n_close)s| %(strdq)s| %(strsq)s) """ % {  'strdq' : r'"[^"\\]*(?:\\.[^"\\]*)*"' ,  'strsq' : r"'[^'\\]*(?:\\.[^'\\]*)*'" ,  'i18n_open' : re . escape ( "_(" ) ,  'i18n_close' : re . escape ( ")" ) ,  }
   def __nonzero__ ( self ) :
   class Module_six_moves_urllib_error ( _LazyModule ) :
          nodelist_empty = parser . parse ( ( 'endfor' , ) )
              archive . extract ( filename , tempdir )
              return None
              os . environ [ 'DJANGO_LIVE_TEST_SERVER_ADDRESS' ] = options [ 'liveserver' ]
    forms = ' ' . join ( form . as_table ( ) for form in self )
      help = "Prints the custom table modifying SQL statements for the given app name(s)."
                          unpacked_vars = dict ( zip ( self . loopvars , item ) )
 if self . is_bound :
          raise ValueError ( e )
    def valid_value ( self , value ) :
   def clean ( self , value ) :
   try :
   prefix = 'django_%s_template_' % self . app_or_project
 d = Decimal ( input_val )
 app_dirs . append ( os . path . normpath ( os . path . join ( app_dir , 'sql' ) ) )
                  return kwargs
     class SortedDict ( dict ) :
 if not_installed_models :
                  return ugettext_lazy ( value )
   def __next__ ( self ) :
                        open_tags = open_tags [ i + 1 : ]
     def configure_logger ( self , name , config , incremental = False ) :
                  var , constant = match . group ( "var" , "constant" )
          return self . attrs . get ( 'id' , '' )
   def render ( self , context ) :
                          root , = nonlocal_root
 return '\n' . join ( statements )
   def _populate ( self ) :
  resolved_path = [ ]
       import datetime
  else :
          serializers [ format ] = module
              host = self . META [ 'HTTP_X_FORWARDED_HOST' ]
 from django . utils . formats import get_format
              return value + arg
              return _ ( 'PM' )
  return '' . join ( base36 )
              if event == "START_ELEMENT" and node . nodeName == "object" :
          is_accept_language_redundant = settings . USE_I18N or settings . USE_L10N
 if PY3 :
 for widget in self . widgets :
  return _ ( 'a.m.' )
 def __init__ ( self , title , link , description , language = None , author_email = None ,  author_name = None , author_link = None , subtitle = None , categories = None ,  feed_url = None , feed_copyright = None , feed_guid = None , ttl = None , ** kwargs ) :
 return WSGIHandler ( )
  except ValueError :
  return get_template ( parent )
   def save_new ( self , form , commit = True ) :
              if isinstance ( query_string , bytes ) :
  for attr in self . child_nodelists :
  elif not isinstance ( value , ( list , tuple ) ) :
 return func
          self . filter_expr , self . nodelist = filter_expr , nodelist
 if not commit :
   @ receiver ( setting_changed )
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
                   def wrapper ( * args , ** kwds ) :
 @ stringfilter
                   opts = model . _meta
                  error_text = ERRORS [ e . errno ]
          def wrapped ( * args , ** kwargs ) :
           raise parser . error_class (  "Not expecting '%s' as infix operator in if tag." % self . id  )
              try :
              iter ( patterns )
              obj_pk = obj . _get_pk_val ( )
  del form . cleaned_data [ field ]
 self . render_context = RenderContext ( )
 self . use_natural_keys = options . pop ( "use_natural_keys" , False )
 obj . attrs = self . attrs . copy ( )
   def render ( self , context ) :
               return sys . modules [ name ] is not None
              print ( "Running pre-migrate handlers for application %s" % app_config . label )
                      common_ancestor = level [ 0 ]
    @ register . filter ( is_safe = True )
 if decimal_pos is not None :
              raise CommandError ( "currently makemessages only supports domains "  "'django' and 'djangojs'" )
 def scheme ( self ) :
                  EventHandler . modified_code = FILE_MODIFIED
  return value
   key_salt = force_bytes ( key_salt )
                  raise ImproperlyConfigured (  '"%s" is not a valid regular expression: %s' %  ( regex , six . text_type ( e ) ) )
   def __repr__ ( self ) :
 from django . utils . encoding import force_bytes , force_str , force_text
      def __init__ ( self , template_string , origin ) :
 for lib in builtins :
    for model in app_models :
  result = 0
                  handler . addQuickElement ( "uri" , self . feed [ 'author_link' ] )
  r = o . isoformat ( )
          if app_config . models_module is None :
                      if sub_match :
  for name , field in self . fields . items ( ) :
 import posixpath
 choices = [ ( i , i ) for i in self . years ]
    class override ( object ) :
                              message_context = message_context . strip ( '"' )
              if contains ( elt , inst ) :
  cls . __dispatch [ klass ] [ funcname ] = method
 self . choices . append ( ( f , f . replace ( path , "" , 1 ) ) )
 if o . microsecond :
  use_workaround = (  ( current_version < ( 2 , 7 , 3 ) ) or  ( current_version >= ( 3 , 0 ) and current_version < ( 3 , 2 , 3 ) )  )
   def subwidgets ( self , name , value , attrs = None , choices = ( ) ) :
  return result
        must_be_first = False
 default_error_messages = {  'invalid_choice' : _ ( 'Select a valid choice. %(value)s is not one of the available choices.' ) ,  }
    result = ":" . join ( hextets )
 import json
          raise NotImplementedError ( 'Subclasses must define this method.' )
 char2number = { 'a' : '2' , 'b' : '2' , 'c' : '2' , 'd' : '3' , 'e' : '3' , 'f' : '3' ,  'g' : '4' , 'h' : '4' , 'i' : '4' , 'j' : '5' , 'k' : '5' , 'l' : '5' , 'm' : '6' ,  'n' : '6' , 'o' : '6' , 'p' : '7' , 'q' : '7' , 'r' : '7' , 's' : '7' , 't' : '8' ,  'u' : '8' , 'v' : '8' , 'w' : '9' , 'x' : '9' , 'y' : '9' , 'z' : '9' }
     class MultiValueField ( Field ) :
                  raise TemplateSyntaxError ( "Searching for value. Unexpected "  "end of string in column %d: %s" %  ( i , subject ) )
   def add_post_render_callback ( self , callback ) :
                  filter_name = match . group ( "filter_name" )
  for key , value in parse_qsl ( query_string or '' ,  keep_blank_values = True ,  encoding = encoding ) :
              start , end = match . span ( )
 parser . add_argument ( '--no-optimize' , action = 'store_true' , dest = 'no_optimize' , default = False ,  help = 'Do not try to optimize the squashed operations.' )
  if not want_unicode :
              extra_classes . add ( self . form . error_css_class )
   def _proxy_method ( self , * args , ** kwargs ) :
 @ stringfilter
  if format not in _serializers :
 for ip in ( self . _ipython , self . _ipython_pre_100 , self . _ipython_pre_011 ) :
  from django . apps import apps
 if os . path . exists ( potfile ) :
 output = force_text ( output )
 self . value = value
 self . deleted_objects = [ ]
     if len ( fixture_files_in_dir ) > 1 :
  if options [ "host" ] and options [ "port" ] and not options [ "socket" ] :
              file_field_list . append ( f )
 for name in namelist :
          self . dict [ item ] = None
   return result
     def parse_http_date_safe ( date ) :
      def __init__ ( self , filter_expr , nodelist ) :
   def utcoffset ( self , dt ) :
   else :
  except KeyError :
  else :
          is_dst = False if dt is None else self . _isdst ( dt )
  except ValueError :
   def resolve ( self , path ) :
          raise Exception ( "This %s instance is not writable" % self . __class__ . __name__ )
     if with_base_fields :
 compile_func . __doc__ = func . __doc__
               iter ( second_item )
  try :
  else :
 break
 WSGIServer = module . WSGIServer
  except KeyError :
              return self . nodelist . render ( context )
  import copy
              return ( t [ 0 ] . lower ( ) , t [ 1 ] )
  except OSError as e :
  key = self . to_field_name or 'pk'
 from django . db import connection
          if escaped :
     def load_template_source ( self , template_name , template_dirs = None ) :
          super ( Command , self ) . add_arguments ( parser )
                      content = content . decode ( 'utf-8' )
   def next_page_number ( self ) :
                  continue
                  c = int ( text [ 1 : ] , 16 )
 self . paginator = paginator
                  pass
   def connection ( self ) :
          key = self . cache_key ( template_name , template_dirs )
 self . choice_cache = None
          return len ( self . items )
          length = int ( arg )
                  res , args = flatten_result ( item )
 from django . core . management . sql import sql_all
 if url . endswith ( '/' ) :
  elif i < list_length - 1 :
   requires_system_checks = False
    def as_table ( self ) :
   except OSError as e :
 return len ( self . non_form_errors ( ) ) + sum ( len ( form_errors ) for form_errors in self . errors )
   def __getstate__ ( self ) :
     def _post_clean ( self ) :
 kw [ 'tzinfo' ] = tzinfo
                  raise ViewDoesNotExist (  "Could not import '%s'. Parent module %s does not exist." %  ( lookup_view , mod_name ) )
   def render ( self , name , value , attrs = None ) :
  from django . core . management . base import AppCommand
    class CheckboxInput ( Widget ) :
    for regex in RFC1123_DATE , RFC850_DATE , ASCTIME_DATE :
 return FASTCGI_HELP
  if isinstance ( s , six . memoryview ) :
              return None
 self . context = context
                  qs = qs . order_by ( self . model . _meta . pk . name )
 if PY3 :
                          extracted . close ( )
 TRANSLATOR_COMMENT_MARK = 'Translators'
                      inplural = True
 outer . update ( password . translate ( hmac . trans_5C ) )
                  self . _num_pages = 0
  sys . stdout , sys . stderr = so , se
 max_value = float ( max_value )
                  pieces . append ( re_escaped . sub ( r'\1' , piece ) )
              attrs . update ( extra_attrs )
          return ''
          return self . objects
 token = parser . next_token ( )
          return number_format ( value )
 def reset_cache ( ** kwargs ) :
     def localize_input ( value , default = None ) :
          return mark_safe ( formats . number_format ( '%d' % ( int ( d ) ) , 0 ) )
 for renamed_method in cls . renamed_methods :
 self . label_suffix = label_suffix
    @ register . filter ( is_safe = True )
              if six . PY3 :
          raise InvalidTemplateLibrary ( "Template library %s does not have "  "a variable named 'register'" %  taglib_module )
          nodelist = parser . parse ( ( 'endif' , ) )
              tmp = url . rstrip ( '/' )
 self . msgattrib_options = self . msgattrib_options [ : ] + [ '--no-location' ]
   return number
 parser . add_argument ( '--dry-run' , action = 'store_true' , dest = 'dry_run' , default = False ,  help = "Just show what migrations would be made; don't actually write them." )
          raise TemplateSyntaxError ( "%r received an invalid token: %r" %  ( bits [ 0 ] , remaining_bits [ 0 ] ) )
    hextets = ip_str . split ( ":" )
  return result
   if locales :
              nodelist = getattr ( self , attr , None )
                      want_unicode = True
          return '\n' . join ( '* %s' % e for e in self )
              def load ( self , rawdata ) :
  else :
    @ python_2_unicode_compatible
  except AttributeError :
                  return ( copyreg . _reconstructor , ( self . __class__ , object , None ) , self . __getstate__ ( ) )
 self . tags = { }
 from django . utils import six
               self . _func_path = '.' . join ( [ func . __module__ , func . __name__ ] )
  headerlist . append ( 'HTTP_' + header )
                  result . parent = self
          now = datetime . datetime ( now . year , now . month , now . day )
 def content ( self ) :
 return self . forms [ index ]
 mail . mail_admins ( subject , message , fail_silently = True ,  html_message = html_message ,  connection = self . connection ( ) )
 def loaders ( self ) :
                location = '//%s' % self . get_full_path ( )
                      os . remove ( path_to_remove )
     if not isinstance ( value , list ) :
              tz_name = force_text ( get_current_timezone_name ( ) , errors = 'ignore' )
 self . include_html = include_html
 pk_field = self . model . _meta . pk
          loader , args = loader [ 0 ] , loader [ 1 : ]
 from django . utils . crypto import get_random_string
   self . _errors [ field ] . extend ( error_list )
          try :
 return IncludeNode ( parser . compile_filter ( bits [ 1 ] ) , extra_context = namemap ,  isolated_context = isolated_context )
 empty_values = list ( validators . EMPTY_VALUES )
              file_name = data . name
  else :
 warnings . warn ( warn_msg , TranslatorCommentWarning )
              raise TemplateEncodingError ( "Templates can only be constructed "  "from unicode or UTF-8 strings." )
 self . literal = None
          locale = options . get ( 'locale' )
   return result
          zfile . write ( item )
   def __lt__ ( self , other ) :
      runfastcgi ( sys . argv [ 1 : ] )
 if not ip_str . lower ( ) . startswith ( '0000:0000:0000:0000:0000:ffff:' ) :
      global _mtimes , _win
 if self . is_bound :
 if six . PY2 :
 Tok . num += 1
 pass
      format_key = 'DATE_INPUT_FORMATS'
   def setlist ( self , key , list_ ) :
  def __init__ ( self ) :
 from django . utils . safestring import SafeData , mark_safe
    return settings . LANGUAGE_CODE
 values = [ parser . compile_filter ( arg ) for arg in args [ 1 : - 2 ] ]
  else :
 if ( self . negate and val1 != val2 ) or ( not self . negate and val1 == val2 ) :
   def __setstate__ ( self , obj_dict ) :
 try :
 from django . utils import six
 conditions_nodelists . append ( ( condition , nodelist ) )
   def configure_filter ( self , config ) :
                  cls . __dispatch [ klass ] = { }
   try :
                          if name not in logging . _handlers :
 if not template_dirs :
 wrapper . cache_clear = cache_clear
   def extract ( self , to_path = '' ) :
 t = super ( SafeBytes , self ) . __add__ ( rhs )
  if ( i - day_of_year ) < ( 4 - weekday ) :
          _translations [ language ] = DjangoTranslation ( language )
   @ property
              msg = self . style . HTTP_BAD_REQUEST ( msg )
          return path . encode ( fs_encoding )
  l = - ( - dklen // hlen )
                              from __future__ import absolute_import
                  form . _meta . fields = list ( form . _meta . fields )
          super ( FloatField , self ) . validate ( value )
                  if value is None and attr in declared_fields :
     def emit_post_migrate_signal ( created_models , verbosity , interactive , db ) :
 from lib2to3 . fixer_util import find_indentation , Name , syms , touch_import
 from django . core . management . templates import TemplateCommand
  CONVERT_PATTERN = re . compile ( r'^(?P<prefix>[a-z]+)://(?P<suffix>.*)$' )
 stats [ MISSES ] += 1
 return base64 . urlsafe_b64encode ( s ) . rstrip ( b'\n=' )
                  self . remove_potfiles ( )
 __import__ ( name )
        def reloader_thread ( ) :
              _locs_ = _globs_
 self . load_initial_data = options . get ( 'load_initial_data' )
 for i in range ( 0 , self . total_form_count ( ) ) :
    encode = curry ( _proxy_method , method = six . text_type . encode )
              return True
          from importlib . util import find_spec as importlib_find
          httpd_cls = type ( str ( 'WSGIServer' ) , ( socketserver . ThreadingMixIn , WSGIServer ) , { } )
  self . start_serialization ( )
 if not encoding :
   for entry in package_path :
  return
              return ''
  def fix ( match ) :
                        unhandled_params . remove ( param )
  for finder in sys . meta_path :
 key = bytes_to_text ( key , self . encoding )
 return [ globalpath ] + list ( settings . LOCALE_PATHS )
                  msgs = fp . read ( )
   elif intrans :
  return int ( values [ 0 ] ) , ch
 from __future__ import unicode_literals
  self . _regex_validator = validators . RegexValidator ( regex = regex )
              input_attrs = dict ( value = force_text ( v ) , ** final_attrs )
  return translation
                      if not self . _css . get ( medium ) or path not in self . _css [ medium ] :
   def as_p ( self ) :
   parser . add_library ( temp_lib )
  for slots_var in slots :
          def dec ( func ) :
 if hasattr ( timezone , 'localize' ) :
  exec ( """exec _code_ in _globs_, _locs_""" )
 default_validators = [ validators . validate_email ]
 @ stringfilter
  return mark_safe ( data )
                return False
                              result . append ( Group ( ( ( "%%(%s)s" % param ) , param ) ) )
          from django . conf import settings
 with io . open ( work_file , "w" , encoding = 'utf-8' ) as fp :
      self . _queryset = qs
 stats [ MISSES ] += 1
                  kwargs [ 'to_field' ] = self . fk . rel . field_name
              return self . empty_form . media
 from django . db . migrations . state import ProjectState
              parser . _namedCycleNodes = { }
              if not callable ( view_func ) :
  from django . apps import apps
       def __init__ ( self , key = None , sep = ':' , salt = None ) :
 break
          change = fn ( )
                  self . stdout . write ( "  No migrations to apply." )
 while i < len ( subject ) and subject [ i ] not in ( ' ' , '\t' ) :
  except StandardError as e :
 if simple_url_re . match ( middle ) :
  def to_python ( self , value ) :
  else :
    def loads ( s , key = None , salt = 'django.core.signing' , serializer = JSONSerializer , max_age = None ) :
                          date = form . cleaned_data [ unique_for ]
  connection = connections [ options [ 'database' ] ]
     class HttpResponse ( HttpResponseBase ) :
   class Command ( BaseCommand ) :
              msg = self . style . HTTP_REDIRECT ( msg )
 for part in parts :
              m = re . match ( naiveip_re , options [ 'addrport' ] )
   RUN_RELOADER = True
 return ( RAW , { } , stream )
  return id_
              self . GET = QueryDict ( mutable = True )
from __future__ import unicode_literals
 self . message_context = None
 import sys
          raise TemplateSyntaxError ( "second argument to 'regroup' tag must be 'by'" )
   if not priority :
          return json . dumps ( self . get_json_data ( escape_html ) )
 from django . utils import six
   def __iter__ ( self ) :
 localedir = os . path . join ( os . path . dirname ( settingsfile ) , 'locale' )
    def _get_timezone_name ( timezone ) :
   return result
 absolute_http_url_re = re . compile ( r"^https?://" , re . I )
  if hasattr ( parent , 'render' ) :
 ignore_patterns = options . get ( 'ignore_patterns' )
 if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
                      try :
  return True
               value = self . literal
    def render ( self , name , value , attrs = None ) :
              raise SuspiciousMultipartForm (  "The multipart parser got stuck, which shouldn't happen with"  " normal uploaded files. Check for malicious upload activity;"  " if there is none, report this to the Django developers."  )
  else :
 plist = _parse_header_params ( b';' + line )
                            errors . append ( self . get_unique_error_message ( unique_check ) )
  _add_doc ( get_unbound_function ,  """Get the function out of a possibly unbound function""" )
 memo [ id ( self ) ] = result
 from django . utils import six
 for item in sorted_items :
  if self . silent :
 substitutions [ 'initial' ] = format_html ( self . url_markup_template ,  value . url ,  force_text ( value ) )
 return _i18n_cache_key_suffix ( request , cache_key )
                              terminal_char = '>'
  except ValueError :
          raise ValueError ( 'Not a valid Python identifier: %r' % s )
                          i += 1
      plist = [ ]
 def __init__ ( self ) :
  def to_python ( self , value ) :
     class IfNode ( Node ) :
 from django . utils . encoding import smart_text
   def get_data ( self ) :
          self . _current = None
 import sys
 failures = test_runner . run_tests ( test_labels )
        try :
                              out . write ( ' npgettext(%r, %r, %r,count) ' % (  message_context ,  join_tokens ( singular , trimmed ) ,  join_tokens ( plural , trimmed ) ) )
  else :
              return ugettext ( "Please correct the duplicate data for %(field)s." ) % {  "field" : unique_check [ 0 ] ,  }
 self . per_page = int ( per_page )
              return apps . get_model ( model_identifier )
          pass
  super ( Textarea , self ) . __init__ ( default_attrs )
  from datetime import timedelta , tzinfo
    def getvalue ( self ) :
 result = logging . Formatter ( fmt , dfmt )
  def __getitem__ ( self , key ) :
from __future__ import unicode_literals
     if '.' in ip_str . split ( ':' ) [ - 1 ] :
    def j ( self ) :
      buf = StreamingBuffer ( )
              guessed_path = path . join ( tempdir , guessed_filename )
          signed_value = force_str ( signed_value )
  if end . endswith ( '/>' ) :
                      if len ( args ) != len ( params ) + len ( prefix_args ) :
 def body ( self ) :
                if not ip_str . split ( ':' ) [ - 1 ] == hextet :
                  error_messages = opts . error_messages [ NON_FIELD_ERRORS ]
      def become_daemon ( our_home_dir = '.' , out_log = '/dev/null' ,  err_log = '/dev/null' , umask = 0o022 ) :
   def tzname ( self , dt ) :
          if isinstance ( settings . TIME_ZONE , six . string_types ) and pytz is not None :
   def reader_enters ( self ) :
 while field . rel is not None :
   def as_ul ( self ) :
 def __init__ ( self , * args , ** kwargs ) :
          pattern = pattern . lower ( )
          raise ValueError ( "Base36 input too large" )
  if isinstance ( s , Promise ) :
              self . setlist ( k , v )
   endblock = parser . next_token ( )
  except ImportError :
  if not bytes :
  setattr ( filter_func , attr , value )
                      block_context . push ( self . name , push )
              raise ValueError ( "Base36 conversion input too large." )
 _active = local ( )
                  message = 'make sure the name begins with a letter or underscore'
                  for app_name , model_list in manifest . items ( ) :
              kwargs [ 'error_messages' ] = error_messages [ f . name ]
          if code_changed ( ) :
                          raise ValueError ( 'Unable to configure root '  'logger: %s' % e )
 return [ to_py ( val ) for val in value ]
      class BlockNode ( Node ) :
                  pass
 if not e . connection_reset :
  if len ( args ) > 4 :
 from decimal import Decimal , DecimalException
 self . can_read . release ( )
 logging . _acquireLock ( )
 class EventHandler ( pyinotify . ProcessEvent ) :
          super ( Select , self ) . __init__ ( attrs )
  target_app_labels_only = False
      def wrapper ( * args , ** kwargs ) :
      def exec_ ( _code_ , _globs_ = None , _locs_ = None ) :
    def inner_run ( self , * args , ** options ) :
 if key_prefix is None :
   def __str__ ( self ) :
    @ property
      class InlineForeignKeyField ( Field ) :
 class ErrorDict ( dict ) :
 def __wrapper__ ( * args , ** kw ) :
 from django . utils . translation import ugettext_lazy , pgettext_lazy
     def find_template_loader ( loader ) :
  except Exception :
  else :
    def do_ifequal ( parser , token , negate ) :
                  raise ImproperlyConfigured ( "Error importing template source loader %s - can't pass arguments to function-based loader." % loader )
      Morsel = http_cookies . Morsel
  return wraps ( func ) ( _dec )
 args , kwargs = parse_bits ( parser , bits , params ,  varargs , varkw , defaults , takes_context , function_name )
  else :
   else :
 return '%06d' % self . data . microsecond
   def __repr__ ( self ) :
 return '\n' . join ( statements )
 INDEX_PATTERN = re . compile ( r'^\[\s*(\w+)\s*\]\s*' )
                  yield line
 super ( MultiValueField , self ) . __init__ ( * args , ** kwargs )
 from django . utils . translation import ugettext_lazy as _
 translated = func ( ** kwargs )
 for item in sequence :
                  raise ImproperlyConfigured ( 'The SECURE_PROXY_SSL_HEADER setting must be a tuple containing two values.' )
 from django . forms . forms import *
 def auto_id ( self ) :
    if item [ 'author_name' ] is not None :
          module = importlib . import_module ( serializer_module )
     def learn_cache_key ( request , response , cache_timeout = None , key_prefix = None , cache = None ) :
     class Context ( BaseContext ) :
   else :
  self . error ( "bad end tag: %r" % ( rawdata [ i : j ] , ) )
                    numbers = [  MigrationAutodetector . parse_number ( migration . name )  for migration in merge_migrations  ]
                          return middleware . process_response ( request , response )
 self . url = iri_to_uri ( url )
  return left
    if sys . platform . startswith ( 'java' ) :
   return False
              return timedelta ( 0 )
   def __enter__ ( self ) :
  if ( context . autoescape and not isinstance ( output , SafeData ) ) or isinstance ( output , EscapeData ) :
   def handle ( self , * args , ** options ) :
              data = [ ]
 self . plural = lambda n : int ( n != 1 )
  def iterbytes ( buf ) :
  if self . required :
   try :
from __future__ import unicode_literals
              self . __offset = offset
                        self . children . extend ( data . children )
 return form . save ( commit = commit )
              self . stdout . write ( statement )
          return "<BaseConverter: base%s (%s)>" % ( len ( self . digits ) , self . digits )
   def prepend_token ( self , token ) :
 self . find_template_cache = { }
    extension_map = {  '.tar' : TarArchive ,  '.tar.bz2' : TarArchive ,  '.tar.gz' : TarArchive ,  '.tgz' : TarArchive ,  '.tz2' : TarArchive ,  '.zip' : ZipArchive ,  }
 sql_files . append ( os . path . join ( app_dir , "%s.sql" % opts . model_name ) )
          msg = ( "The use of the language code '%s' is deprecated. "  "Please use the '%s' translation instead." )
          return value
 base , ext = posixpath . splitext ( the_path )
  return node
              e , tb = sys . exc_info ( ) [ 1 : ]
  if migration_name == "zero" :
               def dec ( func ) :
   return statements
  if request . method == 'HEAD' :
 if words and length <= 0 :
 writer = MigrationWriter ( new_migration )
  if verbosity >= 2 :
          vary_headers = [ ]
  if self . localize :
 regexes = self . regexes
          for elt in source :
 templatetags_modules_candidates += [ '%s.templatetags' % app_config . name  for app_config in apps . get_app_configs ( ) ]
          _load_serializers ( )
              output = self . filter_expression . resolve ( context )
 return re . sub ( r'(?u)[^-\w.]' , '' , s )
                      if callable ( limit_choices_to ) :
 if filters :
 option = '--testrunner='
   else :
 for localedir in reversed ( settings . LOCALE_PATHS ) :
 MIN_NUM_FORM_COUNT = 'MIN_NUM_FORMS'
          scheme , netloc , path , query , fragment = urlsplit ( url )
 def is_hidden ( self ) :
          try :
 current = context
   def render ( self , name , value , attrs = None ) :
    def filepath_to_uri ( path ) :
 return datetime . time ( ** kw )
  del frame
  self . __dict__ . update ( obj_dict )
 return resolved_args , resolved_kwargs
     for handler in handlers :
 from django . utils . six . moves import zip
     try :
 pass
 values = _itervalues
 if constant_time_compare ( sig , self . signature ( value ) ) :
                   data = BytesIO ( self . _body )
  return super ( ModelMultipleChoiceField , self ) . prepare_value ( value )
   def id_for_label ( self , id_ ) :
              params = params [ 1 : ]
   def chars ( self , num , truncate = None , html = False ) :
  elif callable ( func ) :
      return trim_whitespace_re . sub ( ' ' , s . strip ( ) )
          return path
      is_usable = False
   def led ( self , left , parser ) :
  values = {  name : var . resolve ( context )  for name , var in six . iteritems ( self . extra_context )  }
      choice_input_class = CheckboxChoiceInput
                              return settings . TEMPLATE_STRING_IF_INVALID % self . var
  init_path = os . path . join ( migrations_directory , "__init__.py" )
    finally :
   pos = 0
 try :
  ch = next ( input_iter )
                  import_module ( '.management' , app_config . name )
 if not self . is_valid ( ) or not self . can_delete :
   return decorating_function
          ch = None
   class ResolverMatch ( object ) :
                  return result [ 0 ] , result [ 1 ]
  if lang_code :
 force_str = force_bytes
  quant = quant [ : - 1 ]
 if isinstance ( d , real_datetime ) :
          form = self . form (  auto_id = self . auto_id ,  prefix = self . add_prefix ( '__prefix__' ) ,  empty_permitted = True ,  )
                      self . setlistdefault ( key ) . extend ( value_list )
 self . lookups = None
                          try :
          self . coerce = kwargs . pop ( 'coerce' , lambda val : val )
    @ wraps ( func )
                      raise ValueError ( "MultiValueDict.update() takes either a MultiValueDict or dictionary" )
  for app_name , model_list in manifest . items ( ) :
  return path
  return message
          for d in reversed ( self . dicts ) :
          parts = [ ]
  slug_re = re . compile ( r'^[-a-zA-Z0-9_]+$' )
 from django . template . base import TemplateDoesNotExist
              self . addr = ''
    def get_declared_fields ( bases , attrs , with_base_fields = True ) :
              pass
  def __init__ ( self , digits , sign = '-' ) :
 return force_text ( quote ( force_str ( url ) , force_str ( safe ) ) )
                  continue
   def clean ( self , value ) :
 parts . reverse ( )
   from django . template . base import ( ALLOWED_VARIABLE_CHARS , BLOCK_TAG_END ,  BLOCK_TAG_START , COMMENT_TAG_END , COMMENT_TAG_START ,  FILTER_ARGUMENT_SEPARATOR , FILTER_SEPARATOR , SINGLE_BRACE_END ,  SINGLE_BRACE_START , TOKEN_BLOCK , TOKEN_COMMENT , TOKEN_TEXT , TOKEN_VAR ,  TRANSLATOR_COMMENT_MARK , UNKNOWN_SOURCE , VARIABLE_ATTRIBUTE_SEPARATOR ,  VARIABLE_TAG_END , VARIABLE_TAG_START , filter_re , tag_re )
   if ':' not in ip_str :
 pass
 self . choice_value = force_text ( choice [ 0 ] )
 from django . utils . translation import templatize
   level = config . pop ( 'level' , None )
  if not include_is_allowed ( filepath ) :
 class TranslatableFile ( object ) :
                      new_attr = old_attr
              return smart_text ( auto_id ) % self . html_name
    forms_valid = True
 outer_html = '<ul{id_attr}>{content}</ul>'
  if isinstance ( value , six . text_type ) :
              exc_type = type ( exc )
                      return
 def cleaned_data ( self ) :
   def __iter__ ( self ) :
      allow_multiple_selected = True
                  return func ( context , self . first , self . second )
          format = force_str ( default or get_format ( 'TIME_INPUT_FORMATS' ) [ 0 ] )
          unifunc = results [ "unifunc" ]
          if name is None :
 return False
 if hasattr ( extra_classes , 'split' ) :
  elif str ( level ) == level :
           return ip_str
    class Signer ( object ) :
    Field . __init__ ( self , required , widget , label , initial , help_text ,  * args , ** kwargs )
 @ stringfilter
          if cmd . endswith ( ext ) :
   if common_ancestor is None :
              for app_label in app_labels :
              raise TemplateSyntaxError ( "'%s' tag with name '%s' appears more than once" % ( bits [ 0 ] , block_name ) )
                  keys = node . getElementsByTagName ( 'natural' )
                  raise
          return self . __dt ,
 thread . start_new_thread ( main_func , args )
   if klass not in cls . __dispatch :
          super ( Command , self ) . add_arguments ( parser )
       handlers = config . get ( 'handlers' , EMPTY_DICT )
   def _get_choices ( self ) :
 return iter ( getattr ( d , _itervalues ) ( ** kw ) )
                               val , encoded = super ( SimpleCookie , self ) . value_encode ( val )
  except InputStreamExhausted :
 from decimal import Decimal , InvalidOperation , Context , ROUND_HALF_UP
      def __init__ ( self , value , text ) :
              return self . blocks [ name ] . pop ( )
          self . _queryset = queryset
  else :
              pkg_name = 'templates/' + template_name
 if day_of_year <= ( 8 - jan1_weekday ) and jan1_weekday > 4 :
from importlib import import_module
         OPERATORS = {  'or' : infix ( 6 , lambda context , x , y : x . eval ( context ) or y . eval ( context ) ) ,  'and' : infix ( 7 , lambda context , x , y : x . eval ( context ) and y . eval ( context ) ) ,  'not' : prefix ( 8 , lambda context , x : not x . eval ( context ) ) ,  'in' : infix ( 9 , lambda context , x , y : x . eval ( context ) in y . eval ( context ) ) ,  'not in' : infix ( 9 , lambda context , x , y : x . eval ( context ) not in y . eval ( context ) ) ,  '=' : infix ( 10 , lambda context , x , y : x . eval ( context ) == y . eval ( context ) ) ,  '==' : infix ( 10 , lambda context , x , y : x . eval ( context ) == y . eval ( context ) ) ,  '!=' : infix ( 10 , lambda context , x , y : x . eval ( context ) != y . eval ( context ) ) ,  '>' : infix ( 10 , lambda context , x , y : x . eval ( context ) > y . eval ( context ) ) ,  '>=' : infix ( 10 , lambda context , x , y : x . eval ( context ) >= y . eval ( context ) ) ,  '<' : infix ( 10 , lambda context , x , y : x . eval ( context ) < y . eval ( context ) ) ,  '<=' : infix ( 10 , lambda context , x , y : x . eval ( context ) <= y . eval ( context ) ) ,  }
    if html :
                  self . stdout . write ( "Checking %s for fixtures..." % humanize ( fixture_dir ) )
  if unhandled_params :
     @ register . filter ( is_safe = False )
           if initial is not None :
                  raise TypeError ( "end must be None or a string" )
  except ( ValueError , InvalidOperation , TypeError , UnicodeEncodeError ) :
 def linebreaks_filter ( value , autoescape = None ) :
     class Select ( Widget ) :
 self . test_database = options . get ( 'test_database' , False )
                  guid_attrs [ 'isPermaLink' ] = str (  item [ 'unique_id_is_permalink' ] ) . lower ( )
              sys . exit ( 3 )
          super ( EntitiesForbidden , self ) . __init__ ( )
 error = sys . modules [ __name__ + ".moves.urllib_error" ]
from django . template . base import Lexer , Parser , tag_re , NodeList , VariableNode , TemplateSyntaxError
                          if message_context :
                   if not os . path . exists ( filename ) :
                  self . stdout . write ( self . style . MIGRATE_HEADING ( "Synchronizing apps without migrations:" ) )
  if result is not None :
    def end_serialization ( self ) :
 self . negated = negated
  cc = ', ' . join ( dictvalue ( el ) for el in cc . items ( ) )
 sys . stderr . write ( "  as a FastCGI application, you will need to get flup from\n" )
              return None
  candidate_subs = dict ( zip ( prefix_args + params , text_args ) )
 attrs = { "model" : smart_text ( obj . _meta ) }
   def enter_command ( self , command , token ) :
          raise self . error ( token , "Empty variable tag" )
 val2 = parser . compile_filter ( bits [ 2 ] )
              return ( ( not pk . editable ) or ( pk . auto_created or isinstance ( pk , AutoField ) )  or ( pk . rel and pk . rel . parent_link and pk_is_not_editable ( pk . rel . to . _meta . pk ) ) )
          return value [ - 1 ]
 if nodelist . get_nodes_by_type ( ExtendsNode ) :
  __all__ = ( 'Template' , 'Context' , 'RequestContext' , 'compile_string' )
 global _default
  if isinstance ( s , ( six . text_type , Promise ) ) :
   return endpos
           if cursor :
  elif char in 'Yy' :
 self . common_logger_config ( root , config , incremental )
 if k in seen :
                  break
     def _strip_once ( value ) :
          cookies = ( pformat ( COOKIES_override )  if COOKIES_override is not None  else pformat ( request . COOKIES ) )
                  form = self . forms [ i ]
  except ValueError :
              truncate = pgettext (  'String to return when truncating text' ,  '%(truncated_text)s...' )
  options = { }
              self . inner_run ( None , ** options )
 import json
              raise TemplateSyntaxError ( "Second (optional) argument to %s tag"  " must be 'parsed'" % bits [ 0 ] )
  else :
          if not isinstance ( i , six . integer_types ) :
 from django . utils . functional import lazy
 import tarfile
     root = config . get ( 'root' , None )
              return template_name
 from email . header import Header
 _encoding = None
  else :
 return CommentNode ( )
  buffering = int ( six . PY3 )
                  defaults [ 'initial' ] = self . initial [ i ]
              dklen = hlen
   return version
          bits = [ ]
 counters [ i ] += chunk_length
      def pbkdf2 ( password , salt , iterations , dklen = 0 , digest = None ) :
 response [ 'Vary' ] = ', ' . join ( vary_headers + additional_headers )
      if not is_valid_ipv6_address ( value ) :
   if pos >= last :
   def __repr__ ( self ) :
   if is_templatized :
          raise NotImplementedError ( 'subclasses of BaseArchive must provide an extract() method' )
  def module_has_submodule ( package , module_name ) :
                      continue
          for key in self . keyOrder :
              state_frame [ self ] = compare_to
                  if bf_errors :
 value = self . queryset . get ( ** { key : value } )
  autodetector = MigrationAutodetector (  executor . loader . project_state ( ) ,  ProjectState . from_apps ( apps ) ,  )
              warning = kwargs [ 'warning' ]
 if self . data . hour == 0 :
          attrs [ 'fields' ] = fields
  elif not options [ "socket" ] and not options [ "host" ] and not options [ "port" ] :
 if label_suffix is None :
  return self . __class__ ( self )
  self . _raw_ipv6 = False
  if error_messages and f . name in error_messages :
                      resolved_args , resolved_kwargs = self . get_resolved_arguments ( context )
  password = force_bytes ( password )
                  tried . append ( filepath )
          super ( Deserializer , self ) . __init__ ( stream_or_string , ** options )
              tzinfo = utc
 field_list = [ ]
 def ordered_forms ( self ) :
 if self . __dispatch is None :
 FormSet = modelformset_factory ( model , ** kwargs )
              parentloop = context [ 'forloop' ]
                          continue
  if self . verbosity >= 2 :
   except IOError :
          package = import_module ( path )
 if level :
  for app_label , migration_names in conflicts . items ( ) :
  delattr ( obj . __class__ , self . name )
 while len ( digits ) <= abs ( exponent ) :
          candidate = str ( candidate )
    def _sanitize_ipv4_mapping ( ip_str ) :
                  answer = None
  raise value
 return wrap ( value , int ( arg ) )
 deactivate = deactivate_all = lambda : None
               for h in logger . handlers [ : ] :
  elif self . verbosity > 0 :
  return force_str ( signature )
 if id_for_label :
    @ lru_cache . lru_cache ( maxsize = 1000 )
 from django . forms . utils import ErrorList
 seen_models = connection . introspection . installed_models ( tables )
   def get ( self , key , default = None ) :
                  display_url = tmp + '/'
 import datetime
  from lib2to3 import fixer_base
 instance . keyOrder = [ ]
              if not value or not [ v for v in value if v not in self . empty_values ] :
    return False
  return super ( BaseModelFormSet , self ) . initial_form_count ( )
          meta = ( pformat ( META_override )  if META_override is not None  else pformat ( request . META ) )
  from django . conf import settings
          new_class = super ( RenameMethodsBase , cls ) . __new__ ( cls , name , bases , attrs )
 git_log = subprocess . Popen ( 'git log --pretty=format:%ct --quiet -1 HEAD' ,  stdout = subprocess . PIPE , stderr = subprocess . PIPE ,  shell = True , cwd = repo_dir , universal_newlines = True )
  except http_cookies . CookieError :
      def __get__ ( self , instance , owner ) :
                      if p . find ( ':_(' ) >= 0 :
      global _default
 from django . utils import six
    class LocaleRegexProvider ( object ) :
                          m = m + base [ medium ]
              return None
   def _dec ( func ) :
              dec_part = dec_part [ : decimal_pos ]
   @ encoding . setter
              e . django_template_source = token . source
   elif name == 'id' :
 url_fields [ 2 ] = ''
 item . update ( kwargs )
 i = i % j
 parser . add_argument ( '--all' , '-a' , action = 'store_true' , dest = 'all' ,  default = False , help = 'Updates the message files for all existing locales.' )
  else :
 return self . _coerce ( value )
    callable = callable
          self . func = func
 self . indent ( 1 )
                              t = select_template ( file_name )
          super ( PasswordInput , self ) . __init__ ( attrs )
 from django . db . migrations . writer import MigrationWriter
 from django . utils . six . moves . urllib . parse import urlsplit , urlunsplit
   chunk = b'' . join ( chunks )
  from django . core . exceptions import ValidationError
 @ stringfilter
  elif token_string . startswith ( BLOCK_TAG_START ) :
 def streaming_content ( self , value ) :
 for node in self :
          key_prefix = settings . CACHE_MIDDLEWARE_KEY_PREFIX
 if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) :
                  before_import_registry = copy . copy ( register_to . _registry )
                  keys = n . getElementsByTagName ( 'natural' )
   def _get_choices ( self ) :
 from django . template . smartif import IfParser , Literal
 raise NotImplementedError ( 'Subclasses must implement this method.' )
                  output . extend ( connection . ops . prepare_sql_script ( fp . read ( ) , _allow_fallback = True ) )
              return False
 if not commit :
              template = get_template_from_string ( source , origin , template_name )
 def capfirst ( value ) :
 for bit in bits :
                  raise TemplateSyntaxError ( "Malformed arguments to url tag" )
         global template_source_loaders
                         ns = app_list [ 0 ]
                  os . _exit ( 0 )
   if hidden_fields :
                               last = root [ PREV ]
              name = member . name
          value = list . __getitem__ ( self , key )
 self . choices . append ( ( f , f . replace ( path , "" , 1 ) ) )
 from django . utils . timezone import is_aware
              qs = queryset . filter ( ** { self . fk . name : self . instance } )
     class WSGIRequestHandler ( simple_server . WSGIRequestHandler , object ) :
   def popitem ( self ) :
  def nud ( self , parser ) :
 token = parser . next_token ( )
   def render ( self , name , value , attrs = None ) :
   def get ( self , key , default = None ) :
 _iteritems = "iteritems"
   return value
              if self . count == 0 and not self . allow_empty_first_page :
  for uclass , unique_check in all_unique_checks :
 return tempdir
 for field in self . fields . values ( ) :
  return ' ' . join ( extra_classes )
 plural_re = re . compile ( r"""^\s*plural$""" )
 server_port = str ( self . META [ 'SERVER_PORT' ] )
                          current = settings . TEMPLATE_STRING_IF_INVALID
 t = getattr ( _active , "value" , None )
 import re
 __imul__ = complain
 try :
 if t is not None :
  else :
 from IPython . Shell import IPShell
                  with open ( filepath , 'rb' ) as fp :
     class URLField ( CharField ) :
                  if pattern . namespace :
 kwargs = {  'label' : getattr ( form . fields . get ( name ) , 'label' , capfirst ( self . fk . verbose_name ) )  }
      def __init__ ( self , protocol = 'both' , unpack_ipv4 = False , * args , ** kwargs ) :
              k = force_bytes ( k , self . encoding )
      return _trans . ngettext ( singular , plural , number )
 import sys
          if code is None :
 self . options = options
 from django . utils import six
  context . dicts . append ( self )
              offset_mins = int ( tzinfo [ - 2 : ] ) if len ( tzinfo ) > 3 else 0
 return self . data . month
 path = kwargs . pop ( 'path' , None )
  except ( ValueError , TypeError ) :
  else :
          wsgi_opts [ 'bindAddress' ] = None
 if token . contents == 'empty' :
 def ljust ( value , arg ) :
 max_width = min ( ( line . endswith ( '\n' ) and width + 1 or width ) , width )
 serializers = { }
  else :
                  yield safe_join ( template_dir , template_name )
    def to_current_timezone ( value ) :
  output_transaction = True
 def floatformat ( text , arg = - 1 ) :
          return any ( "__call__" in klass . __dict__ for klass in type ( obj ) . __mro__ )
 cls . _delegate_text = six . text_type in resultclasses
 check_for_language . cache_clear ( )
 salt = force_bytes ( salt )
  try :
  resolver = get_resolver ( urlconf )
              f . required = False
  except ValueError :
          if self . _callback is not None :
  return ( ( not url_info . netloc or url_info . netloc == host ) and  ( not url_info . scheme or url_info . scheme in [ 'http' , 'https' ] ) )
      ugettext = gettext
   return True
        from django . utils . encoding import force_unicode
   from django . core . validators import EMPTY_VALUES
 return ret
          for item in self . items :
  return smart_text ( value )
     elif ch in "*?+{" :
    @ register . tag
   except TypeError :
  except Exception :
  else :
  status_code = 200
              raise CommandError ( "More than one migration matches '%s' in app '%s'. Please be more specific." % ( migration_name , app_label ) )
 return '%02d' % self . data . month
 def reverse_dict ( self ) :
                  setattr ( self . object , accessor_name , object_list )
 self . queryset = field . queryset
  string_concat = lazy ( _string_concat , six . text_type )
 if opts :
 try :
             self . _regex = regex
  from django . http import QueryDict
  raise CommandError ( "%r is not a valid %s name. Please %s." %  ( name , app_or_project , message ) )
              ext = mimetypes . guess_extension ( content_type )
              pass
    dictConfigClass = DictConfigurator
                      self . saved_forms . append ( form )
          super ( Command , self ) . add_arguments ( parser )
              yield self [ key ]
     class datetime ( real_datetime ) :
 django . setup ( )
 widget = widget or self . widget
 def streaming_content ( self ) :
 from django . http . response import ( HttpResponse , StreamingHttpResponse ,  HttpResponseRedirect , HttpResponsePermanentRedirect ,  HttpResponseNotModified , HttpResponseBadRequest , HttpResponseForbidden ,  HttpResponseNotFound , HttpResponseNotAllowed , HttpResponseGone ,  HttpResponseServerError , Http404 , BadHeaderError , JsonResponse )
 from django . utils import six
 length = int ( num )
  from django . conf import settings
 default_error_messages = {  'invalid' : _ ( 'Enter a valid URL.' ) ,  }
      return latest_date or datetime . datetime . now ( )
  self . _regex = regex
  elif hasattr ( pattern , '_callback' ) :
 import warnings
                      end_text_pos = pos
  if widgets is not None :
  for root , dirs , files in os . walk ( template_dir ) :
 return self
   if self . verbosity > 1 :
 self . show_hidden_initial = show_hidden_initial
 substitutions [ 'clear_checkbox_name' ] = conditional_escape ( checkbox_name )
    def add_never_cache_headers ( response ) :
   def date ( self ) :
   templatetags_modules = _templatetags_modules
 path = parts [ 1 : ]
 return sys . modules [ name ]
 if len ( value ) != 2 :
              return
 intrans = False
 from django . core . serializers . base import DeserializationError
 if field in self . cleaned_data :
  except AttributeError :
                  return six . text_type ( self ) % rhs
              self . _setup ( )
    def clear_script_prefix ( ) :
 from django . template . base import ( Node , NodeList , Template , Context , Library ,  TemplateSyntaxError , VariableDoesNotExist , InvalidTemplateLibrary ,  BLOCK_TAG_START , BLOCK_TAG_END , VARIABLE_TAG_START , VARIABLE_TAG_END ,  SINGLE_BRACE_START , SINGLE_BRACE_END , COMMENT_TAG_START , COMMENT_TAG_END ,  VARIABLE_ATTRIBUTE_SEPARATOR , get_library , token_kwargs , kwarg_re ,  render_value_in_context )
    fields . update ( new_class . declared_fields )
   def __str__ ( self ) :
 if self . options . get ( 'indent' ) :
                  os . unlink ( pot_path )
   if PY3 :
   if content_length < 0 :
  else :
  return copy . deepcopy ( self . _wrapped , memo )
  except ( TypeError , VariableDoesNotExist ) :
 keys = _iterkeys
                            raise ValueError ( "Non-reversible reg-exp portion: '(?%s'" % ch )
              raise AttributeError ( "'%s' object has no attribute 'cleaned_data'" % self . __class__ . __name__ )
              if self . _read_started :
    def download ( self , url ) :
          return len ( value ) == int ( arg )
  else :
 self . attrs = attrs
   if serializers is None :
          handler = SimplerXMLGenerator ( outfile , encoding )
                  kwargs [ 'initial' ] = self . initial_extra [ i - self . initial_form_count ( ) ]
 dirs = [ upath ( os . path . abspath ( os . path . realpath ( d ) ) ) for d in dirs ]
   stream = self . _stream
      lbp = 0
    def new_datetime ( d ) :
   def _get_count ( self ) :
              try :
   except IndexError :
  except AttributeError :
 self . current_token = self . next_token ( )
   if invalid_apps :
    else :
        def compare_ordering_key ( k ) :
  if remaining is None :
                      value = flags [ attr ]
              if opname not in roots :
          self . nodelist = nodelist
 condition = TemplateIfParser ( parser , bits ) . parse ( )
  tzinfo = kw . pop ( 'tzinfo' )
          time_str = time_str . decode ( 'utf-8' )
 for x in arg . split ( ':' ) :
          return json . dumps ( obj , separators = ( ',' , ':' ) ) . encode ( 'latin-1' )
  else :
   def _reverse_with_prefix ( self , lookup_view , _prefix , * args , ** kwargs ) :
   if logging_settings :
       def __init__ ( self , name , old_mod , new_mod , old_attr = None , new_attr = None ) :
   for ( k , v ) in kwargs . items ( ) :
                      middle = middle [ : - len ( closing ) ]
          if float ( value ) != 1 :
          return json . dumps ( { f : e . get_json_data ( escape_html ) for f , e in self . items ( ) } )
   if options . get ( 'no_wrap' ) :
     self . state = state
              _default = translation ( settings . LANGUAGE_CODE )
 self . _tzname = self . tzname ( dt )
              raise TemplateSyntaxError ( 'Unknown argument for %r tag: %r.' %  ( bits [ 0 ] , option ) )
                  if ignore_failures :
 self . cleaned_data [ name ] = value
              nesting += 1
 warnings . warn ( "memoize wrapper is deprecated and will be removed in "  "Django 1.9. Use django.utils.lru_cache instead." ,  RemovedInDjango19Warning , stacklevel = 2 )
          args = [ ]
                      if self . selected_fields is None or field . attname in self . selected_fields :
              value = self . _empty_value
                  raise TypeError (  "The argument `field` must be `None` when the `error` "  "argument contains errors for multiple fields."  )
              raise KeyError ( "Unknown language code %s and %s." % ( lang_code , generic_lang_code ) )
          pass
 if hasattr ( text , '__html__' ) :
                              t = file_name
                   command . stdout . write ( errors )
 return result
              return None
              sorted_items = sorted ( kwds . items ( ) )
      renderer = None
              raise CommandError ( "More than one migration matches '%s' in app '%s'. Please be more specific." % (  migration_name , app_label ) )
   def unescape_string_literal ( s ) :
 return calendar . timegm ( result . utctimetuple ( ) )
 for site in sites :
 class MinValueValidator ( BaseValidator ) :
 input_text = ugettext_lazy ( 'Change' )
 from django . utils import six , lru_cache
   except ValidationError :
    return True
  else :
  for migration in app_migrations :
  isolated_context = options . get ( 'only' , False )
 if isinstance ( widget , NumberInput ) :
   except ValueError :
 use_null_fallback = True
                  r = r [ : 12 ]
  try :
              output = ''
 if not rest :
              self . message = message
 if len ( bits ) > 2 :
  password = force_bytes ( password )
  except ( ImportError , IndentationError , NameError , SyntaxError ,  TypeError , AttributeError ) :
              raise ContentNotRenderedError ( 'The response content must be '  'rendered before it can be pickled.' )
 tags_re = '(%s)' % '|' . join ( tags )
    class HttpResponseNotModified ( HttpResponse ) :
          stream . unget ( chunk )
          self . max_digits , self . decimal_places = max_digits , decimal_places
              if key in dict_ :
  path = path_override if path_override is not None else request . path
 shell = IPShell ( argv = [ ] )
                  result_args [ i ] . append ( param )
   except VariableDoesNotExist :
                  other = other . __cast ( )
               warnings . warn ( "No fixture named '%s' found." % fixture_name )
  else :
                   current_len += 1
   except KeyError :
 try :
 self . negated = not self . negated
                  if fake :
              return list ( self . iteritems ( ) )
 if isinstance ( widget , type ) :
              return self . forms [ 0 ] . media
  self . stdout . write ( (  "%(started_at)s\n"  "Django version %(version)s, using settings %(settings)r\n"  "Starting development server at http://%(addr)s:%(port)s/\n"  "Quit the server with %(quit_command)s.\n"  ) % {  "started_at" : now ,  "version" : self . get_version ( ) ,  "settings" : settings . SETTINGS_MODULE ,  "addr" : '[%s]' % self . addr if self . _raw_ipv6 else self . addr ,  "port" : self . port ,  "quit_command" : quit_command ,  } )
              translation = self . _new_gnu_trans ( localedir )
 if scheme not in self . schemes :
          if template_dirs :
 default_error_messages = {  'invalid_choice' : _ ( 'Select a valid choice. %(value)s is not one of the available choices.' ) ,  'invalid_list' : _ ( 'Enter a list of values.' ) ,  }
              raise PageNotAnInteger ( 'That page number is not an integer' )
          return False
 return major
 iterbytes = iter
  from __future__ import unicode_literals
 for pos , elt in enumerate ( source ) :
              yield node
 self . keyOrder = list ( data ) if data else [ ]
 super ( WSGIRequestHandler , self ) . __init__ ( * args , ** kwargs )
                  replaces . extend ( migration . replaces )
 exclude = self . _get_validation_exclusions ( )
 if six . PY2 :
      def inner ( self , * args ) :
          int_part_gd = ''
  def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None ,  queryset = None , ** kwargs ) :
 if not hasattr ( other_dict , '__getitem__' ) :
                  return
                def __wrapper__ ( self , * args , ** kw ) :
  from django . apps import apps
 defaults . update ( kwargs )
 if result is not None :
 self . pubid = pubid
  if isinstance ( stream_or_string , bytes ) :
  if self . verbosity >= 2 :
 if not hasattr ( template , 'render' ) :
  if item [ 'author_link' ] is not None :
           daemonize = ( wsgi_opts [ 'bindAddress' ] is not None )
 new_migration = subclass ( "%04i_merge" % ( biggest_number + 1 ) , app_label )
    def http_date ( epoch_seconds = None ) :
   return found
 super ( ComboField , self ) . clean ( value )
    class NonCapture ( list ) :
 try :
          self . tags . update ( lib . tags )
                      ch , escaped = next ( pattern_iter )
   def clear ( self ) :
                   count , ch = get_quantifier ( ch , pattern_iter )
 return self . getvalue ( )
              if hasattr ( self , '_body' ) :
 input_formats = formats . get_format_lazy ( 'DATE_INPUT_FORMATS' )
          retval = self . expression ( )
  check_for_migrations ( app_config , connection )
                          global invalid_var_format_string
          self . _archive . close ( )
  sys . modules [ __name__ + ".moves.urllib_parse" ] = sys . modules [ __name__ + ".moves.urllib.parse" ] = Module_six_moves_urllib_parse ( __name__ + ".moves.urllib_parse" )
 validate_slug = RegexValidator ( slug_re , _ ( "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens." ) , 'invalid' )
 return from_current_timezone ( result )
          out = [ str ( x ) for x in [ self . id , self . first , self . second ] if x is not None ]
  zfile . close ( )
 iterkeys = _iterkeys
   month = MONTHS . index ( m . group ( 'mon' ) . lower ( ) ) + 1
   if not chunks :
 if self . verbatim and block_content == self . verbatim :
 root = logging . getLogger ( )
    def _iterkeys ( self ) :
  self . _boundary = boundary
  return 'th'
     raise LookupError ( lang_code )
 import time
 if m :
  try :
                          references_to_delete . setdefault ( f . rel . to , [ ] ) . append ( ( model , f ) )
 self . _num_pages = self . _count = None
              func = import_string ( path )
  class SimpleCookie ( http_cookies . SimpleCookie ) :
          middleware = middleware_class ( * m_args , ** m_kwargs )
 for attr in _urllib_parse_moved_attributes :
 from __future__ import unicode_literals
      callable = callable
 if CONTEXT_SEPARATOR in result :
  if self . domain == 'djangojs' :
              words [ i ] = escape ( word )
    def __getitem__ ( self , name ) :
      return None
      def ungettext ( singular , plural , number ) :
 str_number = str_number [ 1 : ]
                      raise ValueError (  "'%s' has no field named '%s'." % ( self . __class__ . __name__ , field ) )
      def import_module ( name , package = None ) :
 constant_arg , var_arg = match . group ( "constant_arg" , "var_arg" )
    def get_language_from_path ( path , strict = False ) :
          return self . __name
           from collections import namedtuple
      decimal_digits = '0123456789'
      def parse_header ( line ) :
 if constant :
          try :
  return timesince ( value )
              return None
              return ''
 args = args or [ ]
     db = options . get ( 'database' )
              if self . _delegate_bytes :
 code = 'invalid'
      def __init__ ( self , template , * args , ** kwargs ) :
          if filepath . startswith ( root ) :
              activate ( self . language )
   def __enter__ ( self ) :
 return data
  except NotImplementedError :
 match = (  pattern == '*' or  pattern . startswith ( '.' ) and (  host . endswith ( pattern ) or host == pattern [ 1 : ]  ) or  pattern == host  )
              raise TypeError
   else :
              temp_lib = Library ( )
 def media ( self ) :
  else :
   else :
 if self . verbosity >= 2 :
 lock = RLock ( )
 start = 0
          dot = callback . rindex ( '.' )
 if not self . is_bound :
 collect . extend ( _builtin_context_processors )
  if is_aware ( date ) :
   def __getitem__ ( self , idx ) :
  bits = token . contents . split ( )
 while rbp < self . current_token . lbp :
              top_dir = path . join ( os . getcwd ( ) , name )
 return statements
   def extract ( self , to_path ) :
   if hasattr ( filter_func , "_decorated_function" ) :
 self . position -= len ( bytes )
   sql . extend ( connection . creation . sql_for_pending_references ( model , no_style ( ) , pending_references ) )
   def run_from_argv ( self , argv ) :
            return s . get_data ( ) + s . rawdata
              class_name = base . __name__
              return 0
              return SafeBytes ( t )
          raise Exception ( "This %s instance cannot tell its position" % self . __class__ . __name__ )
  def __init__ ( self , template , context = None , content_type = None , status = None ) :
   return metaclass ( 'temporary_class' , None , { } )
              url = reverse ( view_name , args = args , kwargs = kwargs , current_app = context . current_app )
               raise AttributeError ( "%s could not be imported " % self . name )
          exp = Decimal ( '1.0' ) / ( Decimal ( 10 ) ** abs ( p ) )
   def add_filters ( self , filterer , filters ) :
 for name in MEDIA_TYPES :
 singular = [ ]
           class LocalTimezone ( tzinfo ) :
          memoryview = memoryview
          for obj in PythonDeserializer ( yaml . load ( stream , Loader = SafeLoader ) , ** options ) :
              inner_text . extend ( getInnerText ( child ) )
          attrs [ 'help_texts' ] = help_texts
                          raise ValueError ( 'Unable to configure '  'filter %r: %s' % ( name , e ) )
          if not ext . startswith ( '.' ) :
  def indexbytes ( buf , i ) :
                      d = d [ m . groups ( ) [ 0 ] ]
  self . namespace = ':' . join ( self . namespaces )
   def get ( self , key , otherwise = None ) :
 if value in self . empty_values :
  name = [ ]
                  self . cookies [ key ] [ 'expires' ] = expires
import cgi
     def format_html ( format_string , * args , ** kwargs ) :
  cc = dict ( _to_tuple ( el ) for el in  cc_delim_re . split ( response [ 'Cache-Control' ] ) )
 return (  path or '%s.%s' % ( obj . __class__ . __module__ , obj . __class__ . __name__ ) ,  obj . _constructor_args [ 0 ] ,  obj . _constructor_args [ 1 ] ,  )
 global _localtime
               try :
 self . kwargs = kwargs
 if digest is None :
   def build_absolute_uri ( self , location = None ) :
              st = os . stat ( filename )
 sites2 = _findall ( s2 , str ( year + 28 ) )
  else :
     class Widget ( six . with_metaclass ( MediaDefiningClass ) ) :
 if '()' in config :
 if not response . has_header ( 'Cache-Control' ) :
 from django . core . management . sql import sql_destroy_indexes
 try :
  p = i
 for processor in get_standard_processors ( ) + processors :
              params , varargs , varkw , defaults = getargspec ( func )
  else :
  elif pluralmatch :
                                       msg = "Could not decode base64 data: %r" % e
 from django . utils . _os import safe_join
          return self . __offset
 fk = _get_foreign_key ( parent_model , model , fk_name = fk_name )
          return t [ 0 ] . lower ( ) , t [ 1 ]
   except GeneratorExit :
 from django . utils . functional import allow_lazy
    class SyndicationFeed ( object ) :
   if process_all :
  if is_aware ( date ) :
          def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None ,  initial = None , error_class = ErrorList , label_suffix = None ,  empty_permitted = False ) :
 _format_modules_cache = { }
 fields . sort ( key = lambda x : x [ 1 ] . creation_counter )
  attrname , rest , attrvalue = m . group ( 1 , 2 , 3 )
   else :
  else :
  for sql_file in sql_files :
 expanded_template = path . normpath ( expanded_template )
                   return self . filter_function ( name , ** flags )
              return f
              raise ValueError ( 'must define at least one ordering operation: < > <= >=' )
 if i >= len ( subject ) :
  value = getattr ( _module , attr )
 if graph . nodes [ plan_node ] . replaces :
              queryset = self . model . _default_manager
  if arg is None :
   @ property
  except ( ValueError , KeyError ) :
  else :
  try :
  def __new__ ( cls , name , bases , attrs ) :
                  if hasattr ( middleware , 'process_request' ) :
              self . stdout . write ( app_name , self . style . MIGRATE_LABEL )
    add_move ( MovedModule ( "_dummy_thread" , "dummy_thread" ) )
              url_fields = split_url ( value )
              raise ValidationError (  self . error_messages [ 'max_whole_digits' ] ,  code = 'max_whole_digits' ,  params = { 'max' : ( self . max_digits - self . decimal_places ) } ,  )
    @ register . tag ( 'with' )
  except Exception :
 link_next [ PREV ] = link_prev
          ret_ip . append ( ( '0' * ( 4 - len ( hextet ) ) + hextet ) . lower ( ) )
  elif args [ 1 ] == '404' :
     ip_address_validator_map = {  'both' : ( [ validate_ipv46_address ] , _ ( 'Enter a valid IPv4 or IPv6 address.' ) ) ,  'ipv4' : ( [ validate_ipv4_address ] , _ ( 'Enter a valid IPv4 address.' ) ) ,  'ipv6' : ( [ validate_ipv6_address ] , _ ( 'Enter a valid IPv6 address.' ) ) ,  }
          return self . __offset
 from django . utils . timesince import timesince , timeuntil
      help = "Deprecated - use 'migrate' instead."
  else :
 from django . utils . deprecation import RemovedInDjango19Warning
  else :
          obj_list = self . target . resolve ( context , True )
 args = [ ]
                          out . write ( ' %s ' % p . split ( ':' , 1 ) [ 1 ] )
                  self . literal = int ( self . literal )
                  return d [ key ]
   class Iterator ( object ) :
 output = [ ]
  except TypeError :
              value = signing . get_cookie_signer ( salt = key + salt ) . unsign (  cookie_value , max_age = max_age )
              categories = [ ( c ) for c in categories ]
 if obj_pk is not None :
  i += 1
   def add_prefix ( self , field_name ) :
          tpl = "DTDForbidden(name='{}', system_id={!r}, public_id={!r})"
          if app_config . models_module is None :
   class Command ( BaseCommand ) :
              raise ValidationError ( errors )
          stream_or_string = stream_or_string . decode ( 'utf-8' )
  known_models . add ( model )
 class MaxLengthValidator ( BaseValidator ) :
 deprecation_warning = renamed_method [ 2 ]
  return translated
          message = '' . join ( tokens )
              newline = "\n"
  super ( BaseModelFormSet , self ) . add_fields ( form , index )
     class MultiValueDictKeyError ( KeyError ) :
          instance = construct_instance ( form , instance , fields , exclude )
                    url_fields [ 1 ] = url_fields [ 2 ]
  return lazy ( func , * resultclasses ) ( * args , ** kwargs )
  except NameError :
          self . callback = callback
 if settings . USE_TZ and value is not None and timezone . is_aware ( value ) :
 self . template_dirs = template_dirs
      return lazy_number ( ungettext , six . text_type , singular = singular , plural = plural , number = number )
   def getlist ( self , key , default = None ) :
          return list ( iter ( self ) )
  bits = token . contents . split ( )
              if i :
              name_str = "; " . join (  "%s in %s" % ( ", " . join ( names ) , app )  for app , names in conflicts . items ( )  )
  elif isinstance ( value , datetime . datetime ) :
          return self . _reverse_with_prefix ( lookup_view , '' , * args , ** kwargs )
              return { "xmlns" : self . ns , "xml:lang" : self . feed [ 'language' ] }
   def get_language_info ( lang_code ) :
          self . _stream = stream
 node = CycleNode ( values , name , silent = silent )
   if field . _has_changed ( initial_value , data_value ) :
              raise TemplateSyntaxError ( "Searching for value. Expected another "  "value but found end of string: %s" %  subject )
      is_usable = True
 get_function_code = operator . attrgetter ( _func_code )
  else :
   def ip_address_validators ( protocol , unpack_ipv4 ) :
          yaml . dump ( self . objects , self . stream , Dumper = DjangoSafeDumper , ** self . options )
     class SingleZipReader ( zipfile . ZipFile ) :
   def _set_regex ( self , regex ) :
 self . xml . startDocument ( )
          return [ 'parse' , 'error' , 'request' , 'response' , 'robotparser' ]
  patch_cache_control ( response , max_age = cache_timeout )
                      raise CommandError (  "errors happened while running msguniq\n%s" % errors )
              widget . input_type = 'hidden'
              data = self . to_python ( data )
              self . label = pretty_name ( name )
          _supported = OrderedDict ( settings . LANGUAGES )
  return obj_pk
   _default = None
          self . _read_started = True
   def bpython ( self ) :
     def new_date ( d ) :
  if settings . USE_THOUSAND_SEPARATOR :
 return field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
          return _curried_func ( * ( args + moreargs ) , ** dict ( kwargs , ** morekwargs ) )
 notifier = pyinotify . Notifier ( wm , EventHandler ( ) )
  import datetime
                  raise CommandError ( "Destination directory '%s' does not "  "exist, please create it first." % top_dir )
      if urlconf is None :
 from django . utils . translation import ugettext as _
          cookies = '<could not parse>'
   self . xml . endElement ( "field" )
   def __str__ ( self ) :
 end_text_pos = 0
              obj . save ( )
 neg_inf = - 1e200 * 1e200
  return no
  import datetime
from __future__ import unicode_literals
   def loads ( self , data ) :
  digits = len ( digittuple )
              base = Media ( )
 trail = punctuation + trail
              raise KeyError ( "Unknown language code %s." % lang_code )
               if args :
 if isinstance ( stream_or_string , bytes ) :
  def _get_num_pages ( self ) :
              raise TemplateSyntaxError ( "Invalid arguments provided to simple_tag" )
 from django . core . serializers import base
  warnings . warn ( "django.utils.dictconfig will be removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2 )
              value = formats . sanitize_separators ( value )
 if callable ( getattr ( self . stream , 'getvalue' , None ) ) :
              filename = filename [ : - 9 ] + ".py"
   raise TemplateDoesNotExist ( template_name )
   def __contains__ ( self , item ) :
     class TarArchive ( BaseArchive ) :
  else :
 for model in app_models :
                      continue
   __all__ = ( 'BaseFormSet' , 'formset_factory' , 'all_valid' )
              try :
   if field . rel and isinstance ( field . rel , models . ManyToManyRel ) :
                          self . _css . setdefault ( medium , [ ] ) . append ( path )
          cache_timeout = settings . CACHE_MIDDLEWARE_SECONDS
 del logging . _handlerList [ : ]
 obj . widgets = copy . deepcopy ( self . widgets )
 from django . utils import six
                      if f . rel and f . rel . to not in to_delete :
   class Serializer ( PythonSerializer ) :
              value = ConvertingTuple ( value )
          warnings . warn (  "django.utils.tzinfo.LocalTimezone will be removed in Django 1.9. "  "Use django.utils.timezone.get_default_timezone instead." ,  RemovedInDjango19Warning )
      format_key = 'DATETIME_INPUT_FORMATS'
     class FilterNode ( Node ) :
                      if inplural :
          try :
     def compress_string ( s ) :
 value = super ( IntegerField , self ) . to_python ( value )
 if file_obj :
              return None
              m = regex . search ( text , pos )
 if bf . is_hidden :
  try :
     DEFAULT_LOGGING = {  'version' : 1 ,  'disable_existing_loggers' : False ,  'filters' : {  'require_debug_false' : {  '()' : 'django.utils.log.RequireDebugFalse' ,  } ,  'require_debug_true' : {  '()' : 'django.utils.log.RequireDebugTrue' ,  } ,  } ,  'handlers' : {  'console' : {  'level' : 'INFO' ,  'filters' : [ 'require_debug_true' ] ,  'class' : 'logging.StreamHandler' ,  } ,  'null' : {  'class' : 'logging.NullHandler' ,  } ,  'mail_admins' : {  'level' : 'ERROR' ,  'filters' : [ 'require_debug_false' ] ,  'class' : 'django.utils.log.AdminEmailHandler'  }  } ,  'loggers' : {  'django' : {  'handlers' : [ 'console' ] ,  } ,  'django.request' : {  'handlers' : [ 'mail_admins' ] ,  'level' : 'ERROR' ,  'propagate' : False ,  } ,  'django.security' : {  'handlers' : [ 'mail_admins' ] ,  'level' : 'ERROR' ,  'propagate' : False ,  } ,  'py.warnings' : {  'handlers' : [ 'console' ] ,  } ,  }  }
     def parse_etags ( etag_str ) :
   except NameError :
   def validate ( self , value ) :
          self . language = language
  except ( TypeError , ValueError , UnicodeDecodeError ) :
              if self . _wrapped is empty :
   else :
              parts = [ ]
    raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
 confirm = input ( msg )
    def make_style ( opts = ( ) , ** kwargs ) :
              raise AttributeError ( "You cannot set content to a 304 (Not Modified) response" )
          token = super ( DebugLexer , self ) . create_token ( token_string , in_tag )
 def __init__ ( self , data , func , prefix ) :
 content_type = info . get ( 'content-type' )
   def add_error ( self , field , error ) :
   def get_json_data ( self , escape_html = False ) :
    def validate ( self , value ) :
  return super ( SortedDict , self ) . setdefault ( key , default )
 return self . as_widget ( TextInput ( ) , attrs , ** kwargs )
 def content ( self , value ) :
   def avoid_wrapping ( value ) :
   except Exception :
          f = os . path . join ( p , cmd )
  except AttributeError :
     class LoaderOrigin ( Origin ) :
  return result
  check_for_migrations ( app_config , connection )
   def initial_form_count ( self ) :
                          raise
  except Exception :
     class RegexURLPattern ( LocaleRegexProvider ) :
  from django . apps import apps
 import sys
               initial = False
          s = s [ : site ] + syear + s [ site + 4 : ]
                          index_sql = connection . creation . sql_indexes_for_model ( model , no_style ( ) )
 errors = [ ]
   def create_nodelist ( self ) :
          filter_name = getattr ( func , '_filter_name' , None )
   def make_aware ( value , timezone ) :
 for field in concrete_model . _meta . local_fields :
    def _initialize_handlers ( self ) :
 schemes = [ 'http' , 'https' , 'ftp' , 'ftps' ]
  if ttl is not None :
 count2 = ( since - ( seconds * count ) ) // seconds2
              raise CommandError ( "you must provide %s %s name" % (  "an" if app_or_project == "app" else "a" , app_or_project ) )
              return self . g ( )
              self . unclosed_block_tag ( parse_until )
 from django . utils . six . moves . urllib . parse import quote , unquote , urlsplit , urlunsplit
                          self . configure_root ( root , True )
          return cls ( date . year , date . month , date . day ,  time . hour , time . minute , time . second ,  time . microsecond , time . tzinfo )
                  sentinal = bit [ 2 ] + ')'
                  raise CommandError ( "App '%s' does not have migrations (you cannot selectively sync unmigrated apps)" % app_label )
      import warnings
                  bits . append ( int ( x ) )
 basedir = os . path . join ( os . path . dirname ( potfile ) , locale , 'LC_MESSAGES' )
               return
   accept = request . META . get ( 'HTTP_ACCEPT_LANGUAGE' , '' )
 asvar = None
    class UnrecognizedArchiveFormat ( ArchiveException ) :
          return self . nodelist . render ( context )
 self . stdout . write ( "%s\n" % writer . as_string ( ) )
              self . add_error ( None , e )
    if hasattr ( request , 'session' ) :
 run ( self . addr , int ( self . port ) , handler ,  ipv6 = self . use_ipv6 , threading = threading )
   def read ( self , size = None ) :
 if chunk is None :
              sys . stdout = NullDevice ( )
  self . errors
          return reversed ( self . keyOrder )
              raise TemplateSyntaxError ( '"filter %s" is not permitted.  Use the "autoescape" tag instead.' % filter_name )
              handler . addQuickElement ( "summary" , item [ 'description' ] , { "type" : "html" } )
 from django . utils . text import normalize_newlines
 link_target_attribute_re = re . compile ( r'(<a [^>]*?)target=[^\s>]+' )
          return Literal ( value )
                      self . empty_variable ( token )
                  pass
              if self . verbosity >= 2 :
 xgettext_options = [ '--from-code=UTF-8' , '--add-comments=Translators' ]
 used = name . pop ( 0 )
 for accept_lang , unused in parse_accept_lang_header ( accept ) :
   def widget_attrs ( self , widget ) :
 seen_models . add ( model )
 self . name = name or func . __name__
          return self
  first_item , second_item = list_
              self . __offset = timedelta ( minutes = offset )
          wsgi_opts = {  'maxSpare' : int ( options [ "maxspare" ] ) ,  'minSpare' : int ( options [ "minspare" ] ) ,  'maxThreads' : int ( options [ "maxchildren" ] ) ,  }
   def get_host ( self ) :
 def __init__ ( self , attrs = None , date_format = None , time_format = None ) :
              if t . token_type == TOKEN_BLOCK and t . contents == 'endcomment' :
  return Truncator ( value ) . chars ( length )
  else :
  return self . _cached_loaders
                  old_method_name = renamed_method [ 0 ]
 if name :
 last = root [ PREV ]
  except AttributeError :
                          translators_comment_start = lineno
          raise TemplateSyntaxError ( "'%s' cannot appear more than once in the same template" % bits [ 0 ] )
   self . state = first
  self . backout . append ( self . pointer )
 return six . iteritems ( super ( MultiValueDict , self ) )
 if value in self . empty_values :
          timezone = get_current_timezone ( )
 bad_app_labels = set ( )
 for code in ( lang_code , generic_lang_code ) :
  def add_arguments ( self , parser ) :
   return valid
 class SubWidget ( object ) :
                  raise ViewDoesNotExist (  "Could not import '%s'. View does not exist in module %s." %  ( lookup_view , mod_name ) )
 def __init__ ( self , name , sysid , pubid ) :
              self . input_formats = input_formats
 for level in zip ( * [ m . ancestry for m in merge_migrations ] ) :
          return item in list ( self )
 self . args = args
          response [ 'Last-Modified' ] = http_date ( )
    def allow_lazy ( func , * resultclasses ) :
 return obj
              if six . PY3 :
              return mark_safe ( self . render ( self . context ) )
   from django . template . base import ( compile_string , resolve_variable ,  unescape_string_literal , generic_tag_compiler )
  else :
     class FileInput ( Input ) :
 if self . fk . rel . field_name != self . fk . rel . to . _meta . pk . name :
 result = factory ( ** kwargs )
   class Loader ( BaseLoader ) :
     class HiddenInput ( Input ) :
   name = self . timezone . tzname ( self . data ) if self . timezone else None
          raise TemplateSyntaxError ( "Invalid templatetag argument: '%s'."  " Must be one of: %s" %  ( tag , list ( TemplateTagNode . mapping ) ) )
  return 0 , ch2
 if not form . is_valid ( ) :
  if os . path . isdir ( 'locale' ) :
 m = self . WORD_PATTERN . match ( rest )
          from importlib import find_loader as importlib_find
   delta = ( d - now ) if reversed else ( now - d )
  lines = [ ]
    widget . is_required = self . required
  elif field . rel and isinstance ( field . rel , models . ManyToOneRel ) :
              self . characters ( contents )
                  data = str ( data )
 notifier . check_events ( timeout = None )
  elif simple_url_2_re . match ( middle ) :
          raise TypeError ( s )
    def render_to_string ( template_name , dictionary = None , context_instance = None ,  dirs = None ) :
  if remaining_bits :
    self . handle_endtag ( tag . lower ( ) )
  elif bytes < PB :
 default = bytes_to_text ( default , self . encoding )
 def get_ns_resolver ( ns_pattern , resolver ) :
              code_list . append ( foreground [ v ] )
   class Command ( CheckCommand ) :
          value = datetime_safe . new_date ( value )
 if ip_str . count ( '::' ) == 1 :
 text = force_text ( text )
 return value
          natural_key = obj . natural_key ( )
                  data [ f . name ] = [ ]
  tag = bits [ 1 ]
              field = f . name
    def _string_concat ( * strings ) :
 lead = lead + opening
 p = locale . find ( '_' )
 trailing_empty_content_re = re . compile ( r'(?:<p>(?:&nbsp;|\s|<br \/>)*?</p>\s*)+\Z' )
    def __len__ ( self ) :
              pass
 self . error_messages = getattr ( options , 'error_messages' , None )
   if not lib :
    def negate ( self ) :
   repo_dir = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) )
          self . _wrapped = self . _setupfunc ( )
    potfiles = [ ]
          return self . position
          if self . verbosity >= 1 :
 self . port = DEFAULT_PORT
               age = time . time ( ) - timestamp
                  elt = [ elt ]
 if template_source_loaders is None :
  Iterator = object
              handler . startElement ( "author" , { } )
 self . files = files or { }
                          obj = settings . TEMPLATE_STRING_IF_INVALID
 from django . core . serializers . json import DjangoJSONEncoder
          return "\\u%04x" % ord ( match . group ( 1 ) )
 self . name = name
                  self . literal = mark_safe ( unescape_string_literal ( var ) )
   def __iter__ ( self ) :
 re_newlines = re . compile ( r'\r\n|\r' )
 msg = "Unclosed tag '%s'. Looking for one of: %s " % ( command , ', ' . join ( parse_until ) )
   if getattr ( obj , field . name ) is not None :
  t = getattr ( _active , "value" , None )
                  j = day_of_year + ( 7 - weekday ) + ( jan1_weekday - 1 )
                                  raise ValueError ( 'Unable to configure handler '  '%r: %s' % ( name , e ) )
  related = related . natural_key ( )
  else :
   return nodes
   def __getitem__ ( self , index ) :
  except ImportError as e :
 return _slugify ( value )
              return ZERO
 from django . conf import settings
    _cookie_encodes_correctly = http_cookies . SimpleCookie ( ) . value_encode ( ';' ) == ( ';' , '"\\073"' )
              logging . _releaseLock ( )
          self . template_parser = parser
                  msg += " The domain name provided is not valid according to RFC 1034/1035."
 matches = filter_re . finditer ( token )
 if self . method != 'POST' :
     _translations = { }
           args = token . split_contents ( )
          while True :
  else :
              logging_config_func ( logging_settings )
 def striptags ( value ) :
          raise TemplateSyntaxError ( "%r takes two arguments" % bits [ 0 ] )
              for x , y in zip ( val1 , val2 ) :
  if localized_fields == ALL_FIELDS or ( localized_fields and f . name in localized_fields ) :
 def escape_filter ( value ) :
    if text . endswith ( truncate ) :
  def prepare_value ( self , value ) :
          urlconf = get_urlconf ( )
 if key . startswith ( self . prefix ) :
                      top_errors . extend (  [ _ ( '(Hidden field %(name)s) %(error)s' ) % { 'name' : name , 'error' : force_text ( e ) }  for e in bf_errors ] )
   def gettext_noop ( message ) :
  if fields is not None and f . name not in fields :
 if not options . get ( 'addrport' ) :
          if self . options . get ( 'indent' , None ) is not None :
                  return '%s-%s-%s' % ( y , m , d )
   def __str__ ( self ) :
  target_var = bits [ - 1 ]
 for node in graph . leaf_nodes ( app_name ) :
   def timesince ( d , now = None , reversed = False ) :
          __str__ = serialize_headers
  def __getattr__ ( self , real_name ) :
              self . stdout . write ( self . style . NOTICE ( "\nYou have unapplied migrations; your app may not work properly until they are applied." ) )
  result = [ '' ]
           hextets [ index ] = hextets [ index ] . lstrip ( '0' )
   def tokenize ( self ) :
                          out . write ( ' gettext(%r) ' % g )
 parser . add_argument ( '--addrport' , default = '' ,  help = 'Port number or ipaddr:port to run the server on.' )
      _cookie_allows_colon_in_names = False
  elif isinstance ( value , six . string_types ) :
              lines [ i ] = ( "%0" + width + "d. %s" ) % ( i + 1 , escape ( line ) )
  handler . endElement ( "author" )
    _moved_attributes = [  MovedAttribute ( "cStringIO" , "cStringIO" , "io" , "StringIO" ) ,  MovedAttribute ( "filter" , "itertools" , "builtins" , "ifilter" , "filter" ) ,  MovedAttribute ( "filterfalse" , "itertools" , "itertools" , "ifilterfalse" , "filterfalse" ) ,  MovedAttribute ( "input" , "__builtin__" , "builtins" , "raw_input" , "input" ) ,  MovedAttribute ( "map" , "itertools" , "builtins" , "imap" , "map" ) ,  MovedAttribute ( "range" , "__builtin__" , "builtins" , "xrange" , "range" ) ,  MovedAttribute ( "reload_module" , "__builtin__" , "imp" , "reload" ) ,  MovedAttribute ( "reduce" , "__builtin__" , "functools" ) ,  MovedAttribute ( "StringIO" , "StringIO" , "io" ) ,  MovedAttribute ( "UserString" , "UserString" , "collections" ) ,  MovedAttribute ( "xrange" , "__builtin__" , "builtins" , "xrange" , "range" ) ,  MovedAttribute ( "zip" , "itertools" , "builtins" , "izip" , "zip" ) ,  MovedAttribute ( "zip_longest" , "itertools" , "itertools" , "izip_longest" , "zip_longest" ) ,   MovedModule ( "builtins" , "__builtin__" ) ,  MovedModule ( "configparser" , "ConfigParser" ) ,  MovedModule ( "copyreg" , "copy_reg" ) ,  MovedModule ( "dbm_gnu" , "gdbm" , "dbm.gnu" ) ,  MovedModule ( "http_cookiejar" , "cookielib" , "http.cookiejar" ) ,  MovedModule ( "http_cookies" , "Cookie" , "http.cookies" ) ,  MovedModule ( "html_entities" , "htmlentitydefs" , "html.entities" ) ,  MovedModule ( "html_parser" , "HTMLParser" , "html.parser" ) ,  MovedModule ( "http_client" , "httplib" , "http.client" ) ,  MovedModule ( "email_mime_multipart" , "email.MIMEMultipart" , "email.mime.multipart" ) ,  MovedModule ( "email_mime_text" , "email.MIMEText" , "email.mime.text" ) ,  MovedModule ( "email_mime_base" , "email.MIMEBase" , "email.mime.base" ) ,  MovedModule ( "BaseHTTPServer" , "BaseHTTPServer" , "http.server" ) ,  MovedModule ( "CGIHTTPServer" , "CGIHTTPServer" , "http.server" ) ,  MovedModule ( "SimpleHTTPServer" , "SimpleHTTPServer" , "http.server" ) ,  MovedModule ( "cPickle" , "cPickle" , "pickle" ) ,  MovedModule ( "queue" , "Queue" ) ,  MovedModule ( "reprlib" , "repr" ) ,  MovedModule ( "socketserver" , "SocketServer" ) ,  MovedModule ( "_thread" , "thread" , "_thread" ) ,  MovedModule ( "tkinter" , "Tkinter" ) ,  MovedModule ( "tkinter_dialog" , "Dialog" , "tkinter.dialog" ) ,  MovedModule ( "tkinter_filedialog" , "FileDialog" , "tkinter.filedialog" ) ,  MovedModule ( "tkinter_scrolledtext" , "ScrolledText" , "tkinter.scrolledtext" ) ,  MovedModule ( "tkinter_simpledialog" , "SimpleDialog" , "tkinter.simpledialog" ) ,  MovedModule ( "tkinter_tix" , "Tix" , "tkinter.tix" ) ,  MovedModule ( "tkinter_ttk" , "ttk" , "tkinter.ttk" ) ,  MovedModule ( "tkinter_constants" , "Tkconstants" , "tkinter.constants" ) ,  MovedModule ( "tkinter_dnd" , "Tkdnd" , "tkinter.dnd" ) ,  MovedModule ( "tkinter_colorchooser" , "tkColorChooser" ,  "tkinter.colorchooser" ) ,  MovedModule ( "tkinter_commondialog" , "tkCommonDialog" ,  "tkinter.commondialog" ) ,  MovedModule ( "tkinter_tkfiledialog" , "tkFileDialog" , "tkinter.filedialog" ) ,  MovedModule ( "tkinter_font" , "tkFont" , "tkinter.font" ) ,  MovedModule ( "tkinter_messagebox" , "tkMessageBox" , "tkinter.messagebox" ) ,  MovedModule ( "tkinter_tksimpledialog" , "tkSimpleDialog" ,  "tkinter.simpledialog" ) ,  MovedModule ( "urllib_parse" , __name__ + ".moves.urllib_parse" , "urllib.parse" ) ,  MovedModule ( "urllib_error" , __name__ + ".moves.urllib_error" , "urllib.error" ) ,  MovedModule ( "urllib" , __name__ + ".moves.urllib" , __name__ + ".moves.urllib" ) ,  MovedModule ( "urllib_robotparser" , "robotparser" , "urllib.robotparser" ) ,  MovedModule ( "xmlrpc_client" , "xmlrpclib" , "xmlrpc.client" ) ,  MovedModule ( "xmlrpc_server" , "xmlrpclib" , "xmlrpc.server" ) ,  MovedModule ( "winreg" , "_winreg" ) ,  ]
              return True
 content = content . encode ( 'utf-8' )
          if self . _done :
 if ( isinstance ( args [ 0 ] , SafeData ) and  getattr ( _dec . _decorated_function , 'is_safe' , False ) ) :
  from django . core . servers . fastcgi import runfastcgi
 from django . utils . timezone import is_aware , utc
              if new is None :
  elif _locs_ is None :
 bottom = ( number - 1 ) * self . per_page
 while not answer or answer not in "yn" :
 from django . conf import settings
                         self . _mark_post_parse_error ( )
              handler . addQuickElement ( "rights" , self . feed [ 'feed_copyright' ] )
          nodelist_empty = None
  logging . _handlers . clear ( )
           self . blocks = defaultdict ( list )
    def parse ( self ) :
  ipv4_re = re . compile ( r'^(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}$' )
          if isinstance ( data , ( MultiValueDict , MergeDict ) ) :
    if want_unicode :
              yield key
 if params . get ( 'filename' ) :
                  return template . render ( context . new ( values ) )
 if propagate is not None :
 try :
               for supported_code in _supported :
 new_args = [ ]
 if new_value == value :
 if param in unhandled_params :
  expires = None
          if name == 'regex' :
  except AmbiguityError :
    class RawPostDataException ( Exception ) :
  def to_python ( self , value ) :
 from django . conf import settings
              return int ( calendar . timegm ( self . data . utctimetuple ( ) ) )
 from __future__ import unicode_literals
   for relobj in getattr ( obj , field . name ) . iterator ( ) :
  hextets [ best_doublecolon_start : best_doublecolon_end ] = [ '' ] 
              self . msgmerge_options = self . msgmerge_options [ : ] + [ '--no-location' ]
              if can_fail :
          return key in self . dicts [ - 1 ]
  from django . utils import six
              return host
          tried = [ ]
              obj = form . instance
 pass
 if leading :
   def __copy__ ( self ) :
                  targets = [ ( app_label , None ) ]
          return self
              bytes_read += len ( bytes )
     m2m_data = { }
  def add_arguments ( self , parser ) :
          return value
   NOCOLOR_PALETTE = 'nocolor'
 self . _populated = False
              pass
              obj . pk = Model . _default_manager . db_manager ( db ) . get_by_natural_key ( * natural_key ) . pk
 return self . _handle_object ( node )
      SafeString = SafeText
                  old_attr = name
      pass
  else :
    def get_library ( library_name ) :
    def time_format ( value , format_string ) :
 lib = libraries . get ( library_name , None )
 try :
       def __init__ ( self , file ) :
                          if self . selected_fields is None or field . attname [ : - 3 ] in self . selected_fields :
              self . stdout . write ( self . style . MIGRATE_HEADING ( "Running migrations:" ) )
 hextet = ip_str . split ( '::' )
  except ImportError :
              content_length = int ( META . get ( 'HTTP_CONTENT_LENGTH' , META . get ( 'CONTENT_LENGTH' , 0 ) ) )
  if len ( list_ ) == 1 :
  return mark_safe ( '\n' . join ( output ) )
 timestamp = baseconv . base62 . decode ( timestamp )
          if encoding == 'utf-8' :
   form_class_attrs = {  'Meta' : Meta ,  'formfield_callback' : formfield_callback  }
  moves = sys . modules [ __name__ + ".moves" ] = _MovedItems ( __name__ + ".moves" )
              if self . verbosity >= 1 :
  else :
   def write ( self , outfile , encoding ) :
              value = None
from django . core . management import call_command
                          from django . template . loader import get_template , select_template
                              try :
 self . negate = negate
   def __str__ ( self ) :
          self . filter_expression = filter_expression
 if relative_dir :
           return [ etag_str ]
   @ property
              raise CommandError ( "%r conflicts with the name of an existing "  "Python module and cannot be used as a "  "project name. Please try another name." %  project_name )
  else :
 self . origin = origin
                          raise ValueError ( 'Unable to configure logger '  '%r: %s' % ( name , e ) )
  from django . core . exceptions import ValidationError , NON_FIELD_ERRORS
                          with open ( pythonrc ) as handle :
                  if isinstance ( arg , unicode ) :
      def b ( s ) :
 regex_match = language_code_prefix_re . match ( path )
  language_code_re = re . compile ( r'^[a-z]{1,8}(?:-[a-z0-9]{1,8})*$' , re . IGNORECASE )
  else :
  self . fields = fields
 return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )
 if data [ last : last + 1 ] == b'\r' :
                  continue
 if not isinstance ( stream_or_string , ( bytes , six . string_types ) ) :
 return str ( dict ( self . items ( ) ) )
    if isinstance ( self . regex , six . string_types ) :
  if self . _should_delete_form ( form ) :
          iterator = ChunkIter ( stream_or_iterable , 16384 )
              if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) :
              executor . migrate ( targets , plan , fake = options . get ( "fake" , False ) )
      def __init__ ( self , variables ) :
 if value :
 def data ( self ) :
 for member in members :
 return super ( SlugField , self ) . clean ( value )
    smart_split_re = re . compile ( r"""     ((?:         [^\s'"]*         (?:             (?:"(?:[^"\\]|\\.)*" | '(?:[^'\\]|\\.)*')             [^\s'"]*         )+     ) | \S+) """ , re . VERBOSE )
   url = hashlib . md5 ( force_bytes ( iri_to_uri ( request . build_absolute_uri ( ) ) ) )
  if labels is not None :
              output . append ( options )
 if self . parent_instance is not None :
 try :
              if cursor and connection . introspection . table_name_converter ( model . _meta . db_table ) in table_names :
          self . _assert_mutable ( )
 self . deprecation_warning = deprecation_warning
 StringIO = io . StringIO
 result = self . configurator . convert ( value )
 from django . utils import six
  filter_func = parser . find_filter ( filter_name )
  match = kwarg_re . match ( bits [ 0 ] )
  return _translations [ language ]
              return { "xmlns" : self . ns }
     self . _post = QueryDict ( '' , mutable = True )
 return dateformat . format ( value , get_format ( format or 'DATE_FORMAT' , use_l10n = use_l10n ) )
from __future__ import unicode_literals
 shutil . move ( the_path , guessed_path )
       def __add__ ( self , other ) :
   def serialize_headers ( self ) :
          project_name , target = options . pop ( 'name' ) , options . pop ( 'directory' )
   from django . template . base import ( ContextPopException , InvalidTemplateLibrary ,  TemplateDoesNotExist , TemplateEncodingError , TemplateSyntaxError ,  VariableDoesNotExist )
 def now ( parser , token ) :
 trans_real . _active = threading . local ( )
              format_locations . append ( path + '.%s' )
 super ( IncludeNode , self ) . __init__ ( * args , ** kwargs )
       self . _is_rendered = False
    def find_command ( cmd , path = None , pathext = None ) :
          length = int ( arg )
  if self . paginator . count == 0 :
  __author__ = "Benjamin Peterson <benjamin@python.org>"
              self . stream . write ( "\n" )
     parent = ( object , )
                      cls . __unicode__ = cls . __text_cast
                  self . changed_objects . append ( ( obj , form . changed_data ) )
          return not settings . DEBUG
               attrs . update ( { 'maxlength' : str ( self . max_length ) } )
 import warnings
              continue
  if isinstance ( value , datetime . date ) :
  if self . locale_paths :
 UnicodeDecodeError . __init__ ( self , * args )
              wm . add_watch ( path , mask )
from importlib import import_module
      pass
  else :
    def render ( self , context ) :
          raise TemplateSyntaxError ( "%r tag takes at least one argument: the name of the template to be included." % bits [ 0 ] )
 from django . db import connections , DEFAULT_DB_ALIAS
 return s . getvalue ( )
 parser . add_argument ( '--no-default-ignore' , action = 'store_false' , dest = 'use_default_ignore_patterns' ,  default = True , help = "Don't ignore the common glob-style patterns 'CVS', '.*', '*~' and '*.pyc'." )
  class InclusionNode ( TagHelperNode ) :
  return plural
      def advance_iterator ( it ) :
   return base . DeserializedObject ( obj , m2m_data )
  args = token . contents . split ( )
          if bits [ 2 ] == 'parsed' :
 if trim :
      def _make_decorator ( * m_args , ** m_kwargs ) :
  elif ':' not in middle and simple_email_re . match ( middle ) :
 from django . utils . deprecation import RemovedInDjango19Warning
 if sys . platform == "win32" :
    def iter_format_modules ( lang , format_module_path = None ) :
      t = s . split ( '=' , 1 )
   def h ( self ) :
  tzinfo = get_fixed_timezone ( offset )
    class EscapeBytes ( bytes , EscapeData ) :
   def _resolve_name ( name , package , level ) :
 match = _html_parser . endendtag . search ( rawdata , i + 1 )
 s = m . group ( 0 )
 INITIAL_FORM_COUNT = 'INITIAL_FORMS'
   current_fields . sort ( key = lambda x : x [ 1 ] . creation_counter )
  return retval
 if html :
          parser . add_argument ( '--plain' , action = 'store_true' , dest = 'plain' ,  help = 'Tells Django to use plain Python, not IPython or bpython.' )
 match = tagfind . match ( rawdata , i + 1 )
   while '<' in value and '>' in value :
                   selected_choices . remove ( option_value )
          render_context = self . context . render_context
 directory_created = { }
 endblock_re = re . compile ( r"""^\s*endblocktrans$""" )
 html = starttag_re . sub ( '' , html )
     def restart_with_reloader ( ) :
                                      chunk = base64 . b64decode ( chunk )
          super ( RadioChoiceInput , self ) . __init__ ( * args , ** kwargs )
                  dig1 , dig2 = inner . copy ( ) , outer . copy ( )
 readline . parse_and_bind ( "tab:complete" )
 self . items . append ( item )
   def __hash__ ( self ) :
  bits = arg . split ( ',' )
          raise ValueError ( "%r is not in a valid HTTP date format" % date )
     class RenderContext ( BaseContext ) :
   template_source_loaders = tuple ( loaders )
        @ register . filter ( is_safe = True )
 s . serialize ( queryset , ** options )
  def is_ignored ( path , ignore_patterns ) :
 base = force_text ( base )
 from __future__ import unicode_literals
   year = dt . year
              value = tuple ( value )
  import django
                  src_data = fp . read ( )
          super ( SortedDict , self ) . __delitem__ ( key )
              self . start_object ( obj )
   def parse_color_setting ( config_string ) :
 offset = 60 * int ( tzinfo [ 1 : 3 ] ) + offset_mins
 return Template ( source , origin , name )
 from django . core . management . base import CommandError
 import re
 _empty_value = ''
  except LookupError :
 factor = 0
  elif args [ 1 ] == '304' :
              self . error_class = 'errorlist {}' . format ( error_class )
  else :
 tzinfo . __init__ ( self )
   if parse_until :
                 s = s . decode ( encoding , errors )
 bits = bits [ : - 2 ]
                      data [ f . name ] = list ( qs . values_list ( 'pk' , flat = True ) )
  from django . utils . deprecation import RemovedInDjango19Warning
    def runfastcgi ( argset = [ ] , ** kwargs ) :
 def regex ( self ) :
 self . timezone = None
              output . append ( html [ field ] )
                      if self . asvar is None :
              sys . stdout = open ( out_log , 'a' , buffering )
 del bits [ : 3 ]
   except TypeError :
                  if self . cdata_tag is not None :
  os . setsid ( )
 args_safe = map ( conditional_escape , args )
          raise ValueError ( "Invalid timezone: %r" % timezone )
 self . tag ( function_name , compile_func )
 if end not in ( ">" , "/>" ) :
          header = self . _convert_to_charset ( header , 'ascii' )
                  self . stdout . write ( self . style . MIGRATE_LABEL ( "  Apply all migrations: " ) + ( ", " . join ( set ( a for a , n in targets ) ) or "(none)" ) )
           if is_aware ( value ) :
                          self . stdout . write ( "copying plural forms: %s\n" % plural_form_line )
          raise ValidationError ( _ ( 'Enter a valid integer.' ) , code = 'invalid' )
   else :
 def __init__ ( self , context , base , sysid , pubid ) :
      help = "Prints the SQL statements for the named migration."
 return obj_dict
 text_type = str
              if template . startswith ( 'file://' ) :
   else :
 for attr in _moved_attributes :
  except TypeError :
   try :
     subclass = type ( "Migration" , ( migrations . Migration , ) , {  "dependencies" : [ ] ,  "operations" : new_operations ,  "replaces" : replaces ,  } )
          if not isinstance ( s , Exception ) :
              name = self . format ( 'O' )
  else :
 if form in forms_to_delete :
   parts . append ( value )
              frame = sys . _getframe ( 1 )
   def blankout ( src , char ) :
 nodelist_loop = parser . parse ( ( 'else' , end_tag ) )
  if command in parse_until :
   def __nonzero__ ( self ) :
 trail = closing + trail
  pos = m . end ( 0 )
 result = block . nodelist . render ( context )
 del bits [ : 1 ]
                  if six . PY3 :
          try :
    def execute ( self , * args , ** options ) :
          _templatetags_modules = [ ]
  else :
     def parse_boundary_stream ( stream , max_header_size ) :
    filter_func . _filter_name = name
                  del obj_dict [ attr ]
 if self . data . hour > 11 :
                  if supported_code . startswith ( generic_lang_code + '-' ) :
  for path in format_module_path :
 from django . utils . encoding import force_text
   def skip_past ( self , endtag ) :
                              if transfer_encoding == 'base64' :
    tag_re = ( re . compile ( '(%s.*?%s|%s.*?%s|%s.*?%s)' %  ( re . escape ( BLOCK_TAG_START ) , re . escape ( BLOCK_TAG_END ) ,  re . escape ( VARIABLE_TAG_START ) , re . escape ( VARIABLE_TAG_END ) ,  re . escape ( COMMENT_TAG_START ) , re . escape ( COMMENT_TAG_END ) ) ) )
              final_output . append ( '-- The following references should be added but depend on non-existent tables:' )
              self . _start_relational_field ( field )
                      setattr ( base , old_method_name , wrapper ( new_method ) )
              self . code = code
   leave_locale_alone = True
              if not callable ( original_lookup ) and callable ( lookup_view ) :
              value = values . get ( value . lower ( ) , value )
 raise FieldError ( message )
  try :
              raise TemplateDoesNotExist
              handler . addQuickElement ( "rights" , item [ 'item_copyright' ] )
      elif self . _meta . fields and field not in self . _meta . fields :
              raise ValidationError ( self . error_messages [ 'invalid_list' ] , code = 'invalid_list' )
 base_lang = get_language ( ) . split ( '-' ) [ 0 ]
 for app_config in reversed ( list ( apps . get_app_configs ( ) ) ) :
 keys = _iterkeys
 if self . use_natural_keys :
 yield base . DeserializedObject ( obj , m2m_data )
  else :
  else :
                      self . write_po_file ( potfile , locale )
 if _win :
              self . writer_leaves ( )
 from __future__ import unicode_literals
             self . _request = request
              f . error_messages . setdefault ( 'incomplete' ,  self . error_messages [ 'incomplete' ] )
   def _resolve_lookup ( self , context ) :
 if not lib :
          _load_serializers ( )
 return out
    @ deconstructible
 import io
 if min_num is None :
 from django . utils . datastructures import MultiValueDict
   choices = property ( _get_choices , ChoiceField . _set_choices )
   elif option == 'only' :
                  qs = pk . rel . to . _default_manager . get_queryset ( )
          with self . mutex :
  def handle ( self , ** options ) :
 for type_ in reversed ( resultclass . mro ( ) ) :
              return [ ( k , self [ k ] ) for k in self . keyOrder ]
  self . cleaned_data [ name ] = value
  __all__ = ( 'WSGIServer' , 'WSGIRequestHandler' )
          return self . number < self . paginator . num_pages
  except UnicodeEncodeError :
              if code in _supported and check_for_language ( code ) :
                  self . appendlist ( force_text ( key , encoding , errors = 'replace' ) ,  force_text ( value , encoding , errors = 'replace' ) )
 if self . use_ipv6 and not socket . has_ipv6 :
          return None
 dict . __setitem__ ( self , key , http_cookies . Morsel ( ) )
 autoescape = autoescape and not isinstance ( value , SafeData )
                  self . field . choice_cache = [  self . choice ( obj ) for obj in self . queryset . all ( )  ]
   self . clean ( )
                   finder = sys . path_importer_cache [ entry ]
                              if self . verbosity >= 2 :
              return SafeText ( t )
 def ifnotequal ( parser , token ) :
    if x == 0 :
              continue
              initial = bool ( initial )
              remaining = self . _remaining if size is None else size
 self . regex = regex
  if name in lib . filters :
 return token
                  self . handle_starttag ( tag , attrs )
 return super ( BaseInlineFormSet , self ) . get_unique_error_message ( unique_check )
  self . urlconf_name = urlconf_name
          raise parser . error_class ( "Unexpected end of expression in if tag." )
  def __init__ ( self , iterable = None ) :
 def filesizeformat ( bytes ) :
  for key_value in related :
 if representative is None :
 root [ : ] = [ root , root , None , None ]
 from math import ceil
    return created_models
 format = force_str ( default or get_format ( 'DATETIME_INPUT_FORMATS' ) [ 0 ] )
                  exclude . append ( f . name )
 if cmatch :
          if site in sites2 :
   formatters = config . get ( 'formatters' , EMPTY_DICT )
              value = self . decompress ( value )
 for t in type ( res ) . mro ( ) :
 return mark_safe ( linebreaks ( value , autoescape ) )
      def _checkLevel ( level ) :
              return list ( self . itervalues ( ) )
                      self . _deleted_form_indexes . append ( i )
    class JSONSerializer ( object ) :
 from threading import local
   def _assert_mutable ( self ) :
    if commit :
                     return False
 return obj
          opts = self . _meta
      return _entity_re . sub ( _replace_entity , text )
 app_dir = apps . get_app_config ( model . _meta . app_label ) . path
   @ streaming_content . setter
          if value :
  from django . core . management . commands . check import Command as CheckCommand
              raise TemplateSyntaxError ( "Invalid filter: '%s'" % filter_name )
 return "%s%02d%02d" % ( sign , seconds // 3600 , ( seconds // 60 ) % 60 )
 assert version [ 3 ] in ( 'alpha' , 'beta' , 'rc' , 'final' )
                      try :
              for medium , paths in data . items ( ) :
  out . write ( ' pgettext(%r, %r) ' % ( message_context , g ) )
 from django . core . management . color import color_style
      msg = (  "django.utils.text.javascript_quote() is deprecated. "  "Use django.utils.html.escapejs() instead."  )
              if six . PY2 :
                              nodelist . append ( node . render ( context ) )
          ext_list . extend ( ext . replace ( ' ' , '' ) . split ( ',' ) )
   transfer_encoding = meta_data . get ( 'content-transfer-encoding' )
          return iter ( self . keyOrder )
 stamp = _time . mktime ( tt )
 output = [ format_html ( '<select{0}>' , flatatt ( final_attrs ) ) ]
   child_loggers = [ ]
          pass
  if boundary :
   else :
  else :
 connection = connections [ db ]
   manifest = OrderedDict (  ( app_name , list ( filter ( model_installed , model_list ) ) )  for app_name , model_list in all_models  )
              created_models = [ ]
 tok = '"' + guts + '"'
   def A ( self ) :
    imported_objects = { }
 self . method = None
          if k == 'fg' :
     def walk_to_end ( ch , input_iter ) :
          lookups = MultiValueDict ( )
      replaces = [ ]
 from django . utils . deprecation import RemovedInDjango19Warning
   def clean ( self , value ) :
                  value = related . natural_key ( )
          self . setting , self . nodelist = setting , nodelist
   for f in self . instance . _meta . fields :
 while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) :
  except StandardError as e :
  elif options [ 'method' ] in ( 'thread' , 'threaded' ) :
 from django . core . management . sql import check_for_migrations
                      label = ''
                          raise TemplateSyntaxError (  "'%s' received too many positional arguments" %  name )
 self . pointer = i
       comment_re = re . compile ( r"^((?:'[^']*'|[^'])*?)--.*$" )
 def namespace_dict ( self ) :
 object_data = { }
  else :
     new_class . base_fields = declared_fields
 try :
 if p >= 0 :
                      m = Media ( )
                  raise
   if not language_code_re . search ( accept_lang ) :
              initial = [ ]
              raise ValueError ( "Unsupported version: %s" % config [ 'version' ] )
 def __init__ ( self , func ) :
    for app_name in app_names :
              self . saved_forms = [ ]
       finally :
 parser . add_argument ( 'migration_name' ,  help = 'Migrations will be squashed until and including this migration.' )
 neg = 1
    class cached_property ( object ) :
    class Variable ( object ) :
          signature = base64_hmac ( self . salt + 'signer' , value , self . key )
  else :
  import re
 if not f . blank and not form_field . required and field_value in form_field . empty_values :
   def __get__ ( self , instance , type = None ) :
    def next_token ( self ) :
 new_migration = subclass ( "0001_squashed_%s" % migration . name , app_label )
   base64d = b64_encode ( data )
 from django . forms . utils import flatatt , to_current_timezone
  else :
 indexbytes = operator . getitem
              self . __args = args
              raise base . DeserializationError (  "<%s> node is missing the required '%s' attribute"  % ( node . nodeName , attr ) )
 nofollow_attr = ''
   def _has_changed ( self , initial , data ) :
                  error = error . error_dict
 exc_value . __cause__ = exc
 parts = parts [ : - 1 ]
 with open ( writer . path , "wb" ) as fh :
 RFC850_DATE = re . compile ( r'^\w{6,9}, %s-%s-%s %s GMT$' % ( __D , __M , __Y2 , __T ) )
 from django . utils import baseconv
          self . limit_value = limit_value
          def parts ( ) :
              return ''
   tag = re_tag . match ( m . group ( 0 ) )
 return '' . join ( output )
 return form
                  if isinstance ( rhs , dict ) and number :
 for key , value in list ( attrs . items ( ) ) :
 return mark_safe ( force_text ( text ) . replace ( '&' , '&amp;' ) . replace ( '<' , '&lt;' ) . replace ( '>' , '&gt;' ) . replace ( '"' , '&quot;' ) . replace ( "'" , '&#39;' ) )
                  for i_item , i_args in zip ( inner_result , inner_args ) :
              guid_attrs = { }
  def __init__ ( self , max_value = None , min_value = None , * args , ** kwargs ) :
 if language_code not in self . _namespace_dict :
   else :
from __future__ import unicode_literals
   TOKEN_TEXT = 0
 from __future__ import unicode_literals
   def split_contents ( self ) :
      def filter ( self , record ) :
  else :
  self . stream . write ( "]" )
  def _parse_header ( line ) :
              @ wraps ( fset )
              if attr in obj_dict :
 input_formats = formats . get_format_lazy ( 'DATETIME_INPUT_FORMATS' )
 exclude = [ ]
          pass
  if self . domain not in ( 'django' , 'djangojs' ) :
     class GenericIPAddressField ( CharField ) :
                  self . add_handlers ( logger , handlers )
 self . _encoding = val
 found = True
          if not hasattr ( self , '_object_dict' ) :
 import warnings
    def get_language_from_request ( request , check_path = False ) :
   def as_widget ( self , widget = None , attrs = None , only_initial = False ) :
 if not self . _is_rendered :
  except AttributeError :
   def render ( self , name , value , attrs = None ) :
  if len ( args ) < 2 :
 words = self . _wrapped . split ( )
  if reason is not None :
     class BaseModelForm ( BaseForm ) :
  def _text_words ( self , length , truncate ) :
 return val
  def __init__ ( self , content = b'' , * args , ** kwargs ) :
   if six . PY3 :
 for x in argset :
                  continue
           sup_cls = super ( cls , self )
  if token . token_type == 0 :
       def pk_is_not_editable ( pk ) :
  except TypeError :
  if last == 2 :
  yield buf . read ( )
 from django . utils import six
 get_resolver . cache_clear ( )
   if field . help_text :
          paras = [ '<p>%s</p>' % escape ( p ) . replace ( '\n' , '<br />' ) for p in paras ]
 try :
 if qs . _result_cache is not None :
   def render ( self , context ) :
 from django . db . migrations . executor import MigrationExecutor
      from unittest2 import *
     class NullBooleanSelect ( Select ) :
 def dumps ( self , obj ) :
              return ''
 msgs , errors , status = popen_wrapper ( args )
              if self . verbosity >= 1 :
 raise NotImplementedError ( 'subclasses of Serializer must provide an handle_m2m_field() method' )
                              pending_references . setdefault ( refto , [ ] ) . extend ( refs )
  except Model . DoesNotExist :
  return instance
  elif param in kwargs :
  loop_dict [ 'first' ] = ( i == 0 )
           pos_inf = 1e200 * 1e200
  elif isinstance ( value , datetime . date ) :
          pass
   def __delitem__ ( self , key ) :
  else :
  self . stderr . write ( "Error: %s" % error_text )
              handler . addQuickElement ( "pubDate" , rfc2822_date ( item [ 'pubdate' ] ) )
  from django . conf import settings
                      help_text = ''
 for punctuation in TRAILING_PUNCTUATION :
          verbosity = options . get ( 'verbosity' )
 __setitem__ = new_method_proxy ( operator . setitem )
  return rv
 import zipfile
  return r
  bits = token . split_contents ( ) [ 1 : ]
   @ property
              selected_html = ''
  if data_list [ 1 ] in self . empty_values :
          paras = [ '<p>%s</p>' % p . replace ( '\n' , '<br />' ) for p in paras ]
   def clean ( self ) :
                  return None
   else :
   quant = [ ]
          return "<%s: %r>" % ( self . __class__ . __name__ , self . var )
  except LookupError :
     def partition ( predicate , values ) :
  else :
              lookup_view_s = lookup_view
   if initial_forms > self . max_num >= 0 :
           return timezone . zone
 super ( TemplateIfParser , self ) . __init__ ( * args , ** kwargs )
   else :
 if tag not in TemplateTagNode . mapping :
                  output = fp . read ( )
                      raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
              if isinstance ( other , Promise ) :
 default_error_messages = {  'invalid' : _ ( 'Enter a valid date/time.' ) ,  }
 check_for_language = lambda x : True
 self . _clean_form ( )
   else :
          values = dict ( ( key , val . resolve ( context ) ) for key , val in  six . iteritems ( self . extra_context ) )
          return '' , ''
              choice_value , choice_label = choice
 bits = token . split_contents ( )
  result . sort ( key = lambda k : k [ 1 ] , reverse = True )
 def lower ( value ) :
          _urlconfs . value = urlconf_name
 return value . lower ( )
    @ property
   self . tokens = mapped_tokens
          return len ( self . forms )
  return format_html ( '<input{0} />' , flatatt ( final_attrs ) )
   si = open ( '/dev/null' , 'r' )
              if self . message_context :
   if msgs :
                          idx = m . groups ( ) [ 0 ]
              kw [ 'microsecond' ] = kw [ 'microsecond' ] . ljust ( 6 , '0' )
  for p in parts [ 1 : ] :
 self . old_timezone = getattr ( _active , 'value' , None )
                  continue
   def eval ( self , context ) :
 target_app_labels_only = True
 return candidate_pat % candidate_subs
    return week_number
 message = _ ( 'Enter a valid URL.' )
 return [ value . date ( ) , value . time ( ) . replace ( microsecond = 0 ) ]
 if value is not None :
 params = { 'datetime' : value , 'current_timezone' : current_timezone }
 self . value = set ( force_text ( v ) for v in self . value )
 statements = sql_create ( app_config , self . style , connection )
              result . setFormatter ( formatter )
 related_att = getattr ( obj , field . get_attname ( ) )
 if file_ :
   @ deconstructible
    @ register . tag ( 'extends' )
 setattr ( self , attr , value )
  else :
 lbp = 0
          raise TemplateSyntaxError ( "'autoescape' tag requires exactly one argument." )
 try :
    class Paginator ( object ) :
          if key not in self :
                              filemsg = ''
   def __repr__ ( self ) :
    def get_full_path ( self ) :
   kwargs . update ( self . default_args )
    def number_format ( value , decimal_pos = None , use_l10n = None , force_grouping = False ) :
              return '(NOT (%s: %s))' % ( self . connector , ', ' . join ( [ str ( c ) for c  in self . children ] ) )
 with lock :
  LUHN_ODD_LOOKUP = ( 0 , 2 , 4 , 6 , 8 , 1 , 3 , 5 , 7 , 9 )
              c = config . pop ( '()' )
  if command . verbosity > 1 :
  for domain in domains :
                   kwargs [ str ( param ) ] = value
   if six . PY2 and value > sys . maxint :
 if not isinstance ( list_ , ( tuple , list ) ) or len ( list_ ) != 2 :
  except _BASE64_DECODE_ERROR :
    ext = self . splitext ( guessed_filename ) [ 1 ]
              form = self . forms [ i ]
   del attr
  if self . decimal_places is not None and decimals > self . decimal_places :
  except ValueError :
 from django . utils . six . moves import http_cookies
 m = data . get ( self . month_field % name )
              view_func = getattr ( mod , func_name )
          httpd_cls = WSGIServer
              result = datetime . datetime ( value . year , value . month , value . day )
      import threading
              widget . is_localized = True
  except ValueError :
  else :
 from django . utils . _os import upath
 if origin :
 outdict = { }
           self . sep = force_str ( sep )
 from django . db . migrations . optimizer import MigrationOptimizer
 locale = to_locale ( lang )
 return scheme in self . url_schemes
          raise AttributeError ( "This %s instance has no `content` attribute. "  "Use `streaming_content` instead." % self . __class__ . __name__ )
          value = self . to_python ( value ) . strip ( )
   return neg , res
   writer = MigrationWriter ( new_migration )
  else :
  matches = True
    invalid_var_format_string = None
              return fastcgi_help ( "ERROR: Invalid option for daemonize "  "parameter." )
 if not url_fields [ 0 ] :
 self . xml . endElement ( "django-objects" )
          if params [ 0 ] == 'context' :
          return list ( self ) != other
                      os . makedirs ( filename )
                          link = cache_get ( key )
 from django . utils . translation import ugettext_lazy as _
              return path . split ( '/' , 1 )
 klass . prefix = '\n' + find_indentation ( node )
          return None
   original_lookup = lookup_view
      def model_to_dict ( instance , fields = None , exclude = None ) :
 if _cached_modules == module_values :
                  prefix = settings . STATIC_URL
 return result
    def lazy ( func , * resultclasses ) :
 return '%02d' % self . data . day
  except ( ValueError , TypeError ) :
    if opts . model :
 def __init__ ( self , subject ) :
 if loader is not None :
      @ lru_cache . lru_cache ( maxsize = None )
    class DictWrapper ( dict ) :
                      return self . strptime ( value , format )
   __all__ = (  'Field' , 'CharField' , 'IntegerField' ,  'DateField' , 'TimeField' , 'DateTimeField' ,  'RegexField' , 'EmailField' , 'FileField' , 'ImageField' , 'URLField' ,  'BooleanField' , 'NullBooleanField' , 'ChoiceField' , 'MultipleChoiceField' ,  'ComboField' , 'MultiValueField' , 'FloatField' , 'DecimalField' ,  'SplitDateTimeField' , 'IPAddressField' , 'GenericIPAddressField' , 'FilePathField' ,  'SlugField' , 'TypedChoiceField' , 'TypedMultipleChoiceField'  )
          attrs = [ "__doc__" , "__name__" ]
                  _error_files . append ( filename )
                  def handle_m2m ( value ) :
 if data in self . children :
      _prefixes = local ( )
     class HttpResponseRedirectBase ( HttpResponse ) :
  inputs . append ( format_html ( '<input{0} />' , flatatt ( input_attrs ) ) )
 if queryset is None :
  else :
          super ( Command , self ) . add_arguments ( parser )
          indent = '\t' * tabs
      setattr ( Module_six_moves_urllib_parse , attr . name , attr )
  Module_six_moves_urllib_request . _moved_attributes = _urllib_request_moved_attributes
   def non_field_errors ( self ) :
              value = field . clean ( value )
              def m2m_convert ( n ) :
  if not isinstance ( value , ( list , tuple ) ) :
     else :
               param , value = list ( six . iteritems ( kwarg ) ) [ 0 ]
  else :
    class HttpResponseBase ( six . Iterator ) :
 app_models = router . get_migratable_models ( app_config , connection . alias , include_auto_created = True )
                    self . translate = True
        @ register . filter ( is_safe = False )
              if callable ( name ) :
  if failures :
   def dst ( self , dt ) :
              return self . _stream . read ( * args , ** kwargs )
              handler . addQuickElement ( "link" , '' ,  { "rel" : "enclosure" ,  "href" : item [ 'enclosure' ] . url ,  "length" : item [ 'enclosure' ] . length ,  "type" : item [ 'enclosure' ] . mime_type } )
   def _raw_value ( self , fieldname ) :
                  qs = self . model . _default_manager . get_queryset ( )
 return tpl . format ( self . name , self . sysid , self . pubid )
          raise ValueError ( "The protocol '%s' is unknown. Supported: %s"  % ( protocol , list ( ip_address_validator_map ) ) )
 def firstof ( parser , token ) :
  if self . feed [ 'feed_copyright' ] is not None :
 prefixed = name + "."
   class Loader ( BaseLoader ) :
                  attr_list [ 3 ] |= termios . ECHO
 values = '' . join ( quant ) . split ( ',' )
  output . append ( '</optgroup>' )
   if not args :
                      args . append ( ( False , Variable ( constant_arg ) . resolve ( { } ) ) )
                  if t . contents . lstrip ( ) . startswith ( TRANSLATOR_COMMENT_MARK ) :
 if self . verbosity >= 1 and sql :
 return mark_safe ( '\n' . join ( output ) )
                  raise base . DeserializationError ( "<field> node is missing the 'name' attribute" )
  return format_html ( '<input{0} />' , flatatt ( final_attrs ) )
 result = logging . Filter ( name )
 from django . utils . encoding import force_text , iri_to_uri
 if exit_code < 0 :
       mime_type = 'application/atom+xml; charset=utf-8'
 super ( SplitDateTimeField , self ) . __init__ ( fields , * args , ** kwargs )
  dot = len ( package )
          super ( ModelMultipleChoiceField , self ) . __init__ ( queryset , None ,  cache_choices , required , widget , label , initial , help_text ,  * args , ** kwargs )
 if self . verbosity > 1 :
 sort = complain
   def values ( self ) :
 default_validators = [ ]
                  migration . branch = migration . ancestry [  ( migration . ancestry . index ( common_ancestor ) + 1 ) :  ]
 class Media ( object ) :
  target = parser . compile_filter ( bits [ 1 ] )
 return MONTHS_3 [ self . data . month ]
    if six . PY3 :
    def get_format ( format_type , lang = None , use_l10n = None ) :
          if value is None :
      def __init__ ( self , media = None , ** kwargs ) :
 if not commit :
     key = hashlib . sha1 ( key_salt + secret ) . digest ( )
 add_to_builtins ( 'django.template.loader_tags' )
  except ImportError :
                              out . write ( blankout ( part , 'S' ) )
          cookiedict [ key ] = c . get ( key ) . value
    def writer_enters ( self ) :
  else :
  def add_item_elements ( self , handler , item ) :
              pass
              return timesince ( value , arg )
 parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
  def __init__ ( self ) :
 from django . utils . encoding import force_text , python_2_unicode_compatible
   elif self . META . get ( 'CONTENT_TYPE' , '' ) . startswith ( 'application/x-www-form-urlencoded' ) :
 link_prev , link_next , key , result = link
   def normalize_newlines ( text ) :
                  warnings . warn ( "A {% csrf_token %} was used in a template, but the context did not provide the value.  This is usually caused by not using RequestContext." )
              pass
  from django . conf import settings
 from django . template . loader import BaseLoader , get_template_from_string , find_template_loader , make_origin
 words = word_split_re . split ( force_text ( text ) )
     class IPAddressField ( CharField ) :
 self . auto_id = auto_id
  if self . connector == conn_type :
 from django . template . loader import BaseLoader
  return data
  else :
   else :
 match = date_re . match ( value )
 for app_label in app_labels :
  data [ field . name ] = value
      def localtime ( value , timezone = None ) :
 date_keys = ( 'updateddate' , 'pubdate' )
  if localized_fields is not None :
  strip_spaces_between_tags = allow_lazy ( strip_spaces_between_tags , six . text_type )
    value = value . astimezone ( timezone )
    def save_instance ( form , instance , fields = None , fail_message = 'saved' ,  commit = True , exclude = None , construct = True ) :
   try :
 if year < 100 :
  except UnicodeDecodeError :
          super ( ExternalReferenceForbidden , self ) . __init__ ( )
  filter_re = re . compile ( filter_raw_string , re . UNICODE | re . VERBOSE )
              if isinstance ( option_label , ( list , tuple ) ) :
 self . _leftover = b'' . join ( [ bytes , self . _leftover ] )
                         consume_next = False
  from collections import OrderedDict
 if quote_double_quotes :
                  ser_fmt = parts [ - 1 ]
          self . s = s
  return six . text_type ( s ) . encode ( encoding , errors )
          return date ( self . year , self . month , self . day )
 return self . serialize_headers ( ) + b'\r\n\r\n' + self . content
           value = timezone . normalize ( value )
          return lookup_view
          super ( QueryDict , self ) . __init__ ( )
          return maybe
  except Exception as e :
          self . _archive . list ( * args , ** kwargs )
  __version__ = "0.1"
    @ register . filter ( is_safe = True )
                                  handler . new_file ( field_name , file_name ,  content_type , content_length ,  charset , content_type_extra )
 if not isinstance ( value , ConvertingDict ) and isinstance ( value , dict ) :
                  host = '%s:%s' % ( host , server_port )
          resolve ( path , urlconf )
    else :
          if name is None and compile_function is None :
 val2 = self . var2 . resolve ( context , True )
   def log_message ( self , format , * args ) :
 MONTHS_AP = {  1 : pgettext_lazy ( 'abbrev. month' , 'Jan.' ) ,  2 : pgettext_lazy ( 'abbrev. month' , 'Feb.' ) ,  3 : pgettext_lazy ( 'abbrev. month' , 'March' ) ,  4 : pgettext_lazy ( 'abbrev. month' , 'April' ) ,  5 : pgettext_lazy ( 'abbrev. month' , 'May' ) ,  6 : pgettext_lazy ( 'abbrev. month' , 'June' ) ,  7 : pgettext_lazy ( 'abbrev. month' , 'July' ) ,  8 : pgettext_lazy ( 'abbrev. month' , 'Aug.' ) ,  9 : pgettext_lazy ( 'abbrev. month' , 'Sept.' ) ,  10 : pgettext_lazy ( 'abbrev. month' , 'Oct.' ) ,  11 : pgettext_lazy ( 'abbrev. month' , 'Nov.' ) ,  12 : pgettext_lazy ( 'abbrev. month' , 'Dec.' )  }
  else :
          tzinfo = timezone . get_current_timezone ( ) if settings . USE_TZ else None
 super ( InlineForeignKeyField , self ) . __init__ ( * args , ** kwargs )
      if isinstance ( value , bytes ) :
          self . _assert_mutable ( )
  if i < self . initial_form_count ( ) and 'instance' not in kwargs :
  from django . core . management . base import CommandError
  _tc = http_cookies . SimpleCookie ( )
   def process ( self , command , domain ) :
 try :
 from django . utils . safestring import mark_safe
                  app_list = resolver . app_dict [ ns ]
   default = 'DEFAULT'
      if not _serializers :
  else :
    def pgettext ( context , message ) :
              return '1'
          return True
  return format_html (  '<ul class="errorlist">{0}</ul>' ,  format_html_join ( '' , '<li>{0}{1}</li>' , ( ( k , force_text ( v ) ) for k , v in self . items ( ) ) )  )
 def linenumbers ( value , autoescape = None ) :
  if not callable ( getattr ( template , 'render' , None ) ) :
                  new = name
          return bool ( self . dict )
 toktext = match . group ( name )
  else :
     for field in concrete_model . _meta . many_to_many :
 import traceback
 for filename in gen_filenames ( ) :
  def __init__ ( self , * args , ** kwargs ) :
  _func_closure = "__closure__"
 SINGLE_BRACE_END = '}'
 sys . stderr . write ( "  Unable to load the flup package.  In order to run django\n" )
  MONTHS_ALT = {  1 : pgettext_lazy ( 'alt. month' , 'January' ) ,  2 : pgettext_lazy ( 'alt. month' , 'February' ) ,  3 : pgettext_lazy ( 'alt. month' , 'March' ) ,  4 : pgettext_lazy ( 'alt. month' , 'April' ) ,  5 : pgettext_lazy ( 'alt. month' , 'May' ) ,  6 : pgettext_lazy ( 'alt. month' , 'June' ) ,  7 : pgettext_lazy ( 'alt. month' , 'July' ) ,  8 : pgettext_lazy ( 'alt. month' , 'August' ) ,  9 : pgettext_lazy ( 'alt. month' , 'September' ) ,  10 : pgettext_lazy ( 'alt. month' , 'October' ) ,  11 : pgettext_lazy ( 'alt. month' , 'November' ) ,  12 : pgettext_lazy ( 'alt. month' , 'December' )  }
              return t [ 0 ]
 loader = MigrationLoader ( connection )
                   absolute_path = self . download ( template )
              return None
          _load_serializers ( )
    try :
          return s
   save . alters_data = True
 for func , unused in filter_expr . filters :
                   args . append ( parser . compile_filter ( bit ) )
              self . DSTOFFSET = self . STDOFFSET
     class VariableNode ( Node ) :
     def include_is_allowed ( filepath ) :
              for root , dirs , files in sorted ( os . walk ( self . path ) ) :
 raise
  return TimestampSigner ( key , salt = salt ) . sign ( base64d )
  except KeyError :
          timestamp = datetime . datetime . utcfromtimestamp ( int ( timestamp ) )
   default_error_messages = {  'required' : _ ( 'This field is required.' ) ,  }
    def ensure_echo_on ( ) :
          return int ( value ) + int ( arg )
          if self . language is not None :
          try :
 inplural = False
  else :
      regex = re . compile (  r'^(?:[a-z0-9\.\-]*)://'  r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}(?<!-)\.?)|'  r'localhost|'  r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|'  r'\[?[A-F0-9]*:[A-F0-9:]+\]?)'  r'(?::\d+)?'  r'(?:/?|[/?]\S+)$' , re . IGNORECASE )
  import copy
              raise TypeError ( "update expected at most 1 arguments, got %d" % len ( args ) )
 self . _add_local_translations ( )
          if limit is None or len ( x ) <= limit :
              cached = _format_cache [ cache_key ]
  except UnicodeDecodeError :
          attrs = super ( CharField , self ) . widget_attrs ( widget )
 if not match :
 if not hasattr ( obj , "_meta" ) :
                      if hasattr ( middleware , 'process_response' ) :
          option = remaining_bits . pop ( 0 )
                              if field in form . cleaned_data :
 value = super ( IntegerField , self ) . to_python ( value )
 from django . utils . http import http_date
              top = self . count
   if errors :
 result . key = key
 filename = tmp . split ( '/' ) [ - 1 ]
      help = ( "Creates a Django project directory structure for the given "  "project name in the current directory or optionally in the "  "given directory." )
          wsgi_opts [ 'bindAddress' ] = ( options [ "host" ] , int ( options [ "port" ] ) )
      if palette == PALETTES [ NOCOLOR_PALETTE ] :
           return __proxy__ ( args , kw )
      must_be_first = True
      if not hasattr ( self , '_ordering' ) :
 top_errors = self . non_field_errors ( )
  import codecs
 from django . utils . safestring import mark_safe
              fn ( * args , ** kwargs )
 def autoescape ( parser , token ) :
      @ register . filter ( is_safe = False )
                          raise CommandError (  "Unable to find a locale path to store translations for file %s" % file_path )
 return tf . format ( format_string )
 msgs , errors , status = popen_wrapper ( args )
  except StopIteration :
     class SelectMultiple ( Select ) :
   except StandardError as e :
 new_method = base . __dict__ . get ( new_method_name )
              raise ValidationError (  self . error_messages [ 'max_decimal_places' ] ,  code = 'max_decimal_places' ,  params = { 'max' : self . decimal_places } ,  )
   if not func . is_usable :
    wrapper . __wrapped__ = user_function
 if limit_choices_to is not None :
 LIGHT_PALETTE = 'light'
  nodelist = parser . parse ( ( 'endblock' , ) )
              docs_version = '%d.%d' % django . VERSION [ : 2 ]
from django . core . management . base import BaseCommand , CommandError
              return
 self . stdout . flush ( )
 output = self . nodelist . render ( context )
  tt = time . localtime ( stamp )
  from django . apps import apps
          if not value :
    except IndexError :
  def __init__ ( self , data , encoder = DjangoJSONEncoder , safe = True , ** kwargs ) :
                          self . stdout . write ( 'ignoring directory %s\n' % dirname )
 value = normalize_newlines ( value )
 valid = True
  return ""
                      e . message = self . error_messages [ e . code ]
  form . _meta . fields . append ( self . fk . name )
   def e ( self ) :
   return format_html (  '<ul class="{0}">{1}</ul>' ,  self . error_class ,  format_html_join ( '' , '<li>{0}</li>' , ( ( force_text ( e ) , ) for e in self ) )  )
  if self . feed [ 'subtitle' ] is not None :
  except NoReverseMatch :
              return self . _truncate_html ( length , truncate , self . _wrapped , length , True )
 try :
              return
 _super ( SimpleLazyObject , self ) . __init__ ( )
  def __init__ ( self ) :
       for app_config in apps . get_app_configs ( ) :
 from django . utils import six , lru_cache
 from django . utils . encoding import force_bytes
 def id_for_label ( self ) :
   class SimplerXMLGenerator ( XMLGenerator ) :
    def sql_indexes ( app_config , style , connection ) :
 if 'id' in self . attrs :
 return random_module . choice ( value )
              parentmod , submod = get_mod_func ( mod_name )
 tf = TimeFormat ( value )
 getattr ( combined , 'add_' + name ) ( getattr ( other , '_' + name , None ) )
 major = '.' . join ( str ( x ) for x in version [ : parts ] )
 if not ( self . inverse_match is not bool ( self . regex . search (  force_text ( value ) ) ) ) :
  builtins = [ ]
    id = "literal"
 from django . utils . encoding import force_str , force_text
          return 0
 if not value :
  self . _stream . unget ( unused_char )
    @ register . filter ( is_safe = False )
          opts = self . _meta
           raise parser . error_class (  "Not expecting '%s' in this position in if tag." % self . id  )
 from subprocess import PIPE , Popen
 response . add_post_render_callback ( callback )
   RAISE_ERROR = object ( )
    def _itervalues ( self ) :
  if value is None :
  elif tzinfo is not None :
 itervalues = _itervalues
                  dirs . append ( app_dir )
                      plural_form_line = force_str ( m . group ( 'value' ) )
          result = super ( SortedDict , self ) . pop ( k , * args )
 return self . data . day
    try :
          offset = date . tzinfo . utcoffset ( date )
  if compress :
                  self . bad_cookies = set ( )
 nodelist = parser . parse ( )
 exit_code = os . spawnve ( os . P_WAIT , sys . executable , args , new_environ )
          if not getattr ( f , 'editable' , False ) :
 if construct :
                  continue
                  return min ( self . management_form . cleaned_data [ TOTAL_FORM_COUNT ] , self . absolute_max )
  in_tag = not in_tag
              self . __name = name
 if not self . use_natural_primary_keys or not hasattr ( obj , 'natural_key' ) :
 if hasattr ( timezone , 'normalize' ) :
 import datetime
                              try :
                  self . event_stream . expandNode ( node )
     @ python_2_unicode_compatible
 import random as random_module
 message = _ ( 'Enter a valid value.' )
    initial_value = initial if initial is not None else ''
 import os
 import yaml
          return value
 self . tagname = self . tag ( )
 if t is not None :
              r = o . isoformat ( )
          return is_library_missing ( path )
   def page ( self , number ) :
   if ',' in args [ 1 ] :
  from django . utils import six
  except ValueError :
     class DjangoTranslation ( gettext_module . GNUTranslations ) :
  else :
 if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
                  slots = [ slots ]
  except Exception :
 for attr in _urllib_response_moved_attributes :
 result = datetime . datetime ( year , month , day , hour , min , sec )
          raise ValueError ( "Base36 input too large" )
  except ( ValueError , OverflowError , InvalidOperation ) :
  row_data = tuple ( d . _get_pk_val ( ) if hasattr ( d , '_get_pk_val' ) else d  for d in row_data )
 self . chunk_size = chunk_size
  try :
 migration . ancestry = loader . graph . forwards_plan ( ( app_label , migration_name ) )
   def pop ( self ) :
    class URLInput ( TextInput ) :
 @ stringfilter
  try :
              lines [ i ] = ( "%0" + width + "d. %s" ) % ( i + 1 , line )
 link [ NEXT ] = root
  return template
          orig_vars = cls . __dict__ . copy ( )
   if filename not in _error_files :
   def save_existing_objects ( self , commit = True ) :
          raise TemplateSyntaxError ( "'for' statements should have at least four"  " words: %s" % token . contents )
 return AutoEscapeControlNode ( ( arg == 'on' ) , nodelist )
 url = hashlib . md5 ( force_bytes ( iri_to_uri ( request . build_absolute_uri ( ) ) ) )
              self . full_clean ( )
 return make_middleware_decorator ( middleware_class )
 raise self . source_error ( source , msg )
  if subject [ i ] in ( '"' , "'" ) :
          cache = caches [ settings . CACHE_MIDDLEWARE_ALIAS ]
  @ total_ordering
     def __repr__ ( self ) :
  else :
          if response . streaming :
              return Media ( ** { str ( name ) : getattr ( self , '_' + name ) } )
 from django . utils . encoding import force_text , smart_text
  if os . path . exists ( pofile ) :
  from django . utils . deprecation import RemovedInDjango19Warning
  super ( RegexField , self ) . __init__ ( max_length , min_length , * args , ** kwargs )
              reset_translations ( )
 while self . tokens :
  elif autoescape :
  return result
                  return func . __get__ ( self , type ( self ) ) ( * args2 , ** kwargs2 )
 if categories :
    def resolve_context ( self , context ) :
 if language not in _translations :
  except ImportError :
          with open ( options [ "pidfile" ] , "w" ) as fp :
  def __init__ ( self , fields = ( ) , * args , ** kwargs ) :
          os . remove ( symlink_path )
   result = avoid_wrapping ( name % count )
              app_label , migration_name = options [ 'app_label' ] , options [ 'migration_name' ]
 output = [ pformat ( val ) for val in context ]
   def render ( self , context ) :
 return node_class ( takes_context , args , kwargs )
          return value
              result . setlist ( copy . deepcopy ( key , memo ) , copy . deepcopy ( value , memo ) )
                  form . fields [ ORDERING_FIELD_NAME ] = IntegerField ( label = _ ( 'Order' ) , required = False )
   elif form . has_changed ( ) :
              context . render_context . pop ( )
   def get_text_list ( list_ , last_word = ugettext_lazy ( 'or' ) ) :
 return _time . tzname [ is_dst ]
  now = datetime . now ( ) . strftime ( '%B %d, %Y - %X' )
                  self . none_value = ( 0 , empty_label )
          value = super ( TypedChoiceField , self ) . clean ( value )
  except ValueError :
 self . stdout . write ( "  the new migration will be used for new installs. Once you are sure" )
  else :
   klass . __new__ = staticmethod ( __new__ )
 def encoding ( self , val ) :
              if is_naive ( obj ) :
 return '%02d' % calendar . monthrange ( self . data . year , self . data . month ) [ 1 ]
 def do_with ( parser , token ) :
 return qs
 try :
  filename = os . path . join ( to_path , name )
              continue
  else :
          __bytes__ = new_method_proxy ( bytes )
 parser . delete_first_token ( )
          obj = copy . copy ( self )
  except ImproperlyConfigured :
          raise SerializerDoesNotExist ( format )
 return widget . id_for_label ( id_ )
  self . update ( updates )
           six . reraise ( DeserializationError , DeserializationError ( e ) , sys . exc_info ( ) [ 2 ] )
  FASTCGI_OPTIONS = {  'protocol' : 'fcgi' ,  'host' : None ,  'port' : None ,  'socket' : None ,  'method' : 'fork' ,  'daemonize' : None ,  'workdir' : '/' ,  'pidfile' : None ,  'maxspare' : 5 ,  'minspare' : 2 ,  'maxchildren' : 50 ,  'maxrequests' : 0 ,  'debug' : None ,  'outlog' : None ,  'errlog' : None ,  'umask' : None ,  }
              return self . _callback
      return lazy_number ( ngettext , str , singular = singular , plural = plural , number = number )
 try :
              return int ( cc [ 'max-age' ] )
          thread . start_new_thread ( main_func , args , kwargs )
 def urlize ( value , autoescape = None ) :
  else :
 self . base_fields [ INITIAL_FORM_COUNT ] = IntegerField ( widget = HiddenInput )
  def __init__ ( self , tagtype ) :
 return mark_safe ( _urlize ( value , nofollow = True , autoescape = autoescape ) )
          offset = offset . seconds // 60
          iteritems = _iteritems
  elif '=' in part :
   def T ( self ) :
    return output
      EscapeString = EscapeText
  targets = [ ( app_label , migration . name ) ]
              template_dirs = app_template_dirs
              return None
          from django . core . servers . fastcgi import FASTCGI_HELP
 existing = list ( root . manager . loggerDict )
          parser . invalid_block_tag ( endblock , 'endblock' , acceptable_endblocks )
  from django . apps import apps
 BASE56_ALPHABET = '23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz'
 result = self . nodelist . render ( context )
 from importlib import import_module
 self . namespace = namespace
   def get_parent ( self , context ) :
 from django . utils import six
                      for cmatch in cmatches :
  self . _ordering . sort ( key = compare_ordering_key )
  with transaction . atomic ( using = connection . alias , savepoint = connection . features . can_rollback_ddl ) :
 internal_use_only = False
   def __setstate__ ( self , state ) :
 if self . feed [ 'author_name' ] is not None :
              yield subwidget
          for key in self . keyOrder :
      class CycleNode ( Node ) :
              if not unicodedata . combining ( char ) :
 for header in headerlist :
          form = super ( BaseInlineFormSet , self ) . _construct_form ( i , ** kwargs )
                if self . verbosity >= 1 :
 return value
    def mark_safe ( s ) :
 v = datetime . datetime . strptime ( force_str ( value ) , input_format )
                  raise ValidationError ( self . error_messages [ 'invalid_time' ] , code = 'invalid_time' )
          super ( Command , self ) . add_arguments ( parser )
 if hasattr ( form , 'Meta' ) :
              boundary = boundary . encode ( 'ascii' )
          return self . paginator . validate_number ( self . number - 1 )
   return self . _num_pages
              value = formats . sanitize_separators ( value )
   wsgi_opts [ 'debug' ] = options [ 'debug' ] is not None
 if decimals > digits :
              self [ : ] = tup
  except IOError as e :
  try :
                          self . stdout . write ( 'ignoring file %s in %s\n' % ( filename , dirpath ) )
  data [ field . attname ] = value
 from django . conf import settings
  streaming = True
          output , references = connection . creation . sql_create_model ( model , style , known_models )
      compare = lambda self , a , b : a < b
  output = [ ]
              k , v = x , True
 cmatches = constant_re . findall ( t . contents )
   self . year_none_value = self . none_value
   class classonlymethod ( classmethod ) :
 TB = 1 << 40
 obj . __class__ = cls
 self . _is_rendered = True
          from django . conf import settings
   class DjangoUnicodeDecodeError ( UnicodeDecodeError ) :
    elif t . token_type == TOKEN_COMMENT :
      return not ( v is False or v is None or v == '' )
  except VariableDoesNotExist :
  elif item_type == FILE :
           members = [ member for member in self . _archive . getmembers ( )  if member . name != 'pax_global_header' ]
              handler . addQuickElement ( "category" , cat )
          return ValidationError ( self . data ) . error_list
 return [ field for field in self if not field . is_hidden ]
                      locale_dir = None
                      lookup_str = callback . __module__ + "." + callback . __class__ . __name__
          if not self . _is_rendered :
 if p_pattern . startswith ( '^' ) :
    for app_config in apps . get_app_configs ( ) :
  from django . apps import apps
                            if not isinstance ( item , ( list , tuple ) ) :
 if self . can_order :
  fp . write ( data )
   raise
  elif self . _delegate_text :
 if not isinstance ( error , ValidationError ) :
  else :
                      self . stdout . write ( self . style . MIGRATE_LABEL ( "  Unapply all migrations: " ) + "%s" % ( targets [ 0 ] [ 0 ] , ) )
  else :
          super ( BaseTemporalField , self ) . __init__ ( * args , ** kwargs )
   def as_json ( self , escape_html = False ) :
              list_ = super ( MultiValueDict , self ) . __getitem__ ( key )
           name = args [ 1 ]
  else :
 HttpResponse . content . fset ( self , value )
          raise NotImplementedError ( 'subclasses of Origin must provide a reload() method' )
 date_data = ( date . year , date . month , date . day )
 s = s . replace ( "'" , "\\'" )
                  del self . cleaned_data [ field ]
          mod = import_module ( mod_name )
 obj_dict = super ( SimpleTemplateResponse , self ) . __getstate__ ( )
      if sys . version_info [ : 2 ] >= ( 3 , 4 ) :
                  template_dir = template_dir . decode ( fs_encoding )
 with Archive ( path ) as archive :
                      new_file . write ( content )
    def write_items ( self , handler ) :
 if isinstance ( offset , timedelta ) :
 parser . add_argument ( 'migration_name' ,  help = 'Migration name to print the SQL for.' )
 output , hidden_fields = [ ] , [ ]
              return [ ]
 for d in reversed ( self . dicts ) :
      options = FASTCGI_OPTIONS . copy ( )
                      raise NoReverseMatch ( "%s is not a registered namespace" %  key )
                          new_filenames . append ( os . path . join ( dirpath , filename ) )
          parser . add_argument ( 'args' , metavar = 'fixture' , nargs = '*' ,  help = 'Path(s) to fixtures to load before running the server.' )
  if item [ 'unique_id' ] is not None :
 key = key [ len ( self . prefix ) : ]
  if not is_valid_ipv6_address ( ip_str ) :
  except ( archive . ArchiveException , IOError ) as e :
          for d in self . dicts :
 return chunk [ : - rollback ]
 assert rawdata [ i : i + 2 ] == "</" , "unexpected call to parse_endtag"
 args . append ( work_file )
    def npgettext ( context , singular , plural , number ) :
 self . data = data or { }
  else :
 try :
 silent = True
      input_type = 'url'
  if options . get ( 'no_location' ) :
      self . m2m_data = None
   def end_serialization ( self ) :
              code_list . append ( opt_dict [ o ] )
     ESCAPE_MAPPINGS = {  "A" : None ,  "b" : None ,  "B" : None ,  "d" : "0" ,  "D" : "x" ,  "s" : " " ,  "S" : "x" ,  "w" : "x" ,  "W" : "!" ,  "Z" : None ,  }
 from django . utils import six
  try :
  if domain is not None :
 if isinstance ( attr , MovedModule ) :
 self . waiting_writers -= 1
  import importlib
     def split_domain_port ( host ) :
    @ register . filter ( is_safe = True , needs_autoescape = True )
  def to_python ( self , value ) :
  def __init__ ( self , schemes = None , ** kwargs ) :
   def get_nodes_by_type ( self , nodetype ) :
 pattern_iter = next_char ( iter ( pattern ) )
   extra_attrs = self . widget_attrs ( widget )
  def nud ( self , parser ) :
   else :
 return make_middleware_decorator ( middleware_class ) ( )
  return super ( NullBooleanSelect , self ) . render ( name , value , attrs , choices )
          iteritems = _iteritems
  else :
  elif self . nodelist_false :
   return super ( BaseModelFormSet , self ) . _construct_form ( i , ** kwargs )
   def _get_regex ( self ) :
  if options [ 'umask' ] :
 raise TypeError ( msg )
   def save_new ( self , form , commit = True ) :
                      if extracted :
  else :
          return self
     class StreamingHttpResponse ( HttpResponseBase ) :
 self . new_method_name = new_method_name
                  self . stdout . write ( "No changes detected in app '%s'" % app_labels . pop ( ) )
              if arg . startswith ( option ) :
      from unittest import *
      @ contextlib . contextmanager
 while i < len ( subject ) and subject [ i ] != subject [ p ] :
                  p_pattern = p_pattern [ 1 : ]
 from django . utils import six
  else :
          os . symlink ( original_path , symlink_path )
  except ValueError :
  except Exception :
   return data
             models . Model . save_base ( self . object , using = using , raw = True )
    def normalize ( pattern ) :
                  formatter = self . config [ 'formatters' ] [ formatter ]
 value = None
      if isinstance ( loader , ( tuple , list ) ) :
 if options . get ( 'use_default_ignore_patterns' ) :
          value = [ conditional_escape ( v ) for v in value ]
              try :
 for f in opts . local_fields :
 from django . utils . translation import ungettext , ugettext as _
 parser . add_argument ( '--backwards' , action = 'store_true' , dest = 'backwards' ,  default = False , help = 'Creates SQL to unapply the migration, rather than to apply it' )
     else :
                  raise ValidationError (  _ ( 'ManagementForm data is missing or has been tampered with' ) ,  code = 'missing_management_form' ,  )
  return [ first_item , second_item ] , old_style_list
          self . class_name = class_name
  number = '' . join ( reversed ( digits ) )
              daemonize = True
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
 app = TerminalIPythonApp . instance ( )
                  return getattr ( instance , name ) ( value )
 if isinstance ( data , bytes ) :
                  args = ( )
 import sys
   test_runner = TestRunner ( ** options )
  except IOError as e :
              if force_text ( val ) not in pks :
   def __iter__ ( self ) :
  statement . append ( cleaned_line )
   else :
  if i >= len ( subject ) :
               self . _initialize_handlers ( )
                      warnings . warn (  "`%s.%s` method should be renamed `%s`." %  ( class_name , old_method_name , new_method_name ) ,  deprecation_warning , 2 )
 self . lineno = 1
          raise
                          continue
   def __str__ ( self ) :
  except IndexError :
 __delitem__ = new_method_proxy ( operator . delitem )
                  if isinstance ( value , str ) :
  raise
 incomment = False
                  if nodelist . contains_nontext :
  except AttributeError :
              klass = self . resolve ( config . pop ( 'class' ) )
                          raise TemplateSyntaxError ( "Searching for value. "  "Unexpected end of string in column %d: %s" %  ( i , subject ) )
                  file_path = os . path . normpath ( os . path . join ( dirpath , filename ) )
 result = self . configurator . convert ( value )
   self . indent ( 1 )
          if self . _changed_data is None :
                   if ( form . cleaned_data and form . cleaned_data [ field ] is not None  and form . cleaned_data [ unique_for ] is not None ) :
          value = force_text ( value )
    return False
  else :
          stat = os . stat ( filename )
  return ''
 plural = [ ]
      msg_with_ctxt = "%s%s%s" % ( context , CONTEXT_SEPARATOR , message )
 sublist_item = None
   gettext_noop = gettext_lazy = _ = gettext
 return self . resolve ( value )
 PB = 1 << 50
                      dirnames . remove ( dirname )
 if CONTEXT_SEPARATOR in result :
              pass
          exp = Decimal ( 1 )
                  self . stdout . write ( " (no migrations)" , self . style . MIGRATE_FAILURE )
  new_class = super ( ModelFormMetaclass , mcs ) . __new__ ( mcs , name , bases , attrs )
              widget . is_localized = True
 self . help_text = help_text
 from django . utils . module_loading import import_string
              return str ( o )
 import os
          raise ValueError ( "Negative base36 conversion input." )
 yield ( tok . name , toktext )
              result = self . _resolve ( )
  return value
 def make_list ( value ) :
              processors = ( )
 if not m :
                          raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
              handler . addQuickElement ( "author" , "%s (%s)" %  ( item [ 'author_email' ] , item [ 'author_name' ] ) )
          self . _current = { }
                      if model in created_models :
      pass
 ignored = [ ]
 from django . core . management . sql import sql_custom
  except IndexError :
      bits = list ( token . split_contents ( ) )
  if len ( parts ) > 1 and parts [ - 1 ] in self . compression_formats :
                                      for sql in custom_sql :
              i += 1
          _active . value = timezone
   form . data [ form . add_prefix ( self . fk . name ) ] = None
              yield ch , False
  except Exception :
 return other in self . children
 append = complain
 return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )
 try :
      def __init__ ( self , token_type , contents ) :
 list_ = [ bytes_to_text ( elt , self . encoding ) for elt in list_ ]
 statements = sql_delete ( app_config , self . style , connection )
    def extract ( path , to_path = '' ) :
   def strip_entities ( value ) :
  for loader in template_source_loaders :
   def _close_files ( self ) :
 wrapper . cache_info = cache_info
    def setdefault ( self , key , default ) :
 args = [ ]
   return getattr ( settings , format_type )
  except ( IndexError ,  ValueError ,  KeyError ,  TypeError ) :
          return timedelta ( 0 )
  expanded_template = path . expanduser ( template )
                      try :
 plist . append ( f . strip ( ) )
   def __eq__ ( self , other ) :
   class Loader ( BaseLoader ) :
          if self not in context . render_context :
 while True :
    elif version [ 3 ] != 'final' :
 return guessed_path
              for bit in self . lookups :
 total_forms = max ( initial_forms , self . min_num ) + self . extra
          if lang is None :
                          pass
  response [ 'Content-Length' ] = '0'
  def write ( data ) :
          archive . extract ( to_path )
                  value = None
          del cc [ 'public' ]
  return Truncator ( value ) . words ( length , truncate = ' ...' )
              use_func = False
  def process_default ( self , event ) :
 if fields is not None :
 def encoding ( self ) :
 self . cookies [ key ] = value
   counters = [ 0 ] * len ( handlers )
 from django . utils . dates import MONTHS
   __all__ = (  'ModelForm' , 'BaseModelForm' , 'model_to_dict' , 'fields_for_model' ,  'save_instance' , 'ModelChoiceField' , 'ModelMultipleChoiceField' ,  'ALL_FIELDS' , 'BaseModelFormSet' , 'modelformset_factory' ,  'BaseInlineFormSet' , 'inlineformset_factory' ,  )
              self . _urlconf_module = import_module ( self . urlconf_name )
  else :
 try :
                      self . invalid_block_tag ( token , command , parse_until )
  elif child . nodeType == child . ELEMENT_NODE :
   def L ( self ) :
  return value . replace ( tzinfo = None )
 try :
  return '<%s: %r>' % ( type ( self ) . __name__ , repr_attr )
                      self . empty_block_tag ( token )
              return
 for character in name :
   def set_cdata_mode ( self , tag ) :
          value = data . get ( name , None )
 @ stringfilter
          return locale . lower ( )
 return re . sub ( r'>\s+<' , '><' , force_text ( value ) )
                  values = self . sequence . resolve ( context , True )
 return self . field . widget . value_from_datadict ( self . form . data , self . form . files , self . html_name )
                  data [ field . attname ] = self . _handle_fk_field_node ( field_node , field )
  from django . utils . html import avoid_wrapping
   def _convert_to_charset ( self , value , charset , mime_encode = False ) :
 from django . utils . deprecation import RemovedInDjango19Warning
              pass
  continue
          return get_wsgi_application ( )
              raise TemplateSyntaxError ( "back called without some previous "  "parsing" )
 if not prefix . endswith ( '/' ) :
              error = { field or NON_FIELD_ERRORS : error . error_list }
 self . salt = force_str ( salt or  '%s.%s' % ( self . __class__ . __module__ , self . __class__ . __name__ ) )
 if serializers is None and not _serializers :
 self . queryset = queryset
              django_po = os . path . join ( django_dir , 'conf' , 'locale' , locale , 'LC_MESSAGES' , '%s.po' % domain )
            opts = self . _meta
  raise BadSignature ( 'Signature "%s" does not match' % sig )
  for statement in sql :
              value = Decimal ( value )
              return SafeText ( data )
   def value_from_datadict ( self , data , files , name ) :
              if empty_label is not None :
  nodelist = parser . parse ( ( 'endautoescape' , ) )
                          pop_context = True
 if not os . path . exists ( self . default_locale_path ) :
      pass
 odds = sum ( LUHN_ODD_LOOKUP [ int ( c ) ] for c in candidate [ - 2 : : - 2 ] )
 supports_microseconds = False
    def inotify_code_changed ( ) :
          raise TemplateSyntaxError ( "%r expected at least one variable "  "assignment" % bits [ 0 ] )
 end = s . find ( b';' )
 del self . dicts [ - 1 ] [ key ]
 opts = instance . _meta
     if self . paths_to_remove :
  fields = [ ( field_name , attrs . pop ( field_name ) ) for field_name , obj in list ( six . iteritems ( attrs ) ) if isinstance ( obj , Field ) ]
 s = StringIO ( )
          self . widgets = [ w ( ) if isinstance ( w , type ) else w for w in widgets ]
 from __future__ import unicode_literals
 if dirname and not os . path . exists ( dirname ) :
 requires_system_checks = False
     class CharField ( Field ) :
                       sublist_item = next_item
 self . _leftover = b''
  else :
          yield bit . group ( 0 )
   class Node ( object ) :
   FILTER_SEPARATOR = '|'
          if hasattr ( self , '_files' ) :
   gettext_lazy = lazy ( gettext , str )
  else :
 _iterlists = "lists"
 try :
 context [ self . target_var ] = func ( * resolved_args , ** resolved_kwargs )
                      transfer_encoding = transfer_encoding [ 0 ] . strip ( )
                  space = line [ : max_width + 1 ] . rfind ( ' ' ) + 1
 import sys
   def as_table ( self ) :
  def __init__ ( self ) :
 for candidate in glob . iglob ( os . path . join ( fixture_dir , fixture_name + '*' ) ) :
                  msg = ( "%(model)s.Meta.%(opt)s cannot be a string. "  "Did you mean to type: ('%(value)s',)?" % {  'model' : new_class . __name__ ,  'opt' : opt ,  'value' : value ,  } )
   def render ( self , context ) :
   if compare_to != state_frame [ self ] :
   elif count > 1 :
          super ( URLValidator , self ) . __init__ ( ** kwargs )
          if self . feed [ 'language' ] is not None :
   @ encoding . setter
 import zlib
 import re
    WSGIServer ( get_internal_wsgi_application ( ) , ** wsgi_opts ) . run ( )
  def __init__ ( self , stream_or_string , ** options ) :
 if next_item and isinstance ( next_item , ( list , tuple ) ) :
  except ValueError :
   def escape ( text ) :
    def deactivate ( ) :
               if id_ :
     return text
  from django . core . management . base import BaseCommand , CommandError
 def first ( value ) :
   def _isdst ( self , dt ) :
 self . __doc__ = self . __class__ . __doc__
          try :
   def g ( self ) :
 class ChoiceInput ( SubWidget ) :
  return 'tag:%s%s:%s/%s' % ( bits . hostname , d , bits . path , bits . fragment )
   if args [ 1 ] [ 0 ] == '2' :
  if self . instance . pk is not None :
 from django . utils import formats , six
 widget = SelectMultiple
   def is_protected_type ( obj ) :
          return False
                          self . setlistdefault ( key ) . append ( value )
 stats = [ 0 , 0 ]
 from __future__ import unicode_literals
  except ValueError :
  from django . core . management . base import AppCommand
          raise TemplateSyntaxError ( "'autoescape' argument should be 'on' or 'off'" )
 for option in option_label :
           if hasattr ( value , '__iter__' ) and not isinstance ( value , ( bytes , six . string_types ) ) :
 pieces = accept_language_re . split ( lang_string . lower ( ) )
        if ( not normcase ( final_path ) . startswith ( normcase ( base_path + sep ) ) and  normcase ( final_path ) != normcase ( base_path ) and  dirname ( normcase ( base_path ) ) != normcase ( base_path ) ) :
                          yield line
          if memo is None :
 from importlib import import_module
    def label_from_instance ( self , obj ) :
 salt = force_bytes ( salt )
 raise ImproperlyConfigured ( msg . format ( name = self . urlconf_name ) )
 if name in MEDIA_TYPES :
   def __exit__ ( self , * args , ** kwargs ) :
 self . __dt = dt
    def __deepcopy__ ( self , memo ) :
 for f in opts . fields :
              raise ValueError (  "'%s.%s' has more than one ForeignKey to '%s.%s'."  % ( model . _meta . app_label , model . _meta . object_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )
 for ext in extensions :
          loaders = [ ]
                  raise TemplateSyntaxError ( "'%s' is not a valid tag library: %s" %  ( taglib , e ) )
  def __init__ ( self , attrs = None , format = None ) :
  elif ch == '.' :
  if sep is None :
 key = bytes_to_text ( key , self . encoding )
   def __setitem__ ( self , key , value ) :
              other_dict = args [ 0 ]
              fmt = config . get ( 'format' , None )
   try :
      if termios :
                              d = d [ idx ]
  def add_arguments ( self , parser ) :
                       continue
  m2m_data = { }
 BLOCK_TAG_END = '%}'
     class BaseArchive ( object ) :
 return iter ( getattr ( d , _iterlists ) ( ** kw ) )
    if item [ 'enclosure' ] is not None :
     class JsLexer ( Lexer ) :
 self . pos += 1
 doublecolon_start = - 1
   def save ( self , save_m2m = True , using = None ) :
  return render_value_in_context ( output , context )
  else :
                      incomment = True
              raise CommandError ( "couldn't extract file %s to %s: %s" %  ( filename , tempdir , e ) )
 self . locale_paths = [ ]
              handler . addQuickElement ( "enclosure" , '' ,  { "url" : item [ 'enclosure' ] . url , "length" : item [ 'enclosure' ] . length ,  "type" : item [ 'enclosure' ] . mime_type } )
 bits = token . split_contents ( ) [ 1 : ]
      class Deserializer ( six . Iterator ) :
  finally :
  return super ( classonlymethod , self ) . __get__ ( instance , owner )
              filename = file
 from django . utils . six . moves import copyreg
                  exclude . append ( f . name )
 def stringformat ( value , arg ) :
   def add_move ( move ) :
 method = kwargs . pop ( 'method' )
                              f = os . path . join ( root , f )
 if len ( bits ) != 2 :
 parts = parts [ : - 1 ]
          if can_fail :
              for date_key in date_keys :
  else :
 if six . PY2 :
                       pass
  _iterkeys = "iterkeys"
          if filter_name in self . filters :
 self . max_width = max_width
          path = os . environ . get ( 'PATH' , '' ) . split ( os . pathsep )
              output . insert ( 0 , error_row % force_text ( top_errors ) )
  else :
  return end , next
 self . _charset = settings . DEFAULT_CHARSET
 self . args = args
          return
                  for f in sorted ( os . listdir ( self . path ) ) :
              return key [ 0 ]
   def item_attributes ( self , item ) :
  except socket . error as e :
    def configure_root ( self , config , incremental = False ) :
          tables = connection . introspection . django_table_names ( only_existing = True )
 if token == "not" and i + 1 < l and tokens [ i + 1 ] == "in" :
                        start = non_capturing_groups . pop ( )
 for medium in extend :
              end = index
                                    over_bytes = len ( chunk ) % 4
 self . stdout . write ( "Rendering %s template files with "  "filenames: %s\n" %  ( app_or_project , ', ' . join ( extra_files ) ) )
 return self . pointer < len ( self . subject )
   def run_shell ( self , shell = None ) :
 return tt . tm_isdst > 0
                  output . extend ( connection . creation . sql_destroy_model ( model , references_to_delete , style ) )
          dec_part = dec_part + ( '0' * ( decimal_pos - len ( dec_part ) ) )
                  if dirname . startswith ( '.' ) or dirname == '__pycache__' :
          vary_headers = cc_delim_re . split ( response [ 'Vary' ] )
 def fget ( instance , instance_type = None , name = fget . __name__ ) :
  def __ne__ ( self , other ) :
                   raise
    if response . has_header ( 'Cache-Control' ) :
      pass
   if options [ "daemonize" ] is None :
 if changes :
  last = self . data . day % 10
 if member . isdir ( ) :
                  self . saved_forms . append ( form )
          self . autoescape = autoescape
 _templatetags_modules . append ( templatetag_module )
          if self . is_bound and i < self . initial_form_count ( ) :
 self . choices = choices
    class MediaDefiningClass ( type ) :
 context = self . resolve_context ( self . context_data )
           if ip_str . count ( '.' ) != 3 :
  elif len ( app_labels ) > 1 :
 import sys
              id_for_label = widget . id_for_label ( id_ )
          if arg :
          value = ungettext ( "%(size)d byte" , "%(size)d bytes" , 0 ) % { 'size' : 0 }
  except KeyError :
 self . can_write . release ( )
      status_code = 403
              sys . stderr . write ( "fork #1 failed: (%d) %s\n" % ( e . errno , e . strerror ) )
   self . attr = new_attr
                                  del form . cleaned_data [ field ]
  else :
          return datetime . now ( )
                       field_value = [ getInnerText ( k ) . strip ( ) for k in keys ]
   def urlunquote_plus ( quoted_url ) :
 for i in range ( len ( result ) ) :
    def inlineformset_factory ( parent_model , model , form = ModelForm ,  formset = BaseInlineFormSet , fk_name = None ,  fields = None , exclude = None , extra = 3 , can_order = False ,  can_delete = True , max_num = None , formfield_callback = None ,  widgets = None , validate_max = False , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ,  min_num = None , validate_min = False ) :
 if age > max_age :
   def slugify ( value ) :
  super ( WSGIServer , self ) . __init__ ( * args , ** kwargs )
   raise KeyError ( key )
from __future__ import unicode_literals
                      lineno = lineno + self . __starttag_text . count ( "\n" )
 def center ( value , arg ) :
   def P ( self ) :
 if not self . is_valid ( ) :
  if ( self . validate_min and  self . total_form_count ( ) - len ( self . deleted_forms ) < self . min_num ) :
   compile_func . __doc__ = func . __doc__
   else :
 def reader ( self ) :
                              file_ . close ( )
  except AttributeError :
  except TemplateDoesNotExist :
 hidden_widget = MultipleHiddenInput
    def emit_pre_migrate_signal ( create_models , verbosity , interactive , db ) :
                  self . stdout . write ( self . style . MIGRATE_LABEL ( "  Synchronize unmigrated apps: " ) + ( ", " . join ( executor . loader . unmigrated_apps ) ) )
   else :
 from django . utils . encoding import force_str
              year_val = month_val = day_val = None
                      declared_fields . pop ( attr )
  def add_arguments ( self , parser ) :
 if ch != '?' or escaped :
      hidden_widget = MultipleHiddenInput
          try :
                  for model in model_list :
          stream_or_string = stream_or_string . decode ( 'utf-8' )
   def eval ( self , context ) :
 return s
 if self . _num_pages is None :
 import sys
  if i > sys . maxint :
           fks_to_parent = [  f for f in opts . fields  if isinstance ( f , ForeignKey )  and ( f . rel . to == parent_model  or f . rel . to in parent_model . _meta . get_parent_list ( ) )  ]
                  if field_value is not None :
    def __setitem__ ( self , key , value ) :
  current = getattr ( current , bit )
          del cc [ 'private' ]
  return mark_safe ( self . format_output ( output ) )
                  bits = token . split_contents ( ) [ 1 : ]
    class NullDevice :
 logger . addHandler ( handler )
   def total_form_count ( self ) :
 try :
 self . setlistdefault ( key ) . append ( value )
              return self . limit_choices_to ( )
      def __init__ ( self , regex , urlconf_name , default_kwargs = None , app_name = None , namespace = None ) :
  WEEKDAYS = {  0 : _ ( 'Monday' ) , 1 : _ ( 'Tuesday' ) , 2 : _ ( 'Wednesday' ) , 3 : _ ( 'Thursday' ) , 4 : _ ( 'Friday' ) ,  5 : _ ( 'Saturday' ) , 6 : _ ( 'Sunday' )  }
 loop_dict [ 'last' ] = ( i == len_values - 1 )
              raise NoReverseMatch ( "Error importing '%s': %s." % ( lookup_view , e ) )
 import io
   def getvalue ( self ) :
          with self . mutex :
                    step = str ( Decimal ( '1' ) / 10 ** self . decimal_places ) . lower ( )
              value , decimals = value . split ( decimal_separator , 1 )
   def as_text ( self ) :
              kwargs [ 'help_text' ] = help_texts [ f . name ]
                     return b' ' . join ( [ force_bytes ( arg , encoding , strings_only ,  errors ) for arg in s ] )
  else :
  except Exception :
  except base . DeserializationError :
          raise
    return sorted ( all_files )
              return path
      help = "Runs a Python interactive interpreter. Tries to use IPython or bpython, if one of them is available."
 if exit_code != 3 :
 def _archive_cls ( file ) :
  elif self . verbosity > 0 :
   else :
              raise ValueError ( "Zip-compressed fixtures must contain one file." )
  return message
   def date_format ( value , format = None , use_l10n = None ) :
 parser = MultiPartParser ( META , post_data , self . upload_handlers , self . encoding )
  except signing . BadSignature :
              return list_ [ - 1 ]
                          out . write ( ' #\n' )
   if format_module_path is None :
  return t [ 0 ] . lower ( ) , True
                      self . stdout . write ( self . style . NOTICE ( "  Your models have changes that are not yet reflected in a migration, and so won't be applied." ) )
 if value in self . empty_values :
   if formfield_callback is None :
  __iter__ = _iterkeys
              if csrf_token == 'NOTPROVIDED' :
    if self . _content_length == 0 :
 if is_templatized :
    location = urljoin ( current_uri , location )
   class UnreadablePostError ( IOError ) :
   output = [ ]
    def set_script_prefix ( prefix ) :
 if kw [ 'microsecond' ] :
              if self . app_label and app_config . label != self . app_label :
      def __init__ ( self , obj , * args ) :
   def add_fields ( self , form , index ) :
 decorator = Node ( syms . decorator , [ Leaf ( token . AT , "@" ) , Name ( 'python_2_unicode_compatible' ) ] )
                  os . makedirs ( top_dir )
 base36 = BaseConverter ( BASE36_ALPHABET )
 if os . path . isdir ( template_dir ) :
 return data_set != initial_set
  else :
 unhandled_params = list ( params )
  else :
 insert = complain
 for i , choice in enumerate ( self . choices ) :
  else :
     class WidthRatioNode ( Node ) :
  except UnicodeDecodeError :
   ipv4_address = "%d.%d.%d.%d" % (  int ( hextets [ 6 ] [ 0 : 2 ] , 16 ) ,  int ( hextets [ 6 ] [ 2 : 4 ] , 16 ) ,  int ( hextets [ 7 ] [ 0 : 2 ] , 16 ) ,  int ( hextets [ 7 ] [ 2 : 4 ] , 16 ) ,  )
  except TypeError :
 if self . _non_form_errors is None :
          try :
 try :
  return result
   if hasattr ( error , 'error_dict' ) :
 data = json . dumps ( data , cls = encoder )
  self . startElement ( name , attrs )
              subject = '%s: %s' % (  record . levelname ,  record . getMessage ( )  )
              i += 1
                      offset = offset + len ( self . __starttag_text )
 se = open ( err_log , 'a+' , buffering )
 from django . core . serializers . base import SerializerDoesNotExist
              self . keyOrder . remove ( k )
   finally :
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
  except ImportError :
  except AttributeError :
       if self . verbosity >= 1 :
 opts = model . _meta
from __future__ import unicode_literals
               msg = self . style . HTTP_SERVER_ERROR ( msg )
      mapping = { 'openblock' : BLOCK_TAG_START ,  'closeblock' : BLOCK_TAG_END ,  'openvariable' : VARIABLE_TAG_START ,  'closevariable' : VARIABLE_TAG_END ,  'openbrace' : SINGLE_BRACE_START ,  'closebrace' : SINGLE_BRACE_END ,  'opencomment' : COMMENT_TAG_START ,  'closecomment' : COMMENT_TAG_END ,  }
   def latest_post_date ( self ) :
 created_models = set ( )
  scheme = template . split ( ':' , 1 ) [ 0 ] . lower ( )
 if len ( compressed ) < ( len ( data ) - 1 ) :
    class EmptyPage ( InvalidPage ) :
              return ugettext ( "Please correct the duplicate data for %(field)s, "  "which must be unique." ) % {  "field" : get_text_list ( unique_check , six . text_type ( _ ( "and" ) ) ) ,  }
  if max_value is not None :
          lexer_class , parser_class = Lexer , Parser
 result = c ( ** kwargs )
         class TokenBase ( object ) :
              yield
   def __cast ( self ) :
                  self . stdout . write ( " - %s" % migration . name )
 kwargs = { }
  def __init__ ( self , * args , ** kwargs ) :
 select_html = s . render ( field % name , val , local_attrs )
  else :
  if _default is None :
   if item [ 'pubdate' ] is not None :
  prefix_norm , prefix_args = normalize ( urlquote ( _prefix ) ) [ 0 ]
                  return [ ]
   else :
 self . waiting_writers = 0
                  obj = self . var . resolve ( context )
         else :
 url , trimmed = escape ( url ) , escape ( trimmed )
                      raise AttributeError
          raise TypeError ( "strftime of dates before 1900 does not handle" + illegal_formatting . group ( 0 ) )
 return hashlib . pbkdf2_hmac (  digest ( ) . name , password , salt , iterations , dklen )
  return combined
  url_markup_template = '<a href="{0}">{1}</a>'
   else :
              self . locale_paths = [ os . path . abspath ( os . path . join ( 'conf' , 'locale' ) ) ]
              if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
 return datetime . date ( ** kw )
  sys . exit ( 2 )
          if name == "_wrapped" :
              value = unicode_value . strip ( )
          value = super ( TypedMultipleChoiceField , self ) . clean ( value )
             self . _headers = { }
          self . template_string = template_string
          return hmac . compare_digest ( force_bytes ( val1 ) , force_bytes ( val2 ) )
  output_transaction = True
 try :
          cc = cc_delim_re . split ( response [ 'Cache-Control' ] )
              return clean_ipv6_address ( value , self . unpack_ipv4 )
              return self . nodelist_false . render ( context )
 self . _non_form_errors = None
              return language [ : p ] . lower ( ) + '_' + language [ p + 1 : ] . lower ( )
 return Page ( * args , ** kwargs )
 self . filters = { }
  truncate = force_text ( truncate )
  return result
  else :
 self . hashvalue = hash ( tup )
                          formatters [ name ] = self . configure_formatter (  formatters [ name ] )
          new_value = _strip_once ( value )
                  filename = file . name
  elif var_arg :
 self . _non_form_errors = self . error_class ( )
          from django . utils . html import strip_spaces_between_tags
  return '' . join ( c )
 if isinstance ( value , bool ) :
                      answer = six . moves . input ( "Do you wish to proceed? [yN] " )
 import re
                              return smart_text ( field . rel . to . _meta . pk . to_python ( value ) )
  else :
 value = re . sub ( '[^\w\s-]' , '' , value ) . strip ( ) . lower ( )
          super ( MovedAttribute , self ) . __init__ ( name )
  _add_doc ( b , """Byte literal""" )
              for arg in args :
     class MovedModule ( _LazyDescr ) :
              factor -= 1
  except ( ValueError , TypeError , ValidationError ) :
              self . stdout . write ( 'examining files with the extensions: %s\n'  % get_text_list ( list ( self . extensions ) , 'and' ) )
                      raise ValueError ( 'Unable to set target handler '  '%r: %s' % ( config [ 'target' ] , e ) )
 substitutions [ 'clear_template' ] = self . template_with_clear % substitutions
                  if filename and not os . path . exists ( filename ) :
 output . append ( format_html ( self . inner_html , choice_value = choice_value ,  sub_widgets = sub_ul_renderer . render ( ) ) )
 return self . as_widget ( self . field . hidden_widget ( ) , attrs , ** kwargs )
 leave_locale_alone = True
from __future__ import unicode_literals
              migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )
 import unicodedata
  output . append ( '%s<li>%s%s</li>' % ( indent ,  escaper ( force_text ( title ) ) , sublist ) )
   def strptime ( self , value , format ) :
     class Archive ( object ) :
 __unicode__ = new_method_proxy ( unicode )
 method = kwargs . pop ( 'method' )
   def clear ( self ) :
  if ( getattr ( meta , 'fields' , fields ) is None and  getattr ( meta , 'exclude' , exclude ) is None ) :
   def Z ( self ) :
    def __eq__ ( self , other ) :
                      lead , trail = escape ( lead ) , escape ( trail )
  for pattern in allowed_hosts :
   def decode ( self , s ) :
                           old_field_name = field_name
   def __call__ ( self , value ) :
 return self . renderer ( name , value , final_attrs , choices )
    RemovedInNextVersionWarning = RemovedInDjango19Warning
 file_name = self . IE_sanitize ( unescape_entities ( file_name ) )
 self . context = context
from __future__ import unicode_literals
          return escape ( text )
 from yaml import CSafeDumper as SafeDumper
 uclass , lookup , field , unique_for = date_check
    if '::' not in ip_str and ip_str . count ( ':' ) != 7 :
 text = force_text ( text )
          try :
          return singular
     class SlugField ( CharField ) :
          if options [ 'verbosity' ] > 0 :
    class MultiValueDict ( dict ) :
 if decompress :
                  orig_vars . pop ( slots_var )
                              out . write ( ' ngettext(%r, %r, count) ' % (  join_tokens ( singular , trimmed ) ,  join_tokens ( plural , trimmed ) ) )
  if self . data . hour > 12 :
                  i += 1
 import mimetypes
          s . close ( )
 self . xml . endElement ( "object" )
                                      for sql in index_sql :
              kwargs [ 'instance' ] = self . get_queryset ( ) [ i ]
 parser . add_argument ( '--noinput' ,  action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' ) ,
    def load_template_source ( self , template_name , template_dirs = None ) :
  from django . utils . functional import Promise
 path = path . lstrip ( '/' ) . lstrip ( '\\' )
  raise SyntaxError ( "Translation blocks must not include other block tags: %s (%sline %d)" % ( t . contents , filemsg , t . lineno ) )
  return save_instance ( self , self . instance , self . _meta . fields ,  fail_message , commit , self . _meta . exclude ,  construct = False )
 self . widgets = getattr ( options , 'widgets' , None )
                  i = 366
   if isinstance ( value , six . text_type ) :
    if hextets [ index ] == '0' :
              if self . verbosity >= 2 :
 year = year + off
  for path in all_locale_paths ( ) :
   except IOError :
 walk_to_end ( ch , pattern_iter )
 value = getattr ( obj , field . rel . field_name )
 return '%s(%s)' % ( self . __class__ . __name__ , dictreprs )
  final_attrs = self . build_attrs ( attrs , name = name )
      op . id = key
  from django . core . exceptions import ValidationError
 common_prefix = None
 for sublist in second_item :
              return default
  return inner
          super ( HttpResponseNotAllowed , self ) . __init__ ( * args , ** kwargs )
     def get_tag_uri ( url , date ) :
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
      def __init__ ( self , template_string , origin = None , name = None ) :
  from django . template . base import Variable , Library , VariableDoesNotExist
                  if tag . lower ( ) != self . cdata_tag :
              raise AppRegistryNotReady (  "The translation infrastructure cannot be initialized before the "  "apps registry is ready. Check that you don't make non-lazy "  "gettext calls at import time." )
              value = [ ]
 _assertRaisesRegex = "assertRaisesRegex"
                                  self . stdout . write ( "    No custom SQL for %s.%s model\n" % ( app_name , model . _meta . object_name ) )
 self . _post_parse_error = True
 try :
   def widget_attrs ( self , widget ) :
 return html
  else :
  elif bytes < GB :
   super_set ( key , value )
 s = s . replace ( '\r' , '\\r' )
          return '\n' . join ( sql_flush ( self . style , connections [ options [ 'database' ] ] , only_django = True ) )
 self . dicts = [ builtins ]
 for key , value in six . iterlists ( self ) :
 import sys
              name = self . html_initial_name
  if 'media' not in attrs :
 try :
     def npgettext ( context , singular , plural , number ) :
 value . configurator = self
          return ''
 for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) :
              if isinstance ( v , ( list , tuple ) ) :
              media_attrs = media . __dict__
 self . _errors = None
           patterns = getattr ( self . urlconf_module , "urlpatterns" , self . urlconf_module )
  else :
 if root :
 BASE16_ALPHABET = '0123456789ABCDEF'
  def __init__ ( self , limit_value ) :
              self . inverse_match = inverse_match
 new_context = copy ( self )
 if kwargs . get ( 'localize' ) and self . widget == NumberInput :
  def __init__ ( self , offset = None , name = None ) :
 six . reraise ( os_err_exc_type , os_err_exc_type ( 'Error executing %s: %s' %  ( args [ 0 ] , strerror ) ) , sys . exc_info ( ) [ 2 ] )
 import re
 for site in sites1 :
 content = template . render ( context )
 return files . get ( name , None )
          raise DTDForbidden ( name , sysid , pubid )
                  attrs = attrs or { }
 from django . db . migrations . loader import MigrationLoader
 if not boundary or not cgi . valid_boundary ( boundary ) :
  vary_headers = cc_delim_re . split ( response [ 'Vary' ] )
   base36 = [ ]
              command . stdout . write ( 'processing file %s in %s\n' % ( self . file , self . dirpath ) )
          return 0
 memo [ id ( self ) ] = result
          return ""
      if urlconf is None :
 def __init__ ( self , language ) :
 for v in self . validators :
          return [ format_html ( '<script type="text/javascript" src="{0}"></script>' , self . absolute_path ( path ) ) for path in self . _js ]
 s = s . replace ( '\t' , '\\t' )
 def ifequal ( parser , token ) :
                          if self . selected_fields is None or field . attname in self . selected_fields :
   try :
 class ErrorList ( UserList , list ) :
   class Serializer ( PythonSerializer ) :
              self . instance = instance
               if value :
  else :
                  if ( isinstance ( message , ValidationError ) and  message . code in error_messages ) :
              raise TypeError (  "Variable must be a string or number, got %s" % type ( var ) )
          text = '%s\x1b[%sm' % ( text or '' , RESET )
 while t > 0 :
  except ValueError :
   def compress ( self , data_list ) :
          post = '<could not parse>'
 self . json_kwargs = self . options . copy ( )
 self . value = value
   return False
 comment = [ ]
     @ deconstructible
  def __init__ ( self , value ) :
    class MultipleHiddenInput ( HiddenInput ) :
 if self . __language == settings . LANGUAGE_CODE :
 if fk_name :
  if os . path . exists ( filename ) :
              self . renderer = renderer
  def u ( s ) :
 num_args = 0
 if language in _DJANGO_DEPRECATED_LOCALES :
          return EscapeBytes ( s )
          if _default is None :
          return unbound
                   if os . name == 'nt' :
          return build_request_repr ( self )
  def to_python ( self , data ) :
    @ register . filter ( is_safe = False )
  if httponly :
      return _trans . npgettext ( context , singular , plural , number )
 if domain :
              return self . _urlconf_module
              if self . pk_field :
          delattr ( _MovedItems , name )
 return do_ifequal ( parser , token , False )
 output . append ( '\n' . join ( '  * %s' % e for e in errors ) )
              for item in six . iteritems ( dict_ ) :
 parser = parser_class ( lexer . tokenize ( ) )
              raise ValidationError (  self . error_messages [ 'max_digits' ] ,  code = 'max_digits' ,  params = { 'max' : self . max_digits } ,  )
   if ( isinstance ( data , ( datetime . datetime , datetime . time ) ) and  not getattr ( self . field . widget , 'supports_microseconds' , True ) ) :
          raise self . error ( None , "Unclosed tags: %s " % ', ' . join ( parse_until ) )
  from django . core . exceptions import ImproperlyConfigured
                  template = template [ 7 : ]
   def handle_m2m_field ( self , obj , field ) :
 from django . core . servers . basehttp import run , get_internal_wsgi_application
  except UnicodeError :
 quit_command = 'CTRL-BREAK' if sys . platform == 'win32' else 'CONTROL-C'
           return timezone . localize ( value , is_dst = None )
          parser . add_argument ( 'app_label' ,  help = 'App label of the application to squash migrations for.' )
 from django . utils . encoding import force_text
                  return func ( * self . __args , ** self . __kw )
 import sys
 from django . utils . module_loading import module_has_submodule
          reversed_text = ' reversed' if self . is_reversed else ''
 if ',' not in arg :
 _iterlists = "iterlists"
 self . years = range ( this_year , this_year + 10 )
 attrs = { 'form' : form , 'extra' : extra ,  'can_order' : can_order , 'can_delete' : can_delete ,  'min_num' : min_num , 'max_num' : max_num ,  'absolute_max' : absolute_max , 'validate_min' : validate_min ,  'validate_max' : validate_max }
          if isinstance ( self . warning , Exception ) :
  import contextlib
              self . extra_context [ name ] = var
          self . max_length , self . min_length = max_length , min_length
              valid = False
  try :
 from os . path import join , normcase , normpath , abspath , isabs , sep , dirname
  except TemplateSyntaxError as e :
          global _supported
 while escaped or ch != ']' :
  except ( ValueError , TypeError ) :
          raise SerializerDoesNotExist ( format )
  return args , kwargs
    to_delete . add ( model )
                  yield subnode
              with io . open ( potfile , 'r' , encoding = 'utf-8' ) as fp :
import inspect
 _globs_ = frame . f_globals
 def wrapper ( * args , ** kwargs ) :
 os . dup2 ( so . fileno ( ) , sys . stdout . fileno ( ) )
                  pieces . append ( force_text ( getattr ( self , piece ) ( ) ) )
          if not f . editable or isinstance ( f , models . AutoField ) or f . name not in cleaned_data :
  except Exception :
 if t is not None :
              continue
              number = int ( number )
 if USE_INOTIFY :
      def __init__ ( self ) :
          if data_list :
              return self . queryset . none ( )
 return mark_safe ( formats . number_format ( number , abs ( p ) ) )
   def get_resolved_arguments ( self , context ) :
                       key = make_key ( args , kwds , typed ) if kwds or typed else args
 return WEEKDAYS_ABBR [ self . data . weekday ( ) ]
 text_kwargs = dict ( ( k , force_text ( v ) ) for ( k , v ) in kwargs . items ( ) )
              try :
 self . pk_field = kwargs . pop ( "pk_field" , False )
 for key in self :
      return _trans . templatize ( src , origin )
  from collections import OrderedDict
  if current_app and current_app in app_list :
 res = to_digits [ digit ] + res
              test_runner_class . add_arguments ( parser )
                   for hook in sys . path_hooks :
   def iterlists ( d , ** kw ) :
          if node . must_be_first and nodelist :
  new_environ = os . environ . copy ( )
          return self . _headers . get ( header . lower ( ) , ( None , alternate ) ) [ 1 ]
                  try :
   class Command ( AppCommand ) :
          if not isinstance ( index , ( slice , ) + six . integer_types ) :
 errors . append ( {  'message' : escape ( message ) if escape_html else message ,  'code' : error . code or '' ,  } )
 def random ( value ) :
  return super ( DateField , self ) . to_python ( value )
 parser . add_argument ( '--no-startup' , action = 'store_true' , dest = 'no_startup' ,  help = 'When using plain Python, ignore the PYTHONSTARTUP environment variable and ~/.pythonrc.py script.' )
           def next ( self ) :
    _add_doc ( reraise , """Reraise an exception.""" )
 from threading import RLock
   class MultiPartParser ( object ) :
      child_nodelists = ( 'nodelist_true' , 'nodelist_false' )
              fh . write ( writer . as_string ( ) )
 if self . L ( ) and self . data . month > 2 :
  except HTMLParseError :
   for key , op in OPERATORS . items ( ) :
 if six . PY2 :
    QuerySetPaginator = Paginator
      return lazy ( func , * resultclasses ) ( * args , ** kwargs )
 return _generate_cache_key ( request , request . method , [ ] , key_prefix )
 if len ( bits ) == 4 :
  from xml . sax . saxutils import XMLGenerator
  if options [ 'method' ] in ( 'prefork' , 'fork' ) :
 self . digits = digits
  for i in range ( 0 , self . total_form_count ( ) ) :
              raise ValidationError ( self . error_messages [ 'invalid_choice' ] , code = 'invalid_choice' )
 if not ( bits . scheme and bits . netloc ) :
          lang = get_language ( )
 return value . ljust ( int ( arg ) )
  else :
 from importlib import import_module
                  step = 'any'
 del kwargs [ 'warning' ]
   class AutoEscapeControlNode ( Node ) :
  elif isinstance ( value , ( decimal . Decimal , float ) + six . integer_types ) :
  default_translation = translation ( settings . LANGUAGE_CODE )
 from django . utils . functional import cached_property
                  end -= 1
              autoreload . main ( self . inner_run , None , options )
          if self . options . get ( "indent" ) :
   def add_root_elements ( self , handler ) :
                  return bytes ( s )
   if indent :
 from django . core . management . templates import TemplateCommand
     _illegal_formatting = re . compile ( r"((^|[^%])(%%)*%[sy])" )
                  return False
 from django . template . base import TemplateDoesNotExist
  else :
  except re . error as e :
               ttl = force_text ( ttl )
                  context [ 'block' ] = self
              self . cookies [ key ] [ 'path' ] = path
    if not _cookie_allows_colon_in_names :
                  pass
  if self . META . get ( header , None ) == value :
   def render ( self , context ) :
  except ImportError :
 if meta is None :
                          if self . match is None or self . match_re . search ( f ) :
  super ( BaseInlineFormSet , self ) . __init__ ( data , files , prefix = prefix ,  queryset = qs , ** kwargs )
  self . validators = self . default_validators + validators
      class WindowsError ( Exception ) :
   return s
 self . stdout . write ( "  You should commit this migration but leave the old ones in place;" )
      fs_encoding = sys . getfilesystemencoding ( ) or sys . getdefaultencoding ( )
  else :
 stats [ HITS ] += 1
    def validate_unique ( self ) :
   def list ( self , * args , ** kwargs ) :
  targets = [ ( app_label , migration . name ) ]
 duplicate . dicts = self . dicts [ : ]
          self . filepath = filepath
          return zipfile . ZipFile . read ( self , self . namelist ( ) [ 0 ] )
                           context_match = context_re . match ( imatch . group ( 2 ) )
  break
      pass
  if y and m and d :
              self . reader_leaves ( )
                      encoded = '"' + encoded + '"'
  else :
  return format_html ( '<input{0} />' , flatatt ( final_attrs ) )
  result . append ( self . create_token ( self . template_string [ start : end ] , ( start , end ) , True ) )
 dict . __setitem__ ( self , key , M )
 if extend :
 check_for_migrations ( app_config , connection )
          from django . core . urlresolvers import reverse , NoReverseMatch
              self . active_writers -= 1
              for app_label in bad_app_labels :
               if ignore and field_name not in model_fields :
   def _should_delete_form ( self , form ) :
  def __new__ ( cls , * args , ** kwargs ) :
          arg = int ( arg )
          try :
  return self . _namespace_dict [ language_code ]
 chunk = handler . receive_data_chunk ( chunk ,  counters [ i ] )
  elif type ( s ) != six . text_type :
  if not context_instance :
  mapped_tokens . append ( self . translate_token ( token ) )
              return False
  except Exception :
          return EscapeText ( s )
 def removetags ( value , tags ) :
              print ( "Running post-migrate handlers for application %s" % app_config . label )
  if self . initial and 'initial' not in kwargs :
  _active . value = translation ( language )
  def _decorator ( view_func ) :
          self . close ( )
  s2 = time . strftime ( fmt , ( year + 28 , ) + timetuple [ 1 : ] )
                      def m2m_convert ( value ) :
 if props :
 try :
    return msgs
          daemon_kwargs [ 'out_log' ] = options [ 'outlog' ]
    @ register . filter ( is_safe = True )
 PY3 = sys . version_info [ 0 ] == 3
   data = { }
               return { }
 if isinstance ( value , list ) :
 hour , minute = divmod ( timezone , 60 )
    def has_key ( self , key ) :
 gettext_module . GNUTranslations . __init__ ( self )
   def as_ul ( self ) :
              cursor . close ( )
  def __init__ ( self , max_value = None , min_value = None , max_digits = None , decimal_places = None , * args , ** kwargs ) :
  BASE2_ALPHABET = '01'
                 return context [ 'forloop' ]
 return formatdate ( epoch_seconds , usegmt = True )
 def __init__ ( self , fields = ( ) , * args , ** kwargs ) :
 return date ( datetime . now ( tz = tzinfo ) , self . format_string )
 from django . db import connections , DEFAULT_DB_ALIAS
  words = allow_lazy ( words )
 handler . addQuickElement ( "description" , self . feed [ 'description' ] )
  except LookupError :
                  if k [ 1 ] is None :
     def infix ( bp , func ) :
 self . resolver_match = None
   try :
              if settings . USE_L10N :
   def getvalue ( self ) :
     class LocaleRegexURLResolver ( RegexURLResolver ) :
  return id_
          processors = [ ]
   def build_attrs ( self , extra_attrs = None , ** kwargs ) :
              self . instance = self . fk . rel . to ( )
                   filename = traceback . extract_tb ( tb ) [ - 1 ] [ 0 ]
                  if field_node . getElementsByTagName ( 'None' ) :
  import socket
 return any ( ignore ( pattern ) for pattern in ignore_patterns )
                  e . django_template_source = node . source
          return "<%s: %s>" % ( self . __class__ . __name__ ,  super ( MultiValueDict , self ) . __repr__ ( ) )
    return [ self . forms [ i ] for i in self . _deleted_form_indexes ]
          if isinstance ( data , ( MultiValueDict , MergeDict ) ) :
                  attrs [ 'id' ] = auto_id
 if not isabs ( path ) :
 if errors :
  if ch == '?' :
              return t . to_language ( )
   used_name = the_path . split ( '/' ) [ - 1 ]
                      continue
  wrap = allow_lazy ( wrap , six . text_type )
                  if resolved_path :
          unique_check = [ field for field in unique_check if field != self . fk . name ]
          final_attrs = self . build_attrs ( attrs , type = 'checkbox' , name = name )
 if self . max_length is not None :
                  os . makedirs ( dirname )
          if instance is None :
          try :
 filename = os . path . basename ( path )
 from django . utils import six
   year = year + ( ( 2000 - year ) // 28 ) * 28
   def _get_page ( self , * args , ** kwargs ) :
   RAW = "raw"
from __future__ import unicode_literals
          self . objects . append ( self . get_dump_object ( obj ) )
 return select_html
                      s = six . text_type ( s )
 resolved_path . append ( ns )
   def __bool__ ( self ) :
  if isinstance ( path , six . string_types ) :
  except AttributeError :
 kw = [ d . year , d . month , d . day ]
 link = [ last , root , key , result ]
    else :
  _CacheInfo = namedtuple ( "CacheInfo" , [ "hits" , "misses" , "maxsize" , "currsize" ] )
    @ register . filter ( is_safe = True )
 self . asvar = asvar
   class InvalidPage ( Exception ) :
      operations = [ ]
      def b ( s ) :
 def truncatechars ( value , arg ) :
 reloader ( wrapped_main_func , args , kwargs )
   def __iter__ ( self ) :
  unescape_string_literal = allow_lazy ( unescape_string_literal )
 break
      zbuf = BytesIO ( )
   class ContextPopException ( Exception ) :
              def __mod__ ( self , rhs ) :
          return "<Block Node: %s. Contents: %r>" % ( self . name , self . nodelist )
                 if instance . pk is None :
 if safe :
       def close ( self ) :
 return obj
 result += ':' + ipv4_address
    @ register . filter ( "linebreaks" , is_safe = True , needs_autoescape = True )
  else :
              alter_sql . extend ( [ '-- ' + sql for sql in  connection . creation . sql_for_pending_references ( model , style , pending_references ) ] )
  except ( ValueError , TypeError ) :
 self . __dict__ [ '_setupfunc' ] = func
 get_function_closure = operator . attrgetter ( _func_closure )
    code . interact ( local = imported_objects )
  class _HashedSeq ( list ) :
      smart_str = smart_bytes
   literal_match = self . literal_regex . match ( domain_part )
 obj . _constructor_args = ( args , kwargs )
          urlconf = get_urlconf ( )
  else :
   msgs = msgs . replace (  "#. #-#-#-#-#  %s.pot (PACKAGE VERSION)  #-#-#-#-#\n" % self . domain , "" )
              table_names = [ ]
  with context . push ( var = output ) :
 self . make_writeable ( new_path )
 from django . utils . ipv6 import clean_ipv6_address
 def __repr__ ( self ) :
                    output . append ( str_hidden )
  from django . conf import settings
 default_error_messages = {  'invalid' : _ ( 'Enter a whole number.' ) ,  }
  elif char in 'bEFMmNn' :
              if t . token_type == TOKEN_BLOCK :
 if kwarg :
 try :
                  six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc_info ( ) [ 2 ] )
   return m + Media ( definition )
  nodelist = self . create_nodelist ( )
   def lazy_number ( func , resultclass , number = None , ** kwargs ) :
                  self . stdout . write ( "No changes detected in apps '%s'" % ( "', '" . join ( app_labels ) ) )
              if is_aware ( o ) :
 class BaseFormSet ( object ) :
 if settings . configured :
 continue
          return ''
 from django . db . migrations . executor import MigrationExecutor
              handler . startElement ( "author" , { } )
  elif name == 'string' :
 os . dup2 ( si . fileno ( ) , sys . stdin . fileno ( ) )
   else :
          return get_connection ( backend = self . email_backend , fail_silently = True )
   def usage ( self , subcommand ) :
  elif isinstance ( o , decimal . Decimal ) :
 if not os . path . isfile ( init_path ) :
                          tried . append ( [ pattern ] )
 if hasattr ( self , 'clean_%s' % name ) :
 import types
              self . empty_label = None
   def render ( self , context ) :
                  key += tuple ( type ( v ) for k , v in sorted_items )
 self . value = value
     class Deserializer ( base . Deserializer ) :
  update_wrapper ( _wrapper , func )
              validate_ipv6_address ( value )
  from collections import OrderedDict
 simple_url_2_re = re . compile ( r'^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$' , re . IGNORECASE )
 if 'Location' in response and request . get_host ( ) :
   return metaclass ( cls . __name__ , cls . __bases__ , orig_vars )
   elif name in lib . filters :
  BLOCK_CONTEXT_KEY = 'block_context'
          msgs = msgs . replace ( 'charset=CHARSET' , 'charset=UTF-8' )
      help = "Runs this project as a FastCGI application. Requires flup."
      return _trans . check_for_language ( lang_code )
 from django . utils . html import ( conditional_escape , escapejs ,  escape , urlize as _urlize , linebreaks , strip_tags , avoid_wrapping ,  remove_tags )
    print_ = getattr ( moves . builtins , "print" , None )
 if hasattr ( value , 'close' ) :
  naiveip_re = re . compile ( r"""^(?: (?P<addr>     (?P<ipv4>\d{1,3}(?:\.\d{1,3}){3}) |         # IPv4 address     (?P<ipv6>\[[a-fA-F0-9:]+\]) |               # IPv6 address     (?P<fqdn>[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*) # FQDN ):)?(?P<port>\d+)$""" , re . X )
   def load_template ( self , template_name , template_dirs = None ) :
   def add_prefix ( self , prefix ) :
 pending_references = { }
 if len ( fks_to_parent ) == 1 :
                      fh . write ( writer . as_string ( ) )
          s = s [ 1 : ]
   def n ( self ) :
     if self . merge and conflicts :
  if fields and f . name not in fields :
          text = text [ 1 : ]
    elif field . rel and isinstance ( field . rel , models . ManyToOneRel ) :
           return super ( PythonSerializer , self ) . getvalue ( )
 if errors is None :
   base_name = '%s_name' % app_or_project
   def validate ( self , value ) :
          super ( DictWrapper , self ) . __init__ ( data )
              _localtime = pytz . timezone ( settings . TIME_ZONE )
  func ( path )
  except StandardError as e :
  return data . get ( name , None )
 field = self . fields [ fieldname ]
 get_function_defaults = operator . attrgetter ( _func_defaults )
              return None
   if field not in self . fields :
                      content = token_string [ 2 : - 2 ] . strip ( )
     def _find_boundary ( self , data , eof = False ) :
 for c in reversed ( self . __class__ . __mro__ ) :
   def render ( self , context ) :
 self . email_backend = email_backend
 trans_real . _default = None
   existing_headers = set ( header . lower ( ) for header in vary_headers )
  return initial_forms
  else :
 if ch in '*?+' :
              return _ ( 'noon' )
              continue
              raise CommandError ( "couldn't download URL %s to %s: %s" %  ( url , filename , e ) )
     @ register . tag ( 'if' )
  with io . open ( potfile , 'a' , encoding = 'utf-8' ) as fp :
   def Y ( self ) :
 zfile . write ( s )
   return result
          if app_config . models_module is None :
   qs = self . queryset . filter ( ** { '%s__in' % key : value } )
  bf_errors = self . error_class ( [ conditional_escape ( error ) for error in bf . errors ] )
          if parse_until is None :
 import warnings
    class CheckboxFieldRenderer ( ChoiceFieldRenderer ) :
 assert not ( cls . _delegate_bytes and cls . _delegate_text ) , "Cannot call lazy() with both bytes and text return types."
   if bf . label :
 for name in pattern . reverse_dict :
      if settings . TEMPLATE_DEBUG and display_name :
          return mark_safe ( result )
                          nodelist . append ( node . render ( context ) )
        def parse_cookie ( cookie ) :
                      lookups . appendlist ( pattern . name , ( bits , p_pattern , pattern . default_args ) )
 if callable ( initial_value ) :
 try :
 self . origin = origin
 try :
 for pattern in reversed ( self . url_patterns ) :
   block_context . add_blocks ( self . blocks )
           raise TemplateSyntaxError (  "'%s' did not receive value(s) for the argument(s): %s" %  ( name , ", " . join ( "'%s'" % p for p in unhandled_params ) ) )
  from django . utils import six
 try :
                          out . write ( blankout ( p , 'F' ) )
 from django . template . context import ( BaseContext , Context , RequestContext ,  ContextPopException )
 self . can_read = threading . Semaphore ( 0 )
 self . verbatim = False
 from django . forms . formsets import BaseFormSet , formset_factory
  from django . utils . translation import ugettext_lazy as _ , pgettext_lazy
 from django . conf import settings
 default_error_messages = {  'invalid_choice' : _ ( 'The inline foreign key did not match the parent instance primary key.' ) ,  }
                      return '%s-%s-%s' % ( y , m , d )
              value = float ( value )
   def id_for_label ( self , id_ ) :
  if doublecolon_len > best_doublecolon_len :
   self . _mutable = mutable
                  if register_to :
  def indent ( self , level ) :
   @ upload_handlers . setter
 return formatted_subject [ : 989 ]
 import re
  app_models = router . get_migratable_models ( app_config , connection . alias )
                  if not lookup :
 return mark_safe ( force_text ( value ) . translate ( _js_escapes ) )
                  key = force_str ( key )
 for name in formatters :
     class RequireDebugFalse ( logging . Filter ) :
 parser . add_argument ( '--exclude' , '-x' , default = [ ] , dest = 'exclude' , action = 'append' ,  help = 'Locales to exclude. Default is none. Can be used multiple times.' )
 self . app_name = app_name
 i += 1
   if self . verbosity > 0 :
                   compare_to = nodelist_true_output = self . nodelist_true . render ( context )
              self . instance . full_clean ( exclude = exclude , validate_unique = False )
              return bytes ( value )
  write_pot_file ( potfile , msgs )
          pathext = os . environ . get ( 'PATHEXT' , '.COM;.EXE;.BAT;.CMD' ) . split ( os . pathsep )
    _urllib_request_moved_attributes = [  MovedAttribute ( "urlopen" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "install_opener" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "build_opener" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "pathname2url" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "url2pathname" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "getproxies" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "Request" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "OpenerDirector" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPDefaultErrorHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPRedirectHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPCookieProcessor" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "ProxyHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "BaseHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPPasswordMgr" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPPasswordMgrWithDefaultRealm" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "AbstractBasicAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPBasicAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "ProxyBasicAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "AbstractDigestAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPDigestAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "ProxyDigestAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPSHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "FileHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "FTPHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "CacheFTPHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "UnknownHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPErrorProcessor" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "urlretrieve" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "urlcleanup" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "URLopener" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "FancyURLopener" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "proxy_bypass" , "urllib" , "urllib.request" ) ,  ]
          try :
              handler . addQuickElement ( "atom:link" , None ,  { "rel" : "self" , "href" : self . feed [ 'feed_url' ] } )
  else :
 bits = token . split_contents ( ) [ 1 : ]
              return ''
     backend_name = connection . settings_dict [ 'ENGINE' ] . split ( '.' ) [ - 1 ]
  except ImportError :
 class URLValidator ( RegexValidator ) :
  qs = qs . using ( form . instance . _state . db )
                  return lookup_view
 if pattern . app_name :
 for app_dir in app_dirs :
              self . choices = [ ]
 return result
                      template , display_name = loader ( name , dirs )
  exhaust ( field_stream )
  from django . utils . encoding import force_text
      return b64_encode ( salted_hmac ( salt , value , key ) . digest ( ) )
 try :
      input_type = 'checkbox'
          cc [ k . replace ( '_' , '-' ) ] = v
  return klass
 hhmm = '%02d%02d' % divmod ( abs ( offset ) , 60 )
          raise ValidationError ( _ ( 'Enter a valid IPv6 address.' ) , code = 'invalid' )
                  raise ValueError ( 'Unable to add filter %r: %s' % ( f , e ) )
  register = Library ( )
  else :
                      dirs . remove ( dirname )
  view_name = self . view_name . resolve ( context )
  requires_system_checks = False
  return self . _text_chars ( length , truncate , text , truncate_len )
          parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
                  if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) :
  else :
   def add_blocks ( self , blocks ) :
 from django . forms import Form
 from django . utils . encoding import smart_text , force_text , python_2_unicode_compatible
  elif isinstance ( o , datetime . date ) :
          if self . negated :
  self . callback = None
          lang = get_language ( )
 return self
  try :
      def __init__ ( self , attrs = None ) :
 if value in self . empty_values :
  self . stream = options . pop ( "stream" , six . StringIO ( ) )
    def _lazy_proxy_unpickle ( func , args , kwargs , * resultclasses ) :
            stream . unget ( chunk )
          try :
    def assertRaisesRegex ( self , * args , ** kwargs ) :
                                  self . stdout . write ( "    Installing custom SQL for %s.%s model\n" % ( app_name , model . _meta . object_name ) )
  return cache_key
              return True
  else :
              message = trim_whitespace ( message )
 @ stringfilter
 from django . db import models
                      os . unlink ( work_file )
                  compiled_regex = re . compile ( regex , re . UNICODE )
  kwargs = {  'form' : form ,  'formfield_callback' : formfield_callback ,  'formset' : formset ,  'extra' : extra ,  'can_delete' : can_delete ,  'can_order' : can_order ,  'fields' : fields ,  'exclude' : exclude ,  'min_num' : min_num ,  'max_num' : max_num ,  'widgets' : widgets ,  'validate_min' : validate_min ,  'validate_max' : validate_max ,  'localized_fields' : localized_fields ,  'labels' : labels ,  'help_texts' : help_texts ,  'error_messages' : error_messages ,  }
 parser . add_library ( lib )
      mime_type = 'application/rss+xml; charset=utf-8'
   def render ( self , context ) :
   else :
   name = '.' . join ( parts )
          return '<Page %s of %s>' % ( self . number , self . paginator . num_pages )
 s = Select ( choices = choices )
                  if field . serialize :
    def _parse_header_params ( s ) :
    if settings . TEMPLATE_DEBUG :
 s1 = time . strftime ( fmt , ( year , ) + timetuple [ 1 : ] )
      help = ( "Runs over the entire source tree of the current directory and "  "pulls out all strings marked for translation. It creates (or updates) a message "  "file in the conf/locale (in the django tree) or locale (for projects and "  "applications) directory.\n\nYou must run this command with one of either the "  "--locale, --exclude or --all options." )
              self [ key ] = default
 self . upload_handlers = ImmutableList (  self . upload_handlers ,  warning = "You cannot alter upload handlers after the upload has been processed."  )
 new_ip = hextet [ 0 ] . split ( ':' )
 if safe is not None :
 space = " "
           self . verbosity = options . get ( 'verbosity' )
          cls = None
 if 'error_messages' in kwargs :
   def phone2numeric ( phone ) :
 if len ( bits ) < 2 :
  if not isinstance ( s , six . string_types ) :
   is_compressed = False
 def timesince_filter ( value , arg = None ) :
                  sublist = _helper ( sublist_item , tabs + 1 )
  else :
          if str ( number ) [ 0 ] == sign :
  if format not in _serializers :
 new_operations = optimizer . optimize ( operations , migration . app_label )
          bits = token . split_contents ( ) [ 1 : ]
  formfield . queryset = formfield . queryset . complex_filter ( limit_choices_to )
                  exhaust ( self . _input_data )
 endtag_re = re . compile ( '</%s>' % tags_re )
              formfield = formfield_callback ( f , ** kwargs )
 from django . utils . six . moves . urllib . parse import urljoin
              for obj in self . queryset . all ( ) :
 _win = ( sys . platform == "win32" )
  return forms_valid and not self . non_form_errors ( )
 if param :
 output = [ format_html ( '<select multiple="multiple"{0}>' , flatatt ( final_attrs ) ) ]
              raise self . error ( token , "Invalid block tag: '%s', expected %s" %  ( command , get_text_list ( [ "'%s'" % p for p in parse_until ] ) ) )
 for migration in migrations_to_squash :
              result . setLevel ( _checkLevel ( level ) )
 self . target_var = target_var
                  field_value = smart_text ( field_value , options . get ( "encoding" , settings . DEFAULT_CHARSET ) , strings_only = True )
   def getvalue ( self ) :
   def calculate_app_template_dirs ( ) :
  else :
 encode = lambda k , v : '%s=%s' % ( ( quote ( k , safe ) , quote ( v , safe ) ) )
              form = ManagementForm ( self . data , auto_id = self . auto_id , prefix = self . prefix )
  getLogger = logging . getLogger
 if isinstance ( s , SafeData ) :
          parser . add_argument ( 'args' , metavar = 'test_label' , nargs = '*' ,  help = 'Module paths to test; can be modulename, modulename.TestCase or modulename.TestCase.test_method' )
    setattr ( form . instance , self . fk . get_attname ( ) , self . instance . pk )
 from django . forms . widgets import HiddenInput
   def __next__ ( self ) :
                  message = 'use only numbers, letters and underscores'
  def __init__ ( self , children = None , connector = None , negated = False ) :
              data [ "pk" ] = smart_text ( obj . _get_pk_val ( ) , strings_only = True )
              len ( X ( ) )
   def render ( self , context ) :
  import datetime
   def validate_unique ( self ) :
                      out . write ( ' _(%s) ' % cmatch . group ( 1 ) )
          return strftime ( self , fmt )
  if self . _wrapped is empty :
   def remove_potfiles ( self ) :
                  input_format = get_format ( 'DATE_INPUT_FORMATS' ) [ 0 ]
import django
              raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : value } ,  )
                       migrations_directory = os . path . dirname ( writer . path )
      def __init__ ( self , content ) :
      resource_string = None
    def linebreaks ( value , autoescape = False ) :
  elif '\\' in path :
 __hash__ = new_method_proxy ( hash )
 super ( FileField , self ) . __init__ ( * args , ** kwargs )
                  raise
  if node . getElementsByTagName ( 'None' ) :
              self . _current [ field . name ] = field . value_to_string ( obj )
                              data = base64 . b64decode ( raw_data )
                  raise CommandError ( '"%s" is not a valid port number '  'or address:port pair.' % options [ 'addrport' ] )
          for widget in self . get_renderer ( name , value , attrs , choices ) :
  else :
 next = index + len ( self . _boundary )
 tempdir = tempfile . mkdtemp ( prefix = prefix , suffix = '_extract' )
  def items ( self ) :
                  token = Token ( TOKEN_VAR , token_string [ 2 : - 2 ] . strip ( ) )
                              continue
  def add_arguments ( self , parser ) :
  kwargs = dict ( ( k , config [ k ] ) for k in config if valid_ident ( k ) )
     def common_logger_config ( self , logger , config , incremental = False ) :
   else :
 parser . add_argument ( '--testrunner' ,  action = 'store' , dest = 'testrunner' ,  help = 'Tells Django to use specified test runner class instead of '  'the one specified by the TEST_RUNNER setting.' ) ,
 format_type = force_str ( format_type )
          return ''
                      value = getattr ( self , 'clean_%s' % name ) ( )
          try :
              return timezone . make_aware ( value , current_timezone )
 if _locs_ is None :
 if not value :
 parser . add_argument ( '-i' , '--interface' , choices = self . shells , dest = 'interface' ,  help = 'Specify an interactive interpreter interface. Available options: "ipython" and "bpython"' )
 return DefusedExpatParser ( )
 self . selected_fields = options . pop ( "fields" , None )
  else :
              self . stream . write ( "," )
 ch , escaped = next ( pattern_iter )
          return len ( self . object_list )
 return d ( stream_or_string , ** options )
 output = [ ]
          self . _post = QueryDict ( '' )
              return self . _render ( context )
                  raise ValueError ( 'Unable to set formatter '  '%r: %s' % ( formatter , e ) )
                   if key not in self :
              return self . _truncate_html ( length , truncate , text , truncate_len , False )
   output = [ ]
                  return func ( context , self . first )
 bits = token . split_contents ( )
      return _trans . gettext_noop ( message )
   from django . conf import settings
              handler . addQuickElement ( "copyright" , self . feed [ 'feed_copyright' ] )
           self . _iterator = iter ( value )
              del self . _headers [ header . lower ( ) ]
 from __future__ import unicode_literals
    class RequestContext ( Context ) :
  else :
                  if isinstance ( value , str ) :
  try :
     def load_template_source ( self , template_name , template_dirs = None ) :
                  if field . serialize :
 from django . utils . jslex import prepare_js_for_gettext
   if strings_only and is_protected_type ( s ) :
 VARIABLE_TAG_END = '}}'
                  if attr in flags :
          provided = list ( provided )
   def _has_changed ( self , initial , data ) :
  return palette
    try :
          if parse_until :
    def is_naive ( value ) :
 self . keep_pot = options . get ( 'keep_pot' )
 token = parser . next_token ( )
              extra_files . extend ( map ( lambda x : x . strip ( ) , file . split ( ',' ) ) )
           seconds2 , name2 = chunks [ i + 1 ]
  except AttributeError :
          escaper = conditional_escape
 self . nodelist_loop = nodelist_loop
     kwarg_re = re . compile ( r"(?:(\w+)=)?(.+)" )
 compile_func = partial ( generic_tag_compiler ,  params = params , varargs = varargs , varkw = varkw ,  defaults = defaults , name = function_name ,  takes_context = takes_context , node_class = SimpleNode )
   try :
    else :
              return { }
              if self . field . choice_cache is None :
 @ stringfilter
 _empty_value = [ ]
 super ( SortedDict , self ) . __init__ ( data )
          for k , v in self . _iteritems ( ) :
  httpd . set_app ( wsgi_handler )
              raise ValueError ( 'ModelForm has no model class specified.' )
 self . widget . choices = self . choices
   def W ( self ) :
  if m :
  else :
 while end > 0 and s . count ( b'"' , 0 , end ) % 2 :
                      rawdata = force_str ( rawdata )
  c . append ( tok )
      def __new__ ( mcs , name , bases , attrs ) :
          return t . render ( Context ( dictionary ) )
  if isinstance ( loader , six . string_types ) :
 left = t . led ( left , self )
      fmt = get_format ( 'DATE_FORMAT' )
 if app_label not in executor . loader . migrated_apps :
          return getattr ( module , class_name )
  handler . addQuickElement ( "id" , unique_id )
 if form . errors :
                                  self . stderr . write ( "    Failed to install custom SQL for %s.%s model: %s\n" % ( app_name , model . _meta . object_name , e ) )
          for bit in bits :
      if not _serializers :
 self . initial = initial
                  return True
  else :
  Module_six_moves_urllib_error . _moved_attributes = _urllib_error_moved_attributes
 try :
 self . xml = SimplerXMLGenerator ( self . stream , self . options . get ( "encoding" , settings . DEFAULT_CHARSET ) )
          return s . encode ( encoding , errors )
  def __init__ ( self , message = None , code = None , whitelist = None ) :
      return _trans . ungettext ( singular , plural , number )
     if PY3 :
  def render ( self , context ) :
                      cls . __str__ = cls . __text_cast
 def iriencode ( value ) :
          self . parent_instance = parent_instance
 global _supported
 try :
  self . xml . endElement ( "field" )
   try :
  except Resolver404 :
          return self . loader ( self . loadname , self . dirs ) [ 0 ]
 self . can_write . release ( )
 if nodelist_empty is None :
 return from_current_timezone ( result )
   if '.' in str_number :
  def clean ( self , value ) :
              raise AttributeError ( "'%s' object has no attribute 'ordered_forms'" % self . __class__ . __name__ )
     class ModelMultipleChoiceField ( ModelChoiceField ) :
 if count2 != 0 :
  with context . push ( ** values ) :
  if verbosity >= 2 :
   def validate ( self , value ) :
                  if hasattr ( e , 'code' ) and e . code in self . error_messages :
   class Command ( AppCommand ) :
 try :
              localedir = os . path . join ( app_config . path , 'locale' )
          return self . path < other . path
 return func ( * resolved_args , ** resolved_kwargs )
          ipv4_unpacked = _unpack_ipv4 ( ip_str )
   @ property
          for format in settings . SERIALIZATION_MODULES :
  from django . utils import six
  sql , references = connection . creation . sql_create_model ( model , no_style ( ) , seen_models )
  else :
 if link is not None :
    base2 = BaseConverter ( BASE2_ALPHABET )
     @ deconstructible
 if self . _count is None :
   def exit_command ( self ) :
  except ValidationError :
      widget = ClearableFileInput
   elif dirname == 'locale' :
 from django . forms . widgets import (  TextInput , NumberInput , EmailInput , URLInput , HiddenInput ,  MultipleHiddenInput , ClearableFileInput , CheckboxInput , Select ,  NullBooleanSelect , SelectMultiple , DateInput , DateTimeInput , TimeInput ,  SplitDateTimeWidget , SplitHiddenDateTimeWidget , FILE_INPUT_CONTRADICTION  )
           if only_new :
   wrapped_main_func = check_errors ( main_func )
          return "UTC"
 exc_value = exc_type (  "Unsupported value: %r. You should install pytz." % dt )
 result = [ ]
 value = self . _convert_to_charset ( value , 'latin-1' , mime_encode = True )
 from django . forms . forms import DeclarativeFieldsMetaclass , BaseForm
          if incomment :
 for line in content . split ( "\n" ) :
     class SafeBytes ( bytes , SafeData ) :
     def to_locale ( language , to_lower = False ) :
 should_convert = ( isinstance ( value , datetime )  and ( settings . USE_TZ if use_tz is None else use_tz )  and not is_naive ( value )  and getattr ( value , 'convert_to_local_time' , True ) )
          self . _archive . close ( )
    def mark_for_escaping ( s ) :
    def _add_local_translations ( self ) :
             self . _choices = self . widget . choices = list ( value )
    @ deconstructible
 def __init__ ( self , parent_widget , name , value , attrs , choices ) :
              yield key , self [ key ]
    return output [ : : - 1 ]
  else :
    definition = getattr ( cls , 'Media' , None )
          if self . is_localized :
  if mtime != _mtimes [ filename ] :
     _super = super
  elif token_string . startswith ( COMMENT_TAG_START ) :
                              f = os . path . join ( root , f )
                  msg += " You may need to add %r to ALLOWED_HOSTS." % domain
  elif piece :
    class Group ( list ) :
      print ( FASTCGI_HELP )
      config [ 'fmt' ] = config . pop ( 'format' )
   self . fields = fields
 self . _raw_ipv6 = True
              return self . _stream . readline ( * args , ** kwargs )
  try :
     @ python_2_unicode_compatible
 if not using_sysrandom :
    if self . allow_folders :
  config = self . config
 self . _post_parse_error = False
    stream . unget ( chunk [ header_end + 4 : ] )
 from django . core . validators import validate_ipv4_address
  if not self . invoked_for_django :
 if message_context [ 0 ] == '"' :
  else :
     for date_check in all_date_checks :
   def end_serialization ( self ) :
          name = getattr ( func , "_decorated_function" , func ) . __name__
              self . _changed_data = [ ]
               return False
 from gzip import GzipFile
          return { "version" : self . _version ,  "xmlns:atom" : "http://www.w3.org/2005/Atom" }
  models . signals . pre_migrate . send (  sender = app_config ,  app_config = app_config ,  verbosity = verbosity ,  interactive = interactive ,  using = db )
     class ConvertingList ( list ) :
              result = self . configure_custom ( config )
 handler_config = handlers [ name ]
   def configure_custom ( self , config ) :
          if self . is_localized :
          f . save_form_data ( instance , cleaned_data [ f . name ] )
 for opname , opfunc in convert [ root ] :
              @ wraps ( view_func , assigned = available_attrs ( view_func ) )
  else :
  else :
                          new_context [ 'csrf_token' ] = csrf_token
                  result . parent = self
 from django . http . utils import fix_location_header , conditional_content_removal
              return EndToken
 return ResolverMatch ( sub_match . func , sub_match . args , sub_match_dict , sub_match . url_name , self . app_name or sub_match . app_name , [ self . namespace ] + sub_match . namespaces )
  elif message_context [ 0 ] == "'" :
  else :
  elif options [ "daemonize" ] . lower ( ) in ( 'false' , 'no' , 'f' ) :
              if is_library_missing ( taglib_module ) :
 import os
 import json
   return self . _count
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
          self . _archive . printdir ( * args , ** kwargs )
                return text
  url = 'mailto:%s@%s' % ( local , domain )
 from django . utils . module_loading import module_has_submodule
              nodes . append ( self )
  raise CommandError ( message )
            result = force_text ( message )
  if ( self . max_digits is not None and self . decimal_places is not None  and whole_digits > ( self . max_digits - self . decimal_places ) ) :
    def timeuntil ( d , now = None ) :
                                result [ - 1 ] = Choice ( [ None , result [ - 1 ] ] )
  values = { 'true' : True , 'false' : False }
 for smigration in migrations_to_squash :
   def value ( self ) :
    if form . _meta . fields :
 template , origin = find_template ( template_name , dirs )
 become_daemon ( our_home_dir = options [ "workdir" ] , ** daemon_kwargs )
 return re_newlines . sub ( '\n' , text )
   class Command ( BaseCommand ) :
   self . save_m2m = save_m2m
  return '\n' . join ( output )
 return localtime ( value ) if should_convert else value
  return initial != data
              return
  for i , ( seconds , name ) in enumerate ( chunks ) :
  try :
 doublecolon_len = 0
 pass
   def ungettext ( singular , plural , number ) :
 processors . append ( func )
          return True
          return SafeText ( s )
  if end is None :
  else :
import argparse
 if self . _errors is None :
          return formats . time_format ( value , arg )
 pass
  return _default
 self . xml . startElement ( "field" , {  "name" : field . name ,  "type" : field . get_internal_type ( )  } )
          return "(%s %r)" % ( self . id , self . value )
          if offset is not None :
  def add_arguments ( self , parser ) :
          self . flo = flo
   elif field . required :
           try :
      def __init__ ( self , regex , max_length = None , min_length = None , error_message = None , * args , ** kwargs ) :
 start += len ( toktext )
   def __str__ ( self ) :
 value = p [ i + 1 : ] . strip ( )
 return j
           instance . save ( )
   def render_option ( self , selected_choices , option_value , option_label ) :
                  break
from __future__ import unicode_literals
              result = self . find_template_cache [ key ]
 safe = isinstance ( value , SafeData )
              raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : value } ,  )
          return datetime . datetime . strptime ( force_str ( value ) , format )
                  self . interesting = _html_parser . interesting_cdata
              if module_has_submodule ( app_config . module , "management" ) :
                      if latest_date is None or item_date > latest_date :
                  _locs_ = frame . f_locals
 self . name = name
                      initial_prefixed_name = self . add_initial_prefix ( name )
  return value
 if os . path . isdir ( app_dir ) :
               break
 if value in self . empty_values :
 i = 0
          if safe and not isinstance ( data , dict ) :
  except AttributeError :
    @ register . tag
  warnings . warn (  "django.utils.tzinfo will be removed in Django 1.9. "  "Use django.utils.timezone instead." ,  RemovedInDjango19Warning , stacklevel = 2 )
 def __add__ ( self , rhs ) :
    def patch_response_headers ( response , cache_timeout = None ) :
  else :
 parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
                  yield b'' . join ( self )
          items = _iteritems
  def add_item_elements ( self , handler , item ) :
              data [ Model . _meta . pk . attname ] = Model . _meta . pk . to_python ( d . get ( "pk" , None ) )
                  validate_ipv46_address ( ip_address )
 for pattern in self . url_patterns :
 if len ( password ) > inner . block_size :
  def __dir__ ( self ) :
 options = self . render_options ( choices , [ value ] )
 class Operator ( TokenBase ) :
              safe = force_bytes ( safe , self . encoding )
 wrapper = warn_about_renamed_method ( class_name , * renamed_method )
          import bpython
   def smart_urlquote ( url ) :
                             six . reraise ( * exc_info )
     class FloatField ( IntegerField ) :
          if options [ "daemonize" ] . lower ( ) in ( 'true' , 'yes' , 't' ) :
 if self . interactive :
   return property ( fget , fset , fdel , doc )
          self . file = file_name
 yield SubWidget ( self , name , value , attrs , choices )
                  self . verbatim = False
                      plural . append ( contents )
              result . append ( self . create_token ( last_bit , ( upto , upto + len ( last_bit ) ) , False ) )
              if self . queryset is not None :
 if 'class' in attrs :
      text = match . group ( 1 )
  self . DSTDIFF = self . DSTOFFSET - self . STDOFFSET
 from django . utils . translation import ugettext_lazy as _ , ungettext_lazy
          return time_str + '-0000'
 DIGIT_PATTERN = re . compile ( r'^\d+$' )
 match = _html_parser . endtagfind . match ( rawdata , i )
          if truncate is None :
         ns_resolver = RegexURLResolver ( ns_pattern , resolver . url_patterns )
              raise StopIteration ( )
 if cleaned_line . endswith ( ";" ) :
    @ register . tag
                      break
  return result
 df = DateFormat ( value )
 if self . options . get ( "indent" ) :
 def urlencode ( value , safe = None ) :
  self . _post_render_callbacks = [ ]
    accept_language_re = re . compile ( r'''         ([A-Za-z]{1,8}(?:-[A-Za-z0-9]{1,8})*|\*)      # "en", "en-au", "x-y-z", "es-419", "*"         (?:\s*;\s*q=(0(?:\.\d{,3})?|1(?:.0{,3})?))?   # Optional "q=1.00", "q=0.8"         (?:\s*,\s*|$)                                 # Multiple accepts per header.         ''' , re . VERBOSE )
   class IfParser ( object ) :
  try :
      input_type = 'password'
          return settings . LANGUAGE_CODE
try :
 if match :
 logger . propagate = True
 import time
 break
  elif token . token_type == 2 :
              if self . to_field :
              return self . handle_merge ( loader , conflicts )
              if not self . required :
            if hasattr ( self , '_choices' ) :
 for possibility , pattern , defaults in possibilities :
 with io . open ( os . path . join ( self . dirpath , thefile ) , "w" , encoding = 'utf-8' ) as fp :
                          return result
 self . empty = options . get ( 'empty' , False )
 if not settings . configured :
          return settings . DEBUG
  def load_template_source ( self , template_name , template_dirs = None ) :
          del _active . value
 self . connector = connector or self . default
              raise ValueError ( "Don't mix *args and **kwargs in call to reverse()!" )
  if confirm == 'yes' :
 error_messages [ 'invalid' ] = error_message
 _itervalues = "values"
          return (  isinstance ( other , RegexValidator ) and  self . regex . pattern == other . regex . pattern and  self . regex . flags == other . regex . flags and  ( self . message == other . message ) and  ( self . code == other . code ) and  ( self . inverse_match == other . inverse_match )  )
 @ stringfilter
 parser . delete_first_token ( )
 s = subject [ p : i ]
 if renderer :
 message = _ ( 'Ensure this value is less than or equal to %(limit_value)s.' )
   class BadHeaderError ( ValueError ) :
   def render ( self , context ) :
          if value in self . empty_values :
 open_tags = [ ]
                  return getattr ( instance , name ) ( )
                       value . encode ( charset )
 process_all = options . get ( 'all' )
 data = method ( self , * args , ** kwargs )
      widget = DateTimeInput
   @ property
 for i , v in enumerate ( value ) :
  else :
              raise CommandError ( "App '%s' does not have migrations (so squashmigrations on it makes no sense)" % app_label )
      def __init__ ( self , filter_expression ) :
 MONTHS = {  1 : _ ( 'January' ) , 2 : _ ( 'February' ) , 3 : _ ( 'March' ) , 4 : _ ( 'April' ) , 5 : _ ( 'May' ) , 6 : _ ( 'June' ) ,  7 : _ ( 'July' ) , 8 : _ ( 'August' ) , 9 : _ ( 'September' ) , 10 : _ ( 'October' ) , 11 : _ ( 'November' ) ,  12 : _ ( 'December' )  }
  def b ( self ) :
              pass
     def _handle_m2m_field_node ( self , node , field ) :
  else :
    class Serializer ( object ) :
 self . pointer = 0
                      raise TemplateSyntaxError ( "Variables and attributes may "  "not begin with underscores: '%s'" %  var )
  if secure :
 self . symlinks = options . get ( 'symlinks' )
              return result
                  url = smart_urlquote ( 'http://%s' % middle )
  else :
              self . stdout . write ( "Rendering %s template files with "  "extensions: %s\n" %  ( app_or_project , ', ' . join ( extensions ) ) )
 for resultclass in resultclasses :
      from django . utils . six . moves import _dummy_thread as thread
          return language . lower ( )
  if hasattr ( settings , "SERIALIZATION_MODULES" ) :
   return list ( zip ( * flatten_result ( result ) ) )
    if as_form :
                      old = '#: ' + work_file [ 2 : ]
                          self . configure_root ( root )
   executor = MigrationExecutor ( connections [ DEFAULT_DB_ALIAS ] )
  except ValidationError as e :
 return instance
              found = self . importer ( used )
      class VerbatimNode ( Node ) :
  if var_obj is None :
          return type ( self ) . __bool__ ( self )
 from django . utils . functional import curry , Promise
 @ stringfilter
              raise StopIteration ( )
      class AdminEmailHandler ( logging . Handler ) :
              return ( t [ 0 ] . lower ( ) , True )
 for name in loggers :
          self . sign = sign
 return bool ( self . children )
              if not hasattr ( e , 'django_template_source' ) :
 DEFAULT_PALETTE = DARK_PALETTE
 if os . path . isdir ( os . path . join ( 'conf' , 'locale' ) ) :
                          self . bad_cookies = set ( )
              break
 self . _app_dict [ language_code ] = apps
                  week_number = 1
 notifier . stop ( )
  if item [ 'ttl' ] is not None :
 forms = ' ' . join ( form . as_ul ( ) for form in self )
                  logger . addHandler ( self . config [ 'handlers' ] [ h ] )
   def get ( self , key , default = None ) :
 super ( QueryDict , self ) . __delitem__ ( key )
   def num_items ( self ) :
 code = 'max_length'
                  if self . required :
  elif k == 'bg' :
  except StandardError as e :
  elif not isinstance ( value , ConvertingTuple ) and isinstance ( value , tuple ) :
 tags = [ re . escape ( tag ) for tag in tags . split ( ) ]
    class HttpResponseServerError ( HttpResponse ) :
          language_code = get_language ( )
  else :
   def clean ( self , value ) :
      return base64 . urlsafe_b64encode ( s ) . strip ( b'=' )
 if value in self . empty_values :
 return six . text_type ( self . data . year ) [ 2 : ]
 if self . verbosity > 1 :
          d = ',%s' % datetime_safe . new_datetime ( date ) . strftime ( '%Y-%m-%d' )
    return None
    if hasattr ( hashlib , "pbkdf2_hmac" ) :
 self . name = name
          value = field . _get_val_from_obj ( obj )
   else :
                           title = plan_node [ 1 ]
 self . lineno += token_string . count ( '\n' )
 intrans = False
  else :
   def check_programs ( * programs ) :
    def configure_formatter ( self , config ) :
           default_attrs = { 'cols' : '40' , 'rows' : '10' }
    new_modules = module_values - _cached_modules
          parent = self . parent_name . resolve ( context )
 six . reraise ( exc_type , exc_value , sys . exc_info ( ) [ 2 ] )
 return self . choice_input_class ( self . name , self . value , self . attrs . copy ( ) , choice , idx )
                              raise AttributeError
                  raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
 handler . addQuickElement ( "name" , item [ 'author_name' ] )
            state = self . __dict__ . copy ( )
          for arg in list ( args ) + list ( six . itervalues ( kwargs ) ) :
    def to_python ( self , value ) :
          return False
          if data in self . empty_values :
  from functools import wraps , update_wrapper , WRAPPER_ASSIGNMENTS
 if not cleaned_line :
 from django . core . management . sql import sql_indexes
 self . limit_choices_to = limit_choices_to
 self . xml . startElement ( "django-objects" , { "version" : "1.0" } )
  num_pages = property ( _get_num_pages )
 try :
 try :
 sign = '-' if seconds < 0 else '+'
      def __init__ ( self , field ) :
    if item [ 'enclosure' ] is not None :
  if six . PY2 :
   message_context = None
 self . _done = False
              if mime_encode :
   def pop ( self , k , * args ) :
   else :
  return value
          return self . value
     def translation ( language ) :
  else :
 from django . core . management . utils import ( handle_extensions , find_command ,  popen_wrapper )
 handler . addQuickElement ( "updated" , rfc3339_date ( self . latest_post_date ( ) ) )
          __str__ = serialize
          self . path , self . match , self . recursive = path , match , recursive
 domain_regex = re . compile (    r'(?:[A-Z0-9](?:[A-Z0-9-]{0,247}[A-Z0-9])?\.)+(?:[A-Z]{2,6}|[A-Z0-9-]{2,}(?<!-))$' ,  re . IGNORECASE )
                name = self . fk . name
              self . _callback = None
   def __getattr__ ( self , attr ) :
 from django . utils . deprecation import RemovedInDjango20Warning
 shells = [ 'ipython' , 'bpython' ]
              yield obj
 import sys
 re_tag = re . compile ( r'<(/)?([^ ]+?)(?:(\s*/)| .*?)?>' , re . S )
          for filepath in self . get_template_sources ( template_name , template_dirs ) :
    def symlinks_supported ( ) :
     def run ( addr , port , wsgi_handler , ipv6 = False , threading = False ) :
     _format_cache = { }
          output . extend ( connection . creation . sql_indexes_for_model ( model , style ) )
  if error_messages is not None :
          seen = set ( )
 parser . delete_first_token ( )
 if handlers :
   if not matches :
 try :
 return int ( value ) % int ( arg ) == 0
 with io . open ( pofile , 'w' , encoding = 'utf-8' ) as fp :
              host = self . META [ 'HTTP_HOST' ]
  plural_forms_re = re . compile ( r'^(?P<value>"Plural-Forms.+?\\n")\s*$' , re . MULTILINE | re . DOTALL )
 seconds = abs ( seconds )
  return [ smart_text ( val ) for val in value ]
                      confirm = input ( 'Please enter either "yes" or "no": ' )
from __future__ import unicode_literals
  __all__ = ( 'SelectDateWidget' , )
                  return self . extract ( absolute_path )
              return '%s_%s' % ( id_ , first_select )
  src_data = prepare_js_for_gettext ( src_data )
          return escape ( value )
 decimals = abs ( exponent )
          return t . render ( context_instance )
 if self . feed [ 'feed_url' ] is not None :
 extra_files = [ ]
              ignore_patterns += [ 'CVS' , '.*' , '*~' , '*.pyc' ]
  else :
    _urllib_error_moved_attributes = [  MovedAttribute ( "URLError" , "urllib2" , "urllib.error" ) ,  MovedAttribute ( "HTTPError" , "urllib2" , "urllib.error" ) ,  MovedAttribute ( "ContentTooShortError" , "urllib" , "urllib.error" ) ,  ]
   def __len__ ( self ) :
 parser . add_argument ( '--empty' , action = 'store_true' , dest = 'empty' , default = False ,  help = "Create an empty migration." )
     def upath ( path ) :
 super ( ManagementForm , self ) . __init__ ( * args , ** kwargs )
 from django . http . cookie import SimpleCookie
 return name + '-clear'
  return callback [ : dot ] , callback [ dot + 1 : ]
 from django . conf import settings
 kwargs [ 'instance' ] = self . _existing_object ( pk )
 return date_value . strftime ( input_format )
  except AttributeError :
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
          return six . text_type ( s , encoding , 'replace' )
 from django . utils . _os import safe_join
 try :
          return value
  except VariableDoesNotExist :
          ch = None
  warnings . warn (  "get_declared_fields is deprecated and will be removed in Django 1.9." ,  RemovedInDjango19Warning ,  stacklevel = 2 ,  )
              base = sup_cls . media
                              file_ , _ , _ = imp . find_module ( module_name , [ entry ] )
          zipfile . ZipFile . __init__ ( self , * args , ** kwargs )
          warnings . warn ( "The syncdb command will be removed in Django 1.9" , RemovedInDjango19Warning )
              msg = ( "\nYou have installed Django's auth system, and "  "don't have any superusers defined.\nWould you like to create one "  "now? (yes/no): " )
 sep = kwargs . pop ( "sep" , None )
   class Command ( TemplateCommand ) :
     @ python_2_unicode_compatible
   def u ( self ) :
  from django . core . management . base import AppCommand
  def __init__ ( self , * args , ** kwargs ) :
     def render_value_in_context ( value , context ) :
    class SsiNode ( Node ) :
   def __str__ ( self ) :
    if ip_str . count ( '::' ) > 1 :
   def H ( self ) :
  else :
     class ModelChoiceIterator ( object ) :
          return date_format ( value , 'DATETIME_FORMAT' , use_l10n = use_l10n )
 self . default_locale_path = self . locale_paths [ 0 ]
      compare = lambda self , a , b : a < b
                  self . stdout . write ( "  Optimized from %s operations to %s operations." % ( len ( operations ) , len ( new_operations ) ) )
 sub_match_dict . update ( sub_match . kwargs )
                  return plural_suffix
    def available_attrs ( fn ) :
      msgs_with_ctxt = ( "%s%s%s" % ( context , CONTEXT_SEPARATOR , singular ) ,  "%s%s%s" % ( context , CONTEXT_SEPARATOR , plural ) ,  number )
   def lists ( self ) :
 if self . feed [ 'ttl' ] is not None :
 upto = 0
  if '.' in hextets [ - 1 ] :
              ch2 = None
   def get_limit_choices_to ( self ) :
  if isinstance ( number , int ) and not use_grouping and not decimal_pos :
                  return [ ]
  kwargs [ key ] = parser . compile_filter ( value )
  elif char in 'dj' :
 value = normalize_newlines ( value )
 if kwds :
          result = super ( ChoiceField , self ) . __deepcopy__ ( memo )
              raise StopIteration ( )
          self . blocks [ name ] . append ( block )
                  import readline
  kw = dict ( ( k , int ( v ) ) for k , v in six . iteritems ( kw ) if v is not None )
   def __repr__ ( self ) :
 boolean_attrs = [ ]
  else :
 return FilterExpression ( token , self )
   return data
              if isinstance ( field , InlineForeignKeyField ) :
    changes = autodetector . changes (  graph = loader . graph ,  trim_to_apps = app_labels or None ,  convert_apps = app_labels or None ,  )
 if not len ( self . backout ) :
 default_error_messages = {  'invalid_date' : _ ( 'Enter a valid date.' ) ,  'invalid_time' : _ ( 'Enter a valid time.' ) ,  }
          msg = "%s doesn't look like a module path" % dotted_path
   def handle_data ( self , d ) :
 BASE62_ALPHABET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
   @ property
 return dirs
    def get_cookie_signer ( salt = 'django.core.signing.get_cookie_signer' ) :
 import sys
          kw = match . groupdict ( )
 self . write ( s , encoding )
          return SafeBytes ( s )
    validate_email = EmailValidator ( )
  except StopIteration :
 return value . center ( int ( arg ) )
  self . stdout . write ( "Performing system checks...\n\n" )
  else :
 from django . utils . translation import trans_real
                                  with transaction . atomic ( using = connection . alias , savepoint = connection . features . can_rollback_ddl ) :
   def _handle_object ( self , node ) :
  output . append ( '</select>' )
  return super ( BooleanField , self ) . to_python ( value )
              buf = self . readline ( )
 if result is not None :
  old_style_list = True
 match = time_re . match ( value )
              template_dirs = settings . TEMPLATE_DIRS
          return repr ( self . dicts )
      get_callable . cache_clear ( )
   def dictConfig ( config ) :
                  raise ValidationError ( ungettext (  "Please submit %d or fewer forms." ,  "Please submit %d or fewer forms." , self . max_num ) % self . max_num ,  code = 'too_many_forms' ,  )
                    opts . fields = None
   check_programs ( 'xgettext' )
     def resolve ( path , urlconf = None ) :
              if len ( new_operations ) == len ( operations ) :
          if app_config . models_module is None :
  delta = expires - expires . utcnow ( )
   def _reset_dicts ( self , value = None ) :
  yield representative , True
              app_label = options [ 'app_label' ]
 if len ( val1 ) != len ( val2 ) :
 try :
              return time_format ( value , arg )
                      command = token . contents . split ( ) [ 0 ]
            basedirs = [ os . path . join ( os . path . dirname ( os . path . dirname ( __file__ ) ) ,  'conf' , 'locale' ) ,  'locale' ]
          if app_config . models_module is None :
              return ''
 return super ( QueryDict , self ) . popitem ( )
          for k , v in six . iteritems ( dict_ ) :
              return bytes ( func ( * self . __args , ** self . __kw ) )
           compressed = zlib . compress ( data )
   def __iter__ ( self ) :
  elif ch == "^" :
              raise base . SerializationError ( "Non-model object (%s) encountered during serialization" % type ( obj ) )
 if m is not None and n is not None :
   class Command ( BaseCommand ) :
   if six . PY3 :
 iterlists = _iterlists
 if not self . first :
              self . _non_form_errors = self . error_class ( e . error_list )
  return _HashedSeq ( key )
 saved_instances . append ( self . save_existing ( form , obj , commit = commit ) )
   if num_loopvars != len_item :
              if hasattr ( data , 'read' ) :
 from functools import wraps
 return '{%s}' % ', ' . join ( '%r: %r' % ( k , v ) for k , v in six . iteritems ( self ) )
   def get_dump_object ( self , obj ) :
  except AttributeError :
  else :
          if isinstance ( elt , six . string_types ) :
          nesting = 0
 inner . update ( password . translate ( hmac . trans_36 ) )
  elif change == I18N_MODIFIED :
   def __enter__ ( self ) :
   return tuple ( app_template_dirs )
  except ValueError :
  else :
  url_schemes = [ 'http' , 'https' , 'ftp' ]
  references_to_delete = { }
    def push ( self , * args , ** kwargs ) :
 match = self . regex . search ( path )
                      self . handle_data ( rawdata [ i : j ] )
              for dirname in dirnames [ : ] :
 while bits :
 return True
   def __eq__ ( self , other ) :
 if t is not None :
          self . name = name
  result = self . __class__ ( )
 rest = value
   def __iter__ ( self ) :
  from django . core . management . base import CommandError
   def unclosed_block_tag ( self , parse_until ) :
  except ( TypeError , AttributeError ) :
         def total_ordering ( cls ) :
  parser . _namedCycleNodes [ name ] = node
     class URLNode ( Node ) :
    else :
                          continue
 def content ( self ) :
 self . error_class = error_class
   def strip_spaces_between_tags ( value ) :
 self . error_messages = messages
  from django . conf import settings
 value = unicodedata . normalize ( 'NFKD' , value ) . encode ( 'ascii' , 'ignore' ) . decode ( 'ascii' )
          return iter ( self . _container )
          tag , this_value_expr , max_value_expr , max_width = bits
          j = text . find ( substr , i )
          return self . content
 _iteritems = "items"
                      new_attr = name
  if options . get ( 'liveserver' ) is not None :
   def setdefault ( self , key , default = None ) :
  elif ch == ')' :
                  bit = self . render_node ( node , context )
                          return True
              value = '-' + value
 statements = sql_indexes ( app_config , self . style , connection )
 if definition :
   def extract ( self , filename ) :
     return d
                      template = get_template_from_string ( template , origin , template_name )
              self . message = message
 from django . db . migrations . loader import AmbiguityError
  return self . _wrapped . __dict__
      locale_dirs = filter ( os . path . isdir , glob . glob ( '%s/*' % self . default_locale_path ) )
            cache . set ( cache_key , [ ] , cache_timeout )
   def root_attributes ( self ) :
     finally :
          return ''
          self . mutex = threading . RLock ( )
   def add_arguments ( self , parser ) :
                      netloc = netloc . encode ( 'idna' ) . decode ( 'ascii' )
 for sub_stream in boundarystream :
              for match in regexes [ state ] . finditer ( text , start ) :
 def do_include ( parser , token ) :
                              self . stdout . write ( " [X] %s" % title )
     class BaseConfigurator ( object ) :
   def value_from_datadict ( self , data , files , name ) :
 return content
   if in_tag and not self . verbatim :
              if migration . replaces :
              return bytes ( ( i , ) )
 self . keyOrder = [ ]
   try :
import copy
 try :
                      if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) :
                      temp_lib . tags [ name ] = lib . tags [ name ]
    for attr , value in base . __dict__ . items ( ) :
 if _globs_ is None :
 def __init__ ( self , data = None , files = None , instance = None ,  save_as_new = False , prefix = None , queryset = None , ** kwargs ) :
 if isinstance ( value , six . string_types ) :
              as_form = True
                          answer = "n"
                  return False
from __future__ import unicode_literals
 while ch != terminal_char :
 if sep is not None :
                  try :
 def needs_multipart_form ( self ) :
              self . reason_phrase = reason
                  self . active_writers += 1
                  truncate_len -= 1
  return proxy
 final_attrs = self . build_attrs ( attrs )
    def push ( self , name , block ) :
    class EscapeText ( six . text_type , EscapeData ) :
              self . _update_errors ( e )
          super ( Command , self ) . add_arguments ( parser )
              words = words [ : length ]
                      value = field . to_python ( getInnerText ( field_node ) . strip ( ) )
   else :
 from django . utils import six
              if e . args [ 0 ] not in not_found :
     class FilePathField ( ChoiceField ) :
          return False
   def as_text ( self , attrs = None , ** kwargs ) :
          if value != self . empty_value :
          namelist = self . _archive . namelist ( )
   @ cached_property
  module = type ( 'BadSerializerModule' , ( object , ) , {  'Deserializer' : bad_serializer ,  'Serializer' : bad_serializer ,  } )
              self [ key ] = result
      from _systemrestart import SystemRestart
              self . cookies [ key ] [ 'domain' ] = domain
 pos = last = 0
      return ( form_class is not None and (  hasattr ( form_class , '_meta' ) and  ( form_class . _meta . fields is not None or  form_class . _meta . exclude is not None )  ) )
                      number_value = rhs
 html = endtag_re . sub ( '' , html )
   def __getinitargs__ ( self ) :
 if isinstance ( other_dict , MultiValueDict ) :
  elif message_context [ 0 ] == "'" :
 root = nonlocal_root [ 0 ]
 if re . search ( '^%s%s' % ( prefix_norm , pattern ) , candidate_pat % candidate_subs , re . UNICODE ) :
          changeset = None
  try :
                  errors = getattr ( fp , "errors" , None )
   def format_output ( self , rendered_widgets ) :
                              new_matches = normalize ( parent_pat + pat )
  if values is None :
                  k = item [ 0 ]
  from django . conf import settings
 msguniq_options = [ '--to-code=utf-8' ]
 if arg not in ( 'on' , 'off' ) :
   @ property
 STATUS_OK = 0
 from django . utils . six . moves import xrange
                  form . fields [ ORDERING_FIELD_NAME ] = IntegerField ( label = _ ( 'Order' ) , initial = index + 1 , required = False )
 TOKEN_BLOCK = 2
       if only_new :
  else :
  else :
 MONTHS_3_REV = {  'jan' : 1 , 'feb' : 2 , 'mar' : 3 , 'apr' : 4 , 'may' : 5 , 'jun' : 6 , 'jul' : 7 , 'aug' : 8 ,  'sep' : 9 , 'oct' : 10 , 'nov' : 11 , 'dec' : 12  }
  _ , file_ext = os . path . splitext ( self . file )
  else :
          return ( ord ( byte ) for byte in buf )
   def previous_page_number ( self ) :
    @ register . filter ( is_safe = True )
 def debug ( parser , token ) :
 exclude = options . get ( 'exclude' )
                  try :
 try :
                  trimmed = trim_url ( middle )
  return i
  touch_import ( 'django.utils.encoding' , 'python_2_unicode_compatible' , decorated )
   else :
 while ch != '}' :
          self . fed . append ( '&#%s;' % name )
  result = func ( * args )
 if self . _pk_field == self . fk :
   if self . empty :
                   if ( attr in ( "__file__" , "__name__" , "__path__" ) and  self . mod not in sys . modules ) :
              for module in get_format_modules ( lang ) :
                          initial_value = initial_value ( )
          register_serializer ( format , BUILTIN_SERIALIZERS [ format ] , serializers )
              return force_text ( time . tzname [ is_dst ] , DEFAULT_LOCALE_ENCODING )
     def make_origin ( display_name , loader , name , dirs ) :
       data = None
              res = to_digits [ 0 ]
 self . active_readers += t
 cmatch = constant_re . match ( parts [ 0 ] )
                          self . xml . startElement ( "natural" , { } )
    @ register . filter ( is_safe = True )
 import os
              if self . min_value is not None :
                  if is_ignored ( os . path . normpath ( os . path . join ( dirpath , dirname ) ) , norm_patterns ) :
              return base
                          len_item = len ( item )
      from django . conf . locale import LANG_INFO
 if not self . is_valid ( ) or not self . can_order :
  else :
 value . configurator = self
 MONTHS_3 = {  1 : _ ( 'jan' ) , 2 : _ ( 'feb' ) , 3 : _ ( 'mar' ) , 4 : _ ( 'apr' ) , 5 : _ ( 'may' ) , 6 : _ ( 'jun' ) ,  7 : _ ( 'jul' ) , 8 : _ ( 'aug' ) , 9 : _ ( 'sep' ) , 10 : _ ( 'oct' ) , 11 : _ ( 'nov' ) , 12 : _ ( 'dec' )  }
                  raise TypeError ( "relative imports require the 'package' argument" )
  if exctype is not WindowsError or 'Access is denied' not in str ( value ) :
 from django . utils . safestring import mark_safe , SafeData
    def w ( self ) :
 if ( obj . pk is None and hasattr ( Model , 'natural_key' ) and  hasattr ( Model . _default_manager , 'get_by_natural_key' ) ) :
      def getInnerText ( node ) :
 output . append ( last_row )
     class RssFeed ( SyndicationFeed ) :
          cache = caches [ settings . CACHE_MIDDLEWARE_ALIAS ]
   def decompress ( self , value ) :
          self . _encoding = value
  return _long_to_bin ( result , hex_format_string )
   def y ( self ) :
              if hasattr ( handler , 'file' ) :
                  replaces . append ( ( migration . app_label , migration . name ) )
                  values = [ ]
 parser . add_argument ( '--keep-pot' , action = 'store_true' , dest = 'keep_pot' ,  default = False , help = "Keep .pot file after making messages. Useful when debugging." )
  s = subject [ p : i ]
   def _mark_post_parse_error ( self ) :
 for key in self :
      _tc . load ( str ( 'foo:bar=1' ) )
              if unicodedata . combining ( char ) :
  except KeyError :
    def readline ( self , * args , ** kwargs ) :
 def empty_form ( self ) :
 sys . stdout . close ( )
   else :
      message = _ ( 'Enter a valid email address.' )
      def __init__ ( self , dict_ = None ) :
              return escape ( output )
 return from_current_timezone ( result )
                          limit_choices_to = limit_choices_to ( )
          __bytes__ = serialize
 if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
          now = datetime . datetime . now ( utc if is_aware ( d ) else None )
 from django . test . signals import setting_changed
 if invalid_var_format_string is None :
    def get_language_from_path ( request ) :
 if not bytes :
              return self . empty_value
 self . loader , self . loadname , self . dirs = loader , name , dirs
      abspathu = abspath
   from django . template . base import ( Library , add_to_builtins , builtins ,  get_library , get_templatetags_modules , get_text_list , import_library ,  libraries )
              raise TemplateSyntaxError ( "Could not parse the remainder: '%s' "  "from '%s'" % ( token [ upto : ] , token ) )
 self . _add_fallback ( )
    class BlockContext ( object ) :
 get_method_self = operator . attrgetter ( _meth_self )
              raise ValidationError ( errors )
 class BaseValidator ( object ) :
              errors . update ( kwargs [ 'error_messages' ] )
 for item in elt :
     url = None
   except ImportError :
              return int ( time . mktime ( self . data . timetuple ( ) ) )
                      rest = rest [ m . end ( ) : ]
 GB = 1 << 30
 if value and ':' in value :
 if len ( bits ) >= 2 and bits [ - 2 ] == 'as' :
  return int ( value )
  klass = node . clone ( )
 timezone = ( offset . days * 24 * 60 ) + ( offset . seconds // 60 )
  normalize_newlines = allow_lazy ( normalize_newlines , six . text_type )
 nan = ( 1e200 * 1e200 ) // ( 1e200 * 1e200 )
  super ( Command , self ) . execute ( * args , ** options )
          return repr ( self . value )
      input_type = 'hidden'
   if hasattr ( test_runner_class , 'add_arguments' ) :
  def add_arguments ( self , parser ) :
   if len ( hextet ) > 1 :
   template_dir = self . handle_template ( options [ 'template' ] ,  base_subdir )
   for t in Lexer ( src , origin ) . tokenize ( ) :
 from django . utils . deprecation import RemovedInDjango19Warning
 auto_id = self . form . auto_id
                  e . django_template_source = self . source
from copy import copy
    def ungettext ( singular , plural , number ) :
          command , source = self . command_stack . pop ( )
          return self . render ( )
               try :
                       old = '#: ' + work_file
    def get_language_from_path ( path ) :
                  return True
  from django . db . models import ForeignKey
     def Deserializer ( stream_or_string , ** options ) :
  try :
              self . years = years
              questioner = MigrationQuestioner ( defaults = { 'ask_merge' : True } )
      default_error_messages = {  'invalid' : _ ( 'Enter a number.' ) ,  'max_digits' : ungettext_lazy (  'Ensure that there are no more than %(max)s digit in total.' ,  'Ensure that there are no more than %(max)s digits in total.' ,  'max' ) ,  'max_decimal_places' : ungettext_lazy (  'Ensure that there are no more than %(max)s decimal place.' ,  'Ensure that there are no more than %(max)s decimal places.' ,  'max' ) ,  'max_whole_digits' : ungettext_lazy (  'Ensure that there are no more than %(max)s digit before the decimal point.' ,  'Ensure that there are no more than %(max)s digits before the decimal point.' ,  'max' ) ,  }
    def gettext_noop ( message ) :
              app_configs = reversed ( list ( apps . get_app_configs ( ) ) )
              return ipv4_unpacked
          return types . MethodType ( func , obj , obj . __class__ )
              msg = self . style . HTTP_NOT_FOUND ( msg )
 from __future__ import unicode_literals
 assert iterations > 0
  import codecs
          for k , v in self . _iteritems ( ) :
  self . cleaned_data = { }
                  if middle . startswith ( opening ) :
 if match :
    def __eq__ ( self , other ) :
    form . fields [ name ] = InlineForeignKeyField ( self . instance , ** kwargs )
          prefix = get_script_prefix ( )
   def reload ( self ) :
 return not module_has_submodule ( package , module )
  if isinstance ( stream_or_string , six . string_types ) :
 if i < 0 :
 from django . db . migrations . executor import MigrationExecutor
                 value = field . widget . value_from_datadict ( self . data , self . files , self . add_prefix ( name ) )
                      singular . append ( contents )
    kwargs = { }
 if not ip_str . lower ( ) . startswith ( '0000:0000:0000:0000:0000:ffff:' ) :
          if kwarg_format :
 decompress = False
              label_for = format_html ( ' for="{0}"' , self . id_for_label )
  if decimal_pos is not None :
          post_sql_fields = [ f for f in opts . local_fields if hasattr ( f , 'post_create_sql' ) ]
  else :
          super ( Truncator , self ) . __init__ ( lambda : force_text ( text ) )
  if message is not None :
                  last_row = output [ - 1 ]
 six . reraise ( ValidationError , ValidationError (  message ,  code = 'ambiguous_timezone' ,  params = params ,  ) , sys . exc_info ( ) [ 2 ] )
   def nud ( self , parser ) :
                  import_module ( templatetag_module )
  raise
    for f in file_field_list :
    @ register . filter ( is_safe = False )
      def render ( self , context ) :
          from django import VERSION as version
  if cache_timeout is None :
                  self . appendlist ( key , value )
      help = 'Prints the SQL statements for resetting sequences for the given app name(s).'
          return ModelChoiceIterator ( self )
          return len ( list ( self . __iter__ ( ) ) )
              boolean_attrs . append ( ( attr , ) )
              if isinstance ( other , Promise ) :
              return initial
   elif bmatch :
 base_path = abspathu ( base )
 return getattr ( _prefixes , "value" , '/' )
  both_after = [  Tok ( "other" , r"." ) ,  ]
 self . can_write . release ( )
     else :
              t = self . current_token
 self . length = length
   def popitem ( self ) :
                  return False
          super ( MultiValueDict , self ) . __setitem__ ( key , list_ )
          return ZERO
  else :
 def do_filter ( parser , token ) :
 if m is None :
 try :
  output , errors = p . communicate ( )
 inner_result . extend ( res )
  def __init__ ( self , attrs = None ) :
 self . key = key or settings . SECRET_KEY
          super ( StringOrigin , self ) . __init__ ( UNKNOWN_SOURCE )
 i += 1
 if neg :
 import time
  data = b64_decode ( base64d )
  except ValueError :
  except AttributeError :
  return format_html ( '<label{0}>{1} {2}</label>' , label_for , self . tag ( ) , self . choice_label )
    class ModelFormOptions ( object ) :
 cache_key += '.%s' % tz_name . encode ( 'ascii' , 'ignore' ) . decode ( 'ascii' ) . replace ( ' ' , '_' )
                      ch , escaped = next ( pattern_iter )
    def tag_function ( self , func ) :
              exts = extensions if extensions else [ 'js' ]
   except KeyError :
 class MaxValueValidator ( BaseValidator ) :
 if id_ :
 if isinstance ( timezone , tzinfo ) :
 with lock :
 parser . delete_first_token ( )
          if find_command ( program ) is None :
 for i , piece in enumerate ( re_formatchars . split ( force_text ( formatstr ) ) ) :
   class BaseConverter ( object ) :
 def encoding ( self ) :
     class ConvertingTuple ( tuple ) :
  if help_texts and f . name in help_texts :
                      retval = newretval
 self . waiting_readers = 0
           if data is FILE_INPUT_CONTRADICTION :
     class HttpResponseBadRequest ( HttpResponse ) :
 if not self . timezone :
   def source_error ( self , source , msg ) :
      return _trans . deactivate ( )
                  exclude . append ( f . name )
   class Module_six_moves_urllib ( types . ModuleType ) :
 try :
          return map ( self . make_bytes , self . _iterator )
 if self . data . day in ( 11 , 12 , 13 ) :
                   writer = MigrationWriter ( migration )
  def __init__ ( self , nodelist_true , nodelist_false , * varlist ) :
 input_formats = formats . get_format_lazy ( 'TIME_INPUT_FORMATS' )
 obj . children = copy . deepcopy ( self . children , memodict )
 force_str = force_text
                  raise
  else :
          choice = self . choices [ idx ]
                  checkbox_name = self . clear_checkbox_name ( name )
    def activate ( language ) :
              return True
          return None
 off = 6 * ( delta // 100 + delta // 400 )
      import threading
   def convert ( self , value ) :
              callback ( self )
          templatetags_modules = get_templatetags_modules ( )
                          content_length = int ( meta_data . get ( 'content-length' ) [ 0 ] )
  _standard_context_processors = tuple ( processors )
          try :
              args = [ '"%s"' % arg for arg in args ]
 six . reraise ( ImportError , ImportError ( msg ) , sys . exc_info ( ) [ 2 ] )
          validate_ipv4_address ( value )
  lineno_comment_map [ comment_lineno_cache ] = [ ]
                           if self . verbosity >= 3 :
              return path . join ( django . __path__ [ 0 ] , 'conf' , subdir )
 self . setFeature ( handler . feature_external_ges , False )
  else :
   concrete_model = obj . _meta . concrete_model
 existing_headers = set ( header . lower ( ) for header in vary_headers )
  return encoding
 is_required = False
 hard_coded_bullets_re = re . compile ( r'((?:<p>(?:%s).*?[a-zA-Z].*?</p>\s*)+)' % '|' . join ( re . escape ( x ) for x in DOTS ) , re . DOTALL )
 from django . core . cache import caches
 EMPTY_DICT = { }
              return list ( self . iterlists ( ) )
              handler . addQuickElement ( "language" , self . feed [ 'language' ] )
 translators_comment_start = None
 self . auto_id = auto_id
  return value
      filepath = os . path . abspath ( filepath )
 result = result [ : start ] + [ inner ]
      pass
    def contains ( source , inst ) :
 return parser . parse ( )
   try :
    def _split_statements ( content ) :
          return self . token
   else :
                  continue
  except ( IndexError , TypeError , ValueError ) :
 if opts . model is None :
    def parse_accept_lang_header ( lang_string ) :
 from django . utils . html import conditional_escape , format_html
  elif isinstance ( value , datetime . date ) :
   def server_bind ( self ) :
  return ResolverMatch ( self . callback , args , kwargs , self . name )
 result = self . configure_custom ( config )
  except StandardError as e :
  if field in self . errors :
   try :
 if len ( words ) > length :
   return EventHandler . modified_code
              raise ValidationError ( self . message , code = self . code , params = params )
  self . use_natural_foreign_keys = options . pop ( 'use_natural_foreign_keys' , False ) or self . use_natural_keys
from __future__ import unicode_literals
  except ImportError :
   return value . replace ( tzinfo = timezone )
                  self . stdout . write ( self . style . MIGRATE_HEADING ( "Merging %s" % app_label ) )
  if isinstance ( s , ( six . text_type , Promise ) ) :
   def entity_decl ( self , name , is_parameter_entity , value , base ,  sysid , pubid , notation_name ) :
 if not self . use_natural_primary_keys or not hasattr ( obj , 'natural_key' ) :
          return apps . get_model ( model_identifier )
    @ register . filter ( is_safe = True )
  RE_DATE = re . compile ( r'(\d{4})-(\d\d?)-(\d\d?)$' )
  self . nodelist = compile_string ( template_string , origin )
      from yaml import CSafeLoader as SafeLoader
 domain_whitelist = [ 'localhost' ]
 response [ 'Cache-Control' ] = cc
  if ch2 == '?' :
 if nodelist :
 if self . field . show_hidden_initial :
 if isinstance ( source , inst ) :
  len_values = len ( values )
              self . months = months
 if kwargs [ 'setting' ] in ( 'LANGUAGES' , 'LANGUAGE_CODE' ) :
          if app_config . models_module is None :
 checkbox_id = self . clear_checkbox_id ( checkbox_name )
  from django . core . exceptions import (  ImproperlyConfigured , ValidationError , NON_FIELD_ERRORS , FieldError )
 self . toks = { }
          return False
     class CheckboxChoiceInput ( ChoiceInput ) :
  return result
   sign = '-' if offset < 0 else '+'
  else :
              return self . sign + value
   raise
 def content ( self ) :
   root = config . get ( 'root' , None )
   def __nonzero__ ( self ) :
   def delete_cookie ( self , key , path = '/' , domain = None ) :
  except TemplateSyntaxError as e :
   def _coerce ( self , value ) :
                      obj . delete ( )
                                      over_chunk = field_stream . read ( 4 - over_bytes )
  option_value = force_text ( option_value )
      def render ( self , context ) :
   else :
                      if not self . compile_filter_error ( token , e ) :
 pass
 self . pointer = i
                      attrvalue = self . unescape ( attrvalue )
 if data [ last : last + 1 ] == b'\n' :
          if response . streaming :
   def patch_cache_control ( response , ** kwargs ) :
                       unhandled_params . pop ( 0 )
 if hasattr ( formfield , 'queryset' ) :
              raise CommandError ( "App '%s' does not have migrations" % app_label )
  m2m_data [ field . name ] = [ m2m_convert ( pk ) for pk in field_value ]
 if callable ( data ) :
                  digits = decimals
    for hextet in ip_str . split ( ':' ) :
 if self . lookups is not None :
 @ stringfilter
  except ImportError :
              digits . append ( '0' )
              return text
                              out . write ( blankout ( part , 'P' ) )
                  TYPE = FILE
  from django . core . serializers . base import DeserializationError
     class TemplateTagNode ( Node ) :
 return mark_safe ( format_string . format ( * args_safe , ** kwargs_safe ) )
 dirs . append ( '' )
     super ( SimpleTemplateResponse , self ) . __init__ ( '' , content_type , status )
  from __future__ import unicode_literals
   def __iter__ ( self ) :
   none_model_fields = [ k for k , v in six . iteritems ( fields ) if not v ]
          return self . has_previous ( ) or self . has_next ( )
  else :
  except StandardError as e :
  MAXSIZE = sys . maxsize
 for module in templatetags_modules :
              yield 'month'
                   self . _files . appendlist (  force_text ( old_field_name , self . _encoding , errors = 'replace' ) ,  file_obj )
                      if plan_node not in shown and plan_node [ 0 ] == app_name :
   def m ( self ) :
      class DebugNodeList ( NodeList ) :
          original = UnicodeDecodeError . __str__ ( self )
     @ register . filter ( is_safe = True )
 parts . append ( decimals )
    if not hasattr ( self , '_deleted_form_indexes' ) :
 lib = get_library ( taglib )
    def _make_key ( args , kwds , typed ,  kwd_mark = ( object ( ) , ) ,  fasttypes = { int , str , frozenset , type ( None ) } ,  sorted = sorted , tuple = tuple , type = type , len = len ) :
                  if os . path . basename ( candidate ) in targets :
          value = self . to_python ( value ) . strip ( )
              if isinstance ( end , unicode ) :
              result = handler . handle_raw_input ( self . _input_data ,  self . _meta ,  self . _content_length ,  self . _boundary ,  encoding )
   else :
 from django . utils . functional import total_ordering
        months = ( 'Jan' , 'Feb' , 'Mar' , 'Apr' , 'May' , 'Jun' , 'Jul' , 'Aug' , 'Sep' , 'Oct' , 'Nov' , 'Dec' , )
 parser . EntityDeclHandler = self . entity_decl
   def full_clean ( self ) :
  test_runner_class = get_runner ( settings , self . test_runner )
              content_length = 0
              self . template_cache [ key ] = TemplateDoesNotExist
              handler . addQuickElement ( 'updated' , rfc3339_date ( item [ 'updateddate' ] ) )
 boundary = opts . get ( 'boundary' )
   def _update_errors ( self , errors ) :
   def __next__ ( self ) :
 inplural = False
 def is_hidden ( self ) :
   return format_html ( self . outer_html ,  id_attr = format_html ( ' id="{0}"' , id_ ) if id_ else '' ,  content = mark_safe ( '\n' . join ( output ) ) )
              raise CommandError ( "Can't find %s. Make sure you have GNU "  "gettext tools 0.15 or newer installed." % program )
                  initial = self . widget . decompress ( initial )
              handler . addQuickElement ( "description" , item [ 'description' ] )
              k , v = x . split ( '=' , 1 )
    elif name is not None and filter_func is not None :
  from django . core import validators
              @ decorator
                  return mark_safe ( func ( * args , ** kwargs ) )
       BM_compatible = True
              factory = config [ '()' ]
                  project_name = settings . SETTINGS_MODULE . split ( '.' ) [ 0 ]
              _ , params = cgi . parse_header ( content_disposition )
  self . _callback_strs . add ( lookup_str )
 paras = re . split ( '\n{2,}' , value )
                  new_value . append ( self . coerce ( choice ) )
from __future__ import unicode_literals
 text_type = unicode
          raise ImproperlyConfigured ( 'Loader does not define a "load_template" callable template source loader' )
  page_range = property ( _get_page_range )
   def initial_form_count ( self ) :
  try :
              self . cookies [ key ] [ 'max-age' ] = max_age
          raise TemplateDoesNotExist ( "No template names provided" )
              value = to_current_timezone ( value )
              unique_id = item [ 'unique_id' ]
  with open ( filename , 'wb' ) as outfile :
                  clean_data . append ( field . clean ( field_value ) )
              continue
   self . run_shell ( shell = options [ 'interface' ] )
              try :
      server_address = ( addr , port )
                  raise TypeError ( "sep must be None or a string" )
  else :
   def bound_data ( self , data , initial ) :
  else :
   def render ( self , context ) :
 self . url_name = url_name
    def force_text ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :
  output . append ( '</select>' )
  models . signals . post_migrate . send (  sender = app_config ,  app_config = app_config ,  verbosity = verbosity ,  interactive = interactive ,  using = db )
              value = str ( value )
                  priority = float ( priority )
  if number > self . num_pages :
   if p == 0 :
 if hasattr ( self , '_regex_validator' ) and self . _regex_validator in self . validators :
 if '_' in locale :
 from pprint import pformat
   self . _current_app = current_app
  else :
   potfile = os . path . join ( self . locale_dir , '%s.pot' % str ( domain ) )
 self . html_name = form . add_prefix ( name )
   @ property
              pathext = [ '' ]
  if level is not None :
          return self . value == self . choice_value
   base64d = force_bytes ( TimestampSigner ( key , salt = salt ) . unsign ( s , max_age = max_age ) )
              warnings . warn (  "`%s.%s` is deprecated, use `%s` instead." %  ( self . class_name , self . old_method_name , self . new_method_name ) ,  self . deprecation_warning , 2 )
       def __init__ ( self , name , old , new = None ) :
  from django . utils import six
   else :
  else :
 choices = list ( chain ( self . choices , choices ) )
              qs = queryset . none ( )
 __D2 = r'(?P<day>[ \d]\d)'
    else :
 try :
   if logging_config :
          self . _stream = stream
                      dirnames . remove ( dirname )
          return "<UTC>"
 self . _producer = producer
  except ImportError :
 lines = value . split ( '\n' )
          return t
   def tzname ( self , dt ) :
  else :
    class SafeText ( six . text_type , SafeData ) :
   def clean ( self , value ) :
   if formfield :
   @ property
          return [ ]
   nodelist_true_output = None
  else :
  self . bad_cookies . add ( key )
  elif callable ( func ) :
   def reload ( self ) :
              return list ( self . itervalues ( ) )
 if self . forms :
 if threading :
      class CommentNode ( Node ) :
      try :
              return cache [ mem_args ]
              if not hasattr ( f , 'save_form_data' ) :
     absolute_max = max_num + DEFAULT_MAX_NUM
   def new_method_proxy ( func ) :
    else :
          return iri
  if self . localize :
                      self . importer ( used )
              return ''
  else :
              return ''
  closing_tag , tagname , self_closing = tag . groups ( )
   elif t . token_type == TOKEN_VAR :
  return value
 if endblock . contents not in acceptable_endblocks :
 handlers = self . _upload_handlers
 try :
 internal_use_only = False
   def _clean_fields ( self ) :
 _func_defaults = "func_defaults"
    if 'private' in cc and 'public' in kwargs :
 from django . utils . regex_helper import normalize
 self . choices = choices
    else :
 if not self . timezone :
    extensions = tuple (  handle_extensions ( options [ 'extensions' ] , ignored = ( ) ) )
              table_names = connection . introspection . table_names ( cursor )
    def remove_move ( name ) :
 from django . utils . encoding import force_text
 last [ NEXT ] = root [ PREV ] = link
   dir_suffix = '%s*' % os . sep
   if not isinstance ( viewname , six . string_types ) :
    def flatten_result ( source ) :
          widgets = ( DateInput ( attrs = attrs , format = date_format ) ,  TimeInput ( attrs = attrs , format = time_format ) )
   class Command ( BaseCommand ) :
          if name is None and filter_func is None :
   old_app_dir = os . path . normpath ( os . path . join ( app_dir , 'models/sql' ) )
   def _get_to_python ( self , field ) :
   end = kwargs . pop ( "end" , None )
 def __add__ ( self , rhs ) :
              unique_id = get_tag_uri ( item [ 'link' ] , item [ 'pubdate' ] )
              self . _populate ( )
           msgs = '\n' . join ( dropwhile ( len , msgs . split ( '\n' ) ) )
    @ deconstructible
 if not template_dirs :
   class Page ( collections . Sequence ) :
              pass
 self . xml . endDocument ( )
    class InputStreamExhausted ( Exception ) :
    def _has_changed ( self , initial , data ) :
 to_unicode = lambda s : force_text ( s , strings_only = True )
              if len ( value ) != 1 :
              del attrs [ attr ]
                random . seed (  hashlib . sha256 (  ( "%s%s%s" % (  random . getstate ( ) ,  time . time ( ) ,  settings . SECRET_KEY ) ) . encode ( 'utf-8' )  ) . digest ( ) )
 return self . id
              urlconf_repr = repr ( self . urlconf_name )
                  continue
   view_path = url_name or self . _func_path
 fields = (  DateField ( input_formats = input_date_formats ,  error_messages = { 'invalid' : errors [ 'invalid_date' ] } ,  localize = localize ) ,  TimeField ( input_formats = input_time_formats ,  error_messages = { 'invalid' : errors [ 'invalid_time' ] } ,  localize = localize ) ,  )
              if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) :
 def get_resolver ( urlconf ) :
   if fixture_name != 'initial_data' and not fixture_files :
   def set_cookie ( self , key , value = '' , max_age = None , expires = None , path = '/' ,  domain = None , secure = False , httponly = False ) :
          return value
 for char in self . add_truncation_text ( '' , truncate ) :
                  return - 1
  else :
  self . xml . endElement ( "object" )
              ns = path . pop ( )
              if token_string . startswith ( VARIABLE_TAG_START ) :
 from django . utils . timezone import utc , get_fixed_timezone
  else :
  factory = c
    _urllib_robotparser_moved_attributes = [  MovedAttribute ( "RobotFileParser" , "robotparser" , "urllib.robotparser" ) ,  ]
     shutdown_message = '\nServer stopped.\nNote that the test database, %r, has not been deleted. You can explore it on your own.' % db_name
 return j
          try :
 from django . utils . encoding import force_text
   except ValueError :
 return FixedOffset ( offset , name )
   final_output . extend ( connection . creation . sql_for_pending_references ( model , style , pending_references ) )
 upto = end
 bits = token . split_contents ( )
              self . stream = stream_or_string
                      data = data . replace ( microsecond = 0 )
       class DefusedExpatParser ( _ExpatParser ) :
          output = self . nodelist . render ( context )
   if type ( s ) == bytes :
          self . command_stack . append ( ( command , token . source ) )
          sign = '-'
              if self . active_writers == 0 and self . waiting_writers == 0 and self . active_readers == 0 :
 from django . forms . models import *
              if not only_initial :
  return language [ : p ] . lower ( ) + '_' + language [ p + 1 : ] . upper ( )
 if isinstance ( offset , timedelta ) :
               final_attrs [ 'value' ] = force_text ( value )
                  raise ValueError ( "JSON can't represent timezone-aware times." )
 return sql_create ( app_config , style , connection ) + sql_custom ( app_config , style , connection ) + sql_indexes ( app_config , style , connection )
 try :
 return '%02d' % self . data . minute
import logging
  from django . db import models
   url = unquote ( force_str ( url ) )
  self . stdout . flush ( )
  handler . addQuickElement ( "guid" , item [ 'unique_id' ] , guid_attrs )
   return attrs
  else :
          return fastcgi_help ( )
 from importlib import import_module
          self . timezone = timezone
          arg = ',' + arg
 pdict = { }
 from django . core . management . color import no_style
  finally :
                      return True
 for replacement in set ( [  thousand_sep , unicodedata . normalize ( 'NFKD' , thousand_sep ) ] ) :
          value = self . to_python ( value ) . strip ( )
 return bool ( self . changed_data )
  except ValueError :
  if end < 0 :
   def is_multipart ( self ) :
   return avoid_wrapping ( value )
  val1 = parser . compile_filter ( bits [ 1 ] )
          value = list . pop ( self , idx )
  return self . _errors
   else :
                   ch , escaped = next ( pattern_iter )
 obj_dict [ '_data' ] = dict ( ( k , self . getlist ( k ) ) for k in self )
  if code is not None :
  try :
              token = self . next_token ( )
              self . stdout . write ( self . style . MIGRATE_HEADING ( "Optimizing..." ) )
    @ register . filter ( is_safe = False )
 attrs += [ attr . name for attr in self . _moved_attributes ]
 from django . core . serializers . python import Deserializer as PythonDeserializer
 from collections import OrderedDict
          if accept_lang == '*' :
   yield '%s\n' % line [ : space - 1 ]
 zfile . close ( )
   seconds = self . Z ( )
 self . attrs = attrs
  final_attrs = self . build_attrs ( attrs , type = self . input_type , name = name )
   def setlistdefault ( self , key , default_list = None ) :
       class metaclass ( meta ) :
   def widget_attrs ( self , widget ) :
 from __future__ import unicode_literals
  else :
          data = conditional_escape ( arg ) . join ( value )
 if self_closing or tagname in html4_singlets :
   return new_class
  return attrs
  from django . apps import apps
 try :
    self . find_template_cache [ key ] = result
 ASCTIME_DATE = re . compile ( r'^\w{3} %s %s %s %s$' % ( __M , __D2 , __T , __Y ) )
                  c = self . resolve ( c )
                   loop_dict [ 'counter0' ] = i
  import json
     def boolean_check ( v ) :
  initial_set = set ( force_text ( value ) for value in initial )
 from django . utils . encoding import force_text , python_2_unicode_compatible
          raise SerializerDoesNotExist ( format )
              break
    def get_random_string ( length = 12 ,  allowed_chars = 'abcdefghijklmnopqrstuvwxyz'  'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' ) :
   if six . PY3 :
     class TypedChoiceField ( ChoiceField ) :
          return "<DjangoTranslation lang:%s>" % self . __language
   def _isdst ( self , dt ) :
          kwargs [ 'max_age' ] = min ( int ( cc [ 'max-age' ] ) , kwargs [ 'max_age' ] )
 def timeuntil_filter ( value , arg = None ) :
                      match = None
 parser . UnparsedEntityDeclHandler = self . unparsed_entity_decl
                          continue
                  raise ValueError (  "fk_name '%s' is not a ForeignKey to '%s.%'."  % ( fk_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )
    def add_item_elements ( self , handler , item ) :
 def __init__ ( self , dict_ = None , autoescape = True , current_app = None ,  use_l10n = None , use_tz = None ) :
  else :
              loader = find_template_loader ( loader_name )
    except Exception as e :
  output_transaction = True
                          initial_value = field . to_python ( hidden_widget . value_from_datadict (  self . data , self . files , initial_prefixed_name ) )
 if len ( bits ) != 6 :
    from django . core . exceptions import ValidationError
  elif ch == ':' :
   def clean ( self ) :
 if not self . DIGIT_PATTERN . match ( idx ) :
          self . object_list = object_list
  for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) :
 self . is_reversed = is_reversed
              raise base . DeserializationError (  "<%s> node has invalid model identifier: '%s'"  % ( node . nodeName , model_identifier ) )
    def force_bytes ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :
  return func ( self . _wrapped , * args )
  except Resolver404 as e :
                  msgs = msgs . decode ( 'utf-8' )
  except Exception :
  self = tuple . __new__ ( cls , * args , ** kwargs )
 s = get_serializer ( format ) ( )
      pad = b'=' * ( - len ( s ) % 4 )
  def items ( self ) :
 if option_value in selected_choices :
           return datetime . utcnow ( ) . replace ( tzinfo = utc )
 from django . utils . encoding import smart_text , force_str , force_text
     def IE_sanitize ( self , filename ) :
 return { }
           return timezone . tzname ( None )
 comment_lineno_cache = None
 u = dig2 . digest ( )
              msg = "Invalid HTTP_HOST header: %r." % host
  from collections import OrderedDict
    def __reduce__ ( self ) :
              pass
          return all ( w . is_hidden for w in self . widgets )
                      if name in existing :
 itervalues = _itervalues
 timezone = ( offset . days * 24 * 60 ) + ( offset . seconds // 60 )
     def python_2_unicode_compatible ( klass ) :
              if key in d :
  else :
          dec_part = decimal_sep + dec_part
   if self . field . localize :
   else :
   @ property
 chunk += over_chunk
   def update ( self , other_dict ) :
              selected_html = mark_safe ( ' selected="selected"' )
    if months :
 handler . addQuickElement ( "name" , self . feed [ 'author_name' ] )
          t = s . split ( '=' , 1 )
  messages = { }
              handler . addQuickElement ( "subtitle" , self . feed [ 'subtitle' ] )
          handler . endElement ( "channel" )
  return mark_safe ( '\n' . join ( inputs ) )
    cls . _delegate_bytes = bytes in resultclasses
                  bits . append ( None )
   @ staticmethod
  value = urlunsplit ( url_fields )
   def has_changed ( self ) :
          query = query . lists ( )
                  os . kill ( os . getpid ( ) , - exit_code )
   from PIL import Image
          if ( hasattr ( value , '__iter__' ) and  not isinstance ( value , six . text_type ) and  not hasattr ( value , '_meta' ) ) :
 for name in filters :
  for app_name , namespace_list in pattern . app_dict . items ( ) :
 if key in cache :
                   logger = logging . getLogger ( 'py.warnings' )
   def display ( self ) :
     app_template_dirs = calculate_app_template_dirs ( )
                  self . _body = self . read ( )
   return ''
              return node . render ( context )
 def __new__ ( cls , fget = None , fset = None , fdel = None , doc = None ) :
                  self . active_writers += 1
 if value != '' :
  ALLOWED_VARIABLE_CHARS = ( 'abcdefghijklmnopqrstuvwxyz'  'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.' )
              self . stream . write ( "\n" )
   def remove ( self , item ) :
  connection = connections [ options [ 'database' ] ]
              self . _post , self . _files = QueryDict ( '' , encoding = self . _encoding ) , MultiValueDict ( )
                if settings . DEBUG :
 constant_re = re . compile ( r"""_\(((?:".*?")|(?:'.*?'))\)""" )
 return filename and filename [ filename . rfind ( "\\" ) + 1 : ] . strip ( )
 quant . append ( ch )
 if id_ :
                          self . template_cache [ key ] = ( template , origin )
        def __str__ ( self ) :
  else :
  old_path = path . join ( root , filename )
    if top_errors :
 return result
  return 0
                  absolute_path = path . abspath ( expanded_template )
 self . write_migration_files ( changes )
          return "Error in formatting: %s" % force_text ( e , errors = "replace" )
   url = property ( lambda self : self [ 'Location' ] )
                      biggest_number = 1
 if custom_sql :
   def _has_changed ( self , initial , data ) :
 value = value . replace ( b'\\\\' , b'\\' ) . replace ( b'\\"' , b'"' )
                   raise NotImplementedError ( 'Awaiting Implementation' )
   @ property
                      output . append ( error_row % force_text ( bf_errors ) )
  else :
                          try :
          arg = settings . TIME_FORMAT
 if max_age is not None :
              TYPE = FIELD
 from django . utils . encoding import force_str
                  pass
          with self . mutex :
   return value
          if self . old_timezone is None :
          return callback , ''
  else :
 day = int ( m . group ( 'day' ) )
 import os
  return wrapper
  if min_value is not None :
   def B ( self ) :
  def clear_checkbox_name ( self , name ) :
              if isinstance ( slots , str ) :
  except ImportError :
 num = 0
              raise ValueError ( "@python_2_unicode_compatible cannot be applied "  "to %s because it doesn't define __str__()." %  klass . __name__ )
  else :
   def empty_variable ( self , token ) :
    @ register . tag
 if self . choices :
 def to_bytes ( val , encoding ) :
    def npgettext ( context , singular , plural , number ) :
              targets = executor . loader . graph . leaf_nodes ( )
  _error_files = [ ]
  def prepare_value ( self , value ) :
 if self . is_bound :
              return 'nd'
   url_fields = split_url ( urlunsplit ( url_fields ) )
                  total_forms = self . max_num
               definition = { }
  if len ( initial ) != len ( data ) :
   def ipython ( self ) :
          if not self . _is_rendered :
              yield d
  return value
 from itertools import chain
                          setattr ( filter_func . _decorated_function , attr , value )
 self . help_texts = getattr ( options , 'help_texts' , None )
 use_grouping = settings . USE_L10N and settings . USE_THOUSAND_SEPARATOR
  Module_six_moves_urllib_robotparser . _moved_attributes = _urllib_robotparser_moved_attributes
                   def wrapper ( * args , ** kwds ) :
 from django . utils . six import StringIO
from django . http . cookie import SimpleCookie , parse_cookie
 zfile = GzipFile ( mode = 'wb' , compresslevel = 6 , fileobj = buf )
                  attrs = dict ( attrs or { } , ** { 'for' : id_for_label } )
   module = import_module ( module_path )
   update_watch ( )
 paths = [ force_text ( p ) for p in paths ]
  else :
                       key = make_key ( args , kwds , typed )
 if isinstance ( callback , functools . partial ) :
     def parse_datetime ( value ) :
 filename , display_url = cleanup_url ( url )
    def handle_fk_field ( self , obj , field ) :
 _supported = None
 parser . add_argument ( '--no-obsolete' , action = 'store_true' , dest = 'no_obsolete' ,  default = False , help = "Remove obsolete message strings." )
          if t [ 1 ] is True :
 dig1 . update ( u )
   if opts . fields == ALL_FIELDS :
 parser . delete_first_token ( )
              top_dir = os . path . abspath ( path . expanduser ( target ) )
 continue
 if match :
   context = Context ( dict ( options , ** {  base_name : name ,  base_directory : top_dir ,  'docs_version' : docs_version ,  } ) , autoescape = False )
              return formats . localize_input ( value )
  def __str__ ( self ) :
  return name . replace ( '_' , ' ' ) . capitalize ( )
  else :
 from django . core . exceptions import ValidationError
 pass
 from __future__ import unicode_literals
  if maxsize == 0 :
  except ( LookupError , TypeError ) :
          if value in self . empty_values :
          j = 36 ** factor
          if self . domain_regex . match ( domain_part ) :
              return [ ]
  from django . utils . deprecation import RemovedInDjango19Warning
 self . _js = [ ]
 if slots is not None :
 pass
 f = super ( ImageField , self ) . to_python ( data )
                      natural = value . natural_key ( )
   class_name = model . __name__ + str ( 'Form' )
  super ( HttpResponseRedirectBase , self ) . __init__ ( * args , ** kwargs )
                  return bytes ( self ) % rhs
                  endbmatch = endblock_re . match ( t . contents )
              if ( field == NON_FIELD_ERRORS and opts . error_messages and  NON_FIELD_ERRORS in opts . error_messages ) :
 if not file_name :
          print ( message )
 from django . utils . safestring import mark_safe
      renderer = CheckboxFieldRenderer
  language_code_prefix_re = re . compile ( r'^/([\w-]+)(/|$)' )
                       result = user_function ( * args , ** kwds )
   if years :
    if hasattr ( middleware , 'process_response' ) :
      help = "Prints the DROP TABLE SQL statements for the given app name(s)."
 if not config_string :
 sys . stderr . write ( "  installed flup, then make sure you have it in your PYTHONPATH.\n" )
          self . data = obj
  if not self . user_regex . match ( user_part ) :
  try :
              value = False
   self . can_write . acquire ( )
 from django . utils . deprecation import RemovedInDjango19Warning
  def tzname ( self , dt ) :
   def __getitem__ ( self , idx ) :
 chunks = (  ( 60 * 60 * 24 * 365 , ungettext_lazy ( '%d year' , '%d years' ) ) ,  ( 60 * 60 * 24 * 30 , ungettext_lazy ( '%d month' , '%d months' ) ) ,  ( 60 * 60 * 24 * 7 , ungettext_lazy ( '%d week' , '%d weeks' ) ) ,  ( 60 * 60 * 24 , ungettext_lazy ( '%d day' , '%d days' ) ) ,  ( 60 * 60 , ungettext_lazy ( '%d hour' , '%d hours' ) ) ,  ( 60 , ungettext_lazy ( '%d minute' , '%d minutes' ) )  )
                  self . xml . characters ( smart_text ( related_att ) )
 if len ( args ) > 1 :
 if input_formats is not None :
              return None
  except AmbiguityError :
 for path in self . locale_paths :
  if tok . next :
 import os
          value = signing . get_cookie_signer ( salt = key + salt ) . sign ( value )
 auto_id = self . auto_id
            if self . forms :
 from django . utils import translation
                  for path in paths :
   def resolve_expression ( self , obj , context ) :
   def flatten ( self ) :
  return value
   result = user_function ( * args , ** kwds )
              self . nodelist_empty = nodelist_empty
              import_module ( app_name )
 obj_pk = getattr ( obj , field . rel . field_name )
  except ZeroDivisionError :
          available_shells = [ shell ] if shell else self . shells
              self . namespaces = [ x for x in namespaces if x ]
              raise TemplateSyntaxError ( "widthratio final argument must be a number" )
              if self . _varlist :
                  exclude . append ( f . name )
   def F ( self ) :
      if six . PY2 :
 robotparser = sys . modules [ __name__ + ".moves.urllib_robotparser" ]
  except KeyError :
                  d = m . groupdict ( )
    def _import_module ( name ) :
 message = _ ( 'Ensure this value is greater than or equal to %(limit_value)s.' )
 if self . is_reversed :
 result = super ( TimestampSigner , self ) . unsign ( value )
                      continue
          language_code = get_language ( )
               return dec ( func )
 if isinstance ( query , MultiValueDict ) :
              raise InvalidTemplateLibrary ( "Template library %s not found, "  "tried %s" %  ( library_name ,  ',' . join ( tried_modules ) ) )
 foreground = dict ( ( color_names [ x ] , '3%s' % x ) for x in range ( 8 ) )
              id_ = self . attrs [ 'id' ]
   except ValueError :
              if "'stream'" not in str ( te ) :
 rollback = self . _rollback
  translation = self . _new_gnu_trans ( localedir , use_null_fallback )
  def render ( self , context ) :
 all_date_checks = set ( )
   return '' . join ( words )
 if len ( bits ) != 3 :
    class HttpResponseForbidden ( HttpResponse ) :
    @ register . filter ( "phone2numeric" , is_safe = True )
              url = value
 if origin :
 return
              post = ( pformat ( POST_override )  if POST_override is not None  else pformat ( request . POST ) )
 self . paths_to_remove . append ( tempdir )
          parser . add_argument ( 'app_label' ,  help = 'App label of the application containing the migration.' )
 collect = [ ]
   return output
      allowed_schemes = [ 'http' , 'https' , 'ftp' ]
 return zbuf . getvalue ( )
              raise InvalidTemplateLibrary ( "ImportError raised loading %s: %s" %  ( taglib_module , e ) )
              return lang_code
   class ArchiveException ( Exception ) :
     def parse_time ( value ) :
 self . _producer = [ ]
   except GeneratorExit :
          if block_name in parser . __loaded_blocks :
 from django . utils . text import normalize_newlines , slugify as _slugify
                      val = getattr ( module , format_type )
 forms_to_delete = self . deleted_forms
                      raise e
    def conditional_content_removal ( request , response ) :
      pass
  return nodelist
  if pk_is_not_editable ( pk ) or pk . name not in form . fields :
  yield buf
    if current_len <= length :
 alen = len ( args )
          return ''
              filenames . append ( filename )
          self . val_expr = val_expr
 self . add_fields ( form , i )
 zfile . flush ( )
  if isinstance ( pattern , RegexURLResolver ) :
              logger . propagate = propagate
  return value
 key = plist . pop ( 0 ) . lower ( ) . decode ( 'ascii' )
  else :
                  display_url = url
 new_permissions = stat . S_IMODE ( st . st_mode ) | stat . S_IWUSR
          items = _iteritems
   def render ( self , name , value , attrs = None , choices = ( ) ) :
     class Textarea ( Widget ) :
 if last_bit :
   def filter ( self , record ) :
  unichr = chr
    if isinstance ( f , models . FileField ) :
  except ( ValueError , TypeError ) :
              raise ValidationError ( self . message , code = self . code )
 context [ 'block' ] = block
   if isinstance ( pk , OneToOneField ) or isinstance ( pk , ForeignKey ) :
                      if t in self . __dispatch :
     def main ( main_func , args = None , kwargs = None ) :
  get_valid_filename = allow_lazy ( get_valid_filename , six . text_type )
 return (  output ,  force_text ( errors , DEFAULT_LOCALE_ENCODING , strings_only = True ) ,  p . returncode  )
          raise TemplateSyntaxError ( "'templatetag' statement takes one argument" )
 src = force_text ( src , settings . FILE_CHARSET )
  def next_space_index ( subject , i ) :
 c = [ ]
  def __init__ ( self , choices = ( ) , required = True , widget = None , label = None ,  initial = None , help_text = '' , * args , ** kwargs ) :
                  return source , display_name
 if m :
              hextets = [ '' ] + hextets
  def __init__ ( self , args , kw ) :
  while k < endpos :
              self . _close_files ( )
          self . var = var
 from django . core . management import call_command
                  error_msg += " Got this from the '%s' variable." % self . parent_name . token
          self . view_name = view_name
   for message in messages :
 return force_text ( quote_plus ( force_str ( url ) , force_str ( safe ) ) )
          return False
  except ValueError :
  super ( IntegerField , self ) . __init__ ( * args , ** kwargs )
              raise ValidationError ( self . message , code = self . code )
 to_python = self . _get_to_python ( pk_field )
  def __init__ ( self , input_date_formats = None , input_time_formats = None , * args , ** kwargs ) :
 raise
 if fp is None :
  return _standard_context_processors
    return quote ( force_bytes ( path ) . replace ( b"\\" , b"/" ) , safe = b"/~!*()'" )
                                  break
 from django . utils . translation import ugettext_lazy as _ , ungettext_lazy
 if not cls :
 if isinstance ( widget , NumberInput ) and 'step' not in widget . attrs :
  if alter_sql :
   def handle_field ( self , obj , field ) :
          if option_value is None :
          if not self . _upload_handlers :
 import re
  else :
              cookie_value = self . COOKIES [ key ]
 forms = ' ' . join ( form . as_p ( ) for form in self )
                  self . active_readers += 1
              if len ( bits ) < 3 or bits [ 1 ] != 'as' :
                  self . locale_paths . append ( os . path . abspath ( 'locale' ) )
          best_doublecolon_end = ( best_doublecolon_start +  best_doublecolon_len )
          return self . _is_rendered
   def valid_ident ( s ) :
 data = method ( self , * args , ** kwargs )
    def get_renderer ( self , name , value , attrs = None , choices = ( ) ) :
  output = [ ]
               return dec ( func )
              HTMLParser . __init__ ( self )
              return [ ]
     class DjangoJSONEncoder ( json . JSONEncoder ) :
     class DTDForbidden ( DefusedXmlException ) :
  if hasattr ( response , 'render' ) and callable ( response . render ) :
   form = modelform_factory ( model , form = form , fields = fields , exclude = exclude ,  formfield_callback = formfield_callback ,  widgets = widgets , localized_fields = localized_fields ,  labels = labels , help_texts = help_texts , error_messages = error_messages )
  else :
              response . streaming_content = [ ]
  __all__ = [  'utc' , 'get_fixed_timezone' ,  'get_default_timezone' , 'get_default_timezone_name' ,  'get_current_timezone' , 'get_current_timezone_name' ,  'activate' , 'deactivate' , 'override' ,  'localtime' , 'now' ,  'is_aware' , 'is_naive' , 'make_aware' , 'make_naive' ,  ]
    def base64_hmac ( salt , value , key ) :
      builtins . append ( import_library ( module ) )
                      return _CacheInfo ( stats [ HITS ] , stats [ MISSES ] , maxsize , len ( cache ) )
  def __init__ ( self , required = True , widget = None , label = None , initial = None ,  help_text = '' , error_messages = None , show_hidden_initial = False ,  validators = [ ] , localize = False , label_suffix = None ) :
 filter = get_exception_reporter_filter ( request )
 try :
 if not field_name :
  g = one_percent_re . sub ( '%%' , g )
   except NotImplementedError :
              escaped = False
              continue
              if key in d :
  from django . core . exceptions import ValidationError
      return settings . LANGUAGE_CODE
   def format_subject ( self , subject ) :
                      self . verbatim = 'end%s' % block_content
  else :
              if os . fork ( ) > 0 :
              raise ValidationError ( self . error_messages [ 'invalid_choice' ] , code = 'invalid_choice' )
 def dictsortreversed ( value , arg ) :
   def __getitem__ ( self , name ) :
 global _supported
     def build_potfiles ( self ) :
       else :
  return media
 from lib2to3 . pytree import Leaf , Node
 from django . db import connections , DEFAULT_DB_ALIAS
   def unsign ( self , value , max_age = None ) :
  format_string = bits [ 1 ] [ 1 : - 1 ]
          return ord ( bs [ 0 ] )
   def value_from_datadict ( self , data , files , name ) :
  self . endElement ( name )
              return initial
                   raise ViewDoesNotExist (  "Could not import '%s.%s'. View is not callable." %  ( mod_name , func_name ) )
                      m2m_convert = lambda v : smart_text ( field . rel . to . _meta . pk . to_python ( v ) )
 for operation in migration . merged_operations :
    def filter_function ( self , func , ** flags ) :
 self . __name = "%s%02d%02d" % ( sign , abs ( offset ) / 60. , abs ( offset ) % 60 )
 parser . add_argument ( '--template' ,  help = 'The path or URL to load the template from.' )
 from django . core . exceptions import DisallowedRedirect
   def end_object ( self , obj ) :
  except StandardError as e :
 parts . append ( "(?P<%s>%s)" % ( groupid , tok . regex ) )
  def __init__ ( self ) :
  logging_config_func ( DEFAULT_LOGGING )
 language_code = get_language ( )
 self . _num_pages = int ( ceil ( hits / float ( self . per_page ) ) )
 tried_modules = [ ]
          raise TemplateSyntaxError ( "next-to-last argument to 'regroup' tag must"  " be 'as'" )
   def __getitem__ ( self , index ) :
   class Tok ( object ) :
              self . validators . append ( validators . MaxValueValidator ( max_value ) )
 left = t . nud ( self )
 additional_headers = [ newheader for newheader in newheaders  if newheader . lower ( ) not in existing_headers ]
              self [ key ] = result
 decompress = True
  candidate_subs = text_kwargs
                      self . stdout . write ( "  %s:\n" % ( self . style . MIGRATE_LABEL ( writer . filename ) , ) )
   elif t . token_type == TOKEN_TEXT :
   @ property
      pass
  try :
                          continue
   def super ( self ) :
              self . locale_paths . extend ( list ( settings . LOCALE_PATHS ) )
 if options [ 'app_label' ] and options [ 'migration_name' ] :
          self . _reset_dicts ( dict_ )
   except UnicodeEncodeError :
 import sys
 pass
 import os
   def _helper ( list_ , tabs = 1 ) :
  value = super ( DictWrapper , self ) . __getitem__ ( key )
 import subprocess
 from django . db . migrations . autodetector import MigrationAutodetector
   def reset ( self ) :
          if input_val in special_floats :
              params = [ source [ 1 ] ]
 from django . core . handlers . wsgi import WSGIHandler
          pass
 __D = r'(?P<day>\d{2})'
        def close ( self ) :
            raise CommandError ( "Django doesn't know which syntax to use for your SQL statements,\n" +  "because you haven't properly specified the ENGINE setting for the database.\n" +  "see: https://docs.djangoproject.com/en/dev/ref/settings/#databases" )
    def ngettext ( singular , plural , number ) :
  whole_digits = digits - decimals
 try :
  nodelist = parser . parse ( ( 'endwith' , ) )
 self . indent ( 2 )
              return timedelta ( seconds = - time . altzone ) - timedelta ( seconds = - time . timezone )
 __str__ = new_method_proxy ( str )
 try :
              for dirpath , dirnames , locale_filenames in os . walk ( basedir ) :
          if self . _wrapped is empty :
                  i += 1
          if self . _isdst ( dt ) :
 parser . add_argument ( '--name' , '-n' , dest = 'files' ,  action = 'append' , default = [ ] ,  help = 'The file name(s) to render. '  'Separate multiple extensions with commas, or use '  '-n multiple times.' )
  else :
   if bad_app_labels :
                      if not hasattr ( self , 'bad_cookies' ) :
 flup_module += '_fork'
              return data
      def python_reloader ( main_func , args , kwargs ) :
              raise DjangoUnicodeDecodeError ( s , * e . args )
from __future__ import unicode_literals
 self . _catalog . update ( other . _catalog )
          raise ValueError (  "You can only use `unpack_ipv4` if `protocol` is set to 'both'" )
                merge_migrations = [ ]
 prefix = self . add_prefix ( fieldname )
  elif self . _delegate_text :
      if current_version >= ( 3 , 4 ) :
  param = '' . join ( name )
                          if kwargs . get ( k , v ) != v :
                  widget = HiddenInput
              pass
  else :
 self . options = options
  else :
  data = data . encode ( fp . encoding , errors )
  except AttributeError :
      status_code = 304
              f . save_form_data ( instance , cleaned_data [ f . name ] )
 code = 'min_value'
                  ch , escaped = next ( pattern_iter )
                  new_obj = func ( obj , * arg_vals )
          self . _upload_handlers = [ uploadhandler . load_handler ( handler , self )  for handler in settings . FILE_UPLOAD_HANDLERS ]
              statements . append ( " " . join ( statement ) )
                  message = 'Unknown field(s) (%s) specified for %s'
 if self . parent_name . filters or isinstance ( self . parent_name . var , Variable ) :
  if self . feed [ 'feed_copyright' ] is not None :
                  s = six . text_type ( bytes ( s ) , encoding , errors )
          attrs = super ( IntegerField , self ) . widget_attrs ( widget )
              self . domain_whitelist = whitelist
          return ip_address_validator_map [ protocol . lower ( ) ]
              exc_info = ( None , record . getMessage ( ) , None )
 if finder is None :
    def tzname ( self , dt ) :
              self . mod = old_mod
              choices . insert ( 0 , none_value )
               if bit . startswith ( '_("' ) or bit . startswith ( "_('" ) :
  from django . conf import settings
  except KeyError :
            self . token_type , self . contents = token_type , contents
 base = base [ : - 4 ]
 super ( Command , self ) . __init__ ( )
 return super ( URLField , self ) . clean ( value )
          int_part , dec_part = str_number . split ( '.' )
 from django . utils . deprecation import RemovedInNextVersionWarning
 title = ''
  except KeyboardInterrupt :
 if commit :
                  self . add_error ( name , e )
  else :
 for app_name in app_names :
 return escape ( value )
 data_value = data if data is not None else ''
 return None
              raise ValueError ( "attempted relative import beyond top-level package" )
          return base64 . urlsafe_b64decode ( s . ljust ( len ( s ) + len ( s ) % 4 , b'=' ) )
 return IfChangedNode ( nodelist_true , nodelist_false , * values )
 trimmed = 'trimmed' in t . split_contents ( )
          def dec ( func ) :
 def app_dict ( self ) :
                          if not found and ( not line or plural_forms_re . search ( line ) ) :
  __len__ = new_method_proxy ( len )
                  for form in self . saved_forms :
              raise TypeError ( 'other_dict must be a mapping (dictionary-like) object.' )
  sub = ''
                                  d = d [ idx ]
 from django . db import connections , DEFAULT_DB_ALIAS
          self . unpack_ipv4 = unpack_ipv4
              msg = self . style . HTTP_INFO ( msg )
                  consume_next = True
 if item [ 'description' ] is not None :
 continue
   return False
  def __init__ ( self , states , first ) :
 from django . utils . safestring import mark_safe
                            errors . append ( self . get_date_error_message ( date_check ) )
           connection = connections [ options [ 'database' ] ]
   def __getitem__ ( self , i ) :
 return force_str ( '<%s\npath:%s,\nGET:%s,\nPOST:%s,\nCOOKIES:%s,\nMETA:%s>' %  ( request . __class__ . __name__ ,  path ,  six . text_type ( get ) ,  six . text_type ( post ) ,  six . text_type ( cookies ) ,  six . text_type ( meta ) ) )
              @ wraps ( fdel )
              return self . keyOrder [ : ]
          if not hasattr ( e , 'django_template_source' ) :
  def get_template_sources ( self , template_name , template_dirs = None ) :
  else :
    class HttpResponseRedirect ( HttpResponseRedirectBase ) :
              raise TypeError ( "invalid keyword arguments to print()" )
  return result
          if data :
 output = [ ]
  sys . modules [ __name__ + ".moves.urllib_robotparser" ] = sys . modules [ __name__ + ".moves.urllib.robotparser" ] = Module_six_moves_urllib_robotparser ( __name__ + ".moves.urllib.robotparser" )
     class EntitiesForbidden ( DefusedXmlException ) :
 self . month_none_value = ( 0 , empty_label [ 1 ] )
  if inverse_match is not None :
 for lookup , arg in args :
              continue
 literal_regex = re . compile (   r'\[([A-f0-9:\.]+)\]$' ,  re . IGNORECASE )
 def content ( self , value ) :
              exts = extensions if extensions else [ 'html' , 'txt' ]
 return _i18n_cache_key_suffix ( request , cache_key )
              return value
                               self . required , self . label , self . initial = required , label , initial
          raise TemplateSyntaxError ( "'now' statement takes one argument" )
   def expression ( self , rbp = 0 ) :
  return filename , display_url
          self . id = Tok . num
  except TypeError :
          if self . deactivate :
   def s ( self ) :
                          for matches , pat , defaults in pattern . reverse_dict . getlist ( name ) :
              value = ''
                  self . _count = self . object_list . count ( )
  with open ( new_path , 'wb' ) as new_file :
  from django . core . management . base import BaseCommand , CommandError
   @ cached_property
           if args [ - 3 ] == "as" :
              return self . html_name
  if not UserModel . _default_manager . exists ( ) and options . get ( 'interactive' ) :
              return default
              media_attrs = kwargs
 for path in gen_filenames ( only_new = True ) :
  super ( SimpleCookie , self ) . load ( rawdata )
    class EmailField ( CharField ) :
  value , converted = convert_old_style_list ( value )
 message = message % ( ', ' . join ( missing_fields ) ,  opts . model . __name__ )
          meta = type ( str ( 'Meta' ) , ( object , ) , { } )
  else :
 self . _populated = True
                  return 'https'
  if record . exc_info :
 value = converter ( suffix )
     class TemplateResponse ( SimpleTemplateResponse ) :
              if isinstance ( value , Field ) :
                        if os . path . isdir ( entry ) :
 hidden_widget = field . hidden_widget ( )
   new_ip = [ ]
    def all_valid ( formsets ) :
 if not isinstance ( urlconf_name , six . string_types ) :
          return self . mapping . get ( self . tagtype , '' )
 from django . template import ( Lexer , TOKEN_TEXT , TOKEN_VAR , TOKEN_BLOCK ,  TOKEN_COMMENT , TRANSLATOR_COMMENT_MARK )
  return '(%s: %s)' % ( self . connector , ', ' . join ( [ str ( c ) for c in  self . children ] ) )
 all_date_checks = all_date_checks . union ( set ( date_checks ) )
              field = field . rel . get_related_field ( )
 var_obj = None
 unifunc . replace ( strfunc )
 if self . _errors is None :
 if since <= 0 :
    def parse ( self , parse_until = None ) :
      string_types = str ,
  except ( KeyError , IndexError , AttributeError ) :
 app_path = getattr ( settings , 'WSGI_APPLICATION' )
   def with_metaclass ( meta , * bases ) :
 d = self . config [ m . groups ( ) [ 0 ] ]
                              return result
      pass
              netloc = netloc . encode ( 'idna' ) . decode ( 'ascii' )
 integer_types = ( int , long )
                  if args :
 if 'pk' in d :
  IDENTIFIER = re . compile ( '^[a-z_][a-z0-9_]*$' , re . I )
              match = kwarg_re . match ( bits [ 0 ] )
                  return 1 << 31
 return SsiNode ( filepath , parsed )
      widget = EmailInput
                          content_length = None
 value , timestamp = result . rsplit ( self . sep , 1 )
  if ( getattr ( Meta , 'fields' , None ) is None and  getattr ( Meta , 'exclude' , None ) is None ) :
              return data . getlist ( name )
    def _iterlists ( self ) :
  elif isinstance ( timezone , six . string_types ) and pytz is not None :
 _cached_filenames = [ ]
 self . name = name
  seen . add ( k )
              with open ( filepath , 'r' ) as fp :
     class DateInput ( DateTimeBaseInput ) :
 dfmt = config . get ( 'datefmt' , None )
   try :
 from django . utils . six . moves import input
 import shutil
 if over_bytes :
 from xml . sax . expatreader import ExpatParser as _ExpatParser
                   result . append ( ch )
  return urlquote ( value , ** kwargs )
          args = ( )
                  msgs = msgs . decode ( 'utf-8' )
    try :
   app_label , migration_name = options [ 'app_label' ] , options [ 'migration_name' ]
       def get_standard_processors ( ) :
   except UnicodeDecodeError as e :
                          if hasattr ( field_value , '__iter__' ) and not isinstance ( field_value , six . text_type ) :
          Context . __init__ ( self , dict_ , current_app = current_app ,  use_l10n = use_l10n , use_tz = use_tz )
          return self . __name
  else :
                        if self . required :
      if not qs . ordered :
    def now ( ) :
 if ( BLOCK_CONTEXT_KEY in render_context and  render_context [ BLOCK_CONTEXT_KEY ] . get_block ( self . name ) is not None ) :
 def title ( value ) :
              sys . stderr = open ( err_log , 'a' , buffering )
   class RemovedInDjango20Warning ( PendingDeprecationWarning ) :
    if token . contents == 'else' :
    def sql_delete ( app_config , style , connection , close_connection = True ) :
 if len ( bits ) < 1 :
              raise UnrecognizedArchiveFormat (  "Path not a recognized archive format: %s" % filename )
 import socket
          output . extend ( connection . creation . sql_destroy_indexes_for_model ( model , style ) )
  self . xml . startElement ( "object" , { } )
 return parser . parse ( )
 for frag in name :
                  if settings . USE_L10N :
    class SafeData ( object ) :
 context . render_context . push ( )
  app_template_dirs = [ ]
              return template
 use_grouping = use_grouping or force_grouping
              return s
                  guts = re . sub ( r"\\.|." , escape_quotes , tok [ 1 : - 1 ] )
          return False
   if use_grouping :
     class TypedMultipleChoiceField ( MultipleChoiceField ) :
  from django . conf import settings
   def utcoffset ( self , dt ) :
          if hasattr ( response , 'render' ) and callable ( response . render ) :
          return getattr ( t , translation_function ) ( singular , plural , number )
                  self . stdout . write ( "  Applying %s..." % migration , ending = "" )
          return bytes ( s )
  termios . tcsetattr ( fd , termios . TCSANOW , attr_list )
          if key not in self :
              return output
           base64d = base64d [ 1 : ]
          fn = code_changed
              raise ValidationError ( self . error_messages [ 'empty' ] , code = 'empty' )
                      words [ i ] = escape ( word )
   def __getinitargs__ ( self ) :
  else :
 styles . reverse ( )
  else :
 from django . utils import six
          super ( MultiValueDict , self ) . __init__ ( key_to_list_mapping )
 attrs = { 'id' : id_ } if id_ else { }
 return True
 validate_comma_separated_integer_list = RegexValidator ( comma_separated_int_list_re , _ ( 'Enter only digits separated by commas.' ) , 'invalid' )
   def write_migration_files ( self , changes ) :
                  current = settings . TEMPLATE_STRING_IF_INVALID
          return force_str ( "<Text Node: '%s'>" % self . s [ : 25 ] , 'ascii' ,  errors = 'replace' )
     class CallbackFilter ( logging . Filter ) :
                  return nodelist . render ( context )
 in_tag = False
    _builtin_context_processors = ( 'django.core.context_processors.csrf' , )
                  if inplural :
 return do_ifequal ( parser , token , True )
          return self
          if not formset . is_valid ( ) :
 from django . utils . safestring import mark_safe , SafeData
 if not match or not match . group ( 1 ) :
    def get_serializer ( format ) :
 global _default
 return IfEqualNode ( val1 , val2 , nodelist_true , nodelist_false , negate )
   def start_doctype_decl ( self , name , sysid , pubid , has_internal_subset ) :
      while True :
                      current = current [ bit ]
              return (  _lazy_proxy_unpickle ,  ( func , self . __args , self . __kw ) + resultclasses  )
 self . to_field = kwargs . pop ( "to_field" , None )
 return func
                              pass
         @ python_2_unicode_compatible
  last = max ( 0 , end - 1 )
 parts = fixture_name . rsplit ( '.' , 2 )
  if item [ 'comments' ] is not None :
  else :
   def _itervalues ( self ) :
  else :
    @ register . filter ( is_safe = True , needs_autoescape = True )
          if not isinstance ( s , six . string_types ) :
 get_language_bidi = lambda : settings . LANGUAGE_CODE in settings . LANGUAGES_BIDI
 with context . push ( ** values ) :
 return s
      string_types = basestring ,
                      self . xml . addQuickElement ( "object" , attrs = {  'pk' : smart_text ( value . _get_pk_val ( ) )  } )
          from django . conf import settings
 self . run_validators ( value )
                  with open ( filepath , 'rb' ) as fp :
              if isinstance ( expires , datetime . datetime ) :
                      resource = resource_string ( app_config . name , pkg_name )
 def default_if_none ( value , arg ) :
 if f is None :
    @ register . filter ( "slice" , is_safe = True )
   def _proxy_method ( self , * args , ** kwargs ) :
  try :
   def _iteritems ( self ) :
    def __exit__ ( self , exc_type , exc_value , traceback ) :
 def urlconf_module ( self ) :
   def error ( self , token , msg ) :
                      try :
                          callback = lambda response : middleware . process_response ( request , response )
  except MultiPartParserError :
                  end -= 1
                  if extend is True :
 result . append ( ch )
    migrations_to_squash = [  executor . loader . get_migration ( al , mn )  for al , mn in executor . loader . graph . forwards_plan ( ( migration . app_label , migration . name ) )  if al == migration . app_label  ]
 memo [ id ( self ) ] = result
      def jython_reloader ( main_func , args , kwargs ) :
          filelist = _cached_filenames + new_filenames + _error_files
  if fk . unique :
  if force_text ( value ) != force_text ( orig ) :
   return kwargs
                  for filename in locale_filenames :
     if isinstance ( obj , datetime . datetime ) :
    @ register . filter ( is_safe = False )
                  self . _setup ( )
   if "help" in options :
          self . conditions_nodelists = conditions_nodelists
  else :
   def create_bound_method ( func , obj ) :
 def spaceless ( parser , token ) :
                  yield import_module ( '%s.formats' % ( location % loc ) )
 os . _exit ( 1 )
                  if old_attr is None :
          if not app_config . path :
   class Truncator ( SimpleLazyObject ) :
  encoding = self . _encoding
               return '-' . join ( [ template_name , hashlib . sha1 ( force_bytes ( '|' . join ( template_dirs ) ) ) . hexdigest ( ) ] )
          handler . addQuickElement ( "title" , item [ 'title' ] )
 if value is not result :
  content_type , content_type_extra = meta_data . get ( 'content-type' , ( '' , { } ) )
     class FixedOffset ( tzinfo ) :
   def tell ( self ) :
   def clean ( self , data , initial = None ) :
  import hmac
              x = x * len ( from_digits ) + from_digits . index ( digit )
              return None
  else :
   else :
          return [ widget . value_from_datadict ( data , files , name + '_%s' % i ) for i , widget in enumerate ( self . widgets ) ]
 try :
  opts = instance . _meta
              return context
              raise value . with_traceback ( tb )
 if hasattr ( self , '_get' ) :
   def __hash__ ( self ) :
  if self . parsed :
   class ContentNotRenderedError ( Exception ) :
      def __init__ ( self , nodelist ) :
  new_class = ( super ( DeclarativeFieldsMetaclass , mcs )  . __new__ ( mcs , name , bases , attrs ) )
 return { '2' : True ,  True : True ,  'True' : True ,  '3' : False ,  'False' : False ,  False : False } . get ( value , None )
          self . object = obj
              label_suffix = ( self . field . label_suffix if self . field . label_suffix is not None  else self . form . label_suffix )
  except ( TypeError , VariableDoesNotExist ) :
            return '%s%s' % ( self . path , ( '?' + iri_to_uri ( self . META . get ( 'QUERY_STRING' , '' ) ) ) if self . META . get ( 'QUERY_STRING' , '' ) else '' )
 from django . utils . module_loading import module_has_submodule
 super ( DecimalField , self ) . __init__ ( max_value , min_value , * args , ** kwargs )
 self . xgettext_options = self . xgettext_options [ : ] + [ '--no-location' ]
          return [ ( '' , [ ] ) ]
    def modelform_factory ( model , form = ModelForm , fields = None , exclude = None ,  formfield_callback = None , widgets = None , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ) :
              warning = 'ImmutableList object is immutable.'
   def start_serialization ( self ) :
          return PALETTES [ DEFAULT_PALETTE ]
  else :
    def handle_extensions ( extensions = ( 'html' , ) , ignored = ( 'py' , ) ) :
 return '\n' . join ( statements )
                              return True
                              child_loggers . append ( existing [ i ] )
  self . pointer = self . backout . pop ( )
    def has_vary_header ( response , header_query ) :
  from . import six
                      return ( 1 , 0 )
 class __proxy__ ( Promise ) :
  def serialize ( self , queryset , ** options ) :
              if os . fork ( ) > 0 :
              try :
                      self . handle_data ( rawdata [ i : j ] )
          return datetime . datetime . strptime ( force_str ( value ) , format ) . date ( )
  except AttributeError :
          raise TemplateSyntaxError ( "'%s' takes one argument" % bits [ 0 ] )
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to create SQL for. Defaults to the '  '"default" database.' )
                  return dict_ . getlist ( key )
   def more ( self ) :
 leading = self . has_leading_dir ( namelist )
                          if hasattr ( value , '__iter__' ) and not isinstance ( value , six . text_type ) :
          return self . input_type == 'hidden' if hasattr ( self , 'input_type' ) else False
  else :
  else :
              self . validators . append ( validators . MaxLengthValidator ( int ( max_length ) ) )
 etags = ETAG_MATCH . findall ( etag_str )
   def __deepcopy__ ( self , memo ) :
                      if field . rel is None :
  _func_closure = "func_closure"
                      sub_tried = e . args [ 0 ] . get ( 'tried' )
   def _html_output ( self , normal_row , error_row , row_ender , help_text_html , errors_on_separate_row ) :
  from __future__ import unicode_literals
               if upload :
    def sql_all ( app_config , style , connection ) :
          factor += 1
  else :
              return False
               tables = connection . introspection . table_names ( cursor )
  self . ignore_patterns = list ( set ( ignore_patterns ) )
 from django . utils . safestring import mark_safe
          if app_config . models_module is None :
                      date_value = datetime_safe . new_date ( date_value )
   if ( isinstance ( fp , file ) and  isinstance ( data , unicode ) and  fp . encoding is not None ) :
 import re
   if i >= len ( subject ) :
     class TemplateIfParser ( IfParser ) :
 if self . data . minute == 0 :
 def do_extends ( parser , token ) :
      regex = ''
 migration . merged_operations = [ ]
  __all__ = ( 'MultiPartParser' , 'MultiPartParserError' , 'InputStreamExhausted' )
  return FirstOfNode ( [ parser . compile_filter ( bit ) for bit in bits ] )
              value = formats . sanitize_separators ( value )
   @ property
  del attr
 import re
          return mark_safe ( six . text_type ( value ) )
      return lazy_number ( npgettext , six . text_type , context = context , singular = singular , plural = plural , number = number )
  return self . _upload_handlers
      termios = None
 def comment ( parser , token ) :
 if current_len == truncate_len :
 if ( ( ( self . allow_files and os . path . isfile ( full_file ) ) or  ( self . allow_folders and os . path . isdir ( full_file ) ) ) and  ( self . match is None or self . match_re . search ( f ) ) ) :
  except ImportError :
              orig = self . parent_instance . pk
          name = args [ - 1 ]
 if kwargs :
 first = second = None
 from django . utils . functional import allow_lazy , SimpleLazyObject
          self . attrs = attrs or { }
          app_name , target = options . pop ( 'name' ) , options . pop ( 'directory' )
  if data is None :
          return fastcgi_help ( "ERROR: Implementation must be one of prefork or "  "thread." )
    def __iter__ ( self ) :
    @ register . filter ( is_safe = True )
 return re . sub ( "\d([A-Z])" , lambda m : m . group ( 0 ) . lower ( ) , t )
 hlen = digest ( ) . digest_size
   def to_python ( self , value ) :
              return
 return escapejs ( value )
 from django . utils . translation import get_language , to_locale , check_for_language
 self . _encoding = encoding or settings . DEFAULT_CHARSET
 import itertools
 if y == m == d == "0" :
  return numberformat . format (  value ,  get_format ( 'DECIMAL_SEPARATOR' , lang , use_l10n = use_l10n ) ,  decimal_pos ,  get_format ( 'NUMBER_GROUPING' , lang , use_l10n = use_l10n ) ,  get_format ( 'THOUSAND_SEPARATOR' , lang , use_l10n = use_l10n ) ,  force_grouping = force_grouping  )
      class WithNode ( Node ) :
              return func ( * self . __args , ** self . __kw )
   class Module_six_moves_urllib_robotparser ( _LazyModule ) :
  else :
  return klass
   if url . startswith ( '///' ) :
    def add_prefix ( self , index ) :
  except AmbiguityError :
 self . exit_command ( )
   if errors_on_separate_row and bf_errors :
 if data is None or isinstance ( data , dict ) :
   from django . core . exceptions import ValidationError
              return list ( error ) [ 0 ]
          return { f : e . as_data ( ) for f , e in self . items ( ) }
  return super ( BaseInlineFormSet , self ) . initial_form_count ( )
     class Lexer ( object ) :
  except ImportError :
 def templatetag ( parser , token ) :
  update_wrapper ( _wrapper , dummy )
  except ValueError :
 memo [ id ( self ) ] = result
     if errors :
 namespaces = { }
  else :
  else :
                          self . handle_m2m_field ( obj , field )
   @ HttpResponse . content . setter
  return modules
              self . blocks [ name ] . insert ( 0 , block )
   def __deepcopy__ ( self , memo ) :
 if not _is_shorthand_ip ( ip_str ) :
  return self . parent_widget . render ( * args )
 fg = colors . pop ( )
  return value
 from django . utils . encoding import force_bytes , force_text , iri_to_uri
 if not value :
  except StandardError as e :
 handler . startElement ( "rss" , self . rss_attributes ( ) )
  int_part_gd += digit
          if not hasattr ( self , '_queryset' ) :
  else :
                      for name in handlers :
   def validate ( self , value ) :
     @ classmethod
    class SerializationError ( Exception ) :
 def yesno ( value , arg = None ) :
  elif self . reason_phrase is None :
 formatter = config . pop ( 'formatter' , None )
   def add_fields ( self , form , index ) :
 message = ungettext_lazy (  'Ensure this value has at most %(limit_value)d character (it has %(show_value)d).' ,  'Ensure this value has at most %(limit_value)d characters (it has %(show_value)d).' ,  'limit_value' )
 try :
                          self . stdout . write ( "    - %s\n" % operation . describe ( ) )
 if os . path . exists ( pot_path ) :
 return mark_for_escaping ( value )
          super ( DTDForbidden , self ) . __init__ ( )
  else :
   nodelist = parser . parse ( ( 'endfilter' , ) )
          if to_lower :
  except InvalidOperation :
 if not self . _is_rendered :
  for k , list_ in self . lists ( ) :
  connection = connections [ options [ 'database' ] ]
          pieces = [ ]
 if not attr_list [ 3 ] & termios . ECHO :
          self . queryset = queryset
   result = new_result
          return False
  self . nodelist = t . nodelist
 tried_modules . append ( taglib_module )
  return super ( FileField , self ) . clean ( data )
  if app_names :
    def get_deserializer ( format ) :
          self . reader_enters ( )
  else :
              error_msg = "Tried %s" % tried
  else :
      def represent_decimal ( self , data ) :
                  new_obj = func ( obj , autoescape = context . autoescape , * arg_vals )
       def from_current_timezone ( value ) :
 from django . utils import six
 self . render_value = render_value
 def add ( value , arg ) :
 extra_context = token_kwargs ( remaining_bits , parser , support_legacy = True )
                  self . stdout . write ( "  No optimizations possible." )
   def sign ( self , value ) :
              return ''
 if dirname and not os . path . exists ( dirname ) :
  if exclude and f . name in exclude :
   def total_error_count ( self ) :
   saved_instances = [ ]
 parser . add_argument ( '--no-location' , action = 'store_true' , dest = 'no_location' ,  default = False , help = "Don't write '#: filename:line' lines." )
                      return True
 opts = instance . _meta
 return avoid_wrapping ( value )
                  self . stdout . write ( "No changes detected" )
      return force_text ( gettext ( message ) )
                  fields = list ( six . iteritems ( base . declared_fields ) ) + fields
  if value is not result :
    except ValueError :
 request_repr = "unavailable"
 def slice_filter ( value , arg ) :
 def media ( self ) :
 stats [ : ] = [ 0 , 0 ]
                                  self . stdout . write ( "    Installing index for %s.%s model\n" % ( app_name , model . _meta . object_name ) )
   def __repr__ ( self ) :
              try :
 def __init__ ( self , text ) :
  else :
                  msgs = msgs . decode ( 'utf-8' )
               if index is not None and index < self . initial_form_count ( ) :
 warnings . warn ( 'A secure pseudo-random number generator is not available '  'on your system. Falling back to Mersenne Twister.' )
       def __init__ ( self , file ) :
                      middle = middle [ : - len ( punctuation ) ]
  del X
 result = ':' . join ( hextets [ 0 : 6 ] )
    if self . load_initial_data :
 if self . first :
      error_class = TemplateSyntaxError
   self . _regex_dict [ language_code ] = compiled_regex
              try :
 try :
 from django . utils . deprecation import RemovedInDjango19Warning
              operations . extend ( smigration . operations )
   def render ( self , name = None , value = None , attrs = None , choices = ( ) ) :
  try :
  klass . __unicode__ = klass . __str__
                          for c in lineno_comment_map [ comment_lineno_cache ] :
              raise AttributeError ( "This QueryDict instance is immutable" )
  __all__ = [  'SimpleCookie' , 'parse_cookie' , 'HttpRequest' , 'QueryDict' ,  'RawPostDataException' , 'UnreadablePostError' , 'build_request_repr' ,  'HttpResponse' , 'StreamingHttpResponse' , 'HttpResponseRedirect' ,  'HttpResponsePermanentRedirect' , 'HttpResponseNotModified' ,  'HttpResponseBadRequest' , 'HttpResponseForbidden' , 'HttpResponseNotFound' ,  'HttpResponseNotAllowed' , 'HttpResponseGone' , 'HttpResponseServerError' ,  'Http404' , 'BadHeaderError' , 'fix_location_header' , 'JsonResponse' ,  'conditional_content_removal' ,  ]
  try :
    def save_m2m ( ) :
                              line = '%s\n' % plural_form_line
              data = self . field . bound_data (  self . data , self . form . initial . get ( self . name , self . field . initial )  )
              value = ''
              try :
   return False
  elif isinstance ( value , datetime . time ) :
  return self . data . hour
                   return self . add_truncation_text ( text [ : end_index or 0 ] ,  truncate )
  return self . _text_words ( length , truncate )
  self . _update_unget_history ( len ( bytes ) )
   def handle ( self , * app_labels , ** options ) :
  TYPE = RAW
 self . choice_label = force_text ( choice [ 1 ] )
   return response
  def __deepcopy__ ( self , memo ) :
 self . sysid = sysid
   def decompress ( self , value ) :
   def __eq__ ( self , other ) :
     trim_whitespace_re = re . compile ( '\s*\n\s*' )
  plen = len ( provided ) + 1
  lines . append ( line )
      pass
          if required and ( initial is not None ) :
                           context . pop ( )
 I18N_MODIFIED = 2
          _dec . __name__ = 'method_decorator(%s)' % decorator . __name__
  return dec
  if len ( bits ) < 3 or bits [ 1 ] != 'as' :
      if module_has_submodule ( app_config . module , module_to_search ) :
          raise TemplateSyntaxError ( "'cycle' tag requires at least two arguments" )
 statements = sql_all ( app_config , self . style , connection )
              return [ ]
 from django . core . exceptions import DisallowedHost , ImproperlyConfigured
 self . default_kwargs = default_kwargs or { }
  else :
  self . _upload_handlers = upload_handlers
   def encode ( self , i ) :
 html_message = reporter . get_traceback_html ( ) if self . include_html else None
 from django . utils . http import urlquote
 comment = [ ]
   def handle ( self , ** options ) :
 is_templatized = file_ext in command . extensions
 if use_l10n or ( use_l10n is None and settings . USE_L10N ) :
 if related :
          cleaned_data = form . cleaned_data
  internal_use_only = False
    _trans = Trans ( )
 def do_block ( parser , token ) :
  try :
              raise CommandError ( "%r conflicts with the name of an existing "  "Python module and cannot be used as an app "  "name. Please try another name." % app_name )
          try :
 return format_html ( '<textarea{0}>\r\n{1}</textarea>' ,  flatatt ( final_attrs ) ,  force_text ( value ) )
          self . validate_unique ( )
          self . require_all_fields = kwargs . pop ( 'require_all_fields' , True )
 if attrs :
   else :
  else :
   def __str__ ( self ) :
   warnings . warn ( "django.utils.importlib will be removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2 )
              self . _current [ field . name ] = value
  else :
   kwargs [ "required" ] = False
   def i ( self ) :
 parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a database to synchronize. '  'Defaults to the "default" database.' )
          raise MultiPartParserError ( 'multipartparser.exhaust() was passed a non-iterable or stream parameter' )
                               root , = nonlocal_root
  self . error ( "junk characters in start tag: %r"  % ( rawdata [ k : endpos ] [ : 20 ] , ) )
 if _supported is None :
  import datetime
      if cookie == '' :
   def subwidgets ( self , name , value , attrs = None , choices = ( ) ) :
  return value
      def format ( self , formatstr ) :
    result = [ ]
 import traceback
                   row_data = ( form . cleaned_data [ field ]  for field in unique_check if field in form . cleaned_data )
 from django . db . migrations . state import ProjectState
                  fp . write ( src_data )
 return copy . copy ( self )
 parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
  else :
 if min_length is not None :
 return new_context
                  name = self . split_leading_dir ( name ) [ 1 ]
     loggers = config . get ( 'loggers' , EMPTY_DICT )
 for j in xrange ( int ( iterations ) ) :
  key , value = match . groups ( )
 try :
   __getitem__ = new_method_proxy ( operator . getitem )
              extend = getattr ( definition , 'extend' , True )
          try :
 supports_microseconds = False
 pk_value = getattr ( self . instance , self . fk . rel . field_name )
                   value = str ( Header ( value , 'utf-8' , maxlinelen = sys . maxsize ) . encode ( ) )
  return value
      def __init__ ( self , language , deactivate = False ) :
 if row_data and None not in row_data :
     def _to_tuple ( s ) :
              del self . _get
 if sys . platform . startswith ( 'java' ) :
          return value
                      self . stdout . write ( errors )
           l = len ( tokens )
 from __future__ import unicode_literals
 request_finished = Signal ( )
          if '-' not in lang_code :
   self . extra_context = extra_context or { }
                   def handle_m2m ( value ) :
   if len ( parts ) > 1 :
  except NoReverseMatch :
              self . stdout . write ( "Downloading %s\n" % display_url )
 from django . utils . deprecation import RemovedInDjango19Warning
  elif not isinstance ( value , ConvertingList ) and isinstance ( value , list ) :
          value = request . META . get ( header , None )
 self [ 'Location' ] = iri_to_uri ( redirect_to )
  else :
     def to_language ( locale ) :
  return response
              if this_bases is None :
  if ipv4_unpacked :
  else :
  if getattr ( func , 'needs_autoescape' , False ) :
 pass
 dictConfigClass ( config ) . configure ( )
          return ugettext ( "Please correct the duplicate values below." )
 supported = True
                   raise TemplateSyntaxError (  "'%s' received unexpected keyword argument '%s'" %  ( name , param ) )
  if sys . platform . startswith ( 'java' ) :
     def method_decorator ( decorator ) :
          six . reraise ( ValueError , ValueError ( "%r is not a valid date" % date ) , sys . exc_info ( ) [ 2 ] )
                  error_messages = self . fields [ field ] . error_messages
 return super ( QueryDict , self ) . setlistdefault ( key , default_list )
  else :
  def _format_value ( self , value ) :
 import datetime
  except Exception as e :
  key , value = bits [ 2 ] , bits [ 0 ]
    def get_script_prefix ( ) :
  def __init__ ( self , loaders ) :
   def __deepcopy__ ( self , memo ) :
          max_num = 1
 from django . utils . datastructures import MultiValueDict
 def csrf_token ( parser , token ) :
              pass
  from __future__ import unicode_literals
 if self . localize :
 from django . db . migrations . questioner import MigrationQuestioner , InteractiveMigrationQuestioner
   get_git_changeset . cache = changeset
              sub = '.dev%s' % git_changeset
  elif 'public' in cc and 'private' in kwargs :
    def check_errors ( fn ) :
 from django . utils . module_loading import import_string
  except ValidationError :
 if not ext and content_type :
 if result is not None :
     def build_request_repr ( request , path_override = None , GET_override = None ,  POST_override = None , COOKIES_override = None ,  META_override = None ) :
          self . model = getattr ( options , 'model' , None )
              start = match . start ( )
 self . current_token = self . next_token ( )
 name = s . split ( '.' )
  return sites
      def _BaseCookie__set ( self , key , real_value , coded_value ) :
 if six . PY2 :
 context . autoescape = self . setting
   def __getitem__ ( self , key ) :
          for loc in locales :
  else :
 def trim_url ( x , limit = trim_url_limit ) :
      def constant_time_compare ( val1 , val2 ) :
          initial_value = initial if initial is not None else ''
  raise KeyError ( 'Unknown media type "%s"' % name )
                          data [ field . attname ] = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
          first , lang , priority = pieces [ i : i + 3 ]
      default_validators = [ validators . validate_ipv4_address ]
  except ( OverflowError , ValueError ) as exc :
  return str ( '<%s %s (%s:%s) %s>' ) % (  self . __class__ . __name__ , urlconf_repr , self . app_name ,  self . namespace , self . regex . pattern )
    def ugettext ( message ) :
   def __reduce_ex__ ( self , proto ) :
    def urlize ( text , trim_url_limit = None , nofollow = False , autoescape = False ) :
          raise self . exception
          if self . save_as_new :
               MAXSIZE = int ( ( 1 << 63 ) - 1 )
                       field_value = getInnerText ( node ) . strip ( )
          super ( _LazyModule , self ) . __init__ ( name )
 return self
 data_value = field . widget . value_from_datadict ( self . data , self . files , prefixed_name )
              updates . update ( processor ( request ) )
              raise ValueError ( "Invalid header: %r" % line )
 try :
 super ( ChoiceField , self ) . validate ( value )
   @ property
          super ( Command , self ) . add_arguments ( parser )
 super ( QueryDict , self ) . clear ( )
     class ImmutableList ( tuple ) :
      def __init__ ( self ) :
 return MONTHS_AP [ self . data . month ]
 from django . core . management . base import CommandError , BaseCommand
              file_obj = handler . file_complete ( counters [ i ] )
 inverse_match = False
 if tag in self . CDATA_CONTENT_ELEMENTS :
 import sys
   def render ( self , context ) :
 return self . is_bound and not self . errors
   def render ( self , context ) :
 self . field = field
 v = ValueError ( 'Cannot resolve %r: %s' % ( s , e ) )
          raise ValueError ( "'package' not set to a string" )
 with lock :
 try :
 if len ( bits ) != 2 :
              self . regex = regex
 if bits [ in_index ] != 'in' :
     if value != value or value == Decimal ( "Inf" ) or value == Decimal ( "-Inf" ) :
          self . fed . append ( d )
  renamed_methods = ( )
   return '' . join ( pieces )
 from django . db import connections , DEFAULT_DB_ALIAS , migrations
  return self . number * self . paginator . per_page
from __future__ import unicode_literals
  elif isinstance ( rhs , SafeBytes ) :
 kwargs = { 'pk_field' : True }
 self . _chunk_size = min ( [ 2 ** 31 - 4 ] + possible_sizes )
  bytes_read = 0
 self . active_readers = 0
 memo [ id ( self ) ] = obj
  else :
 relative_dir = path_rest . replace ( base_name , name )
              e . django_template_source = token . source
    def __call__ ( self , value ) :
                      for key , value in other_dict . items ( ) :
  def configure ( self ) :
 return res
 base64 = BaseConverter ( BASE64_ALPHABET , sign = '$' )
  def __init__ ( self , name , value , attrs , choice , index ) :
 parsed = False
 s_len = 0
  args = [  'xgettext' ,  '-d' , domain ,  '--language=C' ,  '--keyword=gettext_noop' ,  '--keyword=gettext_lazy' ,  '--keyword=ngettext_lazy:1,2' ,  '--keyword=pgettext:1c,2' ,  '--keyword=npgettext:1c,2,3' ,  '--output=-'  ] + command . xgettext_options
                  if path not in self . _js :
 parser . add_argument ( '--no-wrap' , action = 'store_true' , dest = 'no_wrap' ,  default = False , help = "Don't break long message lines into several lines." )
 self . _content_length = content_length
    def _itervalues ( self ) :
 import sys
  elif ch == '$' :
  else :
 return self . __to_language
   def __delitem__ ( self , header ) :
 number = self . validate_number ( number )
 result . validators = self . validators [ : ]
  new_context = context_class ( _dict , ** {  'autoescape' : context . autoescape ,  'current_app' : context . current_app ,  'use_l10n' : context . use_l10n ,  'use_tz' : context . use_tz ,  } )
              self . nodelist_empty = NodeList ( )
 extensions = options . get ( 'extensions' )
                       file_name = disposition . get ( 'filename' )
              self . months = MONTHS
  extra_classes = set ( extra_classes or [ ] )
                  r = r [ : 23 ] + r [ 26 : ]
  except ValidationError as e :
 from django . utils . six . moves import html_entities
   self . write_migration_files ( changes )
 get_language = lambda : settings . LANGUAGE_CODE
  value = value . strip ( )
      setattr ( Module_six_moves_urllib_error , attr . name , attr )
   if len ( bits ) :
   if str ( '\n' ) in value or str ( '\r' ) in value :
 if not tag or current_len >= truncate_len :
    def sql_destroy_indexes ( app_config , style , connection ) :
  for name in MEDIA_TYPES :
    def get_template ( template_name , dirs = None ) :
 return self . _html_output (  normal_row = '<tr%(html_class_attr)s><th>%(label)s</th><td>%(errors)s%(field)s%(help_text)s</td></tr>' ,  error_row = '<tr><td colspan="2">%s</td></tr>' ,  row_ender = '</td></tr>' ,  help_text_html = '<br /><span class="helptext">%s</span>' ,  errors_on_separate_row = False )
                    if int ( hextet , 16 ) < 0x0 or int ( hextet , 16 ) > 0xFFFF :
   @ python_2_unicode_compatible
    class DjangoSafeDumper ( SafeDumper ) :
 import copy
   def __repr__ ( self ) :
          attrs [ 'error_messages' ] = error_messages
 base62 = BaseConverter ( BASE62_ALPHABET )
   def urlencode ( query , doseq = 0 ) :
   if not response . has_header ( 'Last-Modified' ) :
 converter = getattr ( self , converter )
 if output :
          return DebugNodeList ( )
      _meth_func = "__func__"
              formfield = f . formfield ( ** kwargs )
  escape = allow_lazy ( escape , six . text_type )
               translation . _catalog = { }
 parts = 2 if version [ 2 ] == 0 else 3
 for header in cc_delim_re . split ( response [ 'Vary' ] ) :
   import random
   def tell ( self ) :
 int2byte = chr
                  break
          fp . write ( msgs )
 unique_checks , date_checks = form . instance . _get_unique_checks ( exclude = exclude )
                  attrs [ 'id' ] = self . html_initial_id
  else :
 starttag_re = re . compile ( r'<%s(/?>|(\s+[^>]*>))' % tags_re , re . U )
  from django . utils . deprecation import RemovedInDjango19Warning
  from django . utils import six
 for bit in bits :
   def cache_key ( self , template_name , template_dirs ) :
     def get_language_from_request ( request , check_path = False ) :
 if not hasattr ( translation , '_catalog' ) :
          y = data . get ( self . year_field % name )
 from django . forms . utils import from_current_timezone , to_current_timezone
  else :
   def value_from_datadict ( self , data , files , name ) :
    def rmtree_errorhandler ( func , path , exc_info ) :
   if len ( args ) == 2 :
  try :
            if cursor and close_connection :
   def __str__ ( self ) :
  defaults . update ( kwargs )
          c = cookie
              self . _setup ( )
               urlconf_repr = '<%s list>' % self . urlconf_name [ 0 ] . __class__ . __name__
          self . _archive . extract ( to_path )
 kwargs_safe = dict ( ( k , conditional_escape ( v ) ) for ( k , v ) in six . iteritems ( kwargs ) )
    if unpack_ipv4 :
                              out . write ( blankout ( part , 'S' ) )
  import base64
  except UnicodeDecodeError :
 def urlizetrunc ( value , limit , autoescape = None ) :
  except ValueError :
 default_error_messages = {  'invalid' : _ ( 'Enter a list of values.' ) ,  'incomplete' : _ ( 'Enter a complete value.' ) ,  }
 from django . utils . encoding import iri_to_uri , force_bytes , force_text
 def get_default_prefix ( cls ) :
  if isinstance ( value , datetime . datetime ) :
 if fd . isatty ( ) :
          self . dict = OrderedDict ( ( ( x , None ) for x in iterable ) if iterable else [ ] )
 model = None
  except TypeError :
          return TemplateLiteral ( self . template_parser . compile_filter ( value ) , value )
                  self . default_locale_path = self . locale_paths [ 0 ]
   else :
  return response
          encoding = 'ascii'
  else :
 if cache is None :
  else :
  elif closing_tag :
              defaults [ 'empty_permitted' ] = True
 input_type = None
   width = six . text_type ( len ( six . text_type ( len ( lines ) ) ) )
          warnings . warn (  "FastCGI support has been deprecated and will be removed in Django 1.9." ,  RemovedInDjango19Warning )
                      domain = domain . encode ( 'idna' ) . decode ( 'ascii' )
   def __init__ ( self , data = None ) :
          locales . append ( locale . split ( '_' ) [ 0 ] )
   def pop ( self , idx = - 1 ) :
          for key in self . keyOrder :
  try :
 self . validate ( value )
 from django . utils import autoreload
   return total_forms
 pass
          return ZERO
    class HttpRequest ( object ) :
 handler . name = name
                  return ''
  else :
          value = force_text ( value )
    def pgettext ( context , message ) :
              str_hidden = '' . join ( hidden_fields )
              return ""
      rendering_attrs = SimpleTemplateResponse . rendering_attrs + [ '_request' , '_current_app' ]
 if not os . path . exists ( top_dir ) :
 return getattr ( _active , "value" , get_default_timezone ( ) )
  elif isinstance ( o , datetime . time ) :
  if bits [ 4 ] != 'as' :
 cache_get = cache . get
                          continue
  url = quote ( url , safe = b'!*\'();:@&=+$,/?#[]~' )
                  return kwargs
 self . META = { }
 if item_date :
   def root_attributes ( self ) :
  new_result = [ ]
 return '%02d' % self . data . second
  else :
  except ValidationError as e :
  self . extensions = handle_extensions ( exts )
  def _text_chars ( self , length , truncate , text , truncate_len ) :
 if result is not root :
  return meta ( name , bases , d )
 __setitem__ = complain
 day_of_year = self . z ( )
    def assertRegex ( self , * args , ** kwargs ) :
          self . vals . append ( val )
   def __repr__ ( self ) :
          input_val = force_text ( text )
 from django . utils import six
  if bmatch . group ( 1 ) :
  Meta = type ( str ( 'Meta' ) , parent , attrs )
                      continue
          nodelist_false = parser . parse ( ( end_tag , ) )
    if self . verbosity >= 1 :
 assert match , 'unexpected call to parse_starttag()'
 from django . utils . text import ( smart_split , unescape_string_literal ,  get_text_list )
   def handle_entityref ( self , name ) :
 default_error_messages = {  'invalid' : _ ( 'Enter a valid date.' ) ,  }
 return self . data . hour
 default_error_messages = {  'list' : _ ( 'Enter a list of values.' ) ,  'invalid_choice' : _ ( 'Select a valid choice. %(value)s is not one of the'  ' available choices.' ) ,  'invalid_pk_value' : _ ( '"%(pk)s" is not a valid value for a primary key.' )  }
          msg = '%sError importing module %s: "%s"' % (  error_prefix , dotted_path , e )
from django . forms . extras . widgets import SelectDateWidget
  return name , ser_fmt , cmp_fmt
                      i = open_tags . index ( tagname )
 setattr ( cls , opname , opfunc )
   return result
   def to_python ( self , value ) :
 cache [ key ] = oldroot
 _cookie_allows_colon_in_names = True
          return self . get_renderer ( name , value , attrs , choices ) . render ( )
     def sql_create ( app_config , style , connection ) :
          if self . _isdst ( dt ) :
   def has_next ( self ) :
      import pytz
import warnings
 def __init__ ( self , urlconf_name , default_kwargs = None , app_name = None , namespace = None ) :
                  field_value = value [ i ]
  return flat
 from threading import local
                  return value . serializable_value ( self . to_field_name )
 self . attrs , self . choices = attrs , choices
              if isinstance ( arg , Promise ) :
                   template = get_template ( template )
                  raise CommandError (  "Problem installing fixture '%s': %s is not a known "  "serialization format." % ( '' . join ( parts [ : - 1 ] ) , parts [ - 1 ] ) )
  except ( OSError , NotImplementedError , AttributeError ) :
 from datetime import datetime
      child_nodelists = ( 'nodelist_true' , 'nodelist_false' )
              deactivate ( )
 from django . utils . text import get_text_list , capfirst
    def smart_text ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :
       m = getattr ( lookup_view , '__module__' , None )
  else :
 message = ungettext_lazy (  'Ensure this value has at least %(limit_value)d character (it has %(show_value)d).' ,  'Ensure this value has at least %(limit_value)d characters (it has %(show_value)d).' ,  'limit_value' )
 super_set = super ( SortedDict , self ) . __setitem__
           if isinstance ( o , datetime . datetime ) :
          return isinstance ( other , EmailValidator ) and ( self . domain_whitelist == other . domain_whitelist ) and ( self . message == other . message ) and ( self . code == other . code )
  else :
      if not _serializers :
              self . cookies [ key ] [ 'httponly' ] = True
  import re
  else :
   def end_serialization ( self ) :
  kwargs = dict ( ( k , config [ k ] ) for k in config if valid_ident ( k ) )
 self . app_name = app_name
 if language_code not in self . _reverse_dict :
 if not field . show_hidden_initial :
          return number_format ( value , use_l10n = use_l10n )
     @ register . filter ( is_safe = True )
  fixture_files_in_dir = [ ]
  result . queryset = result . queryset
   _serializers = serializers
               self . instance = opts . model ( )
   class Command ( BaseCommand ) :
    if not self . addr :
          kwargs = { }
 TOKEN_MAPPING = {  TOKEN_TEXT : 'Text' ,  TOKEN_VAR : 'Var' ,  TOKEN_BLOCK : 'Block' ,  TOKEN_COMMENT : 'Comment' ,  }
   def _prepare_data ( self , data ) :
          return tuple ( bits )
                  apps . get_app_config ( app_label )
                          input_format = get_format ( 'DATE_INPUT_FORMATS' ) [ 0 ]
              return len ( self . get_queryset ( ) )
  continue
 id_ = widget . attrs . get ( 'id' ) or self . auto_id
 return obj
 from django . apps import apps
 if conflicts :
                  break
 parse = sys . modules [ __name__ + ".moves.urllib_parse" ]
  result = datetime . datetime . combine ( * data_list )
   try :
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
                   doublecolon_start = index
  def join_tokens ( tokens , trim = False ) :
 self . asvar = asvar
    comma_separated_int_list_re = re . compile ( '^[\d,]+$' )
   def __getitem__ ( self , key ) :
   return [ ]
 self . _files = MultiValueDict ( )
 while not bit . endswith ( sentinal ) :
 self . pubid = pubid
 from django . utils . encoding import force_text
 class BaseForm ( object ) :
    def handle ( self , * test_labels , ** options ) :
  except OverflowError :
 inner_args . extend ( args )
   changes = dict (  ( app , [ Migration ( "custom" , app ) ] )  for app in app_labels  )
  register_to = kwargs . get ( 'register_to' )
                      sub_match = pattern . resolve ( new_path )
 defaults = {  'auto_id' : self . auto_id ,  'prefix' : self . add_prefix ( i ) ,  'error_class' : self . error_class ,  }
   def resolve ( self , s ) :
      status_code = 410
  return t
     class MultipleChoiceField ( ChoiceField ) :
   if plan_node in loader . applied_migrations :
          pass
 if len ( t ) == 2 :
          self . command_stack . pop ( )
 i = self . pointer
   self . _callback = get_callable ( self . _callback_str )
  def __init__ ( self , attrs = None , choices = ( ) ) :
   executor = MigrationExecutor ( connection )
  def render ( self , name , value , attrs = None ) :
   from django . conf import settings
 for f in filters :
 result , upto = [ ] , 0
          sys . stderr . write ( "ERROR: %s\n" % e )
              settings . USE_I18N = True
  for i , arg in enumerate ( args ) :
     def modelformset_factory ( model , form = ModelForm , formfield_callback = None ,  formset = BaseModelFormSet , extra = 1 , can_delete = False ,  can_order = False , max_num = None , fields = None , exclude = None ,  widgets = None , validate_max = False , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ,  min_num = None , validate_min = False ) :
   _js_escapes . update ( ( ord ( '%c' % z ) , '\\u%04X' % z ) for z in range ( 32 ) )
 from django . utils import six
    for app_name , model_list in manifest . items ( ) :
 from django . utils . deprecation import RemovedInDjango19Warning
  check_for_migrations ( app_config , connection )
          for event , node in self . event_stream :
 if value in ( None , '' ) :
                  definition [ 'fg' ] = fg
       import pyinotify
   def compress ( self , data_list ) :
 self . _regex_dict = { }
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
 package_path = package . __path__
   def module_has_submodule ( package , module_name ) :
 from django . utils . six . moves import xrange
 from django . core import signing
          _supported = OrderedDict ( settings . LANGUAGES )
    def pop ( self , name ) :
  time_re = re . compile (  r'(?P<hour>\d{1,2}):(?P<minute>\d{1,2})'  r'(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?'  )
              result [ i ] += piece
          new_ip = ip_str . split ( ':' )
 obj = Model ( ** data )
                  self . stdout . write ( "  Creating tables...\n" )
          super ( MultiValueDict , self ) . __setitem__ ( key , [ value ] )
  else :
          raise TemplateSyntaxError ( "'for' statements should use the format"  " 'for x in y': %s" % token . contents )
  elif command . verbosity > 0 :
 version = get_complete_version ( version )
  else :
 if '()' in config :
   def compile_filter ( self , token ) :
  props = config . pop ( '.' , None )
 for i in range ( 0 , self . total_form_count ( ) ) :
 new_filenames = [ filename . __file__ for filename in new_modules  if hasattr ( filename , '__file__' ) ]
 day_field = '%s_day'
   def handle_file_complete ( self , old_field_name , counters ) :
   def error ( self , token , msg ) :
   else :
  elif value is False :
  else :
              format_module_path = [ format_module_path ]
                      if hasattr ( middleware , 'process_template_response' ) :
  for cat in self . feed [ 'categories' ] :
 prefix = 'django_%s_template_' % self . app_or_project
    @ register . tag
                  EventHandler . modified_code = I18N_MODIFIED
 if not callback :
     class ExternalReferenceForbidden ( DefusedXmlException ) :
   class TemplateSyntaxError ( Exception ) :
              getattr ( combined , 'add_' + name ) ( getattr ( self , '_' + name , None ) )
                      return True
                  write ( sep )
  else :
          return value
 if plan :
 nodes = [ ]
 self . filters . update ( lib . filters )
 iterator = None
  for attr in self . rendering_attrs :
 num_args += 1
                      raise TemplateSyntaxError ( "'%s' is not a valid tag or filter in tag library '%s'" %  ( name , taglib ) )
 return '"%s"' % etag . replace ( '\\' , '\\\\' ) . replace ( '"' , '\\"' )
   except AttributeError :
  illegal_formatting = _illegal_formatting . search ( fmt )
  self . _current = None
    PY2 = sys . version_info [ 0 ] == 2
 lookups . appendlist ( pattern . callback , ( bits , p_pattern , pattern . default_args ) )
                         if field . error_messages [ 'incomplete' ] not in errors :
  except ( ValueError , TypeError ) :
      help = "Prints the CREATE TABLE, custom SQL and CREATE INDEX SQL statements for the given model module name(s)."
              kwargs [ 'localize' ] = True
      def __init__ ( self , lexer ) :
              self . __starttag_text = None
   def copy ( self ) :
  filter_raw_string = r""" ^(?P<constant>%(constant)s)| ^(?P<var>[%(var_chars)s]+|%(num)s)|  (?:\s*%(filter_sep)s\s*      (?P<filter_name>\w+)          (?:%(arg_sep)s              (?:               (?P<constant_arg>%(constant)s)|               (?P<var_arg>[%(var_chars)s]+|%(num)s)              )          )?  )""" % {  'constant' : constant_string ,  'num' : r'[-+\.]?\d[\d\.e]*' ,  'var_chars' : "\w\." ,  'filter_sep' : re . escape ( FILTER_SEPARATOR ) ,  'arg_sep' : re . escape ( FILTER_ARGUMENT_SEPARATOR ) ,  }
              result += ugettext ( ', ' ) + avoid_wrapping ( name2 % count2 )
   class Command ( AppCommand ) :
         @ register . filter ( expects_localtime = True , is_safe = False )
        def template_localtime ( value , use_tz = None ) :
  except ImportError as e :
  elif 'HTTP_HOST' in self . META :
    else :
 return form . save ( commit = commit )
  value = int ( s , 36 )
  httpd = httpd_cls ( server_address , WSGIRequestHandler , ipv6 = ipv6 )
               cache = dict ( )
   def add_item_elements ( self , handler , item ) :
     ret_ip = [ ]
      def get_language ( ) :
              if field . widget . needs_multipart_form :
 return header . lower ( ) in self . _headers
   else :
          warnings . warn (  "SortedDict is deprecated and will be removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2  )
   class date ( real_date ) :
 self . _callback_str = callback
 if self . variable_name :
   return instance
    def deactivate ( ) :
  tables . append ( connection . introspection . table_name_converter ( model . _meta . db_table ) )
 args = [ arg . resolve ( context ) for arg in self . args ]
 from django . template . loader import BaseLoader
     class NullBooleanField ( BooleanField ) :
                                  self . stderr . write ( "    Failed to install index for %s.%s model: %s\n" % ( app_name , model . _meta . object_name , e ) )
 output = [ ]
                        continue
      compare = lambda self , a , b : a is not b
  else :
 ext_list = [ ]
    def safe_join ( base , * paths ) :
                       if lookup == 'date' :
 try :
          self . coerce = kwargs . pop ( 'coerce' , lambda val : val )
 if timezone is None :
              handler . startElement ( "entry" , self . item_attributes ( item ) )
          self . style = color_style ( )
          if json . __version__ . split ( '.' ) >= [ '2' , '1' , '3' ] :
 del self [ 'content-type' ]
                  imatch = inline_re . match ( t . contents )
 reverse = complain
                                  n = int ( idx )
          if value is None :
                  new_mod = name
    def format_html_join ( sep , format_string , args_generator ) :
  for field_name in self . fields :
  else :
 if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) :
                  self . stdout . write ( "No fixture '%s' in %s." %  ( fixture_name , humanize ( fixture_dir ) ) )
              app_names = sorted ( loader . migrated_apps )
   BUILTIN_SERIALIZERS = {  "xml" : "django.core.serializers.xml_serializer" ,  "python" : "django.core.serializers.python" ,  "json" : "django.core.serializers.json" ,  "yaml" : "django.core.serializers.pyyaml" ,  }
          return True
    def close ( self ) :
                      src_data = fp . read ( )
          value = force_str ( value )
              activate ( self . old_language )
 self . data = data or { }
 missing_fields = ( set ( none_model_fields ) -  set ( new_class . declared_fields . keys ( ) ) )
              sep = space
              form = self . forms [ i ]
             cache_key += '.%s' % getattr ( request , 'LANGUAGE_CODE' , get_language ( ) )
   hextets = ip_str . split ( ':' )
  except ( LookupError , TypeError ) :
              result [ i ] += piece
   def resolve_context ( self , context ) :
              _mtimes [ filename ] = mtime
  result . append ( ( lang , priority ) )
 def fset ( instance , value , name = fset . __name__ ) :
 try :
 value = bytes_to_text ( value , self . encoding )
 return token
    def localize ( value , use_l10n = None ) :
   for namespace , ( prefix , sub_pattern ) in pattern . namespace_dict . items ( ) :
 if value in self . empty_values :
              self . check_migrations ( )
  end_tag = 'end' + bits [ 0 ]
   filesize_number_format = lambda value : formats . number_format ( round ( value , 1 ) , 1 )
   if fdel is not None :
 sub = mapping [ version [ 3 ] ] + str ( version [ 4 ] )
 if self . required and not value :
          if media :
   @ property
  else :
   def handle_app_config ( self , app_config , ** options ) :
   def __iter__ ( self ) :
  except ImportError :
  HTMLParseError = _html_parser . HTMLParseError
   def delete_first_token ( self ) :
   for migration in merge_migrations :
 nodelist = parser . parse ( ( 'endspaceless' , ) )
                  if middle . endswith ( punctuation ) :
   return fk
              value = self . val_expr . resolve ( context )
                  field_value = getInnerText ( node ) . strip ( )
          for i , line in enumerate ( lines ) :
          def __new__ ( cls , * args , ** kwargs ) :
       candidate_pat = prefix_norm . replace ( '%' , '%%' ) + result
 from django . utils . encoding import python_2_unicode_compatible
 self . validate_name ( app_name , "app" )
                  return endpos
   if typed :
  else :
     class RssUserland091Feed ( RssFeed ) :
      def __init__ ( self , val_expr , max_expr , max_width , asvar = None ) :
  except IndexError :
          base64d = b'.' + base64d
  filenames = [ ]
              piece += elt [ 0 ]
 pass
 widget = SelectMultiple
 time_str = date . strftime ( '%Y-%m-%dT%H:%M:%S' )
          to_unicode = lambda s : force_text ( s , strings_only = True )
          self . obj = obj
               logger . removeHandler ( handler )
                             meth = cls . __promise__ ( resultclass , k , v )
 setattr ( base , old_method_name , wrapper ( old_method ) )
   self . check_test = boolean_check if check_test is None else check_test
   for filename in filenames :
import copy
          daemon_kwargs [ 'umask' ] = int ( options [ 'umask' ] , 8 )
  else :
                                  value = value . pk
              value = ''
 str_number = six . text_type ( number )
 from logging . config import dictConfig
 if hasattr ( _active , "value" ) :
   else :
 if not self . is_required and CheckboxInput ( ) . value_from_datadict (  data , files , self . clear_checkbox_name ( name ) ) :
    def generic_tag_compiler ( parser , token , params , varargs , varkw , defaults ,  name , takes_context , node_class ) :
 if self . data . minute == 0 and self . data . hour == 0 :
               return False
                      migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )
                      initial = self . initial . get ( name , field . initial )
  def __init__ ( self , attrs = None , render_value = False ) :
 clean = lambda self , x : x
 message_context = None
  if not isinstance ( cookie , http_cookies . BaseCookie ) :
 if isinstance ( title , ( list , tuple ) ) :
          return s
  self [ 'Content-Type' ] = content_type
     def _replace_entity ( match ) :
              if year < 70 :
        @ register . filter ( is_safe = False )
     def dumps ( obj , key = None , salt = 'django.core.signing' , serializer = JSONSerializer , compress = False ) :
  not_found = [ ]
 super ( NullBooleanSelect , self ) . __init__ ( attrs , choices )
          return self . _queryset
          data = zlib . decompress ( data )
   def t ( self ) :
 if bits [ 2 ] != 'by' :
 plural = [ ]
import logging
   def handle ( self , * fixture_labels , ** options ) :
  try :
 for key in self . bad_cookies :
               yield parse_boundary_stream ( sub_stream , 1024 )
     class RegexField ( CharField ) :
 return dict ( ( key , self [ key ] ) for key in self )
  from django . conf import settings
          return [ '' ] , [ [ ] ]
  value = b'' . join ( self . make_bytes ( chunk ) for chunk in value )
              end = s . find ( b';' , end + 1 )
 if not response . has_header ( 'Vary' ) :
 def escape_quotes ( m ) :
  handler . endElement ( "author" )
   def keys ( self ) :
    executor = MigrationExecutor ( connection , self . migration_progress_callback )
          if not filename :
              try :
   def __contains__ ( self , key ) :
     try :
   def tokenize ( self ) :
 output . append ( format_html ( self . inner_html ,  choice_value = force_text ( w ) , sub_widgets = '' ) )
 if old_handler is not None :
                  return getattr ( self , shell ) ( )
 try :
 from django . core . files . uploadhandler import StopUpload , SkipFile , StopFutureHandlers
              break
   super ( Command , self ) . run_from_argv ( argv )
 constant_string = constant_string . replace ( "\n" , "" )
 return "|" . join ( prefix + re . escape ( c ) + suffix for c in choices . split ( ) )
          return mark_safe ( six . text_type ( number ) )
 if csrf_token :
 number_equal = len ( [ current_number for current_number in self . _unget_history  if current_number == num_bytes ] )
   else :
              self . keyOrder . append ( key )
 colors . reverse ( )
 self . children = [ obj , data ]
            unhandled_params = unhandled_params [ : - len ( defaults ) ]
 orig_file = os . path . join ( self . dirpath , self . file )
 line = ''
   def write ( self , content ) :
  def __init__ ( self , attrs = None ) :
  basedirs . extend ( settings . LOCALE_PATHS )
 if path . exists ( new_path ) :
              output . append ( '* %s' % field )
              return
   try :
 if len ( list_ ) == 0 :
                 tok = tok . replace ( "\\" , "U" )
          return "<DeserializedObject: %s.%s(pk=%s)>" % (  self . object . _meta . app_label , self . object . _meta . object_name , self . object . pk )
              try :
 from django . utils . timezone import template_localtime
   return func ( * args , ** kwargs )
  else :
  sub_ul_renderer = ChoiceFieldRenderer ( name = self . name ,  value = self . value ,  attrs = attrs_plus ,  choices = choice_label )
     class RadioChoiceInput ( ChoiceInput ) :
                  attrs [ 'pk' ] = smart_text ( obj_pk )
 parser . add_argument ( '--extension' , '-e' , dest = 'extensions' ,  action = 'append' , default = [ 'py' ] ,  help = 'The file extension(s) to render (default: "py"). '  'Separate multiple extensions with commas, or use '  '-e multiple times.' )
 for key , value in data :
 key = self . cache_key ( name , dirs )
    else :
  else :
   if self . no_obsolete :
  return data . get ( name , None )
          return '' . join ( self . fed )
 WEEKDAYS_REV = {  'monday' : 0 , 'tuesday' : 1 , 'wednesday' : 2 , 'thursday' : 3 , 'friday' : 4 ,  'saturday' : 5 , 'sunday' : 6  }
 i = i + 1
 from django . utils . safestring import ( SafeData , EscapeData , mark_safe ,  mark_for_escaping )
                        self . prepend_token ( token )
      needs_multipart_form = False
              messages . update ( getattr ( c , 'default_error_messages' , { } ) )
                  if "'format'" not in str ( te ) :
 from decimal import Decimal
          if value in self . empty_values and self . required :
 _dict = func ( * resolved_args , ** resolved_kwargs )
                  validate_ipv4_address ( hextet )
   def appendlist ( self , key , value ) :
          return self . __class__ ( * self . dicts )
 from django . utils import six
   self . template_cache [ key ] = ( template , None )
 if self . instance . pk is None :
   def handle_fk_field ( self , obj , field ) :
       def __init__ ( self , input_formats = None , * args , ** kwargs ) :
 obj_pk = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
  value = smart_text ( value ) . strip ( )
   def __repr__ ( self ) :
 return chunk
 self . context_data = context
 if language_code not in self . _regex_dict :
 self . default_locale_path = None
          return value [ 0 ]
                  for model in model_list :
     class TimeFormat ( Formatter ) :
   def __deepcopy__ ( self , memodict ) :
                      temp_lib . filters [ name ] = lib . filters [ name ]
  return [ m2m_convert ( c ) for c in node . getElementsByTagName ( "object" ) ]
   is_reversed = bits [ - 1 ] == 'reversed'
          if hasattr ( self , '_files' ) :
    if ch == '<' :
   if terminal_char != ')' :
  if self . current_token is not EndToken :
           raise EntitiesForbidden ( name , None , base , sysid , pubid , notation_name )
    return wrapper
                  if six . PY3 :
              response . content = b''
 def fdel ( instance , name = fdel . __name__ ) :
              header = header . upper ( ) . replace ( '-' , '_' )
                  if targets [ 0 ] [ 1 ] is None :
 hour = int ( m . group ( 'hour' ) )
          if args and kwargs :
 from django . utils . six . moves . urllib . parse import urlparse
 def initial_forms ( self ) :
 if base64d [ : 1 ] == b'.' :
  if getattr ( ev , 'filename' , None ) is None :
 self . _app_dict = { }
  data_value = data if data is not None else ''
          try :
 return calendar . isleap ( self . data . year )
   if value != value or value in ( Decimal ( 'Inf' ) , Decimal ( '-Inf' ) ) :
from __future__ import unicode_literals
  elif autoescape :
   if hasattr ( f , 'seek' ) and callable ( f . seek ) :
          value = escape ( value )
     capfirst = lambda x : x and force_text ( x ) [ 0 ] . upper ( ) + force_text ( x ) [ 1 : ]
          return input_val
              raise SystemRestart
 self . children = children [ : ] if children else [ ]
                     errors . extend ( m for m in e . error_list if m not in errors )
  else :
 reason_phrase = None
 simple_url_re = re . compile ( r'^https?://\[?\w' , re . IGNORECASE )
  elif item [ "author_name" ] :
              contents = format_html ( '{0}{1}' , contents , label_suffix )
 consume_next = True
 def truncatewords_html ( value , arg ) :
 def __init__ ( self , initlist = None , error_class = None ) :
 for path in paths :
 if ch in "iLmsu#" :
  del _serializers [ format ]
   def get_version ( version = None ) :
  else :
 if '/' in path and ( ( '\\' in path and path . find ( '/' ) < path . find ( '\\' ) )  or '\\' not in path ) :
  else :
          return text . __html__ ( )
                  return True
     def _iterkeys ( self ) :
          self . _assert_mutable ( )
                              out . write ( ' pgettext(%r, %r) ' % (  message_context ,  join_tokens ( singular , trimmed ) ) )
  return value
 file_size = data . size
    UNKNOWN_SOURCE = '<unknown source>'
 self . _unget_history = [ ]
                      self . stdout . write ( "\nCreated new merge migration %s" % writer . path )
 import sys
  if os . name == 'posix' :
 result . key = key
          obj_dict = self . __dict__ . copy ( )
  if self . translate :
 if push is not None :
              field = self . fields [ name ]
          return '<ExtendsNode: extends %s>' % self . parent_name . token
   def _truncate_html ( self , length , truncate , text , truncate_len , words ) :
  i += 1
          self . nodelist = nodelist
   def clear_checkbox_id ( self , name ) :
              check_programs ( 'msguniq' , 'msgmerge' , 'msgattrib' )
                          namespaces [ namespace ] = ( p_pattern + prefix , sub_pattern )
 if options [ 'outlog' ] :
  self . validate_name ( name , app_or_project )
              yield d
              try :
 if lang is None :
   content_disposition = info . get ( 'content-disposition' )
   def migration_progress_callback ( self , action , migration , fake = False ) :
      return _trans . deactivate_all ( )
 if in_tag and token_string . startswith ( BLOCK_TAG_START ) :
   return new_value
 from django . utils import six
  elif not isinstance ( file_name , six . string_types ) and is_iterable ( file_name ) :
  def __init__ ( self , var1 , var2 , nodelist_true , nodelist_false , negate ) :
                  m = _html_parser . attrfind . match ( rawdata , k )
          if 'warning' in kwargs :
 filter_expr = parser . compile_filter ( "var|%s" % ( rest ) )
              match = kwarg_re . match ( bit )
              raise self . warning
  return r
   def render ( self , name , value , attrs = None , choices = ( ) ) :
 key = force_bytes ( settings . SECRET_KEY )
    else :
          def _wrapper ( self , * args , ** kwargs ) :
  else :
  return '%s %s' % ( self . f ( ) , self . a ( ) )
         for name , field in self . fields . items ( ) :
                  migration = loader . get_migration ( app_label , migration_name )
  if data is not None :
 if not self . allow_multiple_selected :
   def add_item ( self , title , link , description , author_email = None ,  author_name = None , author_link = None , pubdate = None , comments = None ,  unique_id = None , unique_id_is_permalink = None , enclosure = None ,  categories = ( ) , item_copyright = None , ttl = None , updateddate = None , ** kwargs ) :
 return value . strftime ( format )
   def save ( self , commit = True ) :
 if format_module_path :
          kw = dict ( ( k , int ( v ) ) for k , v in six . iteritems ( match . groupdict ( ) ) )
                      return ( fp . read ( ) . decode ( settings . FILE_CHARSET ) , filepath )
  super ( RendererMixin , self ) . __init__ ( * args , ** kwargs )
  from django . conf import settings
 os . chmod ( filename , new_permissions )
          for closable in self . _closable_objects :
          return self . render ( )
  if bases == ( BaseModelForm , ) :
              raise CommandError ( 'You must set settings.ALLOWED_HOSTS if DEBUG is False.' )
  if format not in _serializers :
 template_tuple = self . template_cache . get ( key )
                          last_row = ( normal_row % { 'errors' : '' , 'label' : '' ,  'field' : '' , 'help_text' : '' ,  'html_class_attr' : html_class_attr } )
   else :
   class BaseLoader ( object ) :
 from django . utils . functional import lazy
   else :
                  return False
              fail_message = 'changed'
    def add_metaclass ( metaclass ) :
 self . name , self . value = name , value
              self . setlistdefault ( key ) . append ( value )
  return self . _errors
  else :
 for form in valid_forms :
 use_grouping = use_grouping and grouping > 0
   def strptime ( self , value , format ) :
   elif name is not None and filter_func is None :
 subject = self . subject
   class Command ( AppCommand ) :
   def __str__ ( self ) :
    class RemovedInDjango19Warning ( DeprecationWarning ) :
    class ModelForm ( six . with_metaclass ( ModelFormMetaclass , BaseModelForm ) ) :
  def led ( self , left , parser ) :
   return cls
 compile_func . __doc__ = func . __doc__
  def __init__ ( self , name , value , attrs , choices ) :
   def __call__ ( self , * args , ** kwargs ) :
                              if self . verbosity >= 3 :
 if keys :
                  scheme , netloc , path , query , fragment = urlsplit ( value )
  def add_arguments ( self , parser ) :
  self . encoding = encoding
                      break
   def show_migration_list ( self , connection , app_names = None ) :
              _module = self . _resolve ( )
          super ( LocaleRegexURLResolver , self ) . __init__ (  None , urlconf_name , default_kwargs , app_name , namespace )
              raise TemplateSyntaxError ( "Invalid arguments provided to assignment_tag" )
  return split
 self . waiting_writers -= 1
  sys . modules [ __name__ + ".moves.urllib_request" ] = sys . modules [ __name__ + ".moves.urllib.request" ] = Module_six_moves_urllib_request ( __name__ + ".moves.urllib.request" )
              fail_message = 'created'
          class NumberAwareString ( resultclass ) :
                          g = g . strip ( "'" )
   raise Resolver404 ( { 'tried' : tried , 'path' : new_path } )
  linebreaks = allow_lazy ( linebreaks , six . text_type )
  except KeyError :
 super ( DebugParser , self ) . extend_nodelist ( nodelist , node , token )
    def update ( self , dict_ ) :
                  callback = pattern . _callback
                   ch , escaped = next ( pattern_iter )
 parser . skip_past ( 'endcomment' )
 from django . utils import six
          mod = import_module ( taglib_module )
   def unparsed_entity_decl ( self , name , base , sysid , pubid , notation_name ) :
          if "=" in x :
 from django . db . migrations . loader import MigrationLoader , AmbiguityError
                      os . makedirs ( filename )
 return get_internal_wsgi_application ( )
  return self . as_widget ( )
          old_setting = context . autoescape
 if app_label not in executor . loader . migrated_apps :
 if endpos < 0 :
          nesting = 1
  token = Token ( TOKEN_BLOCK , block_content )
   for ( field_name , field_value ) in six . iteritems ( d [ "fields" ] ) :
 raise CommandError ( "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'" % name_str )
   return view_func
 if git_changeset :
    raise ImportError ( "No IPython" )
 if isinstance ( self , nodetype ) :
 def errors ( self ) :
                  return getattr ( instance , name ) ( )
 statements = sql_destroy_indexes ( app_config , self . style , connection )
          return value
   def get_block ( self , name ) :
              taglib = bits [ - 1 ]
  return force_bytes ( s , encoding , strings_only , errors )
 parser . ExternalEntityRefHandler = self . external_entity_ref_handler
   def __deepcopy__ ( self , memo ) :
    def _resolve ( self ) :
 for field , errors in self . items ( ) :
 if csrf_token is not None :
          return baseconv . base62 . encode ( int ( time . time ( ) ) )
                  if status != STATUS_OK :
     def find_files ( self , root ) :
  del attr
  return value
    plan = [ ( executor . loader . graph . nodes [ targets [ 0 ] ] , options [ 'backwards' ] ) ]
 link_prev [ NEXT ] = link_next
 return force_text ( unquote_plus ( force_str ( quoted_url ) ) )
  self . position += len ( output )
              raise ValidationError ( self . message , code = self . code )
 if best_doublecolon_start == 0 :
 if app_config . label in loader . migrated_apps :
 for f in sorted ( opts . concrete_fields + sortable_virtual_fields + opts . many_to_many ) :
 if hasattr ( signal , 'SIGTTOU' ) :
   def complain ( self , * wargs , ** kwargs ) :
   def get ( self , key , otherwise = None ) :
   def args_check ( name , func , provided ) :
 return strip_spaces_between_tags ( self . nodelist . render ( context ) . strip ( ) )
     class Command ( BaseCommand ) :
 from xml . dom import pulldom
  def handle ( self , ** options ) :
 new_environ [ "RUN_MAIN" ] = 'true'
    def to_locale ( language ) :
   if six . PY3 :
           six . reraise ( DeserializationError , DeserializationError ( e ) , sys . exc_info ( ) [ 2 ] )
              args = list ( args )
 if not dklen :
                      return
   _urlconfs = local ( )
            class Trans ( object ) :
  import copy
              the_path , info = urlretrieve ( url , path . join ( tempdir , filename ) )
          self . vars = variables
 if space == 0 :
 _itervalues = "itervalues"
 import sys
                      found = getattr ( found , frag )
                              message_context = message_context . strip ( "'" )
 return self . format ( 'D, j M Y H:i:s O' )
  else :
              doy += 1
          attrs [ 'labels' ] = labels
 for char in fmt :
 from django . utils . text import unescape_entities
                  current_fields . append ( ( key , value ) )
          if attrs is not None :
          cache_timeout = settings . CACHE_MIDDLEWARE_SECONDS
    class SignatureExpired ( BadSignature ) :
          lbp = bp
   eol_message = message . replace ( str ( '\r\n' ) , str ( '\n' ) ) . replace ( str ( '\r' ) , str ( '\n' ) )
 return binascii . unhexlify ( ( hex_format_string % x ) . encode ( 'ascii' ) )
 from django . utils import timezone
   block = type ( self ) ( block . name , block . nodelist )
 if isinstance ( rhs , SafeData ) :
  def __init__ ( self , * args , ** kwargs ) :
   class Serializer ( base . Serializer ) :
   def _construct_form ( self , i , ** kwargs ) :
 from django . utils . six . moves import xrange
              return { }
 self . objects = [ ]
 warnings . warn (  'import_by_path() has been deprecated. Use import_string() instead.' ,  RemovedInDjango19Warning , stacklevel = 2 )
   def create_token ( self , token_string , source , in_tag ) :
  del attr
      if path is None :
          self . tokens = tokens
      def __init__ ( self , class_name , old_method_name , new_method_name , deprecation_warning ) :
 escaped = False
 while len ( line ) > max_width :
 root = [ ]
              key = self . to_field_name or 'pk'
              data = self . flo . read ( self . chunk_size )
 lib = import_library ( taglib_module )
 statements = connection . ops . sql_flush ( style , tables , seqs , allow_cascade )
                   prefix = settings . MEDIA_URL
           def split_url ( url ) :
              self . validators . append ( validators . MinLengthValidator ( int ( min_length ) ) )
                          apps . setdefault ( app_name , [ ] ) . extend ( namespace_list )
   def write_items ( self , handler ) :
                               break
               _localtime = LocalTimezone ( )
  if not response . has_header ( 'Expires' ) :
 import re
  return value
   def __next__ ( self ) :
    if six . PY3 :
  elif g [ 0 ] == "'" :
                           context_match = context_re . match ( bmatch . group ( 1 ) )
 for app_label , app_migrations in changes . items ( ) :
 while i < len ( subject ) and subject [ i ] != c :
    @ python_2_unicode_compatible
          if data in ( None , FILE_INPUT_CONTRADICTION ) :
  try :
   loop_dict = context [ 'forloop' ] = { 'parentloop' : parentloop }
                  return True
          current_timezone = timezone . get_current_timezone ( )
      def __init__ ( self , * args , ** kwargs ) :
 while x > 0 :
              self . _deleted_form_indexes = [ ]
  return self . _non_form_errors
              raise TypeError ( 'In order to allow non-dict objects to be '  'serialized set the safe parameter to False' )
 return date ( d . year , d . month , d . day )
  self . _current [ field . name ] = value
    @ register . tag
    if var . endswith ( '.' ) :
  else :
 try :
                  try :
              try :
          response [ 'Location' ] = request . build_absolute_uri ( response [ 'Location' ] )
  else :
                  comment . append ( t . contents )
                  args . append ( parser . compile_filter ( value ) )
 try :
 for attr in _urllib_request_moved_attributes :
  for part in singular :
              if bit :
 nonlocal_root = [ root ]
   def has_key ( self , key ) :
   if not re . search ( r'^[_a-zA-Z]\w*$' , name ) :
   def __eq__ ( self , other ) :
 def regroup ( parser , token ) :
      if args is None :
 self . _unget_history = [ ]
  except IOError as e :
              m = self . CONVERT_PATTERN . match ( value )
             if iri is None :
   def _format_value ( self , value ) :
 return self . data . isocalendar ( ) [ 0 ]
              if finder . find_module ( name , package_path ) :
 Field . creation_counter += 1
  msgmerge_options = [ '-q' , '--previous' ]
     class _LazyModule ( types . ModuleType ) :
 if len ( args ) != 2 :
                  obj = new_obj
 def default ( value , arg ) :
  hidden_fields . append ( six . text_type ( bf ) )
  try :
  if code is not None :
              return None
   if pop_context :
 code_list = [ ]
   CONTEXT_SEPARATOR = "\x04"
 M . set ( key , real_value , coded_value )
 form . _errors [ NON_FIELD_ERRORS ] = self . error_class ( [ self . get_form_error ( ) ] )
                      compile_func = self . tags [ command ]
          return False
    x = 0
     __delitem__ = complain
 try :
   sys . stderr . write ( msg )
 def __init__ ( self ) :
   def _has_changed ( self , initial , data ) :
    def assignment_tag ( self , func = None , takes_context = None , name = None ) :
  args = [ 'msguniq' ] + self . msguniq_options + [ potfile ]
 max_value = self . max_expr . resolve ( context )
     return Operator
 self . use_natural_primary_keys = options . pop ( 'use_natural_primary_keys' , False )
 from django . utils . safestring import mark_safe
          return arg
      SafeString = SafeBytes
          if initial is None :
      if os . environ . get ( "RUN_MAIN" ) == "true" :
              continue
          strerror = force_text ( e . strerror , DEFAULT_LOCALE_ENCODING ,  strings_only = True )
  if isinstance ( source , Group ) :
 if change == FILE_MODIFIED :
 if index < 0 :
          self . max_value , self . min_value = max_value , min_value
      smart_str = smart_text
              _active . value = self . old_timezone
   except ImportError :
  models . signals . post_syncdb . send (  sender = app_config . models_module ,  app = app_config . models_module ,  created_models = created_models ,  verbosity = verbosity ,  interactive = interactive ,  db = db )
      def compress_sequence ( sequence ) :
 try :
 word_split_re = re . compile ( r'(\s+)' )
   self . use_ipv6 = options . get ( 'use_ipv6' )
 callback = getattr ( urls , 'handler%s' % view_type )
 if m :
 bits = urlparse ( url )
                          self . configure_logger ( name , loggers [ name ] )
              self . _urlconf_module = self . urlconf_name
          self . template = template
          return value
              attrs = { }
      help = ( "Creates a Django app directory structure for the given app "  "name in the current directory or optionally in the given "  "directory." )
  except KeyError :
                      biggest_number = max ( [ x for x in numbers if x is not None ] )
              final_attrs [ 'checked' ] = 'checked'
  except ( ValueError , TypeError ) :
 s = s . replace ( '</' , '<\\/' )
 return MONTHS_ALT [ self . data . month ]
                  continue
   def _setup ( self ) :
 def __init__ ( self , stream , boundary ) :
 clean_data = [ ]
 if missing_fields :
 return isinstance ( obj , _PROTECTED_TYPES )
  else :
 with context . push ( ) :
   def reader_leaves ( self ) :
   def read ( self ) :
  threading = options . get ( 'use_threading' )
              self . error_class = 'errorlist'
                                  e . django_template_source = node . source
   def reset ( self ) :
   for ext in pathext :
 return data
   def write_po_file ( self , potfile , locale ) :
 if autoescape :
                      try :
 e . django_template_source = source
  except ValueError :
  if isinstance ( source , NonCapture ) :
 return self . errors . get ( NON_FIELD_ERRORS , self . error_class ( error_class = 'nonfield' ) )
   if hasattr ( middleware , 'process_view' ) :
 def __init__ ( self , callback ) :
                      self . _errors [ field ] = self . error_class ( )
 self . _reverse_dict = { }
  for field_node in node . getElementsByTagName ( "field" ) :
              return self . management_form . cleaned_data [ INITIAL_FORM_COUNT ]
 from django . conf import settings
              return self . filter_expr . resolve ( context )
 ugettext_lazy = lazy ( ugettext , six . text_type )
                      for node in self . nodelist_loop :
           kwarg = token_kwargs ( [ bit ] , parser )
 template = '%(input)s'
                      try :
  def __init__ ( self , * args , ** kwargs ) :
                  want_unicode = True
          self . test_runner = None
   if iterator is None :
                              if self . verbosity >= 2 :
 __T = r'(?P<hour>\d{2}):(?P<min>\d{2}):(?P<sec>\d{2})'
 value = int ( value )
 bits = token . split_contents ( )
                  out . write ( blankout ( t . contents , 'X' ) )
  def items ( self ) :
          __bytes__ = serialize_headers
 __Y = r'(?P<year>\d{4})'
  except Exception as e :
 def __init__ ( self , flo , chunk_size = 64 * 1024 ) :
                    return self . data . tzinfo . tzname ( self . data ) or ""
  if not host_validation_re . match ( host ) :
 self . lasttag = tag = match . group ( 1 ) . lower ( )
   def E ( self ) :
    def get_cache_key ( request , key_prefix = None , method = 'GET' , cache = None ) :
     class RadioSelect ( RendererMixin , Select ) :
   @ property
   def __deepcopy__ ( self , memo = None ) :
  return ''
  new_second_item . extend ( item )
 for item in values :
 super ( BaseModelForm , self ) . __init__ ( data , files , auto_id , prefix , object_data ,  error_class , label_suffix , empty_permitted )
  return dec
 start_ipython ( argv = [ ] )
              output . append ( options )
  except ValueError :
                      data [ field . attname ] = None
 current_len = 0
   def _has_changed ( self , initial , data ) :
                      for model in model_list :
   def add ( self , data , conn_type , squash = True ) :
          iter ( x )
              domains = ( 'django' , )
 _assertRegex = "assertRegex"
 def pprint ( value ) :
          return ''
      EscapeString = EscapeBytes
      help = "Squashes an existing set of migrations (from first until specified) into a single new one."
  _ , rest = token . contents . split ( None , 1 )
                  return d [ key ]
 for x in range ( level , 1 , - 1 ) :
 shown = set ( )
 if item [ 'author_email' ] is not None :
 os . close ( fd )
    def prefix ( bp , func ) :
 if self . check_test ( value ) :
              name_str = "; " . join (  "%s in %s" % ( ", " . join ( names ) , app )  for app , names in conflicts . items ( )  )
 if self . feed [ 'feed_url' ] is not None :
 defaults [ 'files' ] = self . files
          for condition , nodelist in self . conditions_nodelists :
  if len ( initial ) != len ( data ) :
 get_function_globals = operator . attrgetter ( _func_globals )
              return timedelta ( seconds = - time . timezone )
          return self . as_ul ( )
  elif args [ 1 ] [ 0 ] == '3' :
              raise InvalidTemplateLibrary ( "Unsupported arguments to "  "Library.tag: (%r, %r)" , ( name , compile_function ) )
 parser . add_argument ( '--ipv6' , '-6' , action = 'store_true' , dest = 'use_ipv6' , default = False ,  help = 'Tells Django to use an IPv6 address.' )
 bits = token . split_contents ( )
      while remaining != 0 :
 if value in ( True , 'True' , '1' ) :
 from django . core . serializers . python import Serializer as PythonSerializer
          parser . add_argument ( 'app_label' , nargs = '?' ,  help = 'App label of an application to synchronize the state.' )
 os . chdir ( our_home_dir )
 if value in ( None , '' ) :
                      raise CommandError ( "%s already exists, overlaying a "  "project or app into an existing "  "directory won't replace conflicting "  "files" % new_path )
     def __deepcopy__ ( self , memo ) :
                  def __init__ ( self , takes_context , args , kwargs , target_var ) :
      import gettext
   def _has_changed ( self , initial , data ) :
    def get_system_encoding ( ) :
 WRAPPING_PUNCTUATION = [ ( '(' , ')' ) , ( '<' , '>' ) , ( '[' , ']' ) , ( '&lt;' , '&gt;' ) , ( '"' , '"' ) , ( '\'' , '\'' ) ]
                              out . write ( ' gettext(%r) ' % join_tokens ( singular ,  trimmed ) )
   format_locations . append ( 'django.conf.locale.%s' )
   if not new_method and old_method :
 if source is None :
 self . vals = [ ]
   def value_from_datadict ( self , data , files , name ) :
   def add ( self , item ) :
                      self . set_cdata_mode ( tag )
      if isinstance ( message , SafeData ) :
 data_set = set ( force_text ( value ) for value in data )
          if initial is None :
  return [ None , None ]
 output . append ( pformat ( sys . modules ) )
              return
                  return self . __bytes_cast ( )
  self . cookies = SimpleCookie ( )
  if _default is None :
    def sanitize_separators ( value ) :
    from django . core . servers . basehttp import get_internal_wsgi_application
 self . allow_empty_file = kwargs . pop ( 'allow_empty_file' , False )
   def S ( self ) :
          os . rmdir ( original_path )
     libraries = { }
      if used_name != guessed_filename :
    if not isinstance ( self . object_list , list ) :
   headers = [  ( b': ' . join ( [ to_bytes ( key , 'ascii' ) , to_bytes ( value , 'latin-1' ) ] ) )  for key , value in self . _headers . values ( )  ]
  raise self . error ( token , "Invalid block tag: '%s'" % command )
 if cache is None :
 import warnings
 namemap = options . get ( 'with' , { } )
 return result
              reloader_thread ( )
  if filename . endswith ( ( '/' , '\\' ) ) :
 import warnings
              return new_class
          warnings . warn ( '`MergeDict` is deprecated, use `dict.update()` '  'instead.' , RemovedInDjango19Warning , 2 )
                  return
  from __future__ import unicode_literals
                          raise ValueError ( 'Unable to configure '  'formatter %r: %s' % ( name , e ) )
 warnings . warn ( "resolve_variable() is deprecated. Use django.template."  "Variable(path).resolve(context) instead" ,  RemovedInDjango20Warning , stacklevel = 2 )
      def __init__ ( self , stream , boundary ) :
 return self . __language
           return self . client_address [ 0 ]
   @ property
              if settings . TEMPLATE_DEBUG :
 _assertRegex = "assertRegexpMatches"
 guessed_filename = params . get ( 'filename' ) or used_name
  else :
 parser . add_argument ( '--merge' , action = 'store_true' , dest = 'merge' , default = False ,  help = "Enable fixing of migration conflicts." )
 return lambda text : colorize ( text , opts , ** kwargs )
          block_context = context . render_context . get ( BLOCK_CONTEXT_KEY )
             return self . copy ( )
  return _serializers [ format ] . Serializer
   self . filters = filters
          return mark_safe ( '\n' . join ( chain ( * [ getattr ( self , 'render_' + name ) ( ) for name in MEDIA_TYPES ] ) ) )
                  handler . addQuickElement ( "email" , self . feed [ 'author_email' ] )
  if not self . allow_empty_file and not file_size :
          pass
 for i , word in enumerate ( words ) :
 if block is None :
 if resource_string is not None :
   if isinstance ( field_value , str ) :
          p = int ( arg )
  _iterkeys = "keys"
 from django . template . loader import BaseLoader
  self . choices = choices
                  declared_fields . update ( base . declared_fields )
  if self . feed [ 'author_link' ] is not None :
 from django . core . management . sql import sql_delete
 self . text = text
 TOKEN_COMMENT = 3
    @ register . filter ( is_safe = True )
   def handle_m2m_field ( self , obj , field ) :
                      raise CommandError (  "errors happened while running msgmerge\n%s" % errors )
 self . validators . append ( self . _regex_validator )
  try :
              return self . func ( value )
          daemon_kwargs [ 'err_log' ] = options [ 'errlog' ]
                if comment_lineno_cache is not None :
 min = int ( m . group ( 'min' ) )
      if not sys . warnoptions :
      status_code = 405
    templatetags_modules = [ ]
 self . verbosity = options . get ( 'verbosity' )
  def add_arguments ( self , parser ) :
 if not templatetags_modules :
     class RegexURLResolver ( LocaleRegexProvider ) :
 self . html_initial_id = form . add_initial_prefix ( self . auto_id )
 is_compressed = True
    return obj_dict
    return self . _changed_data
 get_ns_resolver . cache_clear ( )
          value = ugettext ( "%s PB" ) % filesize_number_format ( bytes / PB )
 if callable ( lookup_view ) :
 return self . _callback
 return value . tzinfo is not None and value . tzinfo . utcoffset ( value ) is not None
  local_attrs = self . build_attrs ( id = field % id_ )
          resolved_args = [ var . resolve ( context ) for var in self . args ]
    def b64_decode ( s ) :
   def validate ( self , value ) :
   def get_fixed_timezone ( offset ) :
 from django . core . exceptions import ImproperlyConfigured
              name = config . get ( 'name' , '' )
 if isinstance ( item . get ( 'unique_id_is_permalink' ) , bool ) :
   self . invoked_for_django = False
  register = Library ( )
                  return format_html ( "<input type='hidden' name='csrfmiddlewaretoken' value='{0}' />" , csrf_token )
 result = 0
  msgs , errors , status = popen_wrapper ( args )
              value = float ( value )
    if isinstance ( empty_label , ( list , tuple ) ) :
 return update_wrapper ( wrapper , user_function )
 for form in self . initial_forms :
          results [ predicate ( item ) ] . append ( item )
   def __iter__ ( self ) :
     @ register . filter ( is_safe = False )
 walk_to_end ( ch , pattern_iter )
   def __eq__ ( self , other ) :
              yield v
  if not isinstance ( var , six . string_types ) :
   def has_previous ( self ) :
          raise ValueError ( "The %s could not be %s because the data didn't"  " validate." % ( opts . object_name , fail_message ) )
                          obj_pk = obj_pk . pk
  self . stream . write ( "[" )
 import operator
  except TemplateDoesNotExist :
  except Exception :
                  m2m_data [ field . name ] = self . _handle_m2m_field_node ( field_node , field )
  elif not isinstance ( end , str ) :
 return self . _html_output (  normal_row = '<p%(html_class_attr)s>%(label)s %(field)s%(help_text)s</p>' ,  error_row = '%s' ,  row_ender = '</p>' ,  help_text_html = ' <span class="helptext">%s</span>' ,  errors_on_separate_row = True )
    @ register . tag
          super ( DecimalField , self ) . validate ( value )
 import re
 self . first = True
                  common_prefix = prefix
  del attr
 self . tags = { }
 for migration in migrations_to_squash :
               path_rest = root [ prefix_length : ]
              self . full_clean ( )
     not_installed_models = set ( pending_references . keys ( ) )
 def _wrapped_view ( request , * args , ** kwargs ) :
              continue
   class FilterExpression ( object ) :
  for base in inspect . getmro ( new_class ) :
 import re
   def __repr__ ( self ) :
                       value . decode ( charset )
                   break
 choices = list ( six . iteritems ( self . months ) )
 return iter ( self . forms )
                  if confirm not in ( 'yes' , 'no' ) :
  if sys . platform . startswith ( "java" ) :
              try :
              yield node
              if action == "apply_start" :
    self . widget . choices = self . choices
 if not m :
   if header_end == - 1 :
 @ stringfilter
    run_syncdb = False
   def create_select ( self , name , field , value , val , choices , none_value ) :
   if field . rel . to . _meta . pk . rel :
 if not buf :
  except KeyError :
                      self . stdout . write ( self . style . MIGRATE_SUCCESS ( " FAKED" ) )
              response = _set_response_etag ( response )
                  palette [ role ] = definition
                      continue
      if self . has_header ( 'Content-Encoding' ) :
               exhaust ( self . _input_data )
              return [ first_item ] , True
 from django . utils import datetime_safe
                      plural . append ( '%%(%s)s' % t . contents )
 if start > upto :
 class VariableDoesNotExist ( Exception ) :
  else :
              d = Decimal ( force_text ( float ( text ) ) )
              template = self . template_with_initial
 index = data . find ( self . _boundary )
 old_field_name = None
 if not self . is_bound :
  return bits [ 0 ] , ''
    def start_serialization ( self ) :
                          self . configure_logger ( name , loggers [ name ] , True )
  if finder . find_module ( name ) :
              return field in self . errors
  except http_cookies . CookieError :
 if secret is None :
  else :
 import time
              handler . addQuickElement ( "category" , cat )
 return value and value [ 0 ] . upper ( ) + value [ 1 : ]
  try :
 if len ( t ) > 1 :
          if instance is None :
  if args :
  return value
  return self . object_list [ index ]
  value = new_value
              self . namespaces = [ ]
              return '%s=%s' % ( t [ 0 ] , t [ 1 ] )
                              os . mkdir ( migrations_directory )
 data_set = set ( force_text ( value ) for value in data )
              if not self . valid_value ( val ) :
  elif total_forms > self . max_num >= 0 :
  except OSError as e :
      return ugettext ( message )
    function_name = ( name or  getattr ( func , '_decorated_function' , func ) . __name__ )
   if target is None :
      SimpleCookie = http_cookies . SimpleCookie
 from django . forms . fields import Field , ChoiceField
 from django . utils . timezone import template_localtime
  raise Resolver404 ( { 'path' : path } )
  handler . addQuickElement ( "lastBuildDate" , rfc2822_date ( self . latest_post_date ( ) ) )
   def __setitem__ ( self , key , value ) :
  except TypeError as te :
    def dst ( self , dt ) :
 unpack = num_loopvars > 1
  last = pos + 1
    def same_origin ( url1 , url2 ) :
 return type ( form . __name__ + str ( 'FormSet' ) , ( formset , ) , attrs )
              try :
 from django . db import connections , DEFAULT_DB_ALIAS
  value , sig = signed_value . rsplit ( self . sep , 1 )
  messages . update ( error_messages or { } )
 if isinstance ( file , six . string_types ) :
          raise self . error ( token , "Empty block tag" )
 year_field = '%s_year'
          path = str ( path )
                  lineno , offset = self . getpos ( )
                  result |= ord ( x ) ^ ord ( y )
          return do_translate ( message , 'ugettext' )
      _dec . _decorated_function = getattr ( func , '_decorated_function' , func )
 from django . template . loader import get_template
          self . is_bound = data is not None or files is not None
  msgs = msgs . replace ( old , new )
 if path is None :
                  warnings . warn (  'Reversing by dotted path is deprecated (%s).' % original_lookup ,  RemovedInDjango20Warning , stacklevel = 3  )
          for dict_ in self . dicts :
              regex_compiled = re . compile ( '^%s/' % language_code , re . UNICODE )
  return self . __cast ( ) != other
  for i in range ( 0 , len ( pieces ) - 1 , 3 ) :
                  with io . open ( orig_file , 'r' , encoding = settings . FILE_CHARSET ) as fp :
 from django . conf import settings
                  for plan_node in graph . forwards_plan ( node ) :
 if not indent :
              thousand_sep = get_format ( 'THOUSAND_SEPARATOR' )
 i = 0
                              self . stdout . write ( "    Creating table %s\n" % model . _meta . db_table )
 while i < len ( subject ) and subject [ i ] not in ( ' ' , '\t' ) :
 try :
                           if isinstance ( current , BaseContext ) and getattr ( type ( current ) , bit ) :
  if not url_fields [ 1 ] :
 from django . core . management . sql import sql_flush
 if cached is not None :
    def utcoffset ( self , dt ) :
 self . default_validators = validators . ip_address_validators ( protocol , unpack_ipv4 ) [ 0 ]
  if number_equal > 40 :
 if hasattr ( test_runner_class , 'option_list' ) :
 plan = executor . migration_plan ( executor . loader . graph . leaf_nodes ( ) )
  return value
  return [ form . cleaned_data for form in self . forms ]
   class Command ( AppCommand ) :
     emit_post_migrate_signal ( created_models , self . verbosity , self . interactive , connection . alias )
   def escapejs ( value ) :
   def handle ( self , ** options ) :
 self . _info = translation . _info . copy ( )
          if '.' in word or '@' in word or ':' in word :
      help = "Starts a lightweight Web server for development."
 id_ = final_attrs . get ( 'id' , None )
    @ register . tag ( 'include' )
 from django . db import models , router
  return ''
 urlconf = settings . ROOT_URLCONF
  buffer_types = ( bytearray , memoryview )
  tried . append ( [ pattern ] )
          if attrs is not None :
    @ register . tag
     if i >= self . initial_form_count ( ) and i >= self . min_num :
 six . reraise ( MultiPartParserError , MultiPartParserError ( msg ) , sys . exc_info ( ) [ 2 ] )
 return self . forms [ : self . initial_form_count ( ) ]
  scheme = value . split ( '://' ) [ 0 ] . lower ( )
  except Exception as e :
    class RWLock ( object ) :
 handler . endElement ( "item" )
     if settings . DEBUG :
                              data = raw_data
              template_string = force_text ( template_string )
  template_with_clear = '%(clear)s <label for="%(clear_checkbox_id)s">%(clear_checkbox_label)s</label>'
 from django . forms . utils import ErrorList
 from django . utils import datetime_safe
          s = s . decode ( 'utf-8' )
                                  getcallargs ( current )
 while path :
    autodetector = MigrationAutodetector (  loader . project_state ( ) ,  ProjectState . from_apps ( apps ) ,  InteractiveMigrationQuestioner ( specified_apps = app_labels , dry_run = self . dry_run ) ,  )
  except IndexError :
 self . POST = QueryDict ( mutable = True )
              self . DSTOFFSET = timedelta ( seconds = - _time . altzone )
              if isinstance ( elt , NonCapture ) :
 if isinstance ( rhs , SafeText ) :
  def write ( self , outfile , encoding ) :
          if fget is not None :
 handler . endElement ( "entry" )
                  v ( value )
from __future__ import unicode_literals
   @ content . setter
 from django . db import connections , DEFAULT_DB_ALIAS
              dot = package . rindex ( '.' , 0 , dot )
          import flup
 response = sys . modules [ __name__ + ".moves.urllib_response" ]
                      content = template_file . read ( )
 from django . utils . timezone import is_aware
 if doublecolon_start == - 1 :
      return _trans . ugettext ( message )
   for __ in iterator :
          return "<Variable Node: %s>" % self . filter_expression
                  self . first = False
 self . old_method_name = old_method_name
 for migration in merge_migrations :
 self . name = name
          return timeuntil ( value , arg )
 weekday = self . data . weekday ( ) + 1
 break
    for filename in files :
   def __repr__ ( self ) :
          return isinstance ( other , self . __class__ ) and ( self . limit_value == other . limit_value ) and ( self . message == other . message ) and ( self . code == other . code )
    construct_instance_exclude = list ( exclude )
   elif hasattr ( s , '__unicode__' ) :
 return form
          result = super ( SortedDict , self ) . popitem ( )
 if is_compressed :
 for f in file_list :
 if 'max-age' in cc :
              escaped = True
          self . name , self . nodelist , self . parent = name , nodelist , parent
    self . localize = localize
 def __new__ ( mcs , name , bases , attrs ) :
   def values ( self ) :
  except ( ValueError , TypeError ) :
               initial_forms = len ( self . initial ) if self . initial else 0
  else :
  arg = args [ 1 ]
                      for ( k , v ) in type_ . __dict__ . items ( ) :
          pass
          module = importlib . import_module ( '.%s' % flup_module , 'flup' )
 parser . add_argument ( '--no-initial-data' , action = 'store_false' , dest = 'load_initial_data' , default = True ,  help = 'Tells Django not to load any initial data after database synchronization.' )
  created_models = self . sync_apps ( connection , executor . loader . unmigrated_apps )
 yield item
  else :
   def close ( self ) :
   else :
    else :
  elif options [ 'app_label' ] :
  return _decorator
              raise ValueError ( "Unable to convert %r" % value )
    def __str__ ( self ) :
                      message . message = error_messages [ message . code ]
      rendering_attrs = [ 'template_name' , 'context_data' , '_post_render_callbacks' ]
              yield 'year'
          return iter ( self . dict . keys ( ) )
    else :
      if 'max-age' in cc and 'max_age' in kwargs :
   def get_form_error ( self ) :
    if self . _validate_unique :
 return False
  if connection . settings_dict [ 'ENGINE' ] == 'django.db.backends.dummy' :
          self . template_cache = { }
       self . fields = copy . deepcopy ( self . base_fields )
              c = self . resolve ( c )
   for line in header . split ( b'\r\n' ) :
              self . msgmerge_options = self . msgmerge_options [ : ] + [ '--no-wrap' ]
          return time_format ( value , 'TIME_FORMAT' , use_l10n = use_l10n )
                          return result
   def clean ( self , value ) :
   if host [ - 1 ] == ']' :
   def iri_to_uri ( iri ) :
 runfastcgi ( args )
 import calendar
          return ( self . func , self . args , self . kwargs ) [ index ]
 return ( '<%s token: "%s...">' %  ( token_name , self . contents [ : 20 ] . replace ( '\n' , '' ) ) )
 @ stringfilter
                  file = BytesIO ( data [ 'content' ] )
   else :
          return NodeList ( node for _ , nodelist in self . conditions_nodelists for node in nodelist )
 FormSet . model = model
 memo [ id ( self ) ] = result
 filters = config . pop ( 'filters' , None )
 os . makedirs ( original_path )
          try :
  else :
   if sys . version_info >= ( 2 , 7 , 2 ) :
  else :
 final_output . extend ( output )
 return s [ 1 : - 1 ] . replace ( r'\%s' % quote , quote ) . replace ( r'\\' , '\\' )
          _active . value = pytz . timezone ( timezone )
                                      traceback . print_exc ( )
          result = getattr ( t , translation_function ) ( eol_message )
          t = select_template ( template_name , dirs )
  from django . utils import six
              raise ContextPopException
 i += 1
  del attr
              raise ValidationError ( self . error_messages [ 'contradiction' ] , code = 'contradiction' )
 for d in self . dicts :
 view = parts [ 0 ]
 import stat
          query = query . items ( )
  output_transaction = True
              self . status_code = status
   def filter ( self , name = None , filter_func = None , ** flags ) :
     class IfChangedNode ( Node ) :
  return self . _app_dict [ language_code ]
          return { }
   def _get_model_from_node ( self , node , attr ) :
 self . domain = options . get ( 'domain' )
 if 'version' not in config :
                            walk_to_end ( ch , pattern_iter )
 value = map ( force_text , value )
 return '%02d' % self . g ( )
          response [ 'ETag' ] = '"%s"' % hashlib . md5 ( response . content ) . hexdigest ( )
                  int_part_gd += thousand_sep
  def to_python ( self , value ) :
 best_doublecolon_start = - 1
          main_value_pair , params = parse_header ( line )
      widget = URLInput
          del self . tokens [ 0 ]
  kwargs . setdefault ( 'content_type' , 'application/json' )
 make_key = _make_key
      def __init__ ( self , name , nodelist , parent = None ) :
  if self . verbosity > 0 :
             for handler in self . _upload_handlers :
          if ch != '\\' :
 media = Media ( )
              option_value = ''
                   def render ( self , context ) :
 best_doublecolon_len = 0
 HITS , MISSES = 0 , 1
              fext = f + ext
 def __init__ ( self , func , name = None ) :
                    css_classes = bf . css_classes ( )
              value = getattr ( obj , field . get_attname ( ) )
 pk = self . data [ pk_key ]
  continue
 try :
   def import_string ( dotted_path ) :
  return _dec
  raise DisallowedHost ( msg )
    def urlsafe_base64_decode ( s ) :
  self . regexes [ state ] = re . compile ( "|" . join ( parts ) , re . MULTILINE | re . VERBOSE )
  return force_text ( s , encoding , strings_only , errors )
 name = sign + hhmm
                  data = self . _coerce ( data )
   from django . conf import settings
 if len ( bits ) < 2 :
          split = [ ]
                  kwargs [ name ] = parser . compile_filter ( value )
              raise EmptyPage ( 'That page number is less than 1' )
      if self . ignore and field_name not in model_fields :
              try :
 oldvalue = root [ RESULT ]
 return header_query . lower ( ) in existing_headers
   except UnicodeError :
 from django . utils . formats import localize
                  libraries [ library_name ] = lib
 self . _raw_ipv6 = bool ( self . use_ipv6 )
 level = handler_config . get ( 'level' , None )
  from django . utils . deprecation import RemovedInDjango19Warning
   def __mod__ ( self , rhs ) :
 oldkey = root [ KEY ]
    colors = styles . pop ( ) . split ( '/' )
  from django . db import models
 if self . validate_domain_part ( domain_part ) :
          if self . _encoding is None :
      _assertCountEqual = "assertCountEqual"
   while token . contents . startswith ( 'elif' ) :
    lang_code = request . COOKIES . get ( settings . LANGUAGE_COOKIE_NAME )
                return False
       date = datetime_safe . new_datetime ( date )
      initial_text = ugettext_lazy ( 'Currently' )
   def has_other_pages ( self ) :
   class Command ( BaseCommand ) :
              raise AttributeError ( self . warning )
                 return ''
              if hasattr ( value , 'close' ) :
   app_labels = set ( app_labels )
                  definition [ 'opts' ] = opts
 from django . template . base import TemplateSyntaxError , Library , Node , TextNode , token_kwargs , Variable
              os . makedirs ( basedir )
  else :
 parser . add_argument ( '--extension' , '-e' , dest = 'extensions' ,  help = 'The file extension(s) to examine (default: "html,txt", or "js" '  'if the domain is "djangojs"). Separate multiple extensions with '  'commas, or use -e multiple times.' ,  action = 'append' )
                  pass
              value = self . make_bytes ( value )
                 memo [ id ( self ) ] = self
   def handle ( self , ** options ) :
 pass
 handlers [ name ] = handler
          return self . path == other . path
 return timezone . make_naive ( value , current_timezone )
   if self . empty_permitted and not self . has_changed ( ) :
 format = force_str ( default or get_format ( 'DATE_INPUT_FORMATS' ) [ 0 ] )
 if err_log :
                      resource = resource . decode ( settings . FILE_CHARSET )
                      return self . filter ( name , func , ** flags )
  while factor >= 0 :
   def __copy__ ( self ) :
  for location in format_locations :
    @ register . tag
 if isinstance ( context , Context ) :
              return x
 plural = [ ]
     class FileField ( Field ) :
          super ( SplitHiddenDateTimeWidget , self ) . __init__ ( attrs , date_format , time_format )
   get_method_function = operator . attrgetter ( _meth_func )
 oldroot [ RESULT ] = result
   if name == 'content-disposition' :
 self . number = number
    @ register . filter ( is_safe = True , needs_autoescape = True )
  loop_dict [ 'revcounter' ] = len_values - i
  hex_format_string = "%%0%ix" % ( hlen * 2 )
                  guessed_filename += ext
 self . waiting_readers = 0
 def combine ( cls , date , time ) :
               both_before = [  Tok ( "comment" , r"/\*(.|\n)*?\*/" ) ,  Tok ( "linecomment" , r"//.*?$" ) ,  Tok ( "ws" , r"\s+" ) ,  Tok ( "keyword" , literals ( """                            break case catch class const continue debugger                            default delete do else enum export extends                            finally for function if import in instanceof                            new return super switch this throw try typeof                            var void while with                            """ , suffix = r"\b" ) , next = 'reg' ) ,  Tok ( "reserved" , literals ( "null true false" , suffix = r"\b" ) , next = 'div' ) ,  Tok ( "id" , r"""                   ([a-zA-Z_$   ]|\\u[0-9a-fA-Z]{4})   # first char                   ([a-zA-Z_$0-9]|\\u[0-9a-fA-F]{4})*  # rest chars                   """ , next = 'div' ) ,  Tok ( "hnum" , r"0[xX][0-9a-fA-F]+" , next = 'div' ) ,  Tok ( "onum" , r"0[0-7]+" ) ,  Tok ( "dnum" , r"""                     (   (0|[1-9][0-9]*)     # DecimalIntegerLiteral                         \.                  # dot                         [0-9]*              # DecimalDigits-opt                         ([eE][-+]?[0-9]+)?  # ExponentPart-opt                     |                         \.                  # dot                         [0-9]+              # DecimalDigits                         ([eE][-+]?[0-9]+)?  # ExponentPart-opt                     |                         (0|[1-9][0-9]*)     # DecimalIntegerLiteral                         ([eE][-+]?[0-9]+)?  # ExponentPart-opt                     )                     """ , next = 'div' ) ,  Tok ( "punct" , literals ( """                          >>>= === !== >>> <<= >>= <= >= == != << >> &&                          || += -= *= %= &= |= ^=                          """ ) , next = "reg" ) ,  Tok ( "punct" , literals ( "++ -- ) ]" ) , next = 'div' ) ,  Tok ( "punct" , literals ( "{ } ( [ . ; , < > + - * % & | ^ ! ~ ? : =" ) , next = 'reg' ) ,  Tok ( "string" , r'"([^"\\]|(\\(.|\n)))*?"' , next = 'div' ) ,  Tok ( "string" , r"'([^'\\]|(\\(.|\n)))*?'" , next = 'div' ) ,  ]
          return six . text_type ( s ) . encode ( encoding , errors )
 if retval :
              handler . addQuickElement ( "description" , item [ 'description' ] )
                          out . write ( ' _(%s) ' % fmatch )
   out = self . compress ( clean_data )
  if value and hasattr ( value , "url" ) :
   def initial_form_count ( self ) :
  except ( OverflowError , ValueError ) :
              return o . isoformat ( )
  MEDIA_TYPES = ( 'css' , 'js' )
   elif issubclass ( klass , logging . handlers . SMTPHandler ) and 'mailhost' in config :
              self . add_library ( lib )
              self . regex = re . compile ( self . regex , self . flags )
 mapped_tokens = [ ]
              continue
              if parts [ - 1 ] in self . serialization_formats :
 _add_doc ( u , """Text literal""" )
 return len ( self . children )
          try :
 self . _regex_dict [ language_code ] = regex_compiled
  initial_set = set ( force_text ( value ) for value in self . prepare_value ( initial ) )
 def nodelist ( self ) :
                      config [ 'target' ] = self . config [ 'handlers' ] [ config [ 'target' ] ]
 from django . utils . encoding import force_str
  except AttributeError :
 self . __starttag_text = rawdata [ i : endpos ]
 special_floats = [ str ( pos_inf ) , str ( neg_inf ) , str ( nan ) ]
 for templatetag_module in templatetags_modules_candidates :
  if not hasattr ( func , '__name__' ) :
   def _make_parser ( self ) :
 from django . utils . six . moves . urllib . request import urlretrieve
  from django . conf import settings
                  if field != NON_FIELD_ERRORS and field not in self . fields :
   try :
                              try :
 if count != 0 :
 new_class . declared_fields = declared_fields
   def get_current_timezone ( ) :
  return result
 notifier . process_events ( )
    try :
 from django . utils . six . moves import socketserver
 self . COOKIES = { }
  except Exception as e :
                  return language [ : p ] . lower ( ) + '_' + language [ p + 1 ] . upper ( ) + language [ p + 2 : ] . lower ( )
          self . value = value
          val1 = self . var1 . resolve ( context , True )
          super ( ComboField , self ) . __init__ ( * args , ** kwargs )
                result = SimpleLazyObject ( self . _setupfunc )
  else :
 if sign in self . digits :
   def convert ( self , number , from_digits , to_digits , sign ) :
                      M = self . get ( key , Morsel ( ) )
       except Exception as e :
  except LookupError :
              base , ext = os . path . splitext ( base )
                          raise ValueError ( 'Unable to configure logger '  '%r: %s' % ( name , e ) )
                  lookup_view = get_callable ( lookup_view , True )
  internal_use_only = True
   def reverse ( self , lookup_view , * args , ** kwargs ) :
 simple_email_re = re . compile ( r'^\S+@\S+\.\S+$' )
 __ne__ = new_method_proxy ( operator . ne )
 from django . utils . encoding import force_text
 token = parser . next_token ( )
                      self . stdout . write ( self . style . MIGRATE_SUCCESS ( " OK" ) )
 __nonzero__ = new_method_proxy ( bool )
 if submod and not module_has_submodule ( import_module ( parentmod ) , submod ) :
 self . var = var_obj
    class Http404 ( Exception ) :
          output . extend ( custom_sql_for_model ( model , style , connection ) )
 @ stringfilter
                      suffix = d [ 'suffix' ]
   def external_entity_ref_handler ( self , context , base , sysid , pubid ) :
 self . _done = True
      return hmac . new ( key , msg = force_bytes ( value ) , digestmod = hashlib . sha1 )
  elif ch != 'P' :
                  bit = node
 value = field . clean ( value , initial )
  elif prefix != common_prefix :
    @ register . filter ( is_safe = False )
                      raise CommandError (  "errors happened while running msgattrib\n%s" % errors )
              kwargs [ 'label' ] = labels [ f . name ]
 from django . utils . crypto import constant_time_compare , salted_hmac
  escapejs = allow_lazy ( escapejs , six . text_type )
               palette . update ( PALETTES [ part ] )
 return
  return templatetags_modules
  if r . endswith ( '+00:00' ) :
                      m = base
  j = match . end ( )
 for f in fields :
     @ python_2_unicode_compatible
 d = get_deserializer ( format )
    outdict [ name ] = value , params
 from django . utils . translation import ugettext_lazy
              pass
  def readlines ( self ) :
              if isinstance ( sep , unicode ) :
                  handler . file . close ( )
      def get_urlconf ( default = None ) :
  try :
 return t . render ( context )
 if name :
  if id_ :
   def create_variable_node ( self , filter_expression ) :
                      new_result . append ( item + i_item )
 return tt . tm_isdst > 0
              if incremental :
 if isinstance ( s , Promise ) :
   def __repr__ ( self ) :
   return _localtime
              handler . addQuickElement ( "category" , "" , { "term" : cat } )
   else :
              end = len ( s )
   value = value . astimezone ( timezone )
 def wordwrap ( value , arg ) :
  from datetime import datetime , timedelta , tzinfo
                  with open ( filename , 'wb' ) as outfile :
   def widget_attrs ( self , widget ) :
  def add_arguments ( self , parser ) :
 if os . path . isfile ( fext ) :
    def parse_endtag ( self , i ) :
          return self . name
  else :
              migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )
      random = random . SystemRandom ( )
          result = copy . copy ( self )
 from django . utils . http import urlquote
   end = rawdata [ k : endpos ] . strip ( )
 for i , item in enumerate ( values ) :
   def list ( self ) :
          from django . conf import settings
          try :
     existing . sort ( )
 from django . utils . dateformat import format , time_format
  except ImportError :
          instance = super ( SortedDict , cls ) . __new__ ( cls , * args , ** kwargs )
    @ register . filter ( "escapejs" )
  if priority :
 for var in loopvars :
      return _trans . to_locale ( language )
          self . writer_enters ( )
              return None
                  try :
              ser_fmt = None
 self . keyOrder . remove ( result [ 0 ] )
  return not ( ( converter ( opts . db_table ) in tables ) or  ( opts . auto_created and converter ( opts . auto_created . _meta . db_table ) in tables ) )
                  raise ValueError ( 'Unknown level: %r' % level )
          return
  else :
 if p >= 0 :
                  args = match . groups ( )
      def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None ,  initial = None , error_class = ErrorList , label_suffix = None ,  empty_permitted = False , instance = None ) :
    def endChannelElement ( self , handler ) :
      def __html__ ( self ) :
  return list ( _serializers )
    def b64_encode ( s ) :
 self . write_items ( handler )
                   continue
     if not shown :
 cache [ key ] = result
   def __contains__ ( self , other ) :
 duplicate . render_context = copy ( self . render_context )
  try :
  def __repr__ ( self ) :
       _version = "2.0"
                              if not hasattr ( e , 'django_template_source' ) :
              output = self . filter_expression . resolve ( context )
   def check_for_migrations ( app_config , connection ) :
      return _trans . activate ( language )
 self . stdout . write ( "  all instances of the codebase have applied the migrations you squashed," )
 def time ( value , arg = None ) :
 return '' . join ( char2number . get ( c , c ) for c in phone . lower ( ) )
 def escapejs_filter ( value ) :
                  self . stdout . write ( self . style . MIGRATE_HEADING ( "Migrations for '%s':" % app_label ) + "\n" )
      def write_pot_file ( potfile , msgs ) :
              response . streaming_content = [ ]
 if expires is not None :
     return OrderedDict ( fields )
 def __prepare_class__ ( cls ) :
                  value = value [ 1 : - 1 ]
   def flatatt ( attrs ) :
 if field . rel . through . _meta . auto_created :
      status_code = 301
 for bytes in stream :
  return ':' . join ( ret_ip )
  singular_suffix , plural_suffix = bits [ : 2 ]
      setattr ( _MovedItems , attr . name , attr )
          lang = None
 PATTERN = """     classdef< 'class' any+ ':'               suite< any*                      funcdef< 'def' unifunc='__unicode__'                               parameters< '(' NAME ')' > any+ >                      any* > >     """
                  error_text = str ( e )
 orig_vars . pop ( '__weakref__' , None )
 try :
 if headerlist is not None :
  from __future__ import unicode_literals
 return VerbatimNode ( nodelist . render ( Context ( ) ) )
              raise TemplateSyntaxError ( "Invalid syntax in widthratio tag. Expecting 'as' keyword" )
 for field in self . fields . values ( ) :
  if cache_timeout < 0 :
 return filenames
    def validate_host ( host , allowed_hosts ) :
      help = 'Discover and run tests in the specified modules or the current directory.'
  emitting = chunk [ : remaining ]
          del _active . value
   if self . META . get ( 'CONTENT_TYPE' , '' ) . startswith ( 'multipart/form-data' ) :
                              raise ValueError ( 'No handler found with '  'name %r' % name )
              return s . decode ( 'utf-8' , errors ) . encode ( encoding , errors )
 import re
                  assert remaining > 0 , 'remaining bytes to read should never go negative'
from __future__ import unicode_literals
  return cookiedict
                  return self . filter_function ( func , ** flags )
                  return None
 class BoundField ( object ) :
              context [ self . asvar ] = result
from django . conf import settings
 self . _namespace_dict = { }
                   url_fields [ 0 ] = 'http'
 ns_pattern = ''
 self . validate ( out )
                  return pgettext_lazy ( self . message_context , value )
 def byte2int ( bs ) :
 is_localized = False
  elif char == '\\' :
 return getattr ( module , self . attr )
          from django . conf import settings
  return field . to_python
 sql_files = [ ]
from __future__ import unicode_literals
          from django . template . debug import DebugLexer , DebugParser
 from django . utils . translation import ugettext as _
 def load ( parser , token ) :
  def add_arguments ( self , parser ) :
                          raise
 if domain == 'djangojs' and file_ext in command . extensions :
              self . stdout . write ( "Extracting %s\n" % filename )
                  fields = list ( six . iteritems ( base . base_fields ) ) + fields
  return '%s %s %s' % (   _ ( ', ' ) . join ( force_text ( i ) for i in list_ [ : - 1 ] ) ,  force_text ( last_word ) , force_text ( list_ [ - 1 ] ) )
 cache . set ( cache_key , headerlist , cache_timeout )
  if flags is not None :
 return other_dict
    return self . _post , self . _files
 message_context = context_match . group ( 1 )
 from functools import wraps
  return True
 if s == '"' :
              self . validators . append ( validators . MinValueValidator ( min_value ) )
  return six . text_type ( name )
              result = factory ( ** kwargs )
  return RequestContext ( self . _request , context , current_app = self . _current_app )
              return True
   if six . PY3 :
 self . write_items ( handler )
 from django . utils . timezone import get_default_timezone , is_aware , is_naive
          super ( SortedDict , self ) . clear ( )
          self . app_or_project = app_or_project
   def extend_nodelist ( self , nodelist , node , token ) :
 max_width = int ( self . max_width . resolve ( context ) )
 @ stringfilter
  except Exception :
 app . start ( )
              initial = [ ]
 return '%s. You passed in %r (%s)' % ( original , self . obj ,  type ( self . obj ) )
                      signal . signal ( signal . SIGTTOU , old_handler )
 return phone2numeric ( value )
 return id_
              ip_address = literal_match . group ( 1 )
              settings . configure ( USE_I18N = True )
         @ register . filter ( is_safe = False )
  except IndexError :
    def get_current_timezone_name ( ) :
  subclass = type ( "Migration" , ( Migration , ) , {  "dependencies" : [ ( app_label , migration . name ) for migration in merge_migrations ] ,  } )
    context [ self . var_name ] = [  { 'grouper' : key , 'list' : list ( val ) }  for key , val in  groupby ( obj_list , lambda obj : self . resolve_expression ( obj , context ) )  ]
 import os
 from __future__ import unicode_literals
 parser . add_argument ( '--failfast' ,  action = 'store_true' , dest = 'failfast' , default = False ,  help = 'Tells Django to stop running the test suite after first '  'failed test.' ) ,
              return lookup_view
   old_field_name = None
                      out . write ( '# %s' % ' | ' . join ( lineno_comment_map [ comment_lineno_cache ] ) )
  sign , digittuple , exponent = value . as_tuple ( )
  if self . addr :
  if dklen > ( 2 ** 32 - 1 ) * hlen :
  import warnings
                  self . stdout . write ( "Cleaning up temporary files.\n" )
 self . extend_nodelist ( nodelist , var_node , token )
  res = subject [ p : i ]
    parts = config_string . lower ( ) . split ( ';' )
  if bytes < KB :
 if _time . daylight :
 from django . utils . functional import allow_lazy
 bits = token . split_contents ( )
   def validate_number ( self , number ) :
   @ property
  if isinstance ( message , SafeData ) :
          duplicate = super ( Context , self ) . __copy__ ( )
  urlunquote_plus = allow_lazy ( urlunquote_plus , six . text_type )
                      self . stdout . write ( errors )
  elif args [ - 2 ] == "as" :
     def _has_changed ( self , initial , data ) :
 self . _pk_field = pk = self . model . _meta . pk
                  return True
    for p in path :
     def configure_handler ( self , config ) :
  pdict [ name ] = value
  delattr ( self . _wrapped , name )
                  end_index = i
 for k , v in data . items ( ) :
 flags = 0
          parser . add_argument ( 'addrport' , nargs = '?' ,  help = 'Optional port number, or ipaddr:port' )
          field_dict = OrderedDict (  [ ( f , field_dict . get ( f ) ) for f in fields  if ( ( not exclude ) or ( exclude and f not in exclude ) ) and ( f not in ignored ) ]  )
 form = self . form ( ** defaults )
   try :
 return initial_value != data_value
 return any ( form . has_changed ( ) for form in self )
          reloader = python_reloader
 return result
 from django . utils . safestring import mark_safe
              for key , value in parse_qsl ( query_string or '' ,  keep_blank_values = True ) :
   def unsign ( self , signed_value ) :
   def run ( self , ** options ) :
      help = "Prints the DROP INDEX SQL statements for the given model module name(s)."
 time_str = date . strftime ( '%s, %%d %s %%Y %%H:%%M:%%S ' % ( dow , month ) )
          return value
     def is_library_missing ( name ) :
              value = '1'
  filename = os . path . join ( to_path , name )
 with open ( writer . path , "wb" ) as fh :
    def to_python ( self , value ) :
 block . context = context
          return b'' . join ( self . _container )
 self . backout = [ ]
   class Command ( TemplateCommand ) :
     def resolve ( self , context ) :
 super ( WSGIServer , self ) . server_bind ( )
 if css_classes :
          for dict_ in self . dicts :
  try :
              raise TemplateSyntaxError ( 'The %r option was specified more '  'than once.' % option )
 _empty_value = None
  if colors and colors [ - 1 ] in color_names :
              raise StopIteration ( )
   def remove_tags ( html , tags ) :
              digest = hashlib . sha256
  return _wrapped_view
  return SafeString ( str ( s ) )
  return value
                  f . process ( self , self . domain )
   raise ImportError
 if not os . path . exists ( potfile ) :
   def __iter__ ( self ) :
  elif args [ 1 ] [ 0 ] == '4' :
 self . stdout . write ( "  you can delete them." )
   def __copy__ ( self ) :
 if leading :
  options [ k . lower ( ) ] = v
 inner_html = '<li>{choice_value}{sub_widgets}</li>'
   if TYPE == RAW :
              rawdata = self . rawdata
      choice_input_class = RadioChoiceInput
   def keys ( self ) :
 from wsgiref import simple_server
                              cursor . execute ( statement )
 if value in self . empty_values :
          if initial is None :
  else :
      from pkg_resources import resource_string
              self . stream = six . StringIO ( stream_or_string )
 substitutions [ 'clear_checkbox_id' ] = conditional_escape ( checkbox_id )
 return ''
      from importlib import import_module
            args [ 1 : 2 ] = [ '"%s"' % arg for arg in args [ 1 ] . split ( "," ) ]
   else :
   def close ( self ) :
                  raise ValueError ( "Could not find common ancestor of %s" % migration_names )
  except TypeError as te :
                  content = ''
  want_unicode = False
  for path_to_remove in self . paths_to_remove :
              mtime -= stat . st_ctime
 if self . _is_rendered :
  elif cmatches :
              return False
          if data :
          return force_str ( self . _tzname )
          if self . _wrapped is empty :
                  default_list = [ ]
                  try :
          sep = len ( hextet [ 0 ] . split ( ':' ) ) + len ( hextet [ 1 ] . split ( ':' ) )
              if kwargs :
          value = dict . get ( self , key , default )
    EndToken = EndToken ( )
              yield 'day'
              raise MultiPartParserError ( 'Invalid boundary in multipart: %s' % boundary )
 key += kwd_mark
 message = _ ( 'Ensure this value is %(limit_value)s (it is %(show_value)s).' )
   if not hasattr ( callback , '__name__' ) :
  else :
  t = getattr ( _active , "value" , None )
          super ( StreamingHttpResponse , self ) . __init__ ( * args , ** kwargs )
          def int2byte ( i ) :
              potfile = os . path . join ( path , '%s.pot' % str ( self . domain ) )
     class Template ( object ) :
  except ( KeyError , AttributeError ) as exc :
  encoded = encoded . replace ( ";" , "\\073" ) . replace ( "," , "\\054" )
                      filemsg = ''
               obj = super ( klass , cls ) . __new__ ( cls )
 self . interactive = options . get ( 'interactive' )
                  raise RawPostDataException ( "You cannot access body after reading from request's data stream" )
          iterator = iter ( stream_or_iterable )
 return self . filter ( name , func , ** flags )
  return original_urlencode (  [ ( force_str ( k ) ,  [ force_str ( i ) for i in v ] if isinstance ( v , ( list , tuple ) ) else force_str ( v ) )  for k , v in query ] ,  doseq )
              del moves . __dict__ [ name ]
                  self . test_runner = arg [ len ( option ) : ]
 ns_pattern = ns_pattern + extra
 options . update ( kwargs )
  super ( SortedDict , self ) . __setitem__ ( key , value )
  return False
 six . reraise ( ImportError , ImportError ( msg ) , sys . exc_info ( ) [ 2 ] )
              raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
 self . deactivate = deactivate
   class UTC ( tzinfo ) :
              cursor . close ( )
              raise TemplateSyntaxError ( "'%s' is not a valid tag library: %s" %  ( taglib , e ) )
  else :
                return ( self . __newobj__ , ( self . __class__ , ) , self . __getstate__ ( ) )
from __future__ import unicode_literals
    def get_max_age ( response ) :
                      result . extend ( [ result [ - 1 ] ] * ( count - 1 ) )
              number = str ( number ) [ 1 : ]
     class DecimalField ( IntegerField ) :
          if self . timezone is None :
 if ext :
 self . html_initial_name = form . add_initial_prefix ( name )
   def parse ( self ) :
  if hasattr ( get_git_changeset , 'cache' ) :
              self . validators . remove ( self . _regex_validator )
  ngettext_lazy = ngettext
     def get_valid_filename ( s ) :
                  break
  except InvalidTemplateLibrary as e :
 raise NotImplementedError ( 'subclasses of LazyObject must provide a _setup() method' )
   def get_wsgi_application ( ) :
                  w = self . choice_input_class ( self . name , self . value ,  self . attrs . copy ( ) , choice , i )
 if app_path is None :
 @ stringfilter
                  self . queryset . filter ( ** { key : pk } )
 if imatch . group ( 2 ) :
   def reset ( self ) :
          self . func = func
  except UnicodeDecodeError :
           return host , ''
 def _new_instance ( cls , children = None , connector = None , negated = False ) :
                httpd . daemon_threads = True
  if self . feed [ 'language' ] is not None :
 if len ( value ) >= 2 and value [ : 1 ] == value [ - 1 : ] == b'"' :
 if value is not result :
          try :
     class TimestampSigner ( Signer ) :
                      break
  self . cdata_tag = tag . lower ( )
 if hasattr ( cls , k ) :
    if item [ 'item_copyright' ] is not None :
   def reraise ( tp , value , tb = None ) :
    def patch_vary_headers ( response , newheaders ) :
              parse_until = [ ]
 self . orphans = int ( orphans )
           current_fields = [ ]
   def to_python ( self , value ) :
 for loader_name in settings . TEMPLATE_LOADERS :
              self . choices = [ ( "" , "---------" ) ]
 obj = field . rel . to . _default_manager . db_manager ( self . db ) . get_by_natural_key ( * field_value )
 raise NoReverseMatch ( "Reverse for '%s' with arguments '%s' and keyword "  "arguments '%s' not found. %d pattern(s) tried: %s" %  ( lookup_view_s , args , kwargs , len ( patterns ) , patterns ) )
    def __copy__ ( self ) :
 def linebreaksbr ( value , autoescape = None ) :
  else :
   def ngettext ( singular , plural , number ) :
 from django . utils import six
      from UserList import UserList
                      value = field . clean ( value )
 if conflicts and not self . merge :
              obj = self . _new_instance ( self . children , self . connector ,  self . negated )
                      translated = translated % rhs
              kwargs [ 'widget' ] = widgets [ f . name ]
 if len ( bits ) not in ( 2 , 3 ) :
  else :
              ch2 = None
 if not _serializers :
 template = self . resolve_template ( self . template_name )
  except Exception :
 if autoescape :
  bits = arg . split ( ',' )
   return '\n' . join ( output )
                              raise VariableDoesNotExist ( "Failed lookup for key "  "[%s] in %r" ,  ( bit , current ) )
  if hasattr ( self , '_post' ) :
              self . attrs = attrs . copy ( )
  except ImportError :
import warnings
  try :
   if item [ 'description' ] is not None :
          return value
   def G ( self ) :
  import os
from __future__ import absolute_import
      def __init__ ( self , s ) :
 func . __doc__ = doc
 d = d [ n ]
              msg = (  "The included urlconf '{name}' does not appear to have any "  "patterns in it. If you see valid patterns in the file then "  "the issue is probably caused by a circular import."  )
 parser . add_argument ( '--domain' , '-d' , default = 'django' , dest = 'domain' ,  help = 'The domain of the message files (default: "django").' )
  func = TemplateLoader
 try :
   def exit_command ( self ) :
 if isinstance ( s , bytes ) :
 iterkeys = _iterkeys
 import sys
                    import rlcompleter
              for widget in self . widgets :
              settings . configure ( )
          fn = inotify_code_changed
                  m2m_value = lambda value : value . natural_key ( )
              return self . filters [ filter_name ]
  try :
   @ property
          yield self
 return filter_func
    def dict ( self ) :
 self . dicts [ - 1 ] [ key ] = value
          if value is None :
  except ImportError as e :
  if not self . _populated :
    class DeclarativeFieldsMetaclass ( MediaDefiningClass ) :
   activate = lambda x : None
          for d in reversed ( self . dicts ) :
    def npath ( path ) :
 self . args_check ( filter_name , filter_func , args )
     def prepare_js_for_gettext ( js ) :
          raise TemplateSyntaxError ( "'%s' takes at least one argument"  " (path to a view)" % bits [ 0 ] )
  return nodes
 if lib :
                      compiled_result = compile_func ( self , token )
                   self . literal = float ( var )
  last = max ( 0 , end - 1 )
  self . feed . update ( kwargs )
                      if self . verbosity > 1 :
          prefix += '/'
 try :
 binary_type = bytes
                          errors . append ( field . error_messages [ 'incomplete' ] )
          return "<IfNode>"
 if match :
                  offset = - offset
          self . STDOFFSET = timedelta ( seconds = - _time . timezone )
 bits = token . split_contents ( )
      return _trans . get_language_from_request ( request , check_path )
              arg_vals = [ ]
 return field . widget . value_from_datadict ( self . data , self . files , prefix )
 def __new__ ( cls , name , this_bases , d ) :
  return Truncator ( value ) . chars ( length , html = True )
              if not isinstance ( data , basestring ) :
  return attrs
  else :
 if s [ 0 ] not in "\"'" or s [ - 1 ] != s [ 0 ] :
    unused_char = self . _stream . read ( 1 )
 if six . PY2 and isinstance ( rawdata , six . text_type ) :
    @ lru_cache . lru_cache ( maxsize = 1000 )
  if errors :
              prefix , rest = self . split_leading_dir ( path )
   i += 1
 upto = start
          return '\x1b[%sm' % RESET
          self . msg = msg
   return response
      if isinstance ( number , int ) :
          compiled_parent = self . get_parent ( context )
          return time_str + 'Z'
 from django . utils . safestring import mark_safe
 raise NotImplementedError ( 'subclasses of SyndicationFeed must provide a write() method' )
 klass . __str__ = lambda self : self . __unicode__ ( ) . encode ( 'utf-8' )
  else :
   def __copy__ ( self ) :
          length = int ( arg )
  return value
 widget = self . field . widget
               if hasattr ( base , 'declared_fields' ) :
 if '()' in config :
 self . month_none_value = self . none_value
                      self . keyOrder . append ( key )
 handler . startDocument ( )
 week_number = j // 7
 @ stringfilter
          return ''
 if self . show_traceback :
   class Module_six_moves_urllib_parse ( _LazyModule ) :
 loop_dict [ 'revcounter0' ] = len_values - i - 1
              self . full_clean ( )
  setattr ( self . _wrapped , name , value )
    if six . PY2 :
               if opts . fields is None and opts . exclude is None :
    def cache_info ( ) :
 def __init__ ( self , attrs = None ) :
   def css_classes ( self , extra_classes = None ) :
 if version [ 3 ] == 'alpha' and version [ 4 ] == 0 :
 from __future__ import unicode_literals
  def __init__ ( self , * args , ** kwargs ) :
  else :
   def gettext ( message ) :
 from email . utils import formatdate
  if plen < ( alen - dlen ) or plen > alen :
  else :
 return result
   def back ( self ) :
     def Deserializer ( stream_or_string , ** options ) :
              raise InputStreamExhausted ( )
 import struct
                  data = data ( )
      try :
    self . base_fields [ MIN_NUM_FORM_COUNT ] = IntegerField ( required = False , widget = HiddenInput )
 def forms ( self ) :
          self . _archive = self . _archive_cls ( file ) ( file )
                  closable . close ( )
 parser . add_argument ( '--nothreading' , action = 'store_false' , dest = 'use_threading' , default = True ,  help = 'Tells Django to NOT use threading.' )
               context . render_context [ self ] = itertools_cycle ( self . cyclevars )
              raise ValidationError ( self . error_messages [ 'list' ] , code = 'list' )
      error_class = ValueError
 self . _errors = ErrorDict ( )
  return sign + int_part + dec_part
  import re
   def clean ( self , value ) :
 token = parser . next_token ( )
              media = media + w . media
          return False
 def __init__ ( self , token , parser ) :
          from django . db . models . fields . related import RelatedObject
                  raise CommandError (  "Multiple fixtures named '%s' in %s. Aborting." %  ( fixture_name , humanize ( fixture_dir ) ) )
              if options [ 'plain' ] :
  return self . _get_page ( self . object_list [ bottom : top ] , number , self )
 remaining_bits = bits [ 1 : ]
              raise AttributeError ( attr )
 for post_callback in self . _post_render_callbacks :
              output . extend ( f . post_create_sql ( style , model . _meta . db_table ) )
 chunks = [ ]
              return
   def luhn ( candidate ) :
 if not self . timezone :
  self . cache_choices = cache_choices
   creation_counter = 0
 for cnt , digit in enumerate ( int_part [ : : - 1 ] ) :
  result = super ( DateTimeField , self ) . to_python ( value )
 from django . utils . six . moves . urllib . parse import quote
  except AttributeError :
 mtime = stat . st_mtime
   def handle ( self , app_or_project , name , target = None , ** options ) :
          return super ( type ( dt ) , dt ) . strftime ( fmt )
          print ( "Can't import flup." + flup_module )
 self . localized_fields = getattr ( options , 'localized_fields' , None )
     if self . asvar :
   def __nonzero__ ( self ) :
              package_name = package . __name__
          if isinstance ( self . urlconf_name , list ) and len ( self . urlconf_name ) :
    def cookie_date ( epoch_seconds = None ) :
 obj = Node ( connector = self . connector , negated = self . negated )
              raise ContentNotRenderedError ( 'The response content must be '  'rendered before it can be iterated over.' )
          path = [ path ]
  def compile_func ( parser , token ) :
   new_class . base_fields = fields
 raise NotImplementedError ( 'subclasses of Serializer must provide a start_serialization() method' )
                          answer = answer [ 0 ] . lower ( )
      help = "Returns a list of the SQL statements required to return all tables in the database to the state they were in just after they were installed."
              formfield = self . fields [ field_name ]
 return etags
          super ( JsLexer , self ) . __init__ ( self . states , 'reg' )
   def copy ( self ) :
 decimal_separator = get_format ( 'DECIMAL_SEPARATOR' )
   def render_css ( self ) :
              name = p [ : i ] . strip ( ) . lower ( ) . decode ( 'ascii' )
              item , old_style_list = convert_old_style_list ( sublist )
                              if isinstance ( val , tuple ) :
   return result
 words [ i ] = mark_safe ( '%s%s%s' % ( lead , middle , trail ) )
              output = self . _leftover
    return exclude
     _localtime = None
  except ( AttributeError , TypeError ) :
  modules = _format_modules_cache . setdefault ( lang , list ( iter_format_modules ( lang , settings . FORMAT_MODULE_PATH ) ) )
  return results
 COMMENT_TAG_END = '#}'
 if unpack :
  form . fields [ self . _pk_field . name ] = ModelChoiceField ( qs , initial = pk_value , required = False , widget = widget )
 for bit in tag_re . split ( self . template_string ) :
              if status != STATUS_OK :
  if filename . endswith ( extensions ) or filename in extra_files :
                if tok . startswith ( "'" ) :
 import operator
                      self . _js . append ( path )
 return result
    class HttpResponseNotFound ( HttpResponse ) :
 from django . conf import settings
          memoryview = buffer
 buffer_types = ( bytes , bytearray , memoryview )
   def make_writeable ( self , filename ) :
          if key not in self :
 from django . utils . timezone import get_current_timezone_name
          for name , block in six . iteritems ( blocks ) :
     class HttpResponseGone ( HttpResponse ) :
    def has_key ( self , key ) :
 if _localtime is None :
                      pk_value = None
          return locale [ : p ] . lower ( ) + '-' + locale [ p + 1 : ] . lower ( )
     if self . __language == settings . LANGUAGE_CODE or self . __language == "en-us" :
  for cat in self . feed [ 'categories' ] :
 if not hasattr ( parser , '_namedCycleNodes' ) :
 from django . core . management . base import BaseCommand
   def __bytes_cast ( self ) :
   def render_options ( self , choices , selected_choices ) :
    return '' . join ( _generator ( ) )
              continue
   if consume_next :
                              value = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
                               oldroot = root
   directory_created [ app_label ] = True
                  result . parent = self
                  year += 2000
 return
                      help_text = help_text_html % force_text ( field . help_text )
                      self . stdout . write ( self . style . MIGRATE_SUCCESS ( " FAKED" ) )
               ttl = force_text ( ttl )
  from __future__ import unicode_literals
              _mtimes = { }
              fp . write ( msgs )
    def _long_to_bin ( x , hex_format_string ) :
    def get_language_bidi ( ) :
                  if self . asvar is None :
   self . year_none_value = ( 0 , empty_label [ 0 ] )
  else :
              self . _encoding = settings . DEFAULT_CHARSET
  elif getattr ( current , 'alters_data' , False ) :
 from django . test . utils import get_runner
   def popen_wrapper ( args , os_err_exc_type = CommandError ) :
  output = [ ]
           logging_config_func = import_string ( logging_config )
 self . can_write = threading . Semaphore ( 0 )
    def decorator_from_middleware_with_args ( middleware_class ) :
  existing . remove ( name )
    raise CommandError ( "couldn't handle %s template %s." %  ( self . app_or_project , template ) )
 if cls . _delegate_text :
              import_module ( project_name )
                      cls . __str__ = cls . __bytes_cast
   def __getstate__ ( self ) :
              continue
    @ register . tag
  def add_arguments ( self , parser ) :
   def _iteritems ( self ) :
 yield buf . read ( )
 return self . _urlconf_module
      pass
      return _trans . get_language ( )
    def code_changed ( ) :
                  token = "not in"
 import warnings
 result_args = new_args
                  values = list ( values )
  except IndexError :
     class DateTimeField ( BaseTemporalField ) :
   def clear_cdata_mode ( self ) :
        def __getstate__ ( self ) :
  else :
 from django . core import signing
               self . tags [ name ] = compile_function
      def __init__ ( self , tokens ) :
 self . _boundary = boundary
   def get_templatetags_modules ( ) :
      class BaseModelFormSet ( BaseFormSet ) :
  def _generator ( ) :
      widget = TimeInput
              raise TemplateSyntaxError ( "expected another tag, found "  "end of string: %s" % subject )
                  pk_value = form . instance . pk
  if old_style_list :
              nodes . extend ( node . get_nodes_by_type ( nodetype ) )
              doublecolon_len += 1
   def add_js ( self , data ) :
  elif auto_id :
  else :
              return self . as_widget ( ) + self . as_hidden ( only_initial = True )
 self . indent ( 2 )
   def urlquote ( url , safe = '/' ) :
   @ register . filter ( is_safe = True )
              self . _current [ field . name ] = str ( getattr ( obj , field . name ) )
              raise CommandError ( 'Your Python does not support IPv6.' )
                  week_number = 52
              raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
   def __len__ ( self ) :
 self . _errors = None
          super ( DebugParser , self ) . __init__ ( lexer )
   else :
     if not url_info . netloc and url_info . scheme :
  regex = re_words if words else re_chars
  @ wraps ( func )
        def is_aware ( value ) :
 import sys
  except ValueError :
 return form . cleaned_data . get ( DELETION_FIELD_NAME , False )
              for item_type , meta_data , field_stream in Parser ( stream , self . _boundary ) :
 return datetime . datetime ( ** kw )
                  self . extend_nodelist ( nodelist , TextNode ( token . contents ) , token )
          return None
   def create_var ( self , value ) :
                  handler . addQuickElement ( "uri" , item [ 'author_link' ] )
   def prepare_value ( self , value ) :
  loader = MigrationLoader ( connection )
   from django . conf import settings
                      raise
 BytesIO = io . BytesIO
          return ''
 for operation in migration . operations :
                      self . stdout . write ( self . style . MIGRATE_SUCCESS ( " OK" ) )
      import termios
                              obj = field . rel . to . _default_manager . db_manager ( db ) . get_by_natural_key ( * field_value )
      def _curried ( * moreargs , ** morekwargs ) :
     return URLNode ( viewname , args , kwargs , asvar )
      try :
  else :
                  result . append ( ch )
                              name . append ( ch )
      if self . verbosity > 0 :
          cleaned = self . clean ( value )
      def addQuickElement ( self , name , contents = None , attrs = None ) :
 return re . sub ( r'&(?:\w+|#\d+);' , '' , force_text ( value ) )
      return _trans . get_language_from_path ( path )
 try :
      @ decorator
  finally :
  import importlib
          attrs = super ( DecimalField , self ) . widget_attrs ( widget )
          self . format_string = format_string
                 kwargs = match . groupdict ( )
  else :
   def __deepcopy__ ( self , memo ) :
              return match . group ( 0 )
   with io . open ( potfile , 'w' , encoding = 'utf-8' ) as fp :
 def get_callable ( lookup_view , can_fail = False ) :
 if not name :
                  cur_lineno = t . lineno + t . contents . count ( '\n' )
    def reverse ( viewname , urlconf = None , args = None , kwargs = None , prefix = None , current_app = None ) :
          if self . _wrapped is empty :
  from django . forms . widgets import Widget , Select
  return format_html ( '<option value="{0}"{1}>{2}</option>' ,  option_value ,  selected_html ,  force_text ( option_label ) )
                  widget_value = None
  from django . core . management . base import BaseCommand
 import sys
  if isinstance ( value , datetime . datetime ) :
 filters = [ ]
           replacement = _BROWSERS_DEPRECATED_LOCALES . get ( lang_code )
    def do_translate ( message , translation_function ) :
          handler . addQuickElement ( "title" , item [ 'title' ] )
          secret = settings . SECRET_KEY
      def add_css ( self , data ) :
 changes = autodetector . changes ( graph = executor . loader . graph )
  return Truncator ( value ) . words ( length , html = True , truncate = ' ...' )
 if os . path . isfile ( f ) :
 interactive = options . get ( 'interactive' )
 parser . add_argument ( '--no-initial-data' , action = 'store_false' , dest = 'load_initial_data' , default = True ,  help = 'Tells Django not to load any initial data after database synchronization.' )
 os . rmdir ( tmpdir )
                      if set ( kwargs . keys ( ) ) | set ( defaults . keys ( ) ) != set ( params ) | set ( defaults . keys ( ) ) | set ( prefix_args ) :
          attrs = super ( FloatField , self ) . widget_attrs ( widget )
  _mtimes = { }
      kwargs [ 'strm' ] = kwargs . pop ( 'stream' )
          return value
 return supported
 from django . utils . html import format_html
from django . http import HttpResponse
  errors = [ ]
                  cls . __dispatch [ resultclass ] = { }
   else :
  def add_arguments ( self , parser ) :
 if jan1_weekday > 4 :
 sortable_virtual_fields = [ f for f in opts . virtual_fields  if isinstance ( f , ModelField ) ]
          return VariableNode ( filter_expression )
   if _cookie_encodes_correctly and _cookie_allows_colon_in_names :
  if not locale_dir :
  else :
                      old_handler = signal . signal ( signal . SIGTTOU , signal . SIG_IGN )
              new_ip . append ( '0000' )
    def __ne__ ( self , other ) :
  if item_type == FIELD :
   work_file = os . path . join ( self . dirpath , thefile )
                              locale_dir = path
 new_method_name = renamed_method [ 1 ]
                          continue
              value = var . resolve ( context , True )
          return LANG_INFO [ lang_code ]
 return WEEKDAYS [ self . data . weekday ( ) ]
  elif template_tuple is None :
   Model = self . _get_model_from_node ( node , "model" )
                          raise ValueError ( 'Unable to configure root '  'logger: %s' % e )
     class Promise ( object ) :
 from django . utils . translation import get_language
              return from_current_timezone ( value )
          if self . callback ( record ) :
    finally :
          parsed = urlparse ( force_text ( redirect_to ) )
  elif self . _meta . exclude and field in self . _meta . exclude :
  except ImportError :
  write ( end )
            context [ self . var_name ] = obj
 def cycle ( parser , token ) :
  else :
                          return self . __dispatch [ t ] [ funcname ] ( res , * args , ** kw )
 super ( TypedChoiceField , self ) . __init__ ( * args , ** kwargs )
 global _translations
 return result
 return duplicate
   def __repr__ ( self ) :
          return ''
 handler . addQuickElement ( "link" , "" , { "rel" : "alternate" , "href" : self . feed [ 'link' ] } )
          pass
              if bits [ 0 ] != 'and' :
   mod_name , func_name = get_mod_func ( lookup_view )
      input_type = 'text'
 subject = self . subject
 self . dicts = dicts
 from django . core . signals import request_finished
   def __dir__ ( self ) :
  return self . __cast ( ) < other
      advance_iterator = next
              source , display_name = loader ( name , dirs )
              yield
  from . base import CommandError
 call_command ( "migrate" , ** options )
              if default is not RAISE_ERROR :
          if can_fail :
   def tag ( self , name = None , compile_function = None ) :
   def serialize ( self ) :
  if response . has_header ( 'Vary' ) :
          return any ( w . needs_multipart_form for w in self . widgets )
          _ExpatParser . __init__ ( self , * args , ** kwargs )
  sign = '-' if offset < 0 else '+'
          handler = SimplerXMLGenerator ( outfile , encoding )
              if field . _has_changed ( field . to_python ( initial ) , data ) :
 class Operator ( TokenBase ) :
          if value in self . empty_values :
   if self . verbosity >= 1 :
          escaper = lambda x : x
 sublist = ''
 form . _errors [ NON_FIELD_ERRORS ] = self . error_class ( [ self . get_form_error ( ) ] )
          return ''
              return result
      input_type = 'number'
 try :
 capfirst = allow_lazy ( capfirst , six . text_type )
                  nodes . extend ( nodelist . get_nodes_by_type ( nodetype ) )
                      import logging . handlers
 raise CommandError ( "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'" % name_str )
     @ python_2_unicode_compatible
 from django . template . base import TemplateDoesNotExist
 __Y2 = r'(?P<year>\d{2})'
  if ttl is not None :
    delta = delta + datetime . timedelta ( seconds = 1 )
  except InvalidTemplateLibrary as e :
   except KeyError :
  if not data and initial :
              if hasattr ( base , 'declared_fields' ) :
              deactivate ( )
      def get_quantifier ( ch , input_iter ) :
    class HttpResponseNotAllowed ( HttpResponse ) :
   try :
    return force_bytes ( value , self . _charset )
          super ( DateTimeBaseInput , self ) . __init__ ( attrs )
   return data . get ( name , None )
    except StopIteration :
 from django . utils . translation import ugettext_lazy as _ , ugettext
  except ( ValueError , TypeError ) :
                  break
  try :
          return not ( self == other )
 return '\n' . join ( statements )
                          handler = self . configure_handler ( handlers [ name ] )
     class Input ( Widget ) :
 sql_statements = executor . collect_sql ( plan )
          module = _import_module ( self . mod )
  else :
          is_dst = False if dt is None else self . _isdst ( dt )
              yield widget
    return out . getvalue ( )
 from django . utils . module_loading import import_string
  self . new_objects . append ( self . save_new ( form , commit = commit ) )
  if s_len > length :
   def create_nodelist ( self ) :
              if len ( app_labels ) == 1 :
 self . find_template_cache . clear ( )
               self . json_kwargs [ 'separators' ] = ( ',' , ': ' )
              flat . update ( d )
 return ( source , make_origin ( display_name , loader , name , dirs ) )
          wsgi_opts [ 'bindAddress' ] = options [ "socket" ]
    for f in fields :
 if not m :
          return node . render ( context )
   default_error_messages = {  'invalid_choice' : _ ( 'Select a valid choice. That choice is not one of'  ' the available choices.' ) ,  }
 ch , escaped = next ( pattern_iter )
      else :
   def __delitem__ ( self , key ) :
   else :
 clean = lambda self , x : len ( x )
    class TimeInput ( DateTimeBaseInput ) :
 self . _changed_data = None
 if ( ( context . autoescape and not isinstance ( value , SafeData ) ) or  isinstance ( value , EscapeData ) ) :
  phone2numeric = allow_lazy ( phone2numeric )
      if urlconf is None :
    def check_for_language ( lang_code ) :
  except ValueError :
  return self . field . prepare_value ( data )
  return normpath ( path )
              path = join ( os . getcwdu ( ) , path )
    else :
  return _curried
              self . label = self . field . label
          self . form = form
  self . backout . append ( self . pointer )
   def value_from_datadict ( self , data , files , name ) :
   class Choice ( list ) :
     def _clean_form ( self ) :
  WEEKDAYS_ABBR = {  0 : _ ( 'Mon' ) , 1 : _ ( 'Tue' ) , 2 : _ ( 'Wed' ) , 3 : _ ( 'Thu' ) , 4 : _ ( 'Fri' ) ,  5 : _ ( 'Sat' ) , 6 : _ ( 'Sun' )  }
              return default
 if options :
   def handle_app_config ( self , app_config , ** options ) :
                  newretval = post_callback ( retval )
              if cleaned_data is not None :
   path , module = name . rsplit ( '.' , 1 )
                  try :
              if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) :
 if node . hasAttribute ( 'pk' ) :
                      date_value = datetime . date ( int ( y ) , int ( m ) , int ( d ) )
  output_transaction = True
    sequence = parser . compile_filter ( bits [ in_index + 1 ] )
  if len ( bits ) == 3 :
  count = property ( _get_count )
              raise BadSignature ( 'No "%s" found in value' % self . sep )
  request_started = Signal ( )
    def _generate_cache_key ( request , method , headerlist , key_prefix ) :
          for line in text . splitlines ( True ) :
 from django . utils . deprecation import RemovedInDjango20Warning
              raise ImportError (  "Could not import '%s'. The path must be fully qualified." %  lookup_view )
  app_dir = os . path . join ( app_config . path , 'fixtures' )
 template = Template ( content )
              self . stdout . write ( self . style . MIGRATE_HEADING ( "Operations to perform:" ) )
 import sys
       class LazyStream ( six . Iterator ) :
           selected_choices = set ( force_text ( v ) for v in selected_choices )
   attrs = attrs or { }
                        tt = ( 2037 , ) + tt [ 1 : ]
                      cls . __bytes__ = cls . __bytes_cast
 key = bytes_to_text ( key , self . encoding )
          errors = [ ]
   def end_object ( self , obj ) :
   def convert_old_style_list ( list_ ) :
              self . stream . write ( "\n" )
 super ( TemplateResponse , self ) . __init__ (  template , context , content_type , status )
     return bound_func ( * args , ** kwargs )
 binary_type = str
   def __repr__ ( self ) :
  except ValueError :
 extend = complain
  if data :
   if self . max_length is not None and len ( file_name ) > self . max_length :
    class RendererMixin ( object ) :
  data = ( form . cleaned_data [ field ] , ) + date_data
   field_dict = OrderedDict ( field_list )
 super ( BaseModelFormSet , self ) . __init__ ( ** defaults )
          encoding = locale . getdefaultlocale ( ) [ 1 ] or 'ascii'
 self . show_traceback = options . get ( 'traceback' )
   try :
   try :
    elif safe_input :
   def iteritems ( d , ** kw ) :
 try :
                  other = other . __cast ( )
   def __iter__ ( self ) :
    class Lexer ( object ) :
          return super ( FileInput , self ) . render ( name , None , attrs = attrs )
 return remove_tags ( value , tags )
          tt = ( dt . year , dt . month , dt . day ,  dt . hour , dt . minute , dt . second ,  dt . weekday ( ) , 0 , 0 )
          builtins = { 'True' : True , 'False' : False , 'None' : None }
 for key_value in natural :
  except AttributeError :
 for f in opts . concrete_fields + opts . virtual_fields + opts . many_to_many :
 import datetime
   def __call__ ( self , template_name , template_dirs = None ) :
   def pop ( self , key , default = None ) :
 tempdir = tempfile . mkdtemp ( prefix = prefix , suffix = '_download' )
                  match = True
 self . day_none_value = self . none_value
                          var_obj = None
      ungettext = ngettext
          if self . pos >= len ( self . tokens ) :
 for child in node . childNodes :
                  url = smart_urlquote ( middle )
    def get_unique_error_message ( self , unique_check ) :
  for node in self . nodelist_empty :
      from yaml import SafeLoader , SafeDumper
  if not cls :
              return self . empty_value
  except TemplateSyntaxError as e :
 from IPython import start_ipython
      def callable ( obj ) :
  else :
              return SafeText ( data )
 child_nodelists = ( 'nodelist' , )
 meta = getattr ( form , 'Meta' , None )
                  yield choice
 if isinstance ( s , ( SafeData , EscapeData ) ) :
   def _handle_fk_field_node ( self , node , field ) :
   def handle ( self , * args , ** options ) :
 if threading :
  return patterns
 if not isinstance ( candidate , six . string_types ) :
      def __init__ ( self , source ) :
    def do_ntranslate ( singular , plural , number , translation_function ) :
 syear = "%04d" % ( dt . year , )
  raise
   def enter_command ( self , command , token ) :
  else :
              self . _done = True
          max_num = DEFAULT_MAX_NUM
 super ( FilePathField , self ) . __init__ ( choices = ( ) , required = required ,  widget = widget , label = label , initial = initial , help_text = help_text ,  * args , ** kwargs )
  from django . core . management . base import AppCommand
   def setdefault ( self , key , default = None ) :
    __iter__ = xreadlines
 self . add_fields ( form , None )
 self . db = options . pop ( 'using' , DEFAULT_DB_ALIAS )
  choice_input_class = None
  from binascii import Error as BinasciiError
     def find_template ( name , dirs = None ) :
                      dirname = os . path . dirname ( filename )
   full_module_name = package_name + '.' + module_name
 if len ( bits ) == 2 :
   elif action == "unapply_start" :
    def add_root_elements ( self , handler ) :
  try :
 html [ 'month' ] = self . create_select ( name , self . month_field , value , month_val , choices , self . month_none_value )
     class CsrfTokenNode ( Node ) :
    ip_str = _explode_shorthand_ip_string ( ip_str )
  import StringIO
   if pathext is None :
    def _load_serializers ( ) :
              for x , y in zip ( val1 , val2 ) :
          piece = '' . join ( source [ last : ] )
   for field , error_list in error . items ( ) :
              raise ValueError (  "'%s.%s' has no field named '%s'."  % ( model . _meta . app_label , model . _meta . object_name , fk_name ) )
  if ch == '+' :
          return force_text ( list_ [ 0 ] )
          changeset = timestamp . strftime ( '%Y%m%d%H%M%S' )
              continue
                      if translators_comment_start is not None and lineno >= translators_comment_start :
   def _get_context_stack_frame ( self , context ) :
          mem_args = args [ : num_args ]
  if target_app_labels_only :
          class HTMLParser ( _html_parser . HTMLParser ) :
          self . _assert_mutable ( )
   class Command ( AppCommand ) :
  except ImportError as exc :
   try :
 if p >= 0 :
          return True
    def to_python ( self , value ) :
 if isinstance ( data , bytes ) :
 self . _loaders = loaders
                  qs = self . model . _default_manager . get_queryset ( )
          time_str = time_str . decode ( 'utf-8' )
   return urljoin ( prefix , path )
                  if status != STATUS_OK :
  if self . max_digits is not None and digits > self . max_digits :
   class BadSignature ( Exception ) :
          lbp = bp
  return '%s:%s' % ( self . g ( ) , self . i ( ) )
 self . _leftover = b''
   elif t . token_type == TOKEN_VAR :
  return final_path
          result = self . __class__ ( '' , mutable = True , encoding = self . encoding )
          boundarystream = InterBoundaryIter ( self . _stream , self . _separator )
              return Context ( context )
 args = [  'xgettext' ,  '-d' , domain ,  '--language=Python' ,  '--keyword=gettext_noop' ,  '--keyword=gettext_lazy' ,  '--keyword=ngettext_lazy:1,2' ,  '--keyword=ugettext_noop' ,  '--keyword=ugettext_lazy' ,  '--keyword=ungettext_lazy:1,2' ,  '--keyword=pgettext:1c,2' ,  '--keyword=npgettext:1c,2,3' ,  '--keyword=pgettext_lazy:1c,2' ,  '--keyword=npgettext_lazy:1c,2,3' ,  '--output=-'  ] + command . xgettext_options
  class SimpleNode ( TagHelperNode ) :
 try :
          raise TemplateSyntaxError ( "widthratio takes at least three arguments" )
          return self . number > 1
   self . xml . endElement ( "field" )
  try :
 for migration_name in migration_names :
 return iter ( getattr ( d , _iteritems ) ( ** kw ) )
 if not check_for_language ( lang ) :
  else :
  from django . utils . encoding import force_text , force_str
 for arg in argv [ 2 : ] :
 c . load ( cookie )
      pass
                  raise
 return __wrapper__
    from django . conf import settings
     if isinstance ( value , six . string_types ) and value . lower ( ) in ( 'false' , '0' ) :
   if func is None :
              val = self [ key ]
              if form . is_bound :
           self . is_bound = data is not None or files is not None
                   pass
                      self . _errors [ field ] = self . error_class ( error_class = 'nonfield' )
 if i + 1 < len ( chunks ) :
  if exclude and f . name in exclude :
              post = '<could not parse>'
      class ComboField ( Field ) :
  except LookupError :
 def __new__ ( mcs , name , bases , attrs ) :
  else :
 return self . set_cookie ( key , value , ** kwargs )
              html_class_attr = ''
          value = ugettext ( "%s GB" ) % filesize_number_format ( bytes / GB )
   tag = match . group ( 1 ) . strip ( )
          for dict_ in self . dicts :
                  pass
              Model = _get_model ( d [ "model" ] )
  elif not callable ( formfield_callback ) :
                                  val = list ( val )
 level = config . get ( 'level' , None )
   def save_existing ( self , form , instance , commit = True ) :
  try :
    def memoize ( func , cache , num_args ) :
                  yield node
 using_sysrandom = True
 formatted_subject = subject . replace ( '\n' , '\\n' ) . replace ( '\r' , '\\r' )
              encoding = settings . DEFAULT_CHARSET
 from django . forms . fields import IntegerField , BooleanField
   class MultiPartParserError ( Exception ) :
 self . second = parser . expression ( bp )
  comment_lineno_cache = None
  return force_text ( widget . render ( name , self . value ( ) , attrs = attrs ) )
              raise CommandError ( "Cannot find a migration matching '%s' from app '%s'." % ( migration_name , app_label ) )
  byte2int = operator . itemgetter ( 0 )
      DateTimeAwareJSONEncoder = DjangoJSONEncoder
    self . choices = list ( choices )
              logger . setLevel ( _checkLevel ( level ) )
from django . utils . six . moves import html_parser as _html_parser
 if self . sep not in signed_value :
  else :
 self . second = None
  return name , ( value , params )
 class_types = ( type , types . ClassType )
 from django . utils . encoding import force_str , force_text
 if safe and arg != ';' :
  handlers = config . get ( 'handlers' , None )
 new_path = path . join ( top_dir , relative_dir ,  filename . replace ( base_name , name ) )
                          sub_match_dict = dict ( match . groupdict ( ) , ** self . default_kwargs )
  else :
 self . _current = None
   def empty_block_tag ( self , token ) :
 def split_leading_dir ( self , path ) :
                      super ( AssignmentNode , self ) . __init__ ( takes_context , args , kwargs )
           if settings . SECURE_PROXY_SSL_HEADER :
      setattr ( Module_six_moves_urllib_request , attr . name , attr )
          self . _container . append ( self . make_bytes ( content ) )
 return data
 if options [ 'verbosity' ] > 0 :
     class EndToken ( TokenBase ) :
          return ''
 self . merge ( translation )
 for filename in filelist :
                  qs = self . queryset
                      if filename . endswith ( '.mo' ) :
          if kwargs . pop ( 'ipv6' , False ) :
   return obj
     @ register . filter ( is_safe = True )
  etags = [ e . encode ( 'ascii' ) . decode ( 'unicode_escape' ) for e in etags ]
      setattr ( Module_six_moves_urllib_response , attr . name , attr )
                  pass
              handler . addQuickElement ( "link" , "" , { "rel" : "self" , "href" : self . feed [ 'feed_url' ] } )
     def select_template ( template_name_list , dirs = None ) :
               kwargs . setdefault ( 'widget' , super ( IntegerField , self ) . widget )
  return self . _body
 translation = gettext_module . translation (  domain = 'django' ,  localedir = localedir ,  languages = [ self . __locale ] ,  codeset = 'utf-8' ,  fallback = use_null_fallback )
   def __repr__ ( self ) :
 from django . core . serializers . python import Serializer as PythonSerializer
          for item in self . items :
 def rjust ( value , arg ) :
       def decorating_function ( user_function ) :
  from django . conf import settings
 def upload_handlers ( self , upload_handlers ) :
      @ register . tag
 from django . forms . fields import Field , FileField
  for potfile in potfiles :
  except ValidationError as e :
          USE_INOTIFY = True
      def __init__ ( self , context , * args , ** kwargs ) :
          return self . represent_scalar ( 'tag:yaml.org,2002:str' , str ( data ) )
 return mark_safe ( value )
 final_output = [ ]
                          logger . level = logging . NOTSET
 super ( MultiWidget , self ) . __init__ ( attrs )
    class TagHelperNode ( Node ) :
                  attrs_plus = self . attrs . copy ( )
                      continue
  return ForNode ( loopvars , sequence , is_reversed , nodelist_loop , nodelist_empty )
   def itervalues ( d , ** kw ) :
  return _ ( 'AM' )
  self . _meta = META
 self . _upload_handlers = upload_handlers
              guessed_filename = used_name
          modified_code = None
 def management_form ( self ) :
                  raise ValidationError ( ungettext (  "Please submit %d or more forms." ,  "Please submit %d or more forms." , self . min_num ) % self . min_num ,  code = 'too_few_forms' )
      BaseRunserverCommand = Command
   def id_for_label ( self , id_ ) :
  return attrs
                              current = current ( )
                  output . append ( format_html ( '<optgroup label="{0}">' , force_text ( option_value ) ) )
  except KeyError :
                          apps . setdefault ( pattern . app_name , [ ] ) . append ( pattern . namespace )
                      raise TemplateSyntaxError (  "'%s' tag takes at least 2 arguments and the "  "second last argument must be 'as'" % function_name )
              try :
  except VariableDoesNotExist :
          try :
 options [ 'secret_key' ] = get_random_string ( 50 , chars )
              @ wraps ( fget )
      for program in programs :
 if self . m2m_data and save_m2m :
              raise ValidationError ( _ ( 'Enter a valid IPv4 or IPv6 address.' ) , code = 'invalid' )
          if self . _isdst ( dt ) :
  if six . PY2 :
   @ property
              return ''
                          out . write ( ' _(%s) ' % cmatch )
              if args [ - 1 ] != "silent" :
  elif token . token_type == 1 :
  if not getattr ( self , 'nodelist' , False ) :
   else :
 v . __cause__ , v . __traceback__ = e , tb
  try :
 try :
  cookiedict = { }
  except ( ValueError , TypeError , OverflowError ) :
 return ''
 class MinLengthValidator ( BaseValidator ) :
 return value . strftime ( format )
      pass
 base_subdir = '%s_template' % app_or_project
                      fp . write ( content )
                          raise ValueError ( 'Unable to configure handler '  '%r: %s' % ( name , e ) )
  url_info = urlparse ( url )
     for opt in [ 'fields' , 'exclude' , 'localized_fields' ] :
  return obj
 inline_re = re . compile ( r"""^\s*trans\s+((?:"[^"]*?")|(?:'[^']*?'))(\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?')))?\s*""" )
          tpl = "EntitiesForbidden(name='{}', system_id={!r}, public_id={!r})"
 text = force_text ( text )
                  handle_m2m ( relobj )
  else :
          length = int ( arg )
                  try :
          nodelist_false = NodeList ( )
          formfield_callback = attrs . pop ( 'formfield_callback' , None )
  if not file_name :
     self . instance = construct_instance ( self , self . instance , opts . fields , construct_instance_exclude )
  else :
 if inplural :
 return range ( 1 , self . num_pages + 1 )
 connection . close ( )
              return data
    def next_char ( input_iter ) :
   def words ( self , num , truncate = None , html = False ) :
  else :
    def parse_starttag ( self , i ) :
 version = get_complete_version ( version )
 self . msguniq_options = self . msguniq_options [ : ] + [ '--no-location' ]
      status_code = 302
  if arg is None :
   def hidden_fields ( self ) :
    if is_protected_type ( value ) :
   class MergeDict ( object ) :
 statement = [ ]
  write ( arg )
          super ( MovedModule , self ) . __init__ ( name )
 import datetime
 def __init__ ( self , file ) :
              handler . addQuickElement ( 'published' , rfc3339_date ( item [ 'pubdate' ] ) )
    @ register . filter ( is_safe = True )
          pass
  models . signals . pre_syncdb . send (  sender = app_config . models_module ,  app = app_config . models_module ,  create_models = create_models ,  verbosity = verbosity ,  interactive = interactive ,  db = db )
          parser . add_argument ( '--locale' , '-l' , default = [ ] , dest = 'locale' , action = 'append' ,  help = 'Creates or updates the message files for the given locale(s) (e.g. pt_BR). '  'Can be used multiple times.' )
   def _get_scheme ( self ) :
 models = app_config . get_models ( include_auto_created = True )
 try :
 from django . utils import six , timezone
     class WSGIServer ( simple_server . WSGIServer , object ) :
                if isinstance ( field , models . TimeField ) and getattr ( obj , field . name ) is not None :
              self . address_family = socket . AF_INET6
          self . name = name
    if ( ( ip_str . startswith ( ':' ) and not ip_str . startswith ( '::' ) ) or  ( ip_str . endswith ( ':' ) and not ip_str . endswith ( '::' ) ) ) :
      input_type = 'file'
       def bytes_to_text ( s , encoding ) :
 if illegal_formatting :
                      if t . token_type != TOKEN_COMMENT :
          return list ( reversed ( modules ) )
         def fix_location_header ( request , response ) :
  import fnmatch
 for base in reversed ( new_class . __mro__ ) :
  else :
                      result = ( template , make_origin ( display_name , loader , name , dirs ) )
   class SerializerDoesNotExist ( KeyError ) :
                          warnings . warn (  "Need {0} values to unpack in for loop; got {1}. "  "This will raise an exception in Django 2.0."  . format ( num_loopvars , len_item ) ,  RemovedInDjango20Warning )
          return get_supported_language_variant ( lang_code )
   def __iter__ ( self ) :
  try :
 num_existing = len ( existing )
              return ''
    def cache_clear ( ) :
 self . silent = silent
  if formatter :
          del self . dict [ item ]
   _active = local ( )
 if level is not None :
  else :
   return value
  if attrvalue :
          return self . as_ul ( )
          nodelist_false = NodeList ( )
   def add_truncation_text ( self , text , truncate = None ) :
 self . _namespace_dict [ language_code ] = namespaces
   patterns = [ pattern for ( possibility , pattern , defaults ) in possibilities ]
   def _set_queryset ( self , queryset ) :
       def __init__ ( self , msg , params = ( ) ) :
 if settings . SETTINGS_MODULE :
 return RelatedObject ( cls . fk . rel . to , cls . model , cls . fk ) . get_accessor_name ( ) . replace ( '+' , '' )
  if val == [ ] :
 from django . utils . html import conditional_escape , format_html
  def write ( self , outfile , encoding ) :
 add_move ( MovedModule ( "_thread" , "thread" ) )
  import datetime
    def autodiscover_modules ( * args , ** kwargs ) :
  else :
      return compiled_parent . _render ( context )
                          try :
          return input_val
  except ( TypeError , AttributeError , KeyError , ValueError ) :
                  attrs [ 'min' ] = self . min_value
 if newretval is not None :
              try :
  else :
   def end_object ( self , obj ) :
 return '\n' . join ( statements )
 self . msguniq_options = self . msguniq_options [ : ] + [ '--no-wrap' ]
          return get_supported_language_variant ( settings . LANGUAGE_CODE )
  for func , args in self . filters :
 return base64 . urlsafe_b64decode ( s + pad )
              return list_ , False
              if self . active_writers == 0 and self . waiting_writers == 0 :
        contains_nontext = False
          self . _stream = stream
 import time
          def dec ( func ) :
 self . use_tz = use_tz
 app_dirs = [ ]
 digits = "0123456789abcdefghijklmnopqrstuvwxyz"
 result_args = [ [ ] ]
  out = text [ : end_text_pos ]
      status_code = 500
 pgettext_lazy = lazy ( pgettext , six . text_type )
    try :
 if form . _meta . widgets :
              raise DisallowedRedirect ( "Unsafe redirect to URL with protocol '%s'" % parsed . scheme )
  output_transaction = True
 self . path_info = ''
          return mark_safe ( message )
   def construct_instance ( form , instance , fields = None , exclude = None ) :
                  if filename . endswith ( ( '.pyo' , '.pyc' , '.py.class' ) ) :
   def tzname ( self , dt ) :
  else :
  def __init__ ( self , stream_or_string , ** options ) :
 value = value . replace ( arg , '' )
 from __future__ import unicode_literals
     class InvalidTemplateLibrary ( Exception ) :
  except TemplateDoesNotExist :
   def address_string ( self ) :
          return self . _regex
 super ( Field , self ) . __init__ ( )
  seqs = connection . introspection . sequence_list ( ) if reset_sequences else ( )
              return 'th'
  elif ch == '[' :
    if not old_method and new_method :
              return list_ , False
                              matches = False
                           non_capturing_groups . append ( len ( result ) )
           try :
 if attrs is None :
                  return cached
  return self . dicts . pop ( )
          if self . _isdst ( dt ) :
   else :
                      self . stdout . write ( "Creating %s\n" % new_path )
 itervalues = _itervalues
  raise TemplateDoesNotExist ( error_msg )
 return MONTHS [ self . data . month ]
  if not ( value is True or value is False or value is None or value == '' ) :
 __iadd__ = complain
  return wrapper
  _prefixes . value = prefix
  for ch , escaped in input_iter :
 self . json_kwargs . pop ( 'stream' , None )
 notifier . read_events ( )
 old_method = base . __dict__ . get ( old_method_name )
  def add_arguments ( self , parser ) :
 parser . delete_first_token ( )
 if not roots :
              del _urlconfs . value
          return self . streaming_content
 return self
 from django . utils . encoding import force_text
              handler . addQuickElement ( "comments" , item [ 'comments' ] )
              raise StopIteration ( )
 remove = complain
 if endbmatch :
  return potfiles
  import hashlib
   return self . new_objects
   truncate_len = length
 import errno
 @ stringfilter
    s = s1
  else :
 key = bytes_to_text ( key , self . encoding )
              if six . PY3 :
   opts = new_class . _meta = ModelFormOptions ( getattr ( new_class , 'Meta' , None ) )
 length = int ( num )
  for template_dir in template_dirs :
              error_msg = "Your TEMPLATE_DIRS setting is empty. Change it to point to at least one template directory."
     class NodeList ( list ) :
 self . nodelist_true , self . nodelist_false = nodelist_true , nodelist_false
   def value_from_datadict ( self , data , files , name ) :
   def _construct_form ( self , i , ** kwargs ) :
 parser . add_argument ( '--noreload' , action = 'store_false' , dest = 'use_reloader' , default = True ,  help = 'Tells Django to NOT use the auto-reloader.' )
  model_fields = Model . _meta . get_all_field_names ( )
    def run_validators ( self , value ) :
          response [ 'Expires' ] = http_date ( time . time ( ) + cache_timeout )
          if value is None :
 return b'' . join ( T ) + F ( l ) [ : r ]
    return output
                  continue
                  f . save_form_data ( instance , cleaned_data [ f . name ] )
  self . save_as_new = save_as_new
  if out_log :
 if six . PY3 :
   def extract ( self , to_path ) :
           if not self . _cached_loaders :
  except StandardError as e :
              try :
 app . initialize ( argv = [ ] )
     class SplitDateTimeField ( MultiValueField ) :
              rest = rest [ m . end ( ) : ]
               if not re . search ( r'^[_a-zA-Z]' , name ) :
  self . deleted_objects . append ( obj )
              return path . split ( '\\' , 1 )
 def get_supported_language_variant ( lang_code , strict = False ) :
          self . takes_context = takes_context
 name = "." . join ( [ package . __name__ , module_name ] )
 result = cache_get ( key , root )
          errors = self . default_error_messages . copy ( )
   def handle_app_config ( self , app_config , ** options ) :
          for base in bases [ : : - 1 ] :
   if self . can_delete and self . _should_delete_form ( form ) :
              raise InvalidTemplateLibrary ( "Unsupported arguments to "  "Library.filter: (%r, %r)" , ( name , filter_func ) )
                      errors = "strict"
              id_ += '_0'
 converter = connection . introspection . table_name_converter
 if server_port != ( '443' if self . is_secure ( ) else '80' ) :
   def dst ( self , dt ) :
                  pass
  def add_arguments ( self , parser ) :
def deconstructible ( * args , ** kwargs ) :
              encode = lambda k , v : urlencode ( { k : v } )
   def resolve_template ( self , template ) :
   def I ( self ) :
                      output . append ( self . render_option ( selected_choices , * option ) )
  except AppRegistryNotReady :
   def render ( self , name , value , attrs = None , choices = ( ) ) :
   @ property
 def is_rendered ( self ) :
              call_command (  'flush' ,  verbosity = max ( self . verbosity - 1 , 0 ) ,  interactive = False ,  database = db ,  reset_sequences = False ,  inhibit_post_migrate = True ,  )
 cls = extension_map . get ( tail_ext )
                          if not os . path . isdir ( migrations_directory ) :
 def __newobj__ ( cls , * args ) :
 from django . utils . deconstruct import deconstructible
 self . dirpath = dirpath
          if app_config . models_module is None :
  if error_class is None :
 t = getattr ( _active , "value" , None )
              key += tuple ( type ( v ) for v in args )
      def __init__ ( self , dirpath , file_name , locale_dir ) :
      import imp
          handler . addQuickElement ( "title" , self . feed [ 'title' ] )
   def write ( self , val ) :
  template_source_loaders = None
 choices = [ ( i , i ) for i in range ( 1 , 32 ) ]
                  s = six . text_type ( s )
 node = CycleNode ( values )
  kwargs [ 'number' ] = number_value
 timetuple = dt . timetuple ( )
 if not hasattr ( parser , '_namedCycleNodes' ) :
              if connection . introspection . table_name_converter ( model . _meta . db_table ) in table_names :
  except KeyError :
                    compare_to = [ var . resolve ( context , True ) for var in self . _varlist ]
   class warn_about_renamed_method ( object ) :
          if '__str__' not in klass . __dict__ :
      WindowsError = WindowsError
 if hasattr ( _active , "value" ) :
              if jan1_weekday == 5 or ( jan1_weekday == 6 and calendar . isleap ( self . data . year - 1 ) ) :
                  field_value = None
  if error_message is not None :
          return ( "%" + six . text_type ( arg ) ) % value
 hour , minute = divmod ( timezone , 60 )
 if self . can_delete :
 return smart_text ( obj )
                  prefixed_name = self . add_prefix ( name )
          parts = viewname . split ( ':' )
  if isinstance ( s , bytes ) or ( isinstance ( s , Promise ) and s . _delegate_bytes ) :
   if not self . dry_run :
 k = m . end ( )
              raise CommandError ( "Type '%s help %s' for usage information." % (  os . path . basename ( sys . argv [ 0 ] ) , sys . argv [ 1 ] ) )
          filelist = new_filenames
   def __next__ ( self ) :
 def __getitem__ ( self , key ) :
 singular = [ ]
 end_index = None
 def __iter__ ( self ) :
              six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc_info ( ) [ 2 ] )
 self . base = base
   class Serializer ( base . Serializer ) :
 self . endChannelElement ( handler )
          kw . extend ( [ d . hour , d . minute , d . second , d . microsecond , d . tzinfo ] )
          raise ImproperlyConfigured (  "Calling modelform_factory without defining 'fields' or "  "'exclude' explicitly is prohibited."  )
       def constant_time_compare ( val1 , val2 ) :
              obj = self . var
 user_regex = re . compile (  r"(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*$"  r'|^"([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-\011\013\014\016-\177])*"$)' ,  re . IGNORECASE )
              self . __offset = timedelta ( minutes = offset )
  else :
 for obj in queryset :
 COMMENT_TAG_START = '{#'
              initial_forms = self . initial_form_count ( )
               return dec
 _url_drive_re = re . compile ( '^([a-z])[:|]' , re . I )
      m = IDENTIFIER . match ( s )
 import warnings
 _cached_modules = set ( )
 dlen = len ( defaults or [ ] )
   def _construct_form ( self , i , ** kwargs ) :
          args = [ sys . executable ] + [ '-W%s' % o for o in sys . warnoptions ] + sys . argv
              pending_references . setdefault ( refto , [ ] ) . extend ( refs )
          try :
                      state = tok . next
              return get_supported_language_variant ( accept_lang )
  self . attr = old_attr
              url = urlunsplit ( ( scheme , netloc , path , query , fragment ) )
           indent = self . options . get ( "indent" )
                          pass
          if key not in self :
   TOTAL_FORM_COUNT = 'TOTAL_FORMS'
 stream . unget ( chunk [ next : ] )
              c = SimpleCookie ( )
 return forms
              seen_data = set ( )
 from django . utils import six
 handler . endElement ( "feed" )
 return self . _html_output (  normal_row = '<li%(html_class_attr)s>%(errors)s%(label)s %(field)s%(help_text)s</li>' ,  error_row = '<li>%s</li>' ,  row_ender = '</li>' ,  help_text_html = ' <span class="helptext">%s</span>' ,  errors_on_separate_row = False )
   def _set_choices ( self , value ) :
 return iter ( getattr ( d , _iterkeys ) ( ** kw ) )
  if dec_part :
          return NodeList ( )
   incomment = False
 self . _headers [ header . lower ( ) ] = ( header , value )
          get = ( pformat ( GET_override )  if GET_override is not None  else pformat ( request . GET ) )
  return ( self . paginator . per_page * ( self . number - 1 ) ) + 1
              if register_to :
    class Origin ( object ) :
   if ( ( os . stat ( path ) . st_mode & stat . S_IREAD ) != stat . S_IREAD ) :
   def setlistdefault ( self , key , default_list = None ) :
     def import_library ( taglib_module ) :
 if self . field . label is None :
  return '' . join ( random . choice ( allowed_chars ) for i in range ( length ) )
    global _cached_modules , _cached_filenames
    return type ( form ) ( class_name , ( form , ) , form_class_attrs )
  except UnicodeError :
 return base_lang in settings . LANGUAGES_BIDI
   forms_valid &= form . is_valid ( )
          return self . choice_value in self . value
    def is_valid_path ( path , urlconf = None ) :
 sub_ul_renderer . choice_input_class = self . choice_input_class
              self . object_list = list ( self . object_list )
                  related = getattr ( obj , field . name )
 nodelist = parser . parse ( ( 'elif' , 'else' , 'endif' ) )
 self . items = [ ]
   def __len__ ( self ) :
   @ classmethod
 def __init__ ( self , regex ) :
          try :
 args [ 0 ] = force_text ( args [ 0 ] )
          self . name = name
 return
   else :
          if isinstance ( format_module_path , six . string_types ) :
                      space = line . find ( ' ' ) + 1
 if not os . path . isfile ( pythonrc ) :
 options = self . render_options ( choices , value )
   def lru_cache ( maxsize = 100 , typed = False ) :
  if hasattr ( TemplateLoader , 'load_template_source' ) :
 try :
              return timedelta ( seconds = - time . altzone )
  bits = host . rsplit ( ':' , 1 )
   @ property
    return the_path
  field = Model . _meta . get_field ( field_name )
  except TemplateDoesNotExist :
   else :
              digits . append ( '-' )
          error = self . data [ i ]
              memo = { }
          return s
                      middle = middle [ len ( opening ) : ]
              retval = handler . upload_complete ( )
    class _LazyDescr ( object ) :
  except UnicodeDecodeError :
      _assertCountEqual = "assertItemsEqual"
              return False
           class X ( object ) :
    REASON_PHRASES = {  100 : 'CONTINUE' ,  101 : 'SWITCHING PROTOCOLS' ,  102 : 'PROCESSING' ,  200 : 'OK' ,  201 : 'CREATED' ,  202 : 'ACCEPTED' ,  203 : 'NON-AUTHORITATIVE INFORMATION' ,  204 : 'NO CONTENT' ,  205 : 'RESET CONTENT' ,  206 : 'PARTIAL CONTENT' ,  207 : 'MULTI-STATUS' ,  208 : 'ALREADY REPORTED' ,  226 : 'IM USED' ,  300 : 'MULTIPLE CHOICES' ,  301 : 'MOVED PERMANENTLY' ,  302 : 'FOUND' ,  303 : 'SEE OTHER' ,  304 : 'NOT MODIFIED' ,  305 : 'USE PROXY' ,  306 : 'RESERVED' ,  307 : 'TEMPORARY REDIRECT' ,  308 : 'PERMANENT REDIRECT' ,  400 : 'BAD REQUEST' ,  401 : 'UNAUTHORIZED' ,  402 : 'PAYMENT REQUIRED' ,  403 : 'FORBIDDEN' ,  404 : 'NOT FOUND' ,  405 : 'METHOD NOT ALLOWED' ,  406 : 'NOT ACCEPTABLE' ,  407 : 'PROXY AUTHENTICATION REQUIRED' ,  408 : 'REQUEST TIMEOUT' ,  409 : 'CONFLICT' ,  410 : 'GONE' ,  411 : 'LENGTH REQUIRED' ,  412 : 'PRECONDITION FAILED' ,  413 : 'REQUEST ENTITY TOO LARGE' ,  414 : 'REQUEST-URI TOO LONG' ,  415 : 'UNSUPPORTED MEDIA TYPE' ,  416 : 'REQUESTED RANGE NOT SATISFIABLE' ,  417 : 'EXPECTATION FAILED' ,  418 : "I'M A TEAPOT" ,  422 : 'UNPROCESSABLE ENTITY' ,  423 : 'LOCKED' ,  424 : 'FAILED DEPENDENCY' ,  426 : 'UPGRADE REQUIRED' ,  428 : 'PRECONDITION REQUIRED' ,  429 : 'TOO MANY REQUESTS' ,  431 : 'REQUEST HEADER FIELDS TOO LARGE' ,  500 : 'INTERNAL SERVER ERROR' ,  501 : 'NOT IMPLEMENTED' ,  502 : 'BAD GATEWAY' ,  503 : 'SERVICE UNAVAILABLE' ,  504 : 'GATEWAY TIMEOUT' ,  505 : 'HTTP VERSION NOT SUPPORTED' ,  506 : 'VARIANT ALSO NEGOTIATES' ,  507 : 'INSUFFICIENT STORAGE' ,  508 : 'LOOP DETECTED' ,  510 : 'NOT EXTENDED' ,  511 : 'NETWORK AUTHENTICATION REQUIRED' ,  }
  inner_text = [ ]
   def start_object ( self , obj ) :
                   return getattr ( settings , format_type )
                result = type ( self ) ( )
 from django . conf import settings
              return
              return self [ key ]
   def render ( self , context ) :
                      self . stdout . write ( self . style . MIGRATE_LABEL ( "  Target specific migration: " ) + "%s, from %s" % ( targets [ 0 ] [ 1 ] , targets [ 0 ] [ 0 ] ) )
 content_type = content_type . strip ( )
 import gettext as gettext_module
              return bytes ( value . encode ( self . _charset ) )
  return _make_decorator
  else :
 kwargs = { }
 if obj_list is None :
 BLOCK_TAG_START = '{%'
   if self . interactive :
          return None
   @ property
 from django . contrib . auth import get_user_model
 sys . stderr . write ( "  http://www.saddi.com/software/flup/   If you've already\n" )
 if _standard_context_processors is None :
 if token . contents == 'else' :
   def configure_logging ( logging_config , logging_settings ) :
 _func_code = "__code__"
   def __text_cast ( self ) :
  def add_arguments ( self , parser ) :
 from django . template . base import Origin , Template , Context , TemplateDoesNotExist
 if self . save_as_new :
                   s = ' ' . join ( [ force_text ( arg , encoding , strings_only ,  errors ) for arg in s ] )
 if bytes_read > rollback :
 if urlconf_name :
                  want_unicode = True
      def pbkdf2 ( password , salt , iterations , dklen = 0 , digest = None ) :
 parser . delete_first_token ( )
              if not isinstance ( initial , list ) :
 def __init__ ( self , producer , length = None ) :
      pass
   def wrap ( text , width ) :
   def is_valid ( self ) :
 for key in c . keys ( ) :
  viewname = parser . compile_filter ( bits [ 1 ] )
  attrs . setdefault ( 'step' , step )
  else :
      format_key = 'TIME_INPUT_FORMATS'
 from django . conf import settings
          parser . add_argument ( 'name' , help = 'Name of the application or project.' )
                          i = existing . index ( name )
                      match = condition . eval ( context )
              self . children . append ( data )
  except ImportError :
 subject = '%s (%s IP): %s' % (  record . levelname ,  ( 'internal' if request . META . get ( 'REMOTE_ADDR' ) in settings . INTERNAL_IPS  else 'EXTERNAL' ) ,  record . getMessage ( )  )
          return self . paginator . validate_number ( self . number + 1 )
              for subnode in node :
                      return supported_code
 from django . db . models import AutoField , OneToOneField , ForeignKey
 if self . cdata_tag is not None :
 from django . db . migrations . writer import MigrationWriter
 self . allow_empty_first_page = allow_empty_first_page
          return type ( self ) . __bool__ ( self )
  if exclude and f . name in exclude :
      from logging import _checkLevel
 import decimal
                  raise CommandError ( "You must supply at least one app label when using --empty." )
 self . _separator = b'--' + boundary
    if ':::' in ip_str :
    cursor = connection . cursor ( )
          self . _assert_mutable ( )
          self . regexes = { }
 return duplicate
 try :
  ISO_INPUT_FORMATS = {  'DATE_INPUT_FORMATS' : ( '%Y-%m-%d' , ) ,  'TIME_INPUT_FORMATS' : ( '%H:%M:%S' , '%H:%M:%S.%f' , '%H:%M' ) ,  'DATETIME_INPUT_FORMATS' : (  '%Y-%m-%d %H:%M:%S' ,  '%Y-%m-%d %H:%M:%S.%f' ,  '%Y-%m-%d %H:%M' ,  '%Y-%m-%d'  ) ,  }
           return s
   def iterkeys ( d , ** kw ) :
    translation . activate ( settings . LANGUAGE_CODE )
 pass
 host = host [ : - 1 ] if host . endswith ( '.' ) else host
              return super ( MultiValueDict , self ) . __getitem__ ( key )
 x = int ( x // len ( to_digits ) )
 if commit :
  import re
  except KeyError :
              return self . STDOFFSET
  if isinstance ( value , datetime . date ) :
              fields = new_class . declared_fields
 self . use_ipv6 = True
     def rfc3339_date ( date ) :
              return self . show_migration_list ( connection , [ options [ 'app_label' ] ] if options [ 'app_label' ] else None )
 from threading import local
   if daemonize :
                  groupid = "t%d" % tok . id
                      raise
 break
  num_loopvars = len ( self . loopvars )
          format_module_path = settings . FORMAT_MODULE_PATH
 if self . verbosity >= 1 :
               final_attrs [ 'value' ] = force_text ( self . _format_value ( value ) )
                              self . stdout . write ( " [ ] %s" % title )
 self . empty_value = kwargs . pop ( 'empty_value' , [ ] )
 result = self . configurator . convert ( value )
 for app_config in apps . get_app_configs ( ) :
    return False
 fp = kwargs . pop ( "file" , sys . stdout )
 i = next_space_index ( subject , i )
              if self . verbosity >= 1 :
  __all__ = [ 'luhn' ]
          result = super ( ChoiceField , self ) . __deepcopy__ ( memo )
 hidden_widget = HiddenInput
     class IntegerField ( Field ) :
  for field in unique_check :
 lexer_class , parser_class = DebugLexer , DebugParser
                      return ''
     class Form ( six . with_metaclass ( DeclarativeFieldsMetaclass , BaseForm ) ) :
      help = 'Runs a development server with data from the given fixture(s).'
      def __init__ ( self , view_name , args , kwargs , asvar ) :
 def __init__ ( self , timezone ) :
               MAXSIZE = int ( ( 1 << 31 ) - 1 )
 self [ 'Allow' ] = ', ' . join ( permitted_methods )
 self . tag ( function_name , compile_func )
          try :
     class override ( object ) :
 return strip_tags ( value )
 __setslice__ = complain
 self . interactive = options . get ( 'interactive' )
  MONTHS = 'jan feb mar apr may jun jul aug sep oct nov dec' . split ( )
              try :
  except ( LookupError , BinasciiError ) as e :
 from functools import update_wrapper
 def errors ( self ) :
 super ( TypedMultipleChoiceField , self ) . __init__ ( * args , ** kwargs )
 parser . StartDoctypeDeclHandler = self . start_doctype_decl
      if not response . streaming :
 request_repr = '\n{0}' . format ( filter . get_request_repr ( request ) )
    def _unpack_ipv4 ( ip_str ) :
   def _setup ( self ) :
 sites1 = _findall ( s1 , str ( year ) )
                          year_val , month_val , day_val = [ int ( v ) for v in match . groups ( ) ]
 import re
          if hextet . count ( '.' ) == 3 :
    add_to_builtins ( 'django.template.defaulttags' )
              data = compressed
 if not old_style_list :
   return str ( major + sub )
          return sorted ( value , key = Variable ( arg ) . resolve )
 import warnings
 parser . add_argument ( '--list' , '-l' , action = 'store_true' , dest = 'list' , default = False ,  help = 'Show a list of all known migrations and which are applied' )
 singular = [ ]
  else :
  else :
 raise v
               if len ( language [ p + 1 : ] ) > 2 :
  else :
  except StopFutureHandlers :
                  raise ValueError ( 'Unable to add handler %r: %s' % ( h , e ) )
                  widget = form . _meta . widgets . get ( self . _pk_field . name , HiddenInput )
    for i , handler in enumerate ( handlers ) :
  else :
 link [ PREV ] = last
  return plist
  return self . _object_dict . get ( pk )
    conflicts = executor . loader . detect_conflicts ( )
 def join ( value , arg , autoescape = None ) :
              out += truncate_text
 if self . is_bound :
   var_node = self . create_variable_node ( filter_expression )
 if comment_lineno_cache == cur_lineno :
          reloader = jython_reloader
 from django . utils import formats
   class Command ( BaseCommand ) :
 if len ( bits ) >= 4 and bits [ - 2 ] == "from" :
              end = newline
 if not content_type :
  common_ancestor = None
          args = [ self . name , self . value , self . attrs ]
          with self . mutex :
 BASE64_ALPHABET = BASE62_ALPHABET + '-_'
   db_name = connection . creation . create_test_db ( verbosity = verbosity , autoclobber = not interactive , serialize = False )
  for choice in self . field . choice_cache :
  self . _stream = BytesIO ( self . _body )
 if tzinfo [ 0 ] == '-' :
 if keys :
   if self . verbosity >= 1 :
               if condition is not None :
 if upto != start :
              return ""
          while self . tokens :
   _wrapped = None
 from io import StringIO
  else :
                      outfile . write ( data )
   fields = fields_for_model ( opts . model , opts . fields , opts . exclude ,  opts . widgets , formfield_callback ,  opts . localized_fields , opts . labels ,  opts . help_texts , opts . error_messages )
      class IfEqualNode ( Node ) :
   if initial is not None :
          return False
 def check_for_language ( lang_code ) :
          substitutions = {  'initial_text' : self . initial_text ,  'input_text' : self . input_text ,  'clear_template' : '' ,  'clear_checkbox_label' : self . clear_checkbox_label ,  }
 try :
                              continue
  s = s . replace ( '\\' , '\\\\' )
                           continue
                      callback = callback . func
 handler . startDocument ( )
 from django . utils import six
                      message = "'%s' already exists" % top_dir
  else :
   try :
   def tell ( self ) :
     try :
          objects = json . loads ( stream_or_string )
  except ValidationError as e :
 def url ( parser , token ) :
 return dateformat . time_format ( value , get_format ( format or 'TIME_FORMAT' , use_l10n = use_l10n ) )
    out = b'' . join ( parts ( ) )
 globalpath = os . path . join (  os . path . dirname ( upath ( sys . modules [ settings . __module__ ] . __file__ ) ) , 'locale' )
  return new_class
                  self . active_writers += 1
  def __init__ ( self , queryset , empty_label = "---------" , cache_choices = None ,  required = True , widget = None , label = None , initial = None ,  help_text = '' , to_field_name = None , limit_choices_to = None ,  * args , ** kwargs ) :
   def sign ( self , value ) :
                      if not self . compile_function_error ( token , e ) :
 return importlib_find ( full_module_name , package_path ) is not None
                  self . cookies [ key ] [ 'expires' ] = cookie_date ( time . time ( ) +  max_age )
              if hasattr ( base , 'base_fields' ) :
  return get_callable ( callback ) , { }
                          g = g . strip ( '"' )
      return _trans . gettext ( message )
          if source [ 1 ] is None :
              continue
    if ns_pattern :
                  pass
          if hasattr ( value , '_meta' ) :
  else :
          parser . __loaded_blocks = [ block_name ]
  register = Library ( )
   if not isinstance ( d , datetime . datetime ) :
              year_val , month_val , day_val = value . year , value . month , value . day
                      value = None
                  raise TemplateSyntaxError ( '"with" in %r tag needs at least '  'one keyword argument.' % bits [ 0 ] )
              return
                  if is_templatized :
  self . setlist ( key , default_list )
                      shutil . copymode ( old_path , new_path )
 month_field = '%s_month'
              return
                warnings . warn (  'Using SplitDateTimeWidget with DateTimeField is deprecated. '  'Use SplitDateTimeField instead.' ,  RemovedInDjango19Warning , stacklevel = 2 )
              if default is None :
          source , display_name = self . load_template_source ( template_name , template_dirs )
          raise ExternalReferenceForbidden ( context , base , sysid , pubid )
              self . _callback = callback
      def __init__ ( self , * args , ** kwargs ) :
          int_part , dec_part = str_number , ''
   def resolve_error_handler ( self , view_type ) :
 locales = set ( locales ) - set ( exclude )
   return "%s.%s" % ( package [ : dot ] , name )
 global _standard_context_processors
  if i >= self . initial_form_count ( ) and self . initial_extra :
              widget . attrs . update ( extra_attrs )
              resolver = get_ns_resolver ( ns_pattern , resolver )
 use_threading = connection . features . test_db_allows_multiple_connections
   for opening , closing in WRAPPING_PUNCTUATION :
      def render ( self , context ) :
   except OSError as e :
  else :
          if value :
   def __repr__ ( self ) :
                  raise
    class TemplateEncodingError ( Exception ) :
              return loader . get_template ( template )
  else :
  from django . core . exceptions import ImproperlyConfigured
                                  with transaction . atomic ( using = connection . alias ) :
    def smart_bytes ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :
 ORDERING_FIELD_NAME = 'ORDER'
  def __init__ ( self , stream , boundary ) :
 if 100 <= response . status_code < 200 or response . status_code in ( 204 , 304 ) :
 import warnings
          kw = match . groupdict ( )
 if not widget :
          callback = getattr ( self . urlconf_module , 'handler%s' % view_type , None )
 self . format = format if format else None
    _moved_attributes = [ ]
  def add_arguments ( self , parser ) :
   def resolve ( self , path ) :
          return DebugVariableNode ( contents )
                      disposition = meta_data [ 'content-disposition' ] [ 1 ]
import os
   def c ( self ) :
   elif self . verbosity == 3 :
 __eq__ = new_method_proxy ( operator . eq )
    def parse_bits ( parser , bits , params , varargs , varkw , defaults ,  takes_context , name ) :
     utc = pytz . utc if pytz else UTC ( )
          if len ( unique_check ) == 1 :
  return new_class
          raise EntitiesForbidden ( name , value , base , sysid , pubid , notation_name )
  else :
 charset = content_type_extra . get ( 'charset' )
 self . template_cache . clear ( )
  if not value or '@' not in value :
     class BaseContext ( object ) :
              return url
              raise TemplateSyntaxError ( "No named cycles in template. '%s' is not defined" % name )
 self . msgattrib_options = self . msgattrib_options [ : ] + [ '--no-wrap' ]
                     pass
  if upto != len ( token ) :
  kw = dict ( ( k , int ( v ) ) for k , v in six . iteritems ( kw ) if v is not None )
   empty = object ( )
 if not hextets [ index ] :
 if status is not None :
                  name = self . split_leading_dir ( name ) [ 1 ]
                              terminal_char = ')'
                  return default
 parser . delete_first_token ( )
           self . verbosity = options . get ( 'verbosity' )
 return template , None
                  self . stream . write ( " " )
           template = get_template_from_string ( template , origin , template_name )
              self . _populate ( )
  nesting -= 1
                      result = middleware . process_request ( request )
 from django . utils import six
 self . m2m_data = m2m_data
  remove_tags = allow_lazy ( remove_tags , six . text_type )
 save_m2m ( )
                          fh . write ( migration_string )
 for form in valid_forms :
 for form in self . extra_forms :
    function_name = ( name or  getattr ( func , '_decorated_function' , func ) . __name__ )
          return False
          return _generate_cache_key ( request , method , headerlist , key_prefix )
    def get_mod_func ( callback ) :
 from django . core . management . sql import sql_create
 for p in plist :
  else :
   else :
   def _iteritems ( self ) :
    if data is False :
import os
   if self . to_field :
  parser . __loaded_blocks . append ( block_name )
                      self . stderr . write (  "Notice: Couldn't set permission bits on %s. You're "  "probably using an uncommon filesystem setup. No "  "problem." % new_path , self . style . NOTICE )
  value_converters = {  'ext' : 'ext_convert' ,  'cfg' : 'cfg_convert' ,  }
 try :
    def dst ( self , dt ) :
              return format ( value , arg )
                     if obj . pk is None :
 __version__ = "1.6.1"
        @ register . filter ( "escape" , is_safe = True )
    def custom_sql_for_model ( model , style , connection ) :
          raise TemplateSyntaxError ( "'regroup' tag takes five arguments" )
   def display ( self ) :
 return '%02d' % self . G ( )
       sites = [ ]
  final_attrs = self . build_attrs ( attrs , type = self . input_type , name = name )
   def to_python ( self , value ) :
 for attr in _urllib_error_moved_attributes :
  if filename not in _mtimes :
   return self . parent_instance
   def urlquote_plus ( url , safe = '' ) :
                  if settings . DEBUG :
 tt = _time . localtime ( stamp )
  return mark_safe ( contents )
 if errors :
  func = getattr ( func , '_decorated_function' , func )
              return func ( * args , ** kwargs )
  if filename . endswith ( "$py.class" ) :
import collections
   def render ( self , context ) :
 from wsgiref . util import FileWrapper
            if 'forloop' in context :
   generic_lang_code = lang_code . split ( '-' ) [ 0 ]
 rfcdate = formatdate ( epoch_seconds )
   return value [ slice ( * bits ) ]
          return "<%s: %s>" % ( self . __class__ . __name__ , self )
   def compile_filter_error ( self , token , e ) :
          if value in self . empty_values :
 digits = [ six . text_type ( digit ) for digit in reversed ( digits ) ]
  return IfNode ( conditions_nodelists )
              raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
 from django . core . management import call_command
 import binascii
 if not answer :
          try :
   for module_to_search in args :
  except ( KeyError , TypeError ) :
  def add_arguments ( self , parser ) :
              return host
              if hasattr ( self . data , 'tzinfo' ) and self . data . tzinfo :
              return type ( self ) . __next__ ( self )
              package_path = package . __path__
 break
              return ''
   self . end_serialization ( )
                  attrs [ 'max' ] = self . max_value
 if settings . USE_TZ :
          if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) :
          while True :
 bpython . embed ( )
  else :
          return self . s
 state [ 'cookies' ] = str ( state [ 'cookies' ] )
 from django . db import connections , DEFAULT_DB_ALIAS
 kwargs [ 'error_messages' ] = error_messages
  except TemplateDoesNotExist as e :
   def D ( self ) :
 if '%(truncated_text)s' in truncate :
  self . default_args = default_args or { }
   return obj
                  if self . cleaned_data . get ( name ) is not None and self . cleaned_data [ name ] . _state . adding :
      def strftime ( self , fmt ) :
   re_words = re . compile ( r'<.*?>|((?:\w[-\w]*|&.*?;)+)' , re . U | re . S )
     html = { }
                  file = BytesIO ( data . read ( ) )
  return [ source [ 0 ] ] , [ params ]
 db = options . pop ( 'using' , DEFAULT_DB_ALIAS )
              if settings . STATIC_URL is None :
   def render_js ( self ) :
                  self . stderr . write ( "App '%s' could not be found. Is it in INSTALLED_APPS?" % app_label )
              if self . decimal_places is not None :
              self . remove ( item )
 self . merge ( translation )
  else :
 html [ 'day' ] = self . create_select ( name , self . day_field , value , day_val , choices , self . day_none_value )
              self . first = left
  def __init__ ( self , obj , m2m_data = None ) :
              token = Token ( TOKEN_TEXT , token_string )
                          file_ , _ , _ = imp . find_module ( module_name , [ entry ] )
  sites . append ( j )
                  result . parent = self
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
 self . _current = None
 id_ = final_attrs . get ( 'id' , None )
   def render ( self , name , value , attrs = None ) :
          self . new_objects = [ ]
 def is_hidden ( self ) :
 from django . test . utils import get_runner
              args . append ( self . choices )
              raise MultiValueDictKeyError ( repr ( key ) )
   def handle_m2m_field ( self , obj , field ) :
 if protocol != 'both' and unpack_ipv4 :
 from django . utils . encoding import smart_text , is_protected_type
     def formset_factory ( form , formset = BaseFormSet , extra = 1 , can_order = False ,  can_delete = False , max_num = None , validate_max = False ,  min_num = None , validate_min = False ) :
 message_context = None
   def discard ( self , item ) :
   else :
              sys . stderr . write ( "fork #2 failed: (%d) %s\n" % ( e . errno , e . strerror ) )
                return self . flatten ( ) == other . flatten ( )
  elif ch == '|' :
   elif len ( key ) == 1 and type ( key [ 0 ] ) in fasttypes :
              if event . path . endswith ( '.mo' ) :
                      if value == k2 or text_value == force_text ( k2 ) :
   def as_ul ( self ) :
  connection = connections [ options [ 'database' ] ]
                      return False
 self . active_writers = 0
              return lang_code
   if errors :
   def compile_function_error ( self , token , e ) :
              raise TemplateSyntaxError ( "'for' tag received an invalid argument:"  " %s" % token . contents )
 result . append ( Group ( ( ( "%%(%s)s" % name ) , name ) ) )
 if converter :
 if isinstance ( self . data , datetime . datetime ) and is_aware ( self . data ) :
 @ stringfilter
   def start_object ( self , obj ) :
              data = self . form . initial . get ( self . name , self . field . initial )
              raise TemplateSyntaxError ( "%s requires %d arguments, %d provided" %  ( name , alen - dlen , plen ) )
                      lineno_comment_map . setdefault ( t . lineno ,  [ ] ) . append ( t . contents )
   def flush ( self ) :
 add_to_builtins ( 'django.template.defaultfilters' )
   if self . can_delete :
  generic_lang_code = lang_code . split ( '-' ) [ 0 ]
  if filters :
 if not extra_context :
  token = Token ( TOKEN_COMMENT , content )
                      del self [ key ]
  __all__ = [ 'SelectDateWidget' ]
 if isinstance ( choice_label , ( tuple , list ) ) :
                error = ValidationError ( error )
    lexer = JsLexer ( )
 all_unique_checks = all_unique_checks . union ( set ( unique_checks ) )
              widget = self . field . widget
      from django . conf import settings
          for base in bases [ : : - 1 ] :
          self . name = name
              raise TypeError ( "can't delete _wrapped." )
   @ property
              return output
 return value . replace ( " " , "\xa0" )
 contents = contents or self . label
   @ classmethod
 try :
  else :
          return tuple ( a for a in WRAPPER_ASSIGNMENTS if hasattr ( fn , a ) )
          __str__ = new_method_proxy ( str )
  if prefix is None :
  except ImportError :
                  bits = normalize ( p_pattern )
      status_code = 400
 missing_args_message = "You must provide an application name."
              data = [ ]
 bf = self [ name ]
  from django . http import Http404
  except UnicodeError :
  ip_str = _sanitize_ipv4_mapping ( ip_str )
   def has_changed ( self ) :
  cycle_iter = context . render_context [ self ]
 for bit in smart_split_re . finditer ( text ) :
                  sys . exit ( 0 )
    class DeserializationError ( Exception ) :
 if isinstance ( context , Context ) :
                      c = subject [ i ]
                      url = reverse ( project_name + '.' + view_name ,  args = args , kwargs = kwargs ,  current_app = context . current_app )
 _len = len
    class HttpResponsePermanentRedirect ( HttpResponseRedirectBase ) :
          return ZERO
              name = self . html_name
              title = list_ [ i ]
          super ( HttpResponseNotModified , self ) . __init__ ( * args , ** kwargs )
 values = _itervalues
              hextets [ index ] = '0'
  except KeyError :
 FILE = "file"
      def get_unbound_function ( unbound ) :
    def int_to_base36 ( i ) :
   def as_hidden ( self , attrs = None , ** kwargs ) :
 contents = format_html ( '<label{0}>{1}</label>' , attrs , contents )
 parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
              return _ ( 'p.m.' )
  except ValueError :
 filters . append ( ( filter_func , args ) )
              return self . create_var ( token )
                   self . handle_startendtag ( tag , attrs )
    class ContextDict ( dict ) :
              try :
   def _init_translation_catalog ( self ) :
                use_null_fallback = False
  self . lookups = tuple ( var . split ( VARIABLE_ATTRIBUTE_SEPARATOR ) )
 @ stringfilter
                  if self . require_all_fields :
  else :
          pass
  return t
  def handle_field ( self , obj , field ) :
    for cat in item [ 'categories' ] :
                  raise CommandError ( "No migrations present for: %s" % ( ", " . join ( invalid_apps ) ) )
          parent = ( form . Meta , object )
          for var in self . vars :
  else :
          if not value :
      def __init__ ( self ) :
 @ stringfilter
 original_path = os . path . join ( tmpdir , 'original' )
 latest_date = None
          self . target , self . expression = target , expression
 super ( CharField , self ) . __init__ ( * args , ** kwargs )
                                  current = settings . TEMPLATE_STRING_IF_INVALID
    self . enter_command ( command , token )
   def add_library ( self , lib ) :
              handler . addQuickElement ( "ttl" , self . feed [ 'ttl' ] )
   def value ( self ) :
  if best_doublecolon_end == len ( hextets ) :
    def __repr__ ( self ) :
 from django . dispatch import receiver
  elif action == "unapply_success" :
      Signer = import_string ( settings . SIGNING_BACKEND )
   def __ne__ ( self , other ) :
          value = dict . pop ( self , key , default )
      compare = lambda self , a , b : a > b
      class FirstOfNode ( Node ) :
     class DefusedXmlException ( ValueError ) :
  return base , ext
   def invalid_block_tag ( self , token , command , parse_until = None ) :
 self . cdata_tag = None
 if lang_code in _supported and lang_code is not None and check_for_language ( lang_code ) :
 def get_digit ( value , arg ) :
              pot_path = os . path . join ( path , '%s.pot' % str ( self . domain ) )
              return self . DSTOFFSET
 return self . cleaned_data
  else :
  else :
                  msgs = self . copy_plural_forms ( msgs , locale )
 if new_attr is None :
                                  sql . extend ( connection . creation . sql_for_pending_references ( refto , no_style ( ) , pending_references ) )
   def __getitem__ ( self , key ) :
 if django . VERSION [ - 2 ] != 'final' :
  def __init__ ( self , redirect_to , * args , ** kwargs ) :
          i = p . find ( b'=' )
          neg , value = self . convert ( s , self . digits , self . decimal_digits , self . sign )
              for result , params in possibility :
      def __init__ ( self , var , name , nodelist , extra_context = None ) :
    def render ( self ) :
  except TypeError :
              return True
 if j == - 1 :
 import sys
 bits = token . split_contents ( )
          value = datetime_safe . new_datetime ( value )
  cache_key = _generate_cache_header_key ( key_prefix , request )
   from django . apps import apps
  except KeyError :
   def __str__ ( self ) :
  except IOError as e :
                  try :
 opfunc . __doc__ = getattr ( int , opname ) . __doc__
 return { }
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
 from inspect import getargspec , getcallargs
  elif self . verbosity > 0 :
 self . _empty = False
                              message_context = message_context . strip ( '"' )
                  stream . unget ( chunk [ - rollback : ] )
           state_frame = self . _get_context_stack_frame ( context )
   def rss_attributes ( self ) :
              lookup_view_s = "%s.%s" % ( m , n )
 def write ( self , s ) :
   @ property
    @ register . tag
  return ustring_re . sub ( fix , s )
  else :
              neg = 0
  return super ( TimeField , self ) . to_python ( value )
 chunks . append ( bytes )
 if self . takes_context :
  if cache_choices is not None :
   if __name__ == '__main__' :
  if name is not None :
                              self . handle_fk_field ( obj , field )
 from django . utils import six
  else :
 if not os . path . isdir ( basedir ) :
     class ExtendsNode ( Node ) :
 def errors ( self ) :
    def __iter__ ( self ) :
      from functools import lru_cache
 module_values = set ( sys . modules . values ( ) )
                     return FILE_INPUT_CONTRADICTION
    if not only_initial :
          if self . _wrapped is empty :
          return self . var
   return value
   class Loader ( BaseLoader ) :
 from django . utils . text import get_text_list
 one_percent_re = re . compile ( r"""(?<!%)%(?!%)""" )
 cc = dict ( dictitem ( el ) for el in cc )
     class TextInput ( Input ) :
   if getattr ( func , 'expects_localtime' , False ) :
    obj = base . build_instance ( Model , data , self . db )
 trimmed = False
 super ( SplitDateTimeWidget , self ) . __init__ ( widgets , attrs )
 from django . utils . html import format_html , format_html_join , escape
                      week_number -= 1
              try :
 prefix = d [ 'prefix' ]
  def copy ( self ) :
     class NumberInput ( TextInput ) :
          msg = (  "WSGI application '%(app_path)s' could not be loaded; "  "Error importing module: '%(exception)s'" % ( {  'app_path' : app_path ,  'exception' : e ,  } )  )
 while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) :
          self . config = ConvertingDict ( config )
       def __init__ ( self , object_list , number , paginator ) :
          raise
                  return True
    return result
              if ignore :
    __dir__ = new_method_proxy ( dir )
    def end_object ( self , obj ) :
                   continue
 self . notation_name = notation_name
      def __init__ ( self , attrs = None , check_test = None ) :
                  raise EmptyPage ( 'That page contains no results' )
  except IndexError :
              return super ( DjangoJSONEncoder , self ) . default ( o )
  def nud ( self , parser ) :
 for item , args in zip ( result , result_args ) :
   filepath = parser . compile_filter ( bits [ 1 ] )
    if callable ( callback ) :
     class InterBoundaryIter ( six . Iterator ) :
                      if not pythonrc :
 self . position = 0
    @ register . tag
  stats [ MISSES ] += 1
   importer = __import__
   return BlockNode ( block_name , nodelist )
                  local , domain = middle . rsplit ( '@' , 1 )
                                          cursor . execute ( sql )
              if isinstance ( form . _meta . fields , tuple ) :
              return None
  else :
 if not func_name :
  else :
          fs_encoding = sys . getfilesystemencoding ( ) or sys . getdefaultencoding ( )
 @ stringfilter
              exc_info = sys . exc_info ( )
 from functools import partial
 toks = self . toks
                       exhaust ( stream )
  from django . core . management . base import AppCommand
          if 'forloop' in context :
  def __init__ ( self , queryset , cache_choices = None , required = True ,  widget = None , label = None , initial = None ,  help_text = '' , * args , ** kwargs ) :
                      arg_vals . append ( mark_safe ( arg ) )
 return 'initial-%s' % self . add_prefix ( field_name )
   else :
 value = '.' . join ( reversed ( parts ) )
     def unregister_serializer ( format ) :
          if self . field . empty_label is not None :
   else :
   optimizer = MigrationOptimizer ( )
   if item [ 'updateddate' ] is not None :
 return '%s-%s-%s GMT' % ( rfcdate [ : 7 ] , rfcdate [ 8 : 11 ] , rfcdate [ 12 : 25 ] )
  cache_key = _generate_cache_header_key ( key_prefix , request )
  from datetime import datetime
                  try :
 year_val , month_val , day_val = v . year , v . month , v . day
  def add_arguments ( self , parser ) :
  if not dictionary :
 retval = self
          assert len ( version ) == 5
       major = get_major_version ( version )
              repr_attr = self . _setupfunc
   @ property
    elif finder . find_module ( name ) :
 return sys . modules [ name ]
 s = s . encode ( 'utf-8' )
              if new_mod is None :
    def save ( self , commit = True ) :
 from django . utils import six
  else :
 def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None ,  initial = None , error_class = ErrorList ) :
          neg , value = self . convert ( i , self . decimal_digits , self . digits , '-' )
  else :
   def __repr__ ( self ) :
          self . _archive = tarfile . open ( file )
              if not nesting :
 origin = make_origin ( display_name , self . load_template_source , template_name , template_dirs )
     class TextNode ( Node ) :
   def as_textarea ( self , attrs = None , ** kwargs ) :
                      for f in files :
 if _supported is None :
                      s = six . text_type ( s , encoding , errors )
                  item_date = item . get ( date_key )
       def __init__ ( self , name ) :
 self . error_class = error_class
          t = get_template ( template_name , dirs )
 statements = sql_custom ( app_config , self . style , connection )
                         self . handle_file_complete ( old_field_name , counters )
 from django . utils . encoding import force_bytes , force_text , force_str , iri_to_uri
     @ register . filter ( is_safe = False )
    if PY3 :
    @ register . filter ( is_safe = True )
   def close ( self ) :
 block_re = re . compile ( r"""^\s*blocktrans(\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?')))?(?:\s+|$)""" )
 return MONTHS_3 [ self . data . month ] . title ( )
 raise NotImplementedError ( 'Subclasses must implement this method.' )
     if m :
                      attrvalue = None
  else :
   next = advance_iterator
   DEFAULT_MAX_NUM = 1000
 def date ( value , arg = None ) :
  migration_string = writer . as_string ( )
 import errno
 def length ( value ) :
  smart_unicode = smart_text
 s = force_text ( s ) . strip ( ) . replace ( ' ' , '_' )
 if second_item == [ ] :
      help = "Prints the CREATE TABLE SQL statements for the given app name(s)."
 _meth_self = "__self__"
  if BLOCK_CONTEXT_KEY not in context . render_context :
  def transform ( self , node , results ) :
  if isinstance ( s , six . text_type ) :
                  raise ImproperlyConfigured (  "Creating a ModelForm without either the 'fields' attribute "  "or the 'exclude' attribute is prohibited; form %s "  "needs updating." % name  )
 if ch == '(' :
          return t . render ( context_instance )
          alter_sql = [ ]
  from django . db . models . fields . related import ManyToManyField
          pass
              try :
              if not package :
          return len ( value )
    def value_from_datadict ( self , data , files , name ) :
   return ip_str . rsplit ( ':' , 1 ) [ 1 ]
   def get_nodes_by_type ( self , nodetype ) :
   try :
  setattr ( cls , k , meth )
          if proto >= 2 :
          sys . modules [ __name__ + ".moves." + attr . name ] = attr
 if kw [ 'microsecond' ] :
          asvar = bits [ - 1 ]
                  disable_existing = config . pop ( 'disable_existing_loggers' , True )
 from django . http . request import ( HttpRequest , QueryDict ,  RawPostDataException , UnreadablePostError , build_request_repr )
              return 1 , ch2
    class DateTimeInput ( DateTimeBaseInput ) :
  output = [ ]
  mask = (  pyinotify . IN_MODIFY |  pyinotify . IN_DELETE |  pyinotify . IN_ATTRIB |  pyinotify . IN_MOVED_FROM |  pyinotify . IN_MOVED_TO |  pyinotify . IN_CREATE  )
          self . token = token
 raise NotImplementedError ( 'subclasses of Tokenparser must provide a top() method' )
              orig = getattr ( self . parent_instance , self . to_field )
                  config [ 'mailhost' ] = self . as_tuple ( config [ 'mailhost' ] )
                  import_module ( '%s.%s' % ( app_config . name , module_to_search ) )
 for root in settings . ALLOWED_INCLUDE_ROOTS :
 import sys
   def __iter__ ( self ) :
 translation = self . _new_gnu_trans ( localedir )
 if run_syncdb and executor . loader . unmigrated_apps :
          self . context . pop ( )
   def _load_post_and_files ( self ) :
 from django . utils . translation import get_language
                  form = self . forms [ i ]
                              self . handle_field ( obj , field )
   def unget ( self , bytes ) :
 new_context . _reset_dicts ( values )
  import re
    @ register . filter ( is_safe = True )
                  obj = mark_safe ( new_obj )
          if not value and self . required :
  return ' ' . join ( words )
 pop = complain
      def exhaust ( stream_or_iterable ) :
     def __len__ ( self ) :
  var_name = bits [ 5 ]
 DARK_PALETTE = 'dark'
      def __init__ ( self , filepath , parsed ) :
     class StringOrigin ( Origin ) :
 import time
     def _add_doc ( func , doc ) :
              return self . paginator . count
      is_usable = True
 if id_ :
  try :
 FormSet = formset_factory ( form , formset , extra = extra , min_num = min_num , max_num = max_num ,  can_order = can_order , can_delete = can_delete ,  validate_min = validate_min , validate_max = validate_max )
              pass
              return 'st'
              use_func = True
 if value in self . empty_values :
    def _start_relational_field ( self , field ) :
          data = {  "model" : smart_text ( obj . _meta ) ,  "fields" : self . _current ,  }
                  return type . __new__ ( cls , name , ( ) , d )
   def update ( self , * args , ** kwargs ) :
 def default ( self , o ) :
        @ register . filter ( is_safe = True )
    return mark_safe ( '' . join ( force_text ( n ) for n in nodelist ) )
    def deactivate_all ( ) :
                cached_loaders = [ ]
  if not settings . DEBUG and not settings . ALLOWED_HOSTS :
 if self . timezone and self . timezone . dst ( self . data ) :
   elif ch == '(' :
 node . replace ( decorated )
              return self . empty_form . is_multipart ( )
              if not len ( empty_label ) == 3 :
                  raise ValueError ( 'empty_label list/tuple must have 3 elements.' )
 _cached_filenames += new_filenames
              super ( Serializer , self ) . handle_field ( obj , field )
 nofollow_attr = ' rel="nofollow"' if nofollow else ''
 gettext . _translations = { }
          try :
 self . xgettext_options = self . xgettext_options [ : ] + [ '--no-wrap' ]
              message = list ( error ) [ 0 ]
    ctypes , opts = parse_header ( content_type . encode ( 'ascii' ) )
              return self . forms [ 0 ] . is_multipart ( )
  return output
              object_data . update ( initial )
  return result . lower ( )
          if child . nodeType == child . TEXT_NODE or child . nodeType == child . CDATA_SECTION_NODE :
    class JsonResponse ( HttpResponse ) :
  from django . utils import six
 if not self . initial_forms :
   def render ( self , name , value , attrs = None ) :
       from django . db . migrations . loader import MigrationLoader
              raise MultiPartParserError ( 'Invalid Content-Type: %s' % content_type )
                    continue
              raise AttributeError ( "This method is available only on the view class." )
   def _ipython_pre_011 ( self ) :
 result = ungettext ( * msgs_with_ctxt )
                      extracted = self . _archive . extractfile ( member )
 leading = self . has_leading_dir ( x . name for x in members )
 args = '[fixture ...]'
 if template is None :
          if part in PALETTES :
   get_format_lazy = lazy ( get_format , six . text_type , list , tuple )
 @ stringfilter
 for iso_input in ISO_INPUT_FORMATS . get ( format_type , ( ) ) :
 try :
  except IndexError :
              return self . hashvalue
      return force_text ( ngettext ( singular , plural , number ) )
 for form in valid_forms :
 if content_disposition :
    def quote_etag ( etag ) :
 self . _errors = [ ]
                      if varargs is None :
              return hash ( self . __cast ( ) )
                  self . _callback_strs . add ( pattern . _callback_str )
 from django . utils . encoding import force_str , force_text , iri_to_uri
    def __iter__ ( self ) :
      class BaseInlineFormSet ( BaseModelFormSet ) :
     def resolve_variable ( path , context ) :
 raise TemplateDoesNotExist ( name )
   class Module_six_moves_urllib_request ( _LazyModule ) :
          return unbound . im_func
 from itertools import chain
 def writer ( self ) :
  if template_tuple is TemplateDoesNotExist :
              if field not in self . errors :
   if not last_row . endswith ( row_ender ) :
              self . reason_phrase = REASON_PHRASES . get ( self . status_code ,  'UNKNOWN STATUS CODE' )
              continue
    if six . PY3 :
              raise AttributeError ( "no such move, %r" % ( name , ) )
 try :
   _format_cache [ cache_key ] = val
  else :
              register_serializer ( format , settings . SERIALIZATION_MODULES [ format ] , serializers )
    return self [ key ]
   class Command ( AppCommand ) :
 convert = {  '__lt__' : [ ( '__gt__' , lambda self , other : not ( self < other or self == other ) ) ,  ( '__le__' , lambda self , other : self < other or self == other ) ,  ( '__ge__' , lambda self , other : not self < other ) ] ,  '__le__' : [ ( '__ge__' , lambda self , other : not self <= other or self == other ) ,  ( '__lt__' , lambda self , other : self <= other and not self == other ) ,  ( '__gt__' , lambda self , other : not self <= other ) ] ,  '__gt__' : [ ( '__lt__' , lambda self , other : not ( self > other or self == other ) ) ,  ( '__ge__' , lambda self , other : self > other or self == other ) ,  ( '__le__' , lambda self , other : not self > other ) ] ,  '__ge__' : [ ( '__le__' , lambda self , other : ( not self >= other ) or self == other ) ,  ( '__gt__' , lambda self , other : self >= other and not self == other ) ,  ( '__lt__' , lambda self , other : not self >= other ) ]  }
  final_attrs = self . build_attrs ( attrs )
  if whitelist is not None :
 import warnings
              yield k
              return ""
                  raise UnrecognizedArchiveFormat (  "File object not a recognized archive format." )
 from django . utils . encoding import force_str , force_text , DEFAULT_LOCALE_ENCODING
 from django . core . exceptions import ImproperlyConfigured , ViewDoesNotExist
   class TemplateCommand ( BaseCommand ) :
 return self . expression . resolve ( context , True )
          if sender and getattr ( sender , 'handles_files' , False ) :
 return tpl . format ( self . name , self . sysid , self . pubid )
 from django . core . serializers . python import Deserializer as PythonDeserializer
 return mark_safe ( _urlize ( value , trim_url_limit = int ( limit ) , nofollow = True ,  autoescape = autoescape ) )
   @ property
  else :
  else :
      return getattr ( self , _assertCountEqual ) ( * args , ** kwargs )
    def get_serializer_formats ( ) :
           unicode_value = force_text ( value , strings_only = True )
    obj = base . build_instance ( Model , data , db )
                  raise CommandError ( "%r is not a valid port number." % self . port )
  last_bit = self . template_string [ upto : ]
   return result
                                      handler . setLevel ( _checkLevel ( level ) )
 def pluralize ( value , arg = 's' ) :
 return AssignmentNode ( takes_context , args , kwargs , target_var )
 def callback ( self ) :
   if not changes and self . verbosity >= 1 :
    self . xml . startElement ( "object" , attrs )
 for i , widget in enumerate ( self . widgets ) :
  from __future__ import unicode_literals
   if fset is not None :
          return self . load_template ( template_name , template_dirs )
  errors . extend ( e . error_list )
 def dictsort ( value , arg ) :
  FILE_MODIFIED = 1
              repr_attr = self . _wrapped
     @ register . filter ( is_safe = False )
  try :
              pk_key = "%s-%s" % ( self . add_prefix ( i ) , self . model . _meta . pk . name )
    else :
              self . validate_unique ( )
   __all__ = ( 'BaseForm' , 'Form' )
   def resolve ( self , context , ignore_failures = False ) :
                  if self . verbosity > 0 :
               try :
               pass
     class ZipArchive ( BaseArchive ) :
          _load_serializers ( )
 pass
   def urlunquote ( quoted_url ) :
  Module_six_moves_urllib_response . _moved_attributes = _urllib_response_moved_attributes
              max_width = min ( ( line . endswith ( '\n' ) and width + 1 or width ) , width )
 import warnings
  for i , ext in enumerate ( ext_list ) :
  else :
              form . fields [ DELETION_FIELD_NAME ] = BooleanField ( label = _ ( 'Delete' ) , required = False )
  def __init__ ( self , config ) :
 while 1 :
  strip_tags = allow_lazy ( strip_tags )
      from collections import UserList
   def unescape_entities ( text ) :
                  handler . addQuickElement ( "email" , item [ 'author_email' ] )
              return [ ]
  return cls
 orig_vars . pop ( '__dict__' , None )
 for match in tag_re . finditer ( self . template_string ) :
 from django . utils import formats
    return ''
  factory = klass
                  hits = max ( 1 , self . count - self . orphans )
  return parser . _namedCycleNodes [ name ]
           result = ungettext ( singular , plural , number )
 from django . forms . utils import flatatt , ErrorDict , ErrorList
          __call__ = type . __call__
  finally :
 valid_forms = [ form for form in self . forms if form . is_valid ( ) and form not in forms_to_delete ]
              getattr ( self , 'add_' + name ) ( media_attrs . get ( name , None ) )
              if block_context is None :
          wsgi_opts = {  'maxSpare' : int ( options [ "maxspare" ] ) ,  'minSpare' : int ( options [ "minspare" ] ) ,  'maxChildren' : int ( options [ "maxchildren" ] ) ,  'maxRequests' : int ( options [ "maxrequests" ] ) ,  }
 substitutions [ 'input' ] = super ( ClearableFileInput , self ) . render ( name , value , attrs )
 if result :
                      continue
  if filename . endswith ( ".pyc" ) or filename . endswith ( ".pyo" ) :
   def pop ( self , key , * args ) :
 from django . utils . six import StringIO
  elif item [ "author_email" ] :
              related = getattr ( obj , field . name )
                         self . stdout . write ( self . style . MIGRATE_HEADING ( "Full migrations file '%s':" % writer . filename ) + "\n" )
  self . dicts . append ( other_dict )
              media = media + field . widget . media
 self . validate_name ( project_name , "project" )
  def __init__ ( self , takes_context , args , kwargs ) :
              return _cached_filenames
 none_value = ( 0 , '---' )
              form = ManagementForm ( auto_id = self . auto_id , prefix = self . prefix , initial = {  TOTAL_FORM_COUNT : self . total_form_count ( ) ,  INITIAL_FORM_COUNT : self . initial_form_count ( ) ,  MIN_NUM_FORM_COUNT : self . min_num ,  MAX_NUM_FORM_COUNT : self . max_num  } )
              cache_choices = False
   queryset = property ( _get_queryset , _set_queryset )
 for app_config in apps . get_app_configs ( ) :
 if m . group ( 1 ) :
  else :
 super ( QueryDict , self ) . appendlist ( key , value )
 from django . utils import six
 return time_str + '%+03d%02d' % ( hour , minute )
          LocaleRegexProvider . __init__ ( self , regex )
 if value is None :
 from django . utils import six
  else :
 from django . utils . translation import ugettext , ungettext
     class ForNode ( Node ) :
 def path ( self ) :
          handler . addQuickElement ( "title" , self . feed [ 'title' ] )
 from io import BytesIO
 six . reraise ( ImproperlyConfigured , ImproperlyConfigured ( msg ) ,  sys . exc_info ( ) [ 2 ] )
                  raise TemplateSyntaxError ( "Only 'silent' flag is allowed after cycle's name, not '%s'." % args [ - 1 ] )
   def __repr__ ( self ) :
            media = sorted ( self . _css . keys ( ) )
                  content = '' . join ( comment )
 return _get_timezone_name ( get_current_timezone ( ) )
          stream_or_string = stream_or_string . read ( )
              for name , value in props . items ( ) :
 non_capturing_groups = [ ]
           logging . captureWarnings ( True )
      def render ( self , context ) :
          if data is None :
              self . _update_errors ( e )
  except ValidationError :
                  self . interesting = re . compile ( r'</\s*%s\s*>' % tag . lower ( ) , re . I )
  self . _init_translation_catalog ( )
 norm_patterns = [ p [ : - len ( dir_suffix ) ] if p . endswith ( dir_suffix ) else p for p in self . ignore_patterns ]
 if not match :
              return match . group ( 0 )
    def inclusion_tag ( self , file_name , context_class = Context , takes_context = False , name = None ) :
 for loader in self . loaders :
   return singular_suffix
                  raise TemplateSyntaxError ( "Could not parse some characters: "  "%s|%s|%s" %  ( token [ : upto ] , token [ upto : start ] ,  token [ start : ] ) )
 import sys
          match = self . regex . search ( path )
                          var_obj = Variable ( constant ) . resolve ( { } )
 for field in self . fields :
 @ stringfilter
 return value . replace ( '\\' , '\\\\' ) . replace ( '"' , '\\"' ) . replace ( "'" , "\\'" )
              try :
  sys . exit ( 0 )
                      try :
 import time
 for line in msgs . split ( '\n' ) :
   def handle_app_config ( self , app_config , ** options ) :
   offset = self . timezone . utcoffset ( self . data )
               return context . render_context
    raise TemplateDoesNotExist ( ', ' . join ( not_found ) )
  _js_escapes = {  ord ( '\\' ) : '\\u005C' ,  ord ( '\'' ) : '\\u0027' ,  ord ( '"' ) : '\\u0022' ,  ord ( '>' ) : '\\u003E' ,  ord ( '<' ) : '\\u003C' ,  ord ( '&' ) : '\\u0026' ,  ord ( '=' ) : '\\u003D' ,  ord ( '-' ) : '\\u002D' ,  ord ( ';' ) : '\\u003B' ,  ord ( '\u2028' ) : '\\u2028' ,  ord ( '\u2029' ) : '\\u2029'  }
                              title += " (%s squashed migrations)" % len ( graph . nodes [ plan_node ] . replaces )
 result = self . configurator . convert ( value )
   super ( Command , self ) . handle ( 'app' , app_name , target , ** options )
          try :
                  if isinstance ( field , FileField ) :
 def upper ( value ) :
   class ManagementForm ( Form ) :
    @ register . filter ( is_safe = False )
  if data is None :
 return value . strftime ( format )
   output . append ( normal_row % {  'errors' : force_text ( bf_errors ) ,  'label' : force_text ( label ) ,  'field' : six . text_type ( bf ) ,  'help_text' : help_text ,  'html_class_attr' : html_class_attr ,  'field_name' : bf . html_name ,  } )
              raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
  styles = instructions . split ( ',' )
 if six . PY3 and isinstance ( val1 , bytes ) and isinstance ( val2 , bytes ) :
 if self . isolated_context :
 substitutions [ 'clear' ] = CheckboxInput ( ) . render ( checkbox_name , False , attrs = { 'id' : checkbox_id } )
 @ stringfilter
   def extract ( self ) :
 warnings . warn ( msg % ( language , _DJANGO_DEPRECATED_LOCALES [ language ] ) ,  RemovedInDjango19Warning , stacklevel = 2 )
     class Library ( object ) :
  class HTMLParser ( _html_parser . HTMLParser ) :
          super ( CheckboxInput , self ) . __init__ ( attrs )
 self . connector = conn_type
                      g = imatch . group ( 1 )
 try :
    else :
                  return default
              return False
              raise TypeError ( 'formfield_callback must be a function or callable' )
     def Deserializer ( object_list , ** options ) :
 while s [ : 1 ] == b';' :
    def __delattr__ ( self , name ) :
  import django
      def abspathu ( path ) :
              apps . get_model ( 'auth' , 'Permission' )
      @ total_ordering
  else :
  elif isinstance ( template , six . string_types ) :
              return
 try :
 import warnings
  def to_python ( self , value ) :
 return self . cleaned_data
    def _add_fallback ( self ) :
          return
  else :
      def _set_response_etag ( response ) :
 cls = extension_map . get ( ext )
   def __reversed__ ( self ) :
   __contains__ = has_key
 self . unget ( chunk [ remaining : ] )
              if can_fail :
 self . xml . characters ( smart_text ( key_value ) )
 state = self . state
 code = 'limit_value'
 for i , char in enumerate ( text ) :
 if name is None :
                  t = Template ( output , name = filepath )
                  return Media ( definition )
    exec_ ( """def reraise(tp, value, tb=None):     raise tp, value, tb """ )
                  values = [ ]
 def __init__ ( self , convert_charrefs = False , ** kwargs ) :
  inner_result , inner_args = [ ] , [ ]
      _meth_func = "im_func"
   def is_multipart ( self ) :
  elif name is not None and compile_function is None :
 for val in value :
from collections import defaultdict
  else :
  if isinstance ( value , list ) :
   flup_module = 'server.' + options [ 'protocol' ]
    daemon_kwargs = { }
              return self . data . hour - 12
                      old_handler = None
  return serializer ( ) . loads ( data )
  token . lineno = self . lineno
      return ungettext ( singular , plural , number )
 request = sys . modules [ __name__ + ".moves.urllib_request" ]
 def _dec ( * args , ** kwargs ) :
   if options [ "pidfile" ] :
 import sys
  upto = match . end ( )
 needs_multipart_form = True
 def bound_func ( * args2 , ** kwargs2 ) :
  else :
 pks = set ( force_text ( getattr ( o , key ) ) for o in qs )
  try :
  def __init__ ( self , permitted_methods , * args , ** kwargs ) :
 def widthratio ( parser , token ) :
 warnings . warn ( msg , RemovedInDjango19Warning , stacklevel = 2 )
                  self . stdout . write ( "UnicodeDecodeError: skipped file %s in %s" % ( f . file , f . dirpath ) )
  safe_input = isinstance ( text , SafeData )
              return None
  except NameError :
  for __ in xrange ( fill_to - sep ) :
      is_usable = resource_string is not None
 if settings . USE_L10N and isinstance ( value , six . string_types ) :
  forms = [ self . _construct_form ( i ) for i in xrange ( self . total_form_count ( ) ) ]
 return RegroupNode ( target , expression , var_name )
              return LANG_INFO [ generic_lang_code ]
  try :
 if isinstance ( file_name , Template ) :
              if settings . DEBUG :
  def start_serialization ( self ) :
          return date_format ( value , use_l10n = use_l10n )
   def value_from_datadict ( self , data , files , name ) :
  if six . PY2 :
 truncate_text = self . add_truncation_text ( '' , truncate )
  except TypeError :
   def handle ( self , * args , ** options ) :
                          tried . extend ( [ pattern ] + t for t in sub_tried )
  password += b'\x00' * ( inner . block_size - len ( password ) )
              raise KeyError (  "Key %r not found in '%s'" % ( name , self . __class__ . __name__ ) )
 if self . active_readers == 0 and self . waiting_writers != 0 :
  self . content = content
              func = TemplateLoader ( * args )
 del options [ 'liveserver' ]
  else :
    def deserialize ( format , stream_or_string , ** options ) :
     def literals ( choices , prefix = "" , suffix = "" ) :
                  return six . text_type ( s ) . encode ( encoding )
   @ property
 apps = { }
              categories = [ force_text ( c ) for c in categories ]
   def __repr__ ( self ) :
  while RUN_RELOADER :
                  f . close ( )
 break
  def __init__ ( self , * args , ** kwargs ) :
 for node in self :
          parser . add_argument ( 'args' , metavar = 'app_label' , nargs = '*' ,  help = 'Specify the app label(s) to create migrations for.' )
 if autoescape and not safe_input :
 continue
 if isinstance ( s , Promise ) :
                      html_class_attr = ' class="%s"' % css_classes
  try :
  _MovedItems . _moved_attributes = _moved_attributes
    @ lru_cache . lru_cache ( maxsize = None )
 result . _choices = copy . deepcopy ( self . _choices , memo )
              args = [ 'msgattrib' ] + self . msgattrib_options + [ '-o' , pofile , pofile ]
 bmatch = block_re . match ( t . contents )
  return mark_safe ( '' . join ( bits ) )
 six . reraise ( ImproperlyConfigured , ImproperlyConfigured ( msg ) ,  sys . exc_info ( ) [ 2 ] )
       def __init__ ( self , object_list , per_page , orphans = 0 ,  allow_empty_first_page = True ) :
          value = ugettext ( "%s KB" ) % filesize_number_format ( bytes / KB )
  try :
  else :
    class TemplateDoesNotExist ( Exception ) :
     def _get_foreign_key ( parent_model , model , fk_name = None , can_fail = False ) :
 from django . utils . translation import TranslatorCommentWarning , trim_whitespace , LANGUAGE_SESSION_KEY
                  if isinstance ( s , bytes ) :
   class Command ( BaseCommand ) :
 so = open ( out_log , 'a+' , buffering )
 return func
  if settings . USE_ETAGS and not response . has_header ( 'ETag' ) :
  root = nonlocal_root [ 0 ] = oldroot [ NEXT ]
          return path . decode ( fs_encoding )
  elif self . required :
  from django . utils . dates import MONTHS , MONTHS_3 , MONTHS_ALT , MONTHS_AP , WEEKDAYS , WEEKDAYS_ABBR
 logger . handlers = [ ]
 offset = ( len ( self . __starttag_text )  - self . __starttag_text . rfind ( "\n" ) )
 if str_number [ 0 ] == '-' :
              sys . exit ( bool ( failures ) )
          return ( len ( self . queryset ) +  ( 1 if self . field . empty_label is not None else 0 ) )
              if six . PY2 :
 def __init__ ( self , META , input_data , upload_handlers , encoding = None ) :
 from django . core import signals
              raise ValidationError ( self . message , code = self . code )
  res = instance . __dict__ [ self . name ] = self . func ( instance )
  else :
  request_queue_size = 10
  except ImportError :
  except ValueError :
                              raise ValueError ( "Non-reversible reg-exp portion: '(?P%s'" % ch )
   def fastcgi_help ( message = None ) :
    def find_template ( self , name , dirs = None ) :
    def __repr__ ( self ) :
  except IndexError :
         from datetime import date as real_date , datetime as real_datetime
  self . reset ( )
  chars = allow_lazy ( chars )
     def getlist ( self , key ) :
 for attr , value in list ( attrs . items ( ) ) :
     def register_serializer ( format , serializer_module , serializers = None ) :
    return [ self . forms [ i [ 0 ] ] for i in self . _ordering ]
     self . run_validators ( value )
   if sys . version_info [ : 2 ] == ( 2 , 7 ) :
              raise ValidationError ( errors )
 ch , escaped = next ( pattern_iter )
    TRAILING_PUNCTUATION = [ '.' , ',' , ':' , ';' , '.)' , '"' , '\'' ]
  except Exception :
 return getattr ( _urlconfs , "value" , default )
    def is_url ( self , template ) :
 self . var_name = var_name
          raise
 return force_text ( unquote ( force_str ( quoted_url ) ) )
  def __init__ ( self , exception ) :
          self . loopvars , self . sequence = loopvars , sequence
 from django . core . wsgi import get_wsgi_application
 tmpdir = tempfile . mkdtemp ( )
  bits = urlsplit ( location )
 dig2 . update ( dig1 . digest ( ) )
   try :
          try :
 def last ( value ) :
 if isinstance ( error , ValidationError ) :
 if space == 0 :
   create_bound_method = types . MethodType
                      self . can_read . release ( )
   elif var is None :
              return True
                  for key , value_list in other_dict . lists ( ) :
   def as_text ( self ) :
      def filter ( self , record ) :
 defaults = { 'data' : data , 'files' : files , 'auto_id' : auto_id , 'prefix' : prefix }
  except DecimalException :
                  del _error_files [ _error_files . index ( filename ) ]
     class BaseTemporalField ( Field ) :
 _func_globals = "__globals__"
 if isinstance ( value , six . string_types ) :
 new = '#: ' + orig_file [ 2 : ]
   T = [ F ( x ) for x in range ( 1 , l ) ]
              regex = re . compile ( regex , re . UNICODE )
   raise StopIteration
       expression = parser . compile_filter ( var_name +  VARIABLE_ATTRIBUTE_SEPARATOR +  bits [ 3 ] )
 self . files = files or { }
  else :
  except ImportError :
 if parsed . scheme and parsed . scheme not in self . allowed_schemes :
   def add_fields ( self , form , index ) :
 from django . utils . encoding import force_text , iri_to_uri
              self . _populate ( )
   def signature ( self , value ) :
                if not chunk [ : - rollback ] :
   def clear_url_caches ( ) :
    @ register . filter ( is_safe = True )
  javascript_quote = allow_lazy ( javascript_quote , six . text_type )
 self . add_fallback ( default_translation )
     def has_error ( self , field , code = None ) :
   _encoding = None
                  if reduce ( operator . eq , level ) :
   def rfc2822_date ( date ) :
  except UnicodeDecodeError :
 if is_templatized :
                          stats [ HITS ] += 1
   def lex ( self , text ) :
              newline = unicode ( "\n" )
   def _findall ( text , substr ) :
           tupl = d . as_tuple ( )
  for part in plural :
 self . config . configurator = self
  sites = [ ]
   def __str__ ( self ) :
    if questioner . ask_merge ( app_label ) :
  else :
          arg = settings . DATE_FORMAT
          if o in opt_dict :
 from django . core . management . base import BaseCommand , CommandError
     def format ( value , format_string ) :
 bits = token . split_contents ( )
          p = Popen ( args , shell = False , stdout = PIPE , stderr = PIPE ,  close_fds = os . name != 'nt' , universal_newlines = True )
                      self . _changed_data . append ( name )
 converter = self . value_converters . get ( prefix , None )
                  handlers = config . get ( 'handlers' , EMPTY_DICT )
      if defaults is not None :
    self . end_object ( obj )
                  fp . write ( msgs )
 for name in sorted ( handlers ) :
  except Exception as e :
 return value or arg
          super ( CheckboxChoiceInput , self ) . __init__ ( * args , ** kwargs )
 return e
  self . __language = language
              return True
  while current_len <= length :
 if isinstance ( widget , NumberInput ) and 'step' not in widget . attrs :
 return len ( value . split ( ) )
    @ register . filter ( is_safe = True )
      @ register . filter ( expects_localtime = True , is_safe = False )
   self . no_obsolete = options . get ( 'no_obsolete' )
                                  chunk_length = len ( chunk )
 basedirs = [ os . path . abspath ( basedir ) for basedir in basedirs  if os . path . isdir ( basedir ) ]
  if options [ 'errlog' ] :
    except StopUpload as e :
              value = self . coerce ( value )
 return WithNode ( None , None , nodelist , extra_context = extra_context )
  piece = '' . join ( source [ last : pos ] )
   if "\\" in encoded and not encoded . startswith ( '"' ) :
  return '%s%s' % ( ( '\x1b[%sm' % ';' . join ( code_list ) ) , text or '' )
  if settings . TEMPLATE_DEBUG and origin is None :
              return plural_suffix
      from functools import total_ordering
 obj . __class__ = self . __class__
 i = i + 1
              yield obj
 FormSet . fk = fk
              data [ f . name ] = f . value_from_object ( instance )
             root = logging . root
 _meth_self = "im_self"
 def content ( self , value ) :
 if self . is_checked ( ) :
          super ( LoaderOrigin , self ) . __init__ ( display_name )
              self . flags = flags
                      pass
                      shutil . rmtree ( path_to_remove ,  onerror = rmtree_errorhandler )
          raise ValueError ( 'The joined path (%s) is located outside of the base '  'path component (%s)' % ( final_path , base_path ) )
              ext = base [ - 4 : ] + ext
          self . __dict__ . update ( state )
     templatetags_modules_candidates = [ 'django.templatetags' ]
 if match :
                  raise CommandError ( "App '%s' does not have migrations (you cannot selectively sync unmigrated apps)" % app_label )
 raise NotImplementedError ( 'subclasses of Widget must provide a render() method' )
  result = user_function ( * args , ** kwds )
   def to_python ( self , value ) :
  setattr ( self , real_name , getattr ( trans , real_name ) )
 for formset in formsets :
    except OSError :
              return [ self [ k ] for k in self . keyOrder ]
 if app_label not in executor . loader . migrated_apps :
 media = Media ( )
          if not hasattr ( self , '_body' ) :
  fd = pyinotify . INotifyWrapper . create ( ) . inotify_init ( )
   def handle_app_config ( self , app_config , ** options ) :
  except ( ValueError , TypeError ) :
       for app_config in apps . get_app_configs ( ) :
              lang = get_language ( )
 try :
                   def dec ( func ) :
  except VariableDoesNotExist :
                              message_context = message_context . strip ( "'" )
              return ''
 from django . db import models , DEFAULT_DB_ALIAS
                return
 remaining_bits = bits [ 2 : ]
   def writer_leaves ( self ) :
   @ property
  pop_context = False
  incremental = config . pop ( 'incremental' , False )
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
    if '.' not in var and 'e' not in var . lower ( ) :
 code = 'max_value'
          if value is True :
      default_error_messages = {  'invalid' : _ ( 'Enter a number.' ) ,  }
  elif bytes < TB :
   self . creation_counter = Field . creation_counter
  warnings . warn ( "django.utils.unittest will be removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2 )
              return ''
              self . code = code
   def __getitem__ ( self , key ) :
  os . _exit ( 1 )
 if decimal_separator in value :
  def to_python ( self , value ) :
  output_transaction = True
   return key , pdict
          return self . __offset ,
 if hasattr ( self , '_coerce' ) :
                      out . write ( blankout ( t . contents , 'B' ) )
 self . initial = initial or { }
                  self . stdout . write ( "  Installing indexes...\n" )
  potfiles . append ( potfile )
 if self . setting :
   def colorize ( text = '' , opts = ( ) , ** kwargs ) :
   @ property
    _supported = None
          data = obj_dict . pop ( '_data' , { } )
 from django . utils . deprecation import RemovedInDjango19Warning
          return { }
                      message = e
                  raise TemplateSyntaxError ( "%r must be the first tag "  "in the template." % node )
    return LoadNode ( )
                      if f == '__pycache__' :
                      m = self . INDEX_PATTERN . match ( rest )
          value = ugettext ( "%s MB" ) % filesize_number_format ( bytes / MB )
 DEFAULT_PORT = "8000"
 break
    @ register . tag
 decorated = Node ( syms . decorated , [ decorator , klass ] , prefix = node . prefix )
  else :
 if isinstance ( value , ( decimal . Decimal , float ) + six . integer_types ) :
  else :
  name , value = match . groups ( )
  def render ( self , name , value , attrs = None , choices = ( ) ) :
   def templatize ( src , origin = None ) :
      pytz = None
                      raise NoReverseMatch (  "%s is not a registered namespace inside '%s'" %  ( key , ':' . join ( resolved_path ) ) )
   else :
 nodelist_true = parser . parse ( ( 'else' , 'endifchanged' ) )
                          if iso_input not in val :
 def truncatewords ( value , arg ) :
          warnings . warn (  "django.utils.tzinfo.FixedOffset will be removed in Django 1.9. "  "Use django.utils.timezone.get_fixed_timezone instead." ,  RemovedInDjango19Warning )
              if not self . keep_pot :
                                  pass
          lang_code = request . session . get ( LANGUAGE_SESSION_KEY )
  re_formatchars = re . compile ( r'(?<!\\)([aAbBcdDeEfFgGhHiIjlLmMnNoOPrsStTUuwWyYzZ])' )
          return it . next ( )
   else :
 params = { 'limit_value' : self . limit_value , 'show_value' : cleaned }
    else :
              return list ( self . iterkeys ( ) )
 self . translate = False
                  try :
      class _MovedItems ( _LazyModule ) :
              this_year = datetime . date . today ( ) . year
   def validate ( self , value ) :
 emit_pre_migrate_signal ( create_models , self . verbosity , self . interactive , connection . alias )
 self . _errors . append ( form . errors )
              filename = filename [ : - 1 ]
                      response = view_func ( request , * args , ** kwargs )
              self . instance . validate_unique ( exclude = exclude )
 while remaining_bits :
                                  file_ . close ( )
  return path
 if not etags :
   self . _callback_strs = set ( )
          e = TemplateSyntaxError ( msg )
    def set_signed_cookie ( self , key , value , salt = '' , ** kwargs ) :
      def close ( self ) :
      except SkipFile :
          mapping = { 'alpha' : 'a' , 'beta' : 'b' , 'rc' : 'c' }
 def divisibleby ( value , arg ) :
   class EscapeData ( object ) :
    class NoReverseMatch ( Exception ) :
                      pass
  raise TemplateSyntaxError ( error_msg )
 for error in self . as_data ( ) :
  if max_num is None :
                          self . choices . append ( ( full_file , f ) )
 if not self . is_required :
  int_part = int_part_gd [ : : - 1 ]
  date = datetime_safe . new_datetime ( date )
   def deconstruct ( obj ) :
  except ValueError :
 _func_defaults = "__defaults__"
                  regex = force_text ( self . _regex )
    def templatize ( src , origin = None ) :
 return compile_function
      pass
                  self . __prepare_class__ ( )
  if value is not result :
   @ property
          return language . lower ( )
    def get_language_bidi ( ) :
 return self
 return [ field for field in self if field . is_hidden ]
          upload = super ( ClearableFileInput , self ) . value_from_datadict ( data , files , name )
              self . _mark_post_parse_error ( )
  if not os . access ( filename , os . W_OK ) :
              password = digest ( password ) . digest ( )
              translation . activate ( settings . LANGUAGE_CODE )
          for i , line in enumerate ( lines ) :
   def to_python ( self , value ) :
  else :
  else :
 if auto_id and '%s' in smart_text ( auto_id ) :
 ns = "http://www.w3.org/2005/Atom"
  ALL_FIELDS = '__all__'
import warnings
    def __getitem__ ( self , header ) :
   def format ( number , decimal_sep , decimal_pos = None , grouping = 0 , thousand_sep = '' ,  force_grouping = False ) :
 if len ( fks_to_parent ) == 1 :
              for accessor_name , object_list in self . m2m_data . items ( ) :
 if imatch :
  else :
 klass . deconstruct = deconstruct
         if run_syncdb and executor . loader . unmigrated_apps :
                          if message_context :
   def _post_clean ( self ) :
  localize = kwargs . get ( 'localize' , False )
 i = self . pointer
          git_changeset = get_git_changeset ( )
  else :
              raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
 import warnings
      pass
 if self . feed [ 'author_email' ] is not None :
   def start_index ( self ) :
 if not hasattr ( template , 'render' ) :
 from django . utils . translation import ugettext , ungettext_lazy
     class SplitHiddenDateTimeWidget ( SplitDateTimeWidget ) :
          if self . _wrapped is empty :
   def trim_whitespace ( s ) :
   def _ipython_pre_100 ( self ) :
              pass
  url = urlunsplit ( ( scheme , netloc , path , query , fragment ) )
   return otherwise
   class Field ( object ) :
          ch , escaped = next ( input_iter )
          if isinstance ( level , int ) :
      url = ''
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
   def parse_name ( self , fixture_name ) :
     @ classmethod
 def __init__ ( self , * dicts ) :
          combined = Media ( )
              content_type = "%s; charset=%s" % ( settings . DEFAULT_CONTENT_TYPE ,  self . _charset )
   def handle_field ( self , obj , field ) :
 if path . isdir ( expanded_template ) :
 lookups . appendlist ( name , ( new_matches , p_pattern + pat , dict ( defaults , ** pattern . default_kwargs ) ) )
 if not model_identifier :
 output . extend ( [ encode ( k , force_bytes ( v , self . encoding ) )  for v in list_ ] )
   if field . rel . to . _meta . pk . rel :
 if not autoescape or isinstance ( value , SafeData ) :
   class Command ( BaseCommand ) :
 import warnings
              cmp_fmt = parts [ - 1 ]
 if options :
   def u ( s ) :
 if match :
    def as_data ( self ) :
     class SplitDateTimeWidget ( MultiWidget ) :
          return self . META . get ( 'HTTP_X_REQUESTED_WITH' ) == 'XMLHttpRequest'
              name , value = main_value_pair . split ( ':' , 1 )
 id = None
              args = [ 'msgmerge' ] + self . msgmerge_options + [ pofile , potfile ]
          return ''
          self . subject = subject
    for handler in handlers :
                              try :
  else :
 import binascii
  for app_config in app_configs :
 self . extra_context = kwargs . pop ( 'extra_context' , { } )
  elif common_prefix is None :
import os
              digest = hashlib . sha256
       def __init__ ( self , conditions_nodelists ) :
          token_name = TOKEN_MAPPING [ self . token_type ]
          value = ugettext ( "%s TB" ) % filesize_number_format ( bytes / TB )
          return sorted ( value , key = Variable ( arg ) . resolve , reverse = True )
 self . add_item_elements ( handler , item )
          self . tokens . insert ( 0 , token )
  return force_text ( error )
  p_pattern = pattern . regex . pattern
              self . interesting = _html_parser . interesting_normal
 self . fed = [ ]
 return int ( binascii . hexlify ( x ) , 16 )
  if self . verbosity > 0 :
    def clean ( self , value ) :
     def pgettext ( context , message ) :
 from django . core . files import uploadhandler
   if match :
   def _coerce ( self , value ) :
  if exclude is not None :
  elif isinstance ( value , datetime . datetime ) :
    filters = config . get ( 'filters' , EMPTY_DICT )
 handler . endElement ( "rss" )
  value = '%s %s' % tuple ( value )
   if commit and hasattr ( form , 'save_m2m' ) :
 if use_l10n or ( use_l10n is None and settings . USE_L10N ) :
 if domain and validate_host ( domain , settings . ALLOWED_HOSTS ) :
 if callable ( self . limit_choices_to ) :
 t = re . sub ( "([a-z])'([A-Z])" , lambda m : m . group ( 0 ) . lower ( ) , value . title ( ) )
          items = _iteritems
   def simple_tag ( self , func = None , takes_context = None , name = None ) :
  except ( ValueError , TypeError , ValidationError ) :
  import functools
  else :
    @ register . filter
  import hashlib
   def pretty_name ( name ) :
    if self . can_delete and self . _should_delete_form ( form ) :
  from django . forms . utils import *
  if ( locale is None and not exclude and not process_all ) or self . domain is None :
     ZERO = timedelta ( 0 )
  if not expires :
              extra_classes . add ( self . form . required_css_class )
      def _media ( self ) :
                      filter_expression = self . compile_filter ( token . contents )
  return quote ( force_bytes ( iri ) , safe = b"/#%[]=:;$&()+,!?*@'~" )
 sec = int ( m . group ( 'sec' ) )
          raise CommandError ( "App '%s' has migrations. Only the sqlmigrate and sqlflush commands can be used when an app has migrations." % app_config . label )
              invalid_apps = [ ]
 import warnings
              try :
   def render ( self , context ) :
   sign = ''
   self . _rollback = len ( boundary ) + 6
                           from django . core . exceptions import ImproperlyConfigured
  return val
              widget = widget ( )
 id_ = widget . attrs . get ( 'id' ) or self . auto_id
                  week_number = 53
  return doy
  except KeyError :
              if default_list is None :
 pluralmatch = plural_re . match ( t . contents )
 if g [ 0 ] == '"' :
  return True
          return '%s-%s' % ( self . prefix , index )
              current_uri = '{scheme}://{host}{path}' . format ( scheme = self . scheme ,  host = self . get_host ( ) ,  path = self . path )
                  with io . open ( django_po , 'r' , encoding = 'utf-8' ) as fp :
 return _get_timezone_name ( get_default_timezone ( ) )
  if getattr ( func , 'is_safe' , False ) and isinstance ( obj , SafeData ) :
 reporter = ExceptionReporter ( request , is_email = True , * exc_info )
    class Literal ( TokenBase ) :
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
  elif action == "apply_success" :
   if isinstance ( elt , ( Choice , NonCapture ) ) :
 if truncate_len == 0 :
 self . _remaining = length
                       if row_data in seen_data :
 while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) :
 try :
 parser . add_argument ( '--ipv6' , '-6' , action = 'store_true' , dest = 'use_ipv6' , default = False ,  help = 'Tells Django to use an IPv6 address.' )
 if self . errors and hasattr ( self . form , 'error_css_class' ) :
  if arg < 1 :
   del Trans
  import re
          __slots__ = 'hashvalue'
  return self . _regex_dict [ language_code ]
              template = self . template . resolve ( context )
   except KeyboardInterrupt :
          return s . encode ( "latin-1" )
   def write ( self , content ) :
     finally :
  import os
    EMPTY_VALUES = ( None , '' , [ ] , ( ) , { } )
      default_validators = [ validators . validate_slug ]
 from django . utils . encoding import force_bytes
   def is_valid ( self ) :
              return self . _choices
           int2byte = operator . methodcaller ( "to_bytes" , 1 , "big" )
                  if subject [ i ] in ( '"' , "'" ) :
              self . mod = old
              exc_info = record . exc_info
     def set_urlconf ( urlconf_name ) :
 file_list = self . find_files ( "." )
                      raise CommandError ( "More than one migration matches '%s' in app '%s'. Please be more specific." % (  migration_name , app_label ) )
  else :
   def extend_nodelist ( self , nodelist , node , token ) :
 doublecolon_start = - 1
              if isinstance ( self . _regex , six . string_types ) :
  def F ( i ) :
  cache_key = ( format_type , lang )
  create_models = set ( itertools . chain ( * manifest . values ( ) ) )
 if value == self . empty_value or value in self . empty_values :
  if self . flags and not isinstance ( self . regex , six . string_types ) :
          kwargs [ 'safe' ] = safe
 yield buf . read ( )
  else :
   def validate ( self , value ) :
                    input_attrs [ 'id' ] = '%s_%s' % ( id_ , i )
  else :
 def length_is ( value , arg ) :
   def salted_hmac ( key_salt , value , secret = None ) :
 with lock :
   if count == 0 :
              return func
 if sign :
  return settings . TEMPLATE_STRING_IF_INVALID
    return retval
   if field . rel and isinstance ( field . rel , models . ManyToManyRel ) :
  else :
 import os
 return obj
 for choice in value :
  final_attrs = self . build_attrs ( attrs , name = name )
    for key , value in six . iteritems ( kwargs ) :
      widget = Select
   def d ( self ) :
      widget = TextInput
 comment_lineno_cache = t . lineno
 result . fields = tuple ( [ x . __deepcopy__ ( memo ) for x in self . fields ] )
              token = self . next_token ( )
                  self . stdout . write ( shutdown_message )
          from django . utils . daemonize import become_daemon
  elif ch == '(' :
 def __init__ ( self , attrs = None , choices = ( ) ) :
   def o ( self ) :
    elif maxsize is None :
 def wrapper ( cls ) :
              self . keyOrder . append ( key )
              rv = level
 inplural = False
 for key , value in dict . items ( self ) :
 VARIABLE_ATTRIBUTE_SEPARATOR = '.'
          self . _archive . close ( )
 new = '#: ' + orig_file
                  register_to . _registry = before_import_registry
          self . _assert_mutable ( )
  else :
              message = _ (  '%(datetime)s couldn\'t be interpreted '  'in time zone %(current_timezone)s; it '  'may be ambiguous or it may not exist.'  )
   os . chmod ( path , stat . S_IWRITE )
  from . html_parser import HTMLParser , HTMLParseError
  return form
              raise self . error_class ( "Unused '%s' at end of if expression." %  self . current_token . display ( ) )
   def __str__ ( self ) :
   DEFAULT_MIN_NUM = 0
                  try :
   UserModel = get_user_model ( )
   def __repr__ ( self ) :
 from django . utils . safestring import mark_safe , SafeData , mark_for_escaping
  def __init__ ( self , * args , ** kwargs ) :
                   return self . tag_function ( name )
      attrs = { 'model' : model }
 if not unused_char :
  return super ( SimpleTemplateResponse , self ) . content
 settingsfile = upath ( sys . modules [ settings . __module__ ] . __file__ )
   else :
 def __promise__ ( cls , klass , funcname , method ) :
  except http_cookies . CookieError :
 for name in loggers :
              self . _object_dict = dict ( ( o . pk , o ) for o in self . get_queryset ( ) )
          for first_select in _parse_date_fmt ( ) :
     seen_data . add ( row_data )
  full_file = os . path . join ( self . path , f )
   def _get_queryset ( self ) :
  if self . field . required and hasattr ( self . form , 'required_css_class' ) :
 if processors is None :
    def ngettext_lazy ( singular , plural , number = None ) :
  output_transaction = True
      if role in PALETTES [ NOCOLOR_PALETTE ] and definition :
   def gettext ( message ) :
          return 'form'
  pofile = os . path . join ( basedir , '%s.po' % str ( self . domain ) )
   def clean_ipv6_address ( ip_str , unpack_ipv4 = False ,  error_message = _ ( "This is not a valid IPv6 address." ) ) :
 pass
          self . max_length = kwargs . pop ( 'max_length' , None )
     class DeserializedObject ( object ) :
          return formats . date_format ( value , arg )
   if answer != "y" :
          return int ( str ( value ) [ - arg ] )
 if isinstance ( unicode_value , six . text_type ) :
   try :
    @ register . tag ( 'for' )
   warnings . simplefilter ( "default" , RemovedInNextVersionWarning )
    if response . has_header ( 'Vary' ) :
 obj = Node ( children , connector , negated )
   delta = 2000 - year
 self . current_app = current_app
              ext_list [ i ] = '.%s' % ext_list [ i ]
    @ register . filter ( is_safe = False )
              if i % 2 :
                  return False
 self . remove_potfiles ( )
  return dec
 file_field_list = [ ]
      help = "Prints the CREATE INDEX SQL statements for the given model module name(s)."
 loop_dict [ 'counter' ] = i + 1
 DOT_PATTERN = re . compile ( r'^\.\s*(\w+)\s*' )
                  config [ 'address' ] = self . as_tuple ( config [ 'address' ] )
                          out . write ( ' # %s' % line )
   class MLStripper ( HTMLParser ) :
 def phone2numeric_filter ( value ) :
 if isinstance ( stream_or_string , six . string_types ) :
   def __copy__ ( self ) :
              handler . addQuickElement ( "dc:creator" , item [ "author_name" ] , { "xmlns:dc" : "http://purl.org/dc/elements/1.1/" } )
          attrs [ 'exclude' ] = exclude
   return mark_safe ( '\n' . join ( output ) )
              self . instance = instance
 args . append ( work_file )
            try :
 from django . utils . six . moves import map
 return DebugNode ( )
 self . pos = 0
    for chunk in field_stream :
       def base36_to_int ( s ) :
                      lookup_str = callback . __module__ + "." + callback . __name__
         for log in existing :
      compare = lambda self , a , b : a > b
          return False
   def strptime ( self , value , format ) :
              try :
              return input_val
              try :
              self . xml . addQuickElement ( "None" )
           MAXSIZE = int ( ( 1 << 31 ) - 1 )
  elif isinstance ( obj , EscapeData ) :
          return self . tokens . pop ( 0 )
          return self . dicts [ - 1 ] . get ( key , otherwise )
 root [ KEY ] = root [ RESULT ] = None
               six . reraise ( ValidationError , ValidationError (  self . error_messages [ 'invalid_image' ] ,  code = 'invalid_image' ,  ) , sys . exc_info ( ) [ 2 ] )
 for app_config in apps . get_app_configs ( ) :
  elif isinstance ( value , datetime . time ) :
            form . save_m2m = save_m2m
  self . _callback_str = prefix + '.' + self . _callback_str
 from django . utils . encoding import force_text
          return strftime ( self , fmt )
 return self . form . errors . get ( self . name , self . form . error_class ( ) )
                     f . required = False
   if self . match is not None :
  except OSError :
   def top ( self ) :
    def get_git_changeset ( ) :
 @ stringfilter
 forms_to_delete = self . deleted_forms
 force_unicode = force_text
      def handle_merge ( self , loader , conflicts ) :
 self . cookies = SimpleCookie ( self . cookies )
  if instance is None :
  return '\n\n' . join ( paras )
                      block = self
 for f in post_sql_fields :
              form . save_m2m ( )
 in_index = - 3 if is_reversed else - 2
                  raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : val } ,  )
  return result
                  raise ValueError
          try :
 if not kwarg_format :
 top = bottom + self . per_page
     @ register . filter ( "timeuntil" , is_safe = False )
 if takes_context :
 self . prefix = prefix or self . get_default_prefix ( )
   def parse_file_upload ( self , META , post_data ) :
                      return "[Included template had syntax error: %s]" % e
   def __deepcopy__ ( self , memo ) :
 if transfer_encoding is not None :
              if getattr ( e , 'silent_variable_failure' , False ) :
                      result = middleware . process_view ( request , view_func , args , kwargs )
 if six . PY2 :
              initial = [ '' for x in range ( 0 , len ( data ) ) ]
 if value and not self . valid_value ( value ) :
              return 0
  return getattr ( _default , translation_function ) ( singular , plural , number )
          return mod . register
      help = "Creates new migration(s) for apps."
   def camel_case_to_spaces ( value ) :
          min_num = DEFAULT_MIN_NUM
    def is_valid_ipv6_address ( ip_str ) :
              if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
 __init__ = type . __init__
